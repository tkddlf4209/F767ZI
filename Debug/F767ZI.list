
F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cdc8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ea8  0801cfc8  0801cfc8  0002cfc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020e70  08020e70  000401ec  2**0
                  CONTENTS
  4 .ARM          00000008  08020e70  08020e70  00030e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020e78  08020e78  000401ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020e78  08020e78  00030e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020e7c  08020e7c  00030e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08020e80  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fb2c  200001ec  0802106c  000401ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000fd18  0802106c  0004fd18  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000401ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049f55  00000000  00000000  0004021a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008863  00000000  00000000  0008a16f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002a78  00000000  00000000  000929d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002860  00000000  00000000  00095450  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003ae47  00000000  00000000  00097cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000327ab  00000000  00000000  000d2af7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00128a5d  00000000  00000000  001052a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0022dcff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bfd8  00000000  00000000  0022dd7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001ec 	.word	0x200001ec
 800021c:	00000000 	.word	0x00000000
 8000220:	0801cfb0 	.word	0x0801cfb0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f0 	.word	0x200001f0
 800023c:	0801cfb0 	.word	0x0801cfb0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
	...

08000608 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4a07      	ldr	r2, [pc, #28]	; (8000634 <vApplicationGetIdleTaskMemory+0x2c>)
 8000618:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	4a06      	ldr	r2, [pc, #24]	; (8000638 <vApplicationGetIdleTaskMemory+0x30>)
 800061e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000626:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	20000208 	.word	0x20000208
 8000638:	2000025c 	.word	0x2000025c

0800063c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	uint8_t ch8 = ch;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch8, 1, HAL_MAX_DELAY);
 800064a:	f107 010f 	add.w	r1, r7, #15
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
 8000652:	2201      	movs	r2, #1
 8000654:	4803      	ldr	r0, [pc, #12]	; (8000664 <__io_putchar+0x28>)
 8000656:	f005 ff5f 	bl	8006518 <HAL_UART_Transmit>
	return ch;
 800065a:	687b      	ldr	r3, [r7, #4]
}
 800065c:	4618      	mov	r0, r3
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	2000895c 	.word	0x2000895c

08000668 <__io_getchar>:

int __io_getchar() {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
	uint8_t ch8;
	HAL_UART_Receive(&huart3, &ch8, 1, HAL_MAX_DELAY);
 800066e:	1df9      	adds	r1, r7, #7
 8000670:	f04f 33ff 	mov.w	r3, #4294967295
 8000674:	2201      	movs	r2, #1
 8000676:	4804      	ldr	r0, [pc, #16]	; (8000688 <__io_getchar+0x20>)
 8000678:	f005 ffdf 	bl	800663a <HAL_UART_Receive>
	return 0;
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	2000895c 	.word	0x2000895c

0800068c <HAL_UART_RxCpltCallback>:

// lora uart data
uint8_t lora_rv_data;
uint8_t lora_rv_buf[1024];
uint32_t lora_rv_buf_pos;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *uartHandle) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

	if (uartHandle->Instance == huart3.Instance) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <HAL_UART_RxCpltCallback+0x54>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	429a      	cmp	r2, r3
 800069e:	d01b      	beq.n	80006d8 <HAL_UART_RxCpltCallback+0x4c>
//			printf("%s\r\n", buf);
//			pos = 0;
//		}
//
//		HAL_UART_Receive_IT(&huart3, &lora_rv_data, 1);
	} else if (uartHandle->Instance == huart2.Instance) {
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <HAL_UART_RxCpltCallback+0x58>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d115      	bne.n	80006d8 <HAL_UART_RxCpltCallback+0x4c>

		lora_rv_buf[lora_rv_buf_pos++] = lora_rv_data;
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <HAL_UART_RxCpltCallback+0x5c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	490d      	ldr	r1, [pc, #52]	; (80006e8 <HAL_UART_RxCpltCallback+0x5c>)
 80006b4:	600a      	str	r2, [r1, #0]
 80006b6:	4a0d      	ldr	r2, [pc, #52]	; (80006ec <HAL_UART_RxCpltCallback+0x60>)
 80006b8:	7811      	ldrb	r1, [r2, #0]
 80006ba:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <HAL_UART_RxCpltCallback+0x64>)
 80006bc:	54d1      	strb	r1, [r2, r3]

		if (lora_rv_buf_pos == sizeof(lora_rv_buf)) {
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <HAL_UART_RxCpltCallback+0x5c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006c6:	d102      	bne.n	80006ce <HAL_UART_RxCpltCallback+0x42>
			//printf("%s", lora_rv_buf);
			lora_rv_buf_pos = 0;
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <HAL_UART_RxCpltCallback+0x5c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart2, &lora_rv_data, 1);
 80006ce:	2201      	movs	r2, #1
 80006d0:	4906      	ldr	r1, [pc, #24]	; (80006ec <HAL_UART_RxCpltCallback+0x60>)
 80006d2:	4804      	ldr	r0, [pc, #16]	; (80006e4 <HAL_UART_RxCpltCallback+0x58>)
 80006d4:	f006 f8da 	bl	800688c <HAL_UART_Receive_IT>
	}
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	2000895c 	.word	0x2000895c
 80006e4:	2000938c 	.word	0x2000938c
 80006e8:	20009410 	.word	0x20009410
 80006ec:	20008e2c 	.word	0x20008e2c
 80006f0:	20008f88 	.word	0x20008f88

080006f4 <Lora_Buf_Clear>:

void Lora_Buf_Clear() {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	memset(lora_rv_buf, 0x0, sizeof(lora_rv_buf));
 80006f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006fc:	2100      	movs	r1, #0
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <Lora_Buf_Clear+0x20>)
 8000700:	f018 fac2 	bl	8018c88 <memset>
	lora_rv_buf_pos = 0;
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <Lora_Buf_Clear+0x24>)
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800070a:	2064      	movs	r0, #100	; 0x64
 800070c:	f001 fa4a 	bl	8001ba4 <HAL_Delay>
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20008f88 	.word	0x20008f88
 8000718:	20009410 	.word	0x20009410

0800071c <Lora_Cmd_Send>:

void Lora_Cmd_Send(UART_HandleTypeDef *huart, char *cmd) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(huart, cmd, strlen(cmd));
 8000726:	6838      	ldr	r0, [r7, #0]
 8000728:	f7ff fd8a 	bl	8000240 <strlen>
 800072c:	4603      	mov	r3, r0
 800072e:	b29b      	uxth	r3, r3
 8000730:	461a      	mov	r2, r3
 8000732:	6839      	ldr	r1, [r7, #0]
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f006 f84d 	bl	80067d4 <HAL_UART_Transmit_IT>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <Lora_Str_Find>:

bool Lora_Str_Find(char *str) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	return strstr((char*) lora_rv_buf, str) != NULL;
 800074c:	6879      	ldr	r1, [r7, #4]
 800074e:	4806      	ldr	r0, [pc, #24]	; (8000768 <Lora_Str_Find+0x24>)
 8000750:	f019 f99e 	bl	8019a90 <strstr>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	bf14      	ite	ne
 800075a:	2301      	movne	r3, #1
 800075c:	2300      	moveq	r3, #0
 800075e:	b2db      	uxtb	r3, r3
}
 8000760:	4618      	mov	r0, r3
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20008f88 	.word	0x20008f88

0800076c <Print_Lora_Buf>:

void Print_Lora_Buf() {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

	printf("%s\r\n", lora_rv_buf);
 8000770:	4902      	ldr	r1, [pc, #8]	; (800077c <Print_Lora_Buf+0x10>)
 8000772:	4803      	ldr	r0, [pc, #12]	; (8000780 <Print_Lora_Buf+0x14>)
 8000774:	f019 f8a4 	bl	80198c0 <iprintf>
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20008f88 	.word	0x20008f88
 8000780:	0801d030 	.word	0x0801d030

08000784 <Lora_Confirm>:


bool Lora_Confirm(UART_HandleTypeDef *huart) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	Lora_Buf_Clear();
 800078c:	f7ff ffb2 	bl	80006f4 <Lora_Buf_Clear>
	Lora_Cmd_Send(huart, "at+set_config=lora:confirm:1\r\n");
 8000790:	490d      	ldr	r1, [pc, #52]	; (80007c8 <Lora_Confirm+0x44>)
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff ffc2 	bl	800071c <Lora_Cmd_Send>
	HAL_Delay(1000);
 8000798:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800079c:	f001 fa02 	bl	8001ba4 <HAL_Delay>

	//Print_Lora_Buf();

	if (Lora_Str_Find("OK")) {
 80007a0:	480a      	ldr	r0, [pc, #40]	; (80007cc <Lora_Confirm+0x48>)
 80007a2:	f7ff ffcf 	bl	8000744 <Lora_Str_Find>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d004      	beq.n	80007b6 <Lora_Confirm+0x32>
		printf("Lora_Confirm OK\r\n");
 80007ac:	4808      	ldr	r0, [pc, #32]	; (80007d0 <Lora_Confirm+0x4c>)
 80007ae:	f019 f8fb 	bl	80199a8 <puts>
		return true;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e003      	b.n	80007be <Lora_Confirm+0x3a>
	} else {
		printf("Lora_Confirm FAIL\r\n");
 80007b6:	4807      	ldr	r0, [pc, #28]	; (80007d4 <Lora_Confirm+0x50>)
 80007b8:	f019 f8f6 	bl	80199a8 <puts>
		return false;
 80007bc:	2300      	movs	r3, #0
	}
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	0801d038 	.word	0x0801d038
 80007cc:	0801d058 	.word	0x0801d058
 80007d0:	0801d05c 	.word	0x0801d05c
 80007d4:	0801d070 	.word	0x0801d070

080007d8 <Lora_INIT>:

bool Lora_INIT(UART_HandleTypeDef *huart, char *cmd) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
	Lora_Buf_Clear();
 80007e2:	f7ff ff87 	bl	80006f4 <Lora_Buf_Clear>
	Lora_Cmd_Send(huart, cmd);
 80007e6:	6839      	ldr	r1, [r7, #0]
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff ff97 	bl	800071c <Lora_Cmd_Send>
	HAL_Delay(1000);
 80007ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007f2:	f001 f9d7 	bl	8001ba4 <HAL_Delay>

	//check uart response
	//Print_Lora_Buf();

	if (Lora_Str_Find("OK")) {
 80007f6:	480a      	ldr	r0, [pc, #40]	; (8000820 <Lora_INIT+0x48>)
 80007f8:	f7ff ffa4 	bl	8000744 <Lora_Str_Find>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d005      	beq.n	800080e <Lora_INIT+0x36>
		printf("Lora_INIT OK : %s", cmd);
 8000802:	6839      	ldr	r1, [r7, #0]
 8000804:	4807      	ldr	r0, [pc, #28]	; (8000824 <Lora_INIT+0x4c>)
 8000806:	f019 f85b 	bl	80198c0 <iprintf>
		return true;
 800080a:	2301      	movs	r3, #1
 800080c:	e004      	b.n	8000818 <Lora_INIT+0x40>
	} else {
		printf("Lora_INIT FAIL : %s", cmd);
 800080e:	6839      	ldr	r1, [r7, #0]
 8000810:	4805      	ldr	r0, [pc, #20]	; (8000828 <Lora_INIT+0x50>)
 8000812:	f019 f855 	bl	80198c0 <iprintf>
		//Print_Lora_Buf();
	}
	return false;
 8000816:	2300      	movs	r3, #0

}
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	0801d058 	.word	0x0801d058
 8000824:	0801d084 	.word	0x0801d084
 8000828:	0801d098 	.word	0x0801d098

0800082c <Lora_Version>:

void Lora_Version(UART_HandleTypeDef *huart) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	Lora_Buf_Clear();
 8000834:	f7ff ff5e 	bl	80006f4 <Lora_Buf_Clear>
	Lora_Cmd_Send(huart, "at+version\r\n");
 8000838:	490c      	ldr	r1, [pc, #48]	; (800086c <Lora_Version+0x40>)
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff ff6e 	bl	800071c <Lora_Cmd_Send>
	HAL_Delay(1000);
 8000840:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000844:	f001 f9ae 	bl	8001ba4 <HAL_Delay>
	if (Lora_Str_Find("OK")) {
 8000848:	4809      	ldr	r0, [pc, #36]	; (8000870 <Lora_Version+0x44>)
 800084a:	f7ff ff7b 	bl	8000744 <Lora_Str_Find>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d003      	beq.n	800085c <Lora_Version+0x30>
		printf("Lora_Version OK\r\n");
 8000854:	4807      	ldr	r0, [pc, #28]	; (8000874 <Lora_Version+0x48>)
 8000856:	f019 f8a7 	bl	80199a8 <puts>
		//Print_Lora_Buf();
	} else {
		printf("Lora_Version FAIL\r\n");
	}
}
 800085a:	e002      	b.n	8000862 <Lora_Version+0x36>
		printf("Lora_Version FAIL\r\n");
 800085c:	4806      	ldr	r0, [pc, #24]	; (8000878 <Lora_Version+0x4c>)
 800085e:	f019 f8a3 	bl	80199a8 <puts>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	0801d0ac 	.word	0x0801d0ac
 8000870:	0801d058 	.word	0x0801d058
 8000874:	0801d0bc 	.word	0x0801d0bc
 8000878:	0801d0d0 	.word	0x0801d0d0

0800087c <Lora_Config>:

bool Lora_Config(UART_HandleTypeDef *huart) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b0a2      	sub	sp, #136	; 0x88
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]

	char cmd[128];
	// set KR920
	sprintf(cmd, "at+set_config=lora:region:%s\r\n", REGION);
 8000884:	f107 0308 	add.w	r3, r7, #8
 8000888:	4a21      	ldr	r2, [pc, #132]	; (8000910 <Lora_Config+0x94>)
 800088a:	4922      	ldr	r1, [pc, #136]	; (8000914 <Lora_Config+0x98>)
 800088c:	4618      	mov	r0, r3
 800088e:	f019 f8cd 	bl	8019a2c <siprintf>
	if (Lora_INIT(huart, cmd)) {
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	4619      	mov	r1, r3
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff ff9d 	bl	80007d8 <Lora_INIT>
	}

	// set TX Power
	sprintf(cmd, "at+set_config=lora:tx_power:%s\r\n", TX_POWER);
 800089e:	f107 0308 	add.w	r3, r7, #8
 80008a2:	4a1d      	ldr	r2, [pc, #116]	; (8000918 <Lora_Config+0x9c>)
 80008a4:	491d      	ldr	r1, [pc, #116]	; (800091c <Lora_Config+0xa0>)
 80008a6:	4618      	mov	r0, r3
 80008a8:	f019 f8c0 	bl	8019a2c <siprintf>
	if (Lora_INIT(huart, cmd)) {
 80008ac:	f107 0308 	add.w	r3, r7, #8
 80008b0:	4619      	mov	r1, r3
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f7ff ff90 	bl	80007d8 <Lora_INIT>
	}

	// set app_eui
	sprintf(cmd, "at+set_config=lora:app_eui:%s\r\n", APP_EUI);
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	4a18      	ldr	r2, [pc, #96]	; (8000920 <Lora_Config+0xa4>)
 80008be:	4919      	ldr	r1, [pc, #100]	; (8000924 <Lora_Config+0xa8>)
 80008c0:	4618      	mov	r0, r3
 80008c2:	f019 f8b3 	bl	8019a2c <siprintf>
	if (Lora_INIT(huart, cmd)) {
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	4619      	mov	r1, r3
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff83 	bl	80007d8 <Lora_INIT>
	}

	// set dev_eui
	sprintf(cmd, "at+set_config=lora:dev_eui:%s\r\n", DEV_EUI);
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	4a14      	ldr	r2, [pc, #80]	; (8000928 <Lora_Config+0xac>)
 80008d8:	4914      	ldr	r1, [pc, #80]	; (800092c <Lora_Config+0xb0>)
 80008da:	4618      	mov	r0, r3
 80008dc:	f019 f8a6 	bl	8019a2c <siprintf>
	if (Lora_INIT(huart, cmd)) {
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	4619      	mov	r1, r3
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ff76 	bl	80007d8 <Lora_INIT>
	}

	// set app_key
	sprintf(cmd, "at+set_config=lora:app_key:%s\r\n", APP_KEY);
 80008ec:	f107 0308 	add.w	r3, r7, #8
 80008f0:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <Lora_Config+0xb4>)
 80008f2:	4910      	ldr	r1, [pc, #64]	; (8000934 <Lora_Config+0xb8>)
 80008f4:	4618      	mov	r0, r3
 80008f6:	f019 f899 	bl	8019a2c <siprintf>
	if (Lora_INIT(huart, cmd)) {
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	4619      	mov	r1, r3
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff ff69 	bl	80007d8 <Lora_INIT>
	}

}
 8000906:	bf00      	nop
 8000908:	4618      	mov	r0, r3
 800090a:	3788      	adds	r7, #136	; 0x88
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	0801d0e4 	.word	0x0801d0e4
 8000914:	0801d0ec 	.word	0x0801d0ec
 8000918:	0801d10c 	.word	0x0801d10c
 800091c:	0801d110 	.word	0x0801d110
 8000920:	0801d134 	.word	0x0801d134
 8000924:	0801d148 	.word	0x0801d148
 8000928:	0801d168 	.word	0x0801d168
 800092c:	0801d17c 	.word	0x0801d17c
 8000930:	0801d19c 	.word	0x0801d19c
 8000934:	0801d1c0 	.word	0x0801d1c0

08000938 <Lora_Status>:

bool Lora_Status(UART_HandleTypeDef *huart) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	Lora_Buf_Clear();
 8000940:	f7ff fed8 	bl	80006f4 <Lora_Buf_Clear>
	Lora_Cmd_Send(huart, "at+get_config=lora:status\r\n");
 8000944:	490d      	ldr	r1, [pc, #52]	; (800097c <Lora_Status+0x44>)
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff fee8 	bl	800071c <Lora_Cmd_Send>
	HAL_Delay(1000);
 800094c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000950:	f001 f928 	bl	8001ba4 <HAL_Delay>
	//Print_Lora_Buf();
	if (Lora_Str_Find("Joined Network:true")) {
 8000954:	480a      	ldr	r0, [pc, #40]	; (8000980 <Lora_Status+0x48>)
 8000956:	f7ff fef5 	bl	8000744 <Lora_Str_Find>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d004      	beq.n	800096a <Lora_Status+0x32>
		printf("Joined Network:true\r\n");
 8000960:	4808      	ldr	r0, [pc, #32]	; (8000984 <Lora_Status+0x4c>)
 8000962:	f019 f821 	bl	80199a8 <puts>
		return true;
 8000966:	2301      	movs	r3, #1
 8000968:	e003      	b.n	8000972 <Lora_Status+0x3a>
	} else {
		printf("Joined Network:false\r\n");
 800096a:	4807      	ldr	r0, [pc, #28]	; (8000988 <Lora_Status+0x50>)
 800096c:	f019 f81c 	bl	80199a8 <puts>
		return false;
 8000970:	2300      	movs	r3, #0
	}
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	0801d1e0 	.word	0x0801d1e0
 8000980:	0801d1fc 	.word	0x0801d1fc
 8000984:	0801d210 	.word	0x0801d210
 8000988:	0801d228 	.word	0x0801d228

0800098c <Lora_Join>:

bool Lora_Join(UART_HandleTypeDef *huart) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	Lora_Buf_Clear();
 8000994:	f7ff feae 	bl	80006f4 <Lora_Buf_Clear>
	Lora_Cmd_Send(huart, "at+join\r\n");
 8000998:	490b      	ldr	r1, [pc, #44]	; (80009c8 <Lora_Join+0x3c>)
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff febe 	bl	800071c <Lora_Cmd_Send>
	HAL_Delay(5000);
 80009a0:	f241 3088 	movw	r0, #5000	; 0x1388
 80009a4:	f001 f8fe 	bl	8001ba4 <HAL_Delay>
	Print_Lora_Buf();
 80009a8:	f7ff fee0 	bl	800076c <Print_Lora_Buf>
	if (Lora_Str_Find("Join Success")) {
 80009ac:	4807      	ldr	r0, [pc, #28]	; (80009cc <Lora_Join+0x40>)
 80009ae:	f7ff fec9 	bl	8000744 <Lora_Str_Find>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <Lora_Join+0x30>
		return true;
 80009b8:	2301      	movs	r3, #1
 80009ba:	e000      	b.n	80009be <Lora_Join+0x32>
	} else {
		return false;
 80009bc:	2300      	movs	r3, #0
	}
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	0801d240 	.word	0x0801d240
 80009cc:	0801d24c 	.word	0x0801d24c

080009d0 <Lora_Send>:

char lora_send_msg[128];
char lora_send_payload[128];
uint32_t len;
struct lora_packet_t lora_packet_t;
bool Lora_Send(UART_HandleTypeDef *huart) {
 80009d0:	b5b0      	push	{r4, r5, r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

	len = sprintf((char*) lora_send_msg, "at+send=lora:10:");
 80009d8:	4a48      	ldr	r2, [pc, #288]	; (8000afc <Lora_Send+0x12c>)
 80009da:	4b49      	ldr	r3, [pc, #292]	; (8000b00 <Lora_Send+0x130>)
 80009dc:	4615      	mov	r5, r2
 80009de:	461c      	mov	r4, r3
 80009e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e2:	6028      	str	r0, [r5, #0]
 80009e4:	6069      	str	r1, [r5, #4]
 80009e6:	60aa      	str	r2, [r5, #8]
 80009e8:	60eb      	str	r3, [r5, #12]
 80009ea:	7823      	ldrb	r3, [r4, #0]
 80009ec:	742b      	strb	r3, [r5, #16]
 80009ee:	2310      	movs	r3, #16
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b44      	ldr	r3, [pc, #272]	; (8000b04 <Lora_Send+0x134>)
 80009f4:	601a      	str	r2, [r3, #0]

	lora_packet_t.device_id = 1;
 80009f6:	4b44      	ldr	r3, [pc, #272]	; (8000b08 <Lora_Send+0x138>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	f042 0201 	orr.w	r2, r2, #1
 80009fe:	701a      	strb	r2, [r3, #0]
 8000a00:	2200      	movs	r2, #0
 8000a02:	705a      	strb	r2, [r3, #1]
 8000a04:	2200      	movs	r2, #0
 8000a06:	709a      	strb	r2, [r3, #2]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	70da      	strb	r2, [r3, #3]
	lora_packet_t.temp = 2;
 8000a0c:	4b3e      	ldr	r3, [pc, #248]	; (8000b08 <Lora_Send+0x138>)
 8000a0e:	2202      	movs	r2, #2
 8000a10:	711a      	strb	r2, [r3, #4]
	lora_packet_t.vocs = 3;
 8000a12:	4b3d      	ldr	r3, [pc, #244]	; (8000b08 <Lora_Send+0x138>)
 8000a14:	2203      	movs	r2, #3
 8000a16:	715a      	strb	r2, [r3, #5]
	lora_packet_t.smoke = 4;
 8000a18:	4b3b      	ldr	r3, [pc, #236]	; (8000b08 <Lora_Send+0x138>)
 8000a1a:	2204      	movs	r2, #4
 8000a1c:	719a      	strb	r2, [r3, #6]
	lora_packet_t.vibr = 5;
 8000a1e:	4b3a      	ldr	r3, [pc, #232]	; (8000b08 <Lora_Send+0x138>)
 8000a20:	2205      	movs	r2, #5
 8000a22:	71da      	strb	r2, [r3, #7]
	lora_packet_t.sound = 6;
 8000a24:	4b38      	ldr	r3, [pc, #224]	; (8000b08 <Lora_Send+0x138>)
 8000a26:	2206      	movs	r2, #6
 8000a28:	721a      	strb	r2, [r3, #8]

	for (uint8_t i = 0; i < sizeof(struct lora_packet_t); i++) {
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	73fb      	strb	r3, [r7, #15]
 8000a2e:	e012      	b.n	8000a56 <Lora_Send+0x86>
		sprintf((char*) &lora_send_msg[len + (i * 2)], "%02X",
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b33      	ldr	r3, [pc, #204]	; (8000b04 <Lora_Send+0x134>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a2f      	ldr	r2, [pc, #188]	; (8000afc <Lora_Send+0x12c>)
 8000a3e:	1898      	adds	r0, r3, r2
				((char*) &lora_packet_t)[i]);
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	4a31      	ldr	r2, [pc, #196]	; (8000b08 <Lora_Send+0x138>)
 8000a44:	4413      	add	r3, r2
 8000a46:	781b      	ldrb	r3, [r3, #0]
		sprintf((char*) &lora_send_msg[len + (i * 2)], "%02X",
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4930      	ldr	r1, [pc, #192]	; (8000b0c <Lora_Send+0x13c>)
 8000a4c:	f018 ffee 	bl	8019a2c <siprintf>
	for (uint8_t i = 0; i < sizeof(struct lora_packet_t); i++) {
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	3301      	adds	r3, #1
 8000a54:	73fb      	strb	r3, [r7, #15]
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	2b08      	cmp	r3, #8
 8000a5a:	d9e9      	bls.n	8000a30 <Lora_Send+0x60>
	}

	len += sizeof(struct lora_packet_t) * 2;
 8000a5c:	4b29      	ldr	r3, [pc, #164]	; (8000b04 <Lora_Send+0x134>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	3312      	adds	r3, #18
 8000a62:	4a28      	ldr	r2, [pc, #160]	; (8000b04 <Lora_Send+0x134>)
 8000a64:	6013      	str	r3, [r2, #0]

	lora_send_msg[len++] = '\r';
 8000a66:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <Lora_Send+0x134>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	1c5a      	adds	r2, r3, #1
 8000a6c:	4925      	ldr	r1, [pc, #148]	; (8000b04 <Lora_Send+0x134>)
 8000a6e:	600a      	str	r2, [r1, #0]
 8000a70:	4a22      	ldr	r2, [pc, #136]	; (8000afc <Lora_Send+0x12c>)
 8000a72:	210d      	movs	r1, #13
 8000a74:	54d1      	strb	r1, [r2, r3]
	lora_send_msg[len++] = '\n';
 8000a76:	4b23      	ldr	r3, [pc, #140]	; (8000b04 <Lora_Send+0x134>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	4921      	ldr	r1, [pc, #132]	; (8000b04 <Lora_Send+0x134>)
 8000a7e:	600a      	str	r2, [r1, #0]
 8000a80:	4a1e      	ldr	r2, [pc, #120]	; (8000afc <Lora_Send+0x12c>)
 8000a82:	210a      	movs	r1, #10
 8000a84:	54d1      	strb	r1, [r2, r3]

	//printf("%s",lora_send_msg, sizeof(struct lora_packet_t));
	Lora_Buf_Clear();
 8000a86:	f7ff fe35 	bl	80006f4 <Lora_Buf_Clear>
	Lora_Cmd_Send(huart, lora_send_msg);
 8000a8a:	491c      	ldr	r1, [pc, #112]	; (8000afc <Lora_Send+0x12c>)
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff fe45 	bl	800071c <Lora_Cmd_Send>
	HAL_Delay(500);
 8000a92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a96:	f001 f885 	bl	8001ba4 <HAL_Delay>

	for (uint8_t retry_cnt = 0; retry_cnt < 10; retry_cnt++) {
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	73bb      	strb	r3, [r7, #14]
 8000a9e:	e024      	b.n	8000aea <Lora_Send+0x11a>
		HAL_Delay(1000);
 8000aa0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa4:	f001 f87e 	bl	8001ba4 <HAL_Delay>
		//Print_Lora_Buf();
		if (Lora_Str_Find("OK")) {
 8000aa8:	4819      	ldr	r0, [pc, #100]	; (8000b10 <Lora_Send+0x140>)
 8000aaa:	f7ff fe4b 	bl	8000744 <Lora_Str_Find>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d00d      	beq.n	8000ad0 <Lora_Send+0x100>
			if (Lora_Str_Find("at+recv")) {
 8000ab4:	4817      	ldr	r0, [pc, #92]	; (8000b14 <Lora_Send+0x144>)
 8000ab6:	f7ff fe45 	bl	8000744 <Lora_Str_Find>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d003      	beq.n	8000ac8 <Lora_Send+0xf8>
				state = true;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <Lora_Send+0x148>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	701a      	strb	r2, [r3, #0]
			} else {
				state = false;
			}
			break;
 8000ac6:	e013      	b.n	8000af0 <Lora_Send+0x120>
				state = false;
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <Lora_Send+0x148>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
			break;
 8000ace:	e00f      	b.n	8000af0 <Lora_Send+0x120>
		} else if (Lora_Str_Find("ERROR: RUI_LORA_STATUS_NO_NETWORK_JOINED 86")) { // JOIN 이 안되어있는 경우
 8000ad0:	4812      	ldr	r0, [pc, #72]	; (8000b1c <Lora_Send+0x14c>)
 8000ad2:	f7ff fe37 	bl	8000744 <Lora_Str_Find>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <Lora_Send+0x114>
			state = false;
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <Lora_Send+0x148>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
			break;
 8000ae2:	e005      	b.n	8000af0 <Lora_Send+0x120>
	for (uint8_t retry_cnt = 0; retry_cnt < 10; retry_cnt++) {
 8000ae4:	7bbb      	ldrb	r3, [r7, #14]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	73bb      	strb	r3, [r7, #14]
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
 8000aec:	2b09      	cmp	r3, #9
 8000aee:	d9d7      	bls.n	8000aa0 <Lora_Send+0xd0>
		}
	}
}
 8000af0:	bf00      	nop
 8000af2:	4618      	mov	r0, r3
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bdb0      	pop	{r4, r5, r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20008eb4 	.word	0x20008eb4
 8000b00:	0801d25c 	.word	0x0801d25c
 8000b04:	20009420 	.word	0x20009420
 8000b08:	20009414 	.word	0x20009414
 8000b0c:	0801d270 	.word	0x0801d270
 8000b10:	0801d058 	.word	0x0801d058
 8000b14:	0801d278 	.word	0x0801d278
 8000b18:	20008f34 	.word	0x20008f34
 8000b1c:	0801d280 	.word	0x0801d280

08000b20 <StartI2CTask>:

void StartI2CTask(void const *argument) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af02      	add	r7, sp, #8
 8000b26:	6078      	str	r0, [r7, #4]
	printf("----- startI2CTask ------\r\n");
 8000b28:	4834      	ldr	r0, [pc, #208]	; (8000bfc <StartI2CTask+0xdc>)
 8000b2a:	f018 ff3d 	bl	80199a8 <puts>
	HAL_StatusTypeDef ret;
	uint8_t send_buf[2] = { 0x24, 0x0b };
 8000b2e:	4b34      	ldr	r3, [pc, #208]	; (8000c00 <StartI2CTask+0xe0>)
 8000b30:	881b      	ldrh	r3, [r3, #0]
 8000b32:	823b      	strh	r3, [r7, #16]
	uint8_t i2c_rx_buf[6] = { 0 };
 8000b34:	f107 0308 	add.w	r3, r7, #8
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	809a      	strh	r2, [r3, #4]

//lora_rv_data = netbuf_alloc(buf, 128);

	while (1) {
		ret = HAL_I2C_Master_Transmit(&hi2c2, 0x88, send_buf, 2, HAL_MAX_DELAY);
 8000b3e:	f107 0210 	add.w	r2, r7, #16
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2302      	movs	r3, #2
 8000b4a:	2188      	movs	r1, #136	; 0x88
 8000b4c:	482d      	ldr	r0, [pc, #180]	; (8000c04 <StartI2CTask+0xe4>)
 8000b4e:	f002 fe37 	bl	80037c0 <HAL_I2C_Master_Transmit>
 8000b52:	4603      	mov	r3, r0
 8000b54:	77fb      	strb	r3, [r7, #31]
		if (ret != HAL_OK) {
 8000b56:	7ffb      	ldrb	r3, [r7, #31]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d003      	beq.n	8000b64 <StartI2CTask+0x44>
			printf("i2s send error\r\n");
 8000b5c:	482a      	ldr	r0, [pc, #168]	; (8000c08 <StartI2CTask+0xe8>)
 8000b5e:	f018 ff23 	bl	80199a8 <puts>
 8000b62:	e046      	b.n	8000bf2 <StartI2CTask+0xd2>
		} else {
			ret = HAL_I2C_Master_Receive(&hi2c2, 0x88, i2c_rx_buf, 6,
 8000b64:	f107 0208 	add.w	r2, r7, #8
 8000b68:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2306      	movs	r3, #6
 8000b70:	2188      	movs	r1, #136	; 0x88
 8000b72:	4824      	ldr	r0, [pc, #144]	; (8000c04 <StartI2CTask+0xe4>)
 8000b74:	f002 ff18 	bl	80039a8 <HAL_I2C_Master_Receive>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	77fb      	strb	r3, [r7, #31]
			HAL_MAX_DELAY);

			if (ret != HAL_OK) {
 8000b7c:	7ffb      	ldrb	r3, [r7, #31]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <StartI2CTask+0x6a>
				printf("i2s receive error\r\n");
 8000b82:	4822      	ldr	r0, [pc, #136]	; (8000c0c <StartI2CTask+0xec>)
 8000b84:	f018 ff10 	bl	80199a8 <puts>
 8000b88:	e033      	b.n	8000bf2 <StartI2CTask+0xd2>
//				printf("test %d lora_rv_data : %x %x %x %x %x %x\r\n",
//						sizeof(i2c_rx_buf), i2c_rx_buf[0], i2c_rx_buf[1],
//						i2c_rx_buf[2], i2c_rx_buf[3], i2c_rx_buf[4],
//						i2c_rx_buf[5]);
				uint32_t temp = (float) ((float) 175.0
						* (float) (i2c_rx_buf[0] * 0x100 + i2c_rx_buf[1])
 8000b8a:	7a3b      	ldrb	r3, [r7, #8]
 8000b8c:	021b      	lsls	r3, r3, #8
 8000b8e:	7a7a      	ldrb	r2, [r7, #9]
 8000b90:	4413      	add	r3, r2
 8000b92:	ee07 3a90 	vmov	s15, r3
 8000b96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b9a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000c10 <StartI2CTask+0xf0>
 8000b9e:	ee27 7a87 	vmul.f32	s14, s15, s14
						/ (float) 65535.0 - 45.0);
 8000ba2:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8000c14 <StartI2CTask+0xf4>
 8000ba6:	eec7 7a26 	vdiv.f32	s15, s14, s13
				uint32_t temp = (float) ((float) 175.0
 8000baa:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000c18 <StartI2CTask+0xf8>
 8000bae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bb6:	ee17 3a90 	vmov	r3, s15
 8000bba:	61bb      	str	r3, [r7, #24]
				uint32_t humi = (float) ((float) 100.0
						* (float) (i2c_rx_buf[3] * 0x100 + i2c_rx_buf[4])
 8000bbc:	7afb      	ldrb	r3, [r7, #11]
 8000bbe:	021b      	lsls	r3, r3, #8
 8000bc0:	7b3a      	ldrb	r2, [r7, #12]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	ee07 3a90 	vmov	s15, r3
 8000bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bcc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000c1c <StartI2CTask+0xfc>
 8000bd0:	ee27 7a87 	vmul.f32	s14, s15, s14
				uint32_t humi = (float) ((float) 100.0
 8000bd4:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000c14 <StartI2CTask+0xf4>
 8000bd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000be0:	ee17 3a90 	vmov	r3, s15
 8000be4:	617b      	str	r3, [r7, #20]
						/ (float) 65535.0);
				//printf("temp : %d , humi : %d \r\n", temp, humi);
				t = temp;
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	4a0d      	ldr	r2, [pc, #52]	; (8000c20 <StartI2CTask+0x100>)
 8000bea:	6013      	str	r3, [r2, #0]
				h = humi;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <StartI2CTask+0x104>)
 8000bf0:	6013      	str	r3, [r2, #0]

				//netconn_write(conn, send_buf, sizeof(send_buf), NETCONN_NOFLAG);

			}
		}
		HAL_Delay(10000);
 8000bf2:	f242 7010 	movw	r0, #10000	; 0x2710
 8000bf6:	f000 ffd5 	bl	8001ba4 <HAL_Delay>
		ret = HAL_I2C_Master_Transmit(&hi2c2, 0x88, send_buf, 2, HAL_MAX_DELAY);
 8000bfa:	e7a0      	b.n	8000b3e <StartI2CTask+0x1e>
 8000bfc:	0801d2ac 	.word	0x0801d2ac
 8000c00:	0801d2ec 	.word	0x0801d2ec
 8000c04:	20008de0 	.word	0x20008de0
 8000c08:	0801d2c8 	.word	0x0801d2c8
 8000c0c:	0801d2d8 	.word	0x0801d2d8
 8000c10:	432f0000 	.word	0x432f0000
 8000c14:	477fff00 	.word	0x477fff00
 8000c18:	42340000 	.word	0x42340000
 8000c1c:	42c80000 	.word	0x42c80000
 8000c20:	20008948 	.word	0x20008948
 8000c24:	20009388 	.word	0x20009388

08000c28 <initLoRa>:
	}
}

void initLoRa() {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

	if (HAL_UART_Receive_IT(&huart2, &lora_rv_data, 1) == HAL_OK) {
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	491c      	ldr	r1, [pc, #112]	; (8000ca0 <initLoRa+0x78>)
 8000c30:	481c      	ldr	r0, [pc, #112]	; (8000ca4 <initLoRa+0x7c>)
 8000c32:	f005 fe2b 	bl	800688c <HAL_UART_Receive_IT>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <initLoRa+0x1a>
		printf("\r\n----- LORA_UART_RECEIVER HAL_OK ------\r\n");
 8000c3c:	481a      	ldr	r0, [pc, #104]	; (8000ca8 <initLoRa+0x80>)
 8000c3e:	f018 feb3 	bl	80199a8 <puts>
	}

// set Lora Confirm mode
	Lora_Confirm(&huart2);
 8000c42:	4818      	ldr	r0, [pc, #96]	; (8000ca4 <initLoRa+0x7c>)
 8000c44:	f7ff fd9e 	bl	8000784 <Lora_Confirm>

// init lora config (region , tx power , app eui, dev eui, app key )
	Lora_Config(&huart2);
 8000c48:	4816      	ldr	r0, [pc, #88]	; (8000ca4 <initLoRa+0x7c>)
 8000c4a:	f7ff fe17 	bl	800087c <Lora_Config>

// check lora version
	Lora_Version(&huart2);
 8000c4e:	4815      	ldr	r0, [pc, #84]	; (8000ca4 <initLoRa+0x7c>)
 8000c50:	f7ff fdec 	bl	800082c <Lora_Version>

	printf("LORA RAK JOIN CHECK START!\r\n");
 8000c54:	4815      	ldr	r0, [pc, #84]	; (8000cac <initLoRa+0x84>)
 8000c56:	f018 fea7 	bl	80199a8 <puts>

	while (1) {
		state = Lora_Status(&huart2); // JOIN이 되어있음
 8000c5a:	4812      	ldr	r0, [pc, #72]	; (8000ca4 <initLoRa+0x7c>)
 8000c5c:	f7ff fe6c 	bl	8000938 <Lora_Status>
 8000c60:	4603      	mov	r3, r0
 8000c62:	461a      	mov	r2, r3
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <initLoRa+0x88>)
 8000c66:	701a      	strb	r2, [r3, #0]
		if (state) {
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <initLoRa+0x88>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d003      	beq.n	8000c78 <initLoRa+0x50>
			lora_init = true;
 8000c70:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <initLoRa+0x8c>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
			break;
 8000c76:	e00d      	b.n	8000c94 <initLoRa+0x6c>
		} else { // JOIN 안되어 있음
			state = Lora_Join(&huart2);
 8000c78:	480a      	ldr	r0, [pc, #40]	; (8000ca4 <initLoRa+0x7c>)
 8000c7a:	f7ff fe87 	bl	800098c <Lora_Join>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <initLoRa+0x88>)
 8000c84:	701a      	strb	r2, [r3, #0]
			if (state == true) {
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <initLoRa+0x88>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d0e5      	beq.n	8000c5a <initLoRa+0x32>
				lora_init = true;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <initLoRa+0x8c>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	701a      	strb	r2, [r3, #0]
				break;
			}
		}
	}
	printf("LORA RAK JOIN CHECK Finish!\r\n");
 8000c94:	4808      	ldr	r0, [pc, #32]	; (8000cb8 <initLoRa+0x90>)
 8000c96:	f018 fe87 	bl	80199a8 <puts>
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20008e2c 	.word	0x20008e2c
 8000ca4:	2000938c 	.word	0x2000938c
 8000ca8:	0801d2f0 	.word	0x0801d2f0
 8000cac:	0801d31c 	.word	0x0801d31c
 8000cb0:	20008f34 	.word	0x20008f34
 8000cb4:	20009424 	.word	0x20009424
 8000cb8:	0801d338 	.word	0x0801d338

08000cbc <StartClientTask>:

void StartClientTask(void const *argument) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

	HAL_Delay(1000);
 8000cc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cc8:	f000 ff6c 	bl	8001ba4 <HAL_Delay>
	printf("----- StartClientTask ------\r\n");
 8000ccc:	4841      	ldr	r0, [pc, #260]	; (8000dd4 <StartClientTask+0x118>)
 8000cce:	f018 fe6b 	bl	80199a8 <puts>
	u16_t nWritten; //write buffer index

//LWIP_UNUSED_ARG(argument); // ?��?��?���??????? ?��?�� ?��?��?�� ???�� 컴파?��?�� 경고 ?���??????? 목적

	while (1) {
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0
 8000cd2:	4b41      	ldr	r3, [pc, #260]	; (8000dd8 <StartClientTask+0x11c>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d007      	beq.n	8000cea <StartClientTask+0x2e>
 8000cda:	4b3f      	ldr	r3, [pc, #252]	; (8000dd8 <StartClientTask+0x11c>)
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d003      	beq.n	8000cea <StartClientTask+0x2e>
				|| gnetif.gw.addr == 0) {
 8000ce2:	4b3d      	ldr	r3, [pc, #244]	; (8000dd8 <StartClientTask+0x11c>)
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d107      	bne.n	8000cfa <StartClientTask+0x3e>
			printf("no valid ip \r\n");
 8000cea:	483c      	ldr	r0, [pc, #240]	; (8000ddc <StartClientTask+0x120>)
 8000cec:	f018 fe5c 	bl	80199a8 <puts>
			HAL_Delay(1000);
 8000cf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf4:	f000 ff56 	bl	8001ba4 <HAL_Delay>
			continue;
 8000cf8:	e06a      	b.n	8000dd0 <StartClientTask+0x114>
		}
		//print_ip(gnetif.ip_addr.addr, gnetif.netmask.addr, gnetif.gw.addr);
		//printf("%"PRIu32"\r\n", gnetif.ip_addr.addr); //print time information

		nRead = 0;			//clear indexes
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	83fb      	strh	r3, [r7, #30]
		nWritten = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	83bb      	strh	r3, [r7, #28]

		//conn = netconn_new(NETCONN_TCP); //new tcp netconn
		conn = netconn_new(NETCONN_UDP);			//new udp netconn
 8000d02:	2200      	movs	r2, #0
 8000d04:	2100      	movs	r1, #0
 8000d06:	2020      	movs	r0, #32
 8000d08:	f00a fc66 	bl	800b5d8 <netconn_new_with_proto_and_callback>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	4b34      	ldr	r3, [pc, #208]	; (8000de0 <StartClientTask+0x124>)
 8000d10:	601a      	str	r2, [r3, #0]

		if (conn != NULL) {
 8000d12:	4b33      	ldr	r3, [pc, #204]	; (8000de0 <StartClientTask+0x124>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0db      	beq.n	8000cd2 <StartClientTask+0x16>

			//printf("start TCP connect\r\n");

			IP4_ADDR(&server_addr, SERVER_IP1, SERVER_IP2, SERVER_IP3,
 8000d1a:	4b32      	ldr	r3, [pc, #200]	; (8000de4 <StartClientTask+0x128>)
 8000d1c:	4a32      	ldr	r2, [pc, #200]	; (8000de8 <StartClientTask+0x12c>)
 8000d1e:	601a      	str	r2, [r3, #0]
					SERVER_IP4);	//server ip
			err = netconn_connect(conn, &server_addr, SERVER_PORT);	//connect to the server
 8000d20:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <StartClientTask+0x124>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000d28:	492e      	ldr	r1, [pc, #184]	; (8000de4 <StartClientTask+0x128>)
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f00a fd0e 	bl	800b74c <netconn_connect>
 8000d30:	4603      	mov	r3, r0
 8000d32:	76fb      	strb	r3, [r7, #27]

			if (err != ERR_OK) {
 8000d34:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d00f      	beq.n	8000d5c <StartClientTask+0xa0>
				printf("connect ERR %d\r\n", err);
 8000d3c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000d40:	4619      	mov	r1, r3
 8000d42:	482a      	ldr	r0, [pc, #168]	; (8000dec <StartClientTask+0x130>)
 8000d44:	f018 fdbc 	bl	80198c0 <iprintf>
				netconn_delete(conn); //free memory
 8000d48:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <StartClientTask+0x124>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f00a fce1 	bl	800b714 <netconn_delete>
				HAL_Delay(1000);
 8000d52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d56:	f000 ff25 	bl	8001ba4 <HAL_Delay>
				continue;
 8000d5a:	e039      	b.n	8000dd0 <StartClientTask+0x114>
			}
			printf("connected %d\r\n", conn->state);
 8000d5c:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <StartClientTask+0x124>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	785b      	ldrb	r3, [r3, #1]
 8000d62:	4619      	mov	r1, r3
 8000d64:	4822      	ldr	r0, [pc, #136]	; (8000df0 <StartClientTask+0x134>)
 8000d66:	f018 fdab 	bl	80198c0 <iprintf>
//				} else {
//					nWritten += len;
//				}
//			} while (nWritten < sizeof(struct time_packet)); //send request

			while (netconn_recv(conn, &buf) == ERR_OK)	//receive the response
 8000d6a:	e016      	b.n	8000d9a <StartClientTask+0xde>
			{
				do {

					netbuf_data(buf, &data, &len); //receive lora_rv_data pointer & length
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	f107 020e 	add.w	r2, r7, #14
 8000d72:	f107 0110 	add.w	r1, r7, #16
 8000d76:	4618      	mov	r0, r3
 8000d78:	f00c fb6a 	bl	800d450 <netbuf_data>

					//memcpy(&packet + nRead, lora_rv_data, len);
					//printf("receive@@ %d \r\n", len);
					nRead += len;
 8000d7c:	89fa      	ldrh	r2, [r7, #14]
 8000d7e:	8bfb      	ldrh	r3, [r7, #30]
 8000d80:	4413      	add	r3, r2
 8000d82:	83fb      	strh	r3, [r7, #30]
				} while (netbuf_next(buf) >= 0); //check buffer empty
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f00c fbac 	bl	800d4e4 <netbuf_next>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	daec      	bge.n	8000d6c <StartClientTask+0xb0>
				netbuf_delete(buf); //clear buffer
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f00c faf1 	bl	800d37c <netbuf_delete>
			while (netconn_recv(conn, &buf) == ERR_OK)	//receive the response
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <StartClientTask+0x124>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f107 0214 	add.w	r2, r7, #20
 8000da2:	4611      	mov	r1, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f00a fe85 	bl	800bab4 <netconn_recv>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d0dd      	beq.n	8000d6c <StartClientTask+0xb0>
			}

			printf("end \r\n");
 8000db0:	4810      	ldr	r0, [pc, #64]	; (8000df4 <StartClientTask+0x138>)
 8000db2:	f018 fdf9 	bl	80199a8 <puts>
			netconn_close(conn); //close session
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <StartClientTask+0x124>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f00a ff52 	bl	800bc64 <netconn_close>
			netconn_delete(conn); //free memory
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <StartClientTask+0x124>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f00a fca5 	bl	800b714 <netconn_delete>
			conn = NULL;
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <StartClientTask+0x124>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0
 8000dd0:	e77f      	b.n	8000cd2 <StartClientTask+0x16>
 8000dd2:	bf00      	nop
 8000dd4:	0801d358 	.word	0x0801d358
 8000dd8:	20009470 	.word	0x20009470
 8000ddc:	0801d378 	.word	0x0801d378
 8000de0:	2000894c 	.word	0x2000894c
 8000de4:	20008950 	.word	0x20008950
 8000de8:	8901a8c0 	.word	0x8901a8c0
 8000dec:	0801d388 	.word	0x0801d388
 8000df0:	0801d39c 	.word	0x0801d39c
 8000df4:	0801d3ac 	.word	0x0801d3ac

08000df8 <startSendTask>:
		}
	}
}

void startSendTask(void const *argument) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b0a4      	sub	sp, #144	; 0x90
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

// UDP
	uint8_t send_buf[128];
	struct netbuf *netbuf;
	netbuf = netbuf_new();
 8000e00:	f00c faa8 	bl	800d354 <netbuf_new>
 8000e04:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

	while (1) {
		HAL_Delay(10000);
 8000e08:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e0c:	f000 feca 	bl	8001ba4 <HAL_Delay>

		// send UCP message
		if (conn != NULL && conn->state == NETCONN_NONE) {
 8000e10:	4b29      	ldr	r3, [pc, #164]	; (8000eb8 <startSendTask+0xc0>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d033      	beq.n	8000e80 <startSendTask+0x88>
 8000e18:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <startSendTask+0xc0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	785b      	ldrb	r3, [r3, #1]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d12e      	bne.n	8000e80 <startSendTask+0x88>
			memset(send_buf, 0, sizeof(send_buf));
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	2280      	movs	r2, #128	; 0x80
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f017 ff2c 	bl	8018c88 <memset>
			sprintf((char*) send_buf,
 8000e30:	4b22      	ldr	r3, [pc, #136]	; (8000ebc <startSendTask+0xc4>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	4921      	ldr	r1, [pc, #132]	; (8000ec0 <startSendTask+0xc8>)
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f018 fdf6 	bl	8019a2c <siprintf>
					"{\"device_id\":1,\"temp\":%d,\"vocs\":1,\"smoke\":2,\"vibr\":3,\"sound\":4}",
					t);
			printf("Send UDP Msg : %s\r\n", send_buf);
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	4619      	mov	r1, r3
 8000e46:	481f      	ldr	r0, [pc, #124]	; (8000ec4 <startSendTask+0xcc>)
 8000e48:	f018 fd3a 	bl	80198c0 <iprintf>

			HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_13); //toggle running led
 8000e4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e50:	481d      	ldr	r0, [pc, #116]	; (8000ec8 <startSendTask+0xd0>)
 8000e52:	f002 fc0a 	bl	800366a <HAL_GPIO_TogglePin>

			//UDP

			netbuf_ref(netbuf, send_buf, strlen(send_buf));
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff f9f0 	bl	8000240 <strlen>
 8000e60:	4603      	mov	r3, r0
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000e6e:	f00c faa5 	bl	800d3bc <netbuf_ref>
			netconn_send(conn, netbuf);
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <startSendTask+0xc0>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f00a fe94 	bl	800bba8 <netconn_send>
			//netconn_write(conn, tcp_buf, sizeof(tcp_buf), NETCONN_NOFLAG);

		}

		// send LoRa message
		if (lora_init) { // lora_init = 최초 보드 실행 후 JOIN 성공 시 true. JOIN 이 한번이라도 성공하지 않으면 계속 JOIN이 붙을 때 까지 요청
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <startSendTask+0xd4>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0bf      	beq.n	8000e08 <startSendTask+0x10>
			if (state) {
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <startSendTask+0xd8>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <startSendTask+0xa0>
				Lora_Send(&huart2);
 8000e90:	4810      	ldr	r0, [pc, #64]	; (8000ed4 <startSendTask+0xdc>)
 8000e92:	f7ff fd9d 	bl	80009d0 <Lora_Send>
 8000e96:	e7b7      	b.n	8000e08 <startSendTask+0x10>
			} else {
				state = Lora_Join(&huart2);
 8000e98:	480e      	ldr	r0, [pc, #56]	; (8000ed4 <startSendTask+0xdc>)
 8000e9a:	f7ff fd77 	bl	800098c <Lora_Join>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <startSendTask+0xd8>)
 8000ea4:	701a      	strb	r2, [r3, #0]
				if (state == true)
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <startSendTask+0xd8>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0ac      	beq.n	8000e08 <startSendTask+0x10>
					printf("Lora JOIN Success!!");
 8000eae:	480a      	ldr	r0, [pc, #40]	; (8000ed8 <startSendTask+0xe0>)
 8000eb0:	f018 fd06 	bl	80198c0 <iprintf>
		HAL_Delay(10000);
 8000eb4:	e7a8      	b.n	8000e08 <startSendTask+0x10>
 8000eb6:	bf00      	nop
 8000eb8:	2000894c 	.word	0x2000894c
 8000ebc:	20008948 	.word	0x20008948
 8000ec0:	0801d3b4 	.word	0x0801d3b4
 8000ec4:	0801d3f4 	.word	0x0801d3f4
 8000ec8:	40021400 	.word	0x40021400
 8000ecc:	20009424 	.word	0x20009424
 8000ed0:	20008f34 	.word	0x20008f34
 8000ed4:	2000938c 	.word	0x2000938c
 8000ed8:	0801d408 	.word	0x0801d408

08000edc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000edc:	b5b0      	push	{r4, r5, r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ee2:	f000 fe32 	bl	8001b4a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ee6:	f000 f825 	bl	8000f34 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000eea:	f000 f9dd 	bl	80012a8 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000eee:	f000 f97d 	bl	80011ec <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000ef2:	f000 f9ab 	bl	800124c <MX_USB_OTG_FS_PCD_Init>
	MX_I2C2_Init();
 8000ef6:	f000 f909 	bl	800110c <MX_I2C2_Init>
	MX_ADC1_Init();
 8000efa:	f000 f8b5 	bl	8001068 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 8000efe:	f000 f945 	bl	800118c <MX_USART2_UART_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <main+0x50>)
 8000f04:	1d3c      	adds	r4, r7, #4
 8000f06:	461d      	mov	r5, r3
 8000f08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f007 fbab 	bl	8008674 <osThreadCreate>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <main+0x54>)
 8000f22:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000f24:	f007 fb8f 	bl	8008646 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000f28:	e7fe      	b.n	8000f28 <main+0x4c>
 8000f2a:	bf00      	nop
 8000f2c:	0801d428 	.word	0x0801d428
 8000f30:	20008954 	.word	0x20008954

08000f34 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0b8      	sub	sp, #224	; 0xe0
 8000f38:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f3a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f3e:	2234      	movs	r2, #52	; 0x34
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f017 fea0 	bl	8018c88 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f48:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	2290      	movs	r2, #144	; 0x90
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f017 fe91 	bl	8018c88 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000f66:	f003 fec5 	bl	8004cf4 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b3c      	ldr	r3, [pc, #240]	; (800105c <SystemClock_Config+0x128>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a3b      	ldr	r2, [pc, #236]	; (800105c <SystemClock_Config+0x128>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b39      	ldr	r3, [pc, #228]	; (800105c <SystemClock_Config+0x128>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f82:	4b37      	ldr	r3, [pc, #220]	; (8001060 <SystemClock_Config+0x12c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f8a:	4a35      	ldr	r2, [pc, #212]	; (8001060 <SystemClock_Config+0x12c>)
 8000f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	4b33      	ldr	r3, [pc, #204]	; (8001060 <SystemClock_Config+0x12c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fa4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fac:	2302      	movs	r3, #2
 8000fae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000fba:	2304      	movs	r3, #4
 8000fbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 96;
 8000fc0:	2360      	movs	r3, #96	; 0x60
 8000fc2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fcc:	2304      	movs	r3, #4
 8000fce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000fd2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f003 feec 	bl	8004db4 <HAL_RCC_OscConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0xb2>
		Error_Handler();
 8000fe2:	f000 fa97 	bl	8001514 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000fe6:	f003 fe95 	bl	8004d14 <HAL_PWREx_EnableOverDrive>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0xc0>
		Error_Handler();
 8000ff0:	f000 fa90 	bl	8001514 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8001014:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001018:	2103      	movs	r1, #3
 800101a:	4618      	mov	r0, r3
 800101c:	f004 f978 	bl	8005310 <HAL_RCC_ClockConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0xf6>
		Error_Handler();
 8001026:	f000 fa75 	bl	8001514 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <SystemClock_Config+0x130>)
 800102c:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800102e:	2300      	movs	r3, #0
 8001030:	653b      	str	r3, [r7, #80]	; 0x50
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001032:	2300      	movs	r3, #0
 8001034:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001036:	2300      	movs	r3, #0
 8001038:	673b      	str	r3, [r7, #112]	; 0x70
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800103a:	2300      	movs	r3, #0
 800103c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	4618      	mov	r0, r3
 8001046:	f004 fb8d 	bl	8005764 <HAL_RCCEx_PeriphCLKConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0x120>
		Error_Handler();
 8001050:	f000 fa60 	bl	8001514 <Error_Handler>
	}
}
 8001054:	bf00      	nop
 8001056:	37e0      	adds	r7, #224	; 0xe0
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	40007000 	.word	0x40007000
 8001064:	00208180 	.word	0x00208180

08001068 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800106e:	463b      	mov	r3, r7
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800107a:	4b21      	ldr	r3, [pc, #132]	; (8001100 <MX_ADC1_Init+0x98>)
 800107c:	4a21      	ldr	r2, [pc, #132]	; (8001104 <MX_ADC1_Init+0x9c>)
 800107e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001080:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <MX_ADC1_Init+0x98>)
 8001082:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001086:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <MX_ADC1_Init+0x98>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800108e:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <MX_ADC1_Init+0x98>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001094:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <MX_ADC1_Init+0x98>)
 8001096:	2200      	movs	r2, #0
 8001098:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <MX_ADC1_Init+0x98>)
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <MX_ADC1_Init+0x98>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <MX_ADC1_Init+0x98>)
 80010aa:	4a17      	ldr	r2, [pc, #92]	; (8001108 <MX_ADC1_Init+0xa0>)
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <MX_ADC1_Init+0x98>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <MX_ADC1_Init+0x98>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_ADC1_Init+0x98>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_ADC1_Init+0x98>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <MX_ADC1_Init+0x98>)
 80010ca:	f000 fd8d 	bl	8001be8 <HAL_ADC_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC1_Init+0x70>
		Error_Handler();
 80010d4:	f000 fa1e 	bl	8001514 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80010d8:	2303      	movs	r3, #3
 80010da:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80010dc:	2301      	movs	r3, #1
 80010de:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80010e4:	463b      	mov	r3, r7
 80010e6:	4619      	mov	r1, r3
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_ADC1_Init+0x98>)
 80010ea:	f000 fdc1 	bl	8001c70 <HAL_ADC_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_ADC1_Init+0x90>
		Error_Handler();
 80010f4:	f000 fa0e 	bl	8001514 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20008f38 	.word	0x20008f38
 8001104:	40012000 	.word	0x40012000
 8001108:	0f000001 	.word	0x0f000001

0800110c <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <MX_I2C2_Init+0x74>)
 8001112:	4a1c      	ldr	r2, [pc, #112]	; (8001184 <MX_I2C2_Init+0x78>)
 8001114:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <MX_I2C2_Init+0x74>)
 8001118:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <MX_I2C2_Init+0x7c>)
 800111a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <MX_I2C2_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <MX_I2C2_Init+0x74>)
 8001124:	2201      	movs	r2, #1
 8001126:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <MX_I2C2_Init+0x74>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <MX_I2C2_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <MX_I2C2_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_I2C2_Init+0x74>)
 800113c:	2200      	movs	r2, #0
 800113e:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_I2C2_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001146:	480e      	ldr	r0, [pc, #56]	; (8001180 <MX_I2C2_Init+0x74>)
 8001148:	f002 faaa 	bl	80036a0 <HAL_I2C_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_I2C2_Init+0x4a>
		Error_Handler();
 8001152:	f000 f9df 	bl	8001514 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8001156:	2100      	movs	r1, #0
 8001158:	4809      	ldr	r0, [pc, #36]	; (8001180 <MX_I2C2_Init+0x74>)
 800115a:	f003 fbec 	bl	8004936 <HAL_I2CEx_ConfigAnalogFilter>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001164:	f000 f9d6 	bl	8001514 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8001168:	2100      	movs	r1, #0
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_I2C2_Init+0x74>)
 800116c:	f003 fc2e 	bl	80049cc <HAL_I2CEx_ConfigDigitalFilter>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_I2C2_Init+0x6e>
		Error_Handler();
 8001176:	f000 f9cd 	bl	8001514 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20008de0 	.word	0x20008de0
 8001184:	40005800 	.word	0x40005800
 8001188:	20303e5d 	.word	0x20303e5d

0800118c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 8001192:	4a15      	ldr	r2, [pc, #84]	; (80011e8 <MX_USART2_UART_Init+0x5c>)
 8001194:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 8001198:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800119c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011b2:	220c      	movs	r2, #12
 80011b4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011d0:	f005 f954 	bl	800647c <HAL_UART_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80011da:	f000 f99b 	bl	8001514 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000938c 	.word	0x2000938c
 80011e8:	40004400 	.word	0x40004400

080011ec <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <MX_USART3_UART_Init+0x58>)
 80011f2:	4a15      	ldr	r2, [pc, #84]	; (8001248 <MX_USART3_UART_Init+0x5c>)
 80011f4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <MX_USART3_UART_Init+0x58>)
 80011f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011fc:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_USART3_UART_Init+0x58>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_USART3_UART_Init+0x58>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_USART3_UART_Init+0x58>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_USART3_UART_Init+0x58>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <MX_USART3_UART_Init+0x58>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_USART3_UART_Init+0x58>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <MX_USART3_UART_Init+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_USART3_UART_Init+0x58>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_USART3_UART_Init+0x58>)
 8001230:	f005 f924 	bl	800647c <HAL_UART_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_USART3_UART_Init+0x52>
		Error_Handler();
 800123a:	f000 f96b 	bl	8001514 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000895c 	.word	0x2000895c
 8001248:	40004800 	.word	0x40004800

0800124c <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001252:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001256:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800125a:	2206      	movs	r2, #6
 800125c:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001260:	2202      	movs	r2, #2
 8001262:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800126c:	2202      	movs	r2, #2
 800126e:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001272:	2201      	movs	r2, #1
 8001274:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001278:	2200      	movs	r2, #0
 800127a:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800127e:	2200      	movs	r2, #0
 8001280:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001284:	2201      	movs	r2, #1
 8001286:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001290:	f003 fbe8 	bl	8004a64 <HAL_PCD_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 800129a:	f000 f93b 	bl	8001514 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200089dc 	.word	0x200089dc

080012a8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08c      	sub	sp, #48	; 0x30
 80012ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	4b5f      	ldr	r3, [pc, #380]	; (800143c <MX_GPIO_Init+0x194>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a5e      	ldr	r2, [pc, #376]	; (800143c <MX_GPIO_Init+0x194>)
 80012c4:	f043 0304 	orr.w	r3, r3, #4
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b5c      	ldr	r3, [pc, #368]	; (800143c <MX_GPIO_Init+0x194>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	61bb      	str	r3, [r7, #24]
 80012d4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80012d6:	4b59      	ldr	r3, [pc, #356]	; (800143c <MX_GPIO_Init+0x194>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a58      	ldr	r2, [pc, #352]	; (800143c <MX_GPIO_Init+0x194>)
 80012dc:	f043 0320 	orr.w	r3, r3, #32
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b56      	ldr	r3, [pc, #344]	; (800143c <MX_GPIO_Init+0x194>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0320 	and.w	r3, r3, #32
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80012ee:	4b53      	ldr	r3, [pc, #332]	; (800143c <MX_GPIO_Init+0x194>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a52      	ldr	r2, [pc, #328]	; (800143c <MX_GPIO_Init+0x194>)
 80012f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b50      	ldr	r3, [pc, #320]	; (800143c <MX_GPIO_Init+0x194>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b4d      	ldr	r3, [pc, #308]	; (800143c <MX_GPIO_Init+0x194>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a4c      	ldr	r2, [pc, #304]	; (800143c <MX_GPIO_Init+0x194>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b4a      	ldr	r3, [pc, #296]	; (800143c <MX_GPIO_Init+0x194>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	4b47      	ldr	r3, [pc, #284]	; (800143c <MX_GPIO_Init+0x194>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a46      	ldr	r2, [pc, #280]	; (800143c <MX_GPIO_Init+0x194>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b44      	ldr	r3, [pc, #272]	; (800143c <MX_GPIO_Init+0x194>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001336:	4b41      	ldr	r3, [pc, #260]	; (800143c <MX_GPIO_Init+0x194>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a40      	ldr	r2, [pc, #256]	; (800143c <MX_GPIO_Init+0x194>)
 800133c:	f043 0308 	orr.w	r3, r3, #8
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b3e      	ldr	r3, [pc, #248]	; (800143c <MX_GPIO_Init+0x194>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800134e:	4b3b      	ldr	r3, [pc, #236]	; (800143c <MX_GPIO_Init+0x194>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a3a      	ldr	r2, [pc, #232]	; (800143c <MX_GPIO_Init+0x194>)
 8001354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b38      	ldr	r3, [pc, #224]	; (800143c <MX_GPIO_Init+0x194>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	f244 0181 	movw	r1, #16513	; 0x4081
 800136c:	4834      	ldr	r0, [pc, #208]	; (8001440 <MX_GPIO_Init+0x198>)
 800136e:	f002 f963 	bl	8003638 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001378:	4832      	ldr	r0, [pc, #200]	; (8001444 <MX_GPIO_Init+0x19c>)
 800137a:	f002 f95d 	bl	8003638 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 800137e:	2200      	movs	r2, #0
 8001380:	2140      	movs	r1, #64	; 0x40
 8001382:	4831      	ldr	r0, [pc, #196]	; (8001448 <MX_GPIO_Init+0x1a0>)
 8001384:	f002 f958 	bl	8003638 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800138e:	4b2f      	ldr	r3, [pc, #188]	; (800144c <MX_GPIO_Init+0x1a4>)
 8001390:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4619      	mov	r1, r3
 800139c:	482c      	ldr	r0, [pc, #176]	; (8001450 <MX_GPIO_Init+0x1a8>)
 800139e:	f001 ffa1 	bl	80032e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 80013a2:	f244 0381 	movw	r3, #16513	; 0x4081
 80013a6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4619      	mov	r1, r3
 80013ba:	4821      	ldr	r0, [pc, #132]	; (8001440 <MX_GPIO_Init+0x198>)
 80013bc:	f001 ff92 	bl	80032e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PF13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4619      	mov	r1, r3
 80013d8:	481a      	ldr	r0, [pc, #104]	; (8001444 <MX_GPIO_Init+0x19c>)
 80013da:	f001 ff83 	bl	80032e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013de:	2340      	movs	r3, #64	; 0x40
 80013e0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4619      	mov	r1, r3
 80013f4:	4814      	ldr	r0, [pc, #80]	; (8001448 <MX_GPIO_Init+0x1a0>)
 80013f6:	f001 ff75 	bl	80032e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	4619      	mov	r1, r3
 800140c:	480e      	ldr	r0, [pc, #56]	; (8001448 <MX_GPIO_Init+0x1a0>)
 800140e:	f001 ff69 	bl	80032e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG9 PG14 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_14;
 8001412:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001416:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001424:	2308      	movs	r3, #8
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4619      	mov	r1, r3
 800142e:	4806      	ldr	r0, [pc, #24]	; (8001448 <MX_GPIO_Init+0x1a0>)
 8001430:	f001 ff58 	bl	80032e4 <HAL_GPIO_Init>

}
 8001434:	bf00      	nop
 8001436:	3730      	adds	r7, #48	; 0x30
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40023800 	.word	0x40023800
 8001440:	40020400 	.word	0x40020400
 8001444:	40021400 	.word	0x40021400
 8001448:	40021800 	.word	0x40021800
 800144c:	10110000 	.word	0x10110000
 8001450:	40020800 	.word	0x40020800

08001454 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */

void StartDefaultTask(void const *argument) {
 8001454:	b5b0      	push	{r4, r5, r7, lr}
 8001456:	b098      	sub	sp, #96	; 0x60
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	/* init code for LWIP */
	MX_LWIP_Init();
 800145c:	f006 fc44 	bl	8007ce8 <MX_LWIP_Init>
	/* USER CODE BEGIN 5 */

	// start tcp client
	osThreadDef(tcp_task, StartClientTask, osPriorityNormal, 0,
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <StartDefaultTask+0x84>)
 8001462:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001466:	461d      	mov	r5, r3
 8001468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800146c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001470:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			configMINIMAL_STACK_SIZE);
	tcp_task = osThreadCreate(osThread(tcp_task), NULL); //run tcp client task
 8001474:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f007 f8fa 	bl	8008674 <osThreadCreate>
 8001480:	4602      	mov	r2, r0
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <StartDefaultTask+0x88>)
 8001484:	601a      	str	r2, [r3, #0]

	// start i2c
	osThreadDef(i2c_task, StartI2CTask, osPriorityNormal, 0,
 8001486:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <StartDefaultTask+0x8c>)
 8001488:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800148c:	461d      	mov	r5, r3
 800148e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001492:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001496:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			configMINIMAL_STACK_SIZE);
	i2c_task = osThreadCreate(osThread(i2c_task), NULL);
 800149a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f007 f8e7 	bl	8008674 <osThreadCreate>
 80014a6:	4602      	mov	r2, r0
 80014a8:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <StartDefaultTask+0x90>)
 80014aa:	601a      	str	r2, [r3, #0]

	// start send Task
	osThreadDef(send_task, startSendTask, osPriorityNormal, 0,
 80014ac:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <StartDefaultTask+0x94>)
 80014ae:	f107 040c 	add.w	r4, r7, #12
 80014b2:	461d      	mov	r5, r3
 80014b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			configMINIMAL_STACK_SIZE);
	send_task = osThreadCreate(osThread(send_task), NULL);
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f007 f8d4 	bl	8008674 <osThreadCreate>
 80014cc:	4602      	mov	r2, r0
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <StartDefaultTask+0x98>)
 80014d0:	601a      	str	r2, [r3, #0]

// start adc
//osThreadDef(adc_task, AdcTask, osPriorityNormal, 0,configMINIMAL_STACK_SIZE);
//adc_task = osThreadCreate(osThread(adc_task), NULL);

	initLoRa();
 80014d2:	f7ff fba9 	bl	8000c28 <initLoRa>
	/* Infinite loop */
	for (;;) {
 80014d6:	e7fe      	b.n	80014d6 <StartDefaultTask+0x82>
 80014d8:	0801d450 	.word	0x0801d450
 80014dc:	2000940c 	.word	0x2000940c
 80014e0:	0801d478 	.word	0x0801d478
 80014e4:	20008eb0 	.word	0x20008eb0
 80014e8:	0801d4a0 	.word	0x0801d4a0
 80014ec:	20008f84 	.word	0x20008f84

080014f0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a04      	ldr	r2, [pc, #16]	; (8001510 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d101      	bne.n	8001506 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001502:	f000 fb2f 	bl	8001b64 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40001000 	.word	0x40001000

08001514 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <HAL_MspInit+0x4c>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	4a10      	ldr	r2, [pc, #64]	; (8001570 <HAL_MspInit+0x4c>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <HAL_MspInit+0x4c>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_MspInit+0x4c>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_MspInit+0x4c>)
 8001548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800154c:	6453      	str	r3, [r2, #68]	; 0x44
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_MspInit+0x4c>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	210f      	movs	r1, #15
 800155e:	f06f 0001 	mvn.w	r0, #1
 8001562:	f000 fe81 	bl	8002268 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800

08001574 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a15      	ldr	r2, [pc, #84]	; (80015e8 <HAL_ADC_MspInit+0x74>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d123      	bne.n	80015de <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <HAL_ADC_MspInit+0x78>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a14      	ldr	r2, [pc, #80]	; (80015ec <HAL_ADC_MspInit+0x78>)
 800159c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_ADC_MspInit+0x78>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <HAL_ADC_MspInit+0x78>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <HAL_ADC_MspInit+0x78>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <HAL_ADC_MspInit+0x78>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015c6:	2308      	movs	r3, #8
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ca:	2303      	movs	r3, #3
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	; (80015f0 <HAL_ADC_MspInit+0x7c>)
 80015da:	f001 fe83 	bl	80032e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	; 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40012000 	.word	0x40012000
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020000 	.word	0x40020000

080015f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a1f      	ldr	r2, [pc, #124]	; (8001690 <HAL_I2C_MspInit+0x9c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d137      	bne.n	8001686 <HAL_I2C_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001616:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <HAL_I2C_MspInit+0xa0>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a1e      	ldr	r2, [pc, #120]	; (8001694 <HAL_I2C_MspInit+0xa0>)
 800161c:	f043 0320 	orr.w	r3, r3, #32
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <HAL_I2C_MspInit+0xa0>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0320 	and.w	r3, r3, #32
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800162e:	2303      	movs	r3, #3
 8001630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001632:	2312      	movs	r3, #18
 8001634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001636:	2301      	movs	r3, #1
 8001638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163a:	2303      	movs	r3, #3
 800163c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800163e:	2304      	movs	r3, #4
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	4813      	ldr	r0, [pc, #76]	; (8001698 <HAL_I2C_MspInit+0xa4>)
 800164a:	f001 fe4b 	bl	80032e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <HAL_I2C_MspInit+0xa0>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a10      	ldr	r2, [pc, #64]	; (8001694 <HAL_I2C_MspInit+0xa0>)
 8001654:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <HAL_I2C_MspInit+0xa0>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2105      	movs	r1, #5
 800166a:	2021      	movs	r0, #33	; 0x21
 800166c:	f000 fdfc 	bl	8002268 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001670:	2021      	movs	r0, #33	; 0x21
 8001672:	f000 fe15 	bl	80022a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2105      	movs	r1, #5
 800167a:	2022      	movs	r0, #34	; 0x22
 800167c:	f000 fdf4 	bl	8002268 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001680:	2022      	movs	r0, #34	; 0x22
 8001682:	f000 fe0d 	bl	80022a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001686:	bf00      	nop
 8001688:	3728      	adds	r7, #40	; 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40005800 	.word	0x40005800
 8001694:	40023800 	.word	0x40023800
 8001698:	40021400 	.word	0x40021400

0800169c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08c      	sub	sp, #48	; 0x30
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a32      	ldr	r2, [pc, #200]	; (8001784 <HAL_UART_MspInit+0xe8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d130      	bne.n	8001720 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016be:	4b32      	ldr	r3, [pc, #200]	; (8001788 <HAL_UART_MspInit+0xec>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	4a31      	ldr	r2, [pc, #196]	; (8001788 <HAL_UART_MspInit+0xec>)
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ca:	4b2f      	ldr	r3, [pc, #188]	; (8001788 <HAL_UART_MspInit+0xec>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	61bb      	str	r3, [r7, #24]
 80016d4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d6:	4b2c      	ldr	r3, [pc, #176]	; (8001788 <HAL_UART_MspInit+0xec>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a2b      	ldr	r2, [pc, #172]	; (8001788 <HAL_UART_MspInit+0xec>)
 80016dc:	f043 0308 	orr.w	r3, r3, #8
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b29      	ldr	r3, [pc, #164]	; (8001788 <HAL_UART_MspInit+0xec>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80016ee:	2360      	movs	r3, #96	; 0x60
 80016f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016fe:	2307      	movs	r3, #7
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001702:	f107 031c 	add.w	r3, r7, #28
 8001706:	4619      	mov	r1, r3
 8001708:	4820      	ldr	r0, [pc, #128]	; (800178c <HAL_UART_MspInit+0xf0>)
 800170a:	f001 fdeb 	bl	80032e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2105      	movs	r1, #5
 8001712:	2026      	movs	r0, #38	; 0x26
 8001714:	f000 fda8 	bl	8002268 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001718:	2026      	movs	r0, #38	; 0x26
 800171a:	f000 fdc1 	bl	80022a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800171e:	e02d      	b.n	800177c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a1a      	ldr	r2, [pc, #104]	; (8001790 <HAL_UART_MspInit+0xf4>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d128      	bne.n	800177c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <HAL_UART_MspInit+0xec>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a16      	ldr	r2, [pc, #88]	; (8001788 <HAL_UART_MspInit+0xec>)
 8001730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <HAL_UART_MspInit+0xec>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <HAL_UART_MspInit+0xec>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a10      	ldr	r2, [pc, #64]	; (8001788 <HAL_UART_MspInit+0xec>)
 8001748:	f043 0308 	orr.w	r3, r3, #8
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <HAL_UART_MspInit+0xec>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800175a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800175e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001768:	2303      	movs	r3, #3
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800176c:	2307      	movs	r3, #7
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	4619      	mov	r1, r3
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <HAL_UART_MspInit+0xf0>)
 8001778:	f001 fdb4 	bl	80032e4 <HAL_GPIO_Init>
}
 800177c:	bf00      	nop
 800177e:	3730      	adds	r7, #48	; 0x30
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40004400 	.word	0x40004400
 8001788:	40023800 	.word	0x40023800
 800178c:	40020c00 	.word	0x40020c00
 8001790:	40004800 	.word	0x40004800

08001794 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017b4:	d141      	bne.n	800183a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	4b23      	ldr	r3, [pc, #140]	; (8001844 <HAL_PCD_MspInit+0xb0>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a22      	ldr	r2, [pc, #136]	; (8001844 <HAL_PCD_MspInit+0xb0>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <HAL_PCD_MspInit+0xb0>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017ce:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80017d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017dc:	2303      	movs	r3, #3
 80017de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017e0:	230a      	movs	r3, #10
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	4817      	ldr	r0, [pc, #92]	; (8001848 <HAL_PCD_MspInit+0xb4>)
 80017ec:	f001 fd7a 	bl	80032e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	4810      	ldr	r0, [pc, #64]	; (8001848 <HAL_PCD_MspInit+0xb4>)
 8001806:	f001 fd6d 	bl	80032e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <HAL_PCD_MspInit+0xb0>)
 800180c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800180e:	4a0d      	ldr	r2, [pc, #52]	; (8001844 <HAL_PCD_MspInit+0xb0>)
 8001810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001814:	6353      	str	r3, [r2, #52]	; 0x34
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_PCD_MspInit+0xb0>)
 8001818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800181a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <HAL_PCD_MspInit+0xb0>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	4a07      	ldr	r2, [pc, #28]	; (8001844 <HAL_PCD_MspInit+0xb0>)
 8001828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182c:	6453      	str	r3, [r2, #68]	; 0x44
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_PCD_MspInit+0xb0>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800183a:	bf00      	nop
 800183c:	3728      	adds	r7, #40	; 0x28
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800
 8001848:	40020000 	.word	0x40020000

0800184c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08c      	sub	sp, #48	; 0x30
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800185c:	2200      	movs	r2, #0
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	2036      	movs	r0, #54	; 0x36
 8001862:	f000 fd01 	bl	8002268 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001866:	2036      	movs	r0, #54	; 0x36
 8001868:	f000 fd1a 	bl	80022a0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800186c:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <HAL_InitTick+0xa0>)
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	4a1e      	ldr	r2, [pc, #120]	; (80018ec <HAL_InitTick+0xa0>)
 8001872:	f043 0310 	orr.w	r3, r3, #16
 8001876:	6413      	str	r3, [r2, #64]	; 0x40
 8001878:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <HAL_InitTick+0xa0>)
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	f003 0310 	and.w	r3, r3, #16
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001884:	f107 0210 	add.w	r2, r7, #16
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4611      	mov	r1, r2
 800188e:	4618      	mov	r0, r3
 8001890:	f003 ff36 	bl	8005700 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001894:	f003 ff0c 	bl	80056b0 <HAL_RCC_GetPCLK1Freq>
 8001898:	4603      	mov	r3, r0
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800189e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a0:	4a13      	ldr	r2, [pc, #76]	; (80018f0 <HAL_InitTick+0xa4>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	0c9b      	lsrs	r3, r3, #18
 80018a8:	3b01      	subs	r3, #1
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <HAL_InitTick+0xa8>)
 80018ae:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <HAL_InitTick+0xac>)
 80018b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <HAL_InitTick+0xa8>)
 80018b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018b8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018ba:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <HAL_InitTick+0xa8>)
 80018bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018be:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <HAL_InitTick+0xa8>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_InitTick+0xa8>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018cc:	4809      	ldr	r0, [pc, #36]	; (80018f4 <HAL_InitTick+0xa8>)
 80018ce:	f004 fb6f 	bl	8005fb0 <HAL_TIM_Base_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d104      	bne.n	80018e2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80018d8:	4806      	ldr	r0, [pc, #24]	; (80018f4 <HAL_InitTick+0xa8>)
 80018da:	f004 fb9f 	bl	800601c <HAL_TIM_Base_Start_IT>
 80018de:	4603      	mov	r3, r0
 80018e0:	e000      	b.n	80018e4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3730      	adds	r7, #48	; 0x30
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800
 80018f0:	431bde83 	.word	0x431bde83
 80018f4:	20009428 	.word	0x20009428
 80018f8:	40001000 	.word	0x40001000

080018fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190e:	e7fe      	b.n	800190e <HardFault_Handler+0x4>

08001910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <MemManage_Handler+0x4>

08001916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <BusFault_Handler+0x4>

0800191c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <UsageFault_Handler+0x4>

08001922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <I2C2_EV_IRQHandler+0x10>)
 8001936:	f002 f92d 	bl	8003b94 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20008de0 	.word	0x20008de0

08001944 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <I2C2_ER_IRQHandler+0x10>)
 800194a:	f002 f93d 	bl	8003bc8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20008de0 	.word	0x20008de0

08001958 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <USART2_IRQHandler+0x10>)
 800195e:	f005 f837 	bl	80069d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	2000938c 	.word	0x2000938c

0800196c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <TIM6_DAC_IRQHandler+0x10>)
 8001972:	f004 fb7d 	bl	8006070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20009428 	.word	0x20009428

08001980 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <ETH_IRQHandler+0x10>)
 8001986:	f001 f89f 	bl	8002ac8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	2000ad84 	.word	0x2000ad84

08001994 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	e00a      	b.n	80019bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019a6:	f7fe fe5f 	bl	8000668 <__io_getchar>
 80019aa:	4601      	mov	r1, r0
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	60ba      	str	r2, [r7, #8]
 80019b2:	b2ca      	uxtb	r2, r1
 80019b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	3301      	adds	r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	dbf0      	blt.n	80019a6 <_read+0x12>
	}

return len;
 80019c4:	687b      	ldr	r3, [r7, #4]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	e009      	b.n	80019f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	60ba      	str	r2, [r7, #8]
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fe27 	bl	800063c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	3301      	adds	r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	dbf1      	blt.n	80019e0 <_write+0x12>
	}
	return len;
 80019fc:	687b      	ldr	r3, [r7, #4]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <_close>:

int _close(int file)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
	return -1;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a2e:	605a      	str	r2, [r3, #4]
	return 0;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <_isatty>:

int _isatty(int file)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
	return 1;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
	return 0;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <_sbrk+0x50>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <_sbrk+0x16>
		heap_end = &end;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <_sbrk+0x50>)
 8001a82:	4a10      	ldr	r2, [pc, #64]	; (8001ac4 <_sbrk+0x54>)
 8001a84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <_sbrk+0x50>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <_sbrk+0x50>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4413      	add	r3, r2
 8001a94:	466a      	mov	r2, sp
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d905      	bls.n	8001aa6 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <_sbrk+0x58>)
 8001a9c:	220c      	movs	r2, #12
 8001a9e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa4:	e006      	b.n	8001ab4 <_sbrk+0x44>
	}

	heap_end += incr;
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <_sbrk+0x50>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <_sbrk+0x50>)
 8001ab0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	2000065c 	.word	0x2000065c
 8001ac4:	2000fd18 	.word	0x2000fd18
 8001ac8:	2000fd10 	.word	0x2000fd10

08001acc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <SystemInit+0x28>)
 8001ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad6:	4a07      	ldr	r2, [pc, #28]	; (8001af4 <SystemInit+0x28>)
 8001ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <SystemInit+0x28>)
 8001ae2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ae6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001afc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001afe:	e003      	b.n	8001b08 <LoopCopyDataInit>

08001b00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b06:	3104      	adds	r1, #4

08001b08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b08:	480b      	ldr	r0, [pc, #44]	; (8001b38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b10:	d3f6      	bcc.n	8001b00 <CopyDataInit>
  ldr  r2, =_sbss
 8001b12:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b14:	e002      	b.n	8001b1c <LoopFillZerobss>

08001b16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b18:	f842 3b04 	str.w	r3, [r2], #4

08001b1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b20:	d3f9      	bcc.n	8001b16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b22:	f7ff ffd3 	bl	8001acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b26:	f017 f843 	bl	8018bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b2a:	f7ff f9d7 	bl	8000edc <main>
  bx  lr    
 8001b2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b30:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001b34:	08020e80 	.word	0x08020e80
  ldr  r0, =_sdata
 8001b38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b3c:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8001b40:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8001b44:	2000fd18 	.word	0x2000fd18

08001b48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b48:	e7fe      	b.n	8001b48 <ADC_IRQHandler>

08001b4a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b4e:	2003      	movs	r0, #3
 8001b50:	f000 fb7f 	bl	8002252 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b54:	2000      	movs	r0, #0
 8001b56:	f7ff fe79 	bl	800184c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001b5a:	f7ff fce3 	bl	8001524 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_IncTick+0x20>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_IncTick+0x24>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <HAL_IncTick+0x24>)
 8001b76:	6013      	str	r3, [r2, #0]
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000008 	.word	0x20000008
 8001b88:	20009468 	.word	0x20009468

08001b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <HAL_GetTick+0x14>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20009468 	.word	0x20009468

08001ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bac:	f7ff ffee 	bl	8001b8c <HAL_GetTick>
 8001bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbc:	d005      	beq.n	8001bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_Delay+0x40>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bca:	bf00      	nop
 8001bcc:	f7ff ffde 	bl	8001b8c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d8f7      	bhi.n	8001bcc <HAL_Delay+0x28>
  {
  }
}
 8001bdc:	bf00      	nop
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000008 	.word	0x20000008

08001be8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e031      	b.n	8001c62 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d109      	bne.n	8001c1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fcb4 	bl	8001574 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d116      	bne.n	8001c54 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <HAL_ADC_Init+0x84>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	f043 0202 	orr.w	r2, r3, #2
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f964 	bl	8001f04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f023 0303 	bic.w	r3, r3, #3
 8001c4a:	f043 0201 	orr.w	r2, r3, #1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
 8001c52:	e001      	b.n	8001c58 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	ffffeefd 	.word	0xffffeefd

08001c70 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d101      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x1c>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e12a      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x272>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b09      	cmp	r3, #9
 8001c9a:	d93a      	bls.n	8001d12 <HAL_ADC_ConfigChannel+0xa2>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ca4:	d035      	beq.n	8001d12 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68d9      	ldr	r1, [r3, #12]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4413      	add	r3, r2
 8001cba:	3b1e      	subs	r3, #30
 8001cbc:	2207      	movs	r2, #7
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	400a      	ands	r2, r1
 8001cca:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a87      	ldr	r2, [pc, #540]	; (8001ef0 <HAL_ADC_ConfigChannel+0x280>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d10a      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68d9      	ldr	r1, [r3, #12]
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	061a      	lsls	r2, r3, #24
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cea:	e035      	b.n	8001d58 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68d9      	ldr	r1, [r3, #12]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	4603      	mov	r3, r0
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4403      	add	r3, r0
 8001d04:	3b1e      	subs	r3, #30
 8001d06:	409a      	lsls	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d10:	e022      	b.n	8001d58 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6919      	ldr	r1, [r3, #16]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	2207      	movs	r2, #7
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43da      	mvns	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	400a      	ands	r2, r1
 8001d34:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6919      	ldr	r1, [r3, #16]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	4603      	mov	r3, r0
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4403      	add	r3, r0
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b06      	cmp	r3, #6
 8001d5e:	d824      	bhi.n	8001daa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	3b05      	subs	r3, #5
 8001d72:	221f      	movs	r2, #31
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43da      	mvns	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	400a      	ands	r2, r1
 8001d80:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	4618      	mov	r0, r3
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	3b05      	subs	r3, #5
 8001d9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	635a      	str	r2, [r3, #52]	; 0x34
 8001da8:	e04c      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b0c      	cmp	r3, #12
 8001db0:	d824      	bhi.n	8001dfc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3b23      	subs	r3, #35	; 0x23
 8001dc4:	221f      	movs	r2, #31
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	400a      	ands	r2, r1
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	4618      	mov	r0, r3
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	3b23      	subs	r3, #35	; 0x23
 8001dee:	fa00 f203 	lsl.w	r2, r0, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	631a      	str	r2, [r3, #48]	; 0x30
 8001dfa:	e023      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3b41      	subs	r3, #65	; 0x41
 8001e0e:	221f      	movs	r2, #31
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43da      	mvns	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	400a      	ands	r2, r1
 8001e1c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	3b41      	subs	r3, #65	; 0x41
 8001e38:	fa00 f203 	lsl.w	r2, r0, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a2a      	ldr	r2, [pc, #168]	; (8001ef4 <HAL_ADC_ConfigChannel+0x284>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d10a      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x1f4>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e56:	d105      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001e58:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <HAL_ADC_ConfigChannel+0x288>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4a26      	ldr	r2, [pc, #152]	; (8001ef8 <HAL_ADC_ConfigChannel+0x288>)
 8001e5e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001e62:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a22      	ldr	r2, [pc, #136]	; (8001ef4 <HAL_ADC_ConfigChannel+0x284>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d109      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x212>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b12      	cmp	r3, #18
 8001e74:	d105      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001e76:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <HAL_ADC_ConfigChannel+0x288>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	4a1f      	ldr	r2, [pc, #124]	; (8001ef8 <HAL_ADC_ConfigChannel+0x288>)
 8001e7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e80:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a1b      	ldr	r2, [pc, #108]	; (8001ef4 <HAL_ADC_ConfigChannel+0x284>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d125      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x268>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a17      	ldr	r2, [pc, #92]	; (8001ef0 <HAL_ADC_ConfigChannel+0x280>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d003      	beq.n	8001e9e <HAL_ADC_ConfigChannel+0x22e>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b11      	cmp	r3, #17
 8001e9c:	d11c      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001e9e:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <HAL_ADC_ConfigChannel+0x288>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4a15      	ldr	r2, [pc, #84]	; (8001ef8 <HAL_ADC_ConfigChannel+0x288>)
 8001ea4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ea8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a10      	ldr	r2, [pc, #64]	; (8001ef0 <HAL_ADC_ConfigChannel+0x280>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d111      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <HAL_ADC_ConfigChannel+0x28c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a11      	ldr	r2, [pc, #68]	; (8001f00 <HAL_ADC_ConfigChannel+0x290>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	0c9a      	lsrs	r2, r3, #18
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001eca:	e002      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1f9      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	10000012 	.word	0x10000012
 8001ef4:	40012000 	.word	0x40012000
 8001ef8:	40012300 	.word	0x40012300
 8001efc:	20000000 	.word	0x20000000
 8001f00:	431bde83 	.word	0x431bde83

08001f04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001f0c:	4b78      	ldr	r3, [pc, #480]	; (80020f0 <ADC_Init+0x1ec>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	4a77      	ldr	r2, [pc, #476]	; (80020f0 <ADC_Init+0x1ec>)
 8001f12:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001f16:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001f18:	4b75      	ldr	r3, [pc, #468]	; (80020f0 <ADC_Init+0x1ec>)
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	4973      	ldr	r1, [pc, #460]	; (80020f0 <ADC_Init+0x1ec>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6859      	ldr	r1, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	021a      	lsls	r2, r3, #8
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6859      	ldr	r1, [r3, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6899      	ldr	r1, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f92:	4a58      	ldr	r2, [pc, #352]	; (80020f4 <ADC_Init+0x1f0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d022      	beq.n	8001fde <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fa6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6899      	ldr	r1, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6899      	ldr	r1, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	e00f      	b.n	8001ffe <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ffc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0202 	bic.w	r2, r2, #2
 800200c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6899      	ldr	r1, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	005a      	lsls	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d01b      	beq.n	8002064 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800203a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800204a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6859      	ldr	r1, [r3, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	3b01      	subs	r3, #1
 8002058:	035a      	lsls	r2, r3, #13
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	e007      	b.n	8002074 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002072:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002082:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	3b01      	subs	r3, #1
 8002090:	051a      	lsls	r2, r3, #20
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6899      	ldr	r1, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020b6:	025a      	lsls	r2, r3, #9
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6899      	ldr	r1, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	029a      	lsls	r2, r3, #10
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	609a      	str	r2, [r3, #8]
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40012300 	.word	0x40012300
 80020f4:	0f000001 	.word	0x0f000001

080020f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <__NVIC_SetPriorityGrouping+0x40>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002114:	4013      	ands	r3, r2
 8002116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <__NVIC_SetPriorityGrouping+0x44>)
 8002122:	4313      	orrs	r3, r2
 8002124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002126:	4a04      	ldr	r2, [pc, #16]	; (8002138 <__NVIC_SetPriorityGrouping+0x40>)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	60d3      	str	r3, [r2, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00
 800213c:	05fa0000 	.word	0x05fa0000

08002140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002144:	4b04      	ldr	r3, [pc, #16]	; (8002158 <__NVIC_GetPriorityGrouping+0x18>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	f003 0307 	and.w	r3, r3, #7
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	2b00      	cmp	r3, #0
 800216c:	db0b      	blt.n	8002186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	f003 021f 	and.w	r2, r3, #31
 8002174:	4907      	ldr	r1, [pc, #28]	; (8002194 <__NVIC_EnableIRQ+0x38>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	2001      	movs	r0, #1
 800217e:	fa00 f202 	lsl.w	r2, r0, r2
 8002182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000e100 	.word	0xe000e100

08002198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	6039      	str	r1, [r7, #0]
 80021a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	db0a      	blt.n	80021c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	490c      	ldr	r1, [pc, #48]	; (80021e4 <__NVIC_SetPriority+0x4c>)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	0112      	lsls	r2, r2, #4
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	440b      	add	r3, r1
 80021bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c0:	e00a      	b.n	80021d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4908      	ldr	r1, [pc, #32]	; (80021e8 <__NVIC_SetPriority+0x50>)
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	3b04      	subs	r3, #4
 80021d0:	0112      	lsls	r2, r2, #4
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	440b      	add	r3, r1
 80021d6:	761a      	strb	r2, [r3, #24]
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000e100 	.word	0xe000e100
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b089      	sub	sp, #36	; 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f1c3 0307 	rsb	r3, r3, #7
 8002206:	2b04      	cmp	r3, #4
 8002208:	bf28      	it	cs
 800220a:	2304      	movcs	r3, #4
 800220c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3304      	adds	r3, #4
 8002212:	2b06      	cmp	r3, #6
 8002214:	d902      	bls.n	800221c <NVIC_EncodePriority+0x30>
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3b03      	subs	r3, #3
 800221a:	e000      	b.n	800221e <NVIC_EncodePriority+0x32>
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	f04f 32ff 	mov.w	r2, #4294967295
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43da      	mvns	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	401a      	ands	r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002234:	f04f 31ff 	mov.w	r1, #4294967295
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	fa01 f303 	lsl.w	r3, r1, r3
 800223e:	43d9      	mvns	r1, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002244:	4313      	orrs	r3, r2
         );
}
 8002246:	4618      	mov	r0, r3
 8002248:	3724      	adds	r7, #36	; 0x24
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ff4c 	bl	80020f8 <__NVIC_SetPriorityGrouping>
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800227a:	f7ff ff61 	bl	8002140 <__NVIC_GetPriorityGrouping>
 800227e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	68b9      	ldr	r1, [r7, #8]
 8002284:	6978      	ldr	r0, [r7, #20]
 8002286:	f7ff ffb1 	bl	80021ec <NVIC_EncodePriority>
 800228a:	4602      	mov	r2, r0
 800228c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002290:	4611      	mov	r1, r2
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff ff80 	bl	8002198 <__NVIC_SetPriority>
}
 8002298:	bf00      	nop
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff ff54 	bl	800215c <__NVIC_EnableIRQ>
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d004      	beq.n	80022da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2280      	movs	r2, #128	; 0x80
 80022d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e00c      	b.n	80022f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2205      	movs	r2, #5
 80022de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0201 	bic.w	r2, r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	2300      	movs	r3, #0
 800230e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8002310:	4ba9      	ldr	r3, [pc, #676]	; (80025b8 <HAL_ETH_Init+0x2b8>)
 8002312:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002318:	2300      	movs	r3, #0
 800231a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e183      	b.n	800262e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d106      	bne.n	8002340 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f005 fe02 	bl	8007f44 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002340:	4b9e      	ldr	r3, [pc, #632]	; (80025bc <HAL_ETH_Init+0x2bc>)
 8002342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002344:	4a9d      	ldr	r2, [pc, #628]	; (80025bc <HAL_ETH_Init+0x2bc>)
 8002346:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800234a:	6453      	str	r3, [r2, #68]	; 0x44
 800234c:	4b9b      	ldr	r3, [pc, #620]	; (80025bc <HAL_ETH_Init+0x2bc>)
 800234e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002358:	4b99      	ldr	r3, [pc, #612]	; (80025c0 <HAL_ETH_Init+0x2c0>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	4a98      	ldr	r2, [pc, #608]	; (80025c0 <HAL_ETH_Init+0x2c0>)
 800235e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002362:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002364:	4b96      	ldr	r3, [pc, #600]	; (80025c0 <HAL_ETH_Init+0x2c0>)
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4994      	ldr	r1, [pc, #592]	; (80025c0 <HAL_ETH_Init+0x2c0>)
 800236e:	4313      	orrs	r3, r2
 8002370:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0201 	orr.w	r2, r2, #1
 8002384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002388:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800238a:	f7ff fbff 	bl	8001b8c <HAL_GetTick>
 800238e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002390:	e011      	b.n	80023b6 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002392:	f7ff fbfb 	bl	8001b8c <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023a0:	d909      	bls.n	80023b6 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2203      	movs	r2, #3
 80023a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e13b      	b.n	800262e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1e4      	bne.n	8002392 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f023 031c 	bic.w	r3, r3, #28
 80023d6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80023d8:	f003 f95e 	bl	8005698 <HAL_RCC_GetHCLKFreq>
 80023dc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	4a78      	ldr	r2, [pc, #480]	; (80025c4 <HAL_ETH_Init+0x2c4>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d908      	bls.n	80023f8 <HAL_ETH_Init+0xf8>
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	4a77      	ldr	r2, [pc, #476]	; (80025c8 <HAL_ETH_Init+0x2c8>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d804      	bhi.n	80023f8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f043 0308 	orr.w	r3, r3, #8
 80023f4:	61fb      	str	r3, [r7, #28]
 80023f6:	e027      	b.n	8002448 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	4a73      	ldr	r2, [pc, #460]	; (80025c8 <HAL_ETH_Init+0x2c8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d908      	bls.n	8002412 <HAL_ETH_Init+0x112>
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	4a72      	ldr	r2, [pc, #456]	; (80025cc <HAL_ETH_Init+0x2cc>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d804      	bhi.n	8002412 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f043 030c 	orr.w	r3, r3, #12
 800240e:	61fb      	str	r3, [r7, #28]
 8002410:	e01a      	b.n	8002448 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	4a6d      	ldr	r2, [pc, #436]	; (80025cc <HAL_ETH_Init+0x2cc>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d903      	bls.n	8002422 <HAL_ETH_Init+0x122>
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	4a6c      	ldr	r2, [pc, #432]	; (80025d0 <HAL_ETH_Init+0x2d0>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d911      	bls.n	8002446 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	4a6a      	ldr	r2, [pc, #424]	; (80025d0 <HAL_ETH_Init+0x2d0>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d908      	bls.n	800243c <HAL_ETH_Init+0x13c>
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	4a69      	ldr	r2, [pc, #420]	; (80025d4 <HAL_ETH_Init+0x2d4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d804      	bhi.n	800243c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	f043 0304 	orr.w	r3, r3, #4
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	e005      	b.n	8002448 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f043 0310 	orr.w	r3, r3, #16
 8002442:	61fb      	str	r3, [r7, #28]
 8002444:	e000      	b.n	8002448 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002446:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002450:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002454:	2100      	movs	r1, #0
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 fc19 	bl	8002c8e <HAL_ETH_WritePHYRegister>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00b      	beq.n	800247a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002466:	6939      	ldr	r1, [r7, #16]
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 fca5 	bl	8002db8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e0d9      	b.n	800262e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800247a:	20ff      	movs	r0, #255	; 0xff
 800247c:	f7ff fb92 	bl	8001ba4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80a7 	beq.w	80025d8 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800248a:	f7ff fb7f 	bl	8001b8c <HAL_GetTick>
 800248e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002490:	f107 030c 	add.w	r3, r7, #12
 8002494:	461a      	mov	r2, r3
 8002496:	2101      	movs	r1, #1
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 fb90 	bl	8002bbe <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800249e:	f7ff fb75 	bl	8001b8c <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d90f      	bls.n	80024d0 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80024b4:	6939      	ldr	r1, [r7, #16]
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fc7e 	bl	8002db8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e0ae      	b.n	800262e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0da      	beq.n	8002490 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80024da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024de:	2100      	movs	r1, #0
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 fbd4 	bl	8002c8e <HAL_ETH_WritePHYRegister>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00b      	beq.n	8002504 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80024f0:	6939      	ldr	r1, [r7, #16]
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fc60 	bl	8002db8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002500:	2301      	movs	r3, #1
 8002502:	e094      	b.n	800262e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002504:	f7ff fb42 	bl	8001b8c <HAL_GetTick>
 8002508:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800250a:	f107 030c 	add.w	r3, r7, #12
 800250e:	461a      	mov	r2, r3
 8002510:	2101      	movs	r1, #1
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fb53 	bl	8002bbe <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002518:	f7ff fb38 	bl	8001b8c <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	f241 3288 	movw	r2, #5000	; 0x1388
 8002526:	4293      	cmp	r3, r2
 8002528:	d90f      	bls.n	800254a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800252e:	6939      	ldr	r1, [r7, #16]
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fc41 	bl	8002db8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e071      	b.n	800262e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0da      	beq.n	800250a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002554:	f107 030c 	add.w	r3, r7, #12
 8002558:	461a      	mov	r2, r3
 800255a:	211f      	movs	r1, #31
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 fb2e 	bl	8002bbe <HAL_ETH_ReadPHYRegister>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00b      	beq.n	8002580 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800256c:	6939      	ldr	r1, [r7, #16]
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 fc22 	bl	8002db8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800257c:	2301      	movs	r3, #1
 800257e:	e056      	b.n	800262e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	2b00      	cmp	r3, #0
 8002588:	d004      	beq.n	8002594 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	e002      	b.n	800259a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
 80025aa:	e037      	b.n	800261c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	e032      	b.n	800261c <HAL_ETH_Init+0x31c>
 80025b6:	bf00      	nop
 80025b8:	03938700 	.word	0x03938700
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40013800 	.word	0x40013800
 80025c4:	01312cff 	.word	0x01312cff
 80025c8:	02160ebf 	.word	0x02160ebf
 80025cc:	039386ff 	.word	0x039386ff
 80025d0:	05f5e0ff 	.word	0x05f5e0ff
 80025d4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	08db      	lsrs	r3, r3, #3
 80025de:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	085b      	lsrs	r3, r3, #1
 80025e6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80025e8:	4313      	orrs	r3, r2
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	2100      	movs	r1, #0
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 fb4c 	bl	8002c8e <HAL_ETH_WritePHYRegister>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00b      	beq.n	8002614 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002600:	6939      	ldr	r1, [r7, #16]
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 fbd8 	bl	8002db8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e00c      	b.n	800262e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002614:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002618:	f7ff fac4 	bl	8001ba4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800261c:	6939      	ldr	r1, [r7, #16]
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 fbca 	bl	8002db8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3720      	adds	r7, #32
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop

08002638 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
 8002644:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_ETH_DMATxDescListInit+0x20>
 8002654:	2302      	movs	r3, #2
 8002656:	e052      	b.n	80026fe <HAL_ETH_DMATxDescListInit+0xc6>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	e030      	b.n	80026d6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	015b      	lsls	r3, r3, #5
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	4413      	add	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002684:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800268c:	fb02 f303 	mul.w	r3, r2, r3
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	4413      	add	r3, r2
 8002694:	461a      	mov	r2, r3
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d105      	bne.n	80026ae <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d208      	bcs.n	80026ca <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	3301      	adds	r3, #1
 80026bc:	015b      	lsls	r3, r3, #5
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	4413      	add	r3, r2
 80026c2:	461a      	mov	r2, r3
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	60da      	str	r2, [r3, #12]
 80026c8:	e002      	b.n	80026d0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	3301      	adds	r3, #1
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d3ca      	bcc.n	8002674 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6819      	ldr	r1, [r3, #0]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	f241 0310 	movw	r3, #4112	; 0x1010
 80026e8:	440b      	add	r3, r1
 80026ea:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	371c      	adds	r7, #28
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800270a:	b480      	push	{r7}
 800270c:	b087      	sub	sp, #28
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_ETH_DMARxDescListInit+0x20>
 8002726:	2302      	movs	r3, #2
 8002728:	e056      	b.n	80027d8 <HAL_ETH_DMARxDescListInit+0xce>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2202      	movs	r2, #2
 8002736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	e034      	b.n	80027b0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	015b      	lsls	r3, r3, #5
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	4413      	add	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002756:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800275e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002766:	fb02 f303 	mul.w	r3, r2, r3
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	461a      	mov	r2, r3
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d105      	bne.n	8002788 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	3b01      	subs	r3, #1
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	429a      	cmp	r2, r3
 8002790:	d208      	bcs.n	80027a4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	3301      	adds	r3, #1
 8002796:	015b      	lsls	r3, r3, #5
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	4413      	add	r3, r2
 800279c:	461a      	mov	r2, r3
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	e002      	b.n	80027aa <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	3301      	adds	r3, #1
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d3c6      	bcc.n	8002746 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6819      	ldr	r1, [r3, #0]
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	f241 030c 	movw	r3, #4108	; 0x100c
 80027c2:	440b      	add	r3, r1
 80027c4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	371c      	adds	r7, #28
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_ETH_TransmitFrame+0x24>
 8002804:	2302      	movs	r3, #2
 8002806:	e0cd      	b.n	80029a4 <HAL_ETH_TransmitFrame+0x1c0>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d109      	bne.n	8002832 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800282e:	2301      	movs	r3, #1
 8002830:	e0b8      	b.n	80029a4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	da09      	bge.n	8002850 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2212      	movs	r2, #18
 8002840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0a9      	b.n	80029a4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002856:	4293      	cmp	r3, r2
 8002858:	d915      	bls.n	8002886 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	4a54      	ldr	r2, [pc, #336]	; (80029b0 <HAL_ETH_TransmitFrame+0x1cc>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	0a9b      	lsrs	r3, r3, #10
 8002864:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	4b51      	ldr	r3, [pc, #324]	; (80029b0 <HAL_ETH_TransmitFrame+0x1cc>)
 800286a:	fba3 1302 	umull	r1, r3, r3, r2
 800286e:	0a9b      	lsrs	r3, r3, #10
 8002870:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d005      	beq.n	800288a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	3301      	adds	r3, #1
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	e001      	b.n	800288a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8002886:	2301      	movs	r3, #1
 8002888:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d11c      	bne.n	80028ca <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800289e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80028aa:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028ba:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	461a      	mov	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80028c8:	e04b      	b.n	8002962 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	e044      	b.n	800295a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028da:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028de:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d107      	bne.n	80028f6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028f4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80028fe:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	3b01      	subs	r3, #1
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	429a      	cmp	r2, r3
 8002908:	d116      	bne.n	8002938 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002918:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	4a25      	ldr	r2, [pc, #148]	; (80029b4 <HAL_ETH_TransmitFrame+0x1d0>)
 800291e:	fb02 f203 	mul.w	r2, r2, r3
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	4413      	add	r3, r2
 8002926:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800292a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002936:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002942:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002946:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	461a      	mov	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	3301      	adds	r3, #1
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	429a      	cmp	r2, r3
 8002960:	d3b6      	bcc.n	80028d0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	f241 0314 	movw	r3, #4116	; 0x1014
 800296a:	4413      	add	r3, r2
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00d      	beq.n	8002992 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	f241 0314 	movw	r3, #4116	; 0x1014
 800297e:	4413      	add	r3, r2
 8002980:	2204      	movs	r2, #4
 8002982:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	f241 0304 	movw	r3, #4100	; 0x1004
 800298c:	4413      	add	r3, r2
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	371c      	adds	r7, #28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	ac02b00b 	.word	0xac02b00b
 80029b4:	fffffa0c 	.word	0xfffffa0c

080029b8 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e074      	b.n	8002abc <HAL_ETH_GetReceivedFrame_IT+0x104>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2202      	movs	r2, #2
 80029de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80029e2:	e05a      	b.n	8002a9a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3301      	adds	r3, #1
 80029e8:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029f8:	d10d      	bne.n	8002a16 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	629a      	str	r2, [r3, #40]	; 0x28
 8002a14:	e041      	b.n	8002a9a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10b      	bne.n	8002a3c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	461a      	mov	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28
 8002a3a:	e02e      	b.n	8002a9a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d103      	bne.n	8002a5e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	0c1b      	lsrs	r3, r3, #16
 8002a66:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002a6a:	1f1a      	subs	r2, r3, #4
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	461a      	mov	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	e010      	b.n	8002abc <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	db02      	blt.n	8002aaa <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d99c      	bls.n	80029e4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	f241 0314 	movw	r3, #4116	; 0x1014
 8002ad8:	4413      	add	r3, r2
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae0:	2b40      	cmp	r3, #64	; 0x40
 8002ae2:	d112      	bne.n	8002b0a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f005 faed 	bl	80080c4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	f241 0314 	movw	r3, #4116	; 0x1014
 8002af2:	4413      	add	r3, r2
 8002af4:	2240      	movs	r2, #64	; 0x40
 8002af6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b08:	e01b      	b.n	8002b42 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	f241 0314 	movw	r3, #4116	; 0x1014
 8002b12:	4413      	add	r3, r2
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d111      	bne.n	8002b42 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f839 	bl	8002b96 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	f241 0314 	movw	r3, #4116	; 0x1014
 8002b2c:	4413      	add	r3, r2
 8002b2e:	2201      	movs	r2, #1
 8002b30:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	f241 0314 	movw	r3, #4116	; 0x1014
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b50:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	f241 0314 	movw	r3, #4116	; 0x1014
 8002b5a:	4413      	add	r3, r2
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b66:	d112      	bne.n	8002b8e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f81e 	bl	8002baa <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	f241 0314 	movw	r3, #4116	; 0x1014
 8002b76:	4413      	add	r3, r2
 8002b78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b7c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b086      	sub	sp, #24
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	607a      	str	r2, [r7, #4]
 8002bca:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8002bcc:	2300      	movs	r3, #0
 8002bce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b82      	cmp	r3, #130	; 0x82
 8002bde:	d101      	bne.n	8002be4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002be0:	2302      	movs	r3, #2
 8002be2:	e050      	b.n	8002c86 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2282      	movs	r2, #130	; 0x82
 8002be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f003 031c 	and.w	r3, r3, #28
 8002bfa:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8a1b      	ldrh	r3, [r3, #16]
 8002c00:	02db      	lsls	r3, r3, #11
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002c0a:	897b      	ldrh	r3, [r7, #10]
 8002c0c:	019b      	lsls	r3, r3, #6
 8002c0e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f023 0302 	bic.w	r3, r3, #2
 8002c1e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002c30:	f7fe ffac 	bl	8001b8c <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002c36:	e015      	b.n	8002c64 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002c38:	f7fe ffa8 	bl	8001b8c <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c46:	d309      	bcc.n	8002c5c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e014      	b.n	8002c86 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1e4      	bne.n	8002c38 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	461a      	mov	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b086      	sub	sp, #24
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	460b      	mov	r3, r1
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b42      	cmp	r3, #66	; 0x42
 8002cae:	d101      	bne.n	8002cb4 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e04e      	b.n	8002d52 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2242      	movs	r2, #66	; 0x42
 8002cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f003 031c 	and.w	r3, r3, #28
 8002cca:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8a1b      	ldrh	r3, [r3, #16]
 8002cd0:	02db      	lsls	r3, r3, #11
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002cda:	897b      	ldrh	r3, [r7, #10]
 8002cdc:	019b      	lsls	r3, r3, #6
 8002cde:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f043 0302 	orr.w	r3, r3, #2
 8002cee:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002d0a:	f7fe ff3f 	bl	8001b8c <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d10:	e015      	b.n	8002d3e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002d12:	f7fe ff3b 	bl	8001b8c <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d20:	d309      	bcc.n	8002d36 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e00d      	b.n	8002d52 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1e4      	bne.n	8002d12 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_ETH_Start+0x16>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e01f      	b.n	8002db0 <HAL_ETH_Start+0x56>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fa1b 	bl	80031bc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fa35 	bl	80031f6 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 fa7f 	bl	8003290 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fa4c 	bl	8003230 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fa61 	bl	8003260 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b0b0      	sub	sp, #192	; 0xc0
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d007      	beq.n	8002dde <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dd4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ddc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002dde:	2300      	movs	r3, #0
 8002de0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002de2:	2300      	movs	r3, #0
 8002de4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002de6:	2300      	movs	r3, #0
 8002de8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002dea:	2300      	movs	r3, #0
 8002dec:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002df2:	2300      	movs	r3, #0
 8002df4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d103      	bne.n	8002e06 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e02:	663b      	str	r3, [r7, #96]	; 0x60
 8002e04:	e001      	b.n	8002e0a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002e06:	2300      	movs	r3, #0
 8002e08:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002e0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e0e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002e10:	2300      	movs	r3, #0
 8002e12:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002e14:	2300      	movs	r3, #0
 8002e16:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002e20:	2300      	movs	r3, #0
 8002e22:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002e24:	2340      	movs	r3, #64	; 0x40
 8002e26:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002e34:	2300      	movs	r3, #0
 8002e36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002e40:	2300      	movs	r3, #0
 8002e42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002e58:	2380      	movs	r3, #128	; 0x80
 8002e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002e64:	2300      	movs	r3, #0
 8002e66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002e70:	2300      	movs	r3, #0
 8002e72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002e76:	2300      	movs	r3, #0
 8002e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002e8c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e90:	4bab      	ldr	r3, [pc, #684]	; (8003140 <ETH_MACDMAConfig+0x388>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002e98:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002e9c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002ea0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002ea4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002eaa:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002eac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002eae:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002eb2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002eb8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002eba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002ebc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002ebe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002ec0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002ec2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002ec4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002ec8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002ecc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002ece:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ee0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002eec:	2001      	movs	r0, #1
 8002eee:	f7fe fe59 	bl	8001ba4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002efa:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002efc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002efe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002f00:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002f02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002f04:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002f06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002f0a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002f0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002f10:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002f12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002f16:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002f18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002f1c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002f20:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002f28:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002f2a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f36:	2001      	movs	r0, #1
 8002f38:	f7fe fe34 	bl	8001ba4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f44:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f4e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002f58:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002f64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f68:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002f72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f76:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002f78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002f7c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002f7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002f82:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002f84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002f88:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002f8e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002f90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002f94:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002f96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002fa8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	f7fe fdf5 	bl	8001ba4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002fc2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002fc4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002fc8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fde:	2001      	movs	r0, #1
 8002fe0:	f7fe fde0 	bl	8001ba4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002fec:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002ff2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ff6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002ffc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003000:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003002:	2300      	movs	r3, #0
 8003004:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800300a:	2300      	movs	r3, #0
 800300c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800300e:	2300      	movs	r3, #0
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003012:	2304      	movs	r3, #4
 8003014:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003016:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800301c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003020:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003022:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003026:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800302c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800302e:	2380      	movs	r3, #128	; 0x80
 8003030:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8003032:	2300      	movs	r3, #0
 8003034:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003036:	2300      	movs	r3, #0
 8003038:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	f241 0318 	movw	r3, #4120	; 0x1018
 8003042:	4413      	add	r3, r2
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800304a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800304e:	4b3d      	ldr	r3, [pc, #244]	; (8003144 <ETH_MACDMAConfig+0x38c>)
 8003050:	4013      	ands	r3, r2
 8003052:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003056:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003058:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800305a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800305c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800305e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003060:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003062:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003064:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003066:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003068:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800306a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800306c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800306e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003072:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003074:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003076:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003078:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	f241 0318 	movw	r3, #4120	; 0x1018
 800308a:	4413      	add	r3, r2
 800308c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003090:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	f241 0318 	movw	r3, #4120	; 0x1018
 800309a:	4413      	add	r3, r2
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80030a2:	2001      	movs	r0, #1
 80030a4:	f7fe fd7e 	bl	8001ba4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	f241 0318 	movw	r3, #4120	; 0x1018
 80030b0:	4413      	add	r3, r2
 80030b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80030b6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80030b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80030bc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80030be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80030c0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80030c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80030c4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80030c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80030c8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80030ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030cc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80030ce:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80030d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80030d2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80030dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030e0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80030f0:	2001      	movs	r0, #1
 80030f2:	f7fe fd57 	bl	8001ba4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003102:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d10d      	bne.n	8003128 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	f241 031c 	movw	r3, #4124	; 0x101c
 8003114:	4413      	add	r3, r2
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6811      	ldr	r1, [r2, #0]
 800311c:	4a0a      	ldr	r2, [pc, #40]	; (8003148 <ETH_MACDMAConfig+0x390>)
 800311e:	431a      	orrs	r2, r3
 8003120:	f241 031c 	movw	r3, #4124	; 0x101c
 8003124:	440b      	add	r3, r1
 8003126:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	461a      	mov	r2, r3
 800312e:	2100      	movs	r1, #0
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f80b 	bl	800314c <ETH_MACAddressConfig>
}
 8003136:	bf00      	nop
 8003138:	37c0      	adds	r7, #192	; 0xc0
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	ff20810f 	.word	0xff20810f
 8003144:	f8de3f23 	.word	0xf8de3f23
 8003148:	00010040 	.word	0x00010040

0800314c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3305      	adds	r3, #5
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	021b      	lsls	r3, r3, #8
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	3204      	adds	r2, #4
 8003164:	7812      	ldrb	r2, [r2, #0]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <ETH_MACAddressConfig+0x68>)
 800316e:	4413      	add	r3, r2
 8003170:	461a      	mov	r2, r3
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3303      	adds	r3, #3
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	061a      	lsls	r2, r3, #24
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3302      	adds	r3, #2
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	041b      	lsls	r3, r3, #16
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3301      	adds	r3, #1
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	021b      	lsls	r3, r3, #8
 8003190:	4313      	orrs	r3, r2
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	7812      	ldrb	r2, [r2, #0]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <ETH_MACAddressConfig+0x6c>)
 800319e:	4413      	add	r3, r2
 80031a0:	461a      	mov	r2, r3
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	6013      	str	r3, [r2, #0]
}
 80031a6:	bf00      	nop
 80031a8:	371c      	adds	r7, #28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40028040 	.word	0x40028040
 80031b8:	40028044 	.word	0x40028044

080031bc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0208 	orr.w	r2, r2, #8
 80031d6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031e0:	2001      	movs	r0, #1
 80031e2:	f7fe fcdf 	bl	8001ba4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	601a      	str	r2, [r3, #0]
}
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b084      	sub	sp, #16
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0204 	orr.w	r2, r2, #4
 8003210:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800321a:	2001      	movs	r0, #1
 800321c:	f7fe fcc2 	bl	8001ba4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	601a      	str	r2, [r3, #0]
}
 8003228:	bf00      	nop
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	f241 0318 	movw	r3, #4120	; 0x1018
 8003240:	4413      	add	r3, r2
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6811      	ldr	r1, [r2, #0]
 8003248:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800324c:	f241 0318 	movw	r3, #4120	; 0x1018
 8003250:	440b      	add	r3, r1
 8003252:	601a      	str	r2, [r3, #0]
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	f241 0318 	movw	r3, #4120	; 0x1018
 8003270:	4413      	add	r3, r2
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6811      	ldr	r1, [r2, #0]
 8003278:	f043 0202 	orr.w	r2, r3, #2
 800327c:	f241 0318 	movw	r3, #4120	; 0x1018
 8003280:	440b      	add	r3, r1
 8003282:	601a      	str	r2, [r3, #0]
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	f241 0318 	movw	r3, #4120	; 0x1018
 80032a4:	4413      	add	r3, r2
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6811      	ldr	r1, [r2, #0]
 80032ac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80032b0:	f241 0318 	movw	r3, #4120	; 0x1018
 80032b4:	440b      	add	r3, r1
 80032b6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	f241 0318 	movw	r3, #4120	; 0x1018
 80032c0:	4413      	add	r3, r2
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032c6:	2001      	movs	r0, #1
 80032c8:	f7fe fc6c 	bl	8001ba4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6819      	ldr	r1, [r3, #0]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	f241 0318 	movw	r3, #4120	; 0x1018
 80032d6:	440b      	add	r3, r1
 80032d8:	601a      	str	r2, [r3, #0]
}
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b089      	sub	sp, #36	; 0x24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80032fe:	2300      	movs	r3, #0
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	e175      	b.n	80035f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003304:	2201      	movs	r2, #1
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	429a      	cmp	r2, r3
 800331e:	f040 8164 	bne.w	80035ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d00b      	beq.n	8003342 <HAL_GPIO_Init+0x5e>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b02      	cmp	r3, #2
 8003330:	d007      	beq.n	8003342 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003336:	2b11      	cmp	r3, #17
 8003338:	d003      	beq.n	8003342 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b12      	cmp	r3, #18
 8003340:	d130      	bne.n	80033a4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	2203      	movs	r2, #3
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4013      	ands	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003378:	2201      	movs	r2, #1
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	091b      	lsrs	r3, r3, #4
 800338e:	f003 0201 	and.w	r2, r3, #1
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4313      	orrs	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	2203      	movs	r2, #3
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_Init+0x100>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b12      	cmp	r3, #18
 80033e2:	d123      	bne.n	800342c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	08da      	lsrs	r2, r3, #3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3208      	adds	r2, #8
 80033ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	220f      	movs	r2, #15
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	08da      	lsrs	r2, r3, #3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3208      	adds	r2, #8
 8003426:	69b9      	ldr	r1, [r7, #24]
 8003428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	2203      	movs	r2, #3
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 0203 	and.w	r2, r3, #3
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4313      	orrs	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 80be 	beq.w	80035ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800346e:	4b65      	ldr	r3, [pc, #404]	; (8003604 <HAL_GPIO_Init+0x320>)
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	4a64      	ldr	r2, [pc, #400]	; (8003604 <HAL_GPIO_Init+0x320>)
 8003474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003478:	6453      	str	r3, [r2, #68]	; 0x44
 800347a:	4b62      	ldr	r3, [pc, #392]	; (8003604 <HAL_GPIO_Init+0x320>)
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003486:	4a60      	ldr	r2, [pc, #384]	; (8003608 <HAL_GPIO_Init+0x324>)
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	089b      	lsrs	r3, r3, #2
 800348c:	3302      	adds	r3, #2
 800348e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003492:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	220f      	movs	r2, #15
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43db      	mvns	r3, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4013      	ands	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a57      	ldr	r2, [pc, #348]	; (800360c <HAL_GPIO_Init+0x328>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d037      	beq.n	8003522 <HAL_GPIO_Init+0x23e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a56      	ldr	r2, [pc, #344]	; (8003610 <HAL_GPIO_Init+0x32c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d031      	beq.n	800351e <HAL_GPIO_Init+0x23a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a55      	ldr	r2, [pc, #340]	; (8003614 <HAL_GPIO_Init+0x330>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d02b      	beq.n	800351a <HAL_GPIO_Init+0x236>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a54      	ldr	r2, [pc, #336]	; (8003618 <HAL_GPIO_Init+0x334>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d025      	beq.n	8003516 <HAL_GPIO_Init+0x232>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a53      	ldr	r2, [pc, #332]	; (800361c <HAL_GPIO_Init+0x338>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d01f      	beq.n	8003512 <HAL_GPIO_Init+0x22e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a52      	ldr	r2, [pc, #328]	; (8003620 <HAL_GPIO_Init+0x33c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d019      	beq.n	800350e <HAL_GPIO_Init+0x22a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a51      	ldr	r2, [pc, #324]	; (8003624 <HAL_GPIO_Init+0x340>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d013      	beq.n	800350a <HAL_GPIO_Init+0x226>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a50      	ldr	r2, [pc, #320]	; (8003628 <HAL_GPIO_Init+0x344>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d00d      	beq.n	8003506 <HAL_GPIO_Init+0x222>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a4f      	ldr	r2, [pc, #316]	; (800362c <HAL_GPIO_Init+0x348>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d007      	beq.n	8003502 <HAL_GPIO_Init+0x21e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a4e      	ldr	r2, [pc, #312]	; (8003630 <HAL_GPIO_Init+0x34c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d101      	bne.n	80034fe <HAL_GPIO_Init+0x21a>
 80034fa:	2309      	movs	r3, #9
 80034fc:	e012      	b.n	8003524 <HAL_GPIO_Init+0x240>
 80034fe:	230a      	movs	r3, #10
 8003500:	e010      	b.n	8003524 <HAL_GPIO_Init+0x240>
 8003502:	2308      	movs	r3, #8
 8003504:	e00e      	b.n	8003524 <HAL_GPIO_Init+0x240>
 8003506:	2307      	movs	r3, #7
 8003508:	e00c      	b.n	8003524 <HAL_GPIO_Init+0x240>
 800350a:	2306      	movs	r3, #6
 800350c:	e00a      	b.n	8003524 <HAL_GPIO_Init+0x240>
 800350e:	2305      	movs	r3, #5
 8003510:	e008      	b.n	8003524 <HAL_GPIO_Init+0x240>
 8003512:	2304      	movs	r3, #4
 8003514:	e006      	b.n	8003524 <HAL_GPIO_Init+0x240>
 8003516:	2303      	movs	r3, #3
 8003518:	e004      	b.n	8003524 <HAL_GPIO_Init+0x240>
 800351a:	2302      	movs	r3, #2
 800351c:	e002      	b.n	8003524 <HAL_GPIO_Init+0x240>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <HAL_GPIO_Init+0x240>
 8003522:	2300      	movs	r3, #0
 8003524:	69fa      	ldr	r2, [r7, #28]
 8003526:	f002 0203 	and.w	r2, r2, #3
 800352a:	0092      	lsls	r2, r2, #2
 800352c:	4093      	lsls	r3, r2
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4313      	orrs	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003534:	4934      	ldr	r1, [pc, #208]	; (8003608 <HAL_GPIO_Init+0x324>)
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	089b      	lsrs	r3, r3, #2
 800353a:	3302      	adds	r3, #2
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003542:	4b3c      	ldr	r3, [pc, #240]	; (8003634 <HAL_GPIO_Init+0x350>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	43db      	mvns	r3, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4013      	ands	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4313      	orrs	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003566:	4a33      	ldr	r2, [pc, #204]	; (8003634 <HAL_GPIO_Init+0x350>)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800356c:	4b31      	ldr	r3, [pc, #196]	; (8003634 <HAL_GPIO_Init+0x350>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	43db      	mvns	r3, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003590:	4a28      	ldr	r2, [pc, #160]	; (8003634 <HAL_GPIO_Init+0x350>)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003596:	4b27      	ldr	r3, [pc, #156]	; (8003634 <HAL_GPIO_Init+0x350>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	43db      	mvns	r3, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4013      	ands	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035ba:	4a1e      	ldr	r2, [pc, #120]	; (8003634 <HAL_GPIO_Init+0x350>)
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035c0:	4b1c      	ldr	r3, [pc, #112]	; (8003634 <HAL_GPIO_Init+0x350>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035e4:	4a13      	ldr	r2, [pc, #76]	; (8003634 <HAL_GPIO_Init+0x350>)
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	3301      	adds	r3, #1
 80035ee:	61fb      	str	r3, [r7, #28]
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	2b0f      	cmp	r3, #15
 80035f4:	f67f ae86 	bls.w	8003304 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80035f8:	bf00      	nop
 80035fa:	3724      	adds	r7, #36	; 0x24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	40023800 	.word	0x40023800
 8003608:	40013800 	.word	0x40013800
 800360c:	40020000 	.word	0x40020000
 8003610:	40020400 	.word	0x40020400
 8003614:	40020800 	.word	0x40020800
 8003618:	40020c00 	.word	0x40020c00
 800361c:	40021000 	.word	0x40021000
 8003620:	40021400 	.word	0x40021400
 8003624:	40021800 	.word	0x40021800
 8003628:	40021c00 	.word	0x40021c00
 800362c:	40022000 	.word	0x40022000
 8003630:	40022400 	.word	0x40022400
 8003634:	40013c00 	.word	0x40013c00

08003638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	807b      	strh	r3, [r7, #2]
 8003644:	4613      	mov	r3, r2
 8003646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003648:	787b      	ldrb	r3, [r7, #1]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800364e:	887a      	ldrh	r2, [r7, #2]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003654:	e003      	b.n	800365e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003656:	887b      	ldrh	r3, [r7, #2]
 8003658:	041a      	lsls	r2, r3, #16
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	619a      	str	r2, [r3, #24]
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
 8003672:	460b      	mov	r3, r1
 8003674:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	695a      	ldr	r2, [r3, #20]
 800367a:	887b      	ldrh	r3, [r7, #2]
 800367c:	4013      	ands	r3, r2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d004      	beq.n	800368c <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003682:	887b      	ldrh	r3, [r7, #2]
 8003684:	041a      	lsls	r2, r3, #16
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800368a:	e002      	b.n	8003692 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800368c:	887a      	ldrh	r2, [r7, #2]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	619a      	str	r2, [r3, #24]
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
	...

080036a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e07f      	b.n	80037b2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fd ff94 	bl	80015f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2224      	movs	r2, #36	; 0x24
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003700:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d107      	bne.n	800371a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003716:	609a      	str	r2, [r3, #8]
 8003718:	e006      	b.n	8003728 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003726:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d104      	bne.n	800373a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003738:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6859      	ldr	r1, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <HAL_I2C_Init+0x11c>)
 8003746:	430b      	orrs	r3, r1
 8003748:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003758:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	ea42 0103 	orr.w	r1, r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	021a      	lsls	r2, r3, #8
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69d9      	ldr	r1, [r3, #28]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1a      	ldr	r2, [r3, #32]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	02008000 	.word	0x02008000

080037c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	607a      	str	r2, [r7, #4]
 80037ca:	461a      	mov	r2, r3
 80037cc:	460b      	mov	r3, r1
 80037ce:	817b      	strh	r3, [r7, #10]
 80037d0:	4613      	mov	r3, r2
 80037d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b20      	cmp	r3, #32
 80037de:	f040 80da 	bne.w	8003996 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_I2C_Master_Transmit+0x30>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e0d3      	b.n	8003998 <HAL_I2C_Master_Transmit+0x1d8>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037f8:	f7fe f9c8 	bl	8001b8c <HAL_GetTick>
 80037fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	2319      	movs	r3, #25
 8003804:	2201      	movs	r2, #1
 8003806:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 fe72 	bl	80044f4 <I2C_WaitOnFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e0be      	b.n	8003998 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2221      	movs	r2, #33	; 0x21
 800381e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2210      	movs	r2, #16
 8003826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	893a      	ldrh	r2, [r7, #8]
 800383a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	2bff      	cmp	r3, #255	; 0xff
 800384a:	d90e      	bls.n	800386a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	22ff      	movs	r2, #255	; 0xff
 8003850:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003856:	b2da      	uxtb	r2, r3
 8003858:	8979      	ldrh	r1, [r7, #10]
 800385a:	4b51      	ldr	r3, [pc, #324]	; (80039a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 ffd4 	bl	8004810 <I2C_TransferConfig>
 8003868:	e06c      	b.n	8003944 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003878:	b2da      	uxtb	r2, r3
 800387a:	8979      	ldrh	r1, [r7, #10]
 800387c:	4b48      	ldr	r3, [pc, #288]	; (80039a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 ffc3 	bl	8004810 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800388a:	e05b      	b.n	8003944 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	6a39      	ldr	r1, [r7, #32]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 fe6f 	bl	8004574 <I2C_WaitOnTXISFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e07b      	b.n	8003998 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	781a      	ldrb	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d034      	beq.n	8003944 <HAL_I2C_Master_Transmit+0x184>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d130      	bne.n	8003944 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	2200      	movs	r2, #0
 80038ea:	2180      	movs	r1, #128	; 0x80
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 fe01 	bl	80044f4 <I2C_WaitOnFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e04d      	b.n	8003998 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003900:	b29b      	uxth	r3, r3
 8003902:	2bff      	cmp	r3, #255	; 0xff
 8003904:	d90e      	bls.n	8003924 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	22ff      	movs	r2, #255	; 0xff
 800390a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003910:	b2da      	uxtb	r2, r3
 8003912:	8979      	ldrh	r1, [r7, #10]
 8003914:	2300      	movs	r3, #0
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 ff77 	bl	8004810 <I2C_TransferConfig>
 8003922:	e00f      	b.n	8003944 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003932:	b2da      	uxtb	r2, r3
 8003934:	8979      	ldrh	r1, [r7, #10]
 8003936:	2300      	movs	r3, #0
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 ff66 	bl	8004810 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d19e      	bne.n	800388c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	6a39      	ldr	r1, [r7, #32]
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 fe4e 	bl	80045f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e01a      	b.n	8003998 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2220      	movs	r2, #32
 8003968:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6859      	ldr	r1, [r3, #4]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <HAL_I2C_Master_Transmit+0x1e4>)
 8003976:	400b      	ands	r3, r1
 8003978:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	e000      	b.n	8003998 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003996:	2302      	movs	r3, #2
  }
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	80002000 	.word	0x80002000
 80039a4:	fe00e800 	.word	0xfe00e800

080039a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b088      	sub	sp, #32
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	461a      	mov	r2, r3
 80039b4:	460b      	mov	r3, r1
 80039b6:	817b      	strh	r3, [r7, #10]
 80039b8:	4613      	mov	r3, r2
 80039ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	f040 80db 	bne.w	8003b80 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_I2C_Master_Receive+0x30>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e0d4      	b.n	8003b82 <HAL_I2C_Master_Receive+0x1da>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039e0:	f7fe f8d4 	bl	8001b8c <HAL_GetTick>
 80039e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	2319      	movs	r3, #25
 80039ec:	2201      	movs	r2, #1
 80039ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 fd7e 	bl	80044f4 <I2C_WaitOnFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e0bf      	b.n	8003b82 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2222      	movs	r2, #34	; 0x22
 8003a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2210      	movs	r2, #16
 8003a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	893a      	ldrh	r2, [r7, #8]
 8003a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2bff      	cmp	r3, #255	; 0xff
 8003a32:	d90e      	bls.n	8003a52 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	22ff      	movs	r2, #255	; 0xff
 8003a38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	8979      	ldrh	r1, [r7, #10]
 8003a42:	4b52      	ldr	r3, [pc, #328]	; (8003b8c <HAL_I2C_Master_Receive+0x1e4>)
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 fee0 	bl	8004810 <I2C_TransferConfig>
 8003a50:	e06d      	b.n	8003b2e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	8979      	ldrh	r1, [r7, #10]
 8003a64:	4b49      	ldr	r3, [pc, #292]	; (8003b8c <HAL_I2C_Master_Receive+0x1e4>)
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 fecf 	bl	8004810 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003a72:	e05c      	b.n	8003b2e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	6a39      	ldr	r1, [r7, #32]
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 fdf7 	bl	800466c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e07c      	b.n	8003b82 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d034      	beq.n	8003b2e <HAL_I2C_Master_Receive+0x186>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d130      	bne.n	8003b2e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2180      	movs	r1, #128	; 0x80
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 fd0c 	bl	80044f4 <I2C_WaitOnFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e04d      	b.n	8003b82 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2bff      	cmp	r3, #255	; 0xff
 8003aee:	d90e      	bls.n	8003b0e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	22ff      	movs	r2, #255	; 0xff
 8003af4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	8979      	ldrh	r1, [r7, #10]
 8003afe:	2300      	movs	r3, #0
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 fe82 	bl	8004810 <I2C_TransferConfig>
 8003b0c:	e00f      	b.n	8003b2e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	8979      	ldrh	r1, [r7, #10]
 8003b20:	2300      	movs	r3, #0
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 fe71 	bl	8004810 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d19d      	bne.n	8003a74 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	6a39      	ldr	r1, [r7, #32]
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 fd59 	bl	80045f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e01a      	b.n	8003b82 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2220      	movs	r2, #32
 8003b52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6859      	ldr	r1, [r3, #4]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <HAL_I2C_Master_Receive+0x1e8>)
 8003b60:	400b      	ands	r3, r1
 8003b62:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	e000      	b.n	8003b82 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003b80:	2302      	movs	r3, #2
  }
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	80002400 	.word	0x80002400
 8003b90:	fe00e800 	.word	0xfe00e800

08003b94 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	68f9      	ldr	r1, [r7, #12]
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	4798      	blx	r3
  }
}
 8003bc0:	bf00      	nop
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	0a1b      	lsrs	r3, r3, #8
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d010      	beq.n	8003c0e <HAL_I2C_ER_IRQHandler+0x46>
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	09db      	lsrs	r3, r3, #7
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfc:	f043 0201 	orr.w	r2, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c0c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	0a9b      	lsrs	r3, r3, #10
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d010      	beq.n	8003c3c <HAL_I2C_ER_IRQHandler+0x74>
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	09db      	lsrs	r3, r3, #7
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00a      	beq.n	8003c3c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2a:	f043 0208 	orr.w	r2, r3, #8
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c3a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	0a5b      	lsrs	r3, r3, #9
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d010      	beq.n	8003c6a <HAL_I2C_ER_IRQHandler+0xa2>
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	09db      	lsrs	r3, r3, #7
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	f043 0202 	orr.w	r2, r3, #2
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c68:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f003 030b 	and.w	r3, r3, #11
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003c7a:	68f9      	ldr	r1, [r7, #12]
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 fb31 	bl	80042e4 <I2C_ITError>
  }
}
 8003c82:	bf00      	nop
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	460b      	mov	r3, r1
 8003cbc:	70fb      	strb	r3, [r7, #3]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b086      	sub	sp, #24
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <I2C_Slave_ISR_IT+0x24>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e0ec      	b.n	8003f08 <I2C_Slave_ISR_IT+0x1fe>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	095b      	lsrs	r3, r3, #5
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d009      	beq.n	8003d56 <I2C_Slave_ISR_IT+0x4c>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	095b      	lsrs	r3, r3, #5
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003d4e:	6939      	ldr	r1, [r7, #16]
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 f99d 	bl	8004090 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d04d      	beq.n	8003dfe <I2C_Slave_ISR_IT+0xf4>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d047      	beq.n	8003dfe <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d128      	bne.n	8003dca <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b28      	cmp	r3, #40	; 0x28
 8003d82:	d108      	bne.n	8003d96 <I2C_Slave_ISR_IT+0x8c>
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d8a:	d104      	bne.n	8003d96 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003d8c:	6939      	ldr	r1, [r7, #16]
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 fa54 	bl	800423c <I2C_ITListenCplt>
 8003d94:	e032      	b.n	8003dfc <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b29      	cmp	r3, #41	; 0x29
 8003da0:	d10e      	bne.n	8003dc0 <I2C_Slave_ISR_IT+0xb6>
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003da8:	d00a      	beq.n	8003dc0 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2210      	movs	r2, #16
 8003db0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 fb56 	bl	8004464 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 f92b 	bl	8004014 <I2C_ITSlaveSeqCplt>
 8003dbe:	e01d      	b.n	8003dfc <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2210      	movs	r2, #16
 8003dc6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003dc8:	e096      	b.n	8003ef8 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2210      	movs	r2, #16
 8003dd0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	f043 0204 	orr.w	r2, r3, #4
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d004      	beq.n	8003dee <I2C_Slave_ISR_IT+0xe4>
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dea:	f040 8085 	bne.w	8003ef8 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	4619      	mov	r1, r3
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fa75 	bl	80042e4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003dfa:	e07d      	b.n	8003ef8 <I2C_Slave_ISR_IT+0x1ee>
 8003dfc:	e07c      	b.n	8003ef8 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	089b      	lsrs	r3, r3, #2
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d030      	beq.n	8003e6c <I2C_Slave_ISR_IT+0x162>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	089b      	lsrs	r3, r3, #2
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d02a      	beq.n	8003e6c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d018      	beq.n	8003e52 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d14f      	bne.n	8003efc <I2C_Slave_ISR_IT+0x1f2>
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e62:	d04b      	beq.n	8003efc <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f8d5 	bl	8004014 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003e6a:	e047      	b.n	8003efc <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	08db      	lsrs	r3, r3, #3
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <I2C_Slave_ISR_IT+0x184>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	08db      	lsrs	r3, r3, #3
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d004      	beq.n	8003e8e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003e84:	6939      	ldr	r1, [r7, #16]
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 f842 	bl	8003f10 <I2C_ITAddrCplt>
 8003e8c:	e037      	b.n	8003efe <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	085b      	lsrs	r3, r3, #1
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d031      	beq.n	8003efe <I2C_Slave_ISR_IT+0x1f4>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	085b      	lsrs	r3, r3, #1
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d02b      	beq.n	8003efe <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d018      	beq.n	8003ee2 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	781a      	ldrb	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	851a      	strh	r2, [r3, #40]	; 0x28
 8003ee0:	e00d      	b.n	8003efe <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ee8:	d002      	beq.n	8003ef0 <I2C_Slave_ISR_IT+0x1e6>
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d106      	bne.n	8003efe <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 f88f 	bl	8004014 <I2C_ITSlaveSeqCplt>
 8003ef6:	e002      	b.n	8003efe <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003ef8:	bf00      	nop
 8003efa:	e000      	b.n	8003efe <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003efc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f26:	2b28      	cmp	r3, #40	; 0x28
 8003f28:	d168      	bne.n	8003ffc <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	0c1b      	lsrs	r3, r3, #16
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	0c1b      	lsrs	r3, r3, #16
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003f48:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f56:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003f64:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d137      	bne.n	8003fde <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8003f6e:	897b      	ldrh	r3, [r7, #10]
 8003f70:	09db      	lsrs	r3, r3, #7
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	89bb      	ldrh	r3, [r7, #12]
 8003f76:	4053      	eors	r3, r2
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f003 0306 	and.w	r3, r3, #6
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d11c      	bne.n	8003fbc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003f82:	897b      	ldrh	r3, [r7, #10]
 8003f84:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d139      	bne.n	800400c <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2208      	movs	r2, #8
 8003fa4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003fae:	89ba      	ldrh	r2, [r7, #12]
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff fe7c 	bl	8003cb2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003fba:	e027      	b.n	800400c <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8003fbc:	893b      	ldrh	r3, [r7, #8]
 8003fbe:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003fc0:	2104      	movs	r1, #4
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 fc52 	bl	800486c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003fd0:	89ba      	ldrh	r2, [r7, #12]
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff fe6b 	bl	8003cb2 <HAL_I2C_AddrCallback>
}
 8003fdc:	e016      	b.n	800400c <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003fde:	2104      	movs	r1, #4
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fc43 	bl	800486c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003fee:	89ba      	ldrh	r2, [r7, #12]
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff fe5c 	bl	8003cb2 <HAL_I2C_AddrCallback>
}
 8003ffa:	e007      	b.n	800400c <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2208      	movs	r2, #8
 8004002:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800400c:	bf00      	nop
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b29      	cmp	r3, #41	; 0x29
 800402e:	d112      	bne.n	8004056 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2228      	movs	r2, #40	; 0x28
 8004034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2221      	movs	r2, #33	; 0x21
 800403c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800403e:	2101      	movs	r1, #1
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 fc13 	bl	800486c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff fe1b 	bl	8003c8a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004054:	e017      	b.n	8004086 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b2a      	cmp	r3, #42	; 0x2a
 8004060:	d111      	bne.n	8004086 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2228      	movs	r2, #40	; 0x28
 8004066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2222      	movs	r2, #34	; 0x22
 800406e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004070:	2102      	movs	r1, #2
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fbfa 	bl	800486c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7ff fe0c 	bl	8003c9e <HAL_I2C_SlaveRxCpltCallback>
}
 8004086:	bf00      	nop
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2220      	movs	r2, #32
 80040ac:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80040ae:	2107      	movs	r1, #7
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 fbdb 	bl	800486c <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040c4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6859      	ldr	r1, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	4b58      	ldr	r3, [pc, #352]	; (8004234 <I2C_ITSlaveCplt+0x1a4>)
 80040d2:	400b      	ands	r3, r1
 80040d4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f9c4 	bl	8004464 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	0b9b      	lsrs	r3, r3, #14
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00b      	beq.n	8004100 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d018      	beq.n	8004122 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040fe:	e010      	b.n	8004122 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	0bdb      	lsrs	r3, r3, #15
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004110:	2b00      	cmp	r3, #0
 8004112:	d006      	beq.n	8004122 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	b29a      	uxth	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	089b      	lsrs	r3, r3, #2
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d020      	beq.n	8004170 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f023 0304 	bic.w	r3, r3, #4
 8004134:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00c      	beq.n	8004170 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417e:	f043 0204 	orr.w	r2, r3, #4
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d010      	beq.n	80041c4 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a6:	4619      	mov	r1, r3
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f89b 	bl	80042e4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b28      	cmp	r3, #40	; 0x28
 80041b8:	d138      	bne.n	800422c <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80041ba:	68f9      	ldr	r1, [r7, #12]
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f83d 	bl	800423c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041c2:	e033      	b.n	800422c <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041cc:	d011      	beq.n	80041f2 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7ff ff20 	bl	8004014 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a18      	ldr	r2, [pc, #96]	; (8004238 <I2C_ITSlaveCplt+0x1a8>)
 80041d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff fd6f 	bl	8003cce <HAL_I2C_ListenCpltCallback>
}
 80041f0:	e01c      	b.n	800422c <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b22      	cmp	r3, #34	; 0x22
 80041fc:	d10b      	bne.n	8004216 <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff fd45 	bl	8003c9e <HAL_I2C_SlaveRxCpltCallback>
}
 8004214:	e00a      	b.n	800422c <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff fd2f 	bl	8003c8a <HAL_I2C_SlaveTxCpltCallback>
}
 800422c:	bf00      	nop
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	fe00e800 	.word	0xfe00e800
 8004238:	ffff0000 	.word	0xffff0000

0800423c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a25      	ldr	r2, [pc, #148]	; (80042e0 <I2C_ITListenCplt+0xa4>)
 800424a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	089b      	lsrs	r3, r3, #2
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d022      	beq.n	80042ba <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004290:	2b00      	cmp	r3, #0
 8004292:	d012      	beq.n	80042ba <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b2:	f043 0204 	orr.w	r2, r3, #4
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80042ba:	2107      	movs	r1, #7
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fad5 	bl	800486c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2210      	movs	r2, #16
 80042c8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7ff fcfb 	bl	8003cce <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80042d8:	bf00      	nop
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	ffff0000 	.word	0xffff0000

080042e4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f4:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a55      	ldr	r2, [pc, #340]	; (8004458 <I2C_ITError+0x174>)
 8004302:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	431a      	orrs	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	2b28      	cmp	r3, #40	; 0x28
 800431a:	d005      	beq.n	8004328 <I2C_ITError+0x44>
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	2b29      	cmp	r3, #41	; 0x29
 8004320:	d002      	beq.n	8004328 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	2b2a      	cmp	r3, #42	; 0x2a
 8004326:	d10e      	bne.n	8004346 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004328:	2103      	movs	r1, #3
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fa9e 	bl	800486c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2228      	movs	r2, #40	; 0x28
 8004334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a46      	ldr	r2, [pc, #280]	; (800445c <I2C_ITError+0x178>)
 8004342:	635a      	str	r2, [r3, #52]	; 0x34
 8004344:	e013      	b.n	800436e <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004346:	2107      	movs	r1, #7
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 fa8f 	bl	800486c <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b60      	cmp	r3, #96	; 0x60
 8004358:	d003      	beq.n	8004362 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2220      	movs	r2, #32
 800435e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004378:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800437c:	d123      	bne.n	80043c6 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800438c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004392:	2b00      	cmp	r3, #0
 8004394:	d05c      	beq.n	8004450 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439a:	4a31      	ldr	r2, [pc, #196]	; (8004460 <I2C_ITError+0x17c>)
 800439c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fd ff86 	bl	80022bc <HAL_DMA_Abort_IT>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d04c      	beq.n	8004450 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043c0:	4610      	mov	r0, r2
 80043c2:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043c4:	e044      	b.n	8004450 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d4:	d123      	bne.n	800441e <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043e4:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d030      	beq.n	8004450 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f2:	4a1b      	ldr	r2, [pc, #108]	; (8004460 <I2C_ITError+0x17c>)
 80043f4:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004402:	4618      	mov	r0, r3
 8004404:	f7fd ff5a 	bl	80022bc <HAL_DMA_Abort_IT>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d020      	beq.n	8004450 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004418:	4610      	mov	r0, r2
 800441a:	4798      	blx	r3
}
 800441c:	e018      	b.n	8004450 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b60      	cmp	r3, #96	; 0x60
 8004428:	d10b      	bne.n	8004442 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff fc5b 	bl	8003cf6 <HAL_I2C_AbortCpltCallback>
}
 8004440:	e006      	b.n	8004450 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff fc49 	bl	8003ce2 <HAL_I2C_ErrorCallback>
}
 8004450:	bf00      	nop
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	ffff0000 	.word	0xffff0000
 800445c:	08003d0b 	.word	0x08003d0b
 8004460:	080044ad 	.word	0x080044ad

08004464 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b02      	cmp	r3, #2
 8004478:	d103      	bne.n	8004482 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2200      	movs	r2, #0
 8004480:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b01      	cmp	r3, #1
 800448e:	d007      	beq.n	80044a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699a      	ldr	r2, [r3, #24]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0201 	orr.w	r2, r2, #1
 800449e:	619a      	str	r2, [r3, #24]
  }
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044be:	2200      	movs	r2, #0
 80044c0:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c6:	2200      	movs	r2, #0
 80044c8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b60      	cmp	r3, #96	; 0x60
 80044d4:	d107      	bne.n	80044e6 <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f7ff fc09 	bl	8003cf6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044e4:	e002      	b.n	80044ec <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f7ff fbfb 	bl	8003ce2 <HAL_I2C_ErrorCallback>
}
 80044ec:	bf00      	nop
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	603b      	str	r3, [r7, #0]
 8004500:	4613      	mov	r3, r2
 8004502:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004504:	e022      	b.n	800454c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450c:	d01e      	beq.n	800454c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450e:	f7fd fb3d 	bl	8001b8c <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d302      	bcc.n	8004524 <I2C_WaitOnFlagUntilTimeout+0x30>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d113      	bne.n	800454c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004528:	f043 0220 	orr.w	r2, r3, #32
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e00f      	b.n	800456c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699a      	ldr	r2, [r3, #24]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	4013      	ands	r3, r2
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	429a      	cmp	r2, r3
 800455a:	bf0c      	ite	eq
 800455c:	2301      	moveq	r3, #1
 800455e:	2300      	movne	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	461a      	mov	r2, r3
 8004564:	79fb      	ldrb	r3, [r7, #7]
 8004566:	429a      	cmp	r2, r3
 8004568:	d0cd      	beq.n	8004506 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004580:	e02c      	b.n	80045dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	68b9      	ldr	r1, [r7, #8]
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 f8dc 	bl	8004744 <I2C_IsAcknowledgeFailed>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e02a      	b.n	80045ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459c:	d01e      	beq.n	80045dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459e:	f7fd faf5 	bl	8001b8c <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d302      	bcc.n	80045b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d113      	bne.n	80045dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b8:	f043 0220 	orr.w	r2, r3, #32
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e007      	b.n	80045ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d1cb      	bne.n	8004582 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004600:	e028      	b.n	8004654 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	68b9      	ldr	r1, [r7, #8]
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f89c 	bl	8004744 <I2C_IsAcknowledgeFailed>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e026      	b.n	8004664 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004616:	f7fd fab9 	bl	8001b8c <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	429a      	cmp	r2, r3
 8004624:	d302      	bcc.n	800462c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d113      	bne.n	8004654 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004630:	f043 0220 	orr.w	r2, r3, #32
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e007      	b.n	8004664 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	f003 0320 	and.w	r3, r3, #32
 800465e:	2b20      	cmp	r3, #32
 8004660:	d1cf      	bne.n	8004602 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004678:	e055      	b.n	8004726 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	68b9      	ldr	r1, [r7, #8]
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f860 	bl	8004744 <I2C_IsAcknowledgeFailed>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e053      	b.n	8004736 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b20      	cmp	r3, #32
 800469a:	d129      	bne.n	80046f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	f003 0304 	and.w	r3, r3, #4
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d105      	bne.n	80046b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	e03f      	b.n	8004736 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2220      	movs	r2, #32
 80046bc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6859      	ldr	r1, [r3, #4]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	4b1d      	ldr	r3, [pc, #116]	; (8004740 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80046ca:	400b      	ands	r3, r1
 80046cc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2220      	movs	r2, #32
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e022      	b.n	8004736 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f0:	f7fd fa4c 	bl	8001b8c <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d302      	bcc.n	8004706 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10f      	bne.n	8004726 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470a:	f043 0220 	orr.w	r2, r3, #32
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2220      	movs	r2, #32
 8004716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e007      	b.n	8004736 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b04      	cmp	r3, #4
 8004732:	d1a2      	bne.n	800467a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	fe00e800 	.word	0xfe00e800

08004744 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	2b10      	cmp	r3, #16
 800475c:	d151      	bne.n	8004802 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800475e:	e022      	b.n	80047a6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004766:	d01e      	beq.n	80047a6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004768:	f7fd fa10 	bl	8001b8c <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	429a      	cmp	r2, r3
 8004776:	d302      	bcc.n	800477e <I2C_IsAcknowledgeFailed+0x3a>
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d113      	bne.n	80047a6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004782:	f043 0220 	orr.w	r2, r3, #32
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2220      	movs	r2, #32
 800478e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e02e      	b.n	8004804 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	f003 0320 	and.w	r3, r3, #32
 80047b0:	2b20      	cmp	r3, #32
 80047b2:	d1d5      	bne.n	8004760 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2210      	movs	r2, #16
 80047ba:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2220      	movs	r2, #32
 80047c2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f7ff fe4d 	bl	8004464 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6859      	ldr	r1, [r3, #4]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	4b0d      	ldr	r3, [pc, #52]	; (800480c <I2C_IsAcknowledgeFailed+0xc8>)
 80047d6:	400b      	ands	r3, r1
 80047d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047de:	f043 0204 	orr.w	r2, r3, #4
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	fe00e800 	.word	0xfe00e800

08004810 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	607b      	str	r3, [r7, #4]
 800481a:	460b      	mov	r3, r1
 800481c:	817b      	strh	r3, [r7, #10]
 800481e:	4613      	mov	r3, r2
 8004820:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	0d5b      	lsrs	r3, r3, #21
 800482c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004830:	4b0d      	ldr	r3, [pc, #52]	; (8004868 <I2C_TransferConfig+0x58>)
 8004832:	430b      	orrs	r3, r1
 8004834:	43db      	mvns	r3, r3
 8004836:	ea02 0103 	and.w	r1, r2, r3
 800483a:	897b      	ldrh	r3, [r7, #10]
 800483c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004840:	7a7b      	ldrb	r3, [r7, #9]
 8004842:	041b      	lsls	r3, r3, #16
 8004844:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	431a      	orrs	r2, r3
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	431a      	orrs	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800485a:	bf00      	nop
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	03ff63ff 	.word	0x03ff63ff

0800486c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800487c:	887b      	ldrh	r3, [r7, #2]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00f      	beq.n	80048a6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800488c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004894:	b2db      	uxtb	r3, r3
 8004896:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800489a:	2b28      	cmp	r3, #40	; 0x28
 800489c:	d003      	beq.n	80048a6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80048a4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80048a6:	887b      	ldrh	r3, [r7, #2]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00f      	beq.n	80048d0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80048b6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048c4:	2b28      	cmp	r3, #40	; 0x28
 80048c6:	d003      	beq.n	80048d0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80048ce:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80048d0:	887b      	ldrh	r3, [r7, #2]
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80048e0:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80048e2:	887b      	ldrh	r3, [r7, #2]
 80048e4:	f003 0311 	and.w	r3, r3, #17
 80048e8:	2b11      	cmp	r3, #17
 80048ea:	d103      	bne.n	80048f4 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80048f2:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80048f4:	887b      	ldrh	r3, [r7, #2]
 80048f6:	f003 0312 	and.w	r3, r3, #18
 80048fa:	2b12      	cmp	r3, #18
 80048fc:	d103      	bne.n	8004906 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f043 0320 	orr.w	r3, r3, #32
 8004904:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8004906:	887b      	ldrh	r3, [r7, #2]
 8004908:	f003 0312 	and.w	r3, r3, #18
 800490c:	2b12      	cmp	r3, #18
 800490e:	d103      	bne.n	8004918 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004916:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6819      	ldr	r1, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	43da      	mvns	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	400a      	ands	r2, r1
 8004928:	601a      	str	r2, [r3, #0]
}
 800492a:	bf00      	nop
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b20      	cmp	r3, #32
 800494a:	d138      	bne.n	80049be <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004952:	2b01      	cmp	r3, #1
 8004954:	d101      	bne.n	800495a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004956:	2302      	movs	r3, #2
 8004958:	e032      	b.n	80049c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2224      	movs	r2, #36	; 0x24
 8004966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0201 	bic.w	r2, r2, #1
 8004978:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004988:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6819      	ldr	r1, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0201 	orr.w	r2, r2, #1
 80049a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	e000      	b.n	80049c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049be:	2302      	movs	r3, #2
  }
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d139      	bne.n	8004a56 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e033      	b.n	8004a58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2224      	movs	r2, #36	; 0x24
 80049fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0201 	bic.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a1e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	021b      	lsls	r3, r3, #8
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f042 0201 	orr.w	r2, r2, #1
 8004a40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	e000      	b.n	8004a58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a56:	2302      	movs	r3, #2
  }
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a66:	b08f      	sub	sp, #60	; 0x3c
 8004a68:	af0a      	add	r7, sp, #40	; 0x28
 8004a6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e116      	b.n	8004ca4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d106      	bne.n	8004a96 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7fc fe7f 	bl	8001794 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2203      	movs	r2, #3
 8004a9a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d102      	bne.n	8004ab0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f002 febf 	bl	8007838 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	603b      	str	r3, [r7, #0]
 8004ac0:	687e      	ldr	r6, [r7, #4]
 8004ac2:	466d      	mov	r5, sp
 8004ac4:	f106 0410 	add.w	r4, r6, #16
 8004ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004acc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ace:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ad0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ad4:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ad8:	1d33      	adds	r3, r6, #4
 8004ada:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004adc:	6838      	ldr	r0, [r7, #0]
 8004ade:	f002 fe53 	bl	8007788 <USB_CoreInit>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0d7      	b.n	8004ca4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f002 fead 	bl	800785a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b00:	2300      	movs	r3, #0
 8004b02:	73fb      	strb	r3, [r7, #15]
 8004b04:	e04a      	b.n	8004b9c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b06:	7bfa      	ldrb	r2, [r7, #15]
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	1a9b      	subs	r3, r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	440b      	add	r3, r1
 8004b14:	333d      	adds	r3, #61	; 0x3d
 8004b16:	2201      	movs	r2, #1
 8004b18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b1a:	7bfa      	ldrb	r2, [r7, #15]
 8004b1c:	6879      	ldr	r1, [r7, #4]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	1a9b      	subs	r3, r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	440b      	add	r3, r1
 8004b28:	333c      	adds	r3, #60	; 0x3c
 8004b2a:	7bfa      	ldrb	r2, [r7, #15]
 8004b2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b2e:	7bfa      	ldrb	r2, [r7, #15]
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	b298      	uxth	r0, r3
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	4613      	mov	r3, r2
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	1a9b      	subs	r3, r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	440b      	add	r3, r1
 8004b40:	3342      	adds	r3, #66	; 0x42
 8004b42:	4602      	mov	r2, r0
 8004b44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b46:	7bfa      	ldrb	r2, [r7, #15]
 8004b48:	6879      	ldr	r1, [r7, #4]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	1a9b      	subs	r3, r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	440b      	add	r3, r1
 8004b54:	333f      	adds	r3, #63	; 0x3f
 8004b56:	2200      	movs	r2, #0
 8004b58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b5a:	7bfa      	ldrb	r2, [r7, #15]
 8004b5c:	6879      	ldr	r1, [r7, #4]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	1a9b      	subs	r3, r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	440b      	add	r3, r1
 8004b68:	3344      	adds	r3, #68	; 0x44
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b6e:	7bfa      	ldrb	r2, [r7, #15]
 8004b70:	6879      	ldr	r1, [r7, #4]
 8004b72:	4613      	mov	r3, r2
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	1a9b      	subs	r3, r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	440b      	add	r3, r1
 8004b7c:	3348      	adds	r3, #72	; 0x48
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b82:	7bfa      	ldrb	r2, [r7, #15]
 8004b84:	6879      	ldr	r1, [r7, #4]
 8004b86:	4613      	mov	r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	1a9b      	subs	r3, r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	440b      	add	r3, r1
 8004b90:	3350      	adds	r3, #80	; 0x50
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	73fb      	strb	r3, [r7, #15]
 8004b9c:	7bfa      	ldrb	r2, [r7, #15]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d3af      	bcc.n	8004b06 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	73fb      	strb	r3, [r7, #15]
 8004baa:	e044      	b.n	8004c36 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004bac:	7bfa      	ldrb	r2, [r7, #15]
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	1a9b      	subs	r3, r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004bc2:	7bfa      	ldrb	r2, [r7, #15]
 8004bc4:	6879      	ldr	r1, [r7, #4]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	1a9b      	subs	r3, r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	440b      	add	r3, r1
 8004bd0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004bd4:	7bfa      	ldrb	r2, [r7, #15]
 8004bd6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004bd8:	7bfa      	ldrb	r2, [r7, #15]
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	1a9b      	subs	r3, r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004bea:	2200      	movs	r2, #0
 8004bec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004bee:	7bfa      	ldrb	r2, [r7, #15]
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	1a9b      	subs	r3, r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	440b      	add	r3, r1
 8004bfc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c04:	7bfa      	ldrb	r2, [r7, #15]
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	1a9b      	subs	r3, r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c1a:	7bfa      	ldrb	r2, [r7, #15]
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	1a9b      	subs	r3, r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	440b      	add	r3, r1
 8004c28:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	3301      	adds	r3, #1
 8004c34:	73fb      	strb	r3, [r7, #15]
 8004c36:	7bfa      	ldrb	r2, [r7, #15]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d3b5      	bcc.n	8004bac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	603b      	str	r3, [r7, #0]
 8004c46:	687e      	ldr	r6, [r7, #4]
 8004c48:	466d      	mov	r5, sp
 8004c4a:	f106 0410 	add.w	r4, r6, #16
 8004c4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c5e:	1d33      	adds	r3, r6, #4
 8004c60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c62:	6838      	ldr	r0, [r7, #0]
 8004c64:	f002 fe24 	bl	80078b0 <USB_DevInit>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d005      	beq.n	8004c7a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2202      	movs	r2, #2
 8004c72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e014      	b.n	8004ca4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d102      	bne.n	8004c98 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f80a 	bl	8004cac <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f002 ffd6 	bl	8007c4e <USB_DevDisconnect>

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cda:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <HAL_PCDEx_ActivateLPM+0x44>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr
 8004cf0:	10000003 	.word	0x10000003

08004cf4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cf8:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a04      	ldr	r2, [pc, #16]	; (8004d10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d02:	6013      	str	r3, [r2, #0]
}
 8004d04:	bf00      	nop
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40007000 	.word	0x40007000

08004d14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d1e:	4b23      	ldr	r3, [pc, #140]	; (8004dac <HAL_PWREx_EnableOverDrive+0x98>)
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	4a22      	ldr	r2, [pc, #136]	; (8004dac <HAL_PWREx_EnableOverDrive+0x98>)
 8004d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d28:	6413      	str	r3, [r2, #64]	; 0x40
 8004d2a:	4b20      	ldr	r3, [pc, #128]	; (8004dac <HAL_PWREx_EnableOverDrive+0x98>)
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d32:	603b      	str	r3, [r7, #0]
 8004d34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d36:	4b1e      	ldr	r3, [pc, #120]	; (8004db0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a1d      	ldr	r2, [pc, #116]	; (8004db0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d40:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d42:	f7fc ff23 	bl	8001b8c <HAL_GetTick>
 8004d46:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d48:	e009      	b.n	8004d5e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d4a:	f7fc ff1f 	bl	8001b8c <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d58:	d901      	bls.n	8004d5e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e022      	b.n	8004da4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d5e:	4b14      	ldr	r3, [pc, #80]	; (8004db0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6a:	d1ee      	bne.n	8004d4a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004d6c:	4b10      	ldr	r3, [pc, #64]	; (8004db0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a0f      	ldr	r2, [pc, #60]	; (8004db0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d76:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d78:	f7fc ff08 	bl	8001b8c <HAL_GetTick>
 8004d7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d7e:	e009      	b.n	8004d94 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d80:	f7fc ff04 	bl	8001b8c <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d8e:	d901      	bls.n	8004d94 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e007      	b.n	8004da4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d94:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004da0:	d1ee      	bne.n	8004d80 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40023800 	.word	0x40023800
 8004db0:	40007000 	.word	0x40007000

08004db4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e29b      	b.n	8005302 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 8087 	beq.w	8004ee6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004dd8:	4b96      	ldr	r3, [pc, #600]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f003 030c 	and.w	r3, r3, #12
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d00c      	beq.n	8004dfe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004de4:	4b93      	ldr	r3, [pc, #588]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 030c 	and.w	r3, r3, #12
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d112      	bne.n	8004e16 <HAL_RCC_OscConfig+0x62>
 8004df0:	4b90      	ldr	r3, [pc, #576]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dfc:	d10b      	bne.n	8004e16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dfe:	4b8d      	ldr	r3, [pc, #564]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d06c      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x130>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d168      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e275      	b.n	8005302 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e1e:	d106      	bne.n	8004e2e <HAL_RCC_OscConfig+0x7a>
 8004e20:	4b84      	ldr	r3, [pc, #528]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a83      	ldr	r2, [pc, #524]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	e02e      	b.n	8004e8c <HAL_RCC_OscConfig+0xd8>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10c      	bne.n	8004e50 <HAL_RCC_OscConfig+0x9c>
 8004e36:	4b7f      	ldr	r3, [pc, #508]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a7e      	ldr	r2, [pc, #504]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e40:	6013      	str	r3, [r2, #0]
 8004e42:	4b7c      	ldr	r3, [pc, #496]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a7b      	ldr	r2, [pc, #492]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004e48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	e01d      	b.n	8004e8c <HAL_RCC_OscConfig+0xd8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e58:	d10c      	bne.n	8004e74 <HAL_RCC_OscConfig+0xc0>
 8004e5a:	4b76      	ldr	r3, [pc, #472]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a75      	ldr	r2, [pc, #468]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	4b73      	ldr	r3, [pc, #460]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a72      	ldr	r2, [pc, #456]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	e00b      	b.n	8004e8c <HAL_RCC_OscConfig+0xd8>
 8004e74:	4b6f      	ldr	r3, [pc, #444]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a6e      	ldr	r2, [pc, #440]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e7e:	6013      	str	r3, [r2, #0]
 8004e80:	4b6c      	ldr	r3, [pc, #432]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a6b      	ldr	r2, [pc, #428]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d013      	beq.n	8004ebc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e94:	f7fc fe7a 	bl	8001b8c <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e9c:	f7fc fe76 	bl	8001b8c <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b64      	cmp	r3, #100	; 0x64
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e229      	b.n	8005302 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eae:	4b61      	ldr	r3, [pc, #388]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0f0      	beq.n	8004e9c <HAL_RCC_OscConfig+0xe8>
 8004eba:	e014      	b.n	8004ee6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebc:	f7fc fe66 	bl	8001b8c <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ec4:	f7fc fe62 	bl	8001b8c <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b64      	cmp	r3, #100	; 0x64
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e215      	b.n	8005302 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ed6:	4b57      	ldr	r3, [pc, #348]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1f0      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x110>
 8004ee2:	e000      	b.n	8004ee6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d069      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ef2:	4b50      	ldr	r3, [pc, #320]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 030c 	and.w	r3, r3, #12
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00b      	beq.n	8004f16 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004efe:	4b4d      	ldr	r3, [pc, #308]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 030c 	and.w	r3, r3, #12
 8004f06:	2b08      	cmp	r3, #8
 8004f08:	d11c      	bne.n	8004f44 <HAL_RCC_OscConfig+0x190>
 8004f0a:	4b4a      	ldr	r3, [pc, #296]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d116      	bne.n	8004f44 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f16:	4b47      	ldr	r3, [pc, #284]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d005      	beq.n	8004f2e <HAL_RCC_OscConfig+0x17a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d001      	beq.n	8004f2e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e1e9      	b.n	8005302 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f2e:	4b41      	ldr	r3, [pc, #260]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	493d      	ldr	r1, [pc, #244]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f42:	e040      	b.n	8004fc6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d023      	beq.n	8004f94 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f4c:	4b39      	ldr	r3, [pc, #228]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a38      	ldr	r2, [pc, #224]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004f52:	f043 0301 	orr.w	r3, r3, #1
 8004f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f58:	f7fc fe18 	bl	8001b8c <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f60:	f7fc fe14 	bl	8001b8c <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e1c7      	b.n	8005302 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f72:	4b30      	ldr	r3, [pc, #192]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d0f0      	beq.n	8004f60 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f7e:	4b2d      	ldr	r3, [pc, #180]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	4929      	ldr	r1, [pc, #164]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	600b      	str	r3, [r1, #0]
 8004f92:	e018      	b.n	8004fc6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f94:	4b27      	ldr	r3, [pc, #156]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a26      	ldr	r2, [pc, #152]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004f9a:	f023 0301 	bic.w	r3, r3, #1
 8004f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa0:	f7fc fdf4 	bl	8001b8c <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fa8:	f7fc fdf0 	bl	8001b8c <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e1a3      	b.n	8005302 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fba:	4b1e      	ldr	r3, [pc, #120]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1f0      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d038      	beq.n	8005044 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d019      	beq.n	800500e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fda:	4b16      	ldr	r3, [pc, #88]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fde:	4a15      	ldr	r2, [pc, #84]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8004fe0:	f043 0301 	orr.w	r3, r3, #1
 8004fe4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe6:	f7fc fdd1 	bl	8001b8c <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fec:	e008      	b.n	8005000 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fee:	f7fc fdcd 	bl	8001b8c <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e180      	b.n	8005302 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005000:	4b0c      	ldr	r3, [pc, #48]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8005002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0f0      	beq.n	8004fee <HAL_RCC_OscConfig+0x23a>
 800500c:	e01a      	b.n	8005044 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800500e:	4b09      	ldr	r3, [pc, #36]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8005010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005012:	4a08      	ldr	r2, [pc, #32]	; (8005034 <HAL_RCC_OscConfig+0x280>)
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800501a:	f7fc fdb7 	bl	8001b8c <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005020:	e00a      	b.n	8005038 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005022:	f7fc fdb3 	bl	8001b8c <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d903      	bls.n	8005038 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e166      	b.n	8005302 <HAL_RCC_OscConfig+0x54e>
 8005034:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005038:	4b92      	ldr	r3, [pc, #584]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 800503a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1ee      	bne.n	8005022 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 80a4 	beq.w	800519a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005052:	4b8c      	ldr	r3, [pc, #560]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10d      	bne.n	800507a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800505e:	4b89      	ldr	r3, [pc, #548]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	4a88      	ldr	r2, [pc, #544]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 8005064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005068:	6413      	str	r3, [r2, #64]	; 0x40
 800506a:	4b86      	ldr	r3, [pc, #536]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005072:	60bb      	str	r3, [r7, #8]
 8005074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005076:	2301      	movs	r3, #1
 8005078:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800507a:	4b83      	ldr	r3, [pc, #524]	; (8005288 <HAL_RCC_OscConfig+0x4d4>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005082:	2b00      	cmp	r3, #0
 8005084:	d118      	bne.n	80050b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005086:	4b80      	ldr	r3, [pc, #512]	; (8005288 <HAL_RCC_OscConfig+0x4d4>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a7f      	ldr	r2, [pc, #508]	; (8005288 <HAL_RCC_OscConfig+0x4d4>)
 800508c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005092:	f7fc fd7b 	bl	8001b8c <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005098:	e008      	b.n	80050ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800509a:	f7fc fd77 	bl	8001b8c <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b64      	cmp	r3, #100	; 0x64
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e12a      	b.n	8005302 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050ac:	4b76      	ldr	r3, [pc, #472]	; (8005288 <HAL_RCC_OscConfig+0x4d4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0f0      	beq.n	800509a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d106      	bne.n	80050ce <HAL_RCC_OscConfig+0x31a>
 80050c0:	4b70      	ldr	r3, [pc, #448]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 80050c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c4:	4a6f      	ldr	r2, [pc, #444]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 80050c6:	f043 0301 	orr.w	r3, r3, #1
 80050ca:	6713      	str	r3, [r2, #112]	; 0x70
 80050cc:	e02d      	b.n	800512a <HAL_RCC_OscConfig+0x376>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10c      	bne.n	80050f0 <HAL_RCC_OscConfig+0x33c>
 80050d6:	4b6b      	ldr	r3, [pc, #428]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 80050d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050da:	4a6a      	ldr	r2, [pc, #424]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 80050dc:	f023 0301 	bic.w	r3, r3, #1
 80050e0:	6713      	str	r3, [r2, #112]	; 0x70
 80050e2:	4b68      	ldr	r3, [pc, #416]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 80050e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e6:	4a67      	ldr	r2, [pc, #412]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 80050e8:	f023 0304 	bic.w	r3, r3, #4
 80050ec:	6713      	str	r3, [r2, #112]	; 0x70
 80050ee:	e01c      	b.n	800512a <HAL_RCC_OscConfig+0x376>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2b05      	cmp	r3, #5
 80050f6:	d10c      	bne.n	8005112 <HAL_RCC_OscConfig+0x35e>
 80050f8:	4b62      	ldr	r3, [pc, #392]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 80050fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fc:	4a61      	ldr	r2, [pc, #388]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 80050fe:	f043 0304 	orr.w	r3, r3, #4
 8005102:	6713      	str	r3, [r2, #112]	; 0x70
 8005104:	4b5f      	ldr	r3, [pc, #380]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 8005106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005108:	4a5e      	ldr	r2, [pc, #376]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 800510a:	f043 0301 	orr.w	r3, r3, #1
 800510e:	6713      	str	r3, [r2, #112]	; 0x70
 8005110:	e00b      	b.n	800512a <HAL_RCC_OscConfig+0x376>
 8005112:	4b5c      	ldr	r3, [pc, #368]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 8005114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005116:	4a5b      	ldr	r2, [pc, #364]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 8005118:	f023 0301 	bic.w	r3, r3, #1
 800511c:	6713      	str	r3, [r2, #112]	; 0x70
 800511e:	4b59      	ldr	r3, [pc, #356]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 8005120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005122:	4a58      	ldr	r2, [pc, #352]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 8005124:	f023 0304 	bic.w	r3, r3, #4
 8005128:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d015      	beq.n	800515e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005132:	f7fc fd2b 	bl	8001b8c <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005138:	e00a      	b.n	8005150 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800513a:	f7fc fd27 	bl	8001b8c <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	f241 3288 	movw	r2, #5000	; 0x1388
 8005148:	4293      	cmp	r3, r2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e0d8      	b.n	8005302 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005150:	4b4c      	ldr	r3, [pc, #304]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 8005152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0ee      	beq.n	800513a <HAL_RCC_OscConfig+0x386>
 800515c:	e014      	b.n	8005188 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515e:	f7fc fd15 	bl	8001b8c <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005164:	e00a      	b.n	800517c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005166:	f7fc fd11 	bl	8001b8c <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	f241 3288 	movw	r2, #5000	; 0x1388
 8005174:	4293      	cmp	r3, r2
 8005176:	d901      	bls.n	800517c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e0c2      	b.n	8005302 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800517c:	4b41      	ldr	r3, [pc, #260]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 800517e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1ee      	bne.n	8005166 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005188:	7dfb      	ldrb	r3, [r7, #23]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d105      	bne.n	800519a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800518e:	4b3d      	ldr	r3, [pc, #244]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	4a3c      	ldr	r2, [pc, #240]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 8005194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005198:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 80ae 	beq.w	8005300 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051a4:	4b37      	ldr	r3, [pc, #220]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f003 030c 	and.w	r3, r3, #12
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d06d      	beq.n	800528c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d14b      	bne.n	8005250 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051b8:	4b32      	ldr	r3, [pc, #200]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a31      	ldr	r2, [pc, #196]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 80051be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c4:	f7fc fce2 	bl	8001b8c <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051cc:	f7fc fcde 	bl	8001b8c <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e091      	b.n	8005302 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051de:	4b29      	ldr	r3, [pc, #164]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1f0      	bne.n	80051cc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69da      	ldr	r2, [r3, #28]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	019b      	lsls	r3, r3, #6
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005200:	085b      	lsrs	r3, r3, #1
 8005202:	3b01      	subs	r3, #1
 8005204:	041b      	lsls	r3, r3, #16
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	061b      	lsls	r3, r3, #24
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005214:	071b      	lsls	r3, r3, #28
 8005216:	491b      	ldr	r1, [pc, #108]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 8005218:	4313      	orrs	r3, r2
 800521a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800521c:	4b19      	ldr	r3, [pc, #100]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a18      	ldr	r2, [pc, #96]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 8005222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005228:	f7fc fcb0 	bl	8001b8c <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005230:	f7fc fcac 	bl	8001b8c <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e05f      	b.n	8005302 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005242:	4b10      	ldr	r3, [pc, #64]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0f0      	beq.n	8005230 <HAL_RCC_OscConfig+0x47c>
 800524e:	e057      	b.n	8005300 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005250:	4b0c      	ldr	r3, [pc, #48]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a0b      	ldr	r2, [pc, #44]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 8005256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800525a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525c:	f7fc fc96 	bl	8001b8c <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005264:	f7fc fc92 	bl	8001b8c <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e045      	b.n	8005302 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005276:	4b03      	ldr	r3, [pc, #12]	; (8005284 <HAL_RCC_OscConfig+0x4d0>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1f0      	bne.n	8005264 <HAL_RCC_OscConfig+0x4b0>
 8005282:	e03d      	b.n	8005300 <HAL_RCC_OscConfig+0x54c>
 8005284:	40023800 	.word	0x40023800
 8005288:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800528c:	4b1f      	ldr	r3, [pc, #124]	; (800530c <HAL_RCC_OscConfig+0x558>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d030      	beq.n	80052fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d129      	bne.n	80052fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d122      	bne.n	80052fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052bc:	4013      	ands	r3, r2
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d119      	bne.n	80052fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d2:	085b      	lsrs	r3, r3, #1
 80052d4:	3b01      	subs	r3, #1
 80052d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052d8:	429a      	cmp	r2, r3
 80052da:	d10f      	bne.n	80052fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d107      	bne.n	80052fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d001      	beq.n	8005300 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e000      	b.n	8005302 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40023800 	.word	0x40023800

08005310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800531a:	2300      	movs	r3, #0
 800531c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e0d0      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005328:	4b6a      	ldr	r3, [pc, #424]	; (80054d4 <HAL_RCC_ClockConfig+0x1c4>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 030f 	and.w	r3, r3, #15
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d910      	bls.n	8005358 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005336:	4b67      	ldr	r3, [pc, #412]	; (80054d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f023 020f 	bic.w	r2, r3, #15
 800533e:	4965      	ldr	r1, [pc, #404]	; (80054d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	4313      	orrs	r3, r2
 8005344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005346:	4b63      	ldr	r3, [pc, #396]	; (80054d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d001      	beq.n	8005358 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e0b8      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d020      	beq.n	80053a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	d005      	beq.n	800537c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005370:	4b59      	ldr	r3, [pc, #356]	; (80054d8 <HAL_RCC_ClockConfig+0x1c8>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	4a58      	ldr	r2, [pc, #352]	; (80054d8 <HAL_RCC_ClockConfig+0x1c8>)
 8005376:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800537a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0308 	and.w	r3, r3, #8
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005388:	4b53      	ldr	r3, [pc, #332]	; (80054d8 <HAL_RCC_ClockConfig+0x1c8>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	4a52      	ldr	r2, [pc, #328]	; (80054d8 <HAL_RCC_ClockConfig+0x1c8>)
 800538e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005392:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005394:	4b50      	ldr	r3, [pc, #320]	; (80054d8 <HAL_RCC_ClockConfig+0x1c8>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	494d      	ldr	r1, [pc, #308]	; (80054d8 <HAL_RCC_ClockConfig+0x1c8>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d040      	beq.n	8005434 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d107      	bne.n	80053ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ba:	4b47      	ldr	r3, [pc, #284]	; (80054d8 <HAL_RCC_ClockConfig+0x1c8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d115      	bne.n	80053f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e07f      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d107      	bne.n	80053e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053d2:	4b41      	ldr	r3, [pc, #260]	; (80054d8 <HAL_RCC_ClockConfig+0x1c8>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d109      	bne.n	80053f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e073      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e2:	4b3d      	ldr	r3, [pc, #244]	; (80054d8 <HAL_RCC_ClockConfig+0x1c8>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e06b      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053f2:	4b39      	ldr	r3, [pc, #228]	; (80054d8 <HAL_RCC_ClockConfig+0x1c8>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f023 0203 	bic.w	r2, r3, #3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	4936      	ldr	r1, [pc, #216]	; (80054d8 <HAL_RCC_ClockConfig+0x1c8>)
 8005400:	4313      	orrs	r3, r2
 8005402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005404:	f7fc fbc2 	bl	8001b8c <HAL_GetTick>
 8005408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800540a:	e00a      	b.n	8005422 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800540c:	f7fc fbbe 	bl	8001b8c <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	f241 3288 	movw	r2, #5000	; 0x1388
 800541a:	4293      	cmp	r3, r2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e053      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005422:	4b2d      	ldr	r3, [pc, #180]	; (80054d8 <HAL_RCC_ClockConfig+0x1c8>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 020c 	and.w	r2, r3, #12
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	429a      	cmp	r2, r3
 8005432:	d1eb      	bne.n	800540c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005434:	4b27      	ldr	r3, [pc, #156]	; (80054d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 030f 	and.w	r3, r3, #15
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	429a      	cmp	r2, r3
 8005440:	d210      	bcs.n	8005464 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005442:	4b24      	ldr	r3, [pc, #144]	; (80054d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f023 020f 	bic.w	r2, r3, #15
 800544a:	4922      	ldr	r1, [pc, #136]	; (80054d4 <HAL_RCC_ClockConfig+0x1c4>)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	4313      	orrs	r3, r2
 8005450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005452:	4b20      	ldr	r3, [pc, #128]	; (80054d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d001      	beq.n	8005464 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e032      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b00      	cmp	r3, #0
 800546e:	d008      	beq.n	8005482 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005470:	4b19      	ldr	r3, [pc, #100]	; (80054d8 <HAL_RCC_ClockConfig+0x1c8>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	4916      	ldr	r1, [pc, #88]	; (80054d8 <HAL_RCC_ClockConfig+0x1c8>)
 800547e:	4313      	orrs	r3, r2
 8005480:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b00      	cmp	r3, #0
 800548c:	d009      	beq.n	80054a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800548e:	4b12      	ldr	r3, [pc, #72]	; (80054d8 <HAL_RCC_ClockConfig+0x1c8>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	490e      	ldr	r1, [pc, #56]	; (80054d8 <HAL_RCC_ClockConfig+0x1c8>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054a2:	f000 f821 	bl	80054e8 <HAL_RCC_GetSysClockFreq>
 80054a6:	4601      	mov	r1, r0
 80054a8:	4b0b      	ldr	r3, [pc, #44]	; (80054d8 <HAL_RCC_ClockConfig+0x1c8>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	091b      	lsrs	r3, r3, #4
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	4a0a      	ldr	r2, [pc, #40]	; (80054dc <HAL_RCC_ClockConfig+0x1cc>)
 80054b4:	5cd3      	ldrb	r3, [r2, r3]
 80054b6:	fa21 f303 	lsr.w	r3, r1, r3
 80054ba:	4a09      	ldr	r2, [pc, #36]	; (80054e0 <HAL_RCC_ClockConfig+0x1d0>)
 80054bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054be:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <HAL_RCC_ClockConfig+0x1d4>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fc f9c2 	bl	800184c <HAL_InitTick>

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	40023c00 	.word	0x40023c00
 80054d8:	40023800 	.word	0x40023800
 80054dc:	08020a0c 	.word	0x08020a0c
 80054e0:	20000000 	.word	0x20000000
 80054e4:	20000004 	.word	0x20000004

080054e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	607b      	str	r3, [r7, #4]
 80054f2:	2300      	movs	r3, #0
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	2300      	movs	r3, #0
 80054f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054fe:	4b63      	ldr	r3, [pc, #396]	; (800568c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f003 030c 	and.w	r3, r3, #12
 8005506:	2b04      	cmp	r3, #4
 8005508:	d007      	beq.n	800551a <HAL_RCC_GetSysClockFreq+0x32>
 800550a:	2b08      	cmp	r3, #8
 800550c:	d008      	beq.n	8005520 <HAL_RCC_GetSysClockFreq+0x38>
 800550e:	2b00      	cmp	r3, #0
 8005510:	f040 80b4 	bne.w	800567c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005514:	4b5e      	ldr	r3, [pc, #376]	; (8005690 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005516:	60bb      	str	r3, [r7, #8]
      break;
 8005518:	e0b3      	b.n	8005682 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800551a:	4b5e      	ldr	r3, [pc, #376]	; (8005694 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800551c:	60bb      	str	r3, [r7, #8]
      break;
 800551e:	e0b0      	b.n	8005682 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005520:	4b5a      	ldr	r3, [pc, #360]	; (800568c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005528:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800552a:	4b58      	ldr	r3, [pc, #352]	; (800568c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d04a      	beq.n	80055cc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005536:	4b55      	ldr	r3, [pc, #340]	; (800568c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	099b      	lsrs	r3, r3, #6
 800553c:	f04f 0400 	mov.w	r4, #0
 8005540:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005544:	f04f 0200 	mov.w	r2, #0
 8005548:	ea03 0501 	and.w	r5, r3, r1
 800554c:	ea04 0602 	and.w	r6, r4, r2
 8005550:	4629      	mov	r1, r5
 8005552:	4632      	mov	r2, r6
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	f04f 0400 	mov.w	r4, #0
 800555c:	0154      	lsls	r4, r2, #5
 800555e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005562:	014b      	lsls	r3, r1, #5
 8005564:	4619      	mov	r1, r3
 8005566:	4622      	mov	r2, r4
 8005568:	1b49      	subs	r1, r1, r5
 800556a:	eb62 0206 	sbc.w	r2, r2, r6
 800556e:	f04f 0300 	mov.w	r3, #0
 8005572:	f04f 0400 	mov.w	r4, #0
 8005576:	0194      	lsls	r4, r2, #6
 8005578:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800557c:	018b      	lsls	r3, r1, #6
 800557e:	1a5b      	subs	r3, r3, r1
 8005580:	eb64 0402 	sbc.w	r4, r4, r2
 8005584:	f04f 0100 	mov.w	r1, #0
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	00e2      	lsls	r2, r4, #3
 800558e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005592:	00d9      	lsls	r1, r3, #3
 8005594:	460b      	mov	r3, r1
 8005596:	4614      	mov	r4, r2
 8005598:	195b      	adds	r3, r3, r5
 800559a:	eb44 0406 	adc.w	r4, r4, r6
 800559e:	f04f 0100 	mov.w	r1, #0
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	0262      	lsls	r2, r4, #9
 80055a8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80055ac:	0259      	lsls	r1, r3, #9
 80055ae:	460b      	mov	r3, r1
 80055b0:	4614      	mov	r4, r2
 80055b2:	4618      	mov	r0, r3
 80055b4:	4621      	mov	r1, r4
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f04f 0400 	mov.w	r4, #0
 80055bc:	461a      	mov	r2, r3
 80055be:	4623      	mov	r3, r4
 80055c0:	f7fa fe96 	bl	80002f0 <__aeabi_uldivmod>
 80055c4:	4603      	mov	r3, r0
 80055c6:	460c      	mov	r4, r1
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	e049      	b.n	8005660 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055cc:	4b2f      	ldr	r3, [pc, #188]	; (800568c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	099b      	lsrs	r3, r3, #6
 80055d2:	f04f 0400 	mov.w	r4, #0
 80055d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80055da:	f04f 0200 	mov.w	r2, #0
 80055de:	ea03 0501 	and.w	r5, r3, r1
 80055e2:	ea04 0602 	and.w	r6, r4, r2
 80055e6:	4629      	mov	r1, r5
 80055e8:	4632      	mov	r2, r6
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	f04f 0400 	mov.w	r4, #0
 80055f2:	0154      	lsls	r4, r2, #5
 80055f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80055f8:	014b      	lsls	r3, r1, #5
 80055fa:	4619      	mov	r1, r3
 80055fc:	4622      	mov	r2, r4
 80055fe:	1b49      	subs	r1, r1, r5
 8005600:	eb62 0206 	sbc.w	r2, r2, r6
 8005604:	f04f 0300 	mov.w	r3, #0
 8005608:	f04f 0400 	mov.w	r4, #0
 800560c:	0194      	lsls	r4, r2, #6
 800560e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005612:	018b      	lsls	r3, r1, #6
 8005614:	1a5b      	subs	r3, r3, r1
 8005616:	eb64 0402 	sbc.w	r4, r4, r2
 800561a:	f04f 0100 	mov.w	r1, #0
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	00e2      	lsls	r2, r4, #3
 8005624:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005628:	00d9      	lsls	r1, r3, #3
 800562a:	460b      	mov	r3, r1
 800562c:	4614      	mov	r4, r2
 800562e:	195b      	adds	r3, r3, r5
 8005630:	eb44 0406 	adc.w	r4, r4, r6
 8005634:	f04f 0100 	mov.w	r1, #0
 8005638:	f04f 0200 	mov.w	r2, #0
 800563c:	02a2      	lsls	r2, r4, #10
 800563e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005642:	0299      	lsls	r1, r3, #10
 8005644:	460b      	mov	r3, r1
 8005646:	4614      	mov	r4, r2
 8005648:	4618      	mov	r0, r3
 800564a:	4621      	mov	r1, r4
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f04f 0400 	mov.w	r4, #0
 8005652:	461a      	mov	r2, r3
 8005654:	4623      	mov	r3, r4
 8005656:	f7fa fe4b 	bl	80002f0 <__aeabi_uldivmod>
 800565a:	4603      	mov	r3, r0
 800565c:	460c      	mov	r4, r1
 800565e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005660:	4b0a      	ldr	r3, [pc, #40]	; (800568c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	0c1b      	lsrs	r3, r3, #16
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	3301      	adds	r3, #1
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	fbb2 f3f3 	udiv	r3, r2, r3
 8005678:	60bb      	str	r3, [r7, #8]
      break;
 800567a:	e002      	b.n	8005682 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800567c:	4b04      	ldr	r3, [pc, #16]	; (8005690 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800567e:	60bb      	str	r3, [r7, #8]
      break;
 8005680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005682:	68bb      	ldr	r3, [r7, #8]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800568c:	40023800 	.word	0x40023800
 8005690:	00f42400 	.word	0x00f42400
 8005694:	007a1200 	.word	0x007a1200

08005698 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800569c:	4b03      	ldr	r3, [pc, #12]	; (80056ac <HAL_RCC_GetHCLKFreq+0x14>)
 800569e:	681b      	ldr	r3, [r3, #0]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	20000000 	.word	0x20000000

080056b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056b4:	f7ff fff0 	bl	8005698 <HAL_RCC_GetHCLKFreq>
 80056b8:	4601      	mov	r1, r0
 80056ba:	4b05      	ldr	r3, [pc, #20]	; (80056d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	0a9b      	lsrs	r3, r3, #10
 80056c0:	f003 0307 	and.w	r3, r3, #7
 80056c4:	4a03      	ldr	r2, [pc, #12]	; (80056d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056c6:	5cd3      	ldrb	r3, [r2, r3]
 80056c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	40023800 	.word	0x40023800
 80056d4:	08020a1c 	.word	0x08020a1c

080056d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80056dc:	f7ff ffdc 	bl	8005698 <HAL_RCC_GetHCLKFreq>
 80056e0:	4601      	mov	r1, r0
 80056e2:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	0b5b      	lsrs	r3, r3, #13
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	4a03      	ldr	r2, [pc, #12]	; (80056fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80056ee:	5cd3      	ldrb	r3, [r2, r3]
 80056f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	40023800 	.word	0x40023800
 80056fc:	08020a1c 	.word	0x08020a1c

08005700 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	220f      	movs	r2, #15
 800570e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005710:	4b12      	ldr	r3, [pc, #72]	; (800575c <HAL_RCC_GetClockConfig+0x5c>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 0203 	and.w	r2, r3, #3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800571c:	4b0f      	ldr	r3, [pc, #60]	; (800575c <HAL_RCC_GetClockConfig+0x5c>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005728:	4b0c      	ldr	r3, [pc, #48]	; (800575c <HAL_RCC_GetClockConfig+0x5c>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005734:	4b09      	ldr	r3, [pc, #36]	; (800575c <HAL_RCC_GetClockConfig+0x5c>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	08db      	lsrs	r3, r3, #3
 800573a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005742:	4b07      	ldr	r3, [pc, #28]	; (8005760 <HAL_RCC_GetClockConfig+0x60>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 020f 	and.w	r2, r3, #15
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	601a      	str	r2, [r3, #0]
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40023800 	.word	0x40023800
 8005760:	40023c00 	.word	0x40023c00

08005764 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b088      	sub	sp, #32
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800576c:	2300      	movs	r3, #0
 800576e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005770:	2300      	movs	r3, #0
 8005772:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005774:	2300      	movs	r3, #0
 8005776:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005778:	2300      	movs	r3, #0
 800577a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800577c:	2300      	movs	r3, #0
 800577e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	d012      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800578c:	4b69      	ldr	r3, [pc, #420]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	4a68      	ldr	r2, [pc, #416]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005792:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005796:	6093      	str	r3, [r2, #8]
 8005798:	4b66      	ldr	r3, [pc, #408]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a0:	4964      	ldr	r1, [pc, #400]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80057ae:	2301      	movs	r3, #1
 80057b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d017      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057be:	4b5d      	ldr	r3, [pc, #372]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057cc:	4959      	ldr	r1, [pc, #356]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057dc:	d101      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80057de:	2301      	movs	r3, #1
 80057e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80057ea:	2301      	movs	r3, #1
 80057ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d017      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80057fa:	4b4e      	ldr	r3, [pc, #312]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005800:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005808:	494a      	ldr	r1, [pc, #296]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800580a:	4313      	orrs	r3, r2
 800580c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005818:	d101      	bne.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800581a:	2301      	movs	r3, #1
 800581c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005826:	2301      	movs	r3, #1
 8005828:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005836:	2301      	movs	r3, #1
 8005838:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 808b 	beq.w	800595e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005848:	4b3a      	ldr	r3, [pc, #232]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	4a39      	ldr	r2, [pc, #228]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800584e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005852:	6413      	str	r3, [r2, #64]	; 0x40
 8005854:	4b37      	ldr	r3, [pc, #220]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585c:	60bb      	str	r3, [r7, #8]
 800585e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005860:	4b35      	ldr	r3, [pc, #212]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a34      	ldr	r2, [pc, #208]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800586a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800586c:	f7fc f98e 	bl	8001b8c <HAL_GetTick>
 8005870:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005872:	e008      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005874:	f7fc f98a 	bl	8001b8c <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b64      	cmp	r3, #100	; 0x64
 8005880:	d901      	bls.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e38d      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005886:	4b2c      	ldr	r3, [pc, #176]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588e:	2b00      	cmp	r3, #0
 8005890:	d0f0      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005892:	4b28      	ldr	r3, [pc, #160]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800589a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d035      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d02e      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058b0:	4b20      	ldr	r3, [pc, #128]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058ba:	4b1e      	ldr	r3, [pc, #120]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058be:	4a1d      	ldr	r2, [pc, #116]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058c6:	4b1b      	ldr	r3, [pc, #108]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ca:	4a1a      	ldr	r2, [pc, #104]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80058d2:	4a18      	ldr	r2, [pc, #96]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80058d8:	4b16      	ldr	r3, [pc, #88]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d114      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e4:	f7fc f952 	bl	8001b8c <HAL_GetTick>
 80058e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ea:	e00a      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058ec:	f7fc f94e 	bl	8001b8c <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d901      	bls.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e34f      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005902:	4b0c      	ldr	r3, [pc, #48]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0ee      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800591a:	d111      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800591c:	4b05      	ldr	r3, [pc, #20]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005928:	4b04      	ldr	r3, [pc, #16]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800592a:	400b      	ands	r3, r1
 800592c:	4901      	ldr	r1, [pc, #4]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800592e:	4313      	orrs	r3, r2
 8005930:	608b      	str	r3, [r1, #8]
 8005932:	e00b      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005934:	40023800 	.word	0x40023800
 8005938:	40007000 	.word	0x40007000
 800593c:	0ffffcff 	.word	0x0ffffcff
 8005940:	4bb3      	ldr	r3, [pc, #716]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	4ab2      	ldr	r2, [pc, #712]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005946:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800594a:	6093      	str	r3, [r2, #8]
 800594c:	4bb0      	ldr	r3, [pc, #704]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800594e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005958:	49ad      	ldr	r1, [pc, #692]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800595a:	4313      	orrs	r3, r2
 800595c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0310 	and.w	r3, r3, #16
 8005966:	2b00      	cmp	r3, #0
 8005968:	d010      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800596a:	4ba9      	ldr	r3, [pc, #676]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800596c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005970:	4aa7      	ldr	r2, [pc, #668]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005976:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800597a:	4ba5      	ldr	r3, [pc, #660]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800597c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005984:	49a2      	ldr	r1, [pc, #648]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005986:	4313      	orrs	r3, r2
 8005988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00a      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005998:	4b9d      	ldr	r3, [pc, #628]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800599a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059a6:	499a      	ldr	r1, [pc, #616]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059ba:	4b95      	ldr	r3, [pc, #596]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059c8:	4991      	ldr	r1, [pc, #580]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00a      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059dc:	4b8c      	ldr	r3, [pc, #560]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059ea:	4989      	ldr	r1, [pc, #548]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059fe:	4b84      	ldr	r3, [pc, #528]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0c:	4980      	ldr	r1, [pc, #512]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a20:	4b7b      	ldr	r3, [pc, #492]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a26:	f023 0203 	bic.w	r2, r3, #3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2e:	4978      	ldr	r1, [pc, #480]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a42:	4b73      	ldr	r3, [pc, #460]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a48:	f023 020c 	bic.w	r2, r3, #12
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a50:	496f      	ldr	r1, [pc, #444]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00a      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a64:	4b6a      	ldr	r3, [pc, #424]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a72:	4967      	ldr	r1, [pc, #412]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a86:	4b62      	ldr	r3, [pc, #392]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a8c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a94:	495e      	ldr	r1, [pc, #376]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00a      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005aa8:	4b59      	ldr	r3, [pc, #356]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab6:	4956      	ldr	r1, [pc, #344]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005aca:	4b51      	ldr	r3, [pc, #324]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad8:	494d      	ldr	r1, [pc, #308]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00a      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005aec:	4b48      	ldr	r3, [pc, #288]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005afa:	4945      	ldr	r1, [pc, #276]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00a      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005b0e:	4b40      	ldr	r3, [pc, #256]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b1c:	493c      	ldr	r1, [pc, #240]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00a      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b30:	4b37      	ldr	r3, [pc, #220]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b36:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b3e:	4934      	ldr	r1, [pc, #208]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d011      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005b52:	4b2f      	ldr	r3, [pc, #188]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b58:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b60:	492b      	ldr	r1, [pc, #172]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b70:	d101      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005b72:	2301      	movs	r3, #1
 8005b74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005b82:	2301      	movs	r3, #1
 8005b84:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b92:	4b1f      	ldr	r3, [pc, #124]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b98:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ba0:	491b      	ldr	r1, [pc, #108]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00b      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005bb4:	4b16      	ldr	r3, [pc, #88]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bc4:	4912      	ldr	r1, [pc, #72]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00b      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005bd8:	4b0d      	ldr	r3, [pc, #52]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bde:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005be8:	4909      	ldr	r1, [pc, #36]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00f      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bfc:	4b04      	ldr	r3, [pc, #16]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c0c:	e002      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005c0e:	bf00      	nop
 8005c10:	40023800 	.word	0x40023800
 8005c14:	4985      	ldr	r1, [pc, #532]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00b      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005c28:	4b80      	ldr	r3, [pc, #512]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c38:	497c      	ldr	r1, [pc, #496]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d005      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c4e:	f040 80d6 	bne.w	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c52:	4b76      	ldr	r3, [pc, #472]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a75      	ldr	r2, [pc, #468]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c5e:	f7fb ff95 	bl	8001b8c <HAL_GetTick>
 8005c62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c64:	e008      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c66:	f7fb ff91 	bl	8001b8c <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	2b64      	cmp	r3, #100	; 0x64
 8005c72:	d901      	bls.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e194      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c78:	4b6c      	ldr	r3, [pc, #432]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1f0      	bne.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d021      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d11d      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005c98:	4b64      	ldr	r3, [pc, #400]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c9e:	0c1b      	lsrs	r3, r3, #16
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005ca6:	4b61      	ldr	r3, [pc, #388]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cac:	0e1b      	lsrs	r3, r3, #24
 8005cae:	f003 030f 	and.w	r3, r3, #15
 8005cb2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	019a      	lsls	r2, r3, #6
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	041b      	lsls	r3, r3, #16
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	061b      	lsls	r3, r3, #24
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	071b      	lsls	r3, r3, #28
 8005ccc:	4957      	ldr	r1, [pc, #348]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d004      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ce8:	d00a      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d02e      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cfe:	d129      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d00:	4b4a      	ldr	r3, [pc, #296]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d06:	0c1b      	lsrs	r3, r3, #16
 8005d08:	f003 0303 	and.w	r3, r3, #3
 8005d0c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d0e:	4b47      	ldr	r3, [pc, #284]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d14:	0f1b      	lsrs	r3, r3, #28
 8005d16:	f003 0307 	and.w	r3, r3, #7
 8005d1a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	019a      	lsls	r2, r3, #6
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	041b      	lsls	r3, r3, #16
 8005d26:	431a      	orrs	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	061b      	lsls	r3, r3, #24
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	071b      	lsls	r3, r3, #28
 8005d34:	493d      	ldr	r1, [pc, #244]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d3c:	4b3b      	ldr	r3, [pc, #236]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d42:	f023 021f 	bic.w	r2, r3, #31
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	4937      	ldr	r1, [pc, #220]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d01d      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d60:	4b32      	ldr	r3, [pc, #200]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d66:	0e1b      	lsrs	r3, r3, #24
 8005d68:	f003 030f 	and.w	r3, r3, #15
 8005d6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d6e:	4b2f      	ldr	r3, [pc, #188]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d74:	0f1b      	lsrs	r3, r3, #28
 8005d76:	f003 0307 	and.w	r3, r3, #7
 8005d7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	019a      	lsls	r2, r3, #6
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	041b      	lsls	r3, r3, #16
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	061b      	lsls	r3, r3, #24
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	071b      	lsls	r3, r3, #28
 8005d94:	4925      	ldr	r1, [pc, #148]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d011      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	019a      	lsls	r2, r3, #6
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	041b      	lsls	r3, r3, #16
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	061b      	lsls	r3, r3, #24
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	071b      	lsls	r3, r3, #28
 8005dc4:	4919      	ldr	r1, [pc, #100]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005dcc:	4b17      	ldr	r3, [pc, #92]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a16      	ldr	r2, [pc, #88]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005dd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005dd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dd8:	f7fb fed8 	bl	8001b8c <HAL_GetTick>
 8005ddc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dde:	e008      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005de0:	f7fb fed4 	bl	8001b8c <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b64      	cmp	r3, #100	; 0x64
 8005dec:	d901      	bls.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e0d7      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005df2:	4b0e      	ldr	r3, [pc, #56]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0f0      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	f040 80cd 	bne.w	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005e06:	4b09      	ldr	r3, [pc, #36]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a08      	ldr	r2, [pc, #32]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e12:	f7fb febb 	bl	8001b8c <HAL_GetTick>
 8005e16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e18:	e00a      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e1a:	f7fb feb7 	bl	8001b8c <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	2b64      	cmp	r3, #100	; 0x64
 8005e26:	d903      	bls.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e0ba      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8005e2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e30:	4b5e      	ldr	r3, [pc, #376]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e3c:	d0ed      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d009      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d02e      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d12a      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005e66:	4b51      	ldr	r3, [pc, #324]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6c:	0c1b      	lsrs	r3, r3, #16
 8005e6e:	f003 0303 	and.w	r3, r3, #3
 8005e72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e74:	4b4d      	ldr	r3, [pc, #308]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e7a:	0f1b      	lsrs	r3, r3, #28
 8005e7c:	f003 0307 	and.w	r3, r3, #7
 8005e80:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	019a      	lsls	r2, r3, #6
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	041b      	lsls	r3, r3, #16
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	061b      	lsls	r3, r3, #24
 8005e94:	431a      	orrs	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	071b      	lsls	r3, r3, #28
 8005e9a:	4944      	ldr	r1, [pc, #272]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ea2:	4b42      	ldr	r3, [pc, #264]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ea8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	021b      	lsls	r3, r3, #8
 8005eb4:	493d      	ldr	r1, [pc, #244]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d022      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ecc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ed0:	d11d      	bne.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ed2:	4b36      	ldr	r3, [pc, #216]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed8:	0e1b      	lsrs	r3, r3, #24
 8005eda:	f003 030f 	and.w	r3, r3, #15
 8005ede:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ee0:	4b32      	ldr	r3, [pc, #200]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee6:	0f1b      	lsrs	r3, r3, #28
 8005ee8:	f003 0307 	and.w	r3, r3, #7
 8005eec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	019a      	lsls	r2, r3, #6
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	041b      	lsls	r3, r3, #16
 8005efa:	431a      	orrs	r2, r3
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	061b      	lsls	r3, r3, #24
 8005f00:	431a      	orrs	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	071b      	lsls	r3, r3, #28
 8005f06:	4929      	ldr	r1, [pc, #164]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0308 	and.w	r3, r3, #8
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d028      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f1a:	4b24      	ldr	r3, [pc, #144]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f20:	0e1b      	lsrs	r3, r3, #24
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f28:	4b20      	ldr	r3, [pc, #128]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2e:	0c1b      	lsrs	r3, r3, #16
 8005f30:	f003 0303 	and.w	r3, r3, #3
 8005f34:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	019a      	lsls	r2, r3, #6
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	041b      	lsls	r3, r3, #16
 8005f40:	431a      	orrs	r2, r3
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	061b      	lsls	r3, r3, #24
 8005f46:	431a      	orrs	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	071b      	lsls	r3, r3, #28
 8005f4e:	4917      	ldr	r1, [pc, #92]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f56:	4b15      	ldr	r3, [pc, #84]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f64:	4911      	ldr	r1, [pc, #68]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005f6c:	4b0f      	ldr	r3, [pc, #60]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a0e      	ldr	r2, [pc, #56]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f78:	f7fb fe08 	bl	8001b8c <HAL_GetTick>
 8005f7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f7e:	e008      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f80:	f7fb fe04 	bl	8001b8c <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	2b64      	cmp	r3, #100	; 0x64
 8005f8c:	d901      	bls.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e007      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f92:	4b06      	ldr	r3, [pc, #24]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f9e:	d1ef      	bne.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3720      	adds	r7, #32
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	40023800 	.word	0x40023800

08005fb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e01d      	b.n	8005ffe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d106      	bne.n	8005fdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f815 	bl	8006006 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3304      	adds	r3, #4
 8005fec:	4619      	mov	r1, r3
 8005fee:	4610      	mov	r0, r2
 8005ff0:	f000 f986 	bl	8006300 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
	...

0800601c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68da      	ldr	r2, [r3, #12]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0201 	orr.w	r2, r2, #1
 8006032:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	4b0c      	ldr	r3, [pc, #48]	; (800606c <HAL_TIM_Base_Start_IT+0x50>)
 800603c:	4013      	ands	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2b06      	cmp	r3, #6
 8006044:	d00b      	beq.n	800605e <HAL_TIM_Base_Start_IT+0x42>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800604c:	d007      	beq.n	800605e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f042 0201 	orr.w	r2, r2, #1
 800605c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	00010007 	.word	0x00010007

08006070 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b02      	cmp	r3, #2
 8006084:	d122      	bne.n	80060cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b02      	cmp	r3, #2
 8006092:	d11b      	bne.n	80060cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f06f 0202 	mvn.w	r2, #2
 800609c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	f003 0303 	and.w	r3, r3, #3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f905 	bl	80062c2 <HAL_TIM_IC_CaptureCallback>
 80060b8:	e005      	b.n	80060c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f8f7 	bl	80062ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f908 	bl	80062d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	f003 0304 	and.w	r3, r3, #4
 80060d6:	2b04      	cmp	r3, #4
 80060d8:	d122      	bne.n	8006120 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b04      	cmp	r3, #4
 80060e6:	d11b      	bne.n	8006120 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f06f 0204 	mvn.w	r2, #4
 80060f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2202      	movs	r2, #2
 80060f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f8db 	bl	80062c2 <HAL_TIM_IC_CaptureCallback>
 800610c:	e005      	b.n	800611a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f8cd 	bl	80062ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f8de 	bl	80062d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	f003 0308 	and.w	r3, r3, #8
 800612a:	2b08      	cmp	r3, #8
 800612c:	d122      	bne.n	8006174 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f003 0308 	and.w	r3, r3, #8
 8006138:	2b08      	cmp	r3, #8
 800613a:	d11b      	bne.n	8006174 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f06f 0208 	mvn.w	r2, #8
 8006144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2204      	movs	r2, #4
 800614a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	69db      	ldr	r3, [r3, #28]
 8006152:	f003 0303 	and.w	r3, r3, #3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f8b1 	bl	80062c2 <HAL_TIM_IC_CaptureCallback>
 8006160:	e005      	b.n	800616e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f8a3 	bl	80062ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f8b4 	bl	80062d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	f003 0310 	and.w	r3, r3, #16
 800617e:	2b10      	cmp	r3, #16
 8006180:	d122      	bne.n	80061c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f003 0310 	and.w	r3, r3, #16
 800618c:	2b10      	cmp	r3, #16
 800618e:	d11b      	bne.n	80061c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f06f 0210 	mvn.w	r2, #16
 8006198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2208      	movs	r2, #8
 800619e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f887 	bl	80062c2 <HAL_TIM_IC_CaptureCallback>
 80061b4:	e005      	b.n	80061c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f879 	bl	80062ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f88a 	bl	80062d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d10e      	bne.n	80061f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d107      	bne.n	80061f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f06f 0201 	mvn.w	r2, #1
 80061ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7fb f97e 	bl	80014f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061fe:	2b80      	cmp	r3, #128	; 0x80
 8006200:	d10e      	bne.n	8006220 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800620c:	2b80      	cmp	r3, #128	; 0x80
 800620e:	d107      	bne.n	8006220 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f91a 	bl	8006454 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800622e:	d10e      	bne.n	800624e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800623a:	2b80      	cmp	r3, #128	; 0x80
 800623c:	d107      	bne.n	800624e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f90d 	bl	8006468 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006258:	2b40      	cmp	r3, #64	; 0x40
 800625a:	d10e      	bne.n	800627a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006266:	2b40      	cmp	r3, #64	; 0x40
 8006268:	d107      	bne.n	800627a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f838 	bl	80062ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	f003 0320 	and.w	r3, r3, #32
 8006284:	2b20      	cmp	r3, #32
 8006286:	d10e      	bne.n	80062a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f003 0320 	and.w	r3, r3, #32
 8006292:	2b20      	cmp	r3, #32
 8006294:	d107      	bne.n	80062a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f06f 0220 	mvn.w	r2, #32
 800629e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 f8cd 	bl	8006440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062a6:	bf00      	nop
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062ca:	bf00      	nop
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062de:	bf00      	nop
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
	...

08006300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a40      	ldr	r2, [pc, #256]	; (8006414 <TIM_Base_SetConfig+0x114>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d013      	beq.n	8006340 <TIM_Base_SetConfig+0x40>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800631e:	d00f      	beq.n	8006340 <TIM_Base_SetConfig+0x40>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a3d      	ldr	r2, [pc, #244]	; (8006418 <TIM_Base_SetConfig+0x118>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d00b      	beq.n	8006340 <TIM_Base_SetConfig+0x40>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a3c      	ldr	r2, [pc, #240]	; (800641c <TIM_Base_SetConfig+0x11c>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d007      	beq.n	8006340 <TIM_Base_SetConfig+0x40>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a3b      	ldr	r2, [pc, #236]	; (8006420 <TIM_Base_SetConfig+0x120>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d003      	beq.n	8006340 <TIM_Base_SetConfig+0x40>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a3a      	ldr	r2, [pc, #232]	; (8006424 <TIM_Base_SetConfig+0x124>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d108      	bne.n	8006352 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a2f      	ldr	r2, [pc, #188]	; (8006414 <TIM_Base_SetConfig+0x114>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d02b      	beq.n	80063b2 <TIM_Base_SetConfig+0xb2>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006360:	d027      	beq.n	80063b2 <TIM_Base_SetConfig+0xb2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a2c      	ldr	r2, [pc, #176]	; (8006418 <TIM_Base_SetConfig+0x118>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d023      	beq.n	80063b2 <TIM_Base_SetConfig+0xb2>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a2b      	ldr	r2, [pc, #172]	; (800641c <TIM_Base_SetConfig+0x11c>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d01f      	beq.n	80063b2 <TIM_Base_SetConfig+0xb2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a2a      	ldr	r2, [pc, #168]	; (8006420 <TIM_Base_SetConfig+0x120>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d01b      	beq.n	80063b2 <TIM_Base_SetConfig+0xb2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a29      	ldr	r2, [pc, #164]	; (8006424 <TIM_Base_SetConfig+0x124>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d017      	beq.n	80063b2 <TIM_Base_SetConfig+0xb2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a28      	ldr	r2, [pc, #160]	; (8006428 <TIM_Base_SetConfig+0x128>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d013      	beq.n	80063b2 <TIM_Base_SetConfig+0xb2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a27      	ldr	r2, [pc, #156]	; (800642c <TIM_Base_SetConfig+0x12c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d00f      	beq.n	80063b2 <TIM_Base_SetConfig+0xb2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a26      	ldr	r2, [pc, #152]	; (8006430 <TIM_Base_SetConfig+0x130>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d00b      	beq.n	80063b2 <TIM_Base_SetConfig+0xb2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a25      	ldr	r2, [pc, #148]	; (8006434 <TIM_Base_SetConfig+0x134>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d007      	beq.n	80063b2 <TIM_Base_SetConfig+0xb2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a24      	ldr	r2, [pc, #144]	; (8006438 <TIM_Base_SetConfig+0x138>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d003      	beq.n	80063b2 <TIM_Base_SetConfig+0xb2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a23      	ldr	r2, [pc, #140]	; (800643c <TIM_Base_SetConfig+0x13c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d108      	bne.n	80063c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a0a      	ldr	r2, [pc, #40]	; (8006414 <TIM_Base_SetConfig+0x114>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d003      	beq.n	80063f8 <TIM_Base_SetConfig+0xf8>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a0c      	ldr	r2, [pc, #48]	; (8006424 <TIM_Base_SetConfig+0x124>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d103      	bne.n	8006400 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	691a      	ldr	r2, [r3, #16]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	615a      	str	r2, [r3, #20]
}
 8006406:	bf00      	nop
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	40010000 	.word	0x40010000
 8006418:	40000400 	.word	0x40000400
 800641c:	40000800 	.word	0x40000800
 8006420:	40000c00 	.word	0x40000c00
 8006424:	40010400 	.word	0x40010400
 8006428:	40014000 	.word	0x40014000
 800642c:	40014400 	.word	0x40014400
 8006430:	40014800 	.word	0x40014800
 8006434:	40001800 	.word	0x40001800
 8006438:	40001c00 	.word	0x40001c00
 800643c:	40002000 	.word	0x40002000

08006440 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e040      	b.n	8006510 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006492:	2b00      	cmp	r3, #0
 8006494:	d106      	bne.n	80064a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7fb f8fc 	bl	800169c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2224      	movs	r2, #36	; 0x24
 80064a8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 0201 	bic.w	r2, r2, #1
 80064b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fbec 	bl	8006c98 <UART_SetConfig>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d101      	bne.n	80064ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e022      	b.n	8006510 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fe8a 	bl	80071ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689a      	ldr	r2, [r3, #8]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f042 0201 	orr.w	r2, r2, #1
 8006506:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 ff11 	bl	8007330 <UART_CheckIdleState>
 800650e:	4603      	mov	r3, r0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b08a      	sub	sp, #40	; 0x28
 800651c:	af02      	add	r7, sp, #8
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	603b      	str	r3, [r7, #0]
 8006524:	4613      	mov	r3, r2
 8006526:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800652c:	2b20      	cmp	r3, #32
 800652e:	d17f      	bne.n	8006630 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <HAL_UART_Transmit+0x24>
 8006536:	88fb      	ldrh	r3, [r7, #6]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e078      	b.n	8006632 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006546:	2b01      	cmp	r3, #1
 8006548:	d101      	bne.n	800654e <HAL_UART_Transmit+0x36>
 800654a:	2302      	movs	r3, #2
 800654c:	e071      	b.n	8006632 <HAL_UART_Transmit+0x11a>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2221      	movs	r2, #33	; 0x21
 8006560:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006562:	f7fb fb13 	bl	8001b8c <HAL_GetTick>
 8006566:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	88fa      	ldrh	r2, [r7, #6]
 800656c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	88fa      	ldrh	r2, [r7, #6]
 8006574:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006580:	d108      	bne.n	8006594 <HAL_UART_Transmit+0x7c>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d104      	bne.n	8006594 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800658a:	2300      	movs	r3, #0
 800658c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	61bb      	str	r3, [r7, #24]
 8006592:	e003      	b.n	800659c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006598:	2300      	movs	r3, #0
 800659a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80065a4:	e02c      	b.n	8006600 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2200      	movs	r2, #0
 80065ae:	2180      	movs	r1, #128	; 0x80
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 ff02 	bl	80073ba <UART_WaitOnFlagUntilTimeout>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e038      	b.n	8006632 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10b      	bne.n	80065de <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	461a      	mov	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	3302      	adds	r3, #2
 80065da:	61bb      	str	r3, [r7, #24]
 80065dc:	e007      	b.n	80065ee <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	781a      	ldrb	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	3301      	adds	r3, #1
 80065ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006606:	b29b      	uxth	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1cc      	bne.n	80065a6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2200      	movs	r2, #0
 8006614:	2140      	movs	r1, #64	; 0x40
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 fecf 	bl	80073ba <UART_WaitOnFlagUntilTimeout>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e005      	b.n	8006632 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2220      	movs	r2, #32
 800662a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800662c:	2300      	movs	r3, #0
 800662e:	e000      	b.n	8006632 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8006630:	2302      	movs	r3, #2
  }
}
 8006632:	4618      	mov	r0, r3
 8006634:	3720      	adds	r7, #32
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b08a      	sub	sp, #40	; 0x28
 800663e:	af02      	add	r7, sp, #8
 8006640:	60f8      	str	r0, [r7, #12]
 8006642:	60b9      	str	r1, [r7, #8]
 8006644:	603b      	str	r3, [r7, #0]
 8006646:	4613      	mov	r3, r2
 8006648:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800664e:	2b20      	cmp	r3, #32
 8006650:	f040 80ba 	bne.w	80067c8 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <HAL_UART_Receive+0x26>
 800665a:	88fb      	ldrh	r3, [r7, #6]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d101      	bne.n	8006664 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e0b2      	b.n	80067ca <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800666a:	2b01      	cmp	r3, #1
 800666c:	d101      	bne.n	8006672 <HAL_UART_Receive+0x38>
 800666e:	2302      	movs	r3, #2
 8006670:	e0ab      	b.n	80067ca <HAL_UART_Receive+0x190>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2222      	movs	r2, #34	; 0x22
 8006684:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006686:	f7fb fa81 	bl	8001b8c <HAL_GetTick>
 800668a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	88fa      	ldrh	r2, [r7, #6]
 8006690:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	88fa      	ldrh	r2, [r7, #6]
 8006698:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066a4:	d10e      	bne.n	80066c4 <HAL_UART_Receive+0x8a>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d105      	bne.n	80066ba <HAL_UART_Receive+0x80>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80066b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066b8:	e02d      	b.n	8006716 <HAL_UART_Receive+0xdc>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	22ff      	movs	r2, #255	; 0xff
 80066be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066c2:	e028      	b.n	8006716 <HAL_UART_Receive+0xdc>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10d      	bne.n	80066e8 <HAL_UART_Receive+0xae>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d104      	bne.n	80066de <HAL_UART_Receive+0xa4>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	22ff      	movs	r2, #255	; 0xff
 80066d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066dc:	e01b      	b.n	8006716 <HAL_UART_Receive+0xdc>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	227f      	movs	r2, #127	; 0x7f
 80066e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066e6:	e016      	b.n	8006716 <HAL_UART_Receive+0xdc>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066f0:	d10d      	bne.n	800670e <HAL_UART_Receive+0xd4>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d104      	bne.n	8006704 <HAL_UART_Receive+0xca>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	227f      	movs	r2, #127	; 0x7f
 80066fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006702:	e008      	b.n	8006716 <HAL_UART_Receive+0xdc>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	223f      	movs	r2, #63	; 0x3f
 8006708:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800670c:	e003      	b.n	8006716 <HAL_UART_Receive+0xdc>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800671c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006726:	d108      	bne.n	800673a <HAL_UART_Receive+0x100>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d104      	bne.n	800673a <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8006730:	2300      	movs	r3, #0
 8006732:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	61bb      	str	r3, [r7, #24]
 8006738:	e003      	b.n	8006742 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800673e:	2300      	movs	r3, #0
 8006740:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800674a:	e032      	b.n	80067b2 <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2200      	movs	r2, #0
 8006754:	2120      	movs	r1, #32
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 fe2f 	bl	80073ba <UART_WaitOnFlagUntilTimeout>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e031      	b.n	80067ca <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10c      	bne.n	8006786 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	b29a      	uxth	r2, r3
 8006774:	8a7b      	ldrh	r3, [r7, #18]
 8006776:	4013      	ands	r3, r2
 8006778:	b29a      	uxth	r2, r3
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	3302      	adds	r3, #2
 8006782:	61bb      	str	r3, [r7, #24]
 8006784:	e00c      	b.n	80067a0 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	b2da      	uxtb	r2, r3
 800678e:	8a7b      	ldrh	r3, [r7, #18]
 8006790:	b2db      	uxtb	r3, r3
 8006792:	4013      	ands	r3, r2
 8006794:	b2da      	uxtb	r2, r3
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	3301      	adds	r3, #1
 800679e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1c6      	bne.n	800674c <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2220      	movs	r2, #32
 80067c2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80067c4:	2300      	movs	r3, #0
 80067c6:	e000      	b.n	80067ca <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 80067c8:	2302      	movs	r3, #2
  }
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3720      	adds	r7, #32
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
	...

080067d4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	4613      	mov	r3, r2
 80067e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067e6:	2b20      	cmp	r3, #32
 80067e8:	d144      	bne.n	8006874 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <HAL_UART_Transmit_IT+0x22>
 80067f0:	88fb      	ldrh	r3, [r7, #6]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e03d      	b.n	8006876 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006800:	2b01      	cmp	r3, #1
 8006802:	d101      	bne.n	8006808 <HAL_UART_Transmit_IT+0x34>
 8006804:	2302      	movs	r3, #2
 8006806:	e036      	b.n	8006876 <HAL_UART_Transmit_IT+0xa2>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	88fa      	ldrh	r2, [r7, #6]
 800681a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	88fa      	ldrh	r2, [r7, #6]
 8006822:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2221      	movs	r2, #33	; 0x21
 8006836:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006840:	d107      	bne.n	8006852 <HAL_UART_Transmit_IT+0x7e>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d103      	bne.n	8006852 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4a0d      	ldr	r2, [pc, #52]	; (8006884 <HAL_UART_Transmit_IT+0xb0>)
 800684e:	665a      	str	r2, [r3, #100]	; 0x64
 8006850:	e002      	b.n	8006858 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4a0c      	ldr	r2, [pc, #48]	; (8006888 <HAL_UART_Transmit_IT+0xb4>)
 8006856:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800686e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006870:	2300      	movs	r3, #0
 8006872:	e000      	b.n	8006876 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8006874:	2302      	movs	r3, #2
  }
}
 8006876:	4618      	mov	r0, r3
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	0800758f 	.word	0x0800758f
 8006888:	0800751d 	.word	0x0800751d

0800688c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	4613      	mov	r3, r2
 8006898:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800689e:	2b20      	cmp	r3, #32
 80068a0:	f040 808a 	bne.w	80069b8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d002      	beq.n	80068b0 <HAL_UART_Receive_IT+0x24>
 80068aa:	88fb      	ldrh	r3, [r7, #6]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e082      	b.n	80069ba <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d101      	bne.n	80068c2 <HAL_UART_Receive_IT+0x36>
 80068be:	2302      	movs	r3, #2
 80068c0:	e07b      	b.n	80069ba <HAL_UART_Receive_IT+0x12e>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	88fa      	ldrh	r2, [r7, #6]
 80068d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	88fa      	ldrh	r2, [r7, #6]
 80068dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ee:	d10e      	bne.n	800690e <HAL_UART_Receive_IT+0x82>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d105      	bne.n	8006904 <HAL_UART_Receive_IT+0x78>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80068fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006902:	e02d      	b.n	8006960 <HAL_UART_Receive_IT+0xd4>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	22ff      	movs	r2, #255	; 0xff
 8006908:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800690c:	e028      	b.n	8006960 <HAL_UART_Receive_IT+0xd4>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10d      	bne.n	8006932 <HAL_UART_Receive_IT+0xa6>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d104      	bne.n	8006928 <HAL_UART_Receive_IT+0x9c>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	22ff      	movs	r2, #255	; 0xff
 8006922:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006926:	e01b      	b.n	8006960 <HAL_UART_Receive_IT+0xd4>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	227f      	movs	r2, #127	; 0x7f
 800692c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006930:	e016      	b.n	8006960 <HAL_UART_Receive_IT+0xd4>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800693a:	d10d      	bne.n	8006958 <HAL_UART_Receive_IT+0xcc>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d104      	bne.n	800694e <HAL_UART_Receive_IT+0xc2>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	227f      	movs	r2, #127	; 0x7f
 8006948:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800694c:	e008      	b.n	8006960 <HAL_UART_Receive_IT+0xd4>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	223f      	movs	r2, #63	; 0x3f
 8006952:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006956:	e003      	b.n	8006960 <HAL_UART_Receive_IT+0xd4>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2222      	movs	r2, #34	; 0x22
 800696a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689a      	ldr	r2, [r3, #8]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f042 0201 	orr.w	r2, r2, #1
 800697a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006984:	d107      	bne.n	8006996 <HAL_UART_Receive_IT+0x10a>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d103      	bne.n	8006996 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4a0d      	ldr	r2, [pc, #52]	; (80069c8 <HAL_UART_Receive_IT+0x13c>)
 8006992:	661a      	str	r2, [r3, #96]	; 0x60
 8006994:	e002      	b.n	800699c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4a0c      	ldr	r2, [pc, #48]	; (80069cc <HAL_UART_Receive_IT+0x140>)
 800699a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80069b2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	e000      	b.n	80069ba <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80069b8:	2302      	movs	r3, #2
  }
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	080076e3 	.word	0x080076e3
 80069cc:	0800763d 	.word	0x0800763d

080069d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b088      	sub	sp, #32
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80069f0:	69fa      	ldr	r2, [r7, #28]
 80069f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80069f6:	4013      	ands	r3, r2
 80069f8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d113      	bne.n	8006a28 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	f003 0320 	and.w	r3, r3, #32
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00e      	beq.n	8006a28 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	f003 0320 	and.w	r3, r3, #32
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d009      	beq.n	8006a28 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 8114 	beq.w	8006c46 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	4798      	blx	r3
      }
      return;
 8006a26:	e10e      	b.n	8006c46 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f000 80d6 	beq.w	8006bdc <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d105      	bne.n	8006a46 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 80cb 	beq.w	8006bdc <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00e      	beq.n	8006a6e <HAL_UART_IRQHandler+0x9e>
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d009      	beq.n	8006a6e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a66:	f043 0201 	orr.w	r2, r3, #1
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00e      	beq.n	8006a96 <HAL_UART_IRQHandler+0xc6>
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d009      	beq.n	8006a96 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2202      	movs	r2, #2
 8006a88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a8e:	f043 0204 	orr.w	r2, r3, #4
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	f003 0304 	and.w	r3, r3, #4
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00e      	beq.n	8006abe <HAL_UART_IRQHandler+0xee>
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d009      	beq.n	8006abe <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2204      	movs	r2, #4
 8006ab0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ab6:	f043 0202 	orr.w	r2, r3, #2
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	f003 0308 	and.w	r3, r3, #8
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d013      	beq.n	8006af0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	f003 0320 	and.w	r3, r3, #32
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d104      	bne.n	8006adc <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d009      	beq.n	8006af0 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2208      	movs	r2, #8
 8006ae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ae8:	f043 0208 	orr.w	r2, r3, #8
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00f      	beq.n	8006b1a <HAL_UART_IRQHandler+0x14a>
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00a      	beq.n	8006b1a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b12:	f043 0220 	orr.w	r2, r3, #32
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 8093 	beq.w	8006c4a <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	f003 0320 	and.w	r3, r3, #32
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00c      	beq.n	8006b48 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	f003 0320 	and.w	r3, r3, #32
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d007      	beq.n	8006b48 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d003      	beq.n	8006b48 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b4c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b58:	2b40      	cmp	r3, #64	; 0x40
 8006b5a:	d004      	beq.n	8006b66 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d031      	beq.n	8006bca <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fca2 	bl	80074b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b76:	2b40      	cmp	r3, #64	; 0x40
 8006b78:	d123      	bne.n	8006bc2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	689a      	ldr	r2, [r3, #8]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b88:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d013      	beq.n	8006bba <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b96:	4a30      	ldr	r2, [pc, #192]	; (8006c58 <HAL_UART_IRQHandler+0x288>)
 8006b98:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fb fb8c 	bl	80022bc <HAL_DMA_Abort_IT>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d016      	beq.n	8006bd8 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb8:	e00e      	b.n	8006bd8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f858 	bl	8006c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bc0:	e00a      	b.n	8006bd8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f854 	bl	8006c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bc8:	e006      	b.n	8006bd8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f850 	bl	8006c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006bd6:	e038      	b.n	8006c4a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd8:	bf00      	nop
    return;
 8006bda:	e036      	b.n	8006c4a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00d      	beq.n	8006c02 <HAL_UART_IRQHandler+0x232>
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d008      	beq.n	8006c02 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006bf8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f842 	bl	8006c84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c00:	e026      	b.n	8006c50 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00d      	beq.n	8006c28 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d008      	beq.n	8006c28 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d017      	beq.n	8006c4e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	4798      	blx	r3
    }
    return;
 8006c26:	e012      	b.n	8006c4e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00e      	beq.n	8006c50 <HAL_UART_IRQHandler+0x280>
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d009      	beq.n	8006c50 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fce4 	bl	800760a <UART_EndTransmit_IT>
    return;
 8006c42:	bf00      	nop
 8006c44:	e004      	b.n	8006c50 <HAL_UART_IRQHandler+0x280>
      return;
 8006c46:	bf00      	nop
 8006c48:	e002      	b.n	8006c50 <HAL_UART_IRQHandler+0x280>
    return;
 8006c4a:	bf00      	nop
 8006c4c:	e000      	b.n	8006c50 <HAL_UART_IRQHandler+0x280>
    return;
 8006c4e:	bf00      	nop
  }

}
 8006c50:	3720      	adds	r7, #32
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	080074f1 	.word	0x080074f1

08006c5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b088      	sub	sp, #32
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	689a      	ldr	r2, [r3, #8]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	431a      	orrs	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	69db      	ldr	r3, [r3, #28]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	4bb1      	ldr	r3, [pc, #708]	; (8006f8c <UART_SetConfig+0x2f4>)
 8006cc8:	4013      	ands	r3, r2
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	6812      	ldr	r2, [r2, #0]
 8006cce:	6939      	ldr	r1, [r7, #16]
 8006cd0:	430b      	orrs	r3, r1
 8006cd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a9f      	ldr	r2, [pc, #636]	; (8006f90 <UART_SetConfig+0x2f8>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d121      	bne.n	8006d5c <UART_SetConfig+0xc4>
 8006d18:	4b9e      	ldr	r3, [pc, #632]	; (8006f94 <UART_SetConfig+0x2fc>)
 8006d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d1e:	f003 0303 	and.w	r3, r3, #3
 8006d22:	2b03      	cmp	r3, #3
 8006d24:	d816      	bhi.n	8006d54 <UART_SetConfig+0xbc>
 8006d26:	a201      	add	r2, pc, #4	; (adr r2, 8006d2c <UART_SetConfig+0x94>)
 8006d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2c:	08006d3d 	.word	0x08006d3d
 8006d30:	08006d49 	.word	0x08006d49
 8006d34:	08006d43 	.word	0x08006d43
 8006d38:	08006d4f 	.word	0x08006d4f
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	77fb      	strb	r3, [r7, #31]
 8006d40:	e151      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006d42:	2302      	movs	r3, #2
 8006d44:	77fb      	strb	r3, [r7, #31]
 8006d46:	e14e      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006d48:	2304      	movs	r3, #4
 8006d4a:	77fb      	strb	r3, [r7, #31]
 8006d4c:	e14b      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006d4e:	2308      	movs	r3, #8
 8006d50:	77fb      	strb	r3, [r7, #31]
 8006d52:	e148      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006d54:	2310      	movs	r3, #16
 8006d56:	77fb      	strb	r3, [r7, #31]
 8006d58:	bf00      	nop
 8006d5a:	e144      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a8d      	ldr	r2, [pc, #564]	; (8006f98 <UART_SetConfig+0x300>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d134      	bne.n	8006dd0 <UART_SetConfig+0x138>
 8006d66:	4b8b      	ldr	r3, [pc, #556]	; (8006f94 <UART_SetConfig+0x2fc>)
 8006d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d6c:	f003 030c 	and.w	r3, r3, #12
 8006d70:	2b0c      	cmp	r3, #12
 8006d72:	d829      	bhi.n	8006dc8 <UART_SetConfig+0x130>
 8006d74:	a201      	add	r2, pc, #4	; (adr r2, 8006d7c <UART_SetConfig+0xe4>)
 8006d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7a:	bf00      	nop
 8006d7c:	08006db1 	.word	0x08006db1
 8006d80:	08006dc9 	.word	0x08006dc9
 8006d84:	08006dc9 	.word	0x08006dc9
 8006d88:	08006dc9 	.word	0x08006dc9
 8006d8c:	08006dbd 	.word	0x08006dbd
 8006d90:	08006dc9 	.word	0x08006dc9
 8006d94:	08006dc9 	.word	0x08006dc9
 8006d98:	08006dc9 	.word	0x08006dc9
 8006d9c:	08006db7 	.word	0x08006db7
 8006da0:	08006dc9 	.word	0x08006dc9
 8006da4:	08006dc9 	.word	0x08006dc9
 8006da8:	08006dc9 	.word	0x08006dc9
 8006dac:	08006dc3 	.word	0x08006dc3
 8006db0:	2300      	movs	r3, #0
 8006db2:	77fb      	strb	r3, [r7, #31]
 8006db4:	e117      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006db6:	2302      	movs	r3, #2
 8006db8:	77fb      	strb	r3, [r7, #31]
 8006dba:	e114      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006dbc:	2304      	movs	r3, #4
 8006dbe:	77fb      	strb	r3, [r7, #31]
 8006dc0:	e111      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	77fb      	strb	r3, [r7, #31]
 8006dc6:	e10e      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006dc8:	2310      	movs	r3, #16
 8006dca:	77fb      	strb	r3, [r7, #31]
 8006dcc:	bf00      	nop
 8006dce:	e10a      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a71      	ldr	r2, [pc, #452]	; (8006f9c <UART_SetConfig+0x304>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d120      	bne.n	8006e1c <UART_SetConfig+0x184>
 8006dda:	4b6e      	ldr	r3, [pc, #440]	; (8006f94 <UART_SetConfig+0x2fc>)
 8006ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006de4:	2b10      	cmp	r3, #16
 8006de6:	d00f      	beq.n	8006e08 <UART_SetConfig+0x170>
 8006de8:	2b10      	cmp	r3, #16
 8006dea:	d802      	bhi.n	8006df2 <UART_SetConfig+0x15a>
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d005      	beq.n	8006dfc <UART_SetConfig+0x164>
 8006df0:	e010      	b.n	8006e14 <UART_SetConfig+0x17c>
 8006df2:	2b20      	cmp	r3, #32
 8006df4:	d005      	beq.n	8006e02 <UART_SetConfig+0x16a>
 8006df6:	2b30      	cmp	r3, #48	; 0x30
 8006df8:	d009      	beq.n	8006e0e <UART_SetConfig+0x176>
 8006dfa:	e00b      	b.n	8006e14 <UART_SetConfig+0x17c>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	77fb      	strb	r3, [r7, #31]
 8006e00:	e0f1      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006e02:	2302      	movs	r3, #2
 8006e04:	77fb      	strb	r3, [r7, #31]
 8006e06:	e0ee      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006e08:	2304      	movs	r3, #4
 8006e0a:	77fb      	strb	r3, [r7, #31]
 8006e0c:	e0eb      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006e0e:	2308      	movs	r3, #8
 8006e10:	77fb      	strb	r3, [r7, #31]
 8006e12:	e0e8      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006e14:	2310      	movs	r3, #16
 8006e16:	77fb      	strb	r3, [r7, #31]
 8006e18:	bf00      	nop
 8006e1a:	e0e4      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a5f      	ldr	r2, [pc, #380]	; (8006fa0 <UART_SetConfig+0x308>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d120      	bne.n	8006e68 <UART_SetConfig+0x1d0>
 8006e26:	4b5b      	ldr	r3, [pc, #364]	; (8006f94 <UART_SetConfig+0x2fc>)
 8006e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e30:	2b40      	cmp	r3, #64	; 0x40
 8006e32:	d00f      	beq.n	8006e54 <UART_SetConfig+0x1bc>
 8006e34:	2b40      	cmp	r3, #64	; 0x40
 8006e36:	d802      	bhi.n	8006e3e <UART_SetConfig+0x1a6>
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d005      	beq.n	8006e48 <UART_SetConfig+0x1b0>
 8006e3c:	e010      	b.n	8006e60 <UART_SetConfig+0x1c8>
 8006e3e:	2b80      	cmp	r3, #128	; 0x80
 8006e40:	d005      	beq.n	8006e4e <UART_SetConfig+0x1b6>
 8006e42:	2bc0      	cmp	r3, #192	; 0xc0
 8006e44:	d009      	beq.n	8006e5a <UART_SetConfig+0x1c2>
 8006e46:	e00b      	b.n	8006e60 <UART_SetConfig+0x1c8>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	77fb      	strb	r3, [r7, #31]
 8006e4c:	e0cb      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006e4e:	2302      	movs	r3, #2
 8006e50:	77fb      	strb	r3, [r7, #31]
 8006e52:	e0c8      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006e54:	2304      	movs	r3, #4
 8006e56:	77fb      	strb	r3, [r7, #31]
 8006e58:	e0c5      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006e5a:	2308      	movs	r3, #8
 8006e5c:	77fb      	strb	r3, [r7, #31]
 8006e5e:	e0c2      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006e60:	2310      	movs	r3, #16
 8006e62:	77fb      	strb	r3, [r7, #31]
 8006e64:	bf00      	nop
 8006e66:	e0be      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a4d      	ldr	r2, [pc, #308]	; (8006fa4 <UART_SetConfig+0x30c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d124      	bne.n	8006ebc <UART_SetConfig+0x224>
 8006e72:	4b48      	ldr	r3, [pc, #288]	; (8006f94 <UART_SetConfig+0x2fc>)
 8006e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e80:	d012      	beq.n	8006ea8 <UART_SetConfig+0x210>
 8006e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e86:	d802      	bhi.n	8006e8e <UART_SetConfig+0x1f6>
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d007      	beq.n	8006e9c <UART_SetConfig+0x204>
 8006e8c:	e012      	b.n	8006eb4 <UART_SetConfig+0x21c>
 8006e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e92:	d006      	beq.n	8006ea2 <UART_SetConfig+0x20a>
 8006e94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e98:	d009      	beq.n	8006eae <UART_SetConfig+0x216>
 8006e9a:	e00b      	b.n	8006eb4 <UART_SetConfig+0x21c>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	77fb      	strb	r3, [r7, #31]
 8006ea0:	e0a1      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	77fb      	strb	r3, [r7, #31]
 8006ea6:	e09e      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006ea8:	2304      	movs	r3, #4
 8006eaa:	77fb      	strb	r3, [r7, #31]
 8006eac:	e09b      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006eae:	2308      	movs	r3, #8
 8006eb0:	77fb      	strb	r3, [r7, #31]
 8006eb2:	e098      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006eb4:	2310      	movs	r3, #16
 8006eb6:	77fb      	strb	r3, [r7, #31]
 8006eb8:	bf00      	nop
 8006eba:	e094      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a39      	ldr	r2, [pc, #228]	; (8006fa8 <UART_SetConfig+0x310>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d124      	bne.n	8006f10 <UART_SetConfig+0x278>
 8006ec6:	4b33      	ldr	r3, [pc, #204]	; (8006f94 <UART_SetConfig+0x2fc>)
 8006ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ecc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ed4:	d012      	beq.n	8006efc <UART_SetConfig+0x264>
 8006ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eda:	d802      	bhi.n	8006ee2 <UART_SetConfig+0x24a>
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d007      	beq.n	8006ef0 <UART_SetConfig+0x258>
 8006ee0:	e012      	b.n	8006f08 <UART_SetConfig+0x270>
 8006ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ee6:	d006      	beq.n	8006ef6 <UART_SetConfig+0x25e>
 8006ee8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006eec:	d009      	beq.n	8006f02 <UART_SetConfig+0x26a>
 8006eee:	e00b      	b.n	8006f08 <UART_SetConfig+0x270>
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	77fb      	strb	r3, [r7, #31]
 8006ef4:	e077      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	77fb      	strb	r3, [r7, #31]
 8006efa:	e074      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006efc:	2304      	movs	r3, #4
 8006efe:	77fb      	strb	r3, [r7, #31]
 8006f00:	e071      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006f02:	2308      	movs	r3, #8
 8006f04:	77fb      	strb	r3, [r7, #31]
 8006f06:	e06e      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006f08:	2310      	movs	r3, #16
 8006f0a:	77fb      	strb	r3, [r7, #31]
 8006f0c:	bf00      	nop
 8006f0e:	e06a      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a25      	ldr	r2, [pc, #148]	; (8006fac <UART_SetConfig+0x314>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d124      	bne.n	8006f64 <UART_SetConfig+0x2cc>
 8006f1a:	4b1e      	ldr	r3, [pc, #120]	; (8006f94 <UART_SetConfig+0x2fc>)
 8006f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f20:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f28:	d012      	beq.n	8006f50 <UART_SetConfig+0x2b8>
 8006f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f2e:	d802      	bhi.n	8006f36 <UART_SetConfig+0x29e>
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d007      	beq.n	8006f44 <UART_SetConfig+0x2ac>
 8006f34:	e012      	b.n	8006f5c <UART_SetConfig+0x2c4>
 8006f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f3a:	d006      	beq.n	8006f4a <UART_SetConfig+0x2b2>
 8006f3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f40:	d009      	beq.n	8006f56 <UART_SetConfig+0x2be>
 8006f42:	e00b      	b.n	8006f5c <UART_SetConfig+0x2c4>
 8006f44:	2300      	movs	r3, #0
 8006f46:	77fb      	strb	r3, [r7, #31]
 8006f48:	e04d      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006f4a:	2302      	movs	r3, #2
 8006f4c:	77fb      	strb	r3, [r7, #31]
 8006f4e:	e04a      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006f50:	2304      	movs	r3, #4
 8006f52:	77fb      	strb	r3, [r7, #31]
 8006f54:	e047      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006f56:	2308      	movs	r3, #8
 8006f58:	77fb      	strb	r3, [r7, #31]
 8006f5a:	e044      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006f5c:	2310      	movs	r3, #16
 8006f5e:	77fb      	strb	r3, [r7, #31]
 8006f60:	bf00      	nop
 8006f62:	e040      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a11      	ldr	r2, [pc, #68]	; (8006fb0 <UART_SetConfig+0x318>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d139      	bne.n	8006fe2 <UART_SetConfig+0x34a>
 8006f6e:	4b09      	ldr	r3, [pc, #36]	; (8006f94 <UART_SetConfig+0x2fc>)
 8006f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006f78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f7c:	d027      	beq.n	8006fce <UART_SetConfig+0x336>
 8006f7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f82:	d817      	bhi.n	8006fb4 <UART_SetConfig+0x31c>
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d01c      	beq.n	8006fc2 <UART_SetConfig+0x32a>
 8006f88:	e027      	b.n	8006fda <UART_SetConfig+0x342>
 8006f8a:	bf00      	nop
 8006f8c:	efff69f3 	.word	0xefff69f3
 8006f90:	40011000 	.word	0x40011000
 8006f94:	40023800 	.word	0x40023800
 8006f98:	40004400 	.word	0x40004400
 8006f9c:	40004800 	.word	0x40004800
 8006fa0:	40004c00 	.word	0x40004c00
 8006fa4:	40005000 	.word	0x40005000
 8006fa8:	40011400 	.word	0x40011400
 8006fac:	40007800 	.word	0x40007800
 8006fb0:	40007c00 	.word	0x40007c00
 8006fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fb8:	d006      	beq.n	8006fc8 <UART_SetConfig+0x330>
 8006fba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006fbe:	d009      	beq.n	8006fd4 <UART_SetConfig+0x33c>
 8006fc0:	e00b      	b.n	8006fda <UART_SetConfig+0x342>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	77fb      	strb	r3, [r7, #31]
 8006fc6:	e00e      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006fc8:	2302      	movs	r3, #2
 8006fca:	77fb      	strb	r3, [r7, #31]
 8006fcc:	e00b      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006fce:	2304      	movs	r3, #4
 8006fd0:	77fb      	strb	r3, [r7, #31]
 8006fd2:	e008      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006fd4:	2308      	movs	r3, #8
 8006fd6:	77fb      	strb	r3, [r7, #31]
 8006fd8:	e005      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006fda:	2310      	movs	r3, #16
 8006fdc:	77fb      	strb	r3, [r7, #31]
 8006fde:	bf00      	nop
 8006fe0:	e001      	b.n	8006fe6 <UART_SetConfig+0x34e>
 8006fe2:	2310      	movs	r3, #16
 8006fe4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	69db      	ldr	r3, [r3, #28]
 8006fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fee:	d17f      	bne.n	80070f0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006ff0:	7ffb      	ldrb	r3, [r7, #31]
 8006ff2:	2b08      	cmp	r3, #8
 8006ff4:	d85c      	bhi.n	80070b0 <UART_SetConfig+0x418>
 8006ff6:	a201      	add	r2, pc, #4	; (adr r2, 8006ffc <UART_SetConfig+0x364>)
 8006ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffc:	08007021 	.word	0x08007021
 8007000:	08007041 	.word	0x08007041
 8007004:	08007061 	.word	0x08007061
 8007008:	080070b1 	.word	0x080070b1
 800700c:	08007079 	.word	0x08007079
 8007010:	080070b1 	.word	0x080070b1
 8007014:	080070b1 	.word	0x080070b1
 8007018:	080070b1 	.word	0x080070b1
 800701c:	08007099 	.word	0x08007099
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007020:	f7fe fb46 	bl	80056b0 <HAL_RCC_GetPCLK1Freq>
 8007024:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	005a      	lsls	r2, r3, #1
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	085b      	lsrs	r3, r3, #1
 8007030:	441a      	add	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	fbb2 f3f3 	udiv	r3, r2, r3
 800703a:	b29b      	uxth	r3, r3
 800703c:	61bb      	str	r3, [r7, #24]
        break;
 800703e:	e03a      	b.n	80070b6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007040:	f7fe fb4a 	bl	80056d8 <HAL_RCC_GetPCLK2Freq>
 8007044:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	005a      	lsls	r2, r3, #1
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	085b      	lsrs	r3, r3, #1
 8007050:	441a      	add	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	fbb2 f3f3 	udiv	r3, r2, r3
 800705a:	b29b      	uxth	r3, r3
 800705c:	61bb      	str	r3, [r7, #24]
        break;
 800705e:	e02a      	b.n	80070b6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	085a      	lsrs	r2, r3, #1
 8007066:	4b5f      	ldr	r3, [pc, #380]	; (80071e4 <UART_SetConfig+0x54c>)
 8007068:	4413      	add	r3, r2
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	6852      	ldr	r2, [r2, #4]
 800706e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007072:	b29b      	uxth	r3, r3
 8007074:	61bb      	str	r3, [r7, #24]
        break;
 8007076:	e01e      	b.n	80070b6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007078:	f7fe fa36 	bl	80054e8 <HAL_RCC_GetSysClockFreq>
 800707c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	005a      	lsls	r2, r3, #1
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	085b      	lsrs	r3, r3, #1
 8007088:	441a      	add	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007092:	b29b      	uxth	r3, r3
 8007094:	61bb      	str	r3, [r7, #24]
        break;
 8007096:	e00e      	b.n	80070b6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	085b      	lsrs	r3, r3, #1
 800709e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	61bb      	str	r3, [r7, #24]
        break;
 80070ae:	e002      	b.n	80070b6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	75fb      	strb	r3, [r7, #23]
        break;
 80070b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	2b0f      	cmp	r3, #15
 80070ba:	d916      	bls.n	80070ea <UART_SetConfig+0x452>
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070c2:	d212      	bcs.n	80070ea <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	f023 030f 	bic.w	r3, r3, #15
 80070cc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	085b      	lsrs	r3, r3, #1
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	f003 0307 	and.w	r3, r3, #7
 80070d8:	b29a      	uxth	r2, r3
 80070da:	897b      	ldrh	r3, [r7, #10]
 80070dc:	4313      	orrs	r3, r2
 80070de:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	897a      	ldrh	r2, [r7, #10]
 80070e6:	60da      	str	r2, [r3, #12]
 80070e8:	e070      	b.n	80071cc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	75fb      	strb	r3, [r7, #23]
 80070ee:	e06d      	b.n	80071cc <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80070f0:	7ffb      	ldrb	r3, [r7, #31]
 80070f2:	2b08      	cmp	r3, #8
 80070f4:	d859      	bhi.n	80071aa <UART_SetConfig+0x512>
 80070f6:	a201      	add	r2, pc, #4	; (adr r2, 80070fc <UART_SetConfig+0x464>)
 80070f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fc:	08007121 	.word	0x08007121
 8007100:	0800713f 	.word	0x0800713f
 8007104:	0800715d 	.word	0x0800715d
 8007108:	080071ab 	.word	0x080071ab
 800710c:	08007175 	.word	0x08007175
 8007110:	080071ab 	.word	0x080071ab
 8007114:	080071ab 	.word	0x080071ab
 8007118:	080071ab 	.word	0x080071ab
 800711c:	08007193 	.word	0x08007193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007120:	f7fe fac6 	bl	80056b0 <HAL_RCC_GetPCLK1Freq>
 8007124:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	085a      	lsrs	r2, r3, #1
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	441a      	add	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	fbb2 f3f3 	udiv	r3, r2, r3
 8007138:	b29b      	uxth	r3, r3
 800713a:	61bb      	str	r3, [r7, #24]
        break;
 800713c:	e038      	b.n	80071b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800713e:	f7fe facb 	bl	80056d8 <HAL_RCC_GetPCLK2Freq>
 8007142:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	085a      	lsrs	r2, r3, #1
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	441a      	add	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	fbb2 f3f3 	udiv	r3, r2, r3
 8007156:	b29b      	uxth	r3, r3
 8007158:	61bb      	str	r3, [r7, #24]
        break;
 800715a:	e029      	b.n	80071b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	085a      	lsrs	r2, r3, #1
 8007162:	4b21      	ldr	r3, [pc, #132]	; (80071e8 <UART_SetConfig+0x550>)
 8007164:	4413      	add	r3, r2
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	6852      	ldr	r2, [r2, #4]
 800716a:	fbb3 f3f2 	udiv	r3, r3, r2
 800716e:	b29b      	uxth	r3, r3
 8007170:	61bb      	str	r3, [r7, #24]
        break;
 8007172:	e01d      	b.n	80071b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007174:	f7fe f9b8 	bl	80054e8 <HAL_RCC_GetSysClockFreq>
 8007178:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	085a      	lsrs	r2, r3, #1
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	441a      	add	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	fbb2 f3f3 	udiv	r3, r2, r3
 800718c:	b29b      	uxth	r3, r3
 800718e:	61bb      	str	r3, [r7, #24]
        break;
 8007190:	e00e      	b.n	80071b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	085b      	lsrs	r3, r3, #1
 8007198:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	61bb      	str	r3, [r7, #24]
        break;
 80071a8:	e002      	b.n	80071b0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	75fb      	strb	r3, [r7, #23]
        break;
 80071ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	2b0f      	cmp	r3, #15
 80071b4:	d908      	bls.n	80071c8 <UART_SetConfig+0x530>
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071bc:	d204      	bcs.n	80071c8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	60da      	str	r2, [r3, #12]
 80071c6:	e001      	b.n	80071cc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80071d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3720      	adds	r7, #32
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	01e84800 	.word	0x01e84800
 80071e8:	00f42400 	.word	0x00f42400

080071ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00a      	beq.n	8007216 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00a      	beq.n	8007238 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	430a      	orrs	r2, r1
 8007236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723c:	f003 0304 	and.w	r3, r3, #4
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00a      	beq.n	800725a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	430a      	orrs	r2, r1
 8007258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	f003 0308 	and.w	r3, r3, #8
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007280:	f003 0310 	and.w	r3, r3, #16
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00a      	beq.n	800729e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	430a      	orrs	r2, r1
 800729c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a2:	f003 0320 	and.w	r3, r3, #32
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00a      	beq.n	80072c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	430a      	orrs	r2, r1
 80072be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d01a      	beq.n	8007302 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	430a      	orrs	r2, r1
 80072e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072ea:	d10a      	bne.n	8007302 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00a      	beq.n	8007324 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	605a      	str	r2, [r3, #4]
  }
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af02      	add	r7, sp, #8
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800733e:	f7fa fc25 	bl	8001b8c <HAL_GetTick>
 8007342:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0308 	and.w	r3, r3, #8
 800734e:	2b08      	cmp	r3, #8
 8007350:	d10e      	bne.n	8007370 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007352:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f82a 	bl	80073ba <UART_WaitOnFlagUntilTimeout>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e020      	b.n	80073b2 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0304 	and.w	r3, r3, #4
 800737a:	2b04      	cmp	r3, #4
 800737c:	d10e      	bne.n	800739c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800737e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f814 	bl	80073ba <UART_WaitOnFlagUntilTimeout>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e00a      	b.n	80073b2 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2220      	movs	r2, #32
 80073a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2220      	movs	r2, #32
 80073a6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b084      	sub	sp, #16
 80073be:	af00      	add	r7, sp, #0
 80073c0:	60f8      	str	r0, [r7, #12]
 80073c2:	60b9      	str	r1, [r7, #8]
 80073c4:	603b      	str	r3, [r7, #0]
 80073c6:	4613      	mov	r3, r2
 80073c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ca:	e05d      	b.n	8007488 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d2:	d059      	beq.n	8007488 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073d4:	f7fa fbda 	bl	8001b8c <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d302      	bcc.n	80073ea <UART_WaitOnFlagUntilTimeout+0x30>
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d11b      	bne.n	8007422 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80073f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	689a      	ldr	r2, [r3, #8]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f022 0201 	bic.w	r2, r2, #1
 8007408:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2220      	movs	r2, #32
 800740e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2220      	movs	r2, #32
 8007414:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e042      	b.n	80074a8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	2b00      	cmp	r3, #0
 800742e:	d02b      	beq.n	8007488 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	69db      	ldr	r3, [r3, #28]
 8007436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800743a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800743e:	d123      	bne.n	8007488 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007448:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007458:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 0201 	bic.w	r2, r2, #1
 8007468:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2220      	movs	r2, #32
 800746e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2220      	movs	r2, #32
 8007474:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2220      	movs	r2, #32
 800747a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e00f      	b.n	80074a8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	69da      	ldr	r2, [r3, #28]
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	4013      	ands	r3, r2
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	429a      	cmp	r2, r3
 8007496:	bf0c      	ite	eq
 8007498:	2301      	moveq	r3, #1
 800749a:	2300      	movne	r3, #0
 800749c:	b2db      	uxtb	r3, r3
 800749e:	461a      	mov	r2, r3
 80074a0:	79fb      	ldrb	r3, [r7, #7]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d092      	beq.n	80073cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80074c6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689a      	ldr	r2, [r3, #8]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f022 0201 	bic.w	r2, r2, #1
 80074d6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2220      	movs	r2, #32
 80074dc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80074e4:	bf00      	nop
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f7ff fbae 	bl	8006c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007514:	bf00      	nop
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007528:	2b21      	cmp	r3, #33	; 0x21
 800752a:	d12a      	bne.n	8007582 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007532:	b29b      	uxth	r3, r3
 8007534:	2b00      	cmp	r3, #0
 8007536:	d110      	bne.n	800755a <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007546:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007556:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007558:	e013      	b.n	8007582 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800755e:	781a      	ldrb	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800756a:	1c5a      	adds	r2, r3, #1
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007576:	b29b      	uxth	r3, r3
 8007578:	3b01      	subs	r3, #1
 800757a:	b29a      	uxth	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007582:	bf00      	nop
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr

0800758e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800758e:	b480      	push	{r7}
 8007590:	b085      	sub	sp, #20
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800759a:	2b21      	cmp	r3, #33	; 0x21
 800759c:	d12f      	bne.n	80075fe <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d110      	bne.n	80075cc <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075b8:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075c8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80075ca:	e018      	b.n	80075fe <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	881b      	ldrh	r3, [r3, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075e0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075e6:	1c9a      	adds	r2, r3, #2
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	3b01      	subs	r3, #1
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80075fe:	bf00      	nop
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b082      	sub	sp, #8
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007620:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2220      	movs	r2, #32
 8007626:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7ff fb14 	bl	8006c5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007634:	bf00      	nop
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800764a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007650:	2b22      	cmp	r3, #34	; 0x22
 8007652:	d13a      	bne.n	80076ca <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800765c:	89bb      	ldrh	r3, [r7, #12]
 800765e:	b2d9      	uxtb	r1, r3
 8007660:	89fb      	ldrh	r3, [r7, #14]
 8007662:	b2da      	uxtb	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007668:	400a      	ands	r2, r1
 800766a:	b2d2      	uxtb	r2, r2
 800766c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007672:	1c5a      	adds	r2, r3, #1
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800767e:	b29b      	uxth	r3, r3
 8007680:	3b01      	subs	r3, #1
 8007682:	b29a      	uxth	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007690:	b29b      	uxth	r3, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	d121      	bne.n	80076da <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80076a4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f022 0201 	bic.w	r2, r2, #1
 80076b4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2220      	movs	r2, #32
 80076ba:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7f8 ffe2 	bl	800068c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076c8:	e007      	b.n	80076da <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	699a      	ldr	r2, [r3, #24]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f042 0208 	orr.w	r2, r2, #8
 80076d8:	619a      	str	r2, [r3, #24]
}
 80076da:	bf00      	nop
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b084      	sub	sp, #16
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076f0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076f6:	2b22      	cmp	r3, #34	; 0x22
 80076f8:	d13a      	bne.n	8007770 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007700:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007706:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007708:	89ba      	ldrh	r2, [r7, #12]
 800770a:	89fb      	ldrh	r3, [r7, #14]
 800770c:	4013      	ands	r3, r2
 800770e:	b29a      	uxth	r2, r3
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007718:	1c9a      	adds	r2, r3, #2
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007724:	b29b      	uxth	r3, r3
 8007726:	3b01      	subs	r3, #1
 8007728:	b29a      	uxth	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007736:	b29b      	uxth	r3, r3
 8007738:	2b00      	cmp	r3, #0
 800773a:	d121      	bne.n	8007780 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800774a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689a      	ldr	r2, [r3, #8]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f022 0201 	bic.w	r2, r2, #1
 800775a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2220      	movs	r2, #32
 8007760:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f7f8 ff8f 	bl	800068c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800776e:	e007      	b.n	8007780 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	699a      	ldr	r2, [r3, #24]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f042 0208 	orr.w	r2, r2, #8
 800777e:	619a      	str	r2, [r3, #24]
}
 8007780:	bf00      	nop
 8007782:	3710      	adds	r7, #16
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007788:	b084      	sub	sp, #16
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	f107 001c 	add.w	r0, r7, #28
 8007796:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779c:	2b01      	cmp	r3, #1
 800779e:	d120      	bne.n	80077e2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	68da      	ldr	r2, [r3, #12]
 80077b0:	4b20      	ldr	r3, [pc, #128]	; (8007834 <USB_CoreInit+0xac>)
 80077b2:	4013      	ands	r3, r2
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80077c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d105      	bne.n	80077d6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fa52 	bl	8007c80 <USB_CoreReset>
 80077dc:	4603      	mov	r3, r0
 80077de:	73fb      	strb	r3, [r7, #15]
 80077e0:	e010      	b.n	8007804 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fa46 	bl	8007c80 <USB_CoreReset>
 80077f4:	4603      	mov	r3, r0
 80077f6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007806:	2b01      	cmp	r3, #1
 8007808:	d10b      	bne.n	8007822 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f043 0206 	orr.w	r2, r3, #6
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f043 0220 	orr.w	r2, r3, #32
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007822:	7bfb      	ldrb	r3, [r7, #15]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800782e:	b004      	add	sp, #16
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	ffbdffbf 	.word	0xffbdffbf

08007838 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f023 0201 	bic.w	r2, r3, #1
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b082      	sub	sp, #8
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
 8007862:	460b      	mov	r3, r1
 8007864:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007872:	78fb      	ldrb	r3, [r7, #3]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d106      	bne.n	8007886 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	60da      	str	r2, [r3, #12]
 8007884:	e00b      	b.n	800789e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007886:	78fb      	ldrb	r3, [r7, #3]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d106      	bne.n	800789a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	60da      	str	r2, [r3, #12]
 8007898:	e001      	b.n	800789e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e003      	b.n	80078a6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800789e:	2032      	movs	r0, #50	; 0x32
 80078a0:	f7fa f980 	bl	8001ba4 <HAL_Delay>

  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
	...

080078b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078b0:	b084      	sub	sp, #16
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b086      	sub	sp, #24
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80078be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80078ca:	2300      	movs	r3, #0
 80078cc:	613b      	str	r3, [r7, #16]
 80078ce:	e009      	b.n	80078e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	3340      	adds	r3, #64	; 0x40
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	2200      	movs	r2, #0
 80078dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	3301      	adds	r3, #1
 80078e2:	613b      	str	r3, [r7, #16]
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	2b0e      	cmp	r3, #14
 80078e8:	d9f2      	bls.n	80078d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80078ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d11c      	bne.n	800792a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078fe:	f043 0302 	orr.w	r3, r3, #2
 8007902:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007908:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	e005      	b.n	8007936 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800793c:	461a      	mov	r2, r3
 800793e:	2300      	movs	r3, #0
 8007940:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007948:	4619      	mov	r1, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007950:	461a      	mov	r2, r3
 8007952:	680b      	ldr	r3, [r1, #0]
 8007954:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007958:	2b01      	cmp	r3, #1
 800795a:	d10c      	bne.n	8007976 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800795c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795e:	2b00      	cmp	r3, #0
 8007960:	d104      	bne.n	800796c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007962:	2100      	movs	r1, #0
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f959 	bl	8007c1c <USB_SetDevSpeed>
 800796a:	e018      	b.n	800799e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800796c:	2101      	movs	r1, #1
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f954 	bl	8007c1c <USB_SetDevSpeed>
 8007974:	e013      	b.n	800799e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8007976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007978:	2b03      	cmp	r3, #3
 800797a:	d10c      	bne.n	8007996 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800797c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797e:	2b00      	cmp	r3, #0
 8007980:	d104      	bne.n	800798c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007982:	2100      	movs	r1, #0
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f949 	bl	8007c1c <USB_SetDevSpeed>
 800798a:	e008      	b.n	800799e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800798c:	2101      	movs	r1, #1
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f944 	bl	8007c1c <USB_SetDevSpeed>
 8007994:	e003      	b.n	800799e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007996:	2103      	movs	r1, #3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f93f 	bl	8007c1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800799e:	2110      	movs	r1, #16
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f8f3 	bl	8007b8c <USB_FlushTxFifo>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f911 	bl	8007bd8 <USB_FlushRxFifo>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d001      	beq.n	80079c0 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c6:	461a      	mov	r2, r3
 80079c8:	2300      	movs	r3, #0
 80079ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d2:	461a      	mov	r2, r3
 80079d4:	2300      	movs	r3, #0
 80079d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079de:	461a      	mov	r2, r3
 80079e0:	2300      	movs	r3, #0
 80079e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079e4:	2300      	movs	r3, #0
 80079e6:	613b      	str	r3, [r7, #16]
 80079e8:	e043      	b.n	8007a72 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	015a      	lsls	r2, r3, #5
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	4413      	add	r3, r2
 80079f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a00:	d118      	bne.n	8007a34 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10a      	bne.n	8007a1e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a14:	461a      	mov	r2, r3
 8007a16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a1a:	6013      	str	r3, [r2, #0]
 8007a1c:	e013      	b.n	8007a46 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a30:	6013      	str	r3, [r2, #0]
 8007a32:	e008      	b.n	8007a46 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a40:	461a      	mov	r2, r3
 8007a42:	2300      	movs	r3, #0
 8007a44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	015a      	lsls	r2, r3, #5
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a52:	461a      	mov	r2, r3
 8007a54:	2300      	movs	r3, #0
 8007a56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	015a      	lsls	r2, r3, #5
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	4413      	add	r3, r2
 8007a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a64:	461a      	mov	r2, r3
 8007a66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	613b      	str	r3, [r7, #16]
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d3b7      	bcc.n	80079ea <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	613b      	str	r3, [r7, #16]
 8007a7e:	e043      	b.n	8007b08 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	015a      	lsls	r2, r3, #5
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4413      	add	r3, r2
 8007a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a96:	d118      	bne.n	8007aca <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10a      	bne.n	8007ab4 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	e013      	b.n	8007adc <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	e008      	b.n	8007adc <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	015a      	lsls	r2, r3, #5
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	2300      	movs	r3, #0
 8007ada:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae8:	461a      	mov	r2, r3
 8007aea:	2300      	movs	r3, #0
 8007aec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	015a      	lsls	r2, r3, #5
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007afa:	461a      	mov	r2, r3
 8007afc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	3301      	adds	r3, #1
 8007b06:	613b      	str	r3, [r7, #16]
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d3b7      	bcc.n	8007a80 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007b30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d105      	bne.n	8007b44 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	f043 0210 	orr.w	r2, r3, #16
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	699a      	ldr	r2, [r3, #24]
 8007b48:	4b0e      	ldr	r3, [pc, #56]	; (8007b84 <USB_DevInit+0x2d4>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d005      	beq.n	8007b62 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	f043 0208 	orr.w	r2, r3, #8
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d105      	bne.n	8007b74 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	699a      	ldr	r2, [r3, #24]
 8007b6c:	4b06      	ldr	r3, [pc, #24]	; (8007b88 <USB_DevInit+0x2d8>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3718      	adds	r7, #24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b80:	b004      	add	sp, #16
 8007b82:	4770      	bx	lr
 8007b84:	803c3800 	.word	0x803c3800
 8007b88:	40000004 	.word	0x40000004

08007b8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007b96:	2300      	movs	r3, #0
 8007b98:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	019b      	lsls	r3, r3, #6
 8007b9e:	f043 0220 	orr.w	r2, r3, #32
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4a09      	ldr	r2, [pc, #36]	; (8007bd4 <USB_FlushTxFifo+0x48>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d901      	bls.n	8007bb8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	e006      	b.n	8007bc6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	f003 0320 	and.w	r3, r3, #32
 8007bc0:	2b20      	cmp	r3, #32
 8007bc2:	d0f0      	beq.n	8007ba6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	00030d40 	.word	0x00030d40

08007bd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007be0:	2300      	movs	r3, #0
 8007be2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2210      	movs	r2, #16
 8007be8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	3301      	adds	r3, #1
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4a09      	ldr	r2, [pc, #36]	; (8007c18 <USB_FlushRxFifo+0x40>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d901      	bls.n	8007bfc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e006      	b.n	8007c0a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	f003 0310 	and.w	r3, r3, #16
 8007c04:	2b10      	cmp	r3, #16
 8007c06:	d0f0      	beq.n	8007bea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	00030d40 	.word	0x00030d40

08007c1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	78fb      	ldrb	r3, [r7, #3]
 8007c36:	68f9      	ldr	r1, [r7, #12]
 8007c38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b084      	sub	sp, #16
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c68:	f043 0302 	orr.w	r3, r3, #2
 8007c6c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007c6e:	2003      	movs	r0, #3
 8007c70:	f7f9 ff98 	bl	8001ba4 <HAL_Delay>

  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
	...

08007c80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	60fb      	str	r3, [r7, #12]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	4a13      	ldr	r2, [pc, #76]	; (8007ce4 <USB_CoreReset+0x64>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d901      	bls.n	8007c9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e01b      	b.n	8007cd6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	daf2      	bge.n	8007c8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	f043 0201 	orr.w	r2, r3, #1
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	60fb      	str	r3, [r7, #12]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	4a09      	ldr	r2, [pc, #36]	; (8007ce4 <USB_CoreReset+0x64>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d901      	bls.n	8007cc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e006      	b.n	8007cd6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	f003 0301 	and.w	r3, r3, #1
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d0f0      	beq.n	8007cb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	00030d40 	.word	0x00030d40

08007ce8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007cee:	4b8c      	ldr	r3, [pc, #560]	; (8007f20 <MX_LWIP_Init+0x238>)
 8007cf0:	22c0      	movs	r2, #192	; 0xc0
 8007cf2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007cf4:	4b8a      	ldr	r3, [pc, #552]	; (8007f20 <MX_LWIP_Init+0x238>)
 8007cf6:	22a8      	movs	r2, #168	; 0xa8
 8007cf8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8007cfa:	4b89      	ldr	r3, [pc, #548]	; (8007f20 <MX_LWIP_Init+0x238>)
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 153;
 8007d00:	4b87      	ldr	r3, [pc, #540]	; (8007f20 <MX_LWIP_Init+0x238>)
 8007d02:	2299      	movs	r2, #153	; 0x99
 8007d04:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007d06:	4b87      	ldr	r3, [pc, #540]	; (8007f24 <MX_LWIP_Init+0x23c>)
 8007d08:	22ff      	movs	r2, #255	; 0xff
 8007d0a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007d0c:	4b85      	ldr	r3, [pc, #532]	; (8007f24 <MX_LWIP_Init+0x23c>)
 8007d0e:	22ff      	movs	r2, #255	; 0xff
 8007d10:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007d12:	4b84      	ldr	r3, [pc, #528]	; (8007f24 <MX_LWIP_Init+0x23c>)
 8007d14:	22ff      	movs	r2, #255	; 0xff
 8007d16:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007d18:	4b82      	ldr	r3, [pc, #520]	; (8007f24 <MX_LWIP_Init+0x23c>)
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8007d1e:	4b82      	ldr	r3, [pc, #520]	; (8007f28 <MX_LWIP_Init+0x240>)
 8007d20:	22c0      	movs	r2, #192	; 0xc0
 8007d22:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007d24:	4b80      	ldr	r3, [pc, #512]	; (8007f28 <MX_LWIP_Init+0x240>)
 8007d26:	22a8      	movs	r2, #168	; 0xa8
 8007d28:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8007d2a:	4b7f      	ldr	r3, [pc, #508]	; (8007f28 <MX_LWIP_Init+0x240>)
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007d30:	4b7d      	ldr	r3, [pc, #500]	; (8007f28 <MX_LWIP_Init+0x240>)
 8007d32:	2201      	movs	r2, #1
 8007d34:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8007d36:	2100      	movs	r1, #0
 8007d38:	2000      	movs	r0, #0
 8007d3a:	f005 fd6d 	bl	800d818 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007d3e:	4b78      	ldr	r3, [pc, #480]	; (8007f20 <MX_LWIP_Init+0x238>)
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	061a      	lsls	r2, r3, #24
 8007d44:	4b76      	ldr	r3, [pc, #472]	; (8007f20 <MX_LWIP_Init+0x238>)
 8007d46:	785b      	ldrb	r3, [r3, #1]
 8007d48:	041b      	lsls	r3, r3, #16
 8007d4a:	431a      	orrs	r2, r3
 8007d4c:	4b74      	ldr	r3, [pc, #464]	; (8007f20 <MX_LWIP_Init+0x238>)
 8007d4e:	789b      	ldrb	r3, [r3, #2]
 8007d50:	021b      	lsls	r3, r3, #8
 8007d52:	4313      	orrs	r3, r2
 8007d54:	4a72      	ldr	r2, [pc, #456]	; (8007f20 <MX_LWIP_Init+0x238>)
 8007d56:	78d2      	ldrb	r2, [r2, #3]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	061a      	lsls	r2, r3, #24
 8007d5c:	4b70      	ldr	r3, [pc, #448]	; (8007f20 <MX_LWIP_Init+0x238>)
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	0619      	lsls	r1, r3, #24
 8007d62:	4b6f      	ldr	r3, [pc, #444]	; (8007f20 <MX_LWIP_Init+0x238>)
 8007d64:	785b      	ldrb	r3, [r3, #1]
 8007d66:	041b      	lsls	r3, r3, #16
 8007d68:	4319      	orrs	r1, r3
 8007d6a:	4b6d      	ldr	r3, [pc, #436]	; (8007f20 <MX_LWIP_Init+0x238>)
 8007d6c:	789b      	ldrb	r3, [r3, #2]
 8007d6e:	021b      	lsls	r3, r3, #8
 8007d70:	430b      	orrs	r3, r1
 8007d72:	496b      	ldr	r1, [pc, #428]	; (8007f20 <MX_LWIP_Init+0x238>)
 8007d74:	78c9      	ldrb	r1, [r1, #3]
 8007d76:	430b      	orrs	r3, r1
 8007d78:	021b      	lsls	r3, r3, #8
 8007d7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	4b67      	ldr	r3, [pc, #412]	; (8007f20 <MX_LWIP_Init+0x238>)
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	0619      	lsls	r1, r3, #24
 8007d86:	4b66      	ldr	r3, [pc, #408]	; (8007f20 <MX_LWIP_Init+0x238>)
 8007d88:	785b      	ldrb	r3, [r3, #1]
 8007d8a:	041b      	lsls	r3, r3, #16
 8007d8c:	4319      	orrs	r1, r3
 8007d8e:	4b64      	ldr	r3, [pc, #400]	; (8007f20 <MX_LWIP_Init+0x238>)
 8007d90:	789b      	ldrb	r3, [r3, #2]
 8007d92:	021b      	lsls	r3, r3, #8
 8007d94:	430b      	orrs	r3, r1
 8007d96:	4962      	ldr	r1, [pc, #392]	; (8007f20 <MX_LWIP_Init+0x238>)
 8007d98:	78c9      	ldrb	r1, [r1, #3]
 8007d9a:	430b      	orrs	r3, r1
 8007d9c:	0a1b      	lsrs	r3, r3, #8
 8007d9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007da2:	431a      	orrs	r2, r3
 8007da4:	4b5e      	ldr	r3, [pc, #376]	; (8007f20 <MX_LWIP_Init+0x238>)
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	0619      	lsls	r1, r3, #24
 8007daa:	4b5d      	ldr	r3, [pc, #372]	; (8007f20 <MX_LWIP_Init+0x238>)
 8007dac:	785b      	ldrb	r3, [r3, #1]
 8007dae:	041b      	lsls	r3, r3, #16
 8007db0:	4319      	orrs	r1, r3
 8007db2:	4b5b      	ldr	r3, [pc, #364]	; (8007f20 <MX_LWIP_Init+0x238>)
 8007db4:	789b      	ldrb	r3, [r3, #2]
 8007db6:	021b      	lsls	r3, r3, #8
 8007db8:	430b      	orrs	r3, r1
 8007dba:	4959      	ldr	r1, [pc, #356]	; (8007f20 <MX_LWIP_Init+0x238>)
 8007dbc:	78c9      	ldrb	r1, [r1, #3]
 8007dbe:	430b      	orrs	r3, r1
 8007dc0:	0e1b      	lsrs	r3, r3, #24
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	4a59      	ldr	r2, [pc, #356]	; (8007f2c <MX_LWIP_Init+0x244>)
 8007dc6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007dc8:	4b56      	ldr	r3, [pc, #344]	; (8007f24 <MX_LWIP_Init+0x23c>)
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	061a      	lsls	r2, r3, #24
 8007dce:	4b55      	ldr	r3, [pc, #340]	; (8007f24 <MX_LWIP_Init+0x23c>)
 8007dd0:	785b      	ldrb	r3, [r3, #1]
 8007dd2:	041b      	lsls	r3, r3, #16
 8007dd4:	431a      	orrs	r2, r3
 8007dd6:	4b53      	ldr	r3, [pc, #332]	; (8007f24 <MX_LWIP_Init+0x23c>)
 8007dd8:	789b      	ldrb	r3, [r3, #2]
 8007dda:	021b      	lsls	r3, r3, #8
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	4a51      	ldr	r2, [pc, #324]	; (8007f24 <MX_LWIP_Init+0x23c>)
 8007de0:	78d2      	ldrb	r2, [r2, #3]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	061a      	lsls	r2, r3, #24
 8007de6:	4b4f      	ldr	r3, [pc, #316]	; (8007f24 <MX_LWIP_Init+0x23c>)
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	0619      	lsls	r1, r3, #24
 8007dec:	4b4d      	ldr	r3, [pc, #308]	; (8007f24 <MX_LWIP_Init+0x23c>)
 8007dee:	785b      	ldrb	r3, [r3, #1]
 8007df0:	041b      	lsls	r3, r3, #16
 8007df2:	4319      	orrs	r1, r3
 8007df4:	4b4b      	ldr	r3, [pc, #300]	; (8007f24 <MX_LWIP_Init+0x23c>)
 8007df6:	789b      	ldrb	r3, [r3, #2]
 8007df8:	021b      	lsls	r3, r3, #8
 8007dfa:	430b      	orrs	r3, r1
 8007dfc:	4949      	ldr	r1, [pc, #292]	; (8007f24 <MX_LWIP_Init+0x23c>)
 8007dfe:	78c9      	ldrb	r1, [r1, #3]
 8007e00:	430b      	orrs	r3, r1
 8007e02:	021b      	lsls	r3, r3, #8
 8007e04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e08:	431a      	orrs	r2, r3
 8007e0a:	4b46      	ldr	r3, [pc, #280]	; (8007f24 <MX_LWIP_Init+0x23c>)
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	0619      	lsls	r1, r3, #24
 8007e10:	4b44      	ldr	r3, [pc, #272]	; (8007f24 <MX_LWIP_Init+0x23c>)
 8007e12:	785b      	ldrb	r3, [r3, #1]
 8007e14:	041b      	lsls	r3, r3, #16
 8007e16:	4319      	orrs	r1, r3
 8007e18:	4b42      	ldr	r3, [pc, #264]	; (8007f24 <MX_LWIP_Init+0x23c>)
 8007e1a:	789b      	ldrb	r3, [r3, #2]
 8007e1c:	021b      	lsls	r3, r3, #8
 8007e1e:	430b      	orrs	r3, r1
 8007e20:	4940      	ldr	r1, [pc, #256]	; (8007f24 <MX_LWIP_Init+0x23c>)
 8007e22:	78c9      	ldrb	r1, [r1, #3]
 8007e24:	430b      	orrs	r3, r1
 8007e26:	0a1b      	lsrs	r3, r3, #8
 8007e28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007e2c:	431a      	orrs	r2, r3
 8007e2e:	4b3d      	ldr	r3, [pc, #244]	; (8007f24 <MX_LWIP_Init+0x23c>)
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	0619      	lsls	r1, r3, #24
 8007e34:	4b3b      	ldr	r3, [pc, #236]	; (8007f24 <MX_LWIP_Init+0x23c>)
 8007e36:	785b      	ldrb	r3, [r3, #1]
 8007e38:	041b      	lsls	r3, r3, #16
 8007e3a:	4319      	orrs	r1, r3
 8007e3c:	4b39      	ldr	r3, [pc, #228]	; (8007f24 <MX_LWIP_Init+0x23c>)
 8007e3e:	789b      	ldrb	r3, [r3, #2]
 8007e40:	021b      	lsls	r3, r3, #8
 8007e42:	430b      	orrs	r3, r1
 8007e44:	4937      	ldr	r1, [pc, #220]	; (8007f24 <MX_LWIP_Init+0x23c>)
 8007e46:	78c9      	ldrb	r1, [r1, #3]
 8007e48:	430b      	orrs	r3, r1
 8007e4a:	0e1b      	lsrs	r3, r3, #24
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	4a38      	ldr	r2, [pc, #224]	; (8007f30 <MX_LWIP_Init+0x248>)
 8007e50:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007e52:	4b35      	ldr	r3, [pc, #212]	; (8007f28 <MX_LWIP_Init+0x240>)
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	061a      	lsls	r2, r3, #24
 8007e58:	4b33      	ldr	r3, [pc, #204]	; (8007f28 <MX_LWIP_Init+0x240>)
 8007e5a:	785b      	ldrb	r3, [r3, #1]
 8007e5c:	041b      	lsls	r3, r3, #16
 8007e5e:	431a      	orrs	r2, r3
 8007e60:	4b31      	ldr	r3, [pc, #196]	; (8007f28 <MX_LWIP_Init+0x240>)
 8007e62:	789b      	ldrb	r3, [r3, #2]
 8007e64:	021b      	lsls	r3, r3, #8
 8007e66:	4313      	orrs	r3, r2
 8007e68:	4a2f      	ldr	r2, [pc, #188]	; (8007f28 <MX_LWIP_Init+0x240>)
 8007e6a:	78d2      	ldrb	r2, [r2, #3]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	061a      	lsls	r2, r3, #24
 8007e70:	4b2d      	ldr	r3, [pc, #180]	; (8007f28 <MX_LWIP_Init+0x240>)
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	0619      	lsls	r1, r3, #24
 8007e76:	4b2c      	ldr	r3, [pc, #176]	; (8007f28 <MX_LWIP_Init+0x240>)
 8007e78:	785b      	ldrb	r3, [r3, #1]
 8007e7a:	041b      	lsls	r3, r3, #16
 8007e7c:	4319      	orrs	r1, r3
 8007e7e:	4b2a      	ldr	r3, [pc, #168]	; (8007f28 <MX_LWIP_Init+0x240>)
 8007e80:	789b      	ldrb	r3, [r3, #2]
 8007e82:	021b      	lsls	r3, r3, #8
 8007e84:	430b      	orrs	r3, r1
 8007e86:	4928      	ldr	r1, [pc, #160]	; (8007f28 <MX_LWIP_Init+0x240>)
 8007e88:	78c9      	ldrb	r1, [r1, #3]
 8007e8a:	430b      	orrs	r3, r1
 8007e8c:	021b      	lsls	r3, r3, #8
 8007e8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e92:	431a      	orrs	r2, r3
 8007e94:	4b24      	ldr	r3, [pc, #144]	; (8007f28 <MX_LWIP_Init+0x240>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	0619      	lsls	r1, r3, #24
 8007e9a:	4b23      	ldr	r3, [pc, #140]	; (8007f28 <MX_LWIP_Init+0x240>)
 8007e9c:	785b      	ldrb	r3, [r3, #1]
 8007e9e:	041b      	lsls	r3, r3, #16
 8007ea0:	4319      	orrs	r1, r3
 8007ea2:	4b21      	ldr	r3, [pc, #132]	; (8007f28 <MX_LWIP_Init+0x240>)
 8007ea4:	789b      	ldrb	r3, [r3, #2]
 8007ea6:	021b      	lsls	r3, r3, #8
 8007ea8:	430b      	orrs	r3, r1
 8007eaa:	491f      	ldr	r1, [pc, #124]	; (8007f28 <MX_LWIP_Init+0x240>)
 8007eac:	78c9      	ldrb	r1, [r1, #3]
 8007eae:	430b      	orrs	r3, r1
 8007eb0:	0a1b      	lsrs	r3, r3, #8
 8007eb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	4b1b      	ldr	r3, [pc, #108]	; (8007f28 <MX_LWIP_Init+0x240>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	0619      	lsls	r1, r3, #24
 8007ebe:	4b1a      	ldr	r3, [pc, #104]	; (8007f28 <MX_LWIP_Init+0x240>)
 8007ec0:	785b      	ldrb	r3, [r3, #1]
 8007ec2:	041b      	lsls	r3, r3, #16
 8007ec4:	4319      	orrs	r1, r3
 8007ec6:	4b18      	ldr	r3, [pc, #96]	; (8007f28 <MX_LWIP_Init+0x240>)
 8007ec8:	789b      	ldrb	r3, [r3, #2]
 8007eca:	021b      	lsls	r3, r3, #8
 8007ecc:	430b      	orrs	r3, r1
 8007ece:	4916      	ldr	r1, [pc, #88]	; (8007f28 <MX_LWIP_Init+0x240>)
 8007ed0:	78c9      	ldrb	r1, [r1, #3]
 8007ed2:	430b      	orrs	r3, r1
 8007ed4:	0e1b      	lsrs	r3, r3, #24
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	4a16      	ldr	r2, [pc, #88]	; (8007f34 <MX_LWIP_Init+0x24c>)
 8007eda:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007edc:	4b16      	ldr	r3, [pc, #88]	; (8007f38 <MX_LWIP_Init+0x250>)
 8007ede:	9302      	str	r3, [sp, #8]
 8007ee0:	4b16      	ldr	r3, [pc, #88]	; (8007f3c <MX_LWIP_Init+0x254>)
 8007ee2:	9301      	str	r3, [sp, #4]
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	9300      	str	r3, [sp, #0]
 8007ee8:	4b12      	ldr	r3, [pc, #72]	; (8007f34 <MX_LWIP_Init+0x24c>)
 8007eea:	4a11      	ldr	r2, [pc, #68]	; (8007f30 <MX_LWIP_Init+0x248>)
 8007eec:	490f      	ldr	r1, [pc, #60]	; (8007f2c <MX_LWIP_Init+0x244>)
 8007eee:	4814      	ldr	r0, [pc, #80]	; (8007f40 <MX_LWIP_Init+0x258>)
 8007ef0:	f006 fa16 	bl	800e320 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007ef4:	4812      	ldr	r0, [pc, #72]	; (8007f40 <MX_LWIP_Init+0x258>)
 8007ef6:	f006 fbc3 	bl	800e680 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007efa:	4b11      	ldr	r3, [pc, #68]	; (8007f40 <MX_LWIP_Init+0x258>)
 8007efc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007f00:	089b      	lsrs	r3, r3, #2
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d003      	beq.n	8007f14 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007f0c:	480c      	ldr	r0, [pc, #48]	; (8007f40 <MX_LWIP_Init+0x258>)
 8007f0e:	f006 fbc7 	bl	800e6a0 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007f12:	e002      	b.n	8007f1a <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 8007f14:	480a      	ldr	r0, [pc, #40]	; (8007f40 <MX_LWIP_Init+0x258>)
 8007f16:	f006 fc2f 	bl	800e778 <netif_set_down>
}
 8007f1a:	bf00      	nop
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	200094a8 	.word	0x200094a8
 8007f24:	200094a4 	.word	0x200094a4
 8007f28:	2000946c 	.word	0x2000946c
 8007f2c:	200094a0 	.word	0x200094a0
 8007f30:	200094ac 	.word	0x200094ac
 8007f34:	200094b0 	.word	0x200094b0
 8007f38:	0800d729 	.word	0x0800d729
 8007f3c:	08008589 	.word	0x08008589
 8007f40:	20009470 	.word	0x20009470

08007f44 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b08e      	sub	sp, #56	; 0x38
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f50:	2200      	movs	r2, #0
 8007f52:	601a      	str	r2, [r3, #0]
 8007f54:	605a      	str	r2, [r3, #4]
 8007f56:	609a      	str	r2, [r3, #8]
 8007f58:	60da      	str	r2, [r3, #12]
 8007f5a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a52      	ldr	r2, [pc, #328]	; (80080ac <HAL_ETH_MspInit+0x168>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	f040 809e 	bne.w	80080a4 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007f68:	4b51      	ldr	r3, [pc, #324]	; (80080b0 <HAL_ETH_MspInit+0x16c>)
 8007f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6c:	4a50      	ldr	r2, [pc, #320]	; (80080b0 <HAL_ETH_MspInit+0x16c>)
 8007f6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007f72:	6313      	str	r3, [r2, #48]	; 0x30
 8007f74:	4b4e      	ldr	r3, [pc, #312]	; (80080b0 <HAL_ETH_MspInit+0x16c>)
 8007f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f7c:	623b      	str	r3, [r7, #32]
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	4b4b      	ldr	r3, [pc, #300]	; (80080b0 <HAL_ETH_MspInit+0x16c>)
 8007f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f84:	4a4a      	ldr	r2, [pc, #296]	; (80080b0 <HAL_ETH_MspInit+0x16c>)
 8007f86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8007f8c:	4b48      	ldr	r3, [pc, #288]	; (80080b0 <HAL_ETH_MspInit+0x16c>)
 8007f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f94:	61fb      	str	r3, [r7, #28]
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	4b45      	ldr	r3, [pc, #276]	; (80080b0 <HAL_ETH_MspInit+0x16c>)
 8007f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9c:	4a44      	ldr	r2, [pc, #272]	; (80080b0 <HAL_ETH_MspInit+0x16c>)
 8007f9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8007fa4:	4b42      	ldr	r3, [pc, #264]	; (80080b0 <HAL_ETH_MspInit+0x16c>)
 8007fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fac:	61bb      	str	r3, [r7, #24]
 8007fae:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007fb0:	4b3f      	ldr	r3, [pc, #252]	; (80080b0 <HAL_ETH_MspInit+0x16c>)
 8007fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb4:	4a3e      	ldr	r2, [pc, #248]	; (80080b0 <HAL_ETH_MspInit+0x16c>)
 8007fb6:	f043 0304 	orr.w	r3, r3, #4
 8007fba:	6313      	str	r3, [r2, #48]	; 0x30
 8007fbc:	4b3c      	ldr	r3, [pc, #240]	; (80080b0 <HAL_ETH_MspInit+0x16c>)
 8007fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc0:	f003 0304 	and.w	r3, r3, #4
 8007fc4:	617b      	str	r3, [r7, #20]
 8007fc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fc8:	4b39      	ldr	r3, [pc, #228]	; (80080b0 <HAL_ETH_MspInit+0x16c>)
 8007fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fcc:	4a38      	ldr	r2, [pc, #224]	; (80080b0 <HAL_ETH_MspInit+0x16c>)
 8007fce:	f043 0301 	orr.w	r3, r3, #1
 8007fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8007fd4:	4b36      	ldr	r3, [pc, #216]	; (80080b0 <HAL_ETH_MspInit+0x16c>)
 8007fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd8:	f003 0301 	and.w	r3, r3, #1
 8007fdc:	613b      	str	r3, [r7, #16]
 8007fde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007fe0:	4b33      	ldr	r3, [pc, #204]	; (80080b0 <HAL_ETH_MspInit+0x16c>)
 8007fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe4:	4a32      	ldr	r2, [pc, #200]	; (80080b0 <HAL_ETH_MspInit+0x16c>)
 8007fe6:	f043 0302 	orr.w	r3, r3, #2
 8007fea:	6313      	str	r3, [r2, #48]	; 0x30
 8007fec:	4b30      	ldr	r3, [pc, #192]	; (80080b0 <HAL_ETH_MspInit+0x16c>)
 8007fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff0:	f003 0302 	and.w	r3, r3, #2
 8007ff4:	60fb      	str	r3, [r7, #12]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007ff8:	4b2d      	ldr	r3, [pc, #180]	; (80080b0 <HAL_ETH_MspInit+0x16c>)
 8007ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ffc:	4a2c      	ldr	r2, [pc, #176]	; (80080b0 <HAL_ETH_MspInit+0x16c>)
 8007ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008002:	6313      	str	r3, [r2, #48]	; 0x30
 8008004:	4b2a      	ldr	r3, [pc, #168]	; (80080b0 <HAL_ETH_MspInit+0x16c>)
 8008006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800c:	60bb      	str	r3, [r7, #8]
 800800e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008010:	2332      	movs	r3, #50	; 0x32
 8008012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008014:	2302      	movs	r3, #2
 8008016:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008018:	2300      	movs	r3, #0
 800801a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800801c:	2303      	movs	r3, #3
 800801e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008020:	230b      	movs	r3, #11
 8008022:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008028:	4619      	mov	r1, r3
 800802a:	4822      	ldr	r0, [pc, #136]	; (80080b4 <HAL_ETH_MspInit+0x170>)
 800802c:	f7fb f95a 	bl	80032e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008030:	2386      	movs	r3, #134	; 0x86
 8008032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008034:	2302      	movs	r3, #2
 8008036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008038:	2300      	movs	r3, #0
 800803a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800803c:	2303      	movs	r3, #3
 800803e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008040:	230b      	movs	r3, #11
 8008042:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008048:	4619      	mov	r1, r3
 800804a:	481b      	ldr	r0, [pc, #108]	; (80080b8 <HAL_ETH_MspInit+0x174>)
 800804c:	f7fb f94a 	bl	80032e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8008050:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008054:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008056:	2302      	movs	r3, #2
 8008058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800805a:	2300      	movs	r3, #0
 800805c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800805e:	2303      	movs	r3, #3
 8008060:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008062:	230b      	movs	r3, #11
 8008064:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8008066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800806a:	4619      	mov	r1, r3
 800806c:	4813      	ldr	r0, [pc, #76]	; (80080bc <HAL_ETH_MspInit+0x178>)
 800806e:	f7fb f939 	bl	80032e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8008072:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008076:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008078:	2302      	movs	r3, #2
 800807a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800807c:	2300      	movs	r3, #0
 800807e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008080:	2303      	movs	r3, #3
 8008082:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008084:	230b      	movs	r3, #11
 8008086:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800808c:	4619      	mov	r1, r3
 800808e:	480c      	ldr	r0, [pc, #48]	; (80080c0 <HAL_ETH_MspInit+0x17c>)
 8008090:	f7fb f928 	bl	80032e4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8008094:	2200      	movs	r2, #0
 8008096:	2105      	movs	r1, #5
 8008098:	203d      	movs	r0, #61	; 0x3d
 800809a:	f7fa f8e5 	bl	8002268 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800809e:	203d      	movs	r0, #61	; 0x3d
 80080a0:	f7fa f8fe 	bl	80022a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80080a4:	bf00      	nop
 80080a6:	3738      	adds	r7, #56	; 0x38
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	40028000 	.word	0x40028000
 80080b0:	40023800 	.word	0x40023800
 80080b4:	40020800 	.word	0x40020800
 80080b8:	40020000 	.word	0x40020000
 80080bc:	40020400 	.word	0x40020400
 80080c0:	40021800 	.word	0x40021800

080080c4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80080cc:	4b04      	ldr	r3, [pc, #16]	; (80080e0 <HAL_ETH_RxCpltCallback+0x1c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 fc39 	bl	8008948 <osSemaphoreRelease>
}
 80080d6:	bf00      	nop
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	20000660 	.word	0x20000660

080080e4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 80080e4:	b5b0      	push	{r4, r5, r7, lr}
 80080e6:	b090      	sub	sp, #64	; 0x40
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80080ec:	2300      	movs	r3, #0
 80080ee:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80080f0:	4b5c      	ldr	r3, [pc, #368]	; (8008264 <low_level_init+0x180>)
 80080f2:	4a5d      	ldr	r2, [pc, #372]	; (8008268 <low_level_init+0x184>)
 80080f4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80080f6:	4b5b      	ldr	r3, [pc, #364]	; (8008264 <low_level_init+0x180>)
 80080f8:	2201      	movs	r2, #1
 80080fa:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80080fc:	4b59      	ldr	r3, [pc, #356]	; (8008264 <low_level_init+0x180>)
 80080fe:	2200      	movs	r2, #0
 8008100:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8008102:	2300      	movs	r3, #0
 8008104:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8008108:	2380      	movs	r3, #128	; 0x80
 800810a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800810e:	23e1      	movs	r3, #225	; 0xe1
 8008110:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8008114:	2300      	movs	r3, #0
 8008116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800811a:	2300      	movs	r3, #0
 800811c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8008120:	2300      	movs	r3, #0
 8008122:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8008126:	4a4f      	ldr	r2, [pc, #316]	; (8008264 <low_level_init+0x180>)
 8008128:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800812c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800812e:	4b4d      	ldr	r3, [pc, #308]	; (8008264 <low_level_init+0x180>)
 8008130:	2201      	movs	r2, #1
 8008132:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8008134:	4b4b      	ldr	r3, [pc, #300]	; (8008264 <low_level_init+0x180>)
 8008136:	2200      	movs	r2, #0
 8008138:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800813a:	4b4a      	ldr	r3, [pc, #296]	; (8008264 <low_level_init+0x180>)
 800813c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008140:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008142:	4848      	ldr	r0, [pc, #288]	; (8008264 <low_level_init+0x180>)
 8008144:	f7fa f8dc 	bl	8002300 <HAL_ETH_Init>
 8008148:	4603      	mov	r3, r0
 800814a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800814e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008152:	2b00      	cmp	r3, #0
 8008154:	d108      	bne.n	8008168 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800815c:	f043 0304 	orr.w	r3, r3, #4
 8008160:	b2da      	uxtb	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8008168:	2304      	movs	r3, #4
 800816a:	4a40      	ldr	r2, [pc, #256]	; (800826c <low_level_init+0x188>)
 800816c:	4940      	ldr	r1, [pc, #256]	; (8008270 <low_level_init+0x18c>)
 800816e:	483d      	ldr	r0, [pc, #244]	; (8008264 <low_level_init+0x180>)
 8008170:	f7fa fa62 	bl	8002638 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8008174:	2304      	movs	r3, #4
 8008176:	4a3f      	ldr	r2, [pc, #252]	; (8008274 <low_level_init+0x190>)
 8008178:	493f      	ldr	r1, [pc, #252]	; (8008278 <low_level_init+0x194>)
 800817a:	483a      	ldr	r0, [pc, #232]	; (8008264 <low_level_init+0x180>)
 800817c:	f7fa fac5 	bl	800270a <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2206      	movs	r2, #6
 8008184:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008188:	4b36      	ldr	r3, [pc, #216]	; (8008264 <low_level_init+0x180>)
 800818a:	695b      	ldr	r3, [r3, #20]
 800818c:	781a      	ldrb	r2, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008194:	4b33      	ldr	r3, [pc, #204]	; (8008264 <low_level_init+0x180>)
 8008196:	695b      	ldr	r3, [r3, #20]
 8008198:	785a      	ldrb	r2, [r3, #1]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80081a0:	4b30      	ldr	r3, [pc, #192]	; (8008264 <low_level_init+0x180>)
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	789a      	ldrb	r2, [r3, #2]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80081ac:	4b2d      	ldr	r3, [pc, #180]	; (8008264 <low_level_init+0x180>)
 80081ae:	695b      	ldr	r3, [r3, #20]
 80081b0:	78da      	ldrb	r2, [r3, #3]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80081b8:	4b2a      	ldr	r3, [pc, #168]	; (8008264 <low_level_init+0x180>)
 80081ba:	695b      	ldr	r3, [r3, #20]
 80081bc:	791a      	ldrb	r2, [r3, #4]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80081c4:	4b27      	ldr	r3, [pc, #156]	; (8008264 <low_level_init+0x180>)
 80081c6:	695b      	ldr	r3, [r3, #20]
 80081c8:	795a      	ldrb	r2, [r3, #5]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80081d6:	841a      	strh	r2, [r3, #32]
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80081de:	f043 030a 	orr.w	r3, r3, #10
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80081ea:	2300      	movs	r3, #0
 80081ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80081ee:	2300      	movs	r3, #0
 80081f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80081f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80081f6:	2101      	movs	r1, #1
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 fb23 	bl	8008844 <osSemaphoreCreate>
 80081fe:	4602      	mov	r2, r0
 8008200:	4b1e      	ldr	r3, [pc, #120]	; (800827c <low_level_init+0x198>)
 8008202:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8008204:	4b1e      	ldr	r3, [pc, #120]	; (8008280 <low_level_init+0x19c>)
 8008206:	f107 040c 	add.w	r4, r7, #12
 800820a:	461d      	mov	r5, r3
 800820c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800820e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008210:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008214:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8008218:	f107 030c 	add.w	r3, r7, #12
 800821c:	6879      	ldr	r1, [r7, #4]
 800821e:	4618      	mov	r0, r3
 8008220:	f000 fa28 	bl	8008674 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8008224:	480f      	ldr	r0, [pc, #60]	; (8008264 <low_level_init+0x180>)
 8008226:	f7fa fd98 	bl	8002d5a <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800822a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800822e:	461a      	mov	r2, r3
 8008230:	211d      	movs	r1, #29
 8008232:	480c      	ldr	r0, [pc, #48]	; (8008264 <low_level_init+0x180>)
 8008234:	f7fa fcc3 	bl	8002bbe <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8008238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823a:	f043 030b 	orr.w	r3, r3, #11
 800823e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8008240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008242:	461a      	mov	r2, r3
 8008244:	211d      	movs	r1, #29
 8008246:	4807      	ldr	r0, [pc, #28]	; (8008264 <low_level_init+0x180>)
 8008248:	f7fa fd21 	bl	8002c8e <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800824c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008250:	461a      	mov	r2, r3
 8008252:	211d      	movs	r1, #29
 8008254:	4803      	ldr	r0, [pc, #12]	; (8008264 <low_level_init+0x180>)
 8008256:	f7fa fcb2 	bl	8002bbe <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800825a:	bf00      	nop
 800825c:	3740      	adds	r7, #64	; 0x40
 800825e:	46bd      	mov	sp, r7
 8008260:	bdb0      	pop	{r4, r5, r7, pc}
 8008262:	bf00      	nop
 8008264:	2000ad84 	.word	0x2000ad84
 8008268:	40028000 	.word	0x40028000
 800826c:	2000adcc 	.word	0x2000adcc
 8008270:	200094b4 	.word	0x200094b4
 8008274:	20009534 	.word	0x20009534
 8008278:	2000ad04 	.word	0x2000ad04
 800827c:	20000660 	.word	0x20000660
 8008280:	0801d4c4 	.word	0x0801d4c4

08008284 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b08a      	sub	sp, #40	; 0x28
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800828e:	4b4b      	ldr	r3, [pc, #300]	; (80083bc <low_level_output+0x138>)
 8008290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8008296:	2300      	movs	r3, #0
 8008298:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800829a:	2300      	movs	r3, #0
 800829c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800829e:	2300      	movs	r3, #0
 80082a0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80082a2:	2300      	movs	r3, #0
 80082a4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80082a6:	4b45      	ldr	r3, [pc, #276]	; (80083bc <low_level_output+0x138>)
 80082a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082aa:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80082ac:	2300      	movs	r3, #0
 80082ae:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	623b      	str	r3, [r7, #32]
 80082b4:	e05a      	b.n	800836c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	da03      	bge.n	80082c6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80082be:	23f8      	movs	r3, #248	; 0xf8
 80082c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80082c4:	e05c      	b.n	8008380 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	895b      	ldrh	r3, [r3, #10]
 80082ca:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80082cc:	2300      	movs	r3, #0
 80082ce:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80082d0:	e02f      	b.n	8008332 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80082d2:	69fa      	ldr	r2, [r7, #28]
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	18d0      	adds	r0, r2, r3
 80082d8:	6a3b      	ldr	r3, [r7, #32]
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	18d1      	adds	r1, r2, r3
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80082e6:	1a9b      	subs	r3, r3, r2
 80082e8:	461a      	mov	r2, r3
 80082ea:	f010 fca9 	bl	8018c40 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	da03      	bge.n	8008304 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80082fc:	23f8      	movs	r3, #248	; 0xf8
 80082fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8008302:	e03d      	b.n	8008380 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	4413      	add	r3, r2
 8008310:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008314:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008320:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800832c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800832e:	2300      	movs	r3, #0
 8008330:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	4413      	add	r3, r2
 8008338:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800833c:	4293      	cmp	r3, r2
 800833e:	d8c8      	bhi.n	80082d2 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8008340:	69fa      	ldr	r2, [r7, #28]
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	18d0      	adds	r0, r2, r3
 8008346:	6a3b      	ldr	r3, [r7, #32]
 8008348:	685a      	ldr	r2, [r3, #4]
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	4413      	add	r3, r2
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	4619      	mov	r1, r3
 8008352:	f010 fc75 	bl	8018c40 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	4413      	add	r3, r2
 800835c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4413      	add	r3, r2
 8008364:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8008366:	6a3b      	ldr	r3, [r7, #32]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	623b      	str	r3, [r7, #32]
 800836c:	6a3b      	ldr	r3, [r7, #32]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1a1      	bne.n	80082b6 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8008372:	6979      	ldr	r1, [r7, #20]
 8008374:	4811      	ldr	r0, [pc, #68]	; (80083bc <low_level_output+0x138>)
 8008376:	f7fa fa35 	bl	80027e4 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800837a:	2300      	movs	r3, #0
 800837c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8008380:	4b0e      	ldr	r3, [pc, #56]	; (80083bc <low_level_output+0x138>)
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	f241 0314 	movw	r3, #4116	; 0x1014
 8008388:	4413      	add	r3, r2
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 0320 	and.w	r3, r3, #32
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00d      	beq.n	80083b0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8008394:	4b09      	ldr	r3, [pc, #36]	; (80083bc <low_level_output+0x138>)
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	f241 0314 	movw	r3, #4116	; 0x1014
 800839c:	4413      	add	r3, r2
 800839e:	2220      	movs	r2, #32
 80083a0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80083a2:	4b06      	ldr	r3, [pc, #24]	; (80083bc <low_level_output+0x138>)
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	f241 0304 	movw	r3, #4100	; 0x1004
 80083aa:	4413      	add	r3, r2
 80083ac:	2200      	movs	r2, #0
 80083ae:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80083b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3728      	adds	r7, #40	; 0x28
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	2000ad84 	.word	0x2000ad84

080083c0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b08c      	sub	sp, #48	; 0x30
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80083c8:	2300      	movs	r3, #0
 80083ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80083cc:	2300      	movs	r3, #0
 80083ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80083d0:	2300      	movs	r3, #0
 80083d2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80083d4:	2300      	movs	r3, #0
 80083d6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80083d8:	2300      	movs	r3, #0
 80083da:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80083dc:	2300      	movs	r3, #0
 80083de:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80083e0:	2300      	movs	r3, #0
 80083e2:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80083e4:	484f      	ldr	r0, [pc, #316]	; (8008524 <low_level_input+0x164>)
 80083e6:	f7fa fae7 	bl	80029b8 <HAL_ETH_GetReceivedFrame_IT>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d001      	beq.n	80083f4 <low_level_input+0x34>
  
    return NULL;
 80083f0:	2300      	movs	r3, #0
 80083f2:	e092      	b.n	800851a <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80083f4:	4b4b      	ldr	r3, [pc, #300]	; (8008524 <low_level_input+0x164>)
 80083f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083f8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80083fa:	4b4a      	ldr	r3, [pc, #296]	; (8008524 <low_level_input+0x164>)
 80083fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fe:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8008400:	89fb      	ldrh	r3, [r7, #14]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d007      	beq.n	8008416 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8008406:	89fb      	ldrh	r3, [r7, #14]
 8008408:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800840c:	4619      	mov	r1, r3
 800840e:	2000      	movs	r0, #0
 8008410:	f006 fa9c 	bl	800e94c <pbuf_alloc>
 8008414:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8008416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008418:	2b00      	cmp	r3, #0
 800841a:	d04b      	beq.n	80084b4 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800841c:	4b41      	ldr	r3, [pc, #260]	; (8008524 <low_level_input+0x164>)
 800841e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008420:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8008422:	2300      	movs	r3, #0
 8008424:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008428:	62bb      	str	r3, [r7, #40]	; 0x28
 800842a:	e040      	b.n	80084ae <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800842c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842e:	895b      	ldrh	r3, [r3, #10]
 8008430:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8008432:	2300      	movs	r3, #0
 8008434:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008436:	e021      	b.n	800847c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8008438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	18d0      	adds	r0, r2, r3
 8008440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	18d1      	adds	r1, r2, r3
 8008446:	69fa      	ldr	r2, [r7, #28]
 8008448:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800844c:	1a9b      	subs	r3, r3, r2
 800844e:	461a      	mov	r2, r3
 8008450:	f010 fbf6 	bl	8018c40 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008454:	6a3b      	ldr	r3, [r7, #32]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8008460:	69fa      	ldr	r2, [r7, #28]
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	4413      	add	r3, r2
 8008466:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800846a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800846c:	69ba      	ldr	r2, [r7, #24]
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008476:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8008478:	2300      	movs	r3, #0
 800847a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800847c:	697a      	ldr	r2, [r7, #20]
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	4413      	add	r3, r2
 8008482:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008486:	4293      	cmp	r3, r2
 8008488:	d8d6      	bhi.n	8008438 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800848a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	18d0      	adds	r0, r2, r3
 8008492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	4413      	add	r3, r2
 8008498:	697a      	ldr	r2, [r7, #20]
 800849a:	4619      	mov	r1, r3
 800849c:	f010 fbd0 	bl	8018c40 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80084a0:	69fa      	ldr	r2, [r7, #28]
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	4413      	add	r3, r2
 80084a6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80084a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80084ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1bb      	bne.n	800842c <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80084b4:	4b1b      	ldr	r3, [pc, #108]	; (8008524 <low_level_input+0x164>)
 80084b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80084ba:	2300      	movs	r3, #0
 80084bc:	613b      	str	r3, [r7, #16]
 80084be:	e00b      	b.n	80084d8 <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80084c0:	6a3b      	ldr	r3, [r7, #32]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80084c8:	6a3b      	ldr	r3, [r7, #32]
 80084ca:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80084cc:	6a3b      	ldr	r3, [r7, #32]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	3301      	adds	r3, #1
 80084d6:	613b      	str	r3, [r7, #16]
 80084d8:	4b12      	ldr	r3, [pc, #72]	; (8008524 <low_level_input+0x164>)
 80084da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d3ee      	bcc.n	80084c0 <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 80084e2:	4b10      	ldr	r3, [pc, #64]	; (8008524 <low_level_input+0x164>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 80084e8:	4b0e      	ldr	r3, [pc, #56]	; (8008524 <low_level_input+0x164>)
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	f241 0314 	movw	r3, #4116	; 0x1014
 80084f0:	4413      	add	r3, r2
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00d      	beq.n	8008518 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80084fc:	4b09      	ldr	r3, [pc, #36]	; (8008524 <low_level_input+0x164>)
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	f241 0314 	movw	r3, #4116	; 0x1014
 8008504:	4413      	add	r3, r2
 8008506:	2280      	movs	r2, #128	; 0x80
 8008508:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800850a:	4b06      	ldr	r3, [pc, #24]	; (8008524 <low_level_input+0x164>)
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	f241 0308 	movw	r3, #4104	; 0x1008
 8008512:	4413      	add	r3, r2
 8008514:	2200      	movs	r2, #0
 8008516:	601a      	str	r2, [r3, #0]
  }
  return p;
 8008518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800851a:	4618      	mov	r0, r3
 800851c:	3730      	adds	r7, #48	; 0x30
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	2000ad84 	.word	0x2000ad84

08008528 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008534:	4b12      	ldr	r3, [pc, #72]	; (8008580 <ethernetif_input+0x58>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f04f 31ff 	mov.w	r1, #4294967295
 800853c:	4618      	mov	r0, r3
 800853e:	f000 f9b5 	bl	80088ac <osSemaphoreWait>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1f5      	bne.n	8008534 <ethernetif_input+0xc>
    {
      do
      {   
        LOCK_TCPIP_CORE();
 8008548:	480e      	ldr	r0, [pc, #56]	; (8008584 <ethernetif_input+0x5c>)
 800854a:	f010 fad1 	bl	8018af0 <sys_mutex_lock>
        p = low_level_input( netif );
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f7ff ff36 	bl	80083c0 <low_level_input>
 8008554:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00a      	beq.n	8008572 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	68f9      	ldr	r1, [r7, #12]
 8008562:	68b8      	ldr	r0, [r7, #8]
 8008564:	4798      	blx	r3
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d002      	beq.n	8008572 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800856c:	68b8      	ldr	r0, [r7, #8]
 800856e:	f006 fccd 	bl	800ef0c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8008572:	4804      	ldr	r0, [pc, #16]	; (8008584 <ethernetif_input+0x5c>)
 8008574:	f010 facb 	bl	8018b0e <sys_mutex_unlock>
      } while(p!=NULL);
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1e4      	bne.n	8008548 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800857e:	e7d9      	b.n	8008534 <ethernetif_input+0xc>
 8008580:	20000660 	.word	0x20000660
 8008584:	2000c5dc 	.word	0x2000c5dc

08008588 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d106      	bne.n	80085a4 <ethernetif_init+0x1c>
 8008596:	4b0e      	ldr	r3, [pc, #56]	; (80085d0 <ethernetif_init+0x48>)
 8008598:	f240 2235 	movw	r2, #565	; 0x235
 800859c:	490d      	ldr	r1, [pc, #52]	; (80085d4 <ethernetif_init+0x4c>)
 800859e:	480e      	ldr	r0, [pc, #56]	; (80085d8 <ethernetif_init+0x50>)
 80085a0:	f011 f98e 	bl	80198c0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2273      	movs	r2, #115	; 0x73
 80085a8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2274      	movs	r2, #116	; 0x74
 80085b0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a09      	ldr	r2, [pc, #36]	; (80085dc <ethernetif_init+0x54>)
 80085b8:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a08      	ldr	r2, [pc, #32]	; (80085e0 <ethernetif_init+0x58>)
 80085be:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f7ff fd8f 	bl	80080e4 <low_level_init>

  return ERR_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3708      	adds	r7, #8
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	0801d4e0 	.word	0x0801d4e0
 80085d4:	0801d4fc 	.word	0x0801d4fc
 80085d8:	0801d50c 	.word	0x0801d50c
 80085dc:	08016b11 	.word	0x08016b11
 80085e0:	08008285 	.word	0x08008285

080085e4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80085e8:	f7f9 fad0 	bl	8001b8c <HAL_GetTick>
 80085ec:	4603      	mov	r3, r0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80085f2:	b480      	push	{r7}
 80085f4:	b085      	sub	sp, #20
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	4603      	mov	r3, r0
 80085fa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80085fc:	2300      	movs	r3, #0
 80085fe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008600:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008604:	2b84      	cmp	r3, #132	; 0x84
 8008606:	d005      	beq.n	8008614 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008608:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	4413      	add	r3, r2
 8008610:	3303      	adds	r3, #3
 8008612:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008614:	68fb      	ldr	r3, [r7, #12]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008622:	b480      	push	{r7}
 8008624:	b083      	sub	sp, #12
 8008626:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008628:	f3ef 8305 	mrs	r3, IPSR
 800862c:	607b      	str	r3, [r7, #4]
  return(result);
 800862e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008630:	2b00      	cmp	r3, #0
 8008632:	bf14      	ite	ne
 8008634:	2301      	movne	r3, #1
 8008636:	2300      	moveq	r3, #0
 8008638:	b2db      	uxtb	r3, r3
}
 800863a:	4618      	mov	r0, r3
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800864a:	f001 fd0f 	bl	800a06c <vTaskStartScheduler>
  
  return osOK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	bd80      	pop	{r7, pc}

08008654 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8008658:	f7ff ffe3 	bl	8008622 <inHandlerMode>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8008662:	f001 fe21 	bl	800a2a8 <xTaskGetTickCountFromISR>
 8008666:	4603      	mov	r3, r0
 8008668:	e002      	b.n	8008670 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800866a:	f001 fe0d 	bl	800a288 <xTaskGetTickCount>
 800866e:	4603      	mov	r3, r0
  }
}
 8008670:	4618      	mov	r0, r3
 8008672:	bd80      	pop	{r7, pc}

08008674 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008676:	b089      	sub	sp, #36	; 0x24
 8008678:	af04      	add	r7, sp, #16
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d020      	beq.n	80086c8 <osThreadCreate+0x54>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d01c      	beq.n	80086c8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685c      	ldr	r4, [r3, #4]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681d      	ldr	r5, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	691e      	ldr	r6, [r3, #16]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7ff ffa6 	bl	80085f2 <makeFreeRtosPriority>
 80086a6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80086b0:	9202      	str	r2, [sp, #8]
 80086b2:	9301      	str	r3, [sp, #4]
 80086b4:	9100      	str	r1, [sp, #0]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	4632      	mov	r2, r6
 80086ba:	4629      	mov	r1, r5
 80086bc:	4620      	mov	r0, r4
 80086be:	f001 fb35 	bl	8009d2c <xTaskCreateStatic>
 80086c2:	4603      	mov	r3, r0
 80086c4:	60fb      	str	r3, [r7, #12]
 80086c6:	e01c      	b.n	8008702 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	685c      	ldr	r4, [r3, #4]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80086d4:	b29e      	uxth	r6, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80086dc:	4618      	mov	r0, r3
 80086de:	f7ff ff88 	bl	80085f2 <makeFreeRtosPriority>
 80086e2:	4602      	mov	r2, r0
 80086e4:	f107 030c 	add.w	r3, r7, #12
 80086e8:	9301      	str	r3, [sp, #4]
 80086ea:	9200      	str	r2, [sp, #0]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	4632      	mov	r2, r6
 80086f0:	4629      	mov	r1, r5
 80086f2:	4620      	mov	r0, r4
 80086f4:	f001 fb7a 	bl	8009dec <xTaskCreate>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d001      	beq.n	8008702 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80086fe:	2300      	movs	r3, #0
 8008700:	e000      	b.n	8008704 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008702:	68fb      	ldr	r3, [r7, #12]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800870c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d007      	beq.n	800872c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	4619      	mov	r1, r3
 8008722:	2001      	movs	r0, #1
 8008724:	f000 fc8d 	bl	8009042 <xQueueCreateMutexStatic>
 8008728:	4603      	mov	r3, r0
 800872a:	e003      	b.n	8008734 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800872c:	2001      	movs	r0, #1
 800872e:	f000 fc70 	bl	8009012 <xQueueCreateMutex>
 8008732:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008734:	4618      	mov	r0, r3
 8008736:	3708      	adds	r7, #8
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008746:	2300      	movs	r3, #0
 8008748:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d101      	bne.n	8008754 <osMutexWait+0x18>
    return osErrorParameter;
 8008750:	2380      	movs	r3, #128	; 0x80
 8008752:	e03a      	b.n	80087ca <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800875e:	d103      	bne.n	8008768 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8008760:	f04f 33ff 	mov.w	r3, #4294967295
 8008764:	60fb      	str	r3, [r7, #12]
 8008766:	e009      	b.n	800877c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d006      	beq.n	800877c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d101      	bne.n	800877c <osMutexWait+0x40>
      ticks = 1;
 8008778:	2301      	movs	r3, #1
 800877a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800877c:	f7ff ff51 	bl	8008622 <inHandlerMode>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d017      	beq.n	80087b6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008786:	f107 0308 	add.w	r3, r7, #8
 800878a:	461a      	mov	r2, r3
 800878c:	2100      	movs	r1, #0
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f001 f894 	bl	80098bc <xQueueReceiveFromISR>
 8008794:	4603      	mov	r3, r0
 8008796:	2b01      	cmp	r3, #1
 8008798:	d001      	beq.n	800879e <osMutexWait+0x62>
      return osErrorOS;
 800879a:	23ff      	movs	r3, #255	; 0xff
 800879c:	e015      	b.n	80087ca <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d011      	beq.n	80087c8 <osMutexWait+0x8c>
 80087a4:	4b0b      	ldr	r3, [pc, #44]	; (80087d4 <osMutexWait+0x98>)
 80087a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087aa:	601a      	str	r2, [r3, #0]
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	e008      	b.n	80087c8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80087b6:	68f9      	ldr	r1, [r7, #12]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 ff6f 	bl	800969c <xQueueSemaphoreTake>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d001      	beq.n	80087c8 <osMutexWait+0x8c>
    return osErrorOS;
 80087c4:	23ff      	movs	r3, #255	; 0xff
 80087c6:	e000      	b.n	80087ca <osMutexWait+0x8e>
  }
  
  return osOK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	e000ed04 	.word	0xe000ed04

080087d8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80087e4:	2300      	movs	r3, #0
 80087e6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80087e8:	f7ff ff1b 	bl	8008622 <inHandlerMode>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d016      	beq.n	8008820 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80087f2:	f107 0308 	add.w	r3, r7, #8
 80087f6:	4619      	mov	r1, r3
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 fddb 	bl	80093b4 <xQueueGiveFromISR>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b01      	cmp	r3, #1
 8008802:	d001      	beq.n	8008808 <osMutexRelease+0x30>
      return osErrorOS;
 8008804:	23ff      	movs	r3, #255	; 0xff
 8008806:	e017      	b.n	8008838 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d013      	beq.n	8008836 <osMutexRelease+0x5e>
 800880e:	4b0c      	ldr	r3, [pc, #48]	; (8008840 <osMutexRelease+0x68>)
 8008810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008814:	601a      	str	r2, [r3, #0]
 8008816:	f3bf 8f4f 	dsb	sy
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	e00a      	b.n	8008836 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8008820:	2300      	movs	r3, #0
 8008822:	2200      	movs	r2, #0
 8008824:	2100      	movs	r1, #0
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fc26 	bl	8009078 <xQueueGenericSend>
 800882c:	4603      	mov	r3, r0
 800882e:	2b01      	cmp	r3, #1
 8008830:	d001      	beq.n	8008836 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8008832:	23ff      	movs	r3, #255	; 0xff
 8008834:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8008836:	68fb      	ldr	r3, [r7, #12]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	e000ed04 	.word	0xe000ed04

08008844 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af02      	add	r7, sp, #8
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d010      	beq.n	8008878 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d10b      	bne.n	8008874 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685a      	ldr	r2, [r3, #4]
 8008860:	2303      	movs	r3, #3
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	4613      	mov	r3, r2
 8008866:	2200      	movs	r2, #0
 8008868:	2100      	movs	r1, #0
 800886a:	2001      	movs	r0, #1
 800886c:	f000 fada 	bl	8008e24 <xQueueGenericCreateStatic>
 8008870:	4603      	mov	r3, r0
 8008872:	e016      	b.n	80088a2 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008874:	2300      	movs	r3, #0
 8008876:	e014      	b.n	80088a2 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	2b01      	cmp	r3, #1
 800887c:	d110      	bne.n	80088a0 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800887e:	2203      	movs	r2, #3
 8008880:	2100      	movs	r1, #0
 8008882:	2001      	movs	r0, #1
 8008884:	f000 fb4b 	bl	8008f1e <xQueueGenericCreate>
 8008888:	60f8      	str	r0, [r7, #12]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d005      	beq.n	800889c <osSemaphoreCreate+0x58>
 8008890:	2300      	movs	r3, #0
 8008892:	2200      	movs	r2, #0
 8008894:	2100      	movs	r1, #0
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f000 fbee 	bl	8009078 <xQueueGenericSend>
      return sema;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	e000      	b.n	80088a2 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80088a0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
	...

080088ac <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80088b6:	2300      	movs	r3, #0
 80088b8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80088c0:	2380      	movs	r3, #128	; 0x80
 80088c2:	e03a      	b.n	800893a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80088c4:	2300      	movs	r3, #0
 80088c6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ce:	d103      	bne.n	80088d8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80088d0:	f04f 33ff 	mov.w	r3, #4294967295
 80088d4:	60fb      	str	r3, [r7, #12]
 80088d6:	e009      	b.n	80088ec <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d006      	beq.n	80088ec <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d101      	bne.n	80088ec <osSemaphoreWait+0x40>
      ticks = 1;
 80088e8:	2301      	movs	r3, #1
 80088ea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80088ec:	f7ff fe99 	bl	8008622 <inHandlerMode>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d017      	beq.n	8008926 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80088f6:	f107 0308 	add.w	r3, r7, #8
 80088fa:	461a      	mov	r2, r3
 80088fc:	2100      	movs	r1, #0
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 ffdc 	bl	80098bc <xQueueReceiveFromISR>
 8008904:	4603      	mov	r3, r0
 8008906:	2b01      	cmp	r3, #1
 8008908:	d001      	beq.n	800890e <osSemaphoreWait+0x62>
      return osErrorOS;
 800890a:	23ff      	movs	r3, #255	; 0xff
 800890c:	e015      	b.n	800893a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d011      	beq.n	8008938 <osSemaphoreWait+0x8c>
 8008914:	4b0b      	ldr	r3, [pc, #44]	; (8008944 <osSemaphoreWait+0x98>)
 8008916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	e008      	b.n	8008938 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008926:	68f9      	ldr	r1, [r7, #12]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 feb7 	bl	800969c <xQueueSemaphoreTake>
 800892e:	4603      	mov	r3, r0
 8008930:	2b01      	cmp	r3, #1
 8008932:	d001      	beq.n	8008938 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008934:	23ff      	movs	r3, #255	; 0xff
 8008936:	e000      	b.n	800893a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	e000ed04 	.word	0xe000ed04

08008948 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008950:	2300      	movs	r3, #0
 8008952:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008954:	2300      	movs	r3, #0
 8008956:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008958:	f7ff fe63 	bl	8008622 <inHandlerMode>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d016      	beq.n	8008990 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008962:	f107 0308 	add.w	r3, r7, #8
 8008966:	4619      	mov	r1, r3
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fd23 	bl	80093b4 <xQueueGiveFromISR>
 800896e:	4603      	mov	r3, r0
 8008970:	2b01      	cmp	r3, #1
 8008972:	d001      	beq.n	8008978 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008974:	23ff      	movs	r3, #255	; 0xff
 8008976:	e017      	b.n	80089a8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d013      	beq.n	80089a6 <osSemaphoreRelease+0x5e>
 800897e:	4b0c      	ldr	r3, [pc, #48]	; (80089b0 <osSemaphoreRelease+0x68>)
 8008980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008984:	601a      	str	r2, [r3, #0]
 8008986:	f3bf 8f4f 	dsb	sy
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	e00a      	b.n	80089a6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008990:	2300      	movs	r3, #0
 8008992:	2200      	movs	r2, #0
 8008994:	2100      	movs	r1, #0
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fb6e 	bl	8009078 <xQueueGenericSend>
 800899c:	4603      	mov	r3, r0
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d001      	beq.n	80089a6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80089a2:	23ff      	movs	r3, #255	; 0xff
 80089a4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80089a6:	68fb      	ldr	r3, [r7, #12]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	e000ed04 	.word	0xe000ed04

080089b4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80089bc:	f7ff fe31 	bl	8008622 <inHandlerMode>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d001      	beq.n	80089ca <osSemaphoreDelete+0x16>
    return osErrorISR;
 80089c6:	2382      	movs	r3, #130	; 0x82
 80089c8:	e003      	b.n	80089d2 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f001 f837 	bl	8009a3e <vQueueDelete>

  return osOK; 
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3708      	adds	r7, #8
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80089da:	b590      	push	{r4, r7, lr}
 80089dc:	b085      	sub	sp, #20
 80089de:	af02      	add	r7, sp, #8
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d012      	beq.n	8008a12 <osMessageCreate+0x38>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00e      	beq.n	8008a12 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6818      	ldr	r0, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6859      	ldr	r1, [r3, #4]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	689a      	ldr	r2, [r3, #8]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	68dc      	ldr	r4, [r3, #12]
 8008a04:	2300      	movs	r3, #0
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	4623      	mov	r3, r4
 8008a0a:	f000 fa0b 	bl	8008e24 <xQueueGenericCreateStatic>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	e008      	b.n	8008a24 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6818      	ldr	r0, [r3, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	f000 fa7e 	bl	8008f1e <xQueueGenericCreate>
 8008a22:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd90      	pop	{r4, r7, pc}

08008a2c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b086      	sub	sp, #24
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d101      	bne.n	8008a4a <osMessagePut+0x1e>
    ticks = 1;
 8008a46:	2301      	movs	r3, #1
 8008a48:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008a4a:	f7ff fdea 	bl	8008622 <inHandlerMode>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d018      	beq.n	8008a86 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008a54:	f107 0210 	add.w	r2, r7, #16
 8008a58:	f107 0108 	add.w	r1, r7, #8
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	68f8      	ldr	r0, [r7, #12]
 8008a60:	f000 fc0c 	bl	800927c <xQueueGenericSendFromISR>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d001      	beq.n	8008a6e <osMessagePut+0x42>
      return osErrorOS;
 8008a6a:	23ff      	movs	r3, #255	; 0xff
 8008a6c:	e018      	b.n	8008aa0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d014      	beq.n	8008a9e <osMessagePut+0x72>
 8008a74:	4b0c      	ldr	r3, [pc, #48]	; (8008aa8 <osMessagePut+0x7c>)
 8008a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a7a:	601a      	str	r2, [r3, #0]
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	e00b      	b.n	8008a9e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008a86:	f107 0108 	add.w	r1, r7, #8
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	697a      	ldr	r2, [r7, #20]
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f000 faf2 	bl	8009078 <xQueueGenericSend>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d001      	beq.n	8008a9e <osMessagePut+0x72>
      return osErrorOS;
 8008a9a:	23ff      	movs	r3, #255	; 0xff
 8008a9c:	e000      	b.n	8008aa0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3718      	adds	r7, #24
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	e000ed04 	.word	0xe000ed04

08008aac <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008aac:	b590      	push	{r4, r7, lr}
 8008aae:	b08b      	sub	sp, #44	; 0x2c
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008abc:	2300      	movs	r3, #0
 8008abe:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10a      	bne.n	8008adc <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008ac6:	2380      	movs	r3, #128	; 0x80
 8008ac8:	617b      	str	r3, [r7, #20]
    return event;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	461c      	mov	r4, r3
 8008ace:	f107 0314 	add.w	r3, r7, #20
 8008ad2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008ad6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008ada:	e054      	b.n	8008b86 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008adc:	2300      	movs	r3, #0
 8008ade:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aea:	d103      	bne.n	8008af4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008aec:	f04f 33ff 	mov.w	r3, #4294967295
 8008af0:	627b      	str	r3, [r7, #36]	; 0x24
 8008af2:	e009      	b.n	8008b08 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d006      	beq.n	8008b08 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d101      	bne.n	8008b08 <osMessageGet+0x5c>
      ticks = 1;
 8008b04:	2301      	movs	r3, #1
 8008b06:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008b08:	f7ff fd8b 	bl	8008622 <inHandlerMode>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d01c      	beq.n	8008b4c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008b12:	f107 0220 	add.w	r2, r7, #32
 8008b16:	f107 0314 	add.w	r3, r7, #20
 8008b1a:	3304      	adds	r3, #4
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	68b8      	ldr	r0, [r7, #8]
 8008b20:	f000 fecc 	bl	80098bc <xQueueReceiveFromISR>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d102      	bne.n	8008b30 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008b2a:	2310      	movs	r3, #16
 8008b2c:	617b      	str	r3, [r7, #20]
 8008b2e:	e001      	b.n	8008b34 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008b30:	2300      	movs	r3, #0
 8008b32:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008b34:	6a3b      	ldr	r3, [r7, #32]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d01d      	beq.n	8008b76 <osMessageGet+0xca>
 8008b3a:	4b15      	ldr	r3, [pc, #84]	; (8008b90 <osMessageGet+0xe4>)
 8008b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b40:	601a      	str	r2, [r3, #0]
 8008b42:	f3bf 8f4f 	dsb	sy
 8008b46:	f3bf 8f6f 	isb	sy
 8008b4a:	e014      	b.n	8008b76 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008b4c:	f107 0314 	add.w	r3, r7, #20
 8008b50:	3304      	adds	r3, #4
 8008b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b54:	4619      	mov	r1, r3
 8008b56:	68b8      	ldr	r0, [r7, #8]
 8008b58:	f000 fcbe 	bl	80094d8 <xQueueReceive>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d102      	bne.n	8008b68 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008b62:	2310      	movs	r3, #16
 8008b64:	617b      	str	r3, [r7, #20]
 8008b66:	e006      	b.n	8008b76 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <osMessageGet+0xc6>
 8008b6e:	2300      	movs	r3, #0
 8008b70:	e000      	b.n	8008b74 <osMessageGet+0xc8>
 8008b72:	2340      	movs	r3, #64	; 0x40
 8008b74:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	461c      	mov	r4, r3
 8008b7a:	f107 0314 	add.w	r3, r7, #20
 8008b7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	372c      	adds	r7, #44	; 0x2c
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd90      	pop	{r4, r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	e000ed04 	.word	0xe000ed04

08008b94 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008b9c:	f7ff fd41 	bl	8008622 <inHandlerMode>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d004      	beq.n	8008bb0 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 ff2a 	bl	8009a00 <uxQueueMessagesWaitingFromISR>
 8008bac:	4603      	mov	r3, r0
 8008bae:	e003      	b.n	8008bb8 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 ff06 	bl	80099c2 <uxQueueMessagesWaiting>
 8008bb6:	4603      	mov	r3, r0
  }
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008bc8:	f7ff fd2b 	bl	8008622 <inHandlerMode>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <osMessageDelete+0x16>
    return osErrorISR;
 8008bd2:	2382      	movs	r3, #130	; 0x82
 8008bd4:	e003      	b.n	8008bde <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 ff31 	bl	8009a3e <vQueueDelete>

  return osOK; 
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008be6:	b480      	push	{r7}
 8008be8:	b083      	sub	sp, #12
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f103 0208 	add.w	r2, r3, #8
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8008bfe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f103 0208 	add.w	r2, r3, #8
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f103 0208 	add.w	r2, r3, #8
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c1a:	bf00      	nop
 8008c1c:	370c      	adds	r7, #12
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c26:	b480      	push	{r7}
 8008c28:	b083      	sub	sp, #12
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	689a      	ldr	r2, [r3, #8]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	683a      	ldr	r2, [r7, #0]
 8008c6a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	1c5a      	adds	r2, r3, #1
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	601a      	str	r2, [r3, #0]
}
 8008c7c:	bf00      	nop
 8008c7e:	3714      	adds	r7, #20
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9e:	d103      	bne.n	8008ca8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	60fb      	str	r3, [r7, #12]
 8008ca6:	e00c      	b.n	8008cc2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	3308      	adds	r3, #8
 8008cac:	60fb      	str	r3, [r7, #12]
 8008cae:	e002      	b.n	8008cb6 <vListInsert+0x2e>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	60fb      	str	r3, [r7, #12]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d2f6      	bcs.n	8008cb0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	685a      	ldr	r2, [r3, #4]
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	683a      	ldr	r2, [r7, #0]
 8008cd0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	1c5a      	adds	r2, r3, #1
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	601a      	str	r2, [r3, #0]
}
 8008cee:	bf00      	nop
 8008cf0:	3714      	adds	r7, #20
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr

08008cfa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008cfa:	b480      	push	{r7}
 8008cfc:	b085      	sub	sp, #20
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	6892      	ldr	r2, [r2, #8]
 8008d10:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	6852      	ldr	r2, [r2, #4]
 8008d1a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d103      	bne.n	8008d2e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	689a      	ldr	r2, [r3, #8]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	1e5a      	subs	r2, r3, #1
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3714      	adds	r7, #20
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
	...

08008d50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10b      	bne.n	8008d7c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d68:	b672      	cpsid	i
 8008d6a:	f383 8811 	msr	BASEPRI, r3
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	b662      	cpsie	i
 8008d78:	60bb      	str	r3, [r7, #8]
 8008d7a:	e7fe      	b.n	8008d7a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8008d7c:	f002 f90c 	bl	800af98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d88:	68f9      	ldr	r1, [r7, #12]
 8008d8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d8c:	fb01 f303 	mul.w	r3, r1, r3
 8008d90:	441a      	add	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dac:	3b01      	subs	r3, #1
 8008dae:	68f9      	ldr	r1, [r7, #12]
 8008db0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008db2:	fb01 f303 	mul.w	r3, r1, r3
 8008db6:	441a      	add	r2, r3
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	22ff      	movs	r2, #255	; 0xff
 8008dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	22ff      	movs	r2, #255	; 0xff
 8008dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d114      	bne.n	8008dfc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d01a      	beq.n	8008e10 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3310      	adds	r3, #16
 8008dde:	4618      	mov	r0, r3
 8008de0:	f001 fbd6 	bl	800a590 <xTaskRemoveFromEventList>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d012      	beq.n	8008e10 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008dea:	4b0d      	ldr	r3, [pc, #52]	; (8008e20 <xQueueGenericReset+0xd0>)
 8008dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008df0:	601a      	str	r2, [r3, #0]
 8008df2:	f3bf 8f4f 	dsb	sy
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	e009      	b.n	8008e10 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	3310      	adds	r3, #16
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7ff fef0 	bl	8008be6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	3324      	adds	r3, #36	; 0x24
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7ff feeb 	bl	8008be6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e10:	f002 f8f4 	bl	800affc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e14:	2301      	movs	r3, #1
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	e000ed04 	.word	0xe000ed04

08008e24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b08e      	sub	sp, #56	; 0x38
 8008e28:	af02      	add	r7, sp, #8
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
 8008e30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10b      	bne.n	8008e50 <xQueueGenericCreateStatic+0x2c>
 8008e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3c:	b672      	cpsid	i
 8008e3e:	f383 8811 	msr	BASEPRI, r3
 8008e42:	f3bf 8f6f 	isb	sy
 8008e46:	f3bf 8f4f 	dsb	sy
 8008e4a:	b662      	cpsie	i
 8008e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e4e:	e7fe      	b.n	8008e4e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d10b      	bne.n	8008e6e <xQueueGenericCreateStatic+0x4a>
 8008e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5a:	b672      	cpsid	i
 8008e5c:	f383 8811 	msr	BASEPRI, r3
 8008e60:	f3bf 8f6f 	isb	sy
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	b662      	cpsie	i
 8008e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e6c:	e7fe      	b.n	8008e6c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d002      	beq.n	8008e7a <xQueueGenericCreateStatic+0x56>
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d001      	beq.n	8008e7e <xQueueGenericCreateStatic+0x5a>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e000      	b.n	8008e80 <xQueueGenericCreateStatic+0x5c>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d10b      	bne.n	8008e9c <xQueueGenericCreateStatic+0x78>
 8008e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e88:	b672      	cpsid	i
 8008e8a:	f383 8811 	msr	BASEPRI, r3
 8008e8e:	f3bf 8f6f 	isb	sy
 8008e92:	f3bf 8f4f 	dsb	sy
 8008e96:	b662      	cpsie	i
 8008e98:	623b      	str	r3, [r7, #32]
 8008e9a:	e7fe      	b.n	8008e9a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d102      	bne.n	8008ea8 <xQueueGenericCreateStatic+0x84>
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d101      	bne.n	8008eac <xQueueGenericCreateStatic+0x88>
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e000      	b.n	8008eae <xQueueGenericCreateStatic+0x8a>
 8008eac:	2300      	movs	r3, #0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10b      	bne.n	8008eca <xQueueGenericCreateStatic+0xa6>
 8008eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb6:	b672      	cpsid	i
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	b662      	cpsie	i
 8008ec6:	61fb      	str	r3, [r7, #28]
 8008ec8:	e7fe      	b.n	8008ec8 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008eca:	2348      	movs	r3, #72	; 0x48
 8008ecc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2b48      	cmp	r3, #72	; 0x48
 8008ed2:	d00b      	beq.n	8008eec <xQueueGenericCreateStatic+0xc8>
 8008ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed8:	b672      	cpsid	i
 8008eda:	f383 8811 	msr	BASEPRI, r3
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	f3bf 8f4f 	dsb	sy
 8008ee6:	b662      	cpsie	i
 8008ee8:	61bb      	str	r3, [r7, #24]
 8008eea:	e7fe      	b.n	8008eea <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008eec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00d      	beq.n	8008f14 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efa:	2201      	movs	r2, #1
 8008efc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f00:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	68b9      	ldr	r1, [r7, #8]
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f000 f846 	bl	8008fa0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3730      	adds	r7, #48	; 0x30
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b08a      	sub	sp, #40	; 0x28
 8008f22:	af02      	add	r7, sp, #8
 8008f24:	60f8      	str	r0, [r7, #12]
 8008f26:	60b9      	str	r1, [r7, #8]
 8008f28:	4613      	mov	r3, r2
 8008f2a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d10b      	bne.n	8008f4a <xQueueGenericCreate+0x2c>
 8008f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f36:	b672      	cpsid	i
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	b662      	cpsie	i
 8008f46:	613b      	str	r3, [r7, #16]
 8008f48:	e7fe      	b.n	8008f48 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d102      	bne.n	8008f56 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008f50:	2300      	movs	r3, #0
 8008f52:	61fb      	str	r3, [r7, #28]
 8008f54:	e004      	b.n	8008f60 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	68ba      	ldr	r2, [r7, #8]
 8008f5a:	fb02 f303 	mul.w	r3, r2, r3
 8008f5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	3348      	adds	r3, #72	; 0x48
 8008f64:	4618      	mov	r0, r3
 8008f66:	f002 f939 	bl	800b1dc <pvPortMalloc>
 8008f6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d011      	beq.n	8008f96 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	3348      	adds	r3, #72	; 0x48
 8008f7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f84:	79fa      	ldrb	r2, [r7, #7]
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	68b9      	ldr	r1, [r7, #8]
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f000 f805 	bl	8008fa0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f96:	69bb      	ldr	r3, [r7, #24]
	}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3720      	adds	r7, #32
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
 8008fac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d103      	bne.n	8008fbc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	69ba      	ldr	r2, [r7, #24]
 8008fb8:	601a      	str	r2, [r3, #0]
 8008fba:	e002      	b.n	8008fc2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008fce:	2101      	movs	r1, #1
 8008fd0:	69b8      	ldr	r0, [r7, #24]
 8008fd2:	f7ff febd 	bl	8008d50 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008fd6:	bf00      	nop
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b082      	sub	sp, #8
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00e      	beq.n	800900a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008ffe:	2300      	movs	r3, #0
 8009000:	2200      	movs	r2, #0
 8009002:	2100      	movs	r1, #0
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f837 	bl	8009078 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800900a:	bf00      	nop
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009012:	b580      	push	{r7, lr}
 8009014:	b086      	sub	sp, #24
 8009016:	af00      	add	r7, sp, #0
 8009018:	4603      	mov	r3, r0
 800901a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800901c:	2301      	movs	r3, #1
 800901e:	617b      	str	r3, [r7, #20]
 8009020:	2300      	movs	r3, #0
 8009022:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009024:	79fb      	ldrb	r3, [r7, #7]
 8009026:	461a      	mov	r2, r3
 8009028:	6939      	ldr	r1, [r7, #16]
 800902a:	6978      	ldr	r0, [r7, #20]
 800902c:	f7ff ff77 	bl	8008f1e <xQueueGenericCreate>
 8009030:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f7ff ffd3 	bl	8008fde <prvInitialiseMutex>

		return xNewQueue;
 8009038:	68fb      	ldr	r3, [r7, #12]
	}
 800903a:	4618      	mov	r0, r3
 800903c:	3718      	adds	r7, #24
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009042:	b580      	push	{r7, lr}
 8009044:	b088      	sub	sp, #32
 8009046:	af02      	add	r7, sp, #8
 8009048:	4603      	mov	r3, r0
 800904a:	6039      	str	r1, [r7, #0]
 800904c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800904e:	2301      	movs	r3, #1
 8009050:	617b      	str	r3, [r7, #20]
 8009052:	2300      	movs	r3, #0
 8009054:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009056:	79fb      	ldrb	r3, [r7, #7]
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	2200      	movs	r2, #0
 800905e:	6939      	ldr	r1, [r7, #16]
 8009060:	6978      	ldr	r0, [r7, #20]
 8009062:	f7ff fedf 	bl	8008e24 <xQueueGenericCreateStatic>
 8009066:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f7ff ffb8 	bl	8008fde <prvInitialiseMutex>

		return xNewQueue;
 800906e:	68fb      	ldr	r3, [r7, #12]
	}
 8009070:	4618      	mov	r0, r3
 8009072:	3718      	adds	r7, #24
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b08e      	sub	sp, #56	; 0x38
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
 8009084:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009086:	2300      	movs	r3, #0
 8009088:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800908e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009090:	2b00      	cmp	r3, #0
 8009092:	d10b      	bne.n	80090ac <xQueueGenericSend+0x34>
 8009094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009098:	b672      	cpsid	i
 800909a:	f383 8811 	msr	BASEPRI, r3
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f3bf 8f4f 	dsb	sy
 80090a6:	b662      	cpsie	i
 80090a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80090aa:	e7fe      	b.n	80090aa <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d103      	bne.n	80090ba <xQueueGenericSend+0x42>
 80090b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d101      	bne.n	80090be <xQueueGenericSend+0x46>
 80090ba:	2301      	movs	r3, #1
 80090bc:	e000      	b.n	80090c0 <xQueueGenericSend+0x48>
 80090be:	2300      	movs	r3, #0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d10b      	bne.n	80090dc <xQueueGenericSend+0x64>
 80090c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c8:	b672      	cpsid	i
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	b662      	cpsie	i
 80090d8:	627b      	str	r3, [r7, #36]	; 0x24
 80090da:	e7fe      	b.n	80090da <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d103      	bne.n	80090ea <xQueueGenericSend+0x72>
 80090e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d101      	bne.n	80090ee <xQueueGenericSend+0x76>
 80090ea:	2301      	movs	r3, #1
 80090ec:	e000      	b.n	80090f0 <xQueueGenericSend+0x78>
 80090ee:	2300      	movs	r3, #0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10b      	bne.n	800910c <xQueueGenericSend+0x94>
 80090f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f8:	b672      	cpsid	i
 80090fa:	f383 8811 	msr	BASEPRI, r3
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	b662      	cpsie	i
 8009108:	623b      	str	r3, [r7, #32]
 800910a:	e7fe      	b.n	800910a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800910c:	f001 fbfe 	bl	800a90c <xTaskGetSchedulerState>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d102      	bne.n	800911c <xQueueGenericSend+0xa4>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d101      	bne.n	8009120 <xQueueGenericSend+0xa8>
 800911c:	2301      	movs	r3, #1
 800911e:	e000      	b.n	8009122 <xQueueGenericSend+0xaa>
 8009120:	2300      	movs	r3, #0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d10b      	bne.n	800913e <xQueueGenericSend+0xc6>
 8009126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912a:	b672      	cpsid	i
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	b662      	cpsie	i
 800913a:	61fb      	str	r3, [r7, #28]
 800913c:	e7fe      	b.n	800913c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800913e:	f001 ff2b 	bl	800af98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800914a:	429a      	cmp	r2, r3
 800914c:	d302      	bcc.n	8009154 <xQueueGenericSend+0xdc>
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	2b02      	cmp	r3, #2
 8009152:	d129      	bne.n	80091a8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009154:	683a      	ldr	r2, [r7, #0]
 8009156:	68b9      	ldr	r1, [r7, #8]
 8009158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800915a:	f000 fcac 	bl	8009ab6 <prvCopyDataToQueue>
 800915e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009164:	2b00      	cmp	r3, #0
 8009166:	d010      	beq.n	800918a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916a:	3324      	adds	r3, #36	; 0x24
 800916c:	4618      	mov	r0, r3
 800916e:	f001 fa0f 	bl	800a590 <xTaskRemoveFromEventList>
 8009172:	4603      	mov	r3, r0
 8009174:	2b00      	cmp	r3, #0
 8009176:	d013      	beq.n	80091a0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009178:	4b3f      	ldr	r3, [pc, #252]	; (8009278 <xQueueGenericSend+0x200>)
 800917a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800917e:	601a      	str	r2, [r3, #0]
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	e00a      	b.n	80091a0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800918a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918c:	2b00      	cmp	r3, #0
 800918e:	d007      	beq.n	80091a0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009190:	4b39      	ldr	r3, [pc, #228]	; (8009278 <xQueueGenericSend+0x200>)
 8009192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009196:	601a      	str	r2, [r3, #0]
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80091a0:	f001 ff2c 	bl	800affc <vPortExitCritical>
				return pdPASS;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e063      	b.n	8009270 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d103      	bne.n	80091b6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091ae:	f001 ff25 	bl	800affc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80091b2:	2300      	movs	r3, #0
 80091b4:	e05c      	b.n	8009270 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d106      	bne.n	80091ca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091bc:	f107 0314 	add.w	r3, r7, #20
 80091c0:	4618      	mov	r0, r3
 80091c2:	f001 fa49 	bl	800a658 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091c6:	2301      	movs	r3, #1
 80091c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091ca:	f001 ff17 	bl	800affc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091ce:	f000 ffaf 	bl	800a130 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091d2:	f001 fee1 	bl	800af98 <vPortEnterCritical>
 80091d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091dc:	b25b      	sxtb	r3, r3
 80091de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e2:	d103      	bne.n	80091ec <xQueueGenericSend+0x174>
 80091e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091f2:	b25b      	sxtb	r3, r3
 80091f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f8:	d103      	bne.n	8009202 <xQueueGenericSend+0x18a>
 80091fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009202:	f001 fefb 	bl	800affc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009206:	1d3a      	adds	r2, r7, #4
 8009208:	f107 0314 	add.w	r3, r7, #20
 800920c:	4611      	mov	r1, r2
 800920e:	4618      	mov	r0, r3
 8009210:	f001 fa38 	bl	800a684 <xTaskCheckForTimeOut>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d124      	bne.n	8009264 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800921a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800921c:	f000 fd43 	bl	8009ca6 <prvIsQueueFull>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d018      	beq.n	8009258 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009228:	3310      	adds	r3, #16
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	4611      	mov	r1, r2
 800922e:	4618      	mov	r0, r3
 8009230:	f001 f988 	bl	800a544 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009236:	f000 fcce 	bl	8009bd6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800923a:	f000 ff87 	bl	800a14c <xTaskResumeAll>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	f47f af7c 	bne.w	800913e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009246:	4b0c      	ldr	r3, [pc, #48]	; (8009278 <xQueueGenericSend+0x200>)
 8009248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800924c:	601a      	str	r2, [r3, #0]
 800924e:	f3bf 8f4f 	dsb	sy
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	e772      	b.n	800913e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800925a:	f000 fcbc 	bl	8009bd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800925e:	f000 ff75 	bl	800a14c <xTaskResumeAll>
 8009262:	e76c      	b.n	800913e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009266:	f000 fcb6 	bl	8009bd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800926a:	f000 ff6f 	bl	800a14c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800926e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009270:	4618      	mov	r0, r3
 8009272:	3738      	adds	r7, #56	; 0x38
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	e000ed04 	.word	0xe000ed04

0800927c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b08e      	sub	sp, #56	; 0x38
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
 8009288:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800928e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10b      	bne.n	80092ac <xQueueGenericSendFromISR+0x30>
 8009294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009298:	b672      	cpsid	i
 800929a:	f383 8811 	msr	BASEPRI, r3
 800929e:	f3bf 8f6f 	isb	sy
 80092a2:	f3bf 8f4f 	dsb	sy
 80092a6:	b662      	cpsie	i
 80092a8:	627b      	str	r3, [r7, #36]	; 0x24
 80092aa:	e7fe      	b.n	80092aa <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d103      	bne.n	80092ba <xQueueGenericSendFromISR+0x3e>
 80092b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d101      	bne.n	80092be <xQueueGenericSendFromISR+0x42>
 80092ba:	2301      	movs	r3, #1
 80092bc:	e000      	b.n	80092c0 <xQueueGenericSendFromISR+0x44>
 80092be:	2300      	movs	r3, #0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d10b      	bne.n	80092dc <xQueueGenericSendFromISR+0x60>
 80092c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c8:	b672      	cpsid	i
 80092ca:	f383 8811 	msr	BASEPRI, r3
 80092ce:	f3bf 8f6f 	isb	sy
 80092d2:	f3bf 8f4f 	dsb	sy
 80092d6:	b662      	cpsie	i
 80092d8:	623b      	str	r3, [r7, #32]
 80092da:	e7fe      	b.n	80092da <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d103      	bne.n	80092ea <xQueueGenericSendFromISR+0x6e>
 80092e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d101      	bne.n	80092ee <xQueueGenericSendFromISR+0x72>
 80092ea:	2301      	movs	r3, #1
 80092ec:	e000      	b.n	80092f0 <xQueueGenericSendFromISR+0x74>
 80092ee:	2300      	movs	r3, #0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d10b      	bne.n	800930c <xQueueGenericSendFromISR+0x90>
 80092f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f8:	b672      	cpsid	i
 80092fa:	f383 8811 	msr	BASEPRI, r3
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	b662      	cpsie	i
 8009308:	61fb      	str	r3, [r7, #28]
 800930a:	e7fe      	b.n	800930a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800930c:	f001 ff24 	bl	800b158 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009310:	f3ef 8211 	mrs	r2, BASEPRI
 8009314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009318:	b672      	cpsid	i
 800931a:	f383 8811 	msr	BASEPRI, r3
 800931e:	f3bf 8f6f 	isb	sy
 8009322:	f3bf 8f4f 	dsb	sy
 8009326:	b662      	cpsie	i
 8009328:	61ba      	str	r2, [r7, #24]
 800932a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800932c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800932e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009338:	429a      	cmp	r2, r3
 800933a:	d302      	bcc.n	8009342 <xQueueGenericSendFromISR+0xc6>
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	2b02      	cmp	r3, #2
 8009340:	d12c      	bne.n	800939c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009344:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009348:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	68b9      	ldr	r1, [r7, #8]
 8009350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009352:	f000 fbb0 	bl	8009ab6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009356:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800935a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800935e:	d112      	bne.n	8009386 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009364:	2b00      	cmp	r3, #0
 8009366:	d016      	beq.n	8009396 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936a:	3324      	adds	r3, #36	; 0x24
 800936c:	4618      	mov	r0, r3
 800936e:	f001 f90f 	bl	800a590 <xTaskRemoveFromEventList>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00e      	beq.n	8009396 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00b      	beq.n	8009396 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2201      	movs	r2, #1
 8009382:	601a      	str	r2, [r3, #0]
 8009384:	e007      	b.n	8009396 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009386:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800938a:	3301      	adds	r3, #1
 800938c:	b2db      	uxtb	r3, r3
 800938e:	b25a      	sxtb	r2, r3
 8009390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009396:	2301      	movs	r3, #1
 8009398:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800939a:	e001      	b.n	80093a0 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800939c:	2300      	movs	r3, #0
 800939e:	637b      	str	r3, [r7, #52]	; 0x34
 80093a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80093aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3738      	adds	r7, #56	; 0x38
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b08e      	sub	sp, #56	; 0x38
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80093c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10b      	bne.n	80093e0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80093c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093cc:	b672      	cpsid	i
 80093ce:	f383 8811 	msr	BASEPRI, r3
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	f3bf 8f4f 	dsb	sy
 80093da:	b662      	cpsie	i
 80093dc:	623b      	str	r3, [r7, #32]
 80093de:	e7fe      	b.n	80093de <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80093e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00b      	beq.n	8009400 <xQueueGiveFromISR+0x4c>
 80093e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ec:	b672      	cpsid	i
 80093ee:	f383 8811 	msr	BASEPRI, r3
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	f3bf 8f4f 	dsb	sy
 80093fa:	b662      	cpsie	i
 80093fc:	61fb      	str	r3, [r7, #28]
 80093fe:	e7fe      	b.n	80093fe <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d103      	bne.n	8009410 <xQueueGiveFromISR+0x5c>
 8009408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d101      	bne.n	8009414 <xQueueGiveFromISR+0x60>
 8009410:	2301      	movs	r3, #1
 8009412:	e000      	b.n	8009416 <xQueueGiveFromISR+0x62>
 8009414:	2300      	movs	r3, #0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10b      	bne.n	8009432 <xQueueGiveFromISR+0x7e>
 800941a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941e:	b672      	cpsid	i
 8009420:	f383 8811 	msr	BASEPRI, r3
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	b662      	cpsie	i
 800942e:	61bb      	str	r3, [r7, #24]
 8009430:	e7fe      	b.n	8009430 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009432:	f001 fe91 	bl	800b158 <vPortValidateInterruptPriority>
	__asm volatile
 8009436:	f3ef 8211 	mrs	r2, BASEPRI
 800943a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943e:	b672      	cpsid	i
 8009440:	f383 8811 	msr	BASEPRI, r3
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	b662      	cpsie	i
 800944e:	617a      	str	r2, [r7, #20]
 8009450:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009452:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009454:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800945c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009462:	429a      	cmp	r2, r3
 8009464:	d22b      	bcs.n	80094be <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800946c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009472:	1c5a      	adds	r2, r3, #1
 8009474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009476:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009478:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800947c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009480:	d112      	bne.n	80094a8 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009486:	2b00      	cmp	r3, #0
 8009488:	d016      	beq.n	80094b8 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800948a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948c:	3324      	adds	r3, #36	; 0x24
 800948e:	4618      	mov	r0, r3
 8009490:	f001 f87e 	bl	800a590 <xTaskRemoveFromEventList>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00e      	beq.n	80094b8 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00b      	beq.n	80094b8 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	2201      	movs	r2, #1
 80094a4:	601a      	str	r2, [r3, #0]
 80094a6:	e007      	b.n	80094b8 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80094a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094ac:	3301      	adds	r3, #1
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	b25a      	sxtb	r2, r3
 80094b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80094b8:	2301      	movs	r3, #1
 80094ba:	637b      	str	r3, [r7, #52]	; 0x34
 80094bc:	e001      	b.n	80094c2 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80094be:	2300      	movs	r3, #0
 80094c0:	637b      	str	r3, [r7, #52]	; 0x34
 80094c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80094cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3738      	adds	r7, #56	; 0x38
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
	...

080094d8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b08c      	sub	sp, #48	; 0x30
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80094e4:	2300      	movs	r3, #0
 80094e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80094ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d10b      	bne.n	800950a <xQueueReceive+0x32>
	__asm volatile
 80094f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f6:	b672      	cpsid	i
 80094f8:	f383 8811 	msr	BASEPRI, r3
 80094fc:	f3bf 8f6f 	isb	sy
 8009500:	f3bf 8f4f 	dsb	sy
 8009504:	b662      	cpsie	i
 8009506:	623b      	str	r3, [r7, #32]
 8009508:	e7fe      	b.n	8009508 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d103      	bne.n	8009518 <xQueueReceive+0x40>
 8009510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009514:	2b00      	cmp	r3, #0
 8009516:	d101      	bne.n	800951c <xQueueReceive+0x44>
 8009518:	2301      	movs	r3, #1
 800951a:	e000      	b.n	800951e <xQueueReceive+0x46>
 800951c:	2300      	movs	r3, #0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d10b      	bne.n	800953a <xQueueReceive+0x62>
 8009522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009526:	b672      	cpsid	i
 8009528:	f383 8811 	msr	BASEPRI, r3
 800952c:	f3bf 8f6f 	isb	sy
 8009530:	f3bf 8f4f 	dsb	sy
 8009534:	b662      	cpsie	i
 8009536:	61fb      	str	r3, [r7, #28]
 8009538:	e7fe      	b.n	8009538 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800953a:	f001 f9e7 	bl	800a90c <xTaskGetSchedulerState>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d102      	bne.n	800954a <xQueueReceive+0x72>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d101      	bne.n	800954e <xQueueReceive+0x76>
 800954a:	2301      	movs	r3, #1
 800954c:	e000      	b.n	8009550 <xQueueReceive+0x78>
 800954e:	2300      	movs	r3, #0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10b      	bne.n	800956c <xQueueReceive+0x94>
 8009554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009558:	b672      	cpsid	i
 800955a:	f383 8811 	msr	BASEPRI, r3
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	b662      	cpsie	i
 8009568:	61bb      	str	r3, [r7, #24]
 800956a:	e7fe      	b.n	800956a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800956c:	f001 fd14 	bl	800af98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009574:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009578:	2b00      	cmp	r3, #0
 800957a:	d01f      	beq.n	80095bc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800957c:	68b9      	ldr	r1, [r7, #8]
 800957e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009580:	f000 fb03 	bl	8009b8a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009586:	1e5a      	subs	r2, r3, #1
 8009588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800958c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958e:	691b      	ldr	r3, [r3, #16]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00f      	beq.n	80095b4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	3310      	adds	r3, #16
 8009598:	4618      	mov	r0, r3
 800959a:	f000 fff9 	bl	800a590 <xTaskRemoveFromEventList>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d007      	beq.n	80095b4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80095a4:	4b3c      	ldr	r3, [pc, #240]	; (8009698 <xQueueReceive+0x1c0>)
 80095a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095aa:	601a      	str	r2, [r3, #0]
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80095b4:	f001 fd22 	bl	800affc <vPortExitCritical>
				return pdPASS;
 80095b8:	2301      	movs	r3, #1
 80095ba:	e069      	b.n	8009690 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d103      	bne.n	80095ca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095c2:	f001 fd1b 	bl	800affc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80095c6:	2300      	movs	r3, #0
 80095c8:	e062      	b.n	8009690 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d106      	bne.n	80095de <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095d0:	f107 0310 	add.w	r3, r7, #16
 80095d4:	4618      	mov	r0, r3
 80095d6:	f001 f83f 	bl	800a658 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095da:	2301      	movs	r3, #1
 80095dc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095de:	f001 fd0d 	bl	800affc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095e2:	f000 fda5 	bl	800a130 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095e6:	f001 fcd7 	bl	800af98 <vPortEnterCritical>
 80095ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095f0:	b25b      	sxtb	r3, r3
 80095f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f6:	d103      	bne.n	8009600 <xQueueReceive+0x128>
 80095f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009602:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009606:	b25b      	sxtb	r3, r3
 8009608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800960c:	d103      	bne.n	8009616 <xQueueReceive+0x13e>
 800960e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009610:	2200      	movs	r2, #0
 8009612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009616:	f001 fcf1 	bl	800affc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800961a:	1d3a      	adds	r2, r7, #4
 800961c:	f107 0310 	add.w	r3, r7, #16
 8009620:	4611      	mov	r1, r2
 8009622:	4618      	mov	r0, r3
 8009624:	f001 f82e 	bl	800a684 <xTaskCheckForTimeOut>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d123      	bne.n	8009676 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800962e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009630:	f000 fb23 	bl	8009c7a <prvIsQueueEmpty>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d017      	beq.n	800966a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800963a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963c:	3324      	adds	r3, #36	; 0x24
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	4611      	mov	r1, r2
 8009642:	4618      	mov	r0, r3
 8009644:	f000 ff7e 	bl	800a544 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800964a:	f000 fac4 	bl	8009bd6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800964e:	f000 fd7d 	bl	800a14c <xTaskResumeAll>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d189      	bne.n	800956c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009658:	4b0f      	ldr	r3, [pc, #60]	; (8009698 <xQueueReceive+0x1c0>)
 800965a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800965e:	601a      	str	r2, [r3, #0]
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	e780      	b.n	800956c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800966a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800966c:	f000 fab3 	bl	8009bd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009670:	f000 fd6c 	bl	800a14c <xTaskResumeAll>
 8009674:	e77a      	b.n	800956c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009676:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009678:	f000 faad 	bl	8009bd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800967c:	f000 fd66 	bl	800a14c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009682:	f000 fafa 	bl	8009c7a <prvIsQueueEmpty>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	f43f af6f 	beq.w	800956c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800968e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009690:	4618      	mov	r0, r3
 8009692:	3730      	adds	r7, #48	; 0x30
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	e000ed04 	.word	0xe000ed04

0800969c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b08e      	sub	sp, #56	; 0x38
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80096a6:	2300      	movs	r3, #0
 80096a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80096ae:	2300      	movs	r3, #0
 80096b0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80096b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d10b      	bne.n	80096d0 <xQueueSemaphoreTake+0x34>
 80096b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096bc:	b672      	cpsid	i
 80096be:	f383 8811 	msr	BASEPRI, r3
 80096c2:	f3bf 8f6f 	isb	sy
 80096c6:	f3bf 8f4f 	dsb	sy
 80096ca:	b662      	cpsie	i
 80096cc:	623b      	str	r3, [r7, #32]
 80096ce:	e7fe      	b.n	80096ce <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80096d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00b      	beq.n	80096f0 <xQueueSemaphoreTake+0x54>
 80096d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096dc:	b672      	cpsid	i
 80096de:	f383 8811 	msr	BASEPRI, r3
 80096e2:	f3bf 8f6f 	isb	sy
 80096e6:	f3bf 8f4f 	dsb	sy
 80096ea:	b662      	cpsie	i
 80096ec:	61fb      	str	r3, [r7, #28]
 80096ee:	e7fe      	b.n	80096ee <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80096f0:	f001 f90c 	bl	800a90c <xTaskGetSchedulerState>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d102      	bne.n	8009700 <xQueueSemaphoreTake+0x64>
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <xQueueSemaphoreTake+0x68>
 8009700:	2301      	movs	r3, #1
 8009702:	e000      	b.n	8009706 <xQueueSemaphoreTake+0x6a>
 8009704:	2300      	movs	r3, #0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10b      	bne.n	8009722 <xQueueSemaphoreTake+0x86>
 800970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970e:	b672      	cpsid	i
 8009710:	f383 8811 	msr	BASEPRI, r3
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	b662      	cpsie	i
 800971e:	61bb      	str	r3, [r7, #24]
 8009720:	e7fe      	b.n	8009720 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009722:	f001 fc39 	bl	800af98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800972c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972e:	2b00      	cmp	r3, #0
 8009730:	d024      	beq.n	800977c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009734:	1e5a      	subs	r2, r3, #1
 8009736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009738:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800973a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d104      	bne.n	800974c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009742:	f001 faa5 	bl	800ac90 <pvTaskIncrementMutexHeldCount>
 8009746:	4602      	mov	r2, r0
 8009748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800974c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00f      	beq.n	8009774 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009756:	3310      	adds	r3, #16
 8009758:	4618      	mov	r0, r3
 800975a:	f000 ff19 	bl	800a590 <xTaskRemoveFromEventList>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d007      	beq.n	8009774 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009764:	4b54      	ldr	r3, [pc, #336]	; (80098b8 <xQueueSemaphoreTake+0x21c>)
 8009766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800976a:	601a      	str	r2, [r3, #0]
 800976c:	f3bf 8f4f 	dsb	sy
 8009770:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009774:	f001 fc42 	bl	800affc <vPortExitCritical>
				return pdPASS;
 8009778:	2301      	movs	r3, #1
 800977a:	e098      	b.n	80098ae <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d112      	bne.n	80097a8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00b      	beq.n	80097a0 <xQueueSemaphoreTake+0x104>
 8009788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978c:	b672      	cpsid	i
 800978e:	f383 8811 	msr	BASEPRI, r3
 8009792:	f3bf 8f6f 	isb	sy
 8009796:	f3bf 8f4f 	dsb	sy
 800979a:	b662      	cpsie	i
 800979c:	617b      	str	r3, [r7, #20]
 800979e:	e7fe      	b.n	800979e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80097a0:	f001 fc2c 	bl	800affc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80097a4:	2300      	movs	r3, #0
 80097a6:	e082      	b.n	80098ae <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d106      	bne.n	80097bc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097ae:	f107 030c 	add.w	r3, r7, #12
 80097b2:	4618      	mov	r0, r3
 80097b4:	f000 ff50 	bl	800a658 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097b8:	2301      	movs	r3, #1
 80097ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097bc:	f001 fc1e 	bl	800affc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097c0:	f000 fcb6 	bl	800a130 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097c4:	f001 fbe8 	bl	800af98 <vPortEnterCritical>
 80097c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097ce:	b25b      	sxtb	r3, r3
 80097d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d4:	d103      	bne.n	80097de <xQueueSemaphoreTake+0x142>
 80097d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d8:	2200      	movs	r2, #0
 80097da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097e4:	b25b      	sxtb	r3, r3
 80097e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ea:	d103      	bne.n	80097f4 <xQueueSemaphoreTake+0x158>
 80097ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ee:	2200      	movs	r2, #0
 80097f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097f4:	f001 fc02 	bl	800affc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097f8:	463a      	mov	r2, r7
 80097fa:	f107 030c 	add.w	r3, r7, #12
 80097fe:	4611      	mov	r1, r2
 8009800:	4618      	mov	r0, r3
 8009802:	f000 ff3f 	bl	800a684 <xTaskCheckForTimeOut>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d132      	bne.n	8009872 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800980c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800980e:	f000 fa34 	bl	8009c7a <prvIsQueueEmpty>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d026      	beq.n	8009866 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d109      	bne.n	8009834 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009820:	f001 fbba 	bl	800af98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	4618      	mov	r0, r3
 800982a:	f001 f88d 	bl	800a948 <xTaskPriorityInherit>
 800982e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009830:	f001 fbe4 	bl	800affc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009836:	3324      	adds	r3, #36	; 0x24
 8009838:	683a      	ldr	r2, [r7, #0]
 800983a:	4611      	mov	r1, r2
 800983c:	4618      	mov	r0, r3
 800983e:	f000 fe81 	bl	800a544 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009842:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009844:	f000 f9c7 	bl	8009bd6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009848:	f000 fc80 	bl	800a14c <xTaskResumeAll>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	f47f af67 	bne.w	8009722 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009854:	4b18      	ldr	r3, [pc, #96]	; (80098b8 <xQueueSemaphoreTake+0x21c>)
 8009856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800985a:	601a      	str	r2, [r3, #0]
 800985c:	f3bf 8f4f 	dsb	sy
 8009860:	f3bf 8f6f 	isb	sy
 8009864:	e75d      	b.n	8009722 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009866:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009868:	f000 f9b5 	bl	8009bd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800986c:	f000 fc6e 	bl	800a14c <xTaskResumeAll>
 8009870:	e757      	b.n	8009722 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009872:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009874:	f000 f9af 	bl	8009bd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009878:	f000 fc68 	bl	800a14c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800987c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800987e:	f000 f9fc 	bl	8009c7a <prvIsQueueEmpty>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	f43f af4c 	beq.w	8009722 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800988a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00d      	beq.n	80098ac <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009890:	f001 fb82 	bl	800af98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009894:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009896:	f000 f8f6 	bl	8009a86 <prvGetDisinheritPriorityAfterTimeout>
 800989a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800989c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098a2:	4618      	mov	r0, r3
 80098a4:	f001 f958 	bl	800ab58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80098a8:	f001 fba8 	bl	800affc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80098ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3738      	adds	r7, #56	; 0x38
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	e000ed04 	.word	0xe000ed04

080098bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b08e      	sub	sp, #56	; 0x38
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80098cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d10b      	bne.n	80098ea <xQueueReceiveFromISR+0x2e>
 80098d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d6:	b672      	cpsid	i
 80098d8:	f383 8811 	msr	BASEPRI, r3
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	b662      	cpsie	i
 80098e6:	623b      	str	r3, [r7, #32]
 80098e8:	e7fe      	b.n	80098e8 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d103      	bne.n	80098f8 <xQueueReceiveFromISR+0x3c>
 80098f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d101      	bne.n	80098fc <xQueueReceiveFromISR+0x40>
 80098f8:	2301      	movs	r3, #1
 80098fa:	e000      	b.n	80098fe <xQueueReceiveFromISR+0x42>
 80098fc:	2300      	movs	r3, #0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10b      	bne.n	800991a <xQueueReceiveFromISR+0x5e>
 8009902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009906:	b672      	cpsid	i
 8009908:	f383 8811 	msr	BASEPRI, r3
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	b662      	cpsie	i
 8009916:	61fb      	str	r3, [r7, #28]
 8009918:	e7fe      	b.n	8009918 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800991a:	f001 fc1d 	bl	800b158 <vPortValidateInterruptPriority>
	__asm volatile
 800991e:	f3ef 8211 	mrs	r2, BASEPRI
 8009922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009926:	b672      	cpsid	i
 8009928:	f383 8811 	msr	BASEPRI, r3
 800992c:	f3bf 8f6f 	isb	sy
 8009930:	f3bf 8f4f 	dsb	sy
 8009934:	b662      	cpsie	i
 8009936:	61ba      	str	r2, [r7, #24]
 8009938:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800993a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800993c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800993e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009942:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009946:	2b00      	cmp	r3, #0
 8009948:	d02f      	beq.n	80099aa <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800994a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009954:	68b9      	ldr	r1, [r7, #8]
 8009956:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009958:	f000 f917 	bl	8009b8a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800995c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995e:	1e5a      	subs	r2, r3, #1
 8009960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009962:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009964:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800996c:	d112      	bne.n	8009994 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800996e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009970:	691b      	ldr	r3, [r3, #16]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d016      	beq.n	80099a4 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009978:	3310      	adds	r3, #16
 800997a:	4618      	mov	r0, r3
 800997c:	f000 fe08 	bl	800a590 <xTaskRemoveFromEventList>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00e      	beq.n	80099a4 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00b      	beq.n	80099a4 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	601a      	str	r2, [r3, #0]
 8009992:	e007      	b.n	80099a4 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009998:	3301      	adds	r3, #1
 800999a:	b2db      	uxtb	r3, r3
 800999c:	b25a      	sxtb	r2, r3
 800999e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80099a4:	2301      	movs	r3, #1
 80099a6:	637b      	str	r3, [r7, #52]	; 0x34
 80099a8:	e001      	b.n	80099ae <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 80099aa:	2300      	movs	r3, #0
 80099ac:	637b      	str	r3, [r7, #52]	; 0x34
 80099ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3738      	adds	r7, #56	; 0x38
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b084      	sub	sp, #16
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d10b      	bne.n	80099e8 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 80099d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d4:	b672      	cpsid	i
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	b662      	cpsie	i
 80099e4:	60bb      	str	r3, [r7, #8]
 80099e6:	e7fe      	b.n	80099e6 <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 80099e8:	f001 fad6 	bl	800af98 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80099f2:	f001 fb03 	bl	800affc <vPortExitCritical>

	return uxReturn;
 80099f6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80099f8:	4618      	mov	r0, r3
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8009a00:	b480      	push	{r7}
 8009a02:	b087      	sub	sp, #28
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10b      	bne.n	8009a2a <uxQueueMessagesWaitingFromISR+0x2a>
 8009a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a16:	b672      	cpsid	i
 8009a18:	f383 8811 	msr	BASEPRI, r3
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	b662      	cpsie	i
 8009a26:	60fb      	str	r3, [r7, #12]
 8009a28:	e7fe      	b.n	8009a28 <uxQueueMessagesWaitingFromISR+0x28>
	uxReturn = pxQueue->uxMessagesWaiting;
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a2e:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8009a30:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009a32:	4618      	mov	r0, r3
 8009a34:	371c      	adds	r7, #28
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr

08009a3e <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b084      	sub	sp, #16
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d10b      	bne.n	8009a68 <vQueueDelete+0x2a>
 8009a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a54:	b672      	cpsid	i
 8009a56:	f383 8811 	msr	BASEPRI, r3
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	b662      	cpsie	i
 8009a64:	60bb      	str	r3, [r7, #8]
 8009a66:	e7fe      	b.n	8009a66 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f000 f935 	bl	8009cd8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d102      	bne.n	8009a7e <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f001 fc77 	bl	800b36c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009a7e:	bf00      	nop
 8009a80:	3710      	adds	r7, #16
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009a86:	b480      	push	{r7}
 8009a88:	b085      	sub	sp, #20
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d006      	beq.n	8009aa4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f1c3 0307 	rsb	r3, r3, #7
 8009aa0:	60fb      	str	r3, [r7, #12]
 8009aa2:	e001      	b.n	8009aa8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
	}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3714      	adds	r7, #20
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr

08009ab6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009ab6:	b580      	push	{r7, lr}
 8009ab8:	b086      	sub	sp, #24
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	60f8      	str	r0, [r7, #12]
 8009abe:	60b9      	str	r1, [r7, #8]
 8009ac0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10d      	bne.n	8009af0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d14d      	bne.n	8009b78 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f000 ffb1 	bl	800aa48 <xTaskPriorityDisinherit>
 8009ae6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2200      	movs	r2, #0
 8009aec:	609a      	str	r2, [r3, #8]
 8009aee:	e043      	b.n	8009b78 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d119      	bne.n	8009b2a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6858      	ldr	r0, [r3, #4]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afe:	461a      	mov	r2, r3
 8009b00:	68b9      	ldr	r1, [r7, #8]
 8009b02:	f00f f89d 	bl	8018c40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	685a      	ldr	r2, [r3, #4]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0e:	441a      	add	r2, r3
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	685a      	ldr	r2, [r3, #4]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d32b      	bcc.n	8009b78 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	605a      	str	r2, [r3, #4]
 8009b28:	e026      	b.n	8009b78 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	68d8      	ldr	r0, [r3, #12]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b32:	461a      	mov	r2, r3
 8009b34:	68b9      	ldr	r1, [r7, #8]
 8009b36:	f00f f883 	bl	8018c40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	68da      	ldr	r2, [r3, #12]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b42:	425b      	negs	r3, r3
 8009b44:	441a      	add	r2, r3
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	68da      	ldr	r2, [r3, #12]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d207      	bcs.n	8009b66 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	689a      	ldr	r2, [r3, #8]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5e:	425b      	negs	r3, r3
 8009b60:	441a      	add	r2, r3
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d105      	bne.n	8009b78 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d002      	beq.n	8009b78 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	3b01      	subs	r3, #1
 8009b76:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	1c5a      	adds	r2, r3, #1
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009b80:	697b      	ldr	r3, [r7, #20]
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3718      	adds	r7, #24
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b082      	sub	sp, #8
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
 8009b92:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d018      	beq.n	8009bce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	68da      	ldr	r2, [r3, #12]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba4:	441a      	add	r2, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	68da      	ldr	r2, [r3, #12]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d303      	bcc.n	8009bbe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	68d9      	ldr	r1, [r3, #12]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	6838      	ldr	r0, [r7, #0]
 8009bca:	f00f f839 	bl	8018c40 <memcpy>
	}
}
 8009bce:	bf00      	nop
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b084      	sub	sp, #16
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009bde:	f001 f9db 	bl	800af98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009be8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bea:	e011      	b.n	8009c10 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d012      	beq.n	8009c1a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	3324      	adds	r3, #36	; 0x24
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f000 fcc9 	bl	800a590 <xTaskRemoveFromEventList>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d001      	beq.n	8009c08 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009c04:	f000 fda2 	bl	800a74c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	dce9      	bgt.n	8009bec <prvUnlockQueue+0x16>
 8009c18:	e000      	b.n	8009c1c <prvUnlockQueue+0x46>
					break;
 8009c1a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	22ff      	movs	r2, #255	; 0xff
 8009c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009c24:	f001 f9ea 	bl	800affc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009c28:	f001 f9b6 	bl	800af98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c32:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c34:	e011      	b.n	8009c5a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	691b      	ldr	r3, [r3, #16]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d012      	beq.n	8009c64 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	3310      	adds	r3, #16
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 fca4 	bl	800a590 <xTaskRemoveFromEventList>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d001      	beq.n	8009c52 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009c4e:	f000 fd7d 	bl	800a74c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009c52:	7bbb      	ldrb	r3, [r7, #14]
 8009c54:	3b01      	subs	r3, #1
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	dce9      	bgt.n	8009c36 <prvUnlockQueue+0x60>
 8009c62:	e000      	b.n	8009c66 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009c64:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	22ff      	movs	r2, #255	; 0xff
 8009c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009c6e:	f001 f9c5 	bl	800affc <vPortExitCritical>
}
 8009c72:	bf00      	nop
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b084      	sub	sp, #16
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c82:	f001 f989 	bl	800af98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d102      	bne.n	8009c94 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	60fb      	str	r3, [r7, #12]
 8009c92:	e001      	b.n	8009c98 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009c94:	2300      	movs	r3, #0
 8009c96:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c98:	f001 f9b0 	bl	800affc <vPortExitCritical>

	return xReturn;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b084      	sub	sp, #16
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009cae:	f001 f973 	bl	800af98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d102      	bne.n	8009cc4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	60fb      	str	r3, [r7, #12]
 8009cc2:	e001      	b.n	8009cc8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009cc8:	f001 f998 	bl	800affc <vPortExitCritical>

	return xReturn;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
	...

08009cd8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009cd8:	b480      	push	{r7}
 8009cda:	b085      	sub	sp, #20
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	60fb      	str	r3, [r7, #12]
 8009ce4:	e016      	b.n	8009d14 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009ce6:	4a10      	ldr	r2, [pc, #64]	; (8009d28 <vQueueUnregisterQueue+0x50>)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	00db      	lsls	r3, r3, #3
 8009cec:	4413      	add	r3, r2
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d10b      	bne.n	8009d0e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009cf6:	4a0c      	ldr	r2, [pc, #48]	; (8009d28 <vQueueUnregisterQueue+0x50>)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009d00:	4a09      	ldr	r2, [pc, #36]	; (8009d28 <vQueueUnregisterQueue+0x50>)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	00db      	lsls	r3, r3, #3
 8009d06:	4413      	add	r3, r2
 8009d08:	2200      	movs	r2, #0
 8009d0a:	605a      	str	r2, [r3, #4]
				break;
 8009d0c:	e005      	b.n	8009d1a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	3301      	adds	r3, #1
 8009d12:	60fb      	str	r3, [r7, #12]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2b07      	cmp	r3, #7
 8009d18:	d9e5      	bls.n	8009ce6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009d1a:	bf00      	nop
 8009d1c:	3714      	adds	r7, #20
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	2000c59c 	.word	0x2000c59c

08009d2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b08e      	sub	sp, #56	; 0x38
 8009d30:	af04      	add	r7, sp, #16
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	607a      	str	r2, [r7, #4]
 8009d38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10b      	bne.n	8009d58 <xTaskCreateStatic+0x2c>
 8009d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d44:	b672      	cpsid	i
 8009d46:	f383 8811 	msr	BASEPRI, r3
 8009d4a:	f3bf 8f6f 	isb	sy
 8009d4e:	f3bf 8f4f 	dsb	sy
 8009d52:	b662      	cpsie	i
 8009d54:	623b      	str	r3, [r7, #32]
 8009d56:	e7fe      	b.n	8009d56 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8009d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d10b      	bne.n	8009d76 <xTaskCreateStatic+0x4a>
 8009d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d62:	b672      	cpsid	i
 8009d64:	f383 8811 	msr	BASEPRI, r3
 8009d68:	f3bf 8f6f 	isb	sy
 8009d6c:	f3bf 8f4f 	dsb	sy
 8009d70:	b662      	cpsie	i
 8009d72:	61fb      	str	r3, [r7, #28]
 8009d74:	e7fe      	b.n	8009d74 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009d76:	2354      	movs	r3, #84	; 0x54
 8009d78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	2b54      	cmp	r3, #84	; 0x54
 8009d7e:	d00b      	beq.n	8009d98 <xTaskCreateStatic+0x6c>
 8009d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d84:	b672      	cpsid	i
 8009d86:	f383 8811 	msr	BASEPRI, r3
 8009d8a:	f3bf 8f6f 	isb	sy
 8009d8e:	f3bf 8f4f 	dsb	sy
 8009d92:	b662      	cpsie	i
 8009d94:	61bb      	str	r3, [r7, #24]
 8009d96:	e7fe      	b.n	8009d96 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009d98:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d01e      	beq.n	8009dde <xTaskCreateStatic+0xb2>
 8009da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d01b      	beq.n	8009dde <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009dae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db2:	2202      	movs	r2, #2
 8009db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009db8:	2300      	movs	r3, #0
 8009dba:	9303      	str	r3, [sp, #12]
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbe:	9302      	str	r3, [sp, #8]
 8009dc0:	f107 0314 	add.w	r3, r7, #20
 8009dc4:	9301      	str	r3, [sp, #4]
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc8:	9300      	str	r3, [sp, #0]
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	68b9      	ldr	r1, [r7, #8]
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f000 f850 	bl	8009e76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009dd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009dd8:	f000 f8de 	bl	8009f98 <prvAddNewTaskToReadyList>
 8009ddc:	e001      	b.n	8009de2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009dde:	2300      	movs	r3, #0
 8009de0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009de2:	697b      	ldr	r3, [r7, #20]
	}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3728      	adds	r7, #40	; 0x28
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b08c      	sub	sp, #48	; 0x30
 8009df0:	af04      	add	r7, sp, #16
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	603b      	str	r3, [r7, #0]
 8009df8:	4613      	mov	r3, r2
 8009dfa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009dfc:	88fb      	ldrh	r3, [r7, #6]
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	4618      	mov	r0, r3
 8009e02:	f001 f9eb 	bl	800b1dc <pvPortMalloc>
 8009e06:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00e      	beq.n	8009e2c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009e0e:	2054      	movs	r0, #84	; 0x54
 8009e10:	f001 f9e4 	bl	800b1dc <pvPortMalloc>
 8009e14:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d003      	beq.n	8009e24 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	631a      	str	r2, [r3, #48]	; 0x30
 8009e22:	e005      	b.n	8009e30 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009e24:	6978      	ldr	r0, [r7, #20]
 8009e26:	f001 faa1 	bl	800b36c <vPortFree>
 8009e2a:	e001      	b.n	8009e30 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d017      	beq.n	8009e66 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009e3e:	88fa      	ldrh	r2, [r7, #6]
 8009e40:	2300      	movs	r3, #0
 8009e42:	9303      	str	r3, [sp, #12]
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	9302      	str	r3, [sp, #8]
 8009e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4a:	9301      	str	r3, [sp, #4]
 8009e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4e:	9300      	str	r3, [sp, #0]
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	68b9      	ldr	r1, [r7, #8]
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f000 f80e 	bl	8009e76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e5a:	69f8      	ldr	r0, [r7, #28]
 8009e5c:	f000 f89c 	bl	8009f98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009e60:	2301      	movs	r3, #1
 8009e62:	61bb      	str	r3, [r7, #24]
 8009e64:	e002      	b.n	8009e6c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009e66:	f04f 33ff 	mov.w	r3, #4294967295
 8009e6a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009e6c:	69bb      	ldr	r3, [r7, #24]
	}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3720      	adds	r7, #32
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b088      	sub	sp, #32
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	60f8      	str	r0, [r7, #12]
 8009e7e:	60b9      	str	r1, [r7, #8]
 8009e80:	607a      	str	r2, [r7, #4]
 8009e82:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e86:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	21a5      	movs	r1, #165	; 0xa5
 8009e90:	f00e fefa 	bl	8018c88 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e98:	6879      	ldr	r1, [r7, #4]
 8009e9a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009e9e:	440b      	add	r3, r1
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4413      	add	r3, r2
 8009ea4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	f023 0307 	bic.w	r3, r3, #7
 8009eac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	f003 0307 	and.w	r3, r3, #7
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00b      	beq.n	8009ed0 <prvInitialiseNewTask+0x5a>
 8009eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ebc:	b672      	cpsid	i
 8009ebe:	f383 8811 	msr	BASEPRI, r3
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	f3bf 8f4f 	dsb	sy
 8009eca:	b662      	cpsie	i
 8009ecc:	617b      	str	r3, [r7, #20]
 8009ece:	e7fe      	b.n	8009ece <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d01f      	beq.n	8009f16 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	61fb      	str	r3, [r7, #28]
 8009eda:	e012      	b.n	8009f02 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009edc:	68ba      	ldr	r2, [r7, #8]
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	7819      	ldrb	r1, [r3, #0]
 8009ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	4413      	add	r3, r2
 8009eea:	3334      	adds	r3, #52	; 0x34
 8009eec:	460a      	mov	r2, r1
 8009eee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009ef0:	68ba      	ldr	r2, [r7, #8]
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d006      	beq.n	8009f0a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	3301      	adds	r3, #1
 8009f00:	61fb      	str	r3, [r7, #28]
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	2b0f      	cmp	r3, #15
 8009f06:	d9e9      	bls.n	8009edc <prvInitialiseNewTask+0x66>
 8009f08:	e000      	b.n	8009f0c <prvInitialiseNewTask+0x96>
			{
				break;
 8009f0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f14:	e003      	b.n	8009f1e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f20:	2b06      	cmp	r3, #6
 8009f22:	d901      	bls.n	8009f28 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009f24:	2306      	movs	r3, #6
 8009f26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f32:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f36:	2200      	movs	r2, #0
 8009f38:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7fe fe71 	bl	8008c26 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f46:	3318      	adds	r3, #24
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7fe fe6c 	bl	8008c26 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f56:	f1c3 0207 	rsb	r2, r3, #7
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f66:	2200      	movs	r2, #0
 8009f68:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f72:	683a      	ldr	r2, [r7, #0]
 8009f74:	68f9      	ldr	r1, [r7, #12]
 8009f76:	69b8      	ldr	r0, [r7, #24]
 8009f78:	f000 ff04 	bl	800ad84 <pxPortInitialiseStack>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d002      	beq.n	8009f8e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f8e:	bf00      	nop
 8009f90:	3720      	adds	r7, #32
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
	...

08009f98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009fa0:	f000 fffa 	bl	800af98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009fa4:	4b2a      	ldr	r3, [pc, #168]	; (800a050 <prvAddNewTaskToReadyList+0xb8>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	4a29      	ldr	r2, [pc, #164]	; (800a050 <prvAddNewTaskToReadyList+0xb8>)
 8009fac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009fae:	4b29      	ldr	r3, [pc, #164]	; (800a054 <prvAddNewTaskToReadyList+0xbc>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d109      	bne.n	8009fca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009fb6:	4a27      	ldr	r2, [pc, #156]	; (800a054 <prvAddNewTaskToReadyList+0xbc>)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009fbc:	4b24      	ldr	r3, [pc, #144]	; (800a050 <prvAddNewTaskToReadyList+0xb8>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d110      	bne.n	8009fe6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009fc4:	f000 fbe6 	bl	800a794 <prvInitialiseTaskLists>
 8009fc8:	e00d      	b.n	8009fe6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009fca:	4b23      	ldr	r3, [pc, #140]	; (800a058 <prvAddNewTaskToReadyList+0xc0>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d109      	bne.n	8009fe6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009fd2:	4b20      	ldr	r3, [pc, #128]	; (800a054 <prvAddNewTaskToReadyList+0xbc>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d802      	bhi.n	8009fe6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009fe0:	4a1c      	ldr	r2, [pc, #112]	; (800a054 <prvAddNewTaskToReadyList+0xbc>)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009fe6:	4b1d      	ldr	r3, [pc, #116]	; (800a05c <prvAddNewTaskToReadyList+0xc4>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	3301      	adds	r3, #1
 8009fec:	4a1b      	ldr	r2, [pc, #108]	; (800a05c <prvAddNewTaskToReadyList+0xc4>)
 8009fee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	409a      	lsls	r2, r3
 8009ff8:	4b19      	ldr	r3, [pc, #100]	; (800a060 <prvAddNewTaskToReadyList+0xc8>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	4a18      	ldr	r2, [pc, #96]	; (800a060 <prvAddNewTaskToReadyList+0xc8>)
 800a000:	6013      	str	r3, [r2, #0]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a006:	4613      	mov	r3, r2
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4413      	add	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	4a15      	ldr	r2, [pc, #84]	; (800a064 <prvAddNewTaskToReadyList+0xcc>)
 800a010:	441a      	add	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	3304      	adds	r3, #4
 800a016:	4619      	mov	r1, r3
 800a018:	4610      	mov	r0, r2
 800a01a:	f7fe fe11 	bl	8008c40 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a01e:	f000 ffed 	bl	800affc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a022:	4b0d      	ldr	r3, [pc, #52]	; (800a058 <prvAddNewTaskToReadyList+0xc0>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d00e      	beq.n	800a048 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a02a:	4b0a      	ldr	r3, [pc, #40]	; (800a054 <prvAddNewTaskToReadyList+0xbc>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a034:	429a      	cmp	r2, r3
 800a036:	d207      	bcs.n	800a048 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a038:	4b0b      	ldr	r3, [pc, #44]	; (800a068 <prvAddNewTaskToReadyList+0xd0>)
 800a03a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a03e:	601a      	str	r2, [r3, #0]
 800a040:	f3bf 8f4f 	dsb	sy
 800a044:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a048:	bf00      	nop
 800a04a:	3708      	adds	r7, #8
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	20000764 	.word	0x20000764
 800a054:	20000664 	.word	0x20000664
 800a058:	20000770 	.word	0x20000770
 800a05c:	20000780 	.word	0x20000780
 800a060:	2000076c 	.word	0x2000076c
 800a064:	20000668 	.word	0x20000668
 800a068:	e000ed04 	.word	0xe000ed04

0800a06c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b08a      	sub	sp, #40	; 0x28
 800a070:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a072:	2300      	movs	r3, #0
 800a074:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a076:	2300      	movs	r3, #0
 800a078:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a07a:	463a      	mov	r2, r7
 800a07c:	1d39      	adds	r1, r7, #4
 800a07e:	f107 0308 	add.w	r3, r7, #8
 800a082:	4618      	mov	r0, r3
 800a084:	f7f6 fac0 	bl	8000608 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a088:	6839      	ldr	r1, [r7, #0]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	68ba      	ldr	r2, [r7, #8]
 800a08e:	9202      	str	r2, [sp, #8]
 800a090:	9301      	str	r3, [sp, #4]
 800a092:	2300      	movs	r3, #0
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	2300      	movs	r3, #0
 800a098:	460a      	mov	r2, r1
 800a09a:	491f      	ldr	r1, [pc, #124]	; (800a118 <vTaskStartScheduler+0xac>)
 800a09c:	481f      	ldr	r0, [pc, #124]	; (800a11c <vTaskStartScheduler+0xb0>)
 800a09e:	f7ff fe45 	bl	8009d2c <xTaskCreateStatic>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	4b1e      	ldr	r3, [pc, #120]	; (800a120 <vTaskStartScheduler+0xb4>)
 800a0a6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a0a8:	4b1d      	ldr	r3, [pc, #116]	; (800a120 <vTaskStartScheduler+0xb4>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d002      	beq.n	800a0b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	617b      	str	r3, [r7, #20]
 800a0b4:	e001      	b.n	800a0ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d117      	bne.n	800a0f0 <vTaskStartScheduler+0x84>
 800a0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c4:	b672      	cpsid	i
 800a0c6:	f383 8811 	msr	BASEPRI, r3
 800a0ca:	f3bf 8f6f 	isb	sy
 800a0ce:	f3bf 8f4f 	dsb	sy
 800a0d2:	b662      	cpsie	i
 800a0d4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a0d6:	4b13      	ldr	r3, [pc, #76]	; (800a124 <vTaskStartScheduler+0xb8>)
 800a0d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a0de:	4b12      	ldr	r3, [pc, #72]	; (800a128 <vTaskStartScheduler+0xbc>)
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a0e4:	4b11      	ldr	r3, [pc, #68]	; (800a12c <vTaskStartScheduler+0xc0>)
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a0ea:	f000 fed9 	bl	800aea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a0ee:	e00f      	b.n	800a110 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f6:	d10b      	bne.n	800a110 <vTaskStartScheduler+0xa4>
 800a0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fc:	b672      	cpsid	i
 800a0fe:	f383 8811 	msr	BASEPRI, r3
 800a102:	f3bf 8f6f 	isb	sy
 800a106:	f3bf 8f4f 	dsb	sy
 800a10a:	b662      	cpsie	i
 800a10c:	60fb      	str	r3, [r7, #12]
 800a10e:	e7fe      	b.n	800a10e <vTaskStartScheduler+0xa2>
}
 800a110:	bf00      	nop
 800a112:	3718      	adds	r7, #24
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	0801d534 	.word	0x0801d534
 800a11c:	0800a765 	.word	0x0800a765
 800a120:	20000788 	.word	0x20000788
 800a124:	20000784 	.word	0x20000784
 800a128:	20000770 	.word	0x20000770
 800a12c:	20000768 	.word	0x20000768

0800a130 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a130:	b480      	push	{r7}
 800a132:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a134:	4b04      	ldr	r3, [pc, #16]	; (800a148 <vTaskSuspendAll+0x18>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	3301      	adds	r3, #1
 800a13a:	4a03      	ldr	r2, [pc, #12]	; (800a148 <vTaskSuspendAll+0x18>)
 800a13c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a13e:	bf00      	nop
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr
 800a148:	2000078c 	.word	0x2000078c

0800a14c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a152:	2300      	movs	r3, #0
 800a154:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a156:	2300      	movs	r3, #0
 800a158:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a15a:	4b42      	ldr	r3, [pc, #264]	; (800a264 <xTaskResumeAll+0x118>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10b      	bne.n	800a17a <xTaskResumeAll+0x2e>
 800a162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a166:	b672      	cpsid	i
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	b662      	cpsie	i
 800a176:	603b      	str	r3, [r7, #0]
 800a178:	e7fe      	b.n	800a178 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a17a:	f000 ff0d 	bl	800af98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a17e:	4b39      	ldr	r3, [pc, #228]	; (800a264 <xTaskResumeAll+0x118>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	3b01      	subs	r3, #1
 800a184:	4a37      	ldr	r2, [pc, #220]	; (800a264 <xTaskResumeAll+0x118>)
 800a186:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a188:	4b36      	ldr	r3, [pc, #216]	; (800a264 <xTaskResumeAll+0x118>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d161      	bne.n	800a254 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a190:	4b35      	ldr	r3, [pc, #212]	; (800a268 <xTaskResumeAll+0x11c>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d05d      	beq.n	800a254 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a198:	e02e      	b.n	800a1f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a19a:	4b34      	ldr	r3, [pc, #208]	; (800a26c <xTaskResumeAll+0x120>)
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	3318      	adds	r3, #24
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7fe fda7 	bl	8008cfa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	3304      	adds	r3, #4
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7fe fda2 	bl	8008cfa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	409a      	lsls	r2, r3
 800a1be:	4b2c      	ldr	r3, [pc, #176]	; (800a270 <xTaskResumeAll+0x124>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	4a2a      	ldr	r2, [pc, #168]	; (800a270 <xTaskResumeAll+0x124>)
 800a1c6:	6013      	str	r3, [r2, #0]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	4413      	add	r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	4a27      	ldr	r2, [pc, #156]	; (800a274 <xTaskResumeAll+0x128>)
 800a1d6:	441a      	add	r2, r3
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	3304      	adds	r3, #4
 800a1dc:	4619      	mov	r1, r3
 800a1de:	4610      	mov	r0, r2
 800a1e0:	f7fe fd2e 	bl	8008c40 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1e8:	4b23      	ldr	r3, [pc, #140]	; (800a278 <xTaskResumeAll+0x12c>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d302      	bcc.n	800a1f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a1f2:	4b22      	ldr	r3, [pc, #136]	; (800a27c <xTaskResumeAll+0x130>)
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1f8:	4b1c      	ldr	r3, [pc, #112]	; (800a26c <xTaskResumeAll+0x120>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d1cc      	bne.n	800a19a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d001      	beq.n	800a20a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a206:	f000 fb61 	bl	800a8cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a20a:	4b1d      	ldr	r3, [pc, #116]	; (800a280 <xTaskResumeAll+0x134>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d010      	beq.n	800a238 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a216:	f000 f859 	bl	800a2cc <xTaskIncrementTick>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d002      	beq.n	800a226 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a220:	4b16      	ldr	r3, [pc, #88]	; (800a27c <xTaskResumeAll+0x130>)
 800a222:	2201      	movs	r2, #1
 800a224:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	3b01      	subs	r3, #1
 800a22a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d1f1      	bne.n	800a216 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800a232:	4b13      	ldr	r3, [pc, #76]	; (800a280 <xTaskResumeAll+0x134>)
 800a234:	2200      	movs	r2, #0
 800a236:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a238:	4b10      	ldr	r3, [pc, #64]	; (800a27c <xTaskResumeAll+0x130>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d009      	beq.n	800a254 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a240:	2301      	movs	r3, #1
 800a242:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a244:	4b0f      	ldr	r3, [pc, #60]	; (800a284 <xTaskResumeAll+0x138>)
 800a246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a24a:	601a      	str	r2, [r3, #0]
 800a24c:	f3bf 8f4f 	dsb	sy
 800a250:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a254:	f000 fed2 	bl	800affc <vPortExitCritical>

	return xAlreadyYielded;
 800a258:	68bb      	ldr	r3, [r7, #8]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	2000078c 	.word	0x2000078c
 800a268:	20000764 	.word	0x20000764
 800a26c:	20000724 	.word	0x20000724
 800a270:	2000076c 	.word	0x2000076c
 800a274:	20000668 	.word	0x20000668
 800a278:	20000664 	.word	0x20000664
 800a27c:	20000778 	.word	0x20000778
 800a280:	20000774 	.word	0x20000774
 800a284:	e000ed04 	.word	0xe000ed04

0800a288 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a28e:	4b05      	ldr	r3, [pc, #20]	; (800a2a4 <xTaskGetTickCount+0x1c>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a294:	687b      	ldr	r3, [r7, #4]
}
 800a296:	4618      	mov	r0, r3
 800a298:	370c      	adds	r7, #12
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	20000768 	.word	0x20000768

0800a2a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a2ae:	f000 ff53 	bl	800b158 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a2b6:	4b04      	ldr	r3, [pc, #16]	; (800a2c8 <xTaskGetTickCountFromISR+0x20>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a2bc:	683b      	ldr	r3, [r7, #0]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3708      	adds	r7, #8
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	20000768 	.word	0x20000768

0800a2cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2d6:	4b4f      	ldr	r3, [pc, #316]	; (800a414 <xTaskIncrementTick+0x148>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f040 8089 	bne.w	800a3f2 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a2e0:	4b4d      	ldr	r3, [pc, #308]	; (800a418 <xTaskIncrementTick+0x14c>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a2e8:	4a4b      	ldr	r2, [pc, #300]	; (800a418 <xTaskIncrementTick+0x14c>)
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d121      	bne.n	800a338 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a2f4:	4b49      	ldr	r3, [pc, #292]	; (800a41c <xTaskIncrementTick+0x150>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00b      	beq.n	800a316 <xTaskIncrementTick+0x4a>
 800a2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a302:	b672      	cpsid	i
 800a304:	f383 8811 	msr	BASEPRI, r3
 800a308:	f3bf 8f6f 	isb	sy
 800a30c:	f3bf 8f4f 	dsb	sy
 800a310:	b662      	cpsie	i
 800a312:	603b      	str	r3, [r7, #0]
 800a314:	e7fe      	b.n	800a314 <xTaskIncrementTick+0x48>
 800a316:	4b41      	ldr	r3, [pc, #260]	; (800a41c <xTaskIncrementTick+0x150>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	60fb      	str	r3, [r7, #12]
 800a31c:	4b40      	ldr	r3, [pc, #256]	; (800a420 <xTaskIncrementTick+0x154>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a3e      	ldr	r2, [pc, #248]	; (800a41c <xTaskIncrementTick+0x150>)
 800a322:	6013      	str	r3, [r2, #0]
 800a324:	4a3e      	ldr	r2, [pc, #248]	; (800a420 <xTaskIncrementTick+0x154>)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	6013      	str	r3, [r2, #0]
 800a32a:	4b3e      	ldr	r3, [pc, #248]	; (800a424 <xTaskIncrementTick+0x158>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	3301      	adds	r3, #1
 800a330:	4a3c      	ldr	r2, [pc, #240]	; (800a424 <xTaskIncrementTick+0x158>)
 800a332:	6013      	str	r3, [r2, #0]
 800a334:	f000 faca 	bl	800a8cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a338:	4b3b      	ldr	r3, [pc, #236]	; (800a428 <xTaskIncrementTick+0x15c>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	693a      	ldr	r2, [r7, #16]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d348      	bcc.n	800a3d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a342:	4b36      	ldr	r3, [pc, #216]	; (800a41c <xTaskIncrementTick+0x150>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d104      	bne.n	800a356 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a34c:	4b36      	ldr	r3, [pc, #216]	; (800a428 <xTaskIncrementTick+0x15c>)
 800a34e:	f04f 32ff 	mov.w	r2, #4294967295
 800a352:	601a      	str	r2, [r3, #0]
					break;
 800a354:	e03e      	b.n	800a3d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a356:	4b31      	ldr	r3, [pc, #196]	; (800a41c <xTaskIncrementTick+0x150>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a366:	693a      	ldr	r2, [r7, #16]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d203      	bcs.n	800a376 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a36e:	4a2e      	ldr	r2, [pc, #184]	; (800a428 <xTaskIncrementTick+0x15c>)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a374:	e02e      	b.n	800a3d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	3304      	adds	r3, #4
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7fe fcbd 	bl	8008cfa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a384:	2b00      	cmp	r3, #0
 800a386:	d004      	beq.n	800a392 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	3318      	adds	r3, #24
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7fe fcb4 	bl	8008cfa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a396:	2201      	movs	r2, #1
 800a398:	409a      	lsls	r2, r3
 800a39a:	4b24      	ldr	r3, [pc, #144]	; (800a42c <xTaskIncrementTick+0x160>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	4a22      	ldr	r2, [pc, #136]	; (800a42c <xTaskIncrementTick+0x160>)
 800a3a2:	6013      	str	r3, [r2, #0]
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	4413      	add	r3, r2
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4a1f      	ldr	r2, [pc, #124]	; (800a430 <xTaskIncrementTick+0x164>)
 800a3b2:	441a      	add	r2, r3
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	3304      	adds	r3, #4
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	4610      	mov	r0, r2
 800a3bc:	f7fe fc40 	bl	8008c40 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c4:	4b1b      	ldr	r3, [pc, #108]	; (800a434 <xTaskIncrementTick+0x168>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d3b9      	bcc.n	800a342 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3d2:	e7b6      	b.n	800a342 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a3d4:	4b17      	ldr	r3, [pc, #92]	; (800a434 <xTaskIncrementTick+0x168>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3da:	4915      	ldr	r1, [pc, #84]	; (800a430 <xTaskIncrementTick+0x164>)
 800a3dc:	4613      	mov	r3, r2
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	4413      	add	r3, r2
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	440b      	add	r3, r1
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d907      	bls.n	800a3fc <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	617b      	str	r3, [r7, #20]
 800a3f0:	e004      	b.n	800a3fc <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a3f2:	4b11      	ldr	r3, [pc, #68]	; (800a438 <xTaskIncrementTick+0x16c>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	4a0f      	ldr	r2, [pc, #60]	; (800a438 <xTaskIncrementTick+0x16c>)
 800a3fa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a3fc:	4b0f      	ldr	r3, [pc, #60]	; (800a43c <xTaskIncrementTick+0x170>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d001      	beq.n	800a408 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800a404:	2301      	movs	r3, #1
 800a406:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a408:	697b      	ldr	r3, [r7, #20]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3718      	adds	r7, #24
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	2000078c 	.word	0x2000078c
 800a418:	20000768 	.word	0x20000768
 800a41c:	2000071c 	.word	0x2000071c
 800a420:	20000720 	.word	0x20000720
 800a424:	2000077c 	.word	0x2000077c
 800a428:	20000784 	.word	0x20000784
 800a42c:	2000076c 	.word	0x2000076c
 800a430:	20000668 	.word	0x20000668
 800a434:	20000664 	.word	0x20000664
 800a438:	20000774 	.word	0x20000774
 800a43c:	20000778 	.word	0x20000778

0800a440 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b088      	sub	sp, #32
 800a444:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a446:	4b3a      	ldr	r3, [pc, #232]	; (800a530 <vTaskSwitchContext+0xf0>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d003      	beq.n	800a456 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a44e:	4b39      	ldr	r3, [pc, #228]	; (800a534 <vTaskSwitchContext+0xf4>)
 800a450:	2201      	movs	r2, #1
 800a452:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a454:	e067      	b.n	800a526 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800a456:	4b37      	ldr	r3, [pc, #220]	; (800a534 <vTaskSwitchContext+0xf4>)
 800a458:	2200      	movs	r2, #0
 800a45a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800a45c:	4b36      	ldr	r3, [pc, #216]	; (800a538 <vTaskSwitchContext+0xf8>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a462:	61fb      	str	r3, [r7, #28]
 800a464:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800a468:	61bb      	str	r3, [r7, #24]
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	69ba      	ldr	r2, [r7, #24]
 800a470:	429a      	cmp	r2, r3
 800a472:	d111      	bne.n	800a498 <vTaskSwitchContext+0x58>
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	3304      	adds	r3, #4
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	69ba      	ldr	r2, [r7, #24]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d10b      	bne.n	800a498 <vTaskSwitchContext+0x58>
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	3308      	adds	r3, #8
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	69ba      	ldr	r2, [r7, #24]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d105      	bne.n	800a498 <vTaskSwitchContext+0x58>
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	330c      	adds	r3, #12
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	69ba      	ldr	r2, [r7, #24]
 800a494:	429a      	cmp	r2, r3
 800a496:	d008      	beq.n	800a4aa <vTaskSwitchContext+0x6a>
 800a498:	4b27      	ldr	r3, [pc, #156]	; (800a538 <vTaskSwitchContext+0xf8>)
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	4b26      	ldr	r3, [pc, #152]	; (800a538 <vTaskSwitchContext+0xf8>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	3334      	adds	r3, #52	; 0x34
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	4610      	mov	r0, r2
 800a4a6:	f7f6 f8a3 	bl	80005f0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4aa:	4b24      	ldr	r3, [pc, #144]	; (800a53c <vTaskSwitchContext+0xfc>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	fab3 f383 	clz	r3, r3
 800a4b6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a4b8:	7afb      	ldrb	r3, [r7, #11]
 800a4ba:	f1c3 031f 	rsb	r3, r3, #31
 800a4be:	617b      	str	r3, [r7, #20]
 800a4c0:	491f      	ldr	r1, [pc, #124]	; (800a540 <vTaskSwitchContext+0x100>)
 800a4c2:	697a      	ldr	r2, [r7, #20]
 800a4c4:	4613      	mov	r3, r2
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	4413      	add	r3, r2
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	440b      	add	r3, r1
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10b      	bne.n	800a4ec <vTaskSwitchContext+0xac>
	__asm volatile
 800a4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d8:	b672      	cpsid	i
 800a4da:	f383 8811 	msr	BASEPRI, r3
 800a4de:	f3bf 8f6f 	isb	sy
 800a4e2:	f3bf 8f4f 	dsb	sy
 800a4e6:	b662      	cpsie	i
 800a4e8:	607b      	str	r3, [r7, #4]
 800a4ea:	e7fe      	b.n	800a4ea <vTaskSwitchContext+0xaa>
 800a4ec:	697a      	ldr	r2, [r7, #20]
 800a4ee:	4613      	mov	r3, r2
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	4413      	add	r3, r2
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	4a12      	ldr	r2, [pc, #72]	; (800a540 <vTaskSwitchContext+0x100>)
 800a4f8:	4413      	add	r3, r2
 800a4fa:	613b      	str	r3, [r7, #16]
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	685a      	ldr	r2, [r3, #4]
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	605a      	str	r2, [r3, #4]
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	685a      	ldr	r2, [r3, #4]
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	3308      	adds	r3, #8
 800a50e:	429a      	cmp	r2, r3
 800a510:	d104      	bne.n	800a51c <vTaskSwitchContext+0xdc>
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	685a      	ldr	r2, [r3, #4]
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	605a      	str	r2, [r3, #4]
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	4a05      	ldr	r2, [pc, #20]	; (800a538 <vTaskSwitchContext+0xf8>)
 800a524:	6013      	str	r3, [r2, #0]
}
 800a526:	bf00      	nop
 800a528:	3720      	adds	r7, #32
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	2000078c 	.word	0x2000078c
 800a534:	20000778 	.word	0x20000778
 800a538:	20000664 	.word	0x20000664
 800a53c:	2000076c 	.word	0x2000076c
 800a540:	20000668 	.word	0x20000668

0800a544 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d10b      	bne.n	800a56c <vTaskPlaceOnEventList+0x28>
 800a554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a558:	b672      	cpsid	i
 800a55a:	f383 8811 	msr	BASEPRI, r3
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	f3bf 8f4f 	dsb	sy
 800a566:	b662      	cpsie	i
 800a568:	60fb      	str	r3, [r7, #12]
 800a56a:	e7fe      	b.n	800a56a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a56c:	4b07      	ldr	r3, [pc, #28]	; (800a58c <vTaskPlaceOnEventList+0x48>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	3318      	adds	r3, #24
 800a572:	4619      	mov	r1, r3
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f7fe fb87 	bl	8008c88 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a57a:	2101      	movs	r1, #1
 800a57c:	6838      	ldr	r0, [r7, #0]
 800a57e:	f000 fb9b 	bl	800acb8 <prvAddCurrentTaskToDelayedList>
}
 800a582:	bf00      	nop
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	20000664 	.word	0x20000664

0800a590 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b086      	sub	sp, #24
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d10b      	bne.n	800a5be <xTaskRemoveFromEventList+0x2e>
 800a5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5aa:	b672      	cpsid	i
 800a5ac:	f383 8811 	msr	BASEPRI, r3
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	b662      	cpsie	i
 800a5ba:	60fb      	str	r3, [r7, #12]
 800a5bc:	e7fe      	b.n	800a5bc <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	3318      	adds	r3, #24
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7fe fb99 	bl	8008cfa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5c8:	4b1d      	ldr	r3, [pc, #116]	; (800a640 <xTaskRemoveFromEventList+0xb0>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d11c      	bne.n	800a60a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	3304      	adds	r3, #4
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7fe fb90 	bl	8008cfa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5de:	2201      	movs	r2, #1
 800a5e0:	409a      	lsls	r2, r3
 800a5e2:	4b18      	ldr	r3, [pc, #96]	; (800a644 <xTaskRemoveFromEventList+0xb4>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	4a16      	ldr	r2, [pc, #88]	; (800a644 <xTaskRemoveFromEventList+0xb4>)
 800a5ea:	6013      	str	r3, [r2, #0]
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	4413      	add	r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4a13      	ldr	r2, [pc, #76]	; (800a648 <xTaskRemoveFromEventList+0xb8>)
 800a5fa:	441a      	add	r2, r3
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	3304      	adds	r3, #4
 800a600:	4619      	mov	r1, r3
 800a602:	4610      	mov	r0, r2
 800a604:	f7fe fb1c 	bl	8008c40 <vListInsertEnd>
 800a608:	e005      	b.n	800a616 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	3318      	adds	r3, #24
 800a60e:	4619      	mov	r1, r3
 800a610:	480e      	ldr	r0, [pc, #56]	; (800a64c <xTaskRemoveFromEventList+0xbc>)
 800a612:	f7fe fb15 	bl	8008c40 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a61a:	4b0d      	ldr	r3, [pc, #52]	; (800a650 <xTaskRemoveFromEventList+0xc0>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a620:	429a      	cmp	r2, r3
 800a622:	d905      	bls.n	800a630 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a624:	2301      	movs	r3, #1
 800a626:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a628:	4b0a      	ldr	r3, [pc, #40]	; (800a654 <xTaskRemoveFromEventList+0xc4>)
 800a62a:	2201      	movs	r2, #1
 800a62c:	601a      	str	r2, [r3, #0]
 800a62e:	e001      	b.n	800a634 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a630:	2300      	movs	r3, #0
 800a632:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a634:	697b      	ldr	r3, [r7, #20]
}
 800a636:	4618      	mov	r0, r3
 800a638:	3718      	adds	r7, #24
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	2000078c 	.word	0x2000078c
 800a644:	2000076c 	.word	0x2000076c
 800a648:	20000668 	.word	0x20000668
 800a64c:	20000724 	.word	0x20000724
 800a650:	20000664 	.word	0x20000664
 800a654:	20000778 	.word	0x20000778

0800a658 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a660:	4b06      	ldr	r3, [pc, #24]	; (800a67c <vTaskInternalSetTimeOutState+0x24>)
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a668:	4b05      	ldr	r3, [pc, #20]	; (800a680 <vTaskInternalSetTimeOutState+0x28>)
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	605a      	str	r2, [r3, #4]
}
 800a670:	bf00      	nop
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr
 800a67c:	2000077c 	.word	0x2000077c
 800a680:	20000768 	.word	0x20000768

0800a684 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b088      	sub	sp, #32
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d10b      	bne.n	800a6ac <xTaskCheckForTimeOut+0x28>
 800a694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a698:	b672      	cpsid	i
 800a69a:	f383 8811 	msr	BASEPRI, r3
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	f3bf 8f4f 	dsb	sy
 800a6a6:	b662      	cpsie	i
 800a6a8:	613b      	str	r3, [r7, #16]
 800a6aa:	e7fe      	b.n	800a6aa <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10b      	bne.n	800a6ca <xTaskCheckForTimeOut+0x46>
 800a6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b6:	b672      	cpsid	i
 800a6b8:	f383 8811 	msr	BASEPRI, r3
 800a6bc:	f3bf 8f6f 	isb	sy
 800a6c0:	f3bf 8f4f 	dsb	sy
 800a6c4:	b662      	cpsie	i
 800a6c6:	60fb      	str	r3, [r7, #12]
 800a6c8:	e7fe      	b.n	800a6c8 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800a6ca:	f000 fc65 	bl	800af98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a6ce:	4b1d      	ldr	r3, [pc, #116]	; (800a744 <xTaskCheckForTimeOut+0xc0>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	69ba      	ldr	r2, [r7, #24]
 800a6da:	1ad3      	subs	r3, r2, r3
 800a6dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e6:	d102      	bne.n	800a6ee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	61fb      	str	r3, [r7, #28]
 800a6ec:	e023      	b.n	800a736 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	4b15      	ldr	r3, [pc, #84]	; (800a748 <xTaskCheckForTimeOut+0xc4>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d007      	beq.n	800a70a <xTaskCheckForTimeOut+0x86>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	69ba      	ldr	r2, [r7, #24]
 800a700:	429a      	cmp	r2, r3
 800a702:	d302      	bcc.n	800a70a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a704:	2301      	movs	r3, #1
 800a706:	61fb      	str	r3, [r7, #28]
 800a708:	e015      	b.n	800a736 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	697a      	ldr	r2, [r7, #20]
 800a710:	429a      	cmp	r2, r3
 800a712:	d20b      	bcs.n	800a72c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	1ad2      	subs	r2, r2, r3
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f7ff ff99 	bl	800a658 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a726:	2300      	movs	r3, #0
 800a728:	61fb      	str	r3, [r7, #28]
 800a72a:	e004      	b.n	800a736 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	2200      	movs	r2, #0
 800a730:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a732:	2301      	movs	r3, #1
 800a734:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a736:	f000 fc61 	bl	800affc <vPortExitCritical>

	return xReturn;
 800a73a:	69fb      	ldr	r3, [r7, #28]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3720      	adds	r7, #32
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	20000768 	.word	0x20000768
 800a748:	2000077c 	.word	0x2000077c

0800a74c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a74c:	b480      	push	{r7}
 800a74e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a750:	4b03      	ldr	r3, [pc, #12]	; (800a760 <vTaskMissedYield+0x14>)
 800a752:	2201      	movs	r2, #1
 800a754:	601a      	str	r2, [r3, #0]
}
 800a756:	bf00      	nop
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr
 800a760:	20000778 	.word	0x20000778

0800a764 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a76c:	f000 f852 	bl	800a814 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a770:	4b06      	ldr	r3, [pc, #24]	; (800a78c <prvIdleTask+0x28>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b01      	cmp	r3, #1
 800a776:	d9f9      	bls.n	800a76c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a778:	4b05      	ldr	r3, [pc, #20]	; (800a790 <prvIdleTask+0x2c>)
 800a77a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a77e:	601a      	str	r2, [r3, #0]
 800a780:	f3bf 8f4f 	dsb	sy
 800a784:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a788:	e7f0      	b.n	800a76c <prvIdleTask+0x8>
 800a78a:	bf00      	nop
 800a78c:	20000668 	.word	0x20000668
 800a790:	e000ed04 	.word	0xe000ed04

0800a794 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a79a:	2300      	movs	r3, #0
 800a79c:	607b      	str	r3, [r7, #4]
 800a79e:	e00c      	b.n	800a7ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	4613      	mov	r3, r2
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	4413      	add	r3, r2
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	4a12      	ldr	r2, [pc, #72]	; (800a7f4 <prvInitialiseTaskLists+0x60>)
 800a7ac:	4413      	add	r3, r2
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fe fa19 	bl	8008be6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	607b      	str	r3, [r7, #4]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2b06      	cmp	r3, #6
 800a7be:	d9ef      	bls.n	800a7a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a7c0:	480d      	ldr	r0, [pc, #52]	; (800a7f8 <prvInitialiseTaskLists+0x64>)
 800a7c2:	f7fe fa10 	bl	8008be6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a7c6:	480d      	ldr	r0, [pc, #52]	; (800a7fc <prvInitialiseTaskLists+0x68>)
 800a7c8:	f7fe fa0d 	bl	8008be6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a7cc:	480c      	ldr	r0, [pc, #48]	; (800a800 <prvInitialiseTaskLists+0x6c>)
 800a7ce:	f7fe fa0a 	bl	8008be6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a7d2:	480c      	ldr	r0, [pc, #48]	; (800a804 <prvInitialiseTaskLists+0x70>)
 800a7d4:	f7fe fa07 	bl	8008be6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a7d8:	480b      	ldr	r0, [pc, #44]	; (800a808 <prvInitialiseTaskLists+0x74>)
 800a7da:	f7fe fa04 	bl	8008be6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a7de:	4b0b      	ldr	r3, [pc, #44]	; (800a80c <prvInitialiseTaskLists+0x78>)
 800a7e0:	4a05      	ldr	r2, [pc, #20]	; (800a7f8 <prvInitialiseTaskLists+0x64>)
 800a7e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a7e4:	4b0a      	ldr	r3, [pc, #40]	; (800a810 <prvInitialiseTaskLists+0x7c>)
 800a7e6:	4a05      	ldr	r2, [pc, #20]	; (800a7fc <prvInitialiseTaskLists+0x68>)
 800a7e8:	601a      	str	r2, [r3, #0]
}
 800a7ea:	bf00      	nop
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	20000668 	.word	0x20000668
 800a7f8:	200006f4 	.word	0x200006f4
 800a7fc:	20000708 	.word	0x20000708
 800a800:	20000724 	.word	0x20000724
 800a804:	20000738 	.word	0x20000738
 800a808:	20000750 	.word	0x20000750
 800a80c:	2000071c 	.word	0x2000071c
 800a810:	20000720 	.word	0x20000720

0800a814 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a81a:	e019      	b.n	800a850 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a81c:	f000 fbbc 	bl	800af98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a820:	4b0f      	ldr	r3, [pc, #60]	; (800a860 <prvCheckTasksWaitingTermination+0x4c>)
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	3304      	adds	r3, #4
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7fe fa64 	bl	8008cfa <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a832:	4b0c      	ldr	r3, [pc, #48]	; (800a864 <prvCheckTasksWaitingTermination+0x50>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	3b01      	subs	r3, #1
 800a838:	4a0a      	ldr	r2, [pc, #40]	; (800a864 <prvCheckTasksWaitingTermination+0x50>)
 800a83a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a83c:	4b0a      	ldr	r3, [pc, #40]	; (800a868 <prvCheckTasksWaitingTermination+0x54>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	3b01      	subs	r3, #1
 800a842:	4a09      	ldr	r2, [pc, #36]	; (800a868 <prvCheckTasksWaitingTermination+0x54>)
 800a844:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a846:	f000 fbd9 	bl	800affc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f80e 	bl	800a86c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a850:	4b05      	ldr	r3, [pc, #20]	; (800a868 <prvCheckTasksWaitingTermination+0x54>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d1e1      	bne.n	800a81c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a858:	bf00      	nop
 800a85a:	3708      	adds	r7, #8
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	20000738 	.word	0x20000738
 800a864:	20000764 	.word	0x20000764
 800a868:	2000074c 	.word	0x2000074c

0800a86c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d108      	bne.n	800a890 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a882:	4618      	mov	r0, r3
 800a884:	f000 fd72 	bl	800b36c <vPortFree>
				vPortFree( pxTCB );
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 fd6f 	bl	800b36c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a88e:	e019      	b.n	800a8c4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a896:	2b01      	cmp	r3, #1
 800a898:	d103      	bne.n	800a8a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 fd66 	bl	800b36c <vPortFree>
	}
 800a8a0:	e010      	b.n	800a8c4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	d00b      	beq.n	800a8c4 <prvDeleteTCB+0x58>
 800a8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b0:	b672      	cpsid	i
 800a8b2:	f383 8811 	msr	BASEPRI, r3
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	b662      	cpsie	i
 800a8c0:	60fb      	str	r3, [r7, #12]
 800a8c2:	e7fe      	b.n	800a8c2 <prvDeleteTCB+0x56>
	}
 800a8c4:	bf00      	nop
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8d2:	4b0c      	ldr	r3, [pc, #48]	; (800a904 <prvResetNextTaskUnblockTime+0x38>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d104      	bne.n	800a8e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a8dc:	4b0a      	ldr	r3, [pc, #40]	; (800a908 <prvResetNextTaskUnblockTime+0x3c>)
 800a8de:	f04f 32ff 	mov.w	r2, #4294967295
 800a8e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a8e4:	e008      	b.n	800a8f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8e6:	4b07      	ldr	r3, [pc, #28]	; (800a904 <prvResetNextTaskUnblockTime+0x38>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	68db      	ldr	r3, [r3, #12]
 800a8ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	4a04      	ldr	r2, [pc, #16]	; (800a908 <prvResetNextTaskUnblockTime+0x3c>)
 800a8f6:	6013      	str	r3, [r2, #0]
}
 800a8f8:	bf00      	nop
 800a8fa:	370c      	adds	r7, #12
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr
 800a904:	2000071c 	.word	0x2000071c
 800a908:	20000784 	.word	0x20000784

0800a90c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a912:	4b0b      	ldr	r3, [pc, #44]	; (800a940 <xTaskGetSchedulerState+0x34>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d102      	bne.n	800a920 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a91a:	2301      	movs	r3, #1
 800a91c:	607b      	str	r3, [r7, #4]
 800a91e:	e008      	b.n	800a932 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a920:	4b08      	ldr	r3, [pc, #32]	; (800a944 <xTaskGetSchedulerState+0x38>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d102      	bne.n	800a92e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a928:	2302      	movs	r3, #2
 800a92a:	607b      	str	r3, [r7, #4]
 800a92c:	e001      	b.n	800a932 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a92e:	2300      	movs	r3, #0
 800a930:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a932:	687b      	ldr	r3, [r7, #4]
	}
 800a934:	4618      	mov	r0, r3
 800a936:	370c      	adds	r7, #12
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr
 800a940:	20000770 	.word	0x20000770
 800a944:	2000078c 	.word	0x2000078c

0800a948 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a954:	2300      	movs	r3, #0
 800a956:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d069      	beq.n	800aa32 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a962:	4b36      	ldr	r3, [pc, #216]	; (800aa3c <xTaskPriorityInherit+0xf4>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a968:	429a      	cmp	r2, r3
 800a96a:	d259      	bcs.n	800aa20 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	699b      	ldr	r3, [r3, #24]
 800a970:	2b00      	cmp	r3, #0
 800a972:	db06      	blt.n	800a982 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a974:	4b31      	ldr	r3, [pc, #196]	; (800aa3c <xTaskPriorityInherit+0xf4>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a97a:	f1c3 0207 	rsb	r2, r3, #7
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	6959      	ldr	r1, [r3, #20]
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a98a:	4613      	mov	r3, r2
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	4413      	add	r3, r2
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	4a2b      	ldr	r2, [pc, #172]	; (800aa40 <xTaskPriorityInherit+0xf8>)
 800a994:	4413      	add	r3, r2
 800a996:	4299      	cmp	r1, r3
 800a998:	d13a      	bne.n	800aa10 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	3304      	adds	r3, #4
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fe f9ab 	bl	8008cfa <uxListRemove>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d115      	bne.n	800a9d6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ae:	4924      	ldr	r1, [pc, #144]	; (800aa40 <xTaskPriorityInherit+0xf8>)
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	009b      	lsls	r3, r3, #2
 800a9b4:	4413      	add	r3, r2
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	440b      	add	r3, r1
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d10a      	bne.n	800a9d6 <xTaskPriorityInherit+0x8e>
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ca:	43da      	mvns	r2, r3
 800a9cc:	4b1d      	ldr	r3, [pc, #116]	; (800aa44 <xTaskPriorityInherit+0xfc>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4013      	ands	r3, r2
 800a9d2:	4a1c      	ldr	r2, [pc, #112]	; (800aa44 <xTaskPriorityInherit+0xfc>)
 800a9d4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a9d6:	4b19      	ldr	r3, [pc, #100]	; (800aa3c <xTaskPriorityInherit+0xf4>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	409a      	lsls	r2, r3
 800a9e8:	4b16      	ldr	r3, [pc, #88]	; (800aa44 <xTaskPriorityInherit+0xfc>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	4a15      	ldr	r2, [pc, #84]	; (800aa44 <xTaskPriorityInherit+0xfc>)
 800a9f0:	6013      	str	r3, [r2, #0]
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	4413      	add	r3, r2
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	4a10      	ldr	r2, [pc, #64]	; (800aa40 <xTaskPriorityInherit+0xf8>)
 800aa00:	441a      	add	r2, r3
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	3304      	adds	r3, #4
 800aa06:	4619      	mov	r1, r3
 800aa08:	4610      	mov	r0, r2
 800aa0a:	f7fe f919 	bl	8008c40 <vListInsertEnd>
 800aa0e:	e004      	b.n	800aa1a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aa10:	4b0a      	ldr	r3, [pc, #40]	; (800aa3c <xTaskPriorityInherit+0xf4>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	60fb      	str	r3, [r7, #12]
 800aa1e:	e008      	b.n	800aa32 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa24:	4b05      	ldr	r3, [pc, #20]	; (800aa3c <xTaskPriorityInherit+0xf4>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d201      	bcs.n	800aa32 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa32:	68fb      	ldr	r3, [r7, #12]
	}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3710      	adds	r7, #16
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	20000664 	.word	0x20000664
 800aa40:	20000668 	.word	0x20000668
 800aa44:	2000076c 	.word	0x2000076c

0800aa48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aa54:	2300      	movs	r3, #0
 800aa56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d070      	beq.n	800ab40 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aa5e:	4b3b      	ldr	r3, [pc, #236]	; (800ab4c <xTaskPriorityDisinherit+0x104>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	693a      	ldr	r2, [r7, #16]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d00b      	beq.n	800aa80 <xTaskPriorityDisinherit+0x38>
 800aa68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6c:	b672      	cpsid	i
 800aa6e:	f383 8811 	msr	BASEPRI, r3
 800aa72:	f3bf 8f6f 	isb	sy
 800aa76:	f3bf 8f4f 	dsb	sy
 800aa7a:	b662      	cpsie	i
 800aa7c:	60fb      	str	r3, [r7, #12]
 800aa7e:	e7fe      	b.n	800aa7e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10b      	bne.n	800aaa0 <xTaskPriorityDisinherit+0x58>
 800aa88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8c:	b672      	cpsid	i
 800aa8e:	f383 8811 	msr	BASEPRI, r3
 800aa92:	f3bf 8f6f 	isb	sy
 800aa96:	f3bf 8f4f 	dsb	sy
 800aa9a:	b662      	cpsie	i
 800aa9c:	60bb      	str	r3, [r7, #8]
 800aa9e:	e7fe      	b.n	800aa9e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aaa4:	1e5a      	subs	r2, r3, #1
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d044      	beq.n	800ab40 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d140      	bne.n	800ab40 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	3304      	adds	r3, #4
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fe f919 	bl	8008cfa <uxListRemove>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d115      	bne.n	800aafa <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aad2:	491f      	ldr	r1, [pc, #124]	; (800ab50 <xTaskPriorityDisinherit+0x108>)
 800aad4:	4613      	mov	r3, r2
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	4413      	add	r3, r2
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	440b      	add	r3, r1
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d10a      	bne.n	800aafa <xTaskPriorityDisinherit+0xb2>
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae8:	2201      	movs	r2, #1
 800aaea:	fa02 f303 	lsl.w	r3, r2, r3
 800aaee:	43da      	mvns	r2, r3
 800aaf0:	4b18      	ldr	r3, [pc, #96]	; (800ab54 <xTaskPriorityDisinherit+0x10c>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4013      	ands	r3, r2
 800aaf6:	4a17      	ldr	r2, [pc, #92]	; (800ab54 <xTaskPriorityDisinherit+0x10c>)
 800aaf8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab06:	f1c3 0207 	rsb	r2, r3, #7
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab12:	2201      	movs	r2, #1
 800ab14:	409a      	lsls	r2, r3
 800ab16:	4b0f      	ldr	r3, [pc, #60]	; (800ab54 <xTaskPriorityDisinherit+0x10c>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	4a0d      	ldr	r2, [pc, #52]	; (800ab54 <xTaskPriorityDisinherit+0x10c>)
 800ab1e:	6013      	str	r3, [r2, #0]
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab24:	4613      	mov	r3, r2
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	4413      	add	r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	4a08      	ldr	r2, [pc, #32]	; (800ab50 <xTaskPriorityDisinherit+0x108>)
 800ab2e:	441a      	add	r2, r3
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	3304      	adds	r3, #4
 800ab34:	4619      	mov	r1, r3
 800ab36:	4610      	mov	r0, r2
 800ab38:	f7fe f882 	bl	8008c40 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab40:	697b      	ldr	r3, [r7, #20]
	}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3718      	adds	r7, #24
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	20000664 	.word	0x20000664
 800ab50:	20000668 	.word	0x20000668
 800ab54:	2000076c 	.word	0x2000076c

0800ab58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b088      	sub	sp, #32
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ab66:	2301      	movs	r3, #1
 800ab68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f000 8085 	beq.w	800ac7c <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ab72:	69bb      	ldr	r3, [r7, #24]
 800ab74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d10b      	bne.n	800ab92 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800ab7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7e:	b672      	cpsid	i
 800ab80:	f383 8811 	msr	BASEPRI, r3
 800ab84:	f3bf 8f6f 	isb	sy
 800ab88:	f3bf 8f4f 	dsb	sy
 800ab8c:	b662      	cpsie	i
 800ab8e:	60fb      	str	r3, [r7, #12]
 800ab90:	e7fe      	b.n	800ab90 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab96:	683a      	ldr	r2, [r7, #0]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d902      	bls.n	800aba2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	61fb      	str	r3, [r7, #28]
 800aba0:	e002      	b.n	800aba8 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aba6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800aba8:	69bb      	ldr	r3, [r7, #24]
 800abaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abac:	69fa      	ldr	r2, [r7, #28]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d064      	beq.n	800ac7c <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abb6:	697a      	ldr	r2, [r7, #20]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d15f      	bne.n	800ac7c <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800abbc:	4b31      	ldr	r3, [pc, #196]	; (800ac84 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	69ba      	ldr	r2, [r7, #24]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d10b      	bne.n	800abde <vTaskPriorityDisinheritAfterTimeout+0x86>
 800abc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abca:	b672      	cpsid	i
 800abcc:	f383 8811 	msr	BASEPRI, r3
 800abd0:	f3bf 8f6f 	isb	sy
 800abd4:	f3bf 8f4f 	dsb	sy
 800abd8:	b662      	cpsie	i
 800abda:	60bb      	str	r3, [r7, #8]
 800abdc:	e7fe      	b.n	800abdc <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	69fa      	ldr	r2, [r7, #28]
 800abe8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	699b      	ldr	r3, [r3, #24]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	db04      	blt.n	800abfc <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	f1c3 0207 	rsb	r2, r3, #7
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	6959      	ldr	r1, [r3, #20]
 800ac00:	693a      	ldr	r2, [r7, #16]
 800ac02:	4613      	mov	r3, r2
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	4413      	add	r3, r2
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	4a1f      	ldr	r2, [pc, #124]	; (800ac88 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ac0c:	4413      	add	r3, r2
 800ac0e:	4299      	cmp	r1, r3
 800ac10:	d134      	bne.n	800ac7c <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac12:	69bb      	ldr	r3, [r7, #24]
 800ac14:	3304      	adds	r3, #4
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7fe f86f 	bl	8008cfa <uxListRemove>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d115      	bne.n	800ac4e <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac26:	4918      	ldr	r1, [pc, #96]	; (800ac88 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ac28:	4613      	mov	r3, r2
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	4413      	add	r3, r2
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	440b      	add	r3, r1
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d10a      	bne.n	800ac4e <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac42:	43da      	mvns	r2, r3
 800ac44:	4b11      	ldr	r3, [pc, #68]	; (800ac8c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4013      	ands	r3, r2
 800ac4a:	4a10      	ldr	r2, [pc, #64]	; (800ac8c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ac4c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac52:	2201      	movs	r2, #1
 800ac54:	409a      	lsls	r2, r3
 800ac56:	4b0d      	ldr	r3, [pc, #52]	; (800ac8c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	4a0b      	ldr	r2, [pc, #44]	; (800ac8c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ac5e:	6013      	str	r3, [r2, #0]
 800ac60:	69bb      	ldr	r3, [r7, #24]
 800ac62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac64:	4613      	mov	r3, r2
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	4413      	add	r3, r2
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4a06      	ldr	r2, [pc, #24]	; (800ac88 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ac6e:	441a      	add	r2, r3
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	3304      	adds	r3, #4
 800ac74:	4619      	mov	r1, r3
 800ac76:	4610      	mov	r0, r2
 800ac78:	f7fd ffe2 	bl	8008c40 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac7c:	bf00      	nop
 800ac7e:	3720      	adds	r7, #32
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	20000664 	.word	0x20000664
 800ac88:	20000668 	.word	0x20000668
 800ac8c:	2000076c 	.word	0x2000076c

0800ac90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ac90:	b480      	push	{r7}
 800ac92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ac94:	4b07      	ldr	r3, [pc, #28]	; (800acb4 <pvTaskIncrementMutexHeldCount+0x24>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d004      	beq.n	800aca6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ac9c:	4b05      	ldr	r3, [pc, #20]	; (800acb4 <pvTaskIncrementMutexHeldCount+0x24>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aca2:	3201      	adds	r2, #1
 800aca4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800aca6:	4b03      	ldr	r3, [pc, #12]	; (800acb4 <pvTaskIncrementMutexHeldCount+0x24>)
 800aca8:	681b      	ldr	r3, [r3, #0]
	}
 800acaa:	4618      	mov	r0, r3
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr
 800acb4:	20000664 	.word	0x20000664

0800acb8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800acc2:	4b29      	ldr	r3, [pc, #164]	; (800ad68 <prvAddCurrentTaskToDelayedList+0xb0>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acc8:	4b28      	ldr	r3, [pc, #160]	; (800ad6c <prvAddCurrentTaskToDelayedList+0xb4>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	3304      	adds	r3, #4
 800acce:	4618      	mov	r0, r3
 800acd0:	f7fe f813 	bl	8008cfa <uxListRemove>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d10b      	bne.n	800acf2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800acda:	4b24      	ldr	r3, [pc, #144]	; (800ad6c <prvAddCurrentTaskToDelayedList+0xb4>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace0:	2201      	movs	r2, #1
 800ace2:	fa02 f303 	lsl.w	r3, r2, r3
 800ace6:	43da      	mvns	r2, r3
 800ace8:	4b21      	ldr	r3, [pc, #132]	; (800ad70 <prvAddCurrentTaskToDelayedList+0xb8>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4013      	ands	r3, r2
 800acee:	4a20      	ldr	r2, [pc, #128]	; (800ad70 <prvAddCurrentTaskToDelayedList+0xb8>)
 800acf0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf8:	d10a      	bne.n	800ad10 <prvAddCurrentTaskToDelayedList+0x58>
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d007      	beq.n	800ad10 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad00:	4b1a      	ldr	r3, [pc, #104]	; (800ad6c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	3304      	adds	r3, #4
 800ad06:	4619      	mov	r1, r3
 800ad08:	481a      	ldr	r0, [pc, #104]	; (800ad74 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ad0a:	f7fd ff99 	bl	8008c40 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad0e:	e026      	b.n	800ad5e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4413      	add	r3, r2
 800ad16:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad18:	4b14      	ldr	r3, [pc, #80]	; (800ad6c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad20:	68ba      	ldr	r2, [r7, #8]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d209      	bcs.n	800ad3c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad28:	4b13      	ldr	r3, [pc, #76]	; (800ad78 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	4b0f      	ldr	r3, [pc, #60]	; (800ad6c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	3304      	adds	r3, #4
 800ad32:	4619      	mov	r1, r3
 800ad34:	4610      	mov	r0, r2
 800ad36:	f7fd ffa7 	bl	8008c88 <vListInsert>
}
 800ad3a:	e010      	b.n	800ad5e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad3c:	4b0f      	ldr	r3, [pc, #60]	; (800ad7c <prvAddCurrentTaskToDelayedList+0xc4>)
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	4b0a      	ldr	r3, [pc, #40]	; (800ad6c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	3304      	adds	r3, #4
 800ad46:	4619      	mov	r1, r3
 800ad48:	4610      	mov	r0, r2
 800ad4a:	f7fd ff9d 	bl	8008c88 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ad4e:	4b0c      	ldr	r3, [pc, #48]	; (800ad80 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	68ba      	ldr	r2, [r7, #8]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d202      	bcs.n	800ad5e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ad58:	4a09      	ldr	r2, [pc, #36]	; (800ad80 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	6013      	str	r3, [r2, #0]
}
 800ad5e:	bf00      	nop
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	20000768 	.word	0x20000768
 800ad6c:	20000664 	.word	0x20000664
 800ad70:	2000076c 	.word	0x2000076c
 800ad74:	20000750 	.word	0x20000750
 800ad78:	20000720 	.word	0x20000720
 800ad7c:	2000071c 	.word	0x2000071c
 800ad80:	20000784 	.word	0x20000784

0800ad84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	60b9      	str	r1, [r7, #8]
 800ad8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	3b04      	subs	r3, #4
 800ad94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ad9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	3b04      	subs	r3, #4
 800ada2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	f023 0201 	bic.w	r2, r3, #1
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	3b04      	subs	r3, #4
 800adb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800adb4:	4a0c      	ldr	r2, [pc, #48]	; (800ade8 <pxPortInitialiseStack+0x64>)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	3b14      	subs	r3, #20
 800adbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	3b04      	subs	r3, #4
 800adca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f06f 0202 	mvn.w	r2, #2
 800add2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	3b20      	subs	r3, #32
 800add8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800adda:	68fb      	ldr	r3, [r7, #12]
}
 800addc:	4618      	mov	r0, r3
 800adde:	3714      	adds	r7, #20
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr
 800ade8:	0800aded 	.word	0x0800aded

0800adec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800adec:	b480      	push	{r7}
 800adee:	b085      	sub	sp, #20
 800adf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800adf2:	2300      	movs	r3, #0
 800adf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800adf6:	4b13      	ldr	r3, [pc, #76]	; (800ae44 <prvTaskExitError+0x58>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adfe:	d00b      	beq.n	800ae18 <prvTaskExitError+0x2c>
 800ae00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae04:	b672      	cpsid	i
 800ae06:	f383 8811 	msr	BASEPRI, r3
 800ae0a:	f3bf 8f6f 	isb	sy
 800ae0e:	f3bf 8f4f 	dsb	sy
 800ae12:	b662      	cpsie	i
 800ae14:	60fb      	str	r3, [r7, #12]
 800ae16:	e7fe      	b.n	800ae16 <prvTaskExitError+0x2a>
 800ae18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1c:	b672      	cpsid	i
 800ae1e:	f383 8811 	msr	BASEPRI, r3
 800ae22:	f3bf 8f6f 	isb	sy
 800ae26:	f3bf 8f4f 	dsb	sy
 800ae2a:	b662      	cpsie	i
 800ae2c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ae2e:	bf00      	nop
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d0fc      	beq.n	800ae30 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ae36:	bf00      	nop
 800ae38:	3714      	adds	r7, #20
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr
 800ae42:	bf00      	nop
 800ae44:	2000000c 	.word	0x2000000c
	...

0800ae50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ae50:	4b07      	ldr	r3, [pc, #28]	; (800ae70 <pxCurrentTCBConst2>)
 800ae52:	6819      	ldr	r1, [r3, #0]
 800ae54:	6808      	ldr	r0, [r1, #0]
 800ae56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae5a:	f380 8809 	msr	PSP, r0
 800ae5e:	f3bf 8f6f 	isb	sy
 800ae62:	f04f 0000 	mov.w	r0, #0
 800ae66:	f380 8811 	msr	BASEPRI, r0
 800ae6a:	4770      	bx	lr
 800ae6c:	f3af 8000 	nop.w

0800ae70 <pxCurrentTCBConst2>:
 800ae70:	20000664 	.word	0x20000664
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ae74:	bf00      	nop
 800ae76:	bf00      	nop

0800ae78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ae78:	4808      	ldr	r0, [pc, #32]	; (800ae9c <prvPortStartFirstTask+0x24>)
 800ae7a:	6800      	ldr	r0, [r0, #0]
 800ae7c:	6800      	ldr	r0, [r0, #0]
 800ae7e:	f380 8808 	msr	MSP, r0
 800ae82:	f04f 0000 	mov.w	r0, #0
 800ae86:	f380 8814 	msr	CONTROL, r0
 800ae8a:	b662      	cpsie	i
 800ae8c:	b661      	cpsie	f
 800ae8e:	f3bf 8f4f 	dsb	sy
 800ae92:	f3bf 8f6f 	isb	sy
 800ae96:	df00      	svc	0
 800ae98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ae9a:	bf00      	nop
 800ae9c:	e000ed08 	.word	0xe000ed08

0800aea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aea6:	4b36      	ldr	r3, [pc, #216]	; (800af80 <xPortStartScheduler+0xe0>)
 800aea8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	22ff      	movs	r2, #255	; 0xff
 800aeb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aec0:	78fb      	ldrb	r3, [r7, #3]
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aec8:	b2da      	uxtb	r2, r3
 800aeca:	4b2e      	ldr	r3, [pc, #184]	; (800af84 <xPortStartScheduler+0xe4>)
 800aecc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aece:	4b2e      	ldr	r3, [pc, #184]	; (800af88 <xPortStartScheduler+0xe8>)
 800aed0:	2207      	movs	r2, #7
 800aed2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aed4:	e009      	b.n	800aeea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800aed6:	4b2c      	ldr	r3, [pc, #176]	; (800af88 <xPortStartScheduler+0xe8>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	3b01      	subs	r3, #1
 800aedc:	4a2a      	ldr	r2, [pc, #168]	; (800af88 <xPortStartScheduler+0xe8>)
 800aede:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aee0:	78fb      	ldrb	r3, [r7, #3]
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	005b      	lsls	r3, r3, #1
 800aee6:	b2db      	uxtb	r3, r3
 800aee8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aeea:	78fb      	ldrb	r3, [r7, #3]
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aef2:	2b80      	cmp	r3, #128	; 0x80
 800aef4:	d0ef      	beq.n	800aed6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aef6:	4b24      	ldr	r3, [pc, #144]	; (800af88 <xPortStartScheduler+0xe8>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f1c3 0307 	rsb	r3, r3, #7
 800aefe:	2b04      	cmp	r3, #4
 800af00:	d00b      	beq.n	800af1a <xPortStartScheduler+0x7a>
 800af02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af06:	b672      	cpsid	i
 800af08:	f383 8811 	msr	BASEPRI, r3
 800af0c:	f3bf 8f6f 	isb	sy
 800af10:	f3bf 8f4f 	dsb	sy
 800af14:	b662      	cpsie	i
 800af16:	60bb      	str	r3, [r7, #8]
 800af18:	e7fe      	b.n	800af18 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800af1a:	4b1b      	ldr	r3, [pc, #108]	; (800af88 <xPortStartScheduler+0xe8>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	021b      	lsls	r3, r3, #8
 800af20:	4a19      	ldr	r2, [pc, #100]	; (800af88 <xPortStartScheduler+0xe8>)
 800af22:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800af24:	4b18      	ldr	r3, [pc, #96]	; (800af88 <xPortStartScheduler+0xe8>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af2c:	4a16      	ldr	r2, [pc, #88]	; (800af88 <xPortStartScheduler+0xe8>)
 800af2e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	b2da      	uxtb	r2, r3
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800af38:	4b14      	ldr	r3, [pc, #80]	; (800af8c <xPortStartScheduler+0xec>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a13      	ldr	r2, [pc, #76]	; (800af8c <xPortStartScheduler+0xec>)
 800af3e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800af42:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800af44:	4b11      	ldr	r3, [pc, #68]	; (800af8c <xPortStartScheduler+0xec>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a10      	ldr	r2, [pc, #64]	; (800af8c <xPortStartScheduler+0xec>)
 800af4a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800af4e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800af50:	f000 f8d4 	bl	800b0fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800af54:	4b0e      	ldr	r3, [pc, #56]	; (800af90 <xPortStartScheduler+0xf0>)
 800af56:	2200      	movs	r2, #0
 800af58:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800af5a:	f000 f8f3 	bl	800b144 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800af5e:	4b0d      	ldr	r3, [pc, #52]	; (800af94 <xPortStartScheduler+0xf4>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4a0c      	ldr	r2, [pc, #48]	; (800af94 <xPortStartScheduler+0xf4>)
 800af64:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800af68:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800af6a:	f7ff ff85 	bl	800ae78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800af6e:	f7ff fa67 	bl	800a440 <vTaskSwitchContext>
	prvTaskExitError();
 800af72:	f7ff ff3b 	bl	800adec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	e000e400 	.word	0xe000e400
 800af84:	20000790 	.word	0x20000790
 800af88:	20000794 	.word	0x20000794
 800af8c:	e000ed20 	.word	0xe000ed20
 800af90:	2000000c 	.word	0x2000000c
 800af94:	e000ef34 	.word	0xe000ef34

0800af98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa2:	b672      	cpsid	i
 800afa4:	f383 8811 	msr	BASEPRI, r3
 800afa8:	f3bf 8f6f 	isb	sy
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	b662      	cpsie	i
 800afb2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800afb4:	4b0f      	ldr	r3, [pc, #60]	; (800aff4 <vPortEnterCritical+0x5c>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	3301      	adds	r3, #1
 800afba:	4a0e      	ldr	r2, [pc, #56]	; (800aff4 <vPortEnterCritical+0x5c>)
 800afbc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800afbe:	4b0d      	ldr	r3, [pc, #52]	; (800aff4 <vPortEnterCritical+0x5c>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d110      	bne.n	800afe8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800afc6:	4b0c      	ldr	r3, [pc, #48]	; (800aff8 <vPortEnterCritical+0x60>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d00b      	beq.n	800afe8 <vPortEnterCritical+0x50>
 800afd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd4:	b672      	cpsid	i
 800afd6:	f383 8811 	msr	BASEPRI, r3
 800afda:	f3bf 8f6f 	isb	sy
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	b662      	cpsie	i
 800afe4:	603b      	str	r3, [r7, #0]
 800afe6:	e7fe      	b.n	800afe6 <vPortEnterCritical+0x4e>
	}
}
 800afe8:	bf00      	nop
 800afea:	370c      	adds	r7, #12
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr
 800aff4:	2000000c 	.word	0x2000000c
 800aff8:	e000ed04 	.word	0xe000ed04

0800affc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b002:	4b12      	ldr	r3, [pc, #72]	; (800b04c <vPortExitCritical+0x50>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d10b      	bne.n	800b022 <vPortExitCritical+0x26>
 800b00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00e:	b672      	cpsid	i
 800b010:	f383 8811 	msr	BASEPRI, r3
 800b014:	f3bf 8f6f 	isb	sy
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	b662      	cpsie	i
 800b01e:	607b      	str	r3, [r7, #4]
 800b020:	e7fe      	b.n	800b020 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800b022:	4b0a      	ldr	r3, [pc, #40]	; (800b04c <vPortExitCritical+0x50>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	3b01      	subs	r3, #1
 800b028:	4a08      	ldr	r2, [pc, #32]	; (800b04c <vPortExitCritical+0x50>)
 800b02a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b02c:	4b07      	ldr	r3, [pc, #28]	; (800b04c <vPortExitCritical+0x50>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d104      	bne.n	800b03e <vPortExitCritical+0x42>
 800b034:	2300      	movs	r3, #0
 800b036:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b03e:	bf00      	nop
 800b040:	370c      	adds	r7, #12
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr
 800b04a:	bf00      	nop
 800b04c:	2000000c 	.word	0x2000000c

0800b050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b050:	f3ef 8009 	mrs	r0, PSP
 800b054:	f3bf 8f6f 	isb	sy
 800b058:	4b15      	ldr	r3, [pc, #84]	; (800b0b0 <pxCurrentTCBConst>)
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	f01e 0f10 	tst.w	lr, #16
 800b060:	bf08      	it	eq
 800b062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b06a:	6010      	str	r0, [r2, #0]
 800b06c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b070:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b074:	b672      	cpsid	i
 800b076:	f380 8811 	msr	BASEPRI, r0
 800b07a:	f3bf 8f4f 	dsb	sy
 800b07e:	f3bf 8f6f 	isb	sy
 800b082:	b662      	cpsie	i
 800b084:	f7ff f9dc 	bl	800a440 <vTaskSwitchContext>
 800b088:	f04f 0000 	mov.w	r0, #0
 800b08c:	f380 8811 	msr	BASEPRI, r0
 800b090:	bc09      	pop	{r0, r3}
 800b092:	6819      	ldr	r1, [r3, #0]
 800b094:	6808      	ldr	r0, [r1, #0]
 800b096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b09a:	f01e 0f10 	tst.w	lr, #16
 800b09e:	bf08      	it	eq
 800b0a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b0a4:	f380 8809 	msr	PSP, r0
 800b0a8:	f3bf 8f6f 	isb	sy
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop

0800b0b0 <pxCurrentTCBConst>:
 800b0b0:	20000664 	.word	0x20000664
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b0b4:	bf00      	nop
 800b0b6:	bf00      	nop

0800b0b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
	__asm volatile
 800b0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c2:	b672      	cpsid	i
 800b0c4:	f383 8811 	msr	BASEPRI, r3
 800b0c8:	f3bf 8f6f 	isb	sy
 800b0cc:	f3bf 8f4f 	dsb	sy
 800b0d0:	b662      	cpsie	i
 800b0d2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b0d4:	f7ff f8fa 	bl	800a2cc <xTaskIncrementTick>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d003      	beq.n	800b0e6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b0de:	4b06      	ldr	r3, [pc, #24]	; (800b0f8 <SysTick_Handler+0x40>)
 800b0e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0e4:	601a      	str	r2, [r3, #0]
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b0f0:	bf00      	nop
 800b0f2:	3708      	adds	r7, #8
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	e000ed04 	.word	0xe000ed04

0800b0fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b100:	4b0b      	ldr	r3, [pc, #44]	; (800b130 <vPortSetupTimerInterrupt+0x34>)
 800b102:	2200      	movs	r2, #0
 800b104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b106:	4b0b      	ldr	r3, [pc, #44]	; (800b134 <vPortSetupTimerInterrupt+0x38>)
 800b108:	2200      	movs	r2, #0
 800b10a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b10c:	4b0a      	ldr	r3, [pc, #40]	; (800b138 <vPortSetupTimerInterrupt+0x3c>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a0a      	ldr	r2, [pc, #40]	; (800b13c <vPortSetupTimerInterrupt+0x40>)
 800b112:	fba2 2303 	umull	r2, r3, r2, r3
 800b116:	099b      	lsrs	r3, r3, #6
 800b118:	4a09      	ldr	r2, [pc, #36]	; (800b140 <vPortSetupTimerInterrupt+0x44>)
 800b11a:	3b01      	subs	r3, #1
 800b11c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b11e:	4b04      	ldr	r3, [pc, #16]	; (800b130 <vPortSetupTimerInterrupt+0x34>)
 800b120:	2207      	movs	r2, #7
 800b122:	601a      	str	r2, [r3, #0]
}
 800b124:	bf00      	nop
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr
 800b12e:	bf00      	nop
 800b130:	e000e010 	.word	0xe000e010
 800b134:	e000e018 	.word	0xe000e018
 800b138:	20000000 	.word	0x20000000
 800b13c:	10624dd3 	.word	0x10624dd3
 800b140:	e000e014 	.word	0xe000e014

0800b144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b144:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b154 <vPortEnableVFP+0x10>
 800b148:	6801      	ldr	r1, [r0, #0]
 800b14a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b14e:	6001      	str	r1, [r0, #0]
 800b150:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b152:	bf00      	nop
 800b154:	e000ed88 	.word	0xe000ed88

0800b158 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b158:	b480      	push	{r7}
 800b15a:	b085      	sub	sp, #20
 800b15c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b15e:	f3ef 8305 	mrs	r3, IPSR
 800b162:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2b0f      	cmp	r3, #15
 800b168:	d915      	bls.n	800b196 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b16a:	4a18      	ldr	r2, [pc, #96]	; (800b1cc <vPortValidateInterruptPriority+0x74>)
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	4413      	add	r3, r2
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b174:	4b16      	ldr	r3, [pc, #88]	; (800b1d0 <vPortValidateInterruptPriority+0x78>)
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	7afa      	ldrb	r2, [r7, #11]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d20b      	bcs.n	800b196 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b182:	b672      	cpsid	i
 800b184:	f383 8811 	msr	BASEPRI, r3
 800b188:	f3bf 8f6f 	isb	sy
 800b18c:	f3bf 8f4f 	dsb	sy
 800b190:	b662      	cpsie	i
 800b192:	607b      	str	r3, [r7, #4]
 800b194:	e7fe      	b.n	800b194 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b196:	4b0f      	ldr	r3, [pc, #60]	; (800b1d4 <vPortValidateInterruptPriority+0x7c>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b19e:	4b0e      	ldr	r3, [pc, #56]	; (800b1d8 <vPortValidateInterruptPriority+0x80>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d90b      	bls.n	800b1be <vPortValidateInterruptPriority+0x66>
 800b1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1aa:	b672      	cpsid	i
 800b1ac:	f383 8811 	msr	BASEPRI, r3
 800b1b0:	f3bf 8f6f 	isb	sy
 800b1b4:	f3bf 8f4f 	dsb	sy
 800b1b8:	b662      	cpsie	i
 800b1ba:	603b      	str	r3, [r7, #0]
 800b1bc:	e7fe      	b.n	800b1bc <vPortValidateInterruptPriority+0x64>
	}
 800b1be:	bf00      	nop
 800b1c0:	3714      	adds	r7, #20
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop
 800b1cc:	e000e3f0 	.word	0xe000e3f0
 800b1d0:	20000790 	.word	0x20000790
 800b1d4:	e000ed0c 	.word	0xe000ed0c
 800b1d8:	20000794 	.word	0x20000794

0800b1dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b08a      	sub	sp, #40	; 0x28
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b1e8:	f7fe ffa2 	bl	800a130 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b1ec:	4b5a      	ldr	r3, [pc, #360]	; (800b358 <pvPortMalloc+0x17c>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d101      	bne.n	800b1f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b1f4:	f000 f916 	bl	800b424 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b1f8:	4b58      	ldr	r3, [pc, #352]	; (800b35c <pvPortMalloc+0x180>)
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	4013      	ands	r3, r2
 800b200:	2b00      	cmp	r3, #0
 800b202:	f040 8090 	bne.w	800b326 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d01e      	beq.n	800b24a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b20c:	2208      	movs	r2, #8
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	4413      	add	r3, r2
 800b212:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f003 0307 	and.w	r3, r3, #7
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d015      	beq.n	800b24a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f023 0307 	bic.w	r3, r3, #7
 800b224:	3308      	adds	r3, #8
 800b226:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f003 0307 	and.w	r3, r3, #7
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00b      	beq.n	800b24a <pvPortMalloc+0x6e>
 800b232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b236:	b672      	cpsid	i
 800b238:	f383 8811 	msr	BASEPRI, r3
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	f3bf 8f4f 	dsb	sy
 800b244:	b662      	cpsie	i
 800b246:	617b      	str	r3, [r7, #20]
 800b248:	e7fe      	b.n	800b248 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d06a      	beq.n	800b326 <pvPortMalloc+0x14a>
 800b250:	4b43      	ldr	r3, [pc, #268]	; (800b360 <pvPortMalloc+0x184>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	429a      	cmp	r2, r3
 800b258:	d865      	bhi.n	800b326 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b25a:	4b42      	ldr	r3, [pc, #264]	; (800b364 <pvPortMalloc+0x188>)
 800b25c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b25e:	4b41      	ldr	r3, [pc, #260]	; (800b364 <pvPortMalloc+0x188>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b264:	e004      	b.n	800b270 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b268:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	429a      	cmp	r2, r3
 800b278:	d903      	bls.n	800b282 <pvPortMalloc+0xa6>
 800b27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d1f1      	bne.n	800b266 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b282:	4b35      	ldr	r3, [pc, #212]	; (800b358 <pvPortMalloc+0x17c>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b288:	429a      	cmp	r2, r3
 800b28a:	d04c      	beq.n	800b326 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b28c:	6a3b      	ldr	r3, [r7, #32]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	2208      	movs	r2, #8
 800b292:	4413      	add	r3, r2
 800b294:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	6a3b      	ldr	r3, [r7, #32]
 800b29c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a0:	685a      	ldr	r2, [r3, #4]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	1ad2      	subs	r2, r2, r3
 800b2a6:	2308      	movs	r3, #8
 800b2a8:	005b      	lsls	r3, r3, #1
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d920      	bls.n	800b2f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b2ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	4413      	add	r3, r2
 800b2b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	f003 0307 	and.w	r3, r3, #7
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00b      	beq.n	800b2d8 <pvPortMalloc+0xfc>
 800b2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c4:	b672      	cpsid	i
 800b2c6:	f383 8811 	msr	BASEPRI, r3
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	b662      	cpsie	i
 800b2d4:	613b      	str	r3, [r7, #16]
 800b2d6:	e7fe      	b.n	800b2d6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2da:	685a      	ldr	r2, [r3, #4]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	1ad2      	subs	r2, r2, r3
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b2ea:	69b8      	ldr	r0, [r7, #24]
 800b2ec:	f000 f8fc 	bl	800b4e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b2f0:	4b1b      	ldr	r3, [pc, #108]	; (800b360 <pvPortMalloc+0x184>)
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	1ad3      	subs	r3, r2, r3
 800b2fa:	4a19      	ldr	r2, [pc, #100]	; (800b360 <pvPortMalloc+0x184>)
 800b2fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b2fe:	4b18      	ldr	r3, [pc, #96]	; (800b360 <pvPortMalloc+0x184>)
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	4b19      	ldr	r3, [pc, #100]	; (800b368 <pvPortMalloc+0x18c>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	429a      	cmp	r2, r3
 800b308:	d203      	bcs.n	800b312 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b30a:	4b15      	ldr	r3, [pc, #84]	; (800b360 <pvPortMalloc+0x184>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a16      	ldr	r2, [pc, #88]	; (800b368 <pvPortMalloc+0x18c>)
 800b310:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b314:	685a      	ldr	r2, [r3, #4]
 800b316:	4b11      	ldr	r3, [pc, #68]	; (800b35c <pvPortMalloc+0x180>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	431a      	orrs	r2, r3
 800b31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b322:	2200      	movs	r2, #0
 800b324:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b326:	f7fe ff11 	bl	800a14c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	f003 0307 	and.w	r3, r3, #7
 800b330:	2b00      	cmp	r3, #0
 800b332:	d00b      	beq.n	800b34c <pvPortMalloc+0x170>
 800b334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b338:	b672      	cpsid	i
 800b33a:	f383 8811 	msr	BASEPRI, r3
 800b33e:	f3bf 8f6f 	isb	sy
 800b342:	f3bf 8f4f 	dsb	sy
 800b346:	b662      	cpsie	i
 800b348:	60fb      	str	r3, [r7, #12]
 800b34a:	e7fe      	b.n	800b34a <pvPortMalloc+0x16e>
	return pvReturn;
 800b34c:	69fb      	ldr	r3, [r7, #28]
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3728      	adds	r7, #40	; 0x28
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	200087a0 	.word	0x200087a0
 800b35c:	200087ac 	.word	0x200087ac
 800b360:	200087a4 	.word	0x200087a4
 800b364:	20008798 	.word	0x20008798
 800b368:	200087a8 	.word	0x200087a8

0800b36c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b086      	sub	sp, #24
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d04a      	beq.n	800b414 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b37e:	2308      	movs	r3, #8
 800b380:	425b      	negs	r3, r3
 800b382:	697a      	ldr	r2, [r7, #20]
 800b384:	4413      	add	r3, r2
 800b386:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	685a      	ldr	r2, [r3, #4]
 800b390:	4b22      	ldr	r3, [pc, #136]	; (800b41c <vPortFree+0xb0>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4013      	ands	r3, r2
 800b396:	2b00      	cmp	r3, #0
 800b398:	d10b      	bne.n	800b3b2 <vPortFree+0x46>
 800b39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39e:	b672      	cpsid	i
 800b3a0:	f383 8811 	msr	BASEPRI, r3
 800b3a4:	f3bf 8f6f 	isb	sy
 800b3a8:	f3bf 8f4f 	dsb	sy
 800b3ac:	b662      	cpsie	i
 800b3ae:	60fb      	str	r3, [r7, #12]
 800b3b0:	e7fe      	b.n	800b3b0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d00b      	beq.n	800b3d2 <vPortFree+0x66>
 800b3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3be:	b672      	cpsid	i
 800b3c0:	f383 8811 	msr	BASEPRI, r3
 800b3c4:	f3bf 8f6f 	isb	sy
 800b3c8:	f3bf 8f4f 	dsb	sy
 800b3cc:	b662      	cpsie	i
 800b3ce:	60bb      	str	r3, [r7, #8]
 800b3d0:	e7fe      	b.n	800b3d0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	685a      	ldr	r2, [r3, #4]
 800b3d6:	4b11      	ldr	r3, [pc, #68]	; (800b41c <vPortFree+0xb0>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4013      	ands	r3, r2
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d019      	beq.n	800b414 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d115      	bne.n	800b414 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	685a      	ldr	r2, [r3, #4]
 800b3ec:	4b0b      	ldr	r3, [pc, #44]	; (800b41c <vPortFree+0xb0>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	43db      	mvns	r3, r3
 800b3f2:	401a      	ands	r2, r3
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b3f8:	f7fe fe9a 	bl	800a130 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	685a      	ldr	r2, [r3, #4]
 800b400:	4b07      	ldr	r3, [pc, #28]	; (800b420 <vPortFree+0xb4>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4413      	add	r3, r2
 800b406:	4a06      	ldr	r2, [pc, #24]	; (800b420 <vPortFree+0xb4>)
 800b408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b40a:	6938      	ldr	r0, [r7, #16]
 800b40c:	f000 f86c 	bl	800b4e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b410:	f7fe fe9c 	bl	800a14c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b414:	bf00      	nop
 800b416:	3718      	adds	r7, #24
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	200087ac 	.word	0x200087ac
 800b420:	200087a4 	.word	0x200087a4

0800b424 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b42a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b42e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b430:	4b27      	ldr	r3, [pc, #156]	; (800b4d0 <prvHeapInit+0xac>)
 800b432:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f003 0307 	and.w	r3, r3, #7
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00c      	beq.n	800b458 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	3307      	adds	r3, #7
 800b442:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f023 0307 	bic.w	r3, r3, #7
 800b44a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b44c:	68ba      	ldr	r2, [r7, #8]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	1ad3      	subs	r3, r2, r3
 800b452:	4a1f      	ldr	r2, [pc, #124]	; (800b4d0 <prvHeapInit+0xac>)
 800b454:	4413      	add	r3, r2
 800b456:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b45c:	4a1d      	ldr	r2, [pc, #116]	; (800b4d4 <prvHeapInit+0xb0>)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b462:	4b1c      	ldr	r3, [pc, #112]	; (800b4d4 <prvHeapInit+0xb0>)
 800b464:	2200      	movs	r2, #0
 800b466:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	68ba      	ldr	r2, [r7, #8]
 800b46c:	4413      	add	r3, r2
 800b46e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b470:	2208      	movs	r2, #8
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	1a9b      	subs	r3, r3, r2
 800b476:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f023 0307 	bic.w	r3, r3, #7
 800b47e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	4a15      	ldr	r2, [pc, #84]	; (800b4d8 <prvHeapInit+0xb4>)
 800b484:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b486:	4b14      	ldr	r3, [pc, #80]	; (800b4d8 <prvHeapInit+0xb4>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2200      	movs	r2, #0
 800b48c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b48e:	4b12      	ldr	r3, [pc, #72]	; (800b4d8 <prvHeapInit+0xb4>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2200      	movs	r2, #0
 800b494:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	1ad2      	subs	r2, r2, r3
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b4a4:	4b0c      	ldr	r3, [pc, #48]	; (800b4d8 <prvHeapInit+0xb4>)
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	4a0a      	ldr	r2, [pc, #40]	; (800b4dc <prvHeapInit+0xb8>)
 800b4b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	4a09      	ldr	r2, [pc, #36]	; (800b4e0 <prvHeapInit+0xbc>)
 800b4ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b4bc:	4b09      	ldr	r3, [pc, #36]	; (800b4e4 <prvHeapInit+0xc0>)
 800b4be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b4c2:	601a      	str	r2, [r3, #0]
}
 800b4c4:	bf00      	nop
 800b4c6:	3714      	adds	r7, #20
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr
 800b4d0:	20000798 	.word	0x20000798
 800b4d4:	20008798 	.word	0x20008798
 800b4d8:	200087a0 	.word	0x200087a0
 800b4dc:	200087a8 	.word	0x200087a8
 800b4e0:	200087a4 	.word	0x200087a4
 800b4e4:	200087ac 	.word	0x200087ac

0800b4e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b4f0:	4b28      	ldr	r3, [pc, #160]	; (800b594 <prvInsertBlockIntoFreeList+0xac>)
 800b4f2:	60fb      	str	r3, [r7, #12]
 800b4f4:	e002      	b.n	800b4fc <prvInsertBlockIntoFreeList+0x14>
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	60fb      	str	r3, [r7, #12]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	429a      	cmp	r2, r3
 800b504:	d8f7      	bhi.n	800b4f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	68ba      	ldr	r2, [r7, #8]
 800b510:	4413      	add	r3, r2
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	429a      	cmp	r2, r3
 800b516:	d108      	bne.n	800b52a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	685a      	ldr	r2, [r3, #4]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	441a      	add	r2, r3
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	68ba      	ldr	r2, [r7, #8]
 800b534:	441a      	add	r2, r3
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d118      	bne.n	800b570 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	4b15      	ldr	r3, [pc, #84]	; (800b598 <prvInsertBlockIntoFreeList+0xb0>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	429a      	cmp	r2, r3
 800b548:	d00d      	beq.n	800b566 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	685a      	ldr	r2, [r3, #4]
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	441a      	add	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	601a      	str	r2, [r3, #0]
 800b564:	e008      	b.n	800b578 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b566:	4b0c      	ldr	r3, [pc, #48]	; (800b598 <prvInsertBlockIntoFreeList+0xb0>)
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	601a      	str	r2, [r3, #0]
 800b56e:	e003      	b.n	800b578 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681a      	ldr	r2, [r3, #0]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d002      	beq.n	800b586 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b586:	bf00      	nop
 800b588:	3714      	adds	r7, #20
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr
 800b592:	bf00      	nop
 800b594:	20008798 	.word	0x20008798
 800b598:	200087a0 	.word	0x200087a0

0800b59c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	330c      	adds	r3, #12
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	6839      	ldr	r1, [r7, #0]
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f002 f91b 	bl	800d7ec <tcpip_send_msg_wait_sem>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b5ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d103      	bne.n	800b5ca <netconn_apimsg+0x2e>
    return apimsg->err;
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b5c8:	e001      	b.n	800b5ce <netconn_apimsg+0x32>
  }
  return err;
 800b5ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
	...

0800b5d8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b08c      	sub	sp, #48	; 0x30
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	4603      	mov	r3, r0
 800b5e0:	603a      	str	r2, [r7, #0]
 800b5e2:	71fb      	strb	r3, [r7, #7]
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800b5e8:	79fb      	ldrb	r3, [r7, #7]
 800b5ea:	6839      	ldr	r1, [r7, #0]
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f000 ff07 	bl	800c400 <netconn_alloc>
 800b5f2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800b5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d054      	beq.n	800b6a4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800b5fa:	79bb      	ldrb	r3, [r7, #6]
 800b5fc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800b5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b600:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800b602:	f107 0308 	add.w	r3, r7, #8
 800b606:	4619      	mov	r1, r3
 800b608:	4829      	ldr	r0, [pc, #164]	; (800b6b0 <netconn_new_with_proto_and_callback+0xd8>)
 800b60a:	f7ff ffc7 	bl	800b59c <netconn_apimsg>
 800b60e:	4603      	mov	r3, r0
 800b610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800b614:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d043      	beq.n	800b6a4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800b61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d005      	beq.n	800b630 <netconn_new_with_proto_and_callback+0x58>
 800b624:	4b23      	ldr	r3, [pc, #140]	; (800b6b4 <netconn_new_with_proto_and_callback+0xdc>)
 800b626:	22a3      	movs	r2, #163	; 0xa3
 800b628:	4923      	ldr	r1, [pc, #140]	; (800b6b8 <netconn_new_with_proto_and_callback+0xe0>)
 800b62a:	4824      	ldr	r0, [pc, #144]	; (800b6bc <netconn_new_with_proto_and_callback+0xe4>)
 800b62c:	f00e f948 	bl	80198c0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800b630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b632:	3310      	adds	r3, #16
 800b634:	4618      	mov	r0, r3
 800b636:	f00d f982 	bl	801893e <sys_mbox_valid>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d105      	bne.n	800b64c <netconn_new_with_proto_and_callback+0x74>
 800b640:	4b1c      	ldr	r3, [pc, #112]	; (800b6b4 <netconn_new_with_proto_and_callback+0xdc>)
 800b642:	22a4      	movs	r2, #164	; 0xa4
 800b644:	491e      	ldr	r1, [pc, #120]	; (800b6c0 <netconn_new_with_proto_and_callback+0xe8>)
 800b646:	481d      	ldr	r0, [pc, #116]	; (800b6bc <netconn_new_with_proto_and_callback+0xe4>)
 800b648:	f00e f93a 	bl	80198c0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800b64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b64e:	3314      	adds	r3, #20
 800b650:	4618      	mov	r0, r3
 800b652:	f00d f974 	bl	801893e <sys_mbox_valid>
 800b656:	4603      	mov	r3, r0
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d005      	beq.n	800b668 <netconn_new_with_proto_and_callback+0x90>
 800b65c:	4b15      	ldr	r3, [pc, #84]	; (800b6b4 <netconn_new_with_proto_and_callback+0xdc>)
 800b65e:	22a6      	movs	r2, #166	; 0xa6
 800b660:	4918      	ldr	r1, [pc, #96]	; (800b6c4 <netconn_new_with_proto_and_callback+0xec>)
 800b662:	4816      	ldr	r0, [pc, #88]	; (800b6bc <netconn_new_with_proto_and_callback+0xe4>)
 800b664:	f00e f92c 	bl	80198c0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800b668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66a:	330c      	adds	r3, #12
 800b66c:	4618      	mov	r0, r3
 800b66e:	f00d f9f7 	bl	8018a60 <sys_sem_valid>
 800b672:	4603      	mov	r3, r0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d105      	bne.n	800b684 <netconn_new_with_proto_and_callback+0xac>
 800b678:	4b0e      	ldr	r3, [pc, #56]	; (800b6b4 <netconn_new_with_proto_and_callback+0xdc>)
 800b67a:	22a9      	movs	r2, #169	; 0xa9
 800b67c:	4912      	ldr	r1, [pc, #72]	; (800b6c8 <netconn_new_with_proto_and_callback+0xf0>)
 800b67e:	480f      	ldr	r0, [pc, #60]	; (800b6bc <netconn_new_with_proto_and_callback+0xe4>)
 800b680:	f00e f91e 	bl	80198c0 <iprintf>
      sys_sem_free(&conn->op_completed);
 800b684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b686:	330c      	adds	r3, #12
 800b688:	4618      	mov	r0, r3
 800b68a:	f00d f9dc 	bl	8018a46 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800b68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b690:	3310      	adds	r3, #16
 800b692:	4618      	mov	r0, r3
 800b694:	f00d f8cc 	bl	8018830 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800b698:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b69a:	2007      	movs	r0, #7
 800b69c:	f002 fe0e 	bl	800e2bc <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	e000      	b.n	800b6a6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800b6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3730      	adds	r7, #48	; 0x30
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	0800c3d5 	.word	0x0800c3d5
 800b6b4:	0801d53c 	.word	0x0801d53c
 800b6b8:	0801d570 	.word	0x0801d570
 800b6bc:	0801d594 	.word	0x0801d594
 800b6c0:	0801d5bc 	.word	0x0801d5bc
 800b6c4:	0801d5d4 	.word	0x0801d5d4
 800b6c8:	0801d5f8 	.word	0x0801d5f8

0800b6cc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b08c      	sub	sp, #48	; 0x30
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d101      	bne.n	800b6de <netconn_prepare_delete+0x12>
    return ERR_OK;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	e014      	b.n	800b708 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b6e2:	2329      	movs	r3, #41	; 0x29
 800b6e4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800b6e6:	f107 030c 	add.w	r3, r7, #12
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	4808      	ldr	r0, [pc, #32]	; (800b710 <netconn_prepare_delete+0x44>)
 800b6ee:	f7ff ff55 	bl	800b59c <netconn_apimsg>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800b6f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d002      	beq.n	800b706 <netconn_prepare_delete+0x3a>
    return err;
 800b700:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b704:	e000      	b.n	800b708 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800b706:	2300      	movs	r3, #0
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3730      	adds	r7, #48	; 0x30
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	0800c939 	.word	0x0800c939

0800b714 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d101      	bne.n	800b726 <netconn_delete+0x12>
    return ERR_OK;
 800b722:	2300      	movs	r3, #0
 800b724:	e00d      	b.n	800b742 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f7ff ffd0 	bl	800b6cc <netconn_prepare_delete>
 800b72c:	4603      	mov	r3, r0
 800b72e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800b730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d102      	bne.n	800b73e <netconn_delete+0x2a>
    netconn_free(conn);
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 fecf 	bl	800c4dc <netconn_free>
  }
  return err;
 800b73e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b742:	4618      	mov	r0, r3
 800b744:	3710      	adds	r7, #16
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
	...

0800b74c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b08e      	sub	sp, #56	; 0x38
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	4613      	mov	r3, r2
 800b758:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d109      	bne.n	800b774 <netconn_connect+0x28>
 800b760:	4b11      	ldr	r3, [pc, #68]	; (800b7a8 <netconn_connect+0x5c>)
 800b762:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800b766:	4911      	ldr	r1, [pc, #68]	; (800b7ac <netconn_connect+0x60>)
 800b768:	4811      	ldr	r0, [pc, #68]	; (800b7b0 <netconn_connect+0x64>)
 800b76a:	f00e f8a9 	bl	80198c0 <iprintf>
 800b76e:	f06f 030f 	mvn.w	r3, #15
 800b772:	e015      	b.n	800b7a0 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d101      	bne.n	800b77e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800b77a:	4b0e      	ldr	r3, [pc, #56]	; (800b7b4 <netconn_connect+0x68>)
 800b77c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800b786:	88fb      	ldrh	r3, [r7, #6]
 800b788:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800b78a:	f107 0314 	add.w	r3, r7, #20
 800b78e:	4619      	mov	r1, r3
 800b790:	4809      	ldr	r0, [pc, #36]	; (800b7b8 <netconn_connect+0x6c>)
 800b792:	f7ff ff03 	bl	800b59c <netconn_apimsg>
 800b796:	4603      	mov	r3, r0
 800b798:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800b79c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3738      	adds	r7, #56	; 0x38
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	0801d53c 	.word	0x0801d53c
 800b7ac:	0801d6b0 	.word	0x0801d6b0
 800b7b0:	0801d594 	.word	0x0801d594
 800b7b4:	08020b38 	.word	0x08020b38
 800b7b8:	0800cc21 	.word	0x0800cc21

0800b7bc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b088      	sub	sp, #32
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	4613      	mov	r3, r2
 800b7c8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d109      	bne.n	800b7e8 <netconn_recv_data+0x2c>
 800b7d4:	4b58      	ldr	r3, [pc, #352]	; (800b938 <netconn_recv_data+0x17c>)
 800b7d6:	f44f 7212 	mov.w	r2, #584	; 0x248
 800b7da:	4958      	ldr	r1, [pc, #352]	; (800b93c <netconn_recv_data+0x180>)
 800b7dc:	4858      	ldr	r0, [pc, #352]	; (800b940 <netconn_recv_data+0x184>)
 800b7de:	f00e f86f 	bl	80198c0 <iprintf>
 800b7e2:	f06f 030f 	mvn.w	r3, #15
 800b7e6:	e0a2      	b.n	800b92e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d109      	bne.n	800b808 <netconn_recv_data+0x4c>
 800b7f4:	4b50      	ldr	r3, [pc, #320]	; (800b938 <netconn_recv_data+0x17c>)
 800b7f6:	f240 224a 	movw	r2, #586	; 0x24a
 800b7fa:	4952      	ldr	r1, [pc, #328]	; (800b944 <netconn_recv_data+0x188>)
 800b7fc:	4850      	ldr	r0, [pc, #320]	; (800b940 <netconn_recv_data+0x184>)
 800b7fe:	f00e f85f 	bl	80198c0 <iprintf>
 800b802:	f06f 030f 	mvn.w	r3, #15
 800b806:	e092      	b.n	800b92e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	3310      	adds	r3, #16
 800b80c:	4618      	mov	r0, r3
 800b80e:	f00d f896 	bl	801893e <sys_mbox_valid>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d10e      	bne.n	800b836 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	f000 fa30 	bl	800bc7e <netconn_err>
 800b81e:	4603      	mov	r3, r0
 800b820:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800b822:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d002      	beq.n	800b830 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800b82a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b82e:	e07e      	b.n	800b92e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800b830:	f06f 030a 	mvn.w	r3, #10
 800b834:	e07b      	b.n	800b92e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	7f1b      	ldrb	r3, [r3, #28]
 800b83a:	f003 0302 	and.w	r3, r3, #2
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d10f      	bne.n	800b862 <netconn_recv_data+0xa6>
 800b842:	79fb      	ldrb	r3, [r7, #7]
 800b844:	f003 0304 	and.w	r3, r3, #4
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d10a      	bne.n	800b862 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	7f1b      	ldrb	r3, [r3, #28]
 800b850:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800b854:	2b00      	cmp	r3, #0
 800b856:	d104      	bne.n	800b862 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d023      	beq.n	800b8aa <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	3310      	adds	r3, #16
 800b866:	f107 0218 	add.w	r2, r7, #24
 800b86a:	4611      	mov	r1, r2
 800b86c:	4618      	mov	r0, r3
 800b86e:	f00d f84a 	bl	8018906 <sys_arch_mbox_tryfetch>
 800b872:	4603      	mov	r3, r0
 800b874:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b878:	d11f      	bne.n	800b8ba <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f000 f9ff 	bl	800bc7e <netconn_err>
 800b880:	4603      	mov	r3, r0
 800b882:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800b884:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d002      	beq.n	800b892 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800b88c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b890:	e04d      	b.n	800b92e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	7f1b      	ldrb	r3, [r3, #28]
 800b896:	f003 0301 	and.w	r3, r3, #1
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d002      	beq.n	800b8a4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800b89e:	f06f 030a 	mvn.w	r3, #10
 800b8a2:	e044      	b.n	800b92e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800b8a4:	f06f 0306 	mvn.w	r3, #6
 800b8a8:	e041      	b.n	800b92e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	3310      	adds	r3, #16
 800b8ae:	f107 0118 	add.w	r1, r7, #24
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f00c ffe7 	bl	8018888 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8c2:	2b10      	cmp	r3, #16
 800b8c4:	d117      	bne.n	800b8f6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800b8c6:	69bb      	ldr	r3, [r7, #24]
 800b8c8:	f107 0217 	add.w	r2, r7, #23
 800b8cc:	4611      	mov	r1, r2
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f000 fa22 	bl	800bd18 <lwip_netconn_is_err_msg>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d009      	beq.n	800b8ee <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800b8da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b8de:	f113 0f0f 	cmn.w	r3, #15
 800b8e2:	d101      	bne.n	800b8e8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	e022      	b.n	800b92e <netconn_recv_data+0x172>
      }
      return err;
 800b8e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b8ec:	e01f      	b.n	800b92e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800b8ee:	69bb      	ldr	r3, [r7, #24]
 800b8f0:	891b      	ldrh	r3, [r3, #8]
 800b8f2:	83fb      	strh	r3, [r7, #30]
 800b8f4:	e00d      	b.n	800b912 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800b8f6:	69bb      	ldr	r3, [r7, #24]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d106      	bne.n	800b90a <netconn_recv_data+0x14e>
 800b8fc:	4b0e      	ldr	r3, [pc, #56]	; (800b938 <netconn_recv_data+0x17c>)
 800b8fe:	f240 2291 	movw	r2, #657	; 0x291
 800b902:	4911      	ldr	r1, [pc, #68]	; (800b948 <netconn_recv_data+0x18c>)
 800b904:	480e      	ldr	r0, [pc, #56]	; (800b940 <netconn_recv_data+0x184>)
 800b906:	f00d ffdb 	bl	80198c0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	891b      	ldrh	r3, [r3, #8]
 800b910:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b916:	2b00      	cmp	r3, #0
 800b918:	d005      	beq.n	800b926 <netconn_recv_data+0x16a>
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91e:	8bfa      	ldrh	r2, [r7, #30]
 800b920:	2101      	movs	r1, #1
 800b922:	68f8      	ldr	r0, [r7, #12]
 800b924:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800b926:	69ba      	ldr	r2, [r7, #24]
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800b92c:	2300      	movs	r3, #0
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3720      	adds	r7, #32
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop
 800b938:	0801d53c 	.word	0x0801d53c
 800b93c:	0801d754 	.word	0x0801d754
 800b940:	0801d594 	.word	0x0801d594
 800b944:	0801d774 	.word	0x0801d774
 800b948:	0801d790 	.word	0x0801d790

0800b94c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d005      	beq.n	800b96a <netconn_tcp_recvd_msg+0x1e>
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b966:	2b10      	cmp	r3, #16
 800b968:	d009      	beq.n	800b97e <netconn_tcp_recvd_msg+0x32>
 800b96a:	4b0c      	ldr	r3, [pc, #48]	; (800b99c <netconn_tcp_recvd_msg+0x50>)
 800b96c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800b970:	490b      	ldr	r1, [pc, #44]	; (800b9a0 <netconn_tcp_recvd_msg+0x54>)
 800b972:	480c      	ldr	r0, [pc, #48]	; (800b9a4 <netconn_tcp_recvd_msg+0x58>)
 800b974:	f00d ffa4 	bl	80198c0 <iprintf>
 800b978:	f06f 030f 	mvn.w	r3, #15
 800b97c:	e00a      	b.n	800b994 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	68fa      	ldr	r2, [r7, #12]
 800b982:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800b98a:	6879      	ldr	r1, [r7, #4]
 800b98c:	4806      	ldr	r0, [pc, #24]	; (800b9a8 <netconn_tcp_recvd_msg+0x5c>)
 800b98e:	f7ff fe05 	bl	800b59c <netconn_apimsg>
 800b992:	4603      	mov	r3, r0
}
 800b994:	4618      	mov	r0, r3
 800b996:	3710      	adds	r7, #16
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	0801d53c 	.word	0x0801d53c
 800b9a0:	0801d79c 	.word	0x0801d79c
 800b9a4:	0801d594 	.word	0x0801d594
 800b9a8:	0800ce39 	.word	0x0800ce39

0800b9ac <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b090      	sub	sp, #64	; 0x40
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	4613      	mov	r3, r2
 800b9b8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	3310      	adds	r3, #16
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f00c ffbd 	bl	801893e <sys_mbox_valid>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d102      	bne.n	800b9d0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800b9ca:	f06f 030a 	mvn.w	r3, #10
 800b9ce:	e06d      	b.n	800baac <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	7f1b      	ldrb	r3, [r3, #28]
 800b9d4:	b25b      	sxtb	r3, r3
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	da07      	bge.n	800b9ea <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	7f1b      	ldrb	r3, [r3, #28]
 800b9de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9e2:	b2da      	uxtb	r2, r3
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800b9e8:	e039      	b.n	800ba5e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800b9ea:	79fb      	ldrb	r3, [r7, #7]
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	68b9      	ldr	r1, [r7, #8]
 800b9f0:	68f8      	ldr	r0, [r7, #12]
 800b9f2:	f7ff fee3 	bl	800b7bc <netconn_recv_data>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800b9fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d002      	beq.n	800ba0a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800ba04:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba08:	e050      	b.n	800baac <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800ba10:	79fb      	ldrb	r3, [r7, #7]
 800ba12:	f003 0308 	and.w	r3, r3, #8
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d10e      	bne.n	800ba38 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800ba1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d002      	beq.n	800ba26 <netconn_recv_data_tcp+0x7a>
 800ba20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba22:	891b      	ldrh	r3, [r3, #8]
 800ba24:	e000      	b.n	800ba28 <netconn_recv_data_tcp+0x7c>
 800ba26:	2301      	movs	r3, #1
 800ba28:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800ba2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ba2c:	f107 0214 	add.w	r2, r7, #20
 800ba30:	4619      	mov	r1, r3
 800ba32:	68f8      	ldr	r0, [r7, #12]
 800ba34:	f7ff ff8a 	bl	800b94c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800ba38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d134      	bne.n	800baa8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800ba3e:	79fb      	ldrb	r3, [r7, #7]
 800ba40:	f003 0310 	and.w	r3, r3, #16
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d009      	beq.n	800ba5c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	7f1b      	ldrb	r3, [r3, #28]
 800ba4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ba50:	b2da      	uxtb	r2, r3
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800ba56:	f06f 0306 	mvn.w	r3, #6
 800ba5a:	e027      	b.n	800baac <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800ba5c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d005      	beq.n	800ba72 <netconn_recv_data_tcp+0xc6>
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	2101      	movs	r1, #1
 800ba6e:	68f8      	ldr	r0, [r7, #12]
 800ba70:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d10f      	bne.n	800ba9a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800ba7a:	68f8      	ldr	r0, [r7, #12]
 800ba7c:	f000 f8ff 	bl	800bc7e <netconn_err>
 800ba80:	4603      	mov	r3, r0
 800ba82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800ba86:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d002      	beq.n	800ba94 <netconn_recv_data_tcp+0xe8>
          return err;
 800ba8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba92:	e00b      	b.n	800baac <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800ba94:	f06f 030d 	mvn.w	r3, #13
 800ba98:	e008      	b.n	800baac <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800ba9a:	2101      	movs	r1, #1
 800ba9c:	68f8      	ldr	r0, [r7, #12]
 800ba9e:	f000 f8b1 	bl	800bc04 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800baa2:	f06f 030e 	mvn.w	r3, #14
 800baa6:	e001      	b.n	800baac <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800baa8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800baac:	4618      	mov	r0, r3
 800baae:	3740      	adds	r7, #64	; 0x40
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b086      	sub	sp, #24
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800babe:	2300      	movs	r3, #0
 800bac0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d109      	bne.n	800badc <netconn_recv+0x28>
 800bac8:	4b32      	ldr	r3, [pc, #200]	; (800bb94 <netconn_recv+0xe0>)
 800baca:	f240 3263 	movw	r2, #867	; 0x363
 800bace:	4932      	ldr	r1, [pc, #200]	; (800bb98 <netconn_recv+0xe4>)
 800bad0:	4832      	ldr	r0, [pc, #200]	; (800bb9c <netconn_recv+0xe8>)
 800bad2:	f00d fef5 	bl	80198c0 <iprintf>
 800bad6:	f06f 030f 	mvn.w	r3, #15
 800bada:	e056      	b.n	800bb8a <netconn_recv+0xd6>
  *new_buf = NULL;
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	2200      	movs	r2, #0
 800bae0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d109      	bne.n	800bafc <netconn_recv+0x48>
 800bae8:	4b2a      	ldr	r3, [pc, #168]	; (800bb94 <netconn_recv+0xe0>)
 800baea:	f240 3265 	movw	r2, #869	; 0x365
 800baee:	492c      	ldr	r1, [pc, #176]	; (800bba0 <netconn_recv+0xec>)
 800baf0:	482a      	ldr	r0, [pc, #168]	; (800bb9c <netconn_recv+0xe8>)
 800baf2:	f00d fee5 	bl	80198c0 <iprintf>
 800baf6:	f06f 030f 	mvn.w	r3, #15
 800bafa:	e046      	b.n	800bb8a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb04:	2b10      	cmp	r3, #16
 800bb06:	d13a      	bne.n	800bb7e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800bb0c:	2006      	movs	r0, #6
 800bb0e:	f002 fb83 	bl	800e218 <memp_malloc>
 800bb12:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d102      	bne.n	800bb20 <netconn_recv+0x6c>
      return ERR_MEM;
 800bb1a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb1e:	e034      	b.n	800bb8a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800bb20:	f107 030c 	add.w	r3, r7, #12
 800bb24:	2200      	movs	r2, #0
 800bb26:	4619      	mov	r1, r3
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f7ff ff3f 	bl	800b9ac <netconn_recv_data_tcp>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800bb32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d006      	beq.n	800bb48 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800bb3a:	6979      	ldr	r1, [r7, #20]
 800bb3c:	2006      	movs	r0, #6
 800bb3e:	f002 fbbd 	bl	800e2bc <memp_free>
      return err;
 800bb42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bb46:	e020      	b.n	800bb8a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d106      	bne.n	800bb5c <netconn_recv+0xa8>
 800bb4e:	4b11      	ldr	r3, [pc, #68]	; (800bb94 <netconn_recv+0xe0>)
 800bb50:	f240 3279 	movw	r2, #889	; 0x379
 800bb54:	4913      	ldr	r1, [pc, #76]	; (800bba4 <netconn_recv+0xf0>)
 800bb56:	4811      	ldr	r0, [pc, #68]	; (800bb9c <netconn_recv+0xe8>)
 800bb58:	f00d feb2 	bl	80198c0 <iprintf>

    buf->p = p;
 800bb5c:	68fa      	ldr	r2, [r7, #12]
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800bb62:	68fa      	ldr	r2, [r7, #12]
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	2200      	movs	r2, #0
 800bb72:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	697a      	ldr	r2, [r7, #20]
 800bb78:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	e005      	b.n	800bb8a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800bb7e:	2200      	movs	r2, #0
 800bb80:	6839      	ldr	r1, [r7, #0]
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f7ff fe1a 	bl	800b7bc <netconn_recv_data>
 800bb88:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3718      	adds	r7, #24
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	0801d53c 	.word	0x0801d53c
 800bb98:	0801d754 	.word	0x0801d754
 800bb9c:	0801d594 	.word	0x0801d594
 800bba0:	0801d774 	.word	0x0801d774
 800bba4:	0801d7ec 	.word	0x0801d7ec

0800bba8 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b08c      	sub	sp, #48	; 0x30
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d109      	bne.n	800bbcc <netconn_send+0x24>
 800bbb8:	4b0e      	ldr	r3, [pc, #56]	; (800bbf4 <netconn_send+0x4c>)
 800bbba:	f240 32b2 	movw	r2, #946	; 0x3b2
 800bbbe:	490e      	ldr	r1, [pc, #56]	; (800bbf8 <netconn_send+0x50>)
 800bbc0:	480e      	ldr	r0, [pc, #56]	; (800bbfc <netconn_send+0x54>)
 800bbc2:	f00d fe7d 	bl	80198c0 <iprintf>
 800bbc6:	f06f 030f 	mvn.w	r3, #15
 800bbca:	e00e      	b.n	800bbea <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800bbd4:	f107 030c 	add.w	r3, r7, #12
 800bbd8:	4619      	mov	r1, r3
 800bbda:	4809      	ldr	r0, [pc, #36]	; (800bc00 <netconn_send+0x58>)
 800bbdc:	f7ff fcde 	bl	800b59c <netconn_apimsg>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800bbe6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3730      	adds	r7, #48	; 0x30
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	0801d53c 	.word	0x0801d53c
 800bbf8:	0801d7f8 	.word	0x0801d7f8
 800bbfc:	0801d594 	.word	0x0801d594
 800bc00:	0800cd9d 	.word	0x0800cd9d

0800bc04 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b08c      	sub	sp, #48	; 0x30
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d109      	bne.n	800bc2a <netconn_close_shutdown+0x26>
 800bc16:	4b0f      	ldr	r3, [pc, #60]	; (800bc54 <netconn_close_shutdown+0x50>)
 800bc18:	f240 4247 	movw	r2, #1095	; 0x447
 800bc1c:	490e      	ldr	r1, [pc, #56]	; (800bc58 <netconn_close_shutdown+0x54>)
 800bc1e:	480f      	ldr	r0, [pc, #60]	; (800bc5c <netconn_close_shutdown+0x58>)
 800bc20:	f00d fe4e 	bl	80198c0 <iprintf>
 800bc24:	f06f 030f 	mvn.w	r3, #15
 800bc28:	e010      	b.n	800bc4c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800bc2e:	78fb      	ldrb	r3, [r7, #3]
 800bc30:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800bc32:	2329      	movs	r3, #41	; 0x29
 800bc34:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800bc36:	f107 030c 	add.w	r3, r7, #12
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	4808      	ldr	r0, [pc, #32]	; (800bc60 <netconn_close_shutdown+0x5c>)
 800bc3e:	f7ff fcad 	bl	800b59c <netconn_apimsg>
 800bc42:	4603      	mov	r3, r0
 800bc44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800bc48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3730      	adds	r7, #48	; 0x30
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	0801d53c 	.word	0x0801d53c
 800bc58:	0801d878 	.word	0x0801d878
 800bc5c:	0801d594 	.word	0x0801d594
 800bc60:	0800d23d 	.word	0x0800d23d

0800bc64 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b082      	sub	sp, #8
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800bc6c:	2103      	movs	r1, #3
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f7ff ffc8 	bl	800bc04 <netconn_close_shutdown>
 800bc74:	4603      	mov	r3, r0
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3708      	adds	r7, #8
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}

0800bc7e <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800bc7e:	b580      	push	{r7, lr}
 800bc80:	b084      	sub	sp, #16
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d101      	bne.n	800bc90 <netconn_err+0x12>
    return ERR_OK;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	e00d      	b.n	800bcac <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800bc90:	f00c ff70 	bl	8018b74 <sys_arch_protect>
 800bc94:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	7a1b      	ldrb	r3, [r3, #8]
 800bc9a:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800bca2:	68f8      	ldr	r0, [r7, #12]
 800bca4:	f00c ff74 	bl	8018b90 <sys_arch_unprotect>
  return err;
 800bca8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3710      	adds	r7, #16
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	4603      	mov	r3, r0
 800bcbc:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800bcbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcc2:	f113 0f0e 	cmn.w	r3, #14
 800bcc6:	d008      	beq.n	800bcda <lwip_netconn_err_to_msg+0x26>
 800bcc8:	f113 0f0d 	cmn.w	r3, #13
 800bccc:	d003      	beq.n	800bcd6 <lwip_netconn_err_to_msg+0x22>
 800bcce:	f113 0f0f 	cmn.w	r3, #15
 800bcd2:	d004      	beq.n	800bcde <lwip_netconn_err_to_msg+0x2a>
 800bcd4:	e005      	b.n	800bce2 <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800bcd6:	4b0a      	ldr	r3, [pc, #40]	; (800bd00 <lwip_netconn_err_to_msg+0x4c>)
 800bcd8:	e00e      	b.n	800bcf8 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800bcda:	4b0a      	ldr	r3, [pc, #40]	; (800bd04 <lwip_netconn_err_to_msg+0x50>)
 800bcdc:	e00c      	b.n	800bcf8 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800bcde:	4b0a      	ldr	r3, [pc, #40]	; (800bd08 <lwip_netconn_err_to_msg+0x54>)
 800bce0:	e00a      	b.n	800bcf8 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800bce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d005      	beq.n	800bcf6 <lwip_netconn_err_to_msg+0x42>
 800bcea:	4b08      	ldr	r3, [pc, #32]	; (800bd0c <lwip_netconn_err_to_msg+0x58>)
 800bcec:	227d      	movs	r2, #125	; 0x7d
 800bcee:	4908      	ldr	r1, [pc, #32]	; (800bd10 <lwip_netconn_err_to_msg+0x5c>)
 800bcf0:	4808      	ldr	r0, [pc, #32]	; (800bd14 <lwip_netconn_err_to_msg+0x60>)
 800bcf2:	f00d fde5 	bl	80198c0 <iprintf>
      return NULL;
 800bcf6:	2300      	movs	r3, #0
  }
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3708      	adds	r7, #8
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	08020a24 	.word	0x08020a24
 800bd04:	08020a25 	.word	0x08020a25
 800bd08:	08020a26 	.word	0x08020a26
 800bd0c:	0801d894 	.word	0x0801d894
 800bd10:	0801d8c8 	.word	0x0801d8c8
 800bd14:	0801d8d8 	.word	0x0801d8d8

0800bd18 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d105      	bne.n	800bd34 <lwip_netconn_is_err_msg+0x1c>
 800bd28:	4b12      	ldr	r3, [pc, #72]	; (800bd74 <lwip_netconn_is_err_msg+0x5c>)
 800bd2a:	2285      	movs	r2, #133	; 0x85
 800bd2c:	4912      	ldr	r1, [pc, #72]	; (800bd78 <lwip_netconn_is_err_msg+0x60>)
 800bd2e:	4813      	ldr	r0, [pc, #76]	; (800bd7c <lwip_netconn_is_err_msg+0x64>)
 800bd30:	f00d fdc6 	bl	80198c0 <iprintf>

  if (msg == &netconn_aborted) {
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4a12      	ldr	r2, [pc, #72]	; (800bd80 <lwip_netconn_is_err_msg+0x68>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d104      	bne.n	800bd46 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	22f3      	movs	r2, #243	; 0xf3
 800bd40:	701a      	strb	r2, [r3, #0]
    return 1;
 800bd42:	2301      	movs	r3, #1
 800bd44:	e012      	b.n	800bd6c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	4a0e      	ldr	r2, [pc, #56]	; (800bd84 <lwip_netconn_is_err_msg+0x6c>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d104      	bne.n	800bd58 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	22f2      	movs	r2, #242	; 0xf2
 800bd52:	701a      	strb	r2, [r3, #0]
    return 1;
 800bd54:	2301      	movs	r3, #1
 800bd56:	e009      	b.n	800bd6c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	4a0b      	ldr	r2, [pc, #44]	; (800bd88 <lwip_netconn_is_err_msg+0x70>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d104      	bne.n	800bd6a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	22f1      	movs	r2, #241	; 0xf1
 800bd64:	701a      	strb	r2, [r3, #0]
    return 1;
 800bd66:	2301      	movs	r3, #1
 800bd68:	e000      	b.n	800bd6c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800bd6a:	2300      	movs	r3, #0
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3708      	adds	r7, #8
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}
 800bd74:	0801d894 	.word	0x0801d894
 800bd78:	0801d900 	.word	0x0801d900
 800bd7c:	0801d8d8 	.word	0x0801d8d8
 800bd80:	08020a24 	.word	0x08020a24
 800bd84:	08020a25 	.word	0x08020a25
 800bd88:	08020a26 	.word	0x08020a26

0800bd8c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b088      	sub	sp, #32
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	60f8      	str	r0, [r7, #12]
 800bd94:	60b9      	str	r1, [r7, #8]
 800bd96:	607a      	str	r2, [r7, #4]
 800bd98:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d105      	bne.n	800bdac <recv_udp+0x20>
 800bda0:	4b34      	ldr	r3, [pc, #208]	; (800be74 <recv_udp+0xe8>)
 800bda2:	22e5      	movs	r2, #229	; 0xe5
 800bda4:	4934      	ldr	r1, [pc, #208]	; (800be78 <recv_udp+0xec>)
 800bda6:	4835      	ldr	r0, [pc, #212]	; (800be7c <recv_udp+0xf0>)
 800bda8:	f00d fd8a 	bl	80198c0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d105      	bne.n	800bdbe <recv_udp+0x32>
 800bdb2:	4b30      	ldr	r3, [pc, #192]	; (800be74 <recv_udp+0xe8>)
 800bdb4:	22e6      	movs	r2, #230	; 0xe6
 800bdb6:	4932      	ldr	r1, [pc, #200]	; (800be80 <recv_udp+0xf4>)
 800bdb8:	4830      	ldr	r0, [pc, #192]	; (800be7c <recv_udp+0xf0>)
 800bdba:	f00d fd81 	bl	80198c0 <iprintf>
  conn = (struct netconn *)arg;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800bdc2:	69fb      	ldr	r3, [r7, #28]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d103      	bne.n	800bdd0 <recv_udp+0x44>
    pbuf_free(p);
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f003 f89f 	bl	800ef0c <pbuf_free>
    return;
 800bdce:	e04d      	b.n	800be6c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	68ba      	ldr	r2, [r7, #8]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d005      	beq.n	800bde6 <recv_udp+0x5a>
 800bdda:	4b26      	ldr	r3, [pc, #152]	; (800be74 <recv_udp+0xe8>)
 800bddc:	22ee      	movs	r2, #238	; 0xee
 800bdde:	4929      	ldr	r1, [pc, #164]	; (800be84 <recv_udp+0xf8>)
 800bde0:	4826      	ldr	r0, [pc, #152]	; (800be7c <recv_udp+0xf0>)
 800bde2:	f00d fd6d 	bl	80198c0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800bde6:	69fb      	ldr	r3, [r7, #28]
 800bde8:	3310      	adds	r3, #16
 800bdea:	4618      	mov	r0, r3
 800bdec:	f00c fda7 	bl	801893e <sys_mbox_valid>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d103      	bne.n	800bdfe <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f003 f888 	bl	800ef0c <pbuf_free>
    return;
 800bdfc:	e036      	b.n	800be6c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800bdfe:	2006      	movs	r0, #6
 800be00:	f002 fa0a 	bl	800e218 <memp_malloc>
 800be04:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d103      	bne.n	800be14 <recv_udp+0x88>
    pbuf_free(p);
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f003 f87d 	bl	800ef0c <pbuf_free>
    return;
 800be12:	e02b      	b.n	800be6c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800be1a:	69bb      	ldr	r3, [r7, #24]
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d002      	beq.n	800be2c <recv_udp+0xa0>
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	e000      	b.n	800be2e <recv_udp+0xa2>
 800be2c:	2300      	movs	r3, #0
 800be2e:	69ba      	ldr	r2, [r7, #24]
 800be30:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800be32:	69bb      	ldr	r3, [r7, #24]
 800be34:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800be36:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	891b      	ldrh	r3, [r3, #8]
 800be3c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	3310      	adds	r3, #16
 800be42:	69b9      	ldr	r1, [r7, #24]
 800be44:	4618      	mov	r0, r3
 800be46:	f00c fd05 	bl	8018854 <sys_mbox_trypost>
 800be4a:	4603      	mov	r3, r0
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d003      	beq.n	800be58 <recv_udp+0xcc>
    netbuf_delete(buf);
 800be50:	69b8      	ldr	r0, [r7, #24]
 800be52:	f001 fa93 	bl	800d37c <netbuf_delete>
    return;
 800be56:	e009      	b.n	800be6c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d005      	beq.n	800be6c <recv_udp+0xe0>
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be64:	8afa      	ldrh	r2, [r7, #22]
 800be66:	2100      	movs	r1, #0
 800be68:	69f8      	ldr	r0, [r7, #28]
 800be6a:	4798      	blx	r3
  }
}
 800be6c:	3720      	adds	r7, #32
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	0801d894 	.word	0x0801d894
 800be78:	0801d90c 	.word	0x0801d90c
 800be7c:	0801d8d8 	.word	0x0801d8d8
 800be80:	0801d930 	.word	0x0801d930
 800be84:	0801d950 	.word	0x0801d950

0800be88 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b088      	sub	sp, #32
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	607a      	str	r2, [r7, #4]
 800be94:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d106      	bne.n	800beaa <recv_tcp+0x22>
 800be9c:	4b36      	ldr	r3, [pc, #216]	; (800bf78 <recv_tcp+0xf0>)
 800be9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800bea2:	4936      	ldr	r1, [pc, #216]	; (800bf7c <recv_tcp+0xf4>)
 800bea4:	4836      	ldr	r0, [pc, #216]	; (800bf80 <recv_tcp+0xf8>)
 800bea6:	f00d fd0b 	bl	80198c0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d106      	bne.n	800bebe <recv_tcp+0x36>
 800beb0:	4b31      	ldr	r3, [pc, #196]	; (800bf78 <recv_tcp+0xf0>)
 800beb2:	f240 122d 	movw	r2, #301	; 0x12d
 800beb6:	4933      	ldr	r1, [pc, #204]	; (800bf84 <recv_tcp+0xfc>)
 800beb8:	4831      	ldr	r0, [pc, #196]	; (800bf80 <recv_tcp+0xf8>)
 800beba:	f00d fd01 	bl	80198c0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800bebe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d006      	beq.n	800bed4 <recv_tcp+0x4c>
 800bec6:	4b2c      	ldr	r3, [pc, #176]	; (800bf78 <recv_tcp+0xf0>)
 800bec8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800becc:	492e      	ldr	r1, [pc, #184]	; (800bf88 <recv_tcp+0x100>)
 800bece:	482c      	ldr	r0, [pc, #176]	; (800bf80 <recv_tcp+0xf8>)
 800bed0:	f00d fcf6 	bl	80198c0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d102      	bne.n	800bee4 <recv_tcp+0x5c>
    return ERR_VAL;
 800bede:	f06f 0305 	mvn.w	r3, #5
 800bee2:	e045      	b.n	800bf70 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	68ba      	ldr	r2, [r7, #8]
 800beea:	429a      	cmp	r2, r3
 800beec:	d006      	beq.n	800befc <recv_tcp+0x74>
 800beee:	4b22      	ldr	r3, [pc, #136]	; (800bf78 <recv_tcp+0xf0>)
 800bef0:	f240 1235 	movw	r2, #309	; 0x135
 800bef4:	4925      	ldr	r1, [pc, #148]	; (800bf8c <recv_tcp+0x104>)
 800bef6:	4822      	ldr	r0, [pc, #136]	; (800bf80 <recv_tcp+0xf8>)
 800bef8:	f00d fce2 	bl	80198c0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	3310      	adds	r3, #16
 800bf00:	4618      	mov	r0, r3
 800bf02:	f00c fd1c 	bl	801893e <sys_mbox_valid>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d10d      	bne.n	800bf28 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d008      	beq.n	800bf24 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	891b      	ldrh	r3, [r3, #8]
 800bf16:	4619      	mov	r1, r3
 800bf18:	68b8      	ldr	r0, [r7, #8]
 800bf1a:	f003 fe53 	bl	800fbc4 <tcp_recved>
      pbuf_free(p);
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f002 fff4 	bl	800ef0c <pbuf_free>
    }
    return ERR_OK;
 800bf24:	2300      	movs	r3, #0
 800bf26:	e023      	b.n	800bf70 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d005      	beq.n	800bf3a <recv_tcp+0xb2>
    msg = p;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	891b      	ldrh	r3, [r3, #8]
 800bf36:	83fb      	strh	r3, [r7, #30]
 800bf38:	e003      	b.n	800bf42 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800bf3a:	4b15      	ldr	r3, [pc, #84]	; (800bf90 <recv_tcp+0x108>)
 800bf3c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	3310      	adds	r3, #16
 800bf46:	69b9      	ldr	r1, [r7, #24]
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f00c fc83 	bl	8018854 <sys_mbox_trypost>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d002      	beq.n	800bf5a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800bf54:	f04f 33ff 	mov.w	r3, #4294967295
 800bf58:	e00a      	b.n	800bf70 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d005      	beq.n	800bf6e <recv_tcp+0xe6>
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf66:	8bfa      	ldrh	r2, [r7, #30]
 800bf68:	2100      	movs	r1, #0
 800bf6a:	6978      	ldr	r0, [r7, #20]
 800bf6c:	4798      	blx	r3
  }

  return ERR_OK;
 800bf6e:	2300      	movs	r3, #0
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3720      	adds	r7, #32
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	0801d894 	.word	0x0801d894
 800bf7c:	0801d970 	.word	0x0801d970
 800bf80:	0801d8d8 	.word	0x0801d8d8
 800bf84:	0801d994 	.word	0x0801d994
 800bf88:	0801d9b4 	.word	0x0801d9b4
 800bf8c:	0801d9cc 	.word	0x0801d9cc
 800bf90:	08020a26 	.word	0x08020a26

0800bf94 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d106      	bne.n	800bfb6 <poll_tcp+0x22>
 800bfa8:	4b29      	ldr	r3, [pc, #164]	; (800c050 <poll_tcp+0xbc>)
 800bfaa:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800bfae:	4929      	ldr	r1, [pc, #164]	; (800c054 <poll_tcp+0xc0>)
 800bfb0:	4829      	ldr	r0, [pc, #164]	; (800c058 <poll_tcp+0xc4>)
 800bfb2:	f00d fc85 	bl	80198c0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	785b      	ldrb	r3, [r3, #1]
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d104      	bne.n	800bfc8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800bfbe:	2101      	movs	r1, #1
 800bfc0:	68f8      	ldr	r0, [r7, #12]
 800bfc2:	f000 ff6f 	bl	800cea4 <lwip_netconn_do_writemore>
 800bfc6:	e016      	b.n	800bff6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	785b      	ldrb	r3, [r3, #1]
 800bfcc:	2b04      	cmp	r3, #4
 800bfce:	d112      	bne.n	800bff6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6a1b      	ldr	r3, [r3, #32]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d00a      	beq.n	800bfee <poll_tcp+0x5a>
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	6a1b      	ldr	r3, [r3, #32]
 800bfdc:	7a5b      	ldrb	r3, [r3, #9]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d005      	beq.n	800bfee <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	6a1b      	ldr	r3, [r3, #32]
 800bfe6:	7a5a      	ldrb	r2, [r3, #9]
 800bfe8:	3a01      	subs	r2, #1
 800bfea:	b2d2      	uxtb	r2, r2
 800bfec:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800bfee:	2101      	movs	r1, #1
 800bff0:	68f8      	ldr	r0, [r7, #12]
 800bff2:	f000 fb3b 	bl	800c66c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	7f1b      	ldrb	r3, [r3, #28]
 800bffa:	f003 0310 	and.w	r3, r3, #16
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d021      	beq.n	800c046 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d01d      	beq.n	800c046 <poll_tcp+0xb2>
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c012:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800c016:	d316      	bcc.n	800c046 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c020:	2b04      	cmp	r3, #4
 800c022:	d810      	bhi.n	800c046 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	7f1b      	ldrb	r3, [r3, #28]
 800c028:	f023 0310 	bic.w	r3, r3, #16
 800c02c:	b2da      	uxtb	r2, r3
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c036:	2b00      	cmp	r3, #0
 800c038:	d005      	beq.n	800c046 <poll_tcp+0xb2>
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03e:	2200      	movs	r2, #0
 800c040:	2102      	movs	r1, #2
 800c042:	68f8      	ldr	r0, [r7, #12]
 800c044:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800c046:	2300      	movs	r3, #0
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3710      	adds	r7, #16
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	0801d894 	.word	0x0801d894
 800c054:	0801d9ec 	.word	0x0801d9ec
 800c058:	0801d8d8 	.word	0x0801d8d8

0800c05c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b086      	sub	sp, #24
 800c060:	af00      	add	r7, sp, #0
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	60b9      	str	r1, [r7, #8]
 800c066:	4613      	mov	r3, r2
 800c068:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d106      	bne.n	800c082 <sent_tcp+0x26>
 800c074:	4b20      	ldr	r3, [pc, #128]	; (800c0f8 <sent_tcp+0x9c>)
 800c076:	f240 1293 	movw	r2, #403	; 0x193
 800c07a:	4920      	ldr	r1, [pc, #128]	; (800c0fc <sent_tcp+0xa0>)
 800c07c:	4820      	ldr	r0, [pc, #128]	; (800c100 <sent_tcp+0xa4>)
 800c07e:	f00d fc1f 	bl	80198c0 <iprintf>

  if (conn) {
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d032      	beq.n	800c0ee <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	785b      	ldrb	r3, [r3, #1]
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	d104      	bne.n	800c09a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800c090:	2101      	movs	r1, #1
 800c092:	6978      	ldr	r0, [r7, #20]
 800c094:	f000 ff06 	bl	800cea4 <lwip_netconn_do_writemore>
 800c098:	e007      	b.n	800c0aa <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	785b      	ldrb	r3, [r3, #1]
 800c09e:	2b04      	cmp	r3, #4
 800c0a0:	d103      	bne.n	800c0aa <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800c0a2:	2101      	movs	r1, #1
 800c0a4:	6978      	ldr	r0, [r7, #20]
 800c0a6:	f000 fae1 	bl	800c66c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d01d      	beq.n	800c0ee <sent_tcp+0x92>
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c0ba:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800c0be:	d316      	bcc.n	800c0ee <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	685b      	ldr	r3, [r3, #4]
 800c0c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c0c8:	2b04      	cmp	r3, #4
 800c0ca:	d810      	bhi.n	800c0ee <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	7f1b      	ldrb	r3, [r3, #28]
 800c0d0:	f023 0310 	bic.w	r3, r3, #16
 800c0d4:	b2da      	uxtb	r2, r3
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d005      	beq.n	800c0ee <sent_tcp+0x92>
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e6:	88fa      	ldrh	r2, [r7, #6]
 800c0e8:	2102      	movs	r1, #2
 800c0ea:	6978      	ldr	r0, [r7, #20]
 800c0ec:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800c0ee:	2300      	movs	r3, #0
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3718      	adds	r7, #24
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	0801d894 	.word	0x0801d894
 800c0fc:	0801d9ec 	.word	0x0801d9ec
 800c100:	0801d8d8 	.word	0x0801d8d8

0800c104 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b088      	sub	sp, #32
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	460b      	mov	r3, r1
 800c10e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d106      	bne.n	800c128 <err_tcp+0x24>
 800c11a:	4b5f      	ldr	r3, [pc, #380]	; (800c298 <err_tcp+0x194>)
 800c11c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800c120:	495e      	ldr	r1, [pc, #376]	; (800c29c <err_tcp+0x198>)
 800c122:	485f      	ldr	r0, [pc, #380]	; (800c2a0 <err_tcp+0x19c>)
 800c124:	f00d fbcc 	bl	80198c0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800c128:	f00c fd24 	bl	8018b74 <sys_arch_protect>
 800c12c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800c12e:	69fb      	ldr	r3, [r7, #28]
 800c130:	2200      	movs	r2, #0
 800c132:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800c134:	69fb      	ldr	r3, [r7, #28]
 800c136:	78fa      	ldrb	r2, [r7, #3]
 800c138:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800c13a:	69fb      	ldr	r3, [r7, #28]
 800c13c:	7f1b      	ldrb	r3, [r3, #28]
 800c13e:	f043 0301 	orr.w	r3, r3, #1
 800c142:	b2da      	uxtb	r2, r3
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	785b      	ldrb	r3, [r3, #1]
 800c14c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800c14e:	69fb      	ldr	r3, [r7, #28]
 800c150:	2200      	movs	r2, #0
 800c152:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800c154:	69b8      	ldr	r0, [r7, #24]
 800c156:	f00c fd1b 	bl	8018b90 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c15a:	69fb      	ldr	r3, [r7, #28]
 800c15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d005      	beq.n	800c16e <err_tcp+0x6a>
 800c162:	69fb      	ldr	r3, [r7, #28]
 800c164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c166:	2200      	movs	r2, #0
 800c168:	2104      	movs	r1, #4
 800c16a:	69f8      	ldr	r0, [r7, #28]
 800c16c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c16e:	69fb      	ldr	r3, [r7, #28]
 800c170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c172:	2b00      	cmp	r3, #0
 800c174:	d005      	beq.n	800c182 <err_tcp+0x7e>
 800c176:	69fb      	ldr	r3, [r7, #28]
 800c178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c17a:	2200      	movs	r2, #0
 800c17c:	2100      	movs	r1, #0
 800c17e:	69f8      	ldr	r0, [r7, #28]
 800c180:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c182:	69fb      	ldr	r3, [r7, #28]
 800c184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c186:	2b00      	cmp	r3, #0
 800c188:	d005      	beq.n	800c196 <err_tcp+0x92>
 800c18a:	69fb      	ldr	r3, [r7, #28]
 800c18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c18e:	2200      	movs	r2, #0
 800c190:	2102      	movs	r1, #2
 800c192:	69f8      	ldr	r0, [r7, #28]
 800c194:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800c196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7ff fd8a 	bl	800bcb4 <lwip_netconn_err_to_msg>
 800c1a0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c1a2:	69fb      	ldr	r3, [r7, #28]
 800c1a4:	3310      	adds	r3, #16
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f00c fbc9 	bl	801893e <sys_mbox_valid>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d005      	beq.n	800c1be <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800c1b2:	69fb      	ldr	r3, [r7, #28]
 800c1b4:	3310      	adds	r3, #16
 800c1b6:	6939      	ldr	r1, [r7, #16]
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f00c fb4b 	bl	8018854 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800c1be:	69fb      	ldr	r3, [r7, #28]
 800c1c0:	3314      	adds	r3, #20
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f00c fbbb 	bl	801893e <sys_mbox_valid>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d005      	beq.n	800c1da <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800c1ce:	69fb      	ldr	r3, [r7, #28]
 800c1d0:	3314      	adds	r3, #20
 800c1d2:	6939      	ldr	r1, [r7, #16]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f00c fb3d 	bl	8018854 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800c1da:	7dfb      	ldrb	r3, [r7, #23]
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d005      	beq.n	800c1ec <err_tcp+0xe8>
 800c1e0:	7dfb      	ldrb	r3, [r7, #23]
 800c1e2:	2b04      	cmp	r3, #4
 800c1e4:	d002      	beq.n	800c1ec <err_tcp+0xe8>
 800c1e6:	7dfb      	ldrb	r3, [r7, #23]
 800c1e8:	2b03      	cmp	r3, #3
 800c1ea:	d143      	bne.n	800c274 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800c1ec:	69fb      	ldr	r3, [r7, #28]
 800c1ee:	7f1b      	ldrb	r3, [r3, #28]
 800c1f0:	f003 0304 	and.w	r3, r3, #4
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	bf14      	ite	ne
 800c1f8:	2301      	movne	r3, #1
 800c1fa:	2300      	moveq	r3, #0
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800c200:	69fb      	ldr	r3, [r7, #28]
 800c202:	7f1b      	ldrb	r3, [r3, #28]
 800c204:	f023 0304 	bic.w	r3, r3, #4
 800c208:	b2da      	uxtb	r2, r3
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d13b      	bne.n	800c28c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c214:	69fb      	ldr	r3, [r7, #28]
 800c216:	6a1b      	ldr	r3, [r3, #32]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d106      	bne.n	800c22a <err_tcp+0x126>
 800c21c:	4b1e      	ldr	r3, [pc, #120]	; (800c298 <err_tcp+0x194>)
 800c21e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c222:	4920      	ldr	r1, [pc, #128]	; (800c2a4 <err_tcp+0x1a0>)
 800c224:	481e      	ldr	r0, [pc, #120]	; (800c2a0 <err_tcp+0x19c>)
 800c226:	f00d fb4b 	bl	80198c0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800c22a:	7dfb      	ldrb	r3, [r7, #23]
 800c22c:	2b04      	cmp	r3, #4
 800c22e:	d104      	bne.n	800c23a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	6a1b      	ldr	r3, [r3, #32]
 800c234:	2200      	movs	r2, #0
 800c236:	711a      	strb	r2, [r3, #4]
 800c238:	e003      	b.n	800c242 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800c23a:	69fb      	ldr	r3, [r7, #28]
 800c23c:	6a1b      	ldr	r3, [r3, #32]
 800c23e:	78fa      	ldrb	r2, [r7, #3]
 800c240:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c242:	69fb      	ldr	r3, [r7, #28]
 800c244:	6a1b      	ldr	r3, [r3, #32]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	330c      	adds	r3, #12
 800c24a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800c24c:	68b8      	ldr	r0, [r7, #8]
 800c24e:	f00c fc07 	bl	8018a60 <sys_sem_valid>
 800c252:	4603      	mov	r3, r0
 800c254:	2b00      	cmp	r3, #0
 800c256:	d106      	bne.n	800c266 <err_tcp+0x162>
 800c258:	4b0f      	ldr	r3, [pc, #60]	; (800c298 <err_tcp+0x194>)
 800c25a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800c25e:	4912      	ldr	r1, [pc, #72]	; (800c2a8 <err_tcp+0x1a4>)
 800c260:	480f      	ldr	r0, [pc, #60]	; (800c2a0 <err_tcp+0x19c>)
 800c262:	f00d fb2d 	bl	80198c0 <iprintf>
      conn->current_msg = NULL;
 800c266:	69fb      	ldr	r3, [r7, #28]
 800c268:	2200      	movs	r2, #0
 800c26a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800c26c:	68b8      	ldr	r0, [r7, #8]
 800c26e:	f00c fbdd 	bl	8018a2c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800c272:	e00b      	b.n	800c28c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	6a1b      	ldr	r3, [r3, #32]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d008      	beq.n	800c28e <err_tcp+0x18a>
 800c27c:	4b06      	ldr	r3, [pc, #24]	; (800c298 <err_tcp+0x194>)
 800c27e:	f240 12f7 	movw	r2, #503	; 0x1f7
 800c282:	490a      	ldr	r1, [pc, #40]	; (800c2ac <err_tcp+0x1a8>)
 800c284:	4806      	ldr	r0, [pc, #24]	; (800c2a0 <err_tcp+0x19c>)
 800c286:	f00d fb1b 	bl	80198c0 <iprintf>
  }
}
 800c28a:	e000      	b.n	800c28e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800c28c:	bf00      	nop
}
 800c28e:	bf00      	nop
 800c290:	3720      	adds	r7, #32
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	0801d894 	.word	0x0801d894
 800c29c:	0801d9ec 	.word	0x0801d9ec
 800c2a0:	0801d8d8 	.word	0x0801d8d8
 800c2a4:	0801d9fc 	.word	0x0801d9fc
 800c2a8:	0801da18 	.word	0x0801da18
 800c2ac:	0801da34 	.word	0x0801da34

0800c2b0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800c2be:	6879      	ldr	r1, [r7, #4]
 800c2c0:	68f8      	ldr	r0, [r7, #12]
 800c2c2:	f004 fc59 	bl	8010b78 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800c2c6:	490a      	ldr	r1, [pc, #40]	; (800c2f0 <setup_tcp+0x40>)
 800c2c8:	68f8      	ldr	r0, [r7, #12]
 800c2ca:	f004 fc67 	bl	8010b9c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800c2ce:	4909      	ldr	r1, [pc, #36]	; (800c2f4 <setup_tcp+0x44>)
 800c2d0:	68f8      	ldr	r0, [r7, #12]
 800c2d2:	f004 fc85 	bl	8010be0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800c2d6:	2202      	movs	r2, #2
 800c2d8:	4907      	ldr	r1, [pc, #28]	; (800c2f8 <setup_tcp+0x48>)
 800c2da:	68f8      	ldr	r0, [r7, #12]
 800c2dc:	f004 fcdc 	bl	8010c98 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800c2e0:	4906      	ldr	r1, [pc, #24]	; (800c2fc <setup_tcp+0x4c>)
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	f004 fc9e 	bl	8010c24 <tcp_err>
}
 800c2e8:	bf00      	nop
 800c2ea:	3710      	adds	r7, #16
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	0800be89 	.word	0x0800be89
 800c2f4:	0800c05d 	.word	0x0800c05d
 800c2f8:	0800bf95 	.word	0x0800bf95
 800c2fc:	0800c105 	.word	0x0800c105

0800c300 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800c300:	b590      	push	{r4, r7, lr}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800c308:	2300      	movs	r3, #0
 800c30a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d006      	beq.n	800c324 <pcb_new+0x24>
 800c316:	4b2b      	ldr	r3, [pc, #172]	; (800c3c4 <pcb_new+0xc4>)
 800c318:	f240 2265 	movw	r2, #613	; 0x265
 800c31c:	492a      	ldr	r1, [pc, #168]	; (800c3c8 <pcb_new+0xc8>)
 800c31e:	482b      	ldr	r0, [pc, #172]	; (800c3cc <pcb_new+0xcc>)
 800c320:	f00d face 	bl	80198c0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c32e:	2b10      	cmp	r3, #16
 800c330:	d022      	beq.n	800c378 <pcb_new+0x78>
 800c332:	2b20      	cmp	r3, #32
 800c334:	d133      	bne.n	800c39e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681c      	ldr	r4, [r3, #0]
 800c33a:	7bfb      	ldrb	r3, [r7, #15]
 800c33c:	4618      	mov	r0, r3
 800c33e:	f009 ff5e 	bl	80161fe <udp_new_ip_type>
 800c342:	4603      	mov	r3, r0
 800c344:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d02a      	beq.n	800c3a6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	2b22      	cmp	r3, #34	; 0x22
 800c358:	d104      	bne.n	800c364 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	2201      	movs	r2, #1
 800c362:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	6858      	ldr	r0, [r3, #4]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	461a      	mov	r2, r3
 800c370:	4917      	ldr	r1, [pc, #92]	; (800c3d0 <pcb_new+0xd0>)
 800c372:	f009 fecb 	bl	801610c <udp_recv>
      }
      break;
 800c376:	e016      	b.n	800c3a6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681c      	ldr	r4, [r3, #0]
 800c37c:	7bfb      	ldrb	r3, [r7, #15]
 800c37e:	4618      	mov	r0, r3
 800c380:	f004 fbec 	bl	8010b5c <tcp_new_ip_type>
 800c384:	4603      	mov	r3, r0
 800c386:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d00b      	beq.n	800c3aa <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	4618      	mov	r0, r3
 800c398:	f7ff ff8a 	bl	800c2b0 <setup_tcp>
      }
      break;
 800c39c:	e005      	b.n	800c3aa <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	22fa      	movs	r2, #250	; 0xfa
 800c3a2:	711a      	strb	r2, [r3, #4]
      return;
 800c3a4:	e00a      	b.n	800c3bc <pcb_new+0xbc>
      break;
 800c3a6:	bf00      	nop
 800c3a8:	e000      	b.n	800c3ac <pcb_new+0xac>
      break;
 800c3aa:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d102      	bne.n	800c3bc <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	22ff      	movs	r2, #255	; 0xff
 800c3ba:	711a      	strb	r2, [r3, #4]
  }
}
 800c3bc:	3714      	adds	r7, #20
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd90      	pop	{r4, r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	0801d894 	.word	0x0801d894
 800c3c8:	0801da78 	.word	0x0801da78
 800c3cc:	0801d8d8 	.word	0x0801d8d8
 800c3d0:	0800bd8d 	.word	0x0800bd8d

0800c3d4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d102      	bne.n	800c3f6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800c3f0:	68f8      	ldr	r0, [r7, #12]
 800c3f2:	f7ff ff85 	bl	800c300 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800c3f6:	bf00      	nop
 800c3f8:	3710      	adds	r7, #16
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
	...

0800c400 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b086      	sub	sp, #24
 800c404:	af00      	add	r7, sp, #0
 800c406:	4603      	mov	r3, r0
 800c408:	6039      	str	r1, [r7, #0]
 800c40a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800c40c:	2300      	movs	r3, #0
 800c40e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800c410:	2007      	movs	r0, #7
 800c412:	f001 ff01 	bl	800e218 <memp_malloc>
 800c416:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d101      	bne.n	800c422 <netconn_alloc+0x22>
    return NULL;
 800c41e:	2300      	movs	r3, #0
 800c420:	e052      	b.n	800c4c8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2200      	movs	r2, #0
 800c426:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	79fa      	ldrb	r2, [r7, #7]
 800c42c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2200      	movs	r2, #0
 800c432:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800c434:	79fb      	ldrb	r3, [r7, #7]
 800c436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c43a:	2b10      	cmp	r3, #16
 800c43c:	d004      	beq.n	800c448 <netconn_alloc+0x48>
 800c43e:	2b20      	cmp	r3, #32
 800c440:	d105      	bne.n	800c44e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800c442:	2306      	movs	r3, #6
 800c444:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800c446:	e00a      	b.n	800c45e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800c448:	2306      	movs	r3, #6
 800c44a:	617b      	str	r3, [r7, #20]
      break;
 800c44c:	e007      	b.n	800c45e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800c44e:	4b20      	ldr	r3, [pc, #128]	; (800c4d0 <netconn_alloc+0xd0>)
 800c450:	f240 22e5 	movw	r2, #741	; 0x2e5
 800c454:	491f      	ldr	r1, [pc, #124]	; (800c4d4 <netconn_alloc+0xd4>)
 800c456:	4820      	ldr	r0, [pc, #128]	; (800c4d8 <netconn_alloc+0xd8>)
 800c458:	f00d fa32 	bl	80198c0 <iprintf>
      goto free_and_return;
 800c45c:	e02f      	b.n	800c4be <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	3310      	adds	r3, #16
 800c462:	6979      	ldr	r1, [r7, #20]
 800c464:	4618      	mov	r0, r3
 800c466:	f00c f9c1 	bl	80187ec <sys_mbox_new>
 800c46a:	4603      	mov	r3, r0
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d125      	bne.n	800c4bc <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	330c      	adds	r3, #12
 800c474:	2100      	movs	r1, #0
 800c476:	4618      	mov	r0, r3
 800c478:	f00c fa7f 	bl	801897a <sys_sem_new>
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d005      	beq.n	800c48e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	3310      	adds	r3, #16
 800c486:	4618      	mov	r0, r3
 800c488:	f00c f9d2 	bl	8018830 <sys_mbox_free>
    goto free_and_return;
 800c48c:	e017      	b.n	800c4be <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	3314      	adds	r3, #20
 800c492:	4618      	mov	r0, r3
 800c494:	f00c fa64 	bl	8018960 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2200      	movs	r2, #0
 800c49c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c4a4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	683a      	ldr	r2, [r7, #0]
 800c4aa:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	7cfa      	ldrb	r2, [r7, #19]
 800c4b6:	771a      	strb	r2, [r3, #28]
  return conn;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	e005      	b.n	800c4c8 <netconn_alloc+0xc8>
    goto free_and_return;
 800c4bc:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800c4be:	68f9      	ldr	r1, [r7, #12]
 800c4c0:	2007      	movs	r0, #7
 800c4c2:	f001 fefb 	bl	800e2bc <memp_free>
  return NULL;
 800c4c6:	2300      	movs	r3, #0
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3718      	adds	r7, #24
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	0801d894 	.word	0x0801d894
 800c4d4:	0801da98 	.word	0x0801da98
 800c4d8:	0801d8d8 	.word	0x0801d8d8

0800c4dc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d006      	beq.n	800c4fa <netconn_free+0x1e>
 800c4ec:	4b1b      	ldr	r3, [pc, #108]	; (800c55c <netconn_free+0x80>)
 800c4ee:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c4f2:	491b      	ldr	r1, [pc, #108]	; (800c560 <netconn_free+0x84>)
 800c4f4:	481b      	ldr	r0, [pc, #108]	; (800c564 <netconn_free+0x88>)
 800c4f6:	f00d f9e3 	bl	80198c0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	3310      	adds	r3, #16
 800c4fe:	4618      	mov	r0, r3
 800c500:	f00c fa1d 	bl	801893e <sys_mbox_valid>
 800c504:	4603      	mov	r3, r0
 800c506:	2b00      	cmp	r3, #0
 800c508:	d006      	beq.n	800c518 <netconn_free+0x3c>
 800c50a:	4b14      	ldr	r3, [pc, #80]	; (800c55c <netconn_free+0x80>)
 800c50c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800c510:	4915      	ldr	r1, [pc, #84]	; (800c568 <netconn_free+0x8c>)
 800c512:	4814      	ldr	r0, [pc, #80]	; (800c564 <netconn_free+0x88>)
 800c514:	f00d f9d4 	bl	80198c0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	3314      	adds	r3, #20
 800c51c:	4618      	mov	r0, r3
 800c51e:	f00c fa0e 	bl	801893e <sys_mbox_valid>
 800c522:	4603      	mov	r3, r0
 800c524:	2b00      	cmp	r3, #0
 800c526:	d006      	beq.n	800c536 <netconn_free+0x5a>
 800c528:	4b0c      	ldr	r3, [pc, #48]	; (800c55c <netconn_free+0x80>)
 800c52a:	f240 3227 	movw	r2, #807	; 0x327
 800c52e:	490f      	ldr	r1, [pc, #60]	; (800c56c <netconn_free+0x90>)
 800c530:	480c      	ldr	r0, [pc, #48]	; (800c564 <netconn_free+0x88>)
 800c532:	f00d f9c5 	bl	80198c0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	330c      	adds	r3, #12
 800c53a:	4618      	mov	r0, r3
 800c53c:	f00c fa83 	bl	8018a46 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	330c      	adds	r3, #12
 800c544:	4618      	mov	r0, r3
 800c546:	f00c fa9c 	bl	8018a82 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800c54a:	6879      	ldr	r1, [r7, #4]
 800c54c:	2007      	movs	r0, #7
 800c54e:	f001 feb5 	bl	800e2bc <memp_free>
}
 800c552:	bf00      	nop
 800c554:	3708      	adds	r7, #8
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}
 800c55a:	bf00      	nop
 800c55c:	0801d894 	.word	0x0801d894
 800c560:	0801dac0 	.word	0x0801dac0
 800c564:	0801d8d8 	.word	0x0801d8d8
 800c568:	0801daf0 	.word	0x0801daf0
 800c56c:	0801db2c 	.word	0x0801db2c

0800c570 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b086      	sub	sp, #24
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	3310      	adds	r3, #16
 800c57c:	4618      	mov	r0, r3
 800c57e:	f00c f9de 	bl	801893e <sys_mbox_valid>
 800c582:	4603      	mov	r3, r0
 800c584:	2b00      	cmp	r3, #0
 800c586:	d02f      	beq.n	800c5e8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800c588:	e018      	b.n	800c5bc <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c592:	2b10      	cmp	r3, #16
 800c594:	d10e      	bne.n	800c5b4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	f107 020f 	add.w	r2, r7, #15
 800c59c:	4611      	mov	r1, r2
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7ff fbba 	bl	800bd18 <lwip_netconn_is_err_msg>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d108      	bne.n	800c5bc <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f002 fcad 	bl	800ef0c <pbuf_free>
 800c5b2:	e003      	b.n	800c5bc <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f000 fee0 	bl	800d37c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	3310      	adds	r3, #16
 800c5c0:	f107 0210 	add.w	r2, r7, #16
 800c5c4:	4611      	mov	r1, r2
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f00c f99d 	bl	8018906 <sys_arch_mbox_tryfetch>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5d2:	d1da      	bne.n	800c58a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	3310      	adds	r3, #16
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f00c f929 	bl	8018830 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	3310      	adds	r3, #16
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f00c f9bc 	bl	8018960 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	3314      	adds	r3, #20
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f00c f9a6 	bl	801893e <sys_mbox_valid>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d034      	beq.n	800c662 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800c5f8:	e01d      	b.n	800c636 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	f107 020e 	add.w	r2, r7, #14
 800c600:	4611      	mov	r1, r2
 800c602:	4618      	mov	r0, r3
 800c604:	f7ff fb88 	bl	800bd18 <lwip_netconn_is_err_msg>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d113      	bne.n	800c636 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800c612:	6978      	ldr	r0, [r7, #20]
 800c614:	f7ff ffac 	bl	800c570 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d007      	beq.n	800c630 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	4618      	mov	r0, r3
 800c626:	f003 fa67 	bl	800faf8 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	2200      	movs	r2, #0
 800c62e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800c630:	6978      	ldr	r0, [r7, #20]
 800c632:	f7ff ff53 	bl	800c4dc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	3314      	adds	r3, #20
 800c63a:	f107 0210 	add.w	r2, r7, #16
 800c63e:	4611      	mov	r1, r2
 800c640:	4618      	mov	r0, r3
 800c642:	f00c f960 	bl	8018906 <sys_arch_mbox_tryfetch>
 800c646:	4603      	mov	r3, r0
 800c648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c64c:	d1d5      	bne.n	800c5fa <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	3314      	adds	r3, #20
 800c652:	4618      	mov	r0, r3
 800c654:	f00c f8ec 	bl	8018830 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	3314      	adds	r3, #20
 800c65c:	4618      	mov	r0, r3
 800c65e:	f00c f97f 	bl	8018960 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800c662:	bf00      	nop
 800c664:	3718      	adds	r7, #24
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
	...

0800c66c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b086      	sub	sp, #24
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	460b      	mov	r3, r1
 800c676:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800c678:	2300      	movs	r3, #0
 800c67a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d106      	bne.n	800c690 <lwip_netconn_do_close_internal+0x24>
 800c682:	4ba1      	ldr	r3, [pc, #644]	; (800c908 <lwip_netconn_do_close_internal+0x29c>)
 800c684:	f240 32a2 	movw	r2, #930	; 0x3a2
 800c688:	49a0      	ldr	r1, [pc, #640]	; (800c90c <lwip_netconn_do_close_internal+0x2a0>)
 800c68a:	48a1      	ldr	r0, [pc, #644]	; (800c910 <lwip_netconn_do_close_internal+0x2a4>)
 800c68c:	f00d f918 	bl	80198c0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c698:	2b10      	cmp	r3, #16
 800c69a:	d006      	beq.n	800c6aa <lwip_netconn_do_close_internal+0x3e>
 800c69c:	4b9a      	ldr	r3, [pc, #616]	; (800c908 <lwip_netconn_do_close_internal+0x29c>)
 800c69e:	f240 32a3 	movw	r2, #931	; 0x3a3
 800c6a2:	499c      	ldr	r1, [pc, #624]	; (800c914 <lwip_netconn_do_close_internal+0x2a8>)
 800c6a4:	489a      	ldr	r0, [pc, #616]	; (800c910 <lwip_netconn_do_close_internal+0x2a4>)
 800c6a6:	f00d f90b 	bl	80198c0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	785b      	ldrb	r3, [r3, #1]
 800c6ae:	2b04      	cmp	r3, #4
 800c6b0:	d006      	beq.n	800c6c0 <lwip_netconn_do_close_internal+0x54>
 800c6b2:	4b95      	ldr	r3, [pc, #596]	; (800c908 <lwip_netconn_do_close_internal+0x29c>)
 800c6b4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800c6b8:	4997      	ldr	r1, [pc, #604]	; (800c918 <lwip_netconn_do_close_internal+0x2ac>)
 800c6ba:	4895      	ldr	r0, [pc, #596]	; (800c910 <lwip_netconn_do_close_internal+0x2a4>)
 800c6bc:	f00d f900 	bl	80198c0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d106      	bne.n	800c6d6 <lwip_netconn_do_close_internal+0x6a>
 800c6c8:	4b8f      	ldr	r3, [pc, #572]	; (800c908 <lwip_netconn_do_close_internal+0x29c>)
 800c6ca:	f240 32a5 	movw	r2, #933	; 0x3a5
 800c6ce:	4993      	ldr	r1, [pc, #588]	; (800c91c <lwip_netconn_do_close_internal+0x2b0>)
 800c6d0:	488f      	ldr	r0, [pc, #572]	; (800c910 <lwip_netconn_do_close_internal+0x2a4>)
 800c6d2:	f00d f8f5 	bl	80198c0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6a1b      	ldr	r3, [r3, #32]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d106      	bne.n	800c6ec <lwip_netconn_do_close_internal+0x80>
 800c6de:	4b8a      	ldr	r3, [pc, #552]	; (800c908 <lwip_netconn_do_close_internal+0x29c>)
 800c6e0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c6e4:	498e      	ldr	r1, [pc, #568]	; (800c920 <lwip_netconn_do_close_internal+0x2b4>)
 800c6e6:	488a      	ldr	r0, [pc, #552]	; (800c910 <lwip_netconn_do_close_internal+0x2a4>)
 800c6e8:	f00d f8ea 	bl	80198c0 <iprintf>

  tpcb = conn->pcb.tcp;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6a1b      	ldr	r3, [r3, #32]
 800c6f6:	7a1b      	ldrb	r3, [r3, #8]
 800c6f8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800c6fa:	7bfb      	ldrb	r3, [r7, #15]
 800c6fc:	f003 0301 	and.w	r3, r3, #1
 800c700:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800c702:	7bfb      	ldrb	r3, [r7, #15]
 800c704:	f003 0302 	and.w	r3, r3, #2
 800c708:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800c70a:	7bfb      	ldrb	r3, [r7, #15]
 800c70c:	2b03      	cmp	r3, #3
 800c70e:	d102      	bne.n	800c716 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800c710:	2301      	movs	r3, #1
 800c712:	75bb      	strb	r3, [r7, #22]
 800c714:	e01f      	b.n	800c756 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800c716:	7bbb      	ldrb	r3, [r7, #14]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d00e      	beq.n	800c73a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800c720:	2b05      	cmp	r3, #5
 800c722:	d007      	beq.n	800c734 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800c728:	2b06      	cmp	r3, #6
 800c72a:	d003      	beq.n	800c734 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800c730:	2b08      	cmp	r3, #8
 800c732:	d102      	bne.n	800c73a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800c734:	2301      	movs	r3, #1
 800c736:	75bb      	strb	r3, [r7, #22]
 800c738:	e00d      	b.n	800c756 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800c73a:	7b7b      	ldrb	r3, [r7, #13]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d008      	beq.n	800c752 <lwip_netconn_do_close_internal+0xe6>
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	8b5b      	ldrh	r3, [r3, #26]
 800c744:	f003 0310 	and.w	r3, r3, #16
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d002      	beq.n	800c752 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800c74c:	2301      	movs	r3, #1
 800c74e:	75bb      	strb	r3, [r7, #22]
 800c750:	e001      	b.n	800c756 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800c752:	2300      	movs	r3, #0
 800c754:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800c756:	7dbb      	ldrb	r3, [r7, #22]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d003      	beq.n	800c764 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800c75c:	2100      	movs	r1, #0
 800c75e:	6938      	ldr	r0, [r7, #16]
 800c760:	f004 fa0a 	bl	8010b78 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	7d1b      	ldrb	r3, [r3, #20]
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d104      	bne.n	800c776 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800c76c:	2100      	movs	r1, #0
 800c76e:	6938      	ldr	r0, [r7, #16]
 800c770:	f004 fa7a 	bl	8010c68 <tcp_accept>
 800c774:	e01d      	b.n	800c7b2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800c776:	7bbb      	ldrb	r3, [r7, #14]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d007      	beq.n	800c78c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800c77c:	2100      	movs	r1, #0
 800c77e:	6938      	ldr	r0, [r7, #16]
 800c780:	f004 fa0c 	bl	8010b9c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800c784:	2100      	movs	r1, #0
 800c786:	6938      	ldr	r0, [r7, #16]
 800c788:	f004 fa6e 	bl	8010c68 <tcp_accept>
    }
    if (shut_tx) {
 800c78c:	7b7b      	ldrb	r3, [r7, #13]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d003      	beq.n	800c79a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800c792:	2100      	movs	r1, #0
 800c794:	6938      	ldr	r0, [r7, #16]
 800c796:	f004 fa23 	bl	8010be0 <tcp_sent>
    }
    if (shut_close) {
 800c79a:	7dbb      	ldrb	r3, [r7, #22]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d008      	beq.n	800c7b2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	2100      	movs	r1, #0
 800c7a4:	6938      	ldr	r0, [r7, #16]
 800c7a6:	f004 fa77 	bl	8010c98 <tcp_poll>
      tcp_err(tpcb, NULL);
 800c7aa:	2100      	movs	r1, #0
 800c7ac:	6938      	ldr	r0, [r7, #16]
 800c7ae:	f004 fa39 	bl	8010c24 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800c7b2:	7dbb      	ldrb	r3, [r7, #22]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d005      	beq.n	800c7c4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800c7b8:	6938      	ldr	r0, [r7, #16]
 800c7ba:	f003 f859 	bl	800f870 <tcp_close>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	75fb      	strb	r3, [r7, #23]
 800c7c2:	e007      	b.n	800c7d4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800c7c4:	7bbb      	ldrb	r3, [r7, #14]
 800c7c6:	7b7a      	ldrb	r2, [r7, #13]
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	6938      	ldr	r0, [r7, #16]
 800c7cc:	f003 f87c 	bl	800f8c8 <tcp_shutdown>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800c7d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d102      	bne.n	800c7e2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800c7dc:	2301      	movs	r3, #1
 800c7de:	757b      	strb	r3, [r7, #21]
 800c7e0:	e016      	b.n	800c810 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800c7e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ea:	d10f      	bne.n	800c80c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6a1b      	ldr	r3, [r3, #32]
 800c7f0:	7a5b      	ldrb	r3, [r3, #9]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d10c      	bne.n	800c810 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800c7fa:	7dbb      	ldrb	r3, [r7, #22]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d007      	beq.n	800c810 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800c800:	6938      	ldr	r0, [r7, #16]
 800c802:	f003 f979 	bl	800faf8 <tcp_abort>
          err = ERR_OK;
 800c806:	2300      	movs	r3, #0
 800c808:	75fb      	strb	r3, [r7, #23]
 800c80a:	e001      	b.n	800c810 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800c80c:	2301      	movs	r3, #1
 800c80e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800c810:	7d7b      	ldrb	r3, [r7, #21]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d044      	beq.n	800c8a0 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6a1b      	ldr	r3, [r3, #32]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	330c      	adds	r3, #12
 800c81e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6a1b      	ldr	r3, [r3, #32]
 800c824:	7dfa      	ldrb	r2, [r7, #23]
 800c826:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2200      	movs	r2, #0
 800c832:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800c834:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d129      	bne.n	800c890 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800c83c:	7dbb      	ldrb	r3, [r7, #22]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d00c      	beq.n	800c85c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d005      	beq.n	800c85c <lwip_netconn_do_close_internal+0x1f0>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c854:	2200      	movs	r2, #0
 800c856:	2104      	movs	r1, #4
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	4798      	blx	r3
      }
      if (shut_rx) {
 800c85c:	7bbb      	ldrb	r3, [r7, #14]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d009      	beq.n	800c876 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c866:	2b00      	cmp	r3, #0
 800c868:	d005      	beq.n	800c876 <lwip_netconn_do_close_internal+0x20a>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c86e:	2200      	movs	r2, #0
 800c870:	2100      	movs	r1, #0
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	4798      	blx	r3
      }
      if (shut_tx) {
 800c876:	7b7b      	ldrb	r3, [r7, #13]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d009      	beq.n	800c890 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c880:	2b00      	cmp	r3, #0
 800c882:	d005      	beq.n	800c890 <lwip_netconn_do_close_internal+0x224>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c888:	2200      	movs	r2, #0
 800c88a:	2102      	movs	r1, #2
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c890:	78fb      	ldrb	r3, [r7, #3]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d002      	beq.n	800c89c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800c896:	68b8      	ldr	r0, [r7, #8]
 800c898:	f00c f8c8 	bl	8018a2c <sys_sem_signal>
    }
    return ERR_OK;
 800c89c:	2300      	movs	r3, #0
 800c89e:	e02e      	b.n	800c8fe <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800c8a0:	7d7b      	ldrb	r3, [r7, #21]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d11e      	bne.n	800c8e4 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	7d1b      	ldrb	r3, [r3, #20]
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d106      	bne.n	800c8bc <lwip_netconn_do_close_internal+0x250>
 800c8ae:	4b16      	ldr	r3, [pc, #88]	; (800c908 <lwip_netconn_do_close_internal+0x29c>)
 800c8b0:	f240 4241 	movw	r2, #1089	; 0x441
 800c8b4:	491b      	ldr	r1, [pc, #108]	; (800c924 <lwip_netconn_do_close_internal+0x2b8>)
 800c8b6:	4816      	ldr	r0, [pc, #88]	; (800c910 <lwip_netconn_do_close_internal+0x2a4>)
 800c8b8:	f00d f802 	bl	80198c0 <iprintf>
    if (shut_tx) {
 800c8bc:	7b7b      	ldrb	r3, [r7, #13]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d003      	beq.n	800c8ca <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800c8c2:	4919      	ldr	r1, [pc, #100]	; (800c928 <lwip_netconn_do_close_internal+0x2bc>)
 800c8c4:	6938      	ldr	r0, [r7, #16]
 800c8c6:	f004 f98b 	bl	8010be0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	4917      	ldr	r1, [pc, #92]	; (800c92c <lwip_netconn_do_close_internal+0x2c0>)
 800c8ce:	6938      	ldr	r0, [r7, #16]
 800c8d0:	f004 f9e2 	bl	8010c98 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800c8d4:	4916      	ldr	r1, [pc, #88]	; (800c930 <lwip_netconn_do_close_internal+0x2c4>)
 800c8d6:	6938      	ldr	r0, [r7, #16]
 800c8d8:	f004 f9a4 	bl	8010c24 <tcp_err>
    tcp_arg(tpcb, conn);
 800c8dc:	6879      	ldr	r1, [r7, #4]
 800c8de:	6938      	ldr	r0, [r7, #16]
 800c8e0:	f004 f94a 	bl	8010b78 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800c8e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d106      	bne.n	800c8fa <lwip_netconn_do_close_internal+0x28e>
 800c8ec:	4b06      	ldr	r3, [pc, #24]	; (800c908 <lwip_netconn_do_close_internal+0x29c>)
 800c8ee:	f240 424d 	movw	r2, #1101	; 0x44d
 800c8f2:	4910      	ldr	r1, [pc, #64]	; (800c934 <lwip_netconn_do_close_internal+0x2c8>)
 800c8f4:	4806      	ldr	r0, [pc, #24]	; (800c910 <lwip_netconn_do_close_internal+0x2a4>)
 800c8f6:	f00c ffe3 	bl	80198c0 <iprintf>
  return err;
 800c8fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3718      	adds	r7, #24
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	0801d894 	.word	0x0801d894
 800c90c:	0801db68 	.word	0x0801db68
 800c910:	0801d8d8 	.word	0x0801d8d8
 800c914:	0801db78 	.word	0x0801db78
 800c918:	0801db98 	.word	0x0801db98
 800c91c:	0801dbbc 	.word	0x0801dbbc
 800c920:	0801d9fc 	.word	0x0801d9fc
 800c924:	0801dbd0 	.word	0x0801dbd0
 800c928:	0800c05d 	.word	0x0800c05d
 800c92c:	0800bf95 	.word	0x0800bf95
 800c930:	0800c105 	.word	0x0800c105
 800c934:	0801dbf4 	.word	0x0801dbf4

0800c938 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	785b      	ldrb	r3, [r3, #1]
 800c94a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800c94c:	7afb      	ldrb	r3, [r7, #11]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d00d      	beq.n	800c96e <lwip_netconn_do_delconn+0x36>
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c95c:	2b10      	cmp	r3, #16
 800c95e:	d006      	beq.n	800c96e <lwip_netconn_do_delconn+0x36>
 800c960:	4b60      	ldr	r3, [pc, #384]	; (800cae4 <lwip_netconn_do_delconn+0x1ac>)
 800c962:	f240 425f 	movw	r2, #1119	; 0x45f
 800c966:	4960      	ldr	r1, [pc, #384]	; (800cae8 <lwip_netconn_do_delconn+0x1b0>)
 800c968:	4860      	ldr	r0, [pc, #384]	; (800caec <lwip_netconn_do_delconn+0x1b4>)
 800c96a:	f00c ffa9 	bl	80198c0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800c96e:	7afb      	ldrb	r3, [r7, #11]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d005      	beq.n	800c980 <lwip_netconn_do_delconn+0x48>
 800c974:	7afb      	ldrb	r3, [r7, #11]
 800c976:	2b02      	cmp	r3, #2
 800c978:	d002      	beq.n	800c980 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800c97a:	7afb      	ldrb	r3, [r7, #11]
 800c97c:	2b03      	cmp	r3, #3
 800c97e:	d109      	bne.n	800c994 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800c980:	7afb      	ldrb	r3, [r7, #11]
 800c982:	2b03      	cmp	r3, #3
 800c984:	d10a      	bne.n	800c99c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	7f1b      	ldrb	r3, [r3, #28]
 800c98c:	f003 0304 	and.w	r3, r3, #4
 800c990:	2b00      	cmp	r3, #0
 800c992:	d103      	bne.n	800c99c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	22fb      	movs	r2, #251	; 0xfb
 800c998:	711a      	strb	r2, [r3, #4]
 800c99a:	e097      	b.n	800cacc <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800c99c:	7afb      	ldrb	r3, [r7, #11]
 800c99e:	2b03      	cmp	r3, #3
 800c9a0:	d10d      	bne.n	800c9be <lwip_netconn_do_delconn+0x86>
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	7f1b      	ldrb	r3, [r3, #28]
 800c9a8:	f003 0304 	and.w	r3, r3, #4
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d106      	bne.n	800c9be <lwip_netconn_do_delconn+0x86>
 800c9b0:	4b4c      	ldr	r3, [pc, #304]	; (800cae4 <lwip_netconn_do_delconn+0x1ac>)
 800c9b2:	f240 427b 	movw	r2, #1147	; 0x47b
 800c9b6:	494e      	ldr	r1, [pc, #312]	; (800caf0 <lwip_netconn_do_delconn+0x1b8>)
 800c9b8:	484c      	ldr	r0, [pc, #304]	; (800caec <lwip_netconn_do_delconn+0x1b4>)
 800c9ba:	f00c ff81 	bl	80198c0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7ff fdd1 	bl	800c570 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d05f      	beq.n	800ca98 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c9e2:	2b10      	cmp	r3, #16
 800c9e4:	d00e      	beq.n	800ca04 <lwip_netconn_do_delconn+0xcc>
 800c9e6:	2b20      	cmp	r3, #32
 800c9e8:	d000      	beq.n	800c9ec <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 800c9ea:	e051      	b.n	800ca90 <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f009 fba5 	bl	801614c <udp_remove>
          break;
 800ca02:	e045      	b.n	800ca90 <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	6a1b      	ldr	r3, [r3, #32]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d006      	beq.n	800ca1c <lwip_netconn_do_delconn+0xe4>
 800ca0e:	4b35      	ldr	r3, [pc, #212]	; (800cae4 <lwip_netconn_do_delconn+0x1ac>)
 800ca10:	f240 4294 	movw	r2, #1172	; 0x494
 800ca14:	4937      	ldr	r1, [pc, #220]	; (800caf4 <lwip_netconn_do_delconn+0x1bc>)
 800ca16:	4835      	ldr	r0, [pc, #212]	; (800caec <lwip_netconn_do_delconn+0x1b4>)
 800ca18:	f00c ff52 	bl	80198c0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2204      	movs	r2, #4
 800ca22:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2203      	movs	r2, #3
 800ca28:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	68fa      	ldr	r2, [r7, #12]
 800ca30:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2100      	movs	r1, #0
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f7ff fe17 	bl	800c66c <lwip_netconn_do_close_internal>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d04a      	beq.n	800cada <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	785b      	ldrb	r3, [r3, #1]
 800ca4a:	2b04      	cmp	r3, #4
 800ca4c:	d006      	beq.n	800ca5c <lwip_netconn_do_delconn+0x124>
 800ca4e:	4b25      	ldr	r3, [pc, #148]	; (800cae4 <lwip_netconn_do_delconn+0x1ac>)
 800ca50:	f240 429a 	movw	r2, #1178	; 0x49a
 800ca54:	4928      	ldr	r1, [pc, #160]	; (800caf8 <lwip_netconn_do_delconn+0x1c0>)
 800ca56:	4825      	ldr	r0, [pc, #148]	; (800caec <lwip_netconn_do_delconn+0x1b4>)
 800ca58:	f00c ff32 	bl	80198c0 <iprintf>
            UNLOCK_TCPIP_CORE();
 800ca5c:	4827      	ldr	r0, [pc, #156]	; (800cafc <lwip_netconn_do_delconn+0x1c4>)
 800ca5e:	f00c f856 	bl	8018b0e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	330c      	adds	r3, #12
 800ca68:	2100      	movs	r1, #0
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f00b ffad 	bl	80189ca <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800ca70:	4822      	ldr	r0, [pc, #136]	; (800cafc <lwip_netconn_do_delconn+0x1c4>)
 800ca72:	f00c f83d 	bl	8018af0 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	785b      	ldrb	r3, [r3, #1]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d02c      	beq.n	800cada <lwip_netconn_do_delconn+0x1a2>
 800ca80:	4b18      	ldr	r3, [pc, #96]	; (800cae4 <lwip_netconn_do_delconn+0x1ac>)
 800ca82:	f240 429e 	movw	r2, #1182	; 0x49e
 800ca86:	491c      	ldr	r1, [pc, #112]	; (800caf8 <lwip_netconn_do_delconn+0x1c0>)
 800ca88:	4818      	ldr	r0, [pc, #96]	; (800caec <lwip_netconn_do_delconn+0x1b4>)
 800ca8a:	f00c ff19 	bl	80198c0 <iprintf>
          return;
 800ca8e:	e024      	b.n	800cada <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	2200      	movs	r2, #0
 800ca96:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d007      	beq.n	800cab2 <lwip_netconn_do_delconn+0x17a>
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa8:	68fa      	ldr	r2, [r7, #12]
 800caaa:	6810      	ldr	r0, [r2, #0]
 800caac:	2200      	movs	r2, #0
 800caae:	2100      	movs	r1, #0
 800cab0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d007      	beq.n	800cacc <lwip_netconn_do_delconn+0x194>
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cac2:	68fa      	ldr	r2, [r7, #12]
 800cac4:	6810      	ldr	r0, [r2, #0]
 800cac6:	2200      	movs	r2, #0
 800cac8:	2102      	movs	r1, #2
 800caca:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	330c      	adds	r3, #12
 800cad2:	4618      	mov	r0, r3
 800cad4:	f00b ffc4 	bl	8018a60 <sys_sem_valid>
 800cad8:	e000      	b.n	800cadc <lwip_netconn_do_delconn+0x1a4>
          return;
 800cada:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800cadc:	3710      	adds	r7, #16
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
 800cae2:	bf00      	nop
 800cae4:	0801d894 	.word	0x0801d894
 800cae8:	0801dc04 	.word	0x0801dc04
 800caec:	0801d8d8 	.word	0x0801d8d8
 800caf0:	0801dc18 	.word	0x0801dc18
 800caf4:	0801dc38 	.word	0x0801dc38
 800caf8:	0801dc54 	.word	0x0801dc54
 800cafc:	2000c5dc 	.word	0x2000c5dc

0800cb00 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b088      	sub	sp, #32
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	60b9      	str	r1, [r7, #8]
 800cb0a:	4613      	mov	r3, r2
 800cb0c:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800cb16:	69bb      	ldr	r3, [r7, #24]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d102      	bne.n	800cb22 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800cb1c:	f06f 0305 	mvn.w	r3, #5
 800cb20:	e070      	b.n	800cc04 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800cb22:	69bb      	ldr	r3, [r7, #24]
 800cb24:	785b      	ldrb	r3, [r3, #1]
 800cb26:	2b03      	cmp	r3, #3
 800cb28:	d006      	beq.n	800cb38 <lwip_netconn_do_connected+0x38>
 800cb2a:	4b38      	ldr	r3, [pc, #224]	; (800cc0c <lwip_netconn_do_connected+0x10c>)
 800cb2c:	f240 5223 	movw	r2, #1315	; 0x523
 800cb30:	4937      	ldr	r1, [pc, #220]	; (800cc10 <lwip_netconn_do_connected+0x110>)
 800cb32:	4838      	ldr	r0, [pc, #224]	; (800cc14 <lwip_netconn_do_connected+0x114>)
 800cb34:	f00c fec4 	bl	80198c0 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800cb38:	69bb      	ldr	r3, [r7, #24]
 800cb3a:	6a1b      	ldr	r3, [r3, #32]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d10c      	bne.n	800cb5a <lwip_netconn_do_connected+0x5a>
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	7f1b      	ldrb	r3, [r3, #28]
 800cb44:	f003 0304 	and.w	r3, r3, #4
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d106      	bne.n	800cb5a <lwip_netconn_do_connected+0x5a>
 800cb4c:	4b2f      	ldr	r3, [pc, #188]	; (800cc0c <lwip_netconn_do_connected+0x10c>)
 800cb4e:	f240 5225 	movw	r2, #1317	; 0x525
 800cb52:	4931      	ldr	r1, [pc, #196]	; (800cc18 <lwip_netconn_do_connected+0x118>)
 800cb54:	482f      	ldr	r0, [pc, #188]	; (800cc14 <lwip_netconn_do_connected+0x114>)
 800cb56:	f00c feb3 	bl	80198c0 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800cb5a:	69bb      	ldr	r3, [r7, #24]
 800cb5c:	6a1b      	ldr	r3, [r3, #32]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d008      	beq.n	800cb74 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800cb62:	69bb      	ldr	r3, [r7, #24]
 800cb64:	6a1b      	ldr	r3, [r3, #32]
 800cb66:	79fa      	ldrb	r2, [r7, #7]
 800cb68:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800cb6a:	69bb      	ldr	r3, [r7, #24]
 800cb6c:	6a1b      	ldr	r3, [r3, #32]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	330c      	adds	r3, #12
 800cb72:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800cb74:	69bb      	ldr	r3, [r7, #24]
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb7c:	2b10      	cmp	r3, #16
 800cb7e:	d106      	bne.n	800cb8e <lwip_netconn_do_connected+0x8e>
 800cb80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d102      	bne.n	800cb8e <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800cb88:	69b8      	ldr	r0, [r7, #24]
 800cb8a:	f7ff fb91 	bl	800c2b0 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800cb8e:	69bb      	ldr	r3, [r7, #24]
 800cb90:	7f1b      	ldrb	r3, [r3, #28]
 800cb92:	f003 0304 	and.w	r3, r3, #4
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	bf0c      	ite	eq
 800cb9a:	2301      	moveq	r3, #1
 800cb9c:	2300      	movne	r3, #0
 800cb9e:	b2db      	uxtb	r3, r3
 800cba0:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800cba2:	69bb      	ldr	r3, [r7, #24]
 800cba4:	7f1b      	ldrb	r3, [r3, #28]
 800cba6:	f023 0304 	bic.w	r3, r3, #4
 800cbaa:	b2da      	uxtb	r2, r3
 800cbac:	69bb      	ldr	r3, [r7, #24]
 800cbae:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d002      	beq.n	800cbbc <lwip_netconn_do_connected+0xbc>
 800cbb6:	69fb      	ldr	r3, [r7, #28]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d10c      	bne.n	800cbd6 <lwip_netconn_do_connected+0xd6>
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d102      	bne.n	800cbc8 <lwip_netconn_do_connected+0xc8>
 800cbc2:	69fb      	ldr	r3, [r7, #28]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d006      	beq.n	800cbd6 <lwip_netconn_do_connected+0xd6>
 800cbc8:	4b10      	ldr	r3, [pc, #64]	; (800cc0c <lwip_netconn_do_connected+0x10c>)
 800cbca:	f240 5232 	movw	r2, #1330	; 0x532
 800cbce:	4913      	ldr	r1, [pc, #76]	; (800cc1c <lwip_netconn_do_connected+0x11c>)
 800cbd0:	4810      	ldr	r0, [pc, #64]	; (800cc14 <lwip_netconn_do_connected+0x114>)
 800cbd2:	f00c fe75 	bl	80198c0 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800cbd6:	69bb      	ldr	r3, [r7, #24]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800cbdc:	69bb      	ldr	r3, [r7, #24]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800cbe2:	69bb      	ldr	r3, [r7, #24]
 800cbe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d005      	beq.n	800cbf6 <lwip_netconn_do_connected+0xf6>
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbee:	2200      	movs	r2, #0
 800cbf0:	2102      	movs	r1, #2
 800cbf2:	69b8      	ldr	r0, [r7, #24]
 800cbf4:	4798      	blx	r3

  if (was_blocking) {
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d002      	beq.n	800cc02 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800cbfc:	69f8      	ldr	r0, [r7, #28]
 800cbfe:	f00b ff15 	bl	8018a2c <sys_sem_signal>
  }
  return ERR_OK;
 800cc02:	2300      	movs	r3, #0
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3720      	adds	r7, #32
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	0801d894 	.word	0x0801d894
 800cc10:	0801dc5c 	.word	0x0801dc5c
 800cc14:	0801d8d8 	.word	0x0801d8d8
 800cc18:	0801dc7c 	.word	0x0801dc7c
 800cc1c:	0801dcbc 	.word	0x0801dcbc

0800cc20 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b086      	sub	sp, #24
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	685b      	ldr	r3, [r3, #4]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d102      	bne.n	800cc3c <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800cc36:	23f1      	movs	r3, #241	; 0xf1
 800cc38:	75fb      	strb	r3, [r7, #23]
 800cc3a:	e09b      	b.n	800cd74 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	781b      	ldrb	r3, [r3, #0]
 800cc42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc46:	2b10      	cmp	r3, #16
 800cc48:	d00f      	beq.n	800cc6a <lwip_netconn_do_connect+0x4a>
 800cc4a:	2b20      	cmp	r3, #32
 800cc4c:	f040 8087 	bne.w	800cd5e <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	6858      	ldr	r0, [r3, #4]
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	6899      	ldr	r1, [r3, #8]
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	899b      	ldrh	r3, [r3, #12]
 800cc5e:	461a      	mov	r2, r3
 800cc60:	f009 f9e6 	bl	8016030 <udp_connect>
 800cc64:	4603      	mov	r3, r0
 800cc66:	75fb      	strb	r3, [r7, #23]
        break;
 800cc68:	e084      	b.n	800cd74 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	785b      	ldrb	r3, [r3, #1]
 800cc70:	2b03      	cmp	r3, #3
 800cc72:	d102      	bne.n	800cc7a <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800cc74:	23f7      	movs	r3, #247	; 0xf7
 800cc76:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800cc78:	e07b      	b.n	800cd72 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	785b      	ldrb	r3, [r3, #1]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d002      	beq.n	800cc8a <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800cc84:	23f6      	movs	r3, #246	; 0xf6
 800cc86:	75fb      	strb	r3, [r7, #23]
        break;
 800cc88:	e073      	b.n	800cd72 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7ff fb0e 	bl	800c2b0 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	6858      	ldr	r0, [r3, #4]
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	6899      	ldr	r1, [r3, #8]
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	899a      	ldrh	r2, [r3, #12]
 800cca2:	4b38      	ldr	r3, [pc, #224]	; (800cd84 <lwip_netconn_do_connect+0x164>)
 800cca4:	f003 f824 	bl	800fcf0 <tcp_connect>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800ccac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d15e      	bne.n	800cd72 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	7f1b      	ldrb	r3, [r3, #28]
 800ccba:	f003 0302 	and.w	r3, r3, #2
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	bf14      	ite	ne
 800ccc2:	2301      	movne	r3, #1
 800ccc4:	2300      	moveq	r3, #0
 800ccc6:	b2db      	uxtb	r3, r3
 800ccc8:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	2203      	movs	r2, #3
 800ccd0:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800ccd2:	7bfb      	ldrb	r3, [r7, #15]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d009      	beq.n	800ccec <lwip_netconn_do_connect+0xcc>
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	7f1a      	ldrb	r2, [r3, #28]
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f042 0204 	orr.w	r2, r2, #4
 800cce6:	b2d2      	uxtb	r2, r2
 800cce8:	771a      	strb	r2, [r3, #28]
 800ccea:	e008      	b.n	800ccfe <lwip_netconn_do_connect+0xde>
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	7f1a      	ldrb	r2, [r3, #28]
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f022 0204 	bic.w	r2, r2, #4
 800ccfa:	b2d2      	uxtb	r2, r2
 800ccfc:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800ccfe:	7bfb      	ldrb	r3, [r7, #15]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d002      	beq.n	800cd0a <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800cd04:	23fb      	movs	r3, #251	; 0xfb
 800cd06:	75fb      	strb	r3, [r7, #23]
        break;
 800cd08:	e033      	b.n	800cd72 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	693a      	ldr	r2, [r7, #16]
 800cd10:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	785b      	ldrb	r3, [r3, #1]
 800cd18:	2b03      	cmp	r3, #3
 800cd1a:	d006      	beq.n	800cd2a <lwip_netconn_do_connect+0x10a>
 800cd1c:	4b1a      	ldr	r3, [pc, #104]	; (800cd88 <lwip_netconn_do_connect+0x168>)
 800cd1e:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800cd22:	491a      	ldr	r1, [pc, #104]	; (800cd8c <lwip_netconn_do_connect+0x16c>)
 800cd24:	481a      	ldr	r0, [pc, #104]	; (800cd90 <lwip_netconn_do_connect+0x170>)
 800cd26:	f00c fdcb 	bl	80198c0 <iprintf>
              UNLOCK_TCPIP_CORE();
 800cd2a:	481a      	ldr	r0, [pc, #104]	; (800cd94 <lwip_netconn_do_connect+0x174>)
 800cd2c:	f00b feef 	bl	8018b0e <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	330c      	adds	r3, #12
 800cd36:	2100      	movs	r1, #0
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f00b fe46 	bl	80189ca <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800cd3e:	4815      	ldr	r0, [pc, #84]	; (800cd94 <lwip_netconn_do_connect+0x174>)
 800cd40:	f00b fed6 	bl	8018af0 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	785b      	ldrb	r3, [r3, #1]
 800cd4a:	2b03      	cmp	r3, #3
 800cd4c:	d116      	bne.n	800cd7c <lwip_netconn_do_connect+0x15c>
 800cd4e:	4b0e      	ldr	r3, [pc, #56]	; (800cd88 <lwip_netconn_do_connect+0x168>)
 800cd50:	f240 5274 	movw	r2, #1396	; 0x574
 800cd54:	490d      	ldr	r1, [pc, #52]	; (800cd8c <lwip_netconn_do_connect+0x16c>)
 800cd56:	480e      	ldr	r0, [pc, #56]	; (800cd90 <lwip_netconn_do_connect+0x170>)
 800cd58:	f00c fdb2 	bl	80198c0 <iprintf>
              return;
 800cd5c:	e00e      	b.n	800cd7c <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800cd5e:	4b0a      	ldr	r3, [pc, #40]	; (800cd88 <lwip_netconn_do_connect+0x168>)
 800cd60:	f240 527f 	movw	r2, #1407	; 0x57f
 800cd64:	490c      	ldr	r1, [pc, #48]	; (800cd98 <lwip_netconn_do_connect+0x178>)
 800cd66:	480a      	ldr	r0, [pc, #40]	; (800cd90 <lwip_netconn_do_connect+0x170>)
 800cd68:	f00c fdaa 	bl	80198c0 <iprintf>
 800cd6c:	23fa      	movs	r3, #250	; 0xfa
 800cd6e:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800cd70:	e000      	b.n	800cd74 <lwip_netconn_do_connect+0x154>
        break;
 800cd72:	bf00      	nop
    }
  }
  msg->err = err;
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	7dfa      	ldrb	r2, [r7, #23]
 800cd78:	711a      	strb	r2, [r3, #4]
 800cd7a:	e000      	b.n	800cd7e <lwip_netconn_do_connect+0x15e>
              return;
 800cd7c:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800cd7e:	3718      	adds	r7, #24
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	0800cb01 	.word	0x0800cb01
 800cd88:	0801d894 	.word	0x0801d894
 800cd8c:	0801dc54 	.word	0x0801dc54
 800cd90:	0801d8d8 	.word	0x0801d8d8
 800cd94:	2000c5dc 	.word	0x2000c5dc
 800cd98:	0801dcdc 	.word	0x0801dcdc

0800cd9c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b084      	sub	sp, #16
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4618      	mov	r0, r3
 800cdae:	f7fe ff66 	bl	800bc7e <netconn_err>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800cdb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d135      	bne.n	800ce2a <lwip_netconn_do_send+0x8e>
    if (msg->conn->pcb.tcp != NULL) {
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d02e      	beq.n	800ce26 <lwip_netconn_do_send+0x8a>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cdd2:	2b20      	cmp	r3, #32
 800cdd4:	d123      	bne.n	800ce1e <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	689b      	ldr	r3, [r3, #8]
 800cdda:	689b      	ldr	r3, [r3, #8]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d10c      	bne.n	800cdfa <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	685a      	ldr	r2, [r3, #4]
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	689b      	ldr	r3, [r3, #8]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4619      	mov	r1, r3
 800cdee:	4610      	mov	r0, r2
 800cdf0:	f008 feac 	bl	8015b4c <udp_send>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800cdf8:	e017      	b.n	800ce2a <lwip_netconn_do_send+0x8e>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	6858      	ldr	r0, [r3, #4]
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	689b      	ldr	r3, [r3, #8]
 800ce04:	6819      	ldr	r1, [r3, #0]
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	689b      	ldr	r3, [r3, #8]
 800ce0a:	f103 0208 	add.w	r2, r3, #8
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	689b      	ldr	r3, [r3, #8]
 800ce12:	899b      	ldrh	r3, [r3, #12]
 800ce14:	f008 fece 	bl	8015bb4 <udp_sendto>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	73fb      	strb	r3, [r7, #15]
          break;
 800ce1c:	e005      	b.n	800ce2a <lwip_netconn_do_send+0x8e>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800ce1e:	23f5      	movs	r3, #245	; 0xf5
 800ce20:	73fb      	strb	r3, [r7, #15]
          break;
 800ce22:	bf00      	nop
 800ce24:	e001      	b.n	800ce2a <lwip_netconn_do_send+0x8e>
      }
    } else {
      err = ERR_CONN;
 800ce26:	23f5      	movs	r3, #245	; 0xf5
 800ce28:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	7bfa      	ldrb	r2, [r7, #15]
 800ce2e:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ce30:	bf00      	nop
 800ce32:	3710      	adds	r7, #16
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b086      	sub	sp, #24
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	2200      	movs	r2, #0
 800ce48:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d022      	beq.n	800ce9a <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce5e:	2b10      	cmp	r3, #16
 800ce60:	d11b      	bne.n	800ce9a <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	689b      	ldr	r3, [r3, #8]
 800ce66:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce6e:	d202      	bcs.n	800ce76 <lwip_netconn_do_recv+0x3e>
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	b29b      	uxth	r3, r3
 800ce74:	e001      	b.n	800ce7a <lwip_netconn_do_recv+0x42>
 800ce76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ce7a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	685b      	ldr	r3, [r3, #4]
 800ce82:	89fa      	ldrh	r2, [r7, #14]
 800ce84:	4611      	mov	r1, r2
 800ce86:	4618      	mov	r0, r3
 800ce88:	f002 fe9c 	bl	800fbc4 <tcp_recved>
        remaining -= recved;
 800ce8c:	89fb      	ldrh	r3, [r7, #14]
 800ce8e:	697a      	ldr	r2, [r7, #20]
 800ce90:	1ad3      	subs	r3, r2, r3
 800ce92:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d1e6      	bne.n	800ce68 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ce9a:	bf00      	nop
 800ce9c:	3718      	adds	r7, #24
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
	...

0800cea4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b088      	sub	sp, #32
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	460b      	mov	r3, r1
 800ceae:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d106      	bne.n	800cec8 <lwip_netconn_do_writemore+0x24>
 800ceba:	4b96      	ldr	r3, [pc, #600]	; (800d114 <lwip_netconn_do_writemore+0x270>)
 800cebc:	f240 6273 	movw	r2, #1651	; 0x673
 800cec0:	4995      	ldr	r1, [pc, #596]	; (800d118 <lwip_netconn_do_writemore+0x274>)
 800cec2:	4896      	ldr	r0, [pc, #600]	; (800d11c <lwip_netconn_do_writemore+0x278>)
 800cec4:	f00c fcfc 	bl	80198c0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	785b      	ldrb	r3, [r3, #1]
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d006      	beq.n	800cede <lwip_netconn_do_writemore+0x3a>
 800ced0:	4b90      	ldr	r3, [pc, #576]	; (800d114 <lwip_netconn_do_writemore+0x270>)
 800ced2:	f240 6274 	movw	r2, #1652	; 0x674
 800ced6:	4992      	ldr	r1, [pc, #584]	; (800d120 <lwip_netconn_do_writemore+0x27c>)
 800ced8:	4890      	ldr	r0, [pc, #576]	; (800d11c <lwip_netconn_do_writemore+0x278>)
 800ceda:	f00c fcf1 	bl	80198c0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6a1b      	ldr	r3, [r3, #32]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d106      	bne.n	800cef4 <lwip_netconn_do_writemore+0x50>
 800cee6:	4b8b      	ldr	r3, [pc, #556]	; (800d114 <lwip_netconn_do_writemore+0x270>)
 800cee8:	f240 6275 	movw	r2, #1653	; 0x675
 800ceec:	498d      	ldr	r1, [pc, #564]	; (800d124 <lwip_netconn_do_writemore+0x280>)
 800ceee:	488b      	ldr	r0, [pc, #556]	; (800d11c <lwip_netconn_do_writemore+0x278>)
 800cef0:	f00c fce6 	bl	80198c0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d106      	bne.n	800cf0a <lwip_netconn_do_writemore+0x66>
 800cefc:	4b85      	ldr	r3, [pc, #532]	; (800d114 <lwip_netconn_do_writemore+0x270>)
 800cefe:	f240 6276 	movw	r2, #1654	; 0x676
 800cf02:	4989      	ldr	r1, [pc, #548]	; (800d128 <lwip_netconn_do_writemore+0x284>)
 800cf04:	4885      	ldr	r0, [pc, #532]	; (800d11c <lwip_netconn_do_writemore+0x278>)
 800cf06:	f00c fcdb 	bl	80198c0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6a1b      	ldr	r3, [r3, #32]
 800cf0e:	699a      	ldr	r2, [r3, #24]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6a1b      	ldr	r3, [r3, #32]
 800cf14:	695b      	ldr	r3, [r3, #20]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d306      	bcc.n	800cf28 <lwip_netconn_do_writemore+0x84>
 800cf1a:	4b7e      	ldr	r3, [pc, #504]	; (800d114 <lwip_netconn_do_writemore+0x270>)
 800cf1c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800cf20:	4982      	ldr	r1, [pc, #520]	; (800d12c <lwip_netconn_do_writemore+0x288>)
 800cf22:	487e      	ldr	r0, [pc, #504]	; (800d11c <lwip_netconn_do_writemore+0x278>)
 800cf24:	f00c fccc 	bl	80198c0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6a1b      	ldr	r3, [r3, #32]
 800cf2c:	899b      	ldrh	r3, [r3, #12]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d106      	bne.n	800cf40 <lwip_netconn_do_writemore+0x9c>
 800cf32:	4b78      	ldr	r3, [pc, #480]	; (800d114 <lwip_netconn_do_writemore+0x270>)
 800cf34:	f240 6279 	movw	r2, #1657	; 0x679
 800cf38:	497d      	ldr	r1, [pc, #500]	; (800d130 <lwip_netconn_do_writemore+0x28c>)
 800cf3a:	4878      	ldr	r0, [pc, #480]	; (800d11c <lwip_netconn_do_writemore+0x278>)
 800cf3c:	f00c fcc0 	bl	80198c0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6a1b      	ldr	r3, [r3, #32]
 800cf44:	7f1b      	ldrb	r3, [r3, #28]
 800cf46:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	7f1b      	ldrb	r3, [r3, #28]
 800cf4c:	f003 0302 	and.w	r3, r3, #2
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d104      	bne.n	800cf5e <lwip_netconn_do_writemore+0xba>
 800cf54:	7ebb      	ldrb	r3, [r7, #26]
 800cf56:	f003 0304 	and.w	r3, r3, #4
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d001      	beq.n	800cf62 <lwip_netconn_do_writemore+0xbe>
 800cf5e:	2301      	movs	r3, #1
 800cf60:	e000      	b.n	800cf64 <lwip_netconn_do_writemore+0xc0>
 800cf62:	2300      	movs	r3, #0
 800cf64:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6a1b      	ldr	r3, [r3, #32]
 800cf6a:	689b      	ldr	r3, [r3, #8]
 800cf6c:	681a      	ldr	r2, [r3, #0]
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6a1b      	ldr	r3, [r3, #32]
 800cf72:	691b      	ldr	r3, [r3, #16]
 800cf74:	4413      	add	r3, r2
 800cf76:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6a1b      	ldr	r3, [r3, #32]
 800cf7c:	689b      	ldr	r3, [r3, #8]
 800cf7e:	685a      	ldr	r2, [r3, #4]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6a1b      	ldr	r3, [r3, #32]
 800cf84:	691b      	ldr	r3, [r3, #16]
 800cf86:	1ad3      	subs	r3, r2, r3
 800cf88:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf90:	d307      	bcc.n	800cfa2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800cf92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf96:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800cf98:	7ebb      	ldrb	r3, [r7, #26]
 800cf9a:	f043 0302 	orr.w	r3, r3, #2
 800cf9e:	76bb      	strb	r3, [r7, #26]
 800cfa0:	e001      	b.n	800cfa6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	685b      	ldr	r3, [r3, #4]
 800cfaa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cfae:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800cfb0:	89fa      	ldrh	r2, [r7, #14]
 800cfb2:	8bbb      	ldrh	r3, [r7, #28]
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d216      	bcs.n	800cfe6 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800cfb8:	89fb      	ldrh	r3, [r7, #14]
 800cfba:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800cfbc:	7e3b      	ldrb	r3, [r7, #24]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d00d      	beq.n	800cfde <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800cfc2:	8bbb      	ldrh	r3, [r7, #28]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d10e      	bne.n	800cfe6 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6a1b      	ldr	r3, [r3, #32]
 800cfcc:	699b      	ldr	r3, [r3, #24]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d102      	bne.n	800cfd8 <lwip_netconn_do_writemore+0x134>
 800cfd2:	f06f 0306 	mvn.w	r3, #6
 800cfd6:	e000      	b.n	800cfda <lwip_netconn_do_writemore+0x136>
 800cfd8:	2300      	movs	r3, #0
 800cfda:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800cfdc:	e07d      	b.n	800d0da <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800cfde:	7ebb      	ldrb	r3, [r7, #26]
 800cfe0:	f043 0302 	orr.w	r3, r3, #2
 800cfe4:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6a1b      	ldr	r3, [r3, #32]
 800cfea:	691a      	ldr	r2, [r3, #16]
 800cfec:	8bbb      	ldrh	r3, [r7, #28]
 800cfee:	441a      	add	r2, r3
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6a1b      	ldr	r3, [r3, #32]
 800cff4:	689b      	ldr	r3, [r3, #8]
 800cff6:	685b      	ldr	r3, [r3, #4]
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d906      	bls.n	800d00a <lwip_netconn_do_writemore+0x166>
 800cffc:	4b45      	ldr	r3, [pc, #276]	; (800d114 <lwip_netconn_do_writemore+0x270>)
 800cffe:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800d002:	494c      	ldr	r1, [pc, #304]	; (800d134 <lwip_netconn_do_writemore+0x290>)
 800d004:	4845      	ldr	r0, [pc, #276]	; (800d11c <lwip_netconn_do_writemore+0x278>)
 800d006:	f00c fc5b 	bl	80198c0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800d00a:	8bbb      	ldrh	r3, [r7, #28]
 800d00c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d010:	4293      	cmp	r3, r2
 800d012:	d103      	bne.n	800d01c <lwip_netconn_do_writemore+0x178>
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d01a:	d209      	bcs.n	800d030 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800d020:	8bba      	ldrh	r2, [r7, #28]
 800d022:	429a      	cmp	r2, r3
 800d024:	d10b      	bne.n	800d03e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6a1b      	ldr	r3, [r3, #32]
 800d02a:	899b      	ldrh	r3, [r3, #12]
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d906      	bls.n	800d03e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800d030:	2301      	movs	r3, #1
 800d032:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800d034:	7ebb      	ldrb	r3, [r7, #26]
 800d036:	f043 0302 	orr.w	r3, r3, #2
 800d03a:	76bb      	strb	r3, [r7, #26]
 800d03c:	e001      	b.n	800d042 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800d03e:	2300      	movs	r3, #0
 800d040:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6858      	ldr	r0, [r3, #4]
 800d046:	7ebb      	ldrb	r3, [r7, #26]
 800d048:	8bba      	ldrh	r2, [r7, #28]
 800d04a:	6979      	ldr	r1, [r7, #20]
 800d04c:	f006 fcd0 	bl	80139f0 <tcp_write>
 800d050:	4603      	mov	r3, r0
 800d052:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800d054:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d12c      	bne.n	800d0b6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6a1b      	ldr	r3, [r3, #32]
 800d060:	6999      	ldr	r1, [r3, #24]
 800d062:	8bba      	ldrh	r2, [r7, #28]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6a1b      	ldr	r3, [r3, #32]
 800d068:	440a      	add	r2, r1
 800d06a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6a1b      	ldr	r3, [r3, #32]
 800d070:	6919      	ldr	r1, [r3, #16]
 800d072:	8bba      	ldrh	r2, [r7, #28]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6a1b      	ldr	r3, [r3, #32]
 800d078:	440a      	add	r2, r1
 800d07a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6a1b      	ldr	r3, [r3, #32]
 800d080:	691a      	ldr	r2, [r3, #16]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6a1b      	ldr	r3, [r3, #32]
 800d086:	689b      	ldr	r3, [r3, #8]
 800d088:	685b      	ldr	r3, [r3, #4]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d113      	bne.n	800d0b6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6a1b      	ldr	r3, [r3, #32]
 800d092:	899a      	ldrh	r2, [r3, #12]
 800d094:	3a01      	subs	r2, #1
 800d096:	b292      	uxth	r2, r2
 800d098:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6a1b      	ldr	r3, [r3, #32]
 800d09e:	899b      	ldrh	r3, [r3, #12]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d008      	beq.n	800d0b6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6a1b      	ldr	r3, [r3, #32]
 800d0a8:	689a      	ldr	r2, [r3, #8]
 800d0aa:	3208      	adds	r2, #8
 800d0ac:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6a1b      	ldr	r3, [r3, #32]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800d0b6:	7e7b      	ldrb	r3, [r7, #25]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d004      	beq.n	800d0c6 <lwip_netconn_do_writemore+0x222>
 800d0bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	f43f af50 	beq.w	800cf66 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800d0c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d004      	beq.n	800d0d8 <lwip_netconn_do_writemore+0x234>
 800d0ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0d6:	d146      	bne.n	800d166 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800d0d8:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800d0da:	7e3b      	ldrb	r3, [r7, #24]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d02b      	beq.n	800d138 <lwip_netconn_do_writemore+0x294>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6a1b      	ldr	r3, [r3, #32]
 800d0e4:	699a      	ldr	r2, [r3, #24]
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6a1b      	ldr	r3, [r3, #32]
 800d0ea:	695b      	ldr	r3, [r3, #20]
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d223      	bcs.n	800d138 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d005      	beq.n	800d104 <lwip_netconn_do_writemore+0x260>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	2103      	movs	r1, #3
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	7f1b      	ldrb	r3, [r3, #28]
 800d108:	f043 0310 	orr.w	r3, r3, #16
 800d10c:	b2da      	uxtb	r2, r3
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	771a      	strb	r2, [r3, #28]
 800d112:	e028      	b.n	800d166 <lwip_netconn_do_writemore+0x2c2>
 800d114:	0801d894 	.word	0x0801d894
 800d118:	0801d9ec 	.word	0x0801d9ec
 800d11c:	0801d8d8 	.word	0x0801d8d8
 800d120:	0801dcf4 	.word	0x0801dcf4
 800d124:	0801d9fc 	.word	0x0801d9fc
 800d128:	0801dd14 	.word	0x0801dd14
 800d12c:	0801dd2c 	.word	0x0801dd2c
 800d130:	0801dd6c 	.word	0x0801dd6c
 800d134:	0801dd94 	.word	0x0801dd94
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d140:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d144:	d305      	bcc.n	800d152 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800d14e:	2b04      	cmp	r3, #4
 800d150:	d909      	bls.n	800d166 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d156:	2b00      	cmp	r3, #0
 800d158:	d005      	beq.n	800d166 <lwip_netconn_do_writemore+0x2c2>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d15e:	2200      	movs	r2, #0
 800d160:	2103      	movs	r1, #3
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800d166:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d11d      	bne.n	800d1aa <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6a1b      	ldr	r3, [r3, #32]
 800d172:	699a      	ldr	r2, [r3, #24]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6a1b      	ldr	r3, [r3, #32]
 800d178:	695b      	ldr	r3, [r3, #20]
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d002      	beq.n	800d184 <lwip_netconn_do_writemore+0x2e0>
 800d17e:	7e3b      	ldrb	r3, [r7, #24]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d001      	beq.n	800d188 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800d184:	2301      	movs	r3, #1
 800d186:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	685b      	ldr	r3, [r3, #4]
 800d18c:	4618      	mov	r0, r3
 800d18e:	f007 fa1b 	bl	80145c8 <tcp_output>
 800d192:	4603      	mov	r3, r0
 800d194:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800d196:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800d19a:	f113 0f04 	cmn.w	r3, #4
 800d19e:	d12c      	bne.n	800d1fa <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800d1a0:	7b3b      	ldrb	r3, [r7, #12]
 800d1a2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	76fb      	strb	r3, [r7, #27]
 800d1a8:	e027      	b.n	800d1fa <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800d1aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d1ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1b2:	d120      	bne.n	800d1f6 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f007 fa05 	bl	80145c8 <tcp_output>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800d1c2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800d1c6:	f113 0f04 	cmn.w	r3, #4
 800d1ca:	d104      	bne.n	800d1d6 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800d1cc:	7b7b      	ldrb	r3, [r7, #13]
 800d1ce:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	76fb      	strb	r3, [r7, #27]
 800d1d4:	e011      	b.n	800d1fa <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800d1d6:	7e3b      	ldrb	r3, [r7, #24]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d00e      	beq.n	800d1fa <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6a1b      	ldr	r3, [r3, #32]
 800d1e0:	699b      	ldr	r3, [r3, #24]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d102      	bne.n	800d1ec <lwip_netconn_do_writemore+0x348>
 800d1e6:	f06f 0306 	mvn.w	r3, #6
 800d1ea:	e000      	b.n	800d1ee <lwip_netconn_do_writemore+0x34a>
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	76fb      	strb	r3, [r7, #27]
 800d1f4:	e001      	b.n	800d1fa <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800d1fa:	7efb      	ldrb	r3, [r7, #27]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d015      	beq.n	800d22c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6a1b      	ldr	r3, [r3, #32]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	330c      	adds	r3, #12
 800d208:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6a1b      	ldr	r3, [r3, #32]
 800d20e:	7ffa      	ldrb	r2, [r7, #31]
 800d210:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2200      	movs	r2, #0
 800d216:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2200      	movs	r2, #0
 800d21c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800d21e:	78fb      	ldrb	r3, [r7, #3]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d006      	beq.n	800d232 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800d224:	68b8      	ldr	r0, [r7, #8]
 800d226:	f00b fc01 	bl	8018a2c <sys_sem_signal>
 800d22a:	e002      	b.n	800d232 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800d22c:	f04f 33ff 	mov.w	r3, #4294967295
 800d230:	e000      	b.n	800d234 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800d232:	2300      	movs	r3, #0
}
 800d234:	4618      	mov	r0, r3
 800d236:	3720      	adds	r7, #32
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	785b      	ldrb	r3, [r3, #1]
 800d24e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	685b      	ldr	r3, [r3, #4]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d069      	beq.n	800d32e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800d264:	2b10      	cmp	r3, #16
 800d266:	d162      	bne.n	800d32e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800d26c:	2b03      	cmp	r3, #3
 800d26e:	d002      	beq.n	800d276 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800d270:	7afb      	ldrb	r3, [r7, #11]
 800d272:	2b02      	cmp	r3, #2
 800d274:	d05b      	beq.n	800d32e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800d276:	7afb      	ldrb	r3, [r7, #11]
 800d278:	2b03      	cmp	r3, #3
 800d27a:	d103      	bne.n	800d284 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	22f5      	movs	r2, #245	; 0xf5
 800d280:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800d282:	e059      	b.n	800d338 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800d284:	7afb      	ldrb	r3, [r7, #11]
 800d286:	2b01      	cmp	r3, #1
 800d288:	d103      	bne.n	800d292 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	22fb      	movs	r2, #251	; 0xfb
 800d28e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800d290:	e052      	b.n	800d338 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	7a1b      	ldrb	r3, [r3, #8]
 800d296:	f003 0301 	and.w	r3, r3, #1
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d004      	beq.n	800d2a8 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7ff f964 	bl	800c570 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	6a1b      	ldr	r3, [r3, #32]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d006      	beq.n	800d2c0 <lwip_netconn_do_close+0x84>
 800d2b2:	4b23      	ldr	r3, [pc, #140]	; (800d340 <lwip_netconn_do_close+0x104>)
 800d2b4:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800d2b8:	4922      	ldr	r1, [pc, #136]	; (800d344 <lwip_netconn_do_close+0x108>)
 800d2ba:	4823      	ldr	r0, [pc, #140]	; (800d348 <lwip_netconn_do_close+0x10c>)
 800d2bc:	f00c fb00 	bl	80198c0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	2204      	movs	r2, #4
 800d2c6:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	68fa      	ldr	r2, [r7, #12]
 800d2ce:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	2100      	movs	r1, #0
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f7ff f9c8 	bl	800c66c <lwip_netconn_do_close_internal>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d029      	beq.n	800d336 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	785b      	ldrb	r3, [r3, #1]
 800d2e8:	2b04      	cmp	r3, #4
 800d2ea:	d006      	beq.n	800d2fa <lwip_netconn_do_close+0xbe>
 800d2ec:	4b14      	ldr	r3, [pc, #80]	; (800d340 <lwip_netconn_do_close+0x104>)
 800d2ee:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800d2f2:	4916      	ldr	r1, [pc, #88]	; (800d34c <lwip_netconn_do_close+0x110>)
 800d2f4:	4814      	ldr	r0, [pc, #80]	; (800d348 <lwip_netconn_do_close+0x10c>)
 800d2f6:	f00c fae3 	bl	80198c0 <iprintf>
        UNLOCK_TCPIP_CORE();
 800d2fa:	4815      	ldr	r0, [pc, #84]	; (800d350 <lwip_netconn_do_close+0x114>)
 800d2fc:	f00b fc07 	bl	8018b0e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	330c      	adds	r3, #12
 800d306:	2100      	movs	r1, #0
 800d308:	4618      	mov	r0, r3
 800d30a:	f00b fb5e 	bl	80189ca <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800d30e:	4810      	ldr	r0, [pc, #64]	; (800d350 <lwip_netconn_do_close+0x114>)
 800d310:	f00b fbee 	bl	8018af0 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	785b      	ldrb	r3, [r3, #1]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d00b      	beq.n	800d336 <lwip_netconn_do_close+0xfa>
 800d31e:	4b08      	ldr	r3, [pc, #32]	; (800d340 <lwip_netconn_do_close+0x104>)
 800d320:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800d324:	4909      	ldr	r1, [pc, #36]	; (800d34c <lwip_netconn_do_close+0x110>)
 800d326:	4808      	ldr	r0, [pc, #32]	; (800d348 <lwip_netconn_do_close+0x10c>)
 800d328:	f00c faca 	bl	80198c0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800d32c:	e003      	b.n	800d336 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	22f5      	movs	r2, #245	; 0xf5
 800d332:	711a      	strb	r2, [r3, #4]
 800d334:	e000      	b.n	800d338 <lwip_netconn_do_close+0xfc>
      return;
 800d336:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800d338:	3710      	adds	r7, #16
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	0801d894 	.word	0x0801d894
 800d344:	0801dc38 	.word	0x0801dc38
 800d348:	0801d8d8 	.word	0x0801d8d8
 800d34c:	0801dc54 	.word	0x0801dc54
 800d350:	2000c5dc 	.word	0x2000c5dc

0800d354 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b082      	sub	sp, #8
 800d358:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d35a:	2006      	movs	r0, #6
 800d35c:	f000 ff5c 	bl	800e218 <memp_malloc>
 800d360:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d004      	beq.n	800d372 <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 800d368:	2210      	movs	r2, #16
 800d36a:	2100      	movs	r1, #0
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f00b fc8b 	bl	8018c88 <memset>
  }
  return buf;
 800d372:	687b      	ldr	r3, [r7, #4]
}
 800d374:	4618      	mov	r0, r3
 800d376:	3708      	adds	r7, #8
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}

0800d37c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b082      	sub	sp, #8
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d013      	beq.n	800d3b2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d00b      	beq.n	800d3aa <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	4618      	mov	r0, r3
 800d398:	f001 fdb8 	bl	800ef0c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	605a      	str	r2, [r3, #4]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	685a      	ldr	r2, [r3, #4]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800d3aa:	6879      	ldr	r1, [r7, #4]
 800d3ac:	2006      	movs	r0, #6
 800d3ae:	f000 ff85 	bl	800e2bc <memp_free>
  }
}
 800d3b2:	bf00      	nop
 800d3b4:	3708      	adds	r7, #8
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
	...

0800d3bc <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	60b9      	str	r1, [r7, #8]
 800d3c6:	4613      	mov	r3, r2
 800d3c8:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d108      	bne.n	800d3e2 <netbuf_ref+0x26>
 800d3d0:	4b1c      	ldr	r3, [pc, #112]	; (800d444 <netbuf_ref+0x88>)
 800d3d2:	2299      	movs	r2, #153	; 0x99
 800d3d4:	491c      	ldr	r1, [pc, #112]	; (800d448 <netbuf_ref+0x8c>)
 800d3d6:	481d      	ldr	r0, [pc, #116]	; (800d44c <netbuf_ref+0x90>)
 800d3d8:	f00c fa72 	bl	80198c0 <iprintf>
 800d3dc:	f06f 030f 	mvn.w	r3, #15
 800d3e0:	e02b      	b.n	800d43a <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d004      	beq.n	800d3f4 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f001 fd8c 	bl	800ef0c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800d3f4:	2241      	movs	r2, #65	; 0x41
 800d3f6:	2100      	movs	r1, #0
 800d3f8:	2036      	movs	r0, #54	; 0x36
 800d3fa:	f001 faa7 	bl	800e94c <pbuf_alloc>
 800d3fe:	4602      	mov	r2, r0
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d105      	bne.n	800d418 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	2200      	movs	r2, #0
 800d410:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800d412:	f04f 33ff 	mov.w	r3, #4294967295
 800d416:	e010      	b.n	800d43a <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	68ba      	ldr	r2, [r7, #8]
 800d41e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	88fa      	ldrh	r2, [r7, #6]
 800d426:	811a      	strh	r2, [r3, #8]
 800d428:	68fa      	ldr	r2, [r7, #12]
 800d42a:	6812      	ldr	r2, [r2, #0]
 800d42c:	891b      	ldrh	r3, [r3, #8]
 800d42e:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681a      	ldr	r2, [r3, #0]
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800d438:	2300      	movs	r3, #0
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3710      	adds	r7, #16
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	0801ddec 	.word	0x0801ddec
 800d448:	0801dea4 	.word	0x0801dea4
 800d44c:	0801de3c 	.word	0x0801de3c

0800d450 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b084      	sub	sp, #16
 800d454:	af00      	add	r7, sp, #0
 800d456:	60f8      	str	r0, [r7, #12]
 800d458:	60b9      	str	r1, [r7, #8]
 800d45a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d108      	bne.n	800d474 <netbuf_data+0x24>
 800d462:	4b1b      	ldr	r3, [pc, #108]	; (800d4d0 <netbuf_data+0x80>)
 800d464:	22c6      	movs	r2, #198	; 0xc6
 800d466:	491b      	ldr	r1, [pc, #108]	; (800d4d4 <netbuf_data+0x84>)
 800d468:	481b      	ldr	r0, [pc, #108]	; (800d4d8 <netbuf_data+0x88>)
 800d46a:	f00c fa29 	bl	80198c0 <iprintf>
 800d46e:	f06f 030f 	mvn.w	r3, #15
 800d472:	e029      	b.n	800d4c8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d108      	bne.n	800d48c <netbuf_data+0x3c>
 800d47a:	4b15      	ldr	r3, [pc, #84]	; (800d4d0 <netbuf_data+0x80>)
 800d47c:	22c7      	movs	r2, #199	; 0xc7
 800d47e:	4917      	ldr	r1, [pc, #92]	; (800d4dc <netbuf_data+0x8c>)
 800d480:	4815      	ldr	r0, [pc, #84]	; (800d4d8 <netbuf_data+0x88>)
 800d482:	f00c fa1d 	bl	80198c0 <iprintf>
 800d486:	f06f 030f 	mvn.w	r3, #15
 800d48a:	e01d      	b.n	800d4c8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d108      	bne.n	800d4a4 <netbuf_data+0x54>
 800d492:	4b0f      	ldr	r3, [pc, #60]	; (800d4d0 <netbuf_data+0x80>)
 800d494:	22c8      	movs	r2, #200	; 0xc8
 800d496:	4912      	ldr	r1, [pc, #72]	; (800d4e0 <netbuf_data+0x90>)
 800d498:	480f      	ldr	r0, [pc, #60]	; (800d4d8 <netbuf_data+0x88>)
 800d49a:	f00c fa11 	bl	80198c0 <iprintf>
 800d49e:	f06f 030f 	mvn.w	r3, #15
 800d4a2:	e011      	b.n	800d4c8 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d102      	bne.n	800d4b2 <netbuf_data+0x62>
    return ERR_BUF;
 800d4ac:	f06f 0301 	mvn.w	r3, #1
 800d4b0:	e00a      	b.n	800d4c8 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	685a      	ldr	r2, [r3, #4]
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	895a      	ldrh	r2, [r3, #10]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800d4c6:	2300      	movs	r3, #0
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3710      	adds	r7, #16
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	0801ddec 	.word	0x0801ddec
 800d4d4:	0801def4 	.word	0x0801def4
 800d4d8:	0801de3c 	.word	0x0801de3c
 800d4dc:	0801df10 	.word	0x0801df10
 800d4e0:	0801df30 	.word	0x0801df30

0800d4e4 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b082      	sub	sp, #8
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d108      	bne.n	800d504 <netbuf_next+0x20>
 800d4f2:	4b11      	ldr	r3, [pc, #68]	; (800d538 <netbuf_next+0x54>)
 800d4f4:	22e0      	movs	r2, #224	; 0xe0
 800d4f6:	4911      	ldr	r1, [pc, #68]	; (800d53c <netbuf_next+0x58>)
 800d4f8:	4811      	ldr	r0, [pc, #68]	; (800d540 <netbuf_next+0x5c>)
 800d4fa:	f00c f9e1 	bl	80198c0 <iprintf>
 800d4fe:	f04f 33ff 	mov.w	r3, #4294967295
 800d502:	e014      	b.n	800d52e <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	685b      	ldr	r3, [r3, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d102      	bne.n	800d514 <netbuf_next+0x30>
    return -1;
 800d50e:	f04f 33ff 	mov.w	r3, #4294967295
 800d512:	e00c      	b.n	800d52e <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d101      	bne.n	800d52c <netbuf_next+0x48>
    return 1;
 800d528:	2301      	movs	r3, #1
 800d52a:	e000      	b.n	800d52e <netbuf_next+0x4a>
  }
  return 0;
 800d52c:	2300      	movs	r3, #0
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3708      	adds	r7, #8
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	0801ddec 	.word	0x0801ddec
 800d53c:	0801df4c 	.word	0x0801df4c
 800d540:	0801de3c 	.word	0x0801de3c

0800d544 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b084      	sub	sp, #16
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800d54e:	f008 f903 	bl	8015758 <sys_timeouts_sleeptime>
 800d552:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d55a:	d10b      	bne.n	800d574 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800d55c:	4813      	ldr	r0, [pc, #76]	; (800d5ac <tcpip_timeouts_mbox_fetch+0x68>)
 800d55e:	f00b fad6 	bl	8018b0e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d562:	2200      	movs	r2, #0
 800d564:	6839      	ldr	r1, [r7, #0]
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f00b f98e 	bl	8018888 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800d56c:	480f      	ldr	r0, [pc, #60]	; (800d5ac <tcpip_timeouts_mbox_fetch+0x68>)
 800d56e:	f00b fabf 	bl	8018af0 <sys_mutex_lock>
    return;
 800d572:	e018      	b.n	800d5a6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d102      	bne.n	800d580 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800d57a:	f008 f8b3 	bl	80156e4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d57e:	e7e6      	b.n	800d54e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800d580:	480a      	ldr	r0, [pc, #40]	; (800d5ac <tcpip_timeouts_mbox_fetch+0x68>)
 800d582:	f00b fac4 	bl	8018b0e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800d586:	68fa      	ldr	r2, [r7, #12]
 800d588:	6839      	ldr	r1, [r7, #0]
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f00b f97c 	bl	8018888 <sys_arch_mbox_fetch>
 800d590:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800d592:	4806      	ldr	r0, [pc, #24]	; (800d5ac <tcpip_timeouts_mbox_fetch+0x68>)
 800d594:	f00b faac 	bl	8018af0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d59e:	d102      	bne.n	800d5a6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800d5a0:	f008 f8a0 	bl	80156e4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d5a4:	e7d3      	b.n	800d54e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800d5a6:	3710      	adds	r7, #16
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}
 800d5ac:	2000c5dc 	.word	0x2000c5dc

0800d5b0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800d5b8:	4810      	ldr	r0, [pc, #64]	; (800d5fc <tcpip_thread+0x4c>)
 800d5ba:	f00b fa99 	bl	8018af0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800d5be:	4b10      	ldr	r3, [pc, #64]	; (800d600 <tcpip_thread+0x50>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d005      	beq.n	800d5d2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800d5c6:	4b0e      	ldr	r3, [pc, #56]	; (800d600 <tcpip_thread+0x50>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	4a0e      	ldr	r2, [pc, #56]	; (800d604 <tcpip_thread+0x54>)
 800d5cc:	6812      	ldr	r2, [r2, #0]
 800d5ce:	4610      	mov	r0, r2
 800d5d0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d5d2:	f107 030c 	add.w	r3, r7, #12
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	480b      	ldr	r0, [pc, #44]	; (800d608 <tcpip_thread+0x58>)
 800d5da:	f7ff ffb3 	bl	800d544 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d106      	bne.n	800d5f2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d5e4:	4b09      	ldr	r3, [pc, #36]	; (800d60c <tcpip_thread+0x5c>)
 800d5e6:	2291      	movs	r2, #145	; 0x91
 800d5e8:	4909      	ldr	r1, [pc, #36]	; (800d610 <tcpip_thread+0x60>)
 800d5ea:	480a      	ldr	r0, [pc, #40]	; (800d614 <tcpip_thread+0x64>)
 800d5ec:	f00c f968 	bl	80198c0 <iprintf>
      continue;
 800d5f0:	e003      	b.n	800d5fa <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f000 f80f 	bl	800d618 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d5fa:	e7ea      	b.n	800d5d2 <tcpip_thread+0x22>
 800d5fc:	2000c5dc 	.word	0x2000c5dc
 800d600:	200087b0 	.word	0x200087b0
 800d604:	200087b4 	.word	0x200087b4
 800d608:	200087b8 	.word	0x200087b8
 800d60c:	0801df84 	.word	0x0801df84
 800d610:	0801dfb4 	.word	0x0801dfb4
 800d614:	0801dfd4 	.word	0x0801dfd4

0800d618 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	2b01      	cmp	r3, #1
 800d626:	d018      	beq.n	800d65a <tcpip_thread_handle_msg+0x42>
 800d628:	2b02      	cmp	r3, #2
 800d62a:	d021      	beq.n	800d670 <tcpip_thread_handle_msg+0x58>
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d126      	bne.n	800d67e <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	6850      	ldr	r0, [r2, #4]
 800d638:	687a      	ldr	r2, [r7, #4]
 800d63a:	6892      	ldr	r2, [r2, #8]
 800d63c:	4611      	mov	r1, r2
 800d63e:	4798      	blx	r3
 800d640:	4603      	mov	r3, r0
 800d642:	2b00      	cmp	r3, #0
 800d644:	d004      	beq.n	800d650 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	4618      	mov	r0, r3
 800d64c:	f001 fc5e 	bl	800ef0c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d650:	6879      	ldr	r1, [r7, #4]
 800d652:	2009      	movs	r0, #9
 800d654:	f000 fe32 	bl	800e2bc <memp_free>
      break;
 800d658:	e018      	b.n	800d68c <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	685b      	ldr	r3, [r3, #4]
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	6892      	ldr	r2, [r2, #8]
 800d662:	4610      	mov	r0, r2
 800d664:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d666:	6879      	ldr	r1, [r7, #4]
 800d668:	2008      	movs	r0, #8
 800d66a:	f000 fe27 	bl	800e2bc <memp_free>
      break;
 800d66e:	e00d      	b.n	800d68c <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	687a      	ldr	r2, [r7, #4]
 800d676:	6892      	ldr	r2, [r2, #8]
 800d678:	4610      	mov	r0, r2
 800d67a:	4798      	blx	r3
      break;
 800d67c:	e006      	b.n	800d68c <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d67e:	4b05      	ldr	r3, [pc, #20]	; (800d694 <tcpip_thread_handle_msg+0x7c>)
 800d680:	22cf      	movs	r2, #207	; 0xcf
 800d682:	4905      	ldr	r1, [pc, #20]	; (800d698 <tcpip_thread_handle_msg+0x80>)
 800d684:	4805      	ldr	r0, [pc, #20]	; (800d69c <tcpip_thread_handle_msg+0x84>)
 800d686:	f00c f91b 	bl	80198c0 <iprintf>
      break;
 800d68a:	bf00      	nop
  }
}
 800d68c:	bf00      	nop
 800d68e:	3708      	adds	r7, #8
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	0801df84 	.word	0x0801df84
 800d698:	0801dfb4 	.word	0x0801dfb4
 800d69c:	0801dfd4 	.word	0x0801dfd4

0800d6a0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b086      	sub	sp, #24
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	60f8      	str	r0, [r7, #12]
 800d6a8:	60b9      	str	r1, [r7, #8]
 800d6aa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d6ac:	481a      	ldr	r0, [pc, #104]	; (800d718 <tcpip_inpkt+0x78>)
 800d6ae:	f00b f946 	bl	801893e <sys_mbox_valid>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d105      	bne.n	800d6c4 <tcpip_inpkt+0x24>
 800d6b8:	4b18      	ldr	r3, [pc, #96]	; (800d71c <tcpip_inpkt+0x7c>)
 800d6ba:	22fc      	movs	r2, #252	; 0xfc
 800d6bc:	4918      	ldr	r1, [pc, #96]	; (800d720 <tcpip_inpkt+0x80>)
 800d6be:	4819      	ldr	r0, [pc, #100]	; (800d724 <tcpip_inpkt+0x84>)
 800d6c0:	f00c f8fe 	bl	80198c0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d6c4:	2009      	movs	r0, #9
 800d6c6:	f000 fda7 	bl	800e218 <memp_malloc>
 800d6ca:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d102      	bne.n	800d6d8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d6d2:	f04f 33ff 	mov.w	r3, #4294967295
 800d6d6:	e01a      	b.n	800d70e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	68fa      	ldr	r2, [r7, #12]
 800d6e2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	68ba      	ldr	r2, [r7, #8]
 800d6e8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	687a      	ldr	r2, [r7, #4]
 800d6ee:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d6f0:	6979      	ldr	r1, [r7, #20]
 800d6f2:	4809      	ldr	r0, [pc, #36]	; (800d718 <tcpip_inpkt+0x78>)
 800d6f4:	f00b f8ae 	bl	8018854 <sys_mbox_trypost>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d006      	beq.n	800d70c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d6fe:	6979      	ldr	r1, [r7, #20]
 800d700:	2009      	movs	r0, #9
 800d702:	f000 fddb 	bl	800e2bc <memp_free>
    return ERR_MEM;
 800d706:	f04f 33ff 	mov.w	r3, #4294967295
 800d70a:	e000      	b.n	800d70e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d70c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3718      	adds	r7, #24
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	200087b8 	.word	0x200087b8
 800d71c:	0801df84 	.word	0x0801df84
 800d720:	0801dffc 	.word	0x0801dffc
 800d724:	0801dfd4 	.word	0x0801dfd4

0800d728 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d738:	f003 0318 	and.w	r3, r3, #24
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d006      	beq.n	800d74e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d740:	4a08      	ldr	r2, [pc, #32]	; (800d764 <tcpip_input+0x3c>)
 800d742:	6839      	ldr	r1, [r7, #0]
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f7ff ffab 	bl	800d6a0 <tcpip_inpkt>
 800d74a:	4603      	mov	r3, r0
 800d74c:	e005      	b.n	800d75a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d74e:	4a06      	ldr	r2, [pc, #24]	; (800d768 <tcpip_input+0x40>)
 800d750:	6839      	ldr	r1, [r7, #0]
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f7ff ffa4 	bl	800d6a0 <tcpip_inpkt>
 800d758:	4603      	mov	r3, r0
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3708      	adds	r7, #8
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	08018641 	.word	0x08018641
 800d768:	08017561 	.word	0x08017561

0800d76c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b084      	sub	sp, #16
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d776:	4819      	ldr	r0, [pc, #100]	; (800d7dc <tcpip_try_callback+0x70>)
 800d778:	f00b f8e1 	bl	801893e <sys_mbox_valid>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d106      	bne.n	800d790 <tcpip_try_callback+0x24>
 800d782:	4b17      	ldr	r3, [pc, #92]	; (800d7e0 <tcpip_try_callback+0x74>)
 800d784:	f240 125d 	movw	r2, #349	; 0x15d
 800d788:	4916      	ldr	r1, [pc, #88]	; (800d7e4 <tcpip_try_callback+0x78>)
 800d78a:	4817      	ldr	r0, [pc, #92]	; (800d7e8 <tcpip_try_callback+0x7c>)
 800d78c:	f00c f898 	bl	80198c0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d790:	2008      	movs	r0, #8
 800d792:	f000 fd41 	bl	800e218 <memp_malloc>
 800d796:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d102      	bne.n	800d7a4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d79e:	f04f 33ff 	mov.w	r3, #4294967295
 800d7a2:	e017      	b.n	800d7d4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	687a      	ldr	r2, [r7, #4]
 800d7ae:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	683a      	ldr	r2, [r7, #0]
 800d7b4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d7b6:	68f9      	ldr	r1, [r7, #12]
 800d7b8:	4808      	ldr	r0, [pc, #32]	; (800d7dc <tcpip_try_callback+0x70>)
 800d7ba:	f00b f84b 	bl	8018854 <sys_mbox_trypost>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d006      	beq.n	800d7d2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d7c4:	68f9      	ldr	r1, [r7, #12]
 800d7c6:	2008      	movs	r0, #8
 800d7c8:	f000 fd78 	bl	800e2bc <memp_free>
    return ERR_MEM;
 800d7cc:	f04f 33ff 	mov.w	r3, #4294967295
 800d7d0:	e000      	b.n	800d7d4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d7d2:	2300      	movs	r3, #0
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3710      	adds	r7, #16
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	200087b8 	.word	0x200087b8
 800d7e0:	0801df84 	.word	0x0801df84
 800d7e4:	0801dffc 	.word	0x0801dffc
 800d7e8:	0801dfd4 	.word	0x0801dfd4

0800d7ec <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	60b9      	str	r1, [r7, #8]
 800d7f6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800d7f8:	4806      	ldr	r0, [pc, #24]	; (800d814 <tcpip_send_msg_wait_sem+0x28>)
 800d7fa:	f00b f979 	bl	8018af0 <sys_mutex_lock>
  fn(apimsg);
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	68b8      	ldr	r0, [r7, #8]
 800d802:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800d804:	4803      	ldr	r0, [pc, #12]	; (800d814 <tcpip_send_msg_wait_sem+0x28>)
 800d806:	f00b f982 	bl	8018b0e <sys_mutex_unlock>
  return ERR_OK;
 800d80a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3710      	adds	r7, #16
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}
 800d814:	2000c5dc 	.word	0x2000c5dc

0800d818 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af02      	add	r7, sp, #8
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d822:	f000 f871 	bl	800d908 <lwip_init>

  tcpip_init_done = initfunc;
 800d826:	4a17      	ldr	r2, [pc, #92]	; (800d884 <tcpip_init+0x6c>)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d82c:	4a16      	ldr	r2, [pc, #88]	; (800d888 <tcpip_init+0x70>)
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d832:	2106      	movs	r1, #6
 800d834:	4815      	ldr	r0, [pc, #84]	; (800d88c <tcpip_init+0x74>)
 800d836:	f00a ffd9 	bl	80187ec <sys_mbox_new>
 800d83a:	4603      	mov	r3, r0
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d006      	beq.n	800d84e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d840:	4b13      	ldr	r3, [pc, #76]	; (800d890 <tcpip_init+0x78>)
 800d842:	f240 2261 	movw	r2, #609	; 0x261
 800d846:	4913      	ldr	r1, [pc, #76]	; (800d894 <tcpip_init+0x7c>)
 800d848:	4813      	ldr	r0, [pc, #76]	; (800d898 <tcpip_init+0x80>)
 800d84a:	f00c f839 	bl	80198c0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d84e:	4813      	ldr	r0, [pc, #76]	; (800d89c <tcpip_init+0x84>)
 800d850:	f00b f932 	bl	8018ab8 <sys_mutex_new>
 800d854:	4603      	mov	r3, r0
 800d856:	2b00      	cmp	r3, #0
 800d858:	d006      	beq.n	800d868 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d85a:	4b0d      	ldr	r3, [pc, #52]	; (800d890 <tcpip_init+0x78>)
 800d85c:	f240 2265 	movw	r2, #613	; 0x265
 800d860:	490f      	ldr	r1, [pc, #60]	; (800d8a0 <tcpip_init+0x88>)
 800d862:	480d      	ldr	r0, [pc, #52]	; (800d898 <tcpip_init+0x80>)
 800d864:	f00c f82c 	bl	80198c0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d868:	2300      	movs	r3, #0
 800d86a:	9300      	str	r3, [sp, #0]
 800d86c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d870:	2200      	movs	r2, #0
 800d872:	490c      	ldr	r1, [pc, #48]	; (800d8a4 <tcpip_init+0x8c>)
 800d874:	480c      	ldr	r0, [pc, #48]	; (800d8a8 <tcpip_init+0x90>)
 800d876:	f00b f957 	bl	8018b28 <sys_thread_new>
}
 800d87a:	bf00      	nop
 800d87c:	3708      	adds	r7, #8
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	200087b0 	.word	0x200087b0
 800d888:	200087b4 	.word	0x200087b4
 800d88c:	200087b8 	.word	0x200087b8
 800d890:	0801df84 	.word	0x0801df84
 800d894:	0801e00c 	.word	0x0801e00c
 800d898:	0801dfd4 	.word	0x0801dfd4
 800d89c:	2000c5dc 	.word	0x2000c5dc
 800d8a0:	0801e030 	.word	0x0801e030
 800d8a4:	0800d5b1 	.word	0x0800d5b1
 800d8a8:	0801e054 	.word	0x0801e054

0800d8ac <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b083      	sub	sp, #12
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d8b6:	88fb      	ldrh	r3, [r7, #6]
 800d8b8:	021b      	lsls	r3, r3, #8
 800d8ba:	b21a      	sxth	r2, r3
 800d8bc:	88fb      	ldrh	r3, [r7, #6]
 800d8be:	0a1b      	lsrs	r3, r3, #8
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	b21b      	sxth	r3, r3
 800d8c4:	4313      	orrs	r3, r2
 800d8c6:	b21b      	sxth	r3, r3
 800d8c8:	b29b      	uxth	r3, r3
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	370c      	adds	r7, #12
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr

0800d8d6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d8d6:	b480      	push	{r7}
 800d8d8:	b083      	sub	sp, #12
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	061a      	lsls	r2, r3, #24
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	021b      	lsls	r3, r3, #8
 800d8e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d8ea:	431a      	orrs	r2, r3
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	0a1b      	lsrs	r3, r3, #8
 800d8f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d8f4:	431a      	orrs	r2, r3
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	0e1b      	lsrs	r3, r3, #24
 800d8fa:	4313      	orrs	r3, r2
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	370c      	adds	r7, #12
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr

0800d908 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d90e:	2300      	movs	r3, #0
 800d910:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d912:	f00b f8c3 	bl	8018a9c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d916:	f000 f8d5 	bl	800dac4 <mem_init>
  memp_init();
 800d91a:	f000 fc31 	bl	800e180 <memp_init>
  pbuf_init();
  netif_init();
 800d91e:	f000 fcf7 	bl	800e310 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d922:	f007 ff51 	bl	80157c8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d926:	f001 fd9b 	bl	800f460 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d92a:	f007 fe95 	bl	8015658 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d92e:	bf00      	nop
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
	...

0800d938 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d938:	b480      	push	{r7}
 800d93a:	b083      	sub	sp, #12
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	4603      	mov	r3, r0
 800d940:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d942:	4b05      	ldr	r3, [pc, #20]	; (800d958 <ptr_to_mem+0x20>)
 800d944:	681a      	ldr	r2, [r3, #0]
 800d946:	88fb      	ldrh	r3, [r7, #6]
 800d948:	4413      	add	r3, r2
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	370c      	adds	r7, #12
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr
 800d956:	bf00      	nop
 800d958:	200087bc 	.word	0x200087bc

0800d95c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b083      	sub	sp, #12
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	4a05      	ldr	r2, [pc, #20]	; (800d97c <mem_to_ptr+0x20>)
 800d968:	6812      	ldr	r2, [r2, #0]
 800d96a:	1a9b      	subs	r3, r3, r2
 800d96c:	b29b      	uxth	r3, r3
}
 800d96e:	4618      	mov	r0, r3
 800d970:	370c      	adds	r7, #12
 800d972:	46bd      	mov	sp, r7
 800d974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d978:	4770      	bx	lr
 800d97a:	bf00      	nop
 800d97c:	200087bc 	.word	0x200087bc

0800d980 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d980:	b590      	push	{r4, r7, lr}
 800d982:	b085      	sub	sp, #20
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d988:	4b45      	ldr	r3, [pc, #276]	; (800daa0 <plug_holes+0x120>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	687a      	ldr	r2, [r7, #4]
 800d98e:	429a      	cmp	r2, r3
 800d990:	d206      	bcs.n	800d9a0 <plug_holes+0x20>
 800d992:	4b44      	ldr	r3, [pc, #272]	; (800daa4 <plug_holes+0x124>)
 800d994:	f240 12df 	movw	r2, #479	; 0x1df
 800d998:	4943      	ldr	r1, [pc, #268]	; (800daa8 <plug_holes+0x128>)
 800d99a:	4844      	ldr	r0, [pc, #272]	; (800daac <plug_holes+0x12c>)
 800d99c:	f00b ff90 	bl	80198c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d9a0:	4b43      	ldr	r3, [pc, #268]	; (800dab0 <plug_holes+0x130>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	687a      	ldr	r2, [r7, #4]
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d306      	bcc.n	800d9b8 <plug_holes+0x38>
 800d9aa:	4b3e      	ldr	r3, [pc, #248]	; (800daa4 <plug_holes+0x124>)
 800d9ac:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d9b0:	4940      	ldr	r1, [pc, #256]	; (800dab4 <plug_holes+0x134>)
 800d9b2:	483e      	ldr	r0, [pc, #248]	; (800daac <plug_holes+0x12c>)
 800d9b4:	f00b ff84 	bl	80198c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	791b      	ldrb	r3, [r3, #4]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d006      	beq.n	800d9ce <plug_holes+0x4e>
 800d9c0:	4b38      	ldr	r3, [pc, #224]	; (800daa4 <plug_holes+0x124>)
 800d9c2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d9c6:	493c      	ldr	r1, [pc, #240]	; (800dab8 <plug_holes+0x138>)
 800d9c8:	4838      	ldr	r0, [pc, #224]	; (800daac <plug_holes+0x12c>)
 800d9ca:	f00b ff79 	bl	80198c0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	881b      	ldrh	r3, [r3, #0]
 800d9d2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d9d6:	d906      	bls.n	800d9e6 <plug_holes+0x66>
 800d9d8:	4b32      	ldr	r3, [pc, #200]	; (800daa4 <plug_holes+0x124>)
 800d9da:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d9de:	4937      	ldr	r1, [pc, #220]	; (800dabc <plug_holes+0x13c>)
 800d9e0:	4832      	ldr	r0, [pc, #200]	; (800daac <plug_holes+0x12c>)
 800d9e2:	f00b ff6d 	bl	80198c0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	881b      	ldrh	r3, [r3, #0]
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7ff ffa4 	bl	800d938 <ptr_to_mem>
 800d9f0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d024      	beq.n	800da44 <plug_holes+0xc4>
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	791b      	ldrb	r3, [r3, #4]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d120      	bne.n	800da44 <plug_holes+0xc4>
 800da02:	4b2b      	ldr	r3, [pc, #172]	; (800dab0 <plug_holes+0x130>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	68fa      	ldr	r2, [r7, #12]
 800da08:	429a      	cmp	r2, r3
 800da0a:	d01b      	beq.n	800da44 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800da0c:	4b2c      	ldr	r3, [pc, #176]	; (800dac0 <plug_holes+0x140>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	68fa      	ldr	r2, [r7, #12]
 800da12:	429a      	cmp	r2, r3
 800da14:	d102      	bne.n	800da1c <plug_holes+0x9c>
      lfree = mem;
 800da16:	4a2a      	ldr	r2, [pc, #168]	; (800dac0 <plug_holes+0x140>)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	881a      	ldrh	r2, [r3, #0]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	881b      	ldrh	r3, [r3, #0]
 800da28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800da2c:	d00a      	beq.n	800da44 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	881b      	ldrh	r3, [r3, #0]
 800da32:	4618      	mov	r0, r3
 800da34:	f7ff ff80 	bl	800d938 <ptr_to_mem>
 800da38:	4604      	mov	r4, r0
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f7ff ff8e 	bl	800d95c <mem_to_ptr>
 800da40:	4603      	mov	r3, r0
 800da42:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	885b      	ldrh	r3, [r3, #2]
 800da48:	4618      	mov	r0, r3
 800da4a:	f7ff ff75 	bl	800d938 <ptr_to_mem>
 800da4e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800da50:	68ba      	ldr	r2, [r7, #8]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	429a      	cmp	r2, r3
 800da56:	d01f      	beq.n	800da98 <plug_holes+0x118>
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	791b      	ldrb	r3, [r3, #4]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d11b      	bne.n	800da98 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800da60:	4b17      	ldr	r3, [pc, #92]	; (800dac0 <plug_holes+0x140>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	429a      	cmp	r2, r3
 800da68:	d102      	bne.n	800da70 <plug_holes+0xf0>
      lfree = pmem;
 800da6a:	4a15      	ldr	r2, [pc, #84]	; (800dac0 <plug_holes+0x140>)
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	881a      	ldrh	r2, [r3, #0]
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	881b      	ldrh	r3, [r3, #0]
 800da7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800da80:	d00a      	beq.n	800da98 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	881b      	ldrh	r3, [r3, #0]
 800da86:	4618      	mov	r0, r3
 800da88:	f7ff ff56 	bl	800d938 <ptr_to_mem>
 800da8c:	4604      	mov	r4, r0
 800da8e:	68b8      	ldr	r0, [r7, #8]
 800da90:	f7ff ff64 	bl	800d95c <mem_to_ptr>
 800da94:	4603      	mov	r3, r0
 800da96:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800da98:	bf00      	nop
 800da9a:	3714      	adds	r7, #20
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd90      	pop	{r4, r7, pc}
 800daa0:	200087bc 	.word	0x200087bc
 800daa4:	0801e064 	.word	0x0801e064
 800daa8:	0801e094 	.word	0x0801e094
 800daac:	0801e0ac 	.word	0x0801e0ac
 800dab0:	200087c0 	.word	0x200087c0
 800dab4:	0801e0d4 	.word	0x0801e0d4
 800dab8:	0801e0f0 	.word	0x0801e0f0
 800dabc:	0801e10c 	.word	0x0801e10c
 800dac0:	200087c8 	.word	0x200087c8

0800dac4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b082      	sub	sp, #8
 800dac8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800daca:	4b1f      	ldr	r3, [pc, #124]	; (800db48 <mem_init+0x84>)
 800dacc:	3303      	adds	r3, #3
 800dace:	f023 0303 	bic.w	r3, r3, #3
 800dad2:	461a      	mov	r2, r3
 800dad4:	4b1d      	ldr	r3, [pc, #116]	; (800db4c <mem_init+0x88>)
 800dad6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800dad8:	4b1c      	ldr	r3, [pc, #112]	; (800db4c <mem_init+0x88>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800dae4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2200      	movs	r2, #0
 800daea:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2200      	movs	r2, #0
 800daf0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800daf2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800daf6:	f7ff ff1f 	bl	800d938 <ptr_to_mem>
 800dafa:	4602      	mov	r2, r0
 800dafc:	4b14      	ldr	r3, [pc, #80]	; (800db50 <mem_init+0x8c>)
 800dafe:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800db00:	4b13      	ldr	r3, [pc, #76]	; (800db50 <mem_init+0x8c>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	2201      	movs	r2, #1
 800db06:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800db08:	4b11      	ldr	r3, [pc, #68]	; (800db50 <mem_init+0x8c>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800db10:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800db12:	4b0f      	ldr	r3, [pc, #60]	; (800db50 <mem_init+0x8c>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800db1a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800db1c:	4b0b      	ldr	r3, [pc, #44]	; (800db4c <mem_init+0x88>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a0c      	ldr	r2, [pc, #48]	; (800db54 <mem_init+0x90>)
 800db22:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800db24:	480c      	ldr	r0, [pc, #48]	; (800db58 <mem_init+0x94>)
 800db26:	f00a ffc7 	bl	8018ab8 <sys_mutex_new>
 800db2a:	4603      	mov	r3, r0
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d006      	beq.n	800db3e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800db30:	4b0a      	ldr	r3, [pc, #40]	; (800db5c <mem_init+0x98>)
 800db32:	f240 221f 	movw	r2, #543	; 0x21f
 800db36:	490a      	ldr	r1, [pc, #40]	; (800db60 <mem_init+0x9c>)
 800db38:	480a      	ldr	r0, [pc, #40]	; (800db64 <mem_init+0xa0>)
 800db3a:	f00b fec1 	bl	80198c0 <iprintf>
  }
}
 800db3e:	bf00      	nop
 800db40:	3708      	adds	r7, #8
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}
 800db46:	bf00      	nop
 800db48:	2000c5f8 	.word	0x2000c5f8
 800db4c:	200087bc 	.word	0x200087bc
 800db50:	200087c0 	.word	0x200087c0
 800db54:	200087c8 	.word	0x200087c8
 800db58:	200087c4 	.word	0x200087c4
 800db5c:	0801e064 	.word	0x0801e064
 800db60:	0801e138 	.word	0x0801e138
 800db64:	0801e0ac 	.word	0x0801e0ac

0800db68 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b086      	sub	sp, #24
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f7ff fef3 	bl	800d95c <mem_to_ptr>
 800db76:	4603      	mov	r3, r0
 800db78:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	881b      	ldrh	r3, [r3, #0]
 800db7e:	4618      	mov	r0, r3
 800db80:	f7ff feda 	bl	800d938 <ptr_to_mem>
 800db84:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	885b      	ldrh	r3, [r3, #2]
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7ff fed4 	bl	800d938 <ptr_to_mem>
 800db90:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	881b      	ldrh	r3, [r3, #0]
 800db96:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800db9a:	d818      	bhi.n	800dbce <mem_link_valid+0x66>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	885b      	ldrh	r3, [r3, #2]
 800dba0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dba4:	d813      	bhi.n	800dbce <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800dbaa:	8afa      	ldrh	r2, [r7, #22]
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d004      	beq.n	800dbba <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	881b      	ldrh	r3, [r3, #0]
 800dbb4:	8afa      	ldrh	r2, [r7, #22]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d109      	bne.n	800dbce <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800dbba:	4b08      	ldr	r3, [pc, #32]	; (800dbdc <mem_link_valid+0x74>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dbbe:	693a      	ldr	r2, [r7, #16]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d006      	beq.n	800dbd2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	885b      	ldrh	r3, [r3, #2]
 800dbc8:	8afa      	ldrh	r2, [r7, #22]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d001      	beq.n	800dbd2 <mem_link_valid+0x6a>
    return 0;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	e000      	b.n	800dbd4 <mem_link_valid+0x6c>
  }
  return 1;
 800dbd2:	2301      	movs	r3, #1
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3718      	adds	r7, #24
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}
 800dbdc:	200087c0 	.word	0x200087c0

0800dbe0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b088      	sub	sp, #32
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d070      	beq.n	800dcd0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f003 0303 	and.w	r3, r3, #3
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d00d      	beq.n	800dc14 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800dbf8:	4b37      	ldr	r3, [pc, #220]	; (800dcd8 <mem_free+0xf8>)
 800dbfa:	f240 2273 	movw	r2, #627	; 0x273
 800dbfe:	4937      	ldr	r1, [pc, #220]	; (800dcdc <mem_free+0xfc>)
 800dc00:	4837      	ldr	r0, [pc, #220]	; (800dce0 <mem_free+0x100>)
 800dc02:	f00b fe5d 	bl	80198c0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dc06:	f00a ffb5 	bl	8018b74 <sys_arch_protect>
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	68f8      	ldr	r0, [r7, #12]
 800dc0e:	f00a ffbf 	bl	8018b90 <sys_arch_unprotect>
    return;
 800dc12:	e05e      	b.n	800dcd2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	3b08      	subs	r3, #8
 800dc18:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800dc1a:	4b32      	ldr	r3, [pc, #200]	; (800dce4 <mem_free+0x104>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	69fa      	ldr	r2, [r7, #28]
 800dc20:	429a      	cmp	r2, r3
 800dc22:	d306      	bcc.n	800dc32 <mem_free+0x52>
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f103 020c 	add.w	r2, r3, #12
 800dc2a:	4b2f      	ldr	r3, [pc, #188]	; (800dce8 <mem_free+0x108>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d90d      	bls.n	800dc4e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800dc32:	4b29      	ldr	r3, [pc, #164]	; (800dcd8 <mem_free+0xf8>)
 800dc34:	f240 227f 	movw	r2, #639	; 0x27f
 800dc38:	492c      	ldr	r1, [pc, #176]	; (800dcec <mem_free+0x10c>)
 800dc3a:	4829      	ldr	r0, [pc, #164]	; (800dce0 <mem_free+0x100>)
 800dc3c:	f00b fe40 	bl	80198c0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dc40:	f00a ff98 	bl	8018b74 <sys_arch_protect>
 800dc44:	6138      	str	r0, [r7, #16]
 800dc46:	6938      	ldr	r0, [r7, #16]
 800dc48:	f00a ffa2 	bl	8018b90 <sys_arch_unprotect>
    return;
 800dc4c:	e041      	b.n	800dcd2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800dc4e:	4828      	ldr	r0, [pc, #160]	; (800dcf0 <mem_free+0x110>)
 800dc50:	f00a ff4e 	bl	8018af0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800dc54:	69fb      	ldr	r3, [r7, #28]
 800dc56:	791b      	ldrb	r3, [r3, #4]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d110      	bne.n	800dc7e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800dc5c:	4b1e      	ldr	r3, [pc, #120]	; (800dcd8 <mem_free+0xf8>)
 800dc5e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800dc62:	4924      	ldr	r1, [pc, #144]	; (800dcf4 <mem_free+0x114>)
 800dc64:	481e      	ldr	r0, [pc, #120]	; (800dce0 <mem_free+0x100>)
 800dc66:	f00b fe2b 	bl	80198c0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800dc6a:	4821      	ldr	r0, [pc, #132]	; (800dcf0 <mem_free+0x110>)
 800dc6c:	f00a ff4f 	bl	8018b0e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dc70:	f00a ff80 	bl	8018b74 <sys_arch_protect>
 800dc74:	6178      	str	r0, [r7, #20]
 800dc76:	6978      	ldr	r0, [r7, #20]
 800dc78:	f00a ff8a 	bl	8018b90 <sys_arch_unprotect>
    return;
 800dc7c:	e029      	b.n	800dcd2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800dc7e:	69f8      	ldr	r0, [r7, #28]
 800dc80:	f7ff ff72 	bl	800db68 <mem_link_valid>
 800dc84:	4603      	mov	r3, r0
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d110      	bne.n	800dcac <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800dc8a:	4b13      	ldr	r3, [pc, #76]	; (800dcd8 <mem_free+0xf8>)
 800dc8c:	f240 2295 	movw	r2, #661	; 0x295
 800dc90:	4919      	ldr	r1, [pc, #100]	; (800dcf8 <mem_free+0x118>)
 800dc92:	4813      	ldr	r0, [pc, #76]	; (800dce0 <mem_free+0x100>)
 800dc94:	f00b fe14 	bl	80198c0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800dc98:	4815      	ldr	r0, [pc, #84]	; (800dcf0 <mem_free+0x110>)
 800dc9a:	f00a ff38 	bl	8018b0e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dc9e:	f00a ff69 	bl	8018b74 <sys_arch_protect>
 800dca2:	61b8      	str	r0, [r7, #24]
 800dca4:	69b8      	ldr	r0, [r7, #24]
 800dca6:	f00a ff73 	bl	8018b90 <sys_arch_unprotect>
    return;
 800dcaa:	e012      	b.n	800dcd2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800dcac:	69fb      	ldr	r3, [r7, #28]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800dcb2:	4b12      	ldr	r3, [pc, #72]	; (800dcfc <mem_free+0x11c>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	69fa      	ldr	r2, [r7, #28]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d202      	bcs.n	800dcc2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800dcbc:	4a0f      	ldr	r2, [pc, #60]	; (800dcfc <mem_free+0x11c>)
 800dcbe:	69fb      	ldr	r3, [r7, #28]
 800dcc0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800dcc2:	69f8      	ldr	r0, [r7, #28]
 800dcc4:	f7ff fe5c 	bl	800d980 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800dcc8:	4809      	ldr	r0, [pc, #36]	; (800dcf0 <mem_free+0x110>)
 800dcca:	f00a ff20 	bl	8018b0e <sys_mutex_unlock>
 800dcce:	e000      	b.n	800dcd2 <mem_free+0xf2>
    return;
 800dcd0:	bf00      	nop
}
 800dcd2:	3720      	adds	r7, #32
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}
 800dcd8:	0801e064 	.word	0x0801e064
 800dcdc:	0801e154 	.word	0x0801e154
 800dce0:	0801e0ac 	.word	0x0801e0ac
 800dce4:	200087bc 	.word	0x200087bc
 800dce8:	200087c0 	.word	0x200087c0
 800dcec:	0801e178 	.word	0x0801e178
 800dcf0:	200087c4 	.word	0x200087c4
 800dcf4:	0801e194 	.word	0x0801e194
 800dcf8:	0801e1bc 	.word	0x0801e1bc
 800dcfc:	200087c8 	.word	0x200087c8

0800dd00 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b088      	sub	sp, #32
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	460b      	mov	r3, r1
 800dd0a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800dd0c:	887b      	ldrh	r3, [r7, #2]
 800dd0e:	3303      	adds	r3, #3
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	f023 0303 	bic.w	r3, r3, #3
 800dd16:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800dd18:	8bfb      	ldrh	r3, [r7, #30]
 800dd1a:	2b0b      	cmp	r3, #11
 800dd1c:	d801      	bhi.n	800dd22 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800dd1e:	230c      	movs	r3, #12
 800dd20:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800dd22:	8bfb      	ldrh	r3, [r7, #30]
 800dd24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dd28:	d803      	bhi.n	800dd32 <mem_trim+0x32>
 800dd2a:	8bfa      	ldrh	r2, [r7, #30]
 800dd2c:	887b      	ldrh	r3, [r7, #2]
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	d201      	bcs.n	800dd36 <mem_trim+0x36>
    return NULL;
 800dd32:	2300      	movs	r3, #0
 800dd34:	e0d8      	b.n	800dee8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800dd36:	4b6e      	ldr	r3, [pc, #440]	; (800def0 <mem_trim+0x1f0>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	687a      	ldr	r2, [r7, #4]
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d304      	bcc.n	800dd4a <mem_trim+0x4a>
 800dd40:	4b6c      	ldr	r3, [pc, #432]	; (800def4 <mem_trim+0x1f4>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d306      	bcc.n	800dd58 <mem_trim+0x58>
 800dd4a:	4b6b      	ldr	r3, [pc, #428]	; (800def8 <mem_trim+0x1f8>)
 800dd4c:	f240 22d2 	movw	r2, #722	; 0x2d2
 800dd50:	496a      	ldr	r1, [pc, #424]	; (800defc <mem_trim+0x1fc>)
 800dd52:	486b      	ldr	r0, [pc, #428]	; (800df00 <mem_trim+0x200>)
 800dd54:	f00b fdb4 	bl	80198c0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800dd58:	4b65      	ldr	r3, [pc, #404]	; (800def0 <mem_trim+0x1f0>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	687a      	ldr	r2, [r7, #4]
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d304      	bcc.n	800dd6c <mem_trim+0x6c>
 800dd62:	4b64      	ldr	r3, [pc, #400]	; (800def4 <mem_trim+0x1f4>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	687a      	ldr	r2, [r7, #4]
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d307      	bcc.n	800dd7c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dd6c:	f00a ff02 	bl	8018b74 <sys_arch_protect>
 800dd70:	60b8      	str	r0, [r7, #8]
 800dd72:	68b8      	ldr	r0, [r7, #8]
 800dd74:	f00a ff0c 	bl	8018b90 <sys_arch_unprotect>
    return rmem;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	e0b5      	b.n	800dee8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	3b08      	subs	r3, #8
 800dd80:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800dd82:	69b8      	ldr	r0, [r7, #24]
 800dd84:	f7ff fdea 	bl	800d95c <mem_to_ptr>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800dd8c:	69bb      	ldr	r3, [r7, #24]
 800dd8e:	881a      	ldrh	r2, [r3, #0]
 800dd90:	8afb      	ldrh	r3, [r7, #22]
 800dd92:	1ad3      	subs	r3, r2, r3
 800dd94:	b29b      	uxth	r3, r3
 800dd96:	3b08      	subs	r3, #8
 800dd98:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800dd9a:	8bfa      	ldrh	r2, [r7, #30]
 800dd9c:	8abb      	ldrh	r3, [r7, #20]
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d906      	bls.n	800ddb0 <mem_trim+0xb0>
 800dda2:	4b55      	ldr	r3, [pc, #340]	; (800def8 <mem_trim+0x1f8>)
 800dda4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800dda8:	4956      	ldr	r1, [pc, #344]	; (800df04 <mem_trim+0x204>)
 800ddaa:	4855      	ldr	r0, [pc, #340]	; (800df00 <mem_trim+0x200>)
 800ddac:	f00b fd88 	bl	80198c0 <iprintf>
  if (newsize > size) {
 800ddb0:	8bfa      	ldrh	r2, [r7, #30]
 800ddb2:	8abb      	ldrh	r3, [r7, #20]
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d901      	bls.n	800ddbc <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	e095      	b.n	800dee8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800ddbc:	8bfa      	ldrh	r2, [r7, #30]
 800ddbe:	8abb      	ldrh	r3, [r7, #20]
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d101      	bne.n	800ddc8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	e08f      	b.n	800dee8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ddc8:	484f      	ldr	r0, [pc, #316]	; (800df08 <mem_trim+0x208>)
 800ddca:	f00a fe91 	bl	8018af0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ddce:	69bb      	ldr	r3, [r7, #24]
 800ddd0:	881b      	ldrh	r3, [r3, #0]
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7ff fdb0 	bl	800d938 <ptr_to_mem>
 800ddd8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	791b      	ldrb	r3, [r3, #4]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d13f      	bne.n	800de62 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800dde2:	69bb      	ldr	r3, [r7, #24]
 800dde4:	881b      	ldrh	r3, [r3, #0]
 800dde6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ddea:	d106      	bne.n	800ddfa <mem_trim+0xfa>
 800ddec:	4b42      	ldr	r3, [pc, #264]	; (800def8 <mem_trim+0x1f8>)
 800ddee:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ddf2:	4946      	ldr	r1, [pc, #280]	; (800df0c <mem_trim+0x20c>)
 800ddf4:	4842      	ldr	r0, [pc, #264]	; (800df00 <mem_trim+0x200>)
 800ddf6:	f00b fd63 	bl	80198c0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	881b      	ldrh	r3, [r3, #0]
 800ddfe:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800de00:	8afa      	ldrh	r2, [r7, #22]
 800de02:	8bfb      	ldrh	r3, [r7, #30]
 800de04:	4413      	add	r3, r2
 800de06:	b29b      	uxth	r3, r3
 800de08:	3308      	adds	r3, #8
 800de0a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800de0c:	4b40      	ldr	r3, [pc, #256]	; (800df10 <mem_trim+0x210>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	693a      	ldr	r2, [r7, #16]
 800de12:	429a      	cmp	r2, r3
 800de14:	d106      	bne.n	800de24 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800de16:	89fb      	ldrh	r3, [r7, #14]
 800de18:	4618      	mov	r0, r3
 800de1a:	f7ff fd8d 	bl	800d938 <ptr_to_mem>
 800de1e:	4602      	mov	r2, r0
 800de20:	4b3b      	ldr	r3, [pc, #236]	; (800df10 <mem_trim+0x210>)
 800de22:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800de24:	89fb      	ldrh	r3, [r7, #14]
 800de26:	4618      	mov	r0, r3
 800de28:	f7ff fd86 	bl	800d938 <ptr_to_mem>
 800de2c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	2200      	movs	r2, #0
 800de32:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	89ba      	ldrh	r2, [r7, #12]
 800de38:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	8afa      	ldrh	r2, [r7, #22]
 800de3e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800de40:	69bb      	ldr	r3, [r7, #24]
 800de42:	89fa      	ldrh	r2, [r7, #14]
 800de44:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	881b      	ldrh	r3, [r3, #0]
 800de4a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800de4e:	d047      	beq.n	800dee0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	881b      	ldrh	r3, [r3, #0]
 800de54:	4618      	mov	r0, r3
 800de56:	f7ff fd6f 	bl	800d938 <ptr_to_mem>
 800de5a:	4602      	mov	r2, r0
 800de5c:	89fb      	ldrh	r3, [r7, #14]
 800de5e:	8053      	strh	r3, [r2, #2]
 800de60:	e03e      	b.n	800dee0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800de62:	8bfb      	ldrh	r3, [r7, #30]
 800de64:	f103 0214 	add.w	r2, r3, #20
 800de68:	8abb      	ldrh	r3, [r7, #20]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d838      	bhi.n	800dee0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800de6e:	8afa      	ldrh	r2, [r7, #22]
 800de70:	8bfb      	ldrh	r3, [r7, #30]
 800de72:	4413      	add	r3, r2
 800de74:	b29b      	uxth	r3, r3
 800de76:	3308      	adds	r3, #8
 800de78:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	881b      	ldrh	r3, [r3, #0]
 800de7e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800de82:	d106      	bne.n	800de92 <mem_trim+0x192>
 800de84:	4b1c      	ldr	r3, [pc, #112]	; (800def8 <mem_trim+0x1f8>)
 800de86:	f240 3216 	movw	r2, #790	; 0x316
 800de8a:	4920      	ldr	r1, [pc, #128]	; (800df0c <mem_trim+0x20c>)
 800de8c:	481c      	ldr	r0, [pc, #112]	; (800df00 <mem_trim+0x200>)
 800de8e:	f00b fd17 	bl	80198c0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800de92:	89fb      	ldrh	r3, [r7, #14]
 800de94:	4618      	mov	r0, r3
 800de96:	f7ff fd4f 	bl	800d938 <ptr_to_mem>
 800de9a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800de9c:	4b1c      	ldr	r3, [pc, #112]	; (800df10 <mem_trim+0x210>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	693a      	ldr	r2, [r7, #16]
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d202      	bcs.n	800deac <mem_trim+0x1ac>
      lfree = mem2;
 800dea6:	4a1a      	ldr	r2, [pc, #104]	; (800df10 <mem_trim+0x210>)
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	2200      	movs	r2, #0
 800deb0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800deb2:	69bb      	ldr	r3, [r7, #24]
 800deb4:	881a      	ldrh	r2, [r3, #0]
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	8afa      	ldrh	r2, [r7, #22]
 800debe:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800dec0:	69bb      	ldr	r3, [r7, #24]
 800dec2:	89fa      	ldrh	r2, [r7, #14]
 800dec4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	881b      	ldrh	r3, [r3, #0]
 800deca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dece:	d007      	beq.n	800dee0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	881b      	ldrh	r3, [r3, #0]
 800ded4:	4618      	mov	r0, r3
 800ded6:	f7ff fd2f 	bl	800d938 <ptr_to_mem>
 800deda:	4602      	mov	r2, r0
 800dedc:	89fb      	ldrh	r3, [r7, #14]
 800dede:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800dee0:	4809      	ldr	r0, [pc, #36]	; (800df08 <mem_trim+0x208>)
 800dee2:	f00a fe14 	bl	8018b0e <sys_mutex_unlock>
  return rmem;
 800dee6:	687b      	ldr	r3, [r7, #4]
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3720      	adds	r7, #32
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}
 800def0:	200087bc 	.word	0x200087bc
 800def4:	200087c0 	.word	0x200087c0
 800def8:	0801e064 	.word	0x0801e064
 800defc:	0801e1f0 	.word	0x0801e1f0
 800df00:	0801e0ac 	.word	0x0801e0ac
 800df04:	0801e208 	.word	0x0801e208
 800df08:	200087c4 	.word	0x200087c4
 800df0c:	0801e228 	.word	0x0801e228
 800df10:	200087c8 	.word	0x200087c8

0800df14 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b088      	sub	sp, #32
 800df18:	af00      	add	r7, sp, #0
 800df1a:	4603      	mov	r3, r0
 800df1c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800df1e:	88fb      	ldrh	r3, [r7, #6]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d101      	bne.n	800df28 <mem_malloc+0x14>
    return NULL;
 800df24:	2300      	movs	r3, #0
 800df26:	e0e2      	b.n	800e0ee <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800df28:	88fb      	ldrh	r3, [r7, #6]
 800df2a:	3303      	adds	r3, #3
 800df2c:	b29b      	uxth	r3, r3
 800df2e:	f023 0303 	bic.w	r3, r3, #3
 800df32:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800df34:	8bbb      	ldrh	r3, [r7, #28]
 800df36:	2b0b      	cmp	r3, #11
 800df38:	d801      	bhi.n	800df3e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800df3a:	230c      	movs	r3, #12
 800df3c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800df3e:	8bbb      	ldrh	r3, [r7, #28]
 800df40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800df44:	d803      	bhi.n	800df4e <mem_malloc+0x3a>
 800df46:	8bba      	ldrh	r2, [r7, #28]
 800df48:	88fb      	ldrh	r3, [r7, #6]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d201      	bcs.n	800df52 <mem_malloc+0x3e>
    return NULL;
 800df4e:	2300      	movs	r3, #0
 800df50:	e0cd      	b.n	800e0ee <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800df52:	4869      	ldr	r0, [pc, #420]	; (800e0f8 <mem_malloc+0x1e4>)
 800df54:	f00a fdcc 	bl	8018af0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800df58:	4b68      	ldr	r3, [pc, #416]	; (800e0fc <mem_malloc+0x1e8>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	4618      	mov	r0, r3
 800df5e:	f7ff fcfd 	bl	800d95c <mem_to_ptr>
 800df62:	4603      	mov	r3, r0
 800df64:	83fb      	strh	r3, [r7, #30]
 800df66:	e0b7      	b.n	800e0d8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800df68:	8bfb      	ldrh	r3, [r7, #30]
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7ff fce4 	bl	800d938 <ptr_to_mem>
 800df70:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	791b      	ldrb	r3, [r3, #4]
 800df76:	2b00      	cmp	r3, #0
 800df78:	f040 80a7 	bne.w	800e0ca <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	881b      	ldrh	r3, [r3, #0]
 800df80:	461a      	mov	r2, r3
 800df82:	8bfb      	ldrh	r3, [r7, #30]
 800df84:	1ad3      	subs	r3, r2, r3
 800df86:	f1a3 0208 	sub.w	r2, r3, #8
 800df8a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800df8c:	429a      	cmp	r2, r3
 800df8e:	f0c0 809c 	bcc.w	800e0ca <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	881b      	ldrh	r3, [r3, #0]
 800df96:	461a      	mov	r2, r3
 800df98:	8bfb      	ldrh	r3, [r7, #30]
 800df9a:	1ad3      	subs	r3, r2, r3
 800df9c:	f1a3 0208 	sub.w	r2, r3, #8
 800dfa0:	8bbb      	ldrh	r3, [r7, #28]
 800dfa2:	3314      	adds	r3, #20
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d333      	bcc.n	800e010 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800dfa8:	8bfa      	ldrh	r2, [r7, #30]
 800dfaa:	8bbb      	ldrh	r3, [r7, #28]
 800dfac:	4413      	add	r3, r2
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	3308      	adds	r3, #8
 800dfb2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800dfb4:	8a7b      	ldrh	r3, [r7, #18]
 800dfb6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dfba:	d106      	bne.n	800dfca <mem_malloc+0xb6>
 800dfbc:	4b50      	ldr	r3, [pc, #320]	; (800e100 <mem_malloc+0x1ec>)
 800dfbe:	f240 3287 	movw	r2, #903	; 0x387
 800dfc2:	4950      	ldr	r1, [pc, #320]	; (800e104 <mem_malloc+0x1f0>)
 800dfc4:	4850      	ldr	r0, [pc, #320]	; (800e108 <mem_malloc+0x1f4>)
 800dfc6:	f00b fc7b 	bl	80198c0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800dfca:	8a7b      	ldrh	r3, [r7, #18]
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f7ff fcb3 	bl	800d938 <ptr_to_mem>
 800dfd2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	881a      	ldrh	r2, [r3, #0]
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	8bfa      	ldrh	r2, [r7, #30]
 800dfe6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	8a7a      	ldrh	r2, [r7, #18]
 800dfec:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	2201      	movs	r2, #1
 800dff2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	881b      	ldrh	r3, [r3, #0]
 800dff8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dffc:	d00b      	beq.n	800e016 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	881b      	ldrh	r3, [r3, #0]
 800e002:	4618      	mov	r0, r3
 800e004:	f7ff fc98 	bl	800d938 <ptr_to_mem>
 800e008:	4602      	mov	r2, r0
 800e00a:	8a7b      	ldrh	r3, [r7, #18]
 800e00c:	8053      	strh	r3, [r2, #2]
 800e00e:	e002      	b.n	800e016 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	2201      	movs	r2, #1
 800e014:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e016:	4b39      	ldr	r3, [pc, #228]	; (800e0fc <mem_malloc+0x1e8>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	697a      	ldr	r2, [r7, #20]
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d127      	bne.n	800e070 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800e020:	4b36      	ldr	r3, [pc, #216]	; (800e0fc <mem_malloc+0x1e8>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e026:	e005      	b.n	800e034 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e028:	69bb      	ldr	r3, [r7, #24]
 800e02a:	881b      	ldrh	r3, [r3, #0]
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7ff fc83 	bl	800d938 <ptr_to_mem>
 800e032:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e034:	69bb      	ldr	r3, [r7, #24]
 800e036:	791b      	ldrb	r3, [r3, #4]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d004      	beq.n	800e046 <mem_malloc+0x132>
 800e03c:	4b33      	ldr	r3, [pc, #204]	; (800e10c <mem_malloc+0x1f8>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	69ba      	ldr	r2, [r7, #24]
 800e042:	429a      	cmp	r2, r3
 800e044:	d1f0      	bne.n	800e028 <mem_malloc+0x114>
          }
          lfree = cur;
 800e046:	4a2d      	ldr	r2, [pc, #180]	; (800e0fc <mem_malloc+0x1e8>)
 800e048:	69bb      	ldr	r3, [r7, #24]
 800e04a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e04c:	4b2b      	ldr	r3, [pc, #172]	; (800e0fc <mem_malloc+0x1e8>)
 800e04e:	681a      	ldr	r2, [r3, #0]
 800e050:	4b2e      	ldr	r3, [pc, #184]	; (800e10c <mem_malloc+0x1f8>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	429a      	cmp	r2, r3
 800e056:	d00b      	beq.n	800e070 <mem_malloc+0x15c>
 800e058:	4b28      	ldr	r3, [pc, #160]	; (800e0fc <mem_malloc+0x1e8>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	791b      	ldrb	r3, [r3, #4]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d006      	beq.n	800e070 <mem_malloc+0x15c>
 800e062:	4b27      	ldr	r3, [pc, #156]	; (800e100 <mem_malloc+0x1ec>)
 800e064:	f240 32b5 	movw	r2, #949	; 0x3b5
 800e068:	4929      	ldr	r1, [pc, #164]	; (800e110 <mem_malloc+0x1fc>)
 800e06a:	4827      	ldr	r0, [pc, #156]	; (800e108 <mem_malloc+0x1f4>)
 800e06c:	f00b fc28 	bl	80198c0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e070:	4821      	ldr	r0, [pc, #132]	; (800e0f8 <mem_malloc+0x1e4>)
 800e072:	f00a fd4c 	bl	8018b0e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e076:	8bba      	ldrh	r2, [r7, #28]
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	4413      	add	r3, r2
 800e07c:	3308      	adds	r3, #8
 800e07e:	4a23      	ldr	r2, [pc, #140]	; (800e10c <mem_malloc+0x1f8>)
 800e080:	6812      	ldr	r2, [r2, #0]
 800e082:	4293      	cmp	r3, r2
 800e084:	d906      	bls.n	800e094 <mem_malloc+0x180>
 800e086:	4b1e      	ldr	r3, [pc, #120]	; (800e100 <mem_malloc+0x1ec>)
 800e088:	f240 32ba 	movw	r2, #954	; 0x3ba
 800e08c:	4921      	ldr	r1, [pc, #132]	; (800e114 <mem_malloc+0x200>)
 800e08e:	481e      	ldr	r0, [pc, #120]	; (800e108 <mem_malloc+0x1f4>)
 800e090:	f00b fc16 	bl	80198c0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	f003 0303 	and.w	r3, r3, #3
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d006      	beq.n	800e0ac <mem_malloc+0x198>
 800e09e:	4b18      	ldr	r3, [pc, #96]	; (800e100 <mem_malloc+0x1ec>)
 800e0a0:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800e0a4:	491c      	ldr	r1, [pc, #112]	; (800e118 <mem_malloc+0x204>)
 800e0a6:	4818      	ldr	r0, [pc, #96]	; (800e108 <mem_malloc+0x1f4>)
 800e0a8:	f00b fc0a 	bl	80198c0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	f003 0303 	and.w	r3, r3, #3
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d006      	beq.n	800e0c4 <mem_malloc+0x1b0>
 800e0b6:	4b12      	ldr	r3, [pc, #72]	; (800e100 <mem_malloc+0x1ec>)
 800e0b8:	f240 32be 	movw	r2, #958	; 0x3be
 800e0bc:	4917      	ldr	r1, [pc, #92]	; (800e11c <mem_malloc+0x208>)
 800e0be:	4812      	ldr	r0, [pc, #72]	; (800e108 <mem_malloc+0x1f4>)
 800e0c0:	f00b fbfe 	bl	80198c0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	3308      	adds	r3, #8
 800e0c8:	e011      	b.n	800e0ee <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800e0ca:	8bfb      	ldrh	r3, [r7, #30]
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7ff fc33 	bl	800d938 <ptr_to_mem>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	881b      	ldrh	r3, [r3, #0]
 800e0d6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e0d8:	8bfa      	ldrh	r2, [r7, #30]
 800e0da:	8bbb      	ldrh	r3, [r7, #28]
 800e0dc:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	f4ff af41 	bcc.w	800df68 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e0e6:	4804      	ldr	r0, [pc, #16]	; (800e0f8 <mem_malloc+0x1e4>)
 800e0e8:	f00a fd11 	bl	8018b0e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e0ec:	2300      	movs	r3, #0
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3720      	adds	r7, #32
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	200087c4 	.word	0x200087c4
 800e0fc:	200087c8 	.word	0x200087c8
 800e100:	0801e064 	.word	0x0801e064
 800e104:	0801e228 	.word	0x0801e228
 800e108:	0801e0ac 	.word	0x0801e0ac
 800e10c:	200087c0 	.word	0x200087c0
 800e110:	0801e23c 	.word	0x0801e23c
 800e114:	0801e258 	.word	0x0801e258
 800e118:	0801e288 	.word	0x0801e288
 800e11c:	0801e2b8 	.word	0x0801e2b8

0800e120 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e120:	b480      	push	{r7}
 800e122:	b085      	sub	sp, #20
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	689b      	ldr	r3, [r3, #8]
 800e12c:	2200      	movs	r2, #0
 800e12e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	3303      	adds	r3, #3
 800e136:	f023 0303 	bic.w	r3, r3, #3
 800e13a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e13c:	2300      	movs	r3, #0
 800e13e:	60fb      	str	r3, [r7, #12]
 800e140:	e011      	b.n	800e166 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	689b      	ldr	r3, [r3, #8]
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	689b      	ldr	r3, [r3, #8]
 800e150:	68ba      	ldr	r2, [r7, #8]
 800e152:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	881b      	ldrh	r3, [r3, #0]
 800e158:	461a      	mov	r2, r3
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	4413      	add	r3, r2
 800e15e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	3301      	adds	r3, #1
 800e164:	60fb      	str	r3, [r7, #12]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	885b      	ldrh	r3, [r3, #2]
 800e16a:	461a      	mov	r2, r3
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	4293      	cmp	r3, r2
 800e170:	dbe7      	blt.n	800e142 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e172:	bf00      	nop
 800e174:	3714      	adds	r7, #20
 800e176:	46bd      	mov	sp, r7
 800e178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17c:	4770      	bx	lr
	...

0800e180 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b082      	sub	sp, #8
 800e184:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e186:	2300      	movs	r3, #0
 800e188:	80fb      	strh	r3, [r7, #6]
 800e18a:	e009      	b.n	800e1a0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e18c:	88fb      	ldrh	r3, [r7, #6]
 800e18e:	4a08      	ldr	r2, [pc, #32]	; (800e1b0 <memp_init+0x30>)
 800e190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e194:	4618      	mov	r0, r3
 800e196:	f7ff ffc3 	bl	800e120 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e19a:	88fb      	ldrh	r3, [r7, #6]
 800e19c:	3301      	adds	r3, #1
 800e19e:	80fb      	strh	r3, [r7, #6]
 800e1a0:	88fb      	ldrh	r3, [r7, #6]
 800e1a2:	2b0c      	cmp	r3, #12
 800e1a4:	d9f2      	bls.n	800e18c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e1a6:	bf00      	nop
 800e1a8:	3708      	adds	r7, #8
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	08020ac4 	.word	0x08020ac4

0800e1b4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b084      	sub	sp, #16
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e1bc:	f00a fcda 	bl	8018b74 <sys_arch_protect>
 800e1c0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	689b      	ldr	r3, [r3, #8]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d015      	beq.n	800e1fc <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	689b      	ldr	r3, [r3, #8]
 800e1d4:	68ba      	ldr	r2, [r7, #8]
 800e1d6:	6812      	ldr	r2, [r2, #0]
 800e1d8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e1da:	68bb      	ldr	r3, [r7, #8]
 800e1dc:	f003 0303 	and.w	r3, r3, #3
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d006      	beq.n	800e1f2 <do_memp_malloc_pool+0x3e>
 800e1e4:	4b09      	ldr	r3, [pc, #36]	; (800e20c <do_memp_malloc_pool+0x58>)
 800e1e6:	f240 1219 	movw	r2, #281	; 0x119
 800e1ea:	4909      	ldr	r1, [pc, #36]	; (800e210 <do_memp_malloc_pool+0x5c>)
 800e1ec:	4809      	ldr	r0, [pc, #36]	; (800e214 <do_memp_malloc_pool+0x60>)
 800e1ee:	f00b fb67 	bl	80198c0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e1f2:	68f8      	ldr	r0, [r7, #12]
 800e1f4:	f00a fccc 	bl	8018b90 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	e003      	b.n	800e204 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e1fc:	68f8      	ldr	r0, [r7, #12]
 800e1fe:	f00a fcc7 	bl	8018b90 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e202:	2300      	movs	r3, #0
}
 800e204:	4618      	mov	r0, r3
 800e206:	3710      	adds	r7, #16
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	0801e2dc 	.word	0x0801e2dc
 800e210:	0801e30c 	.word	0x0801e30c
 800e214:	0801e330 	.word	0x0801e330

0800e218 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b084      	sub	sp, #16
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	4603      	mov	r3, r0
 800e220:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e222:	79fb      	ldrb	r3, [r7, #7]
 800e224:	2b0c      	cmp	r3, #12
 800e226:	d908      	bls.n	800e23a <memp_malloc+0x22>
 800e228:	4b0a      	ldr	r3, [pc, #40]	; (800e254 <memp_malloc+0x3c>)
 800e22a:	f240 1257 	movw	r2, #343	; 0x157
 800e22e:	490a      	ldr	r1, [pc, #40]	; (800e258 <memp_malloc+0x40>)
 800e230:	480a      	ldr	r0, [pc, #40]	; (800e25c <memp_malloc+0x44>)
 800e232:	f00b fb45 	bl	80198c0 <iprintf>
 800e236:	2300      	movs	r3, #0
 800e238:	e008      	b.n	800e24c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e23a:	79fb      	ldrb	r3, [r7, #7]
 800e23c:	4a08      	ldr	r2, [pc, #32]	; (800e260 <memp_malloc+0x48>)
 800e23e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e242:	4618      	mov	r0, r3
 800e244:	f7ff ffb6 	bl	800e1b4 <do_memp_malloc_pool>
 800e248:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e24a:	68fb      	ldr	r3, [r7, #12]
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3710      	adds	r7, #16
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}
 800e254:	0801e2dc 	.word	0x0801e2dc
 800e258:	0801e36c 	.word	0x0801e36c
 800e25c:	0801e330 	.word	0x0801e330
 800e260:	08020ac4 	.word	0x08020ac4

0800e264 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b084      	sub	sp, #16
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
 800e26c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	f003 0303 	and.w	r3, r3, #3
 800e274:	2b00      	cmp	r3, #0
 800e276:	d006      	beq.n	800e286 <do_memp_free_pool+0x22>
 800e278:	4b0d      	ldr	r3, [pc, #52]	; (800e2b0 <do_memp_free_pool+0x4c>)
 800e27a:	f240 126d 	movw	r2, #365	; 0x16d
 800e27e:	490d      	ldr	r1, [pc, #52]	; (800e2b4 <do_memp_free_pool+0x50>)
 800e280:	480d      	ldr	r0, [pc, #52]	; (800e2b8 <do_memp_free_pool+0x54>)
 800e282:	f00b fb1d 	bl	80198c0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e28a:	f00a fc73 	bl	8018b74 <sys_arch_protect>
 800e28e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	689b      	ldr	r3, [r3, #8]
 800e294:	681a      	ldr	r2, [r3, #0]
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	689b      	ldr	r3, [r3, #8]
 800e29e:	68fa      	ldr	r2, [r7, #12]
 800e2a0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e2a2:	68b8      	ldr	r0, [r7, #8]
 800e2a4:	f00a fc74 	bl	8018b90 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e2a8:	bf00      	nop
 800e2aa:	3710      	adds	r7, #16
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}
 800e2b0:	0801e2dc 	.word	0x0801e2dc
 800e2b4:	0801e38c 	.word	0x0801e38c
 800e2b8:	0801e330 	.word	0x0801e330

0800e2bc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b082      	sub	sp, #8
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	6039      	str	r1, [r7, #0]
 800e2c6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e2c8:	79fb      	ldrb	r3, [r7, #7]
 800e2ca:	2b0c      	cmp	r3, #12
 800e2cc:	d907      	bls.n	800e2de <memp_free+0x22>
 800e2ce:	4b0c      	ldr	r3, [pc, #48]	; (800e300 <memp_free+0x44>)
 800e2d0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800e2d4:	490b      	ldr	r1, [pc, #44]	; (800e304 <memp_free+0x48>)
 800e2d6:	480c      	ldr	r0, [pc, #48]	; (800e308 <memp_free+0x4c>)
 800e2d8:	f00b faf2 	bl	80198c0 <iprintf>
 800e2dc:	e00c      	b.n	800e2f8 <memp_free+0x3c>

  if (mem == NULL) {
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d008      	beq.n	800e2f6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e2e4:	79fb      	ldrb	r3, [r7, #7]
 800e2e6:	4a09      	ldr	r2, [pc, #36]	; (800e30c <memp_free+0x50>)
 800e2e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2ec:	6839      	ldr	r1, [r7, #0]
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7ff ffb8 	bl	800e264 <do_memp_free_pool>
 800e2f4:	e000      	b.n	800e2f8 <memp_free+0x3c>
    return;
 800e2f6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e2f8:	3708      	adds	r7, #8
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
 800e2fe:	bf00      	nop
 800e300:	0801e2dc 	.word	0x0801e2dc
 800e304:	0801e3ac 	.word	0x0801e3ac
 800e308:	0801e330 	.word	0x0801e330
 800e30c:	08020ac4 	.word	0x08020ac4

0800e310 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e310:	b480      	push	{r7}
 800e312:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e314:	bf00      	nop
 800e316:	46bd      	mov	sp, r7
 800e318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31c:	4770      	bx	lr
	...

0800e320 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b086      	sub	sp, #24
 800e324:	af00      	add	r7, sp, #0
 800e326:	60f8      	str	r0, [r7, #12]
 800e328:	60b9      	str	r1, [r7, #8]
 800e32a:	607a      	str	r2, [r7, #4]
 800e32c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d108      	bne.n	800e346 <netif_add+0x26>
 800e334:	4b56      	ldr	r3, [pc, #344]	; (800e490 <netif_add+0x170>)
 800e336:	f240 1227 	movw	r2, #295	; 0x127
 800e33a:	4956      	ldr	r1, [pc, #344]	; (800e494 <netif_add+0x174>)
 800e33c:	4856      	ldr	r0, [pc, #344]	; (800e498 <netif_add+0x178>)
 800e33e:	f00b fabf 	bl	80198c0 <iprintf>
 800e342:	2300      	movs	r3, #0
 800e344:	e09f      	b.n	800e486 <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d108      	bne.n	800e35e <netif_add+0x3e>
 800e34c:	4b50      	ldr	r3, [pc, #320]	; (800e490 <netif_add+0x170>)
 800e34e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e352:	4952      	ldr	r1, [pc, #328]	; (800e49c <netif_add+0x17c>)
 800e354:	4850      	ldr	r0, [pc, #320]	; (800e498 <netif_add+0x178>)
 800e356:	f00b fab3 	bl	80198c0 <iprintf>
 800e35a:	2300      	movs	r3, #0
 800e35c:	e093      	b.n	800e486 <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d101      	bne.n	800e368 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e364:	4b4e      	ldr	r3, [pc, #312]	; (800e4a0 <netif_add+0x180>)
 800e366:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d101      	bne.n	800e372 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e36e:	4b4c      	ldr	r3, [pc, #304]	; (800e4a0 <netif_add+0x180>)
 800e370:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d101      	bne.n	800e37c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e378:	4b49      	ldr	r3, [pc, #292]	; (800e4a0 <netif_add+0x180>)
 800e37a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2200      	movs	r2, #0
 800e380:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2200      	movs	r2, #0
 800e386:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	2200      	movs	r2, #0
 800e38c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	4a44      	ldr	r2, [pc, #272]	; (800e4a4 <netif_add+0x184>)
 800e392:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2200      	movs	r2, #0
 800e398:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2200      	movs	r2, #0
 800e39e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	6a3a      	ldr	r2, [r7, #32]
 800e3a6:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 800e3a8:	4b3f      	ldr	r3, [pc, #252]	; (800e4a8 <netif_add+0x188>)
 800e3aa:	781a      	ldrb	r2, [r3, #0]
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3b6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	687a      	ldr	r2, [r7, #4]
 800e3bc:	68b9      	ldr	r1, [r7, #8]
 800e3be:	68f8      	ldr	r0, [r7, #12]
 800e3c0:	f000 f914 	bl	800e5ec <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c6:	68f8      	ldr	r0, [r7, #12]
 800e3c8:	4798      	blx	r3
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d001      	beq.n	800e3d4 <netif_add+0xb4>
    return NULL;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	e058      	b.n	800e486 <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e3da:	2bff      	cmp	r3, #255	; 0xff
 800e3dc:	d103      	bne.n	800e3e6 <netif_add+0xc6>
        netif->num = 0;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e3ea:	4b30      	ldr	r3, [pc, #192]	; (800e4ac <netif_add+0x18c>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	617b      	str	r3, [r7, #20]
 800e3f0:	e02b      	b.n	800e44a <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e3f2:	697a      	ldr	r2, [r7, #20]
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d106      	bne.n	800e408 <netif_add+0xe8>
 800e3fa:	4b25      	ldr	r3, [pc, #148]	; (800e490 <netif_add+0x170>)
 800e3fc:	f240 128b 	movw	r2, #395	; 0x18b
 800e400:	492b      	ldr	r1, [pc, #172]	; (800e4b0 <netif_add+0x190>)
 800e402:	4825      	ldr	r0, [pc, #148]	; (800e498 <netif_add+0x178>)
 800e404:	f00b fa5c 	bl	80198c0 <iprintf>
        num_netifs++;
 800e408:	693b      	ldr	r3, [r7, #16]
 800e40a:	3301      	adds	r3, #1
 800e40c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	2bff      	cmp	r3, #255	; 0xff
 800e412:	dd06      	ble.n	800e422 <netif_add+0x102>
 800e414:	4b1e      	ldr	r3, [pc, #120]	; (800e490 <netif_add+0x170>)
 800e416:	f240 128d 	movw	r2, #397	; 0x18d
 800e41a:	4926      	ldr	r1, [pc, #152]	; (800e4b4 <netif_add+0x194>)
 800e41c:	481e      	ldr	r0, [pc, #120]	; (800e498 <netif_add+0x178>)
 800e41e:	f00b fa4f 	bl	80198c0 <iprintf>
        if (netif2->num == netif->num) {
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e42e:	429a      	cmp	r2, r3
 800e430:	d108      	bne.n	800e444 <netif_add+0x124>
          netif->num++;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e438:	3301      	adds	r3, #1
 800e43a:	b2da      	uxtb	r2, r3
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 800e442:	e005      	b.n	800e450 <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	617b      	str	r3, [r7, #20]
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d1d0      	bne.n	800e3f2 <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d1be      	bne.n	800e3d4 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e45c:	2bfe      	cmp	r3, #254	; 0xfe
 800e45e:	d103      	bne.n	800e468 <netif_add+0x148>
    netif_num = 0;
 800e460:	4b11      	ldr	r3, [pc, #68]	; (800e4a8 <netif_add+0x188>)
 800e462:	2200      	movs	r2, #0
 800e464:	701a      	strb	r2, [r3, #0]
 800e466:	e006      	b.n	800e476 <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e46e:	3301      	adds	r3, #1
 800e470:	b2da      	uxtb	r2, r3
 800e472:	4b0d      	ldr	r3, [pc, #52]	; (800e4a8 <netif_add+0x188>)
 800e474:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e476:	4b0d      	ldr	r3, [pc, #52]	; (800e4ac <netif_add+0x18c>)
 800e478:	681a      	ldr	r2, [r3, #0]
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e47e:	4a0b      	ldr	r2, [pc, #44]	; (800e4ac <netif_add+0x18c>)
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e484:	68fb      	ldr	r3, [r7, #12]
}
 800e486:	4618      	mov	r0, r3
 800e488:	3718      	adds	r7, #24
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop
 800e490:	0801e3c8 	.word	0x0801e3c8
 800e494:	0801e45c 	.word	0x0801e45c
 800e498:	0801e418 	.word	0x0801e418
 800e49c:	0801e478 	.word	0x0801e478
 800e4a0:	08020b38 	.word	0x08020b38
 800e4a4:	0800e7dd 	.word	0x0800e7dd
 800e4a8:	20008800 	.word	0x20008800
 800e4ac:	2000fce4 	.word	0x2000fce4
 800e4b0:	0801e49c 	.word	0x0801e49c
 800e4b4:	0801e4b0 	.word	0x0801e4b0

0800e4b8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b082      	sub	sp, #8
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
 800e4c0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e4c2:	6839      	ldr	r1, [r7, #0]
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f002 fd8d 	bl	8010fe4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e4ca:	6839      	ldr	r1, [r7, #0]
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f007 fea3 	bl	8016218 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e4d2:	bf00      	nop
 800e4d4:	3708      	adds	r7, #8
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
	...

0800e4dc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b086      	sub	sp, #24
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	60f8      	str	r0, [r7, #12]
 800e4e4:	60b9      	str	r1, [r7, #8]
 800e4e6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d106      	bne.n	800e4fc <netif_do_set_ipaddr+0x20>
 800e4ee:	4b1d      	ldr	r3, [pc, #116]	; (800e564 <netif_do_set_ipaddr+0x88>)
 800e4f0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800e4f4:	491c      	ldr	r1, [pc, #112]	; (800e568 <netif_do_set_ipaddr+0x8c>)
 800e4f6:	481d      	ldr	r0, [pc, #116]	; (800e56c <netif_do_set_ipaddr+0x90>)
 800e4f8:	f00b f9e2 	bl	80198c0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d106      	bne.n	800e510 <netif_do_set_ipaddr+0x34>
 800e502:	4b18      	ldr	r3, [pc, #96]	; (800e564 <netif_do_set_ipaddr+0x88>)
 800e504:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800e508:	4917      	ldr	r1, [pc, #92]	; (800e568 <netif_do_set_ipaddr+0x8c>)
 800e50a:	4818      	ldr	r0, [pc, #96]	; (800e56c <netif_do_set_ipaddr+0x90>)
 800e50c:	f00b f9d8 	bl	80198c0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	681a      	ldr	r2, [r3, #0]
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	3304      	adds	r3, #4
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d01c      	beq.n	800e558 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	3304      	adds	r3, #4
 800e528:	681a      	ldr	r2, [r3, #0]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e52e:	f107 0314 	add.w	r3, r7, #20
 800e532:	4619      	mov	r1, r3
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f7ff ffbf 	bl	800e4b8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d002      	beq.n	800e546 <netif_do_set_ipaddr+0x6a>
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	e000      	b.n	800e548 <netif_do_set_ipaddr+0x6c>
 800e546:	2300      	movs	r3, #0
 800e548:	68fa      	ldr	r2, [r7, #12]
 800e54a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e54c:	2101      	movs	r1, #1
 800e54e:	68f8      	ldr	r0, [r7, #12]
 800e550:	f000 f8d2 	bl	800e6f8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e554:	2301      	movs	r3, #1
 800e556:	e000      	b.n	800e55a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e558:	2300      	movs	r3, #0
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	3718      	adds	r7, #24
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}
 800e562:	bf00      	nop
 800e564:	0801e3c8 	.word	0x0801e3c8
 800e568:	0801e4e0 	.word	0x0801e4e0
 800e56c:	0801e418 	.word	0x0801e418

0800e570 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e570:	b480      	push	{r7}
 800e572:	b085      	sub	sp, #20
 800e574:	af00      	add	r7, sp, #0
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	60b9      	str	r1, [r7, #8]
 800e57a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	681a      	ldr	r2, [r3, #0]
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	3308      	adds	r3, #8
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	429a      	cmp	r2, r3
 800e588:	d00a      	beq.n	800e5a0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d002      	beq.n	800e596 <netif_do_set_netmask+0x26>
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	e000      	b.n	800e598 <netif_do_set_netmask+0x28>
 800e596:	2300      	movs	r3, #0
 800e598:	68fa      	ldr	r2, [r7, #12]
 800e59a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e59c:	2301      	movs	r3, #1
 800e59e:	e000      	b.n	800e5a2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e5a0:	2300      	movs	r3, #0
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3714      	adds	r7, #20
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ac:	4770      	bx	lr

0800e5ae <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e5ae:	b480      	push	{r7}
 800e5b0:	b085      	sub	sp, #20
 800e5b2:	af00      	add	r7, sp, #0
 800e5b4:	60f8      	str	r0, [r7, #12]
 800e5b6:	60b9      	str	r1, [r7, #8]
 800e5b8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	681a      	ldr	r2, [r3, #0]
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	330c      	adds	r3, #12
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d00a      	beq.n	800e5de <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d002      	beq.n	800e5d4 <netif_do_set_gw+0x26>
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	e000      	b.n	800e5d6 <netif_do_set_gw+0x28>
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	68fa      	ldr	r2, [r7, #12]
 800e5d8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e5da:	2301      	movs	r3, #1
 800e5dc:	e000      	b.n	800e5e0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e5de:	2300      	movs	r3, #0
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3714      	adds	r7, #20
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ea:	4770      	bx	lr

0800e5ec <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b088      	sub	sp, #32
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	60f8      	str	r0, [r7, #12]
 800e5f4:	60b9      	str	r1, [r7, #8]
 800e5f6:	607a      	str	r2, [r7, #4]
 800e5f8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e5fe:	2300      	movs	r3, #0
 800e600:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d101      	bne.n	800e60c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e608:	4b1c      	ldr	r3, [pc, #112]	; (800e67c <netif_set_addr+0x90>)
 800e60a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d101      	bne.n	800e616 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e612:	4b1a      	ldr	r3, [pc, #104]	; (800e67c <netif_set_addr+0x90>)
 800e614:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d101      	bne.n	800e620 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e61c:	4b17      	ldr	r3, [pc, #92]	; (800e67c <netif_set_addr+0x90>)
 800e61e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d003      	beq.n	800e62e <netif_set_addr+0x42>
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d101      	bne.n	800e632 <netif_set_addr+0x46>
 800e62e:	2301      	movs	r3, #1
 800e630:	e000      	b.n	800e634 <netif_set_addr+0x48>
 800e632:	2300      	movs	r3, #0
 800e634:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d006      	beq.n	800e64a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e63c:	f107 0310 	add.w	r3, r7, #16
 800e640:	461a      	mov	r2, r3
 800e642:	68b9      	ldr	r1, [r7, #8]
 800e644:	68f8      	ldr	r0, [r7, #12]
 800e646:	f7ff ff49 	bl	800e4dc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e64a:	69fa      	ldr	r2, [r7, #28]
 800e64c:	6879      	ldr	r1, [r7, #4]
 800e64e:	68f8      	ldr	r0, [r7, #12]
 800e650:	f7ff ff8e 	bl	800e570 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e654:	69ba      	ldr	r2, [r7, #24]
 800e656:	6839      	ldr	r1, [r7, #0]
 800e658:	68f8      	ldr	r0, [r7, #12]
 800e65a:	f7ff ffa8 	bl	800e5ae <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d106      	bne.n	800e672 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e664:	f107 0310 	add.w	r3, r7, #16
 800e668:	461a      	mov	r2, r3
 800e66a:	68b9      	ldr	r1, [r7, #8]
 800e66c:	68f8      	ldr	r0, [r7, #12]
 800e66e:	f7ff ff35 	bl	800e4dc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e672:	bf00      	nop
 800e674:	3720      	adds	r7, #32
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	08020b38 	.word	0x08020b38

0800e680 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e680:	b480      	push	{r7}
 800e682:	b083      	sub	sp, #12
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e688:	4a04      	ldr	r2, [pc, #16]	; (800e69c <netif_set_default+0x1c>)
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e68e:	bf00      	nop
 800e690:	370c      	adds	r7, #12
 800e692:	46bd      	mov	sp, r7
 800e694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e698:	4770      	bx	lr
 800e69a:	bf00      	nop
 800e69c:	2000fce8 	.word	0x2000fce8

0800e6a0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b082      	sub	sp, #8
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d107      	bne.n	800e6be <netif_set_up+0x1e>
 800e6ae:	4b0f      	ldr	r3, [pc, #60]	; (800e6ec <netif_set_up+0x4c>)
 800e6b0:	f44f 7254 	mov.w	r2, #848	; 0x350
 800e6b4:	490e      	ldr	r1, [pc, #56]	; (800e6f0 <netif_set_up+0x50>)
 800e6b6:	480f      	ldr	r0, [pc, #60]	; (800e6f4 <netif_set_up+0x54>)
 800e6b8:	f00b f902 	bl	80198c0 <iprintf>
 800e6bc:	e013      	b.n	800e6e6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e6c4:	f003 0301 	and.w	r3, r3, #1
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d10c      	bne.n	800e6e6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e6d2:	f043 0301 	orr.w	r3, r3, #1
 800e6d6:	b2da      	uxtb	r2, r3
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e6de:	2103      	movs	r1, #3
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f000 f809 	bl	800e6f8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e6e6:	3708      	adds	r7, #8
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}
 800e6ec:	0801e3c8 	.word	0x0801e3c8
 800e6f0:	0801e550 	.word	0x0801e550
 800e6f4:	0801e418 	.word	0x0801e418

0800e6f8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
 800e700:	460b      	mov	r3, r1
 800e702:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d106      	bne.n	800e718 <netif_issue_reports+0x20>
 800e70a:	4b18      	ldr	r3, [pc, #96]	; (800e76c <netif_issue_reports+0x74>)
 800e70c:	f240 326d 	movw	r2, #877	; 0x36d
 800e710:	4917      	ldr	r1, [pc, #92]	; (800e770 <netif_issue_reports+0x78>)
 800e712:	4818      	ldr	r0, [pc, #96]	; (800e774 <netif_issue_reports+0x7c>)
 800e714:	f00b f8d4 	bl	80198c0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e71e:	f003 0304 	and.w	r3, r3, #4
 800e722:	2b00      	cmp	r3, #0
 800e724:	d01e      	beq.n	800e764 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e72c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e730:	2b00      	cmp	r3, #0
 800e732:	d017      	beq.n	800e764 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e734:	78fb      	ldrb	r3, [r7, #3]
 800e736:	f003 0301 	and.w	r3, r3, #1
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d013      	beq.n	800e766 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	3304      	adds	r3, #4
 800e742:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e744:	2b00      	cmp	r3, #0
 800e746:	d00e      	beq.n	800e766 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e74e:	f003 0308 	and.w	r3, r3, #8
 800e752:	2b00      	cmp	r3, #0
 800e754:	d007      	beq.n	800e766 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	3304      	adds	r3, #4
 800e75a:	4619      	mov	r1, r3
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f008 fcc5 	bl	80170ec <etharp_request>
 800e762:	e000      	b.n	800e766 <netif_issue_reports+0x6e>
    return;
 800e764:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e766:	3708      	adds	r7, #8
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	0801e3c8 	.word	0x0801e3c8
 800e770:	0801e56c 	.word	0x0801e56c
 800e774:	0801e418 	.word	0x0801e418

0800e778 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b082      	sub	sp, #8
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d107      	bne.n	800e796 <netif_set_down+0x1e>
 800e786:	4b12      	ldr	r3, [pc, #72]	; (800e7d0 <netif_set_down+0x58>)
 800e788:	f240 329b 	movw	r2, #923	; 0x39b
 800e78c:	4911      	ldr	r1, [pc, #68]	; (800e7d4 <netif_set_down+0x5c>)
 800e78e:	4812      	ldr	r0, [pc, #72]	; (800e7d8 <netif_set_down+0x60>)
 800e790:	f00b f896 	bl	80198c0 <iprintf>
 800e794:	e019      	b.n	800e7ca <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e79c:	f003 0301 	and.w	r3, r3, #1
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d012      	beq.n	800e7ca <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e7aa:	f023 0301 	bic.w	r3, r3, #1
 800e7ae:	b2da      	uxtb	r2, r3
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e7bc:	f003 0308 	and.w	r3, r3, #8
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d002      	beq.n	800e7ca <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f008 f84f 	bl	8016868 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e7ca:	3708      	adds	r7, #8
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}
 800e7d0:	0801e3c8 	.word	0x0801e3c8
 800e7d4:	0801e590 	.word	0x0801e590
 800e7d8:	0801e418 	.word	0x0801e418

0800e7dc <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b085      	sub	sp, #20
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	60f8      	str	r0, [r7, #12]
 800e7e4:	60b9      	str	r1, [r7, #8]
 800e7e6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e7e8:	f06f 030b 	mvn.w	r3, #11
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3714      	adds	r7, #20
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr

0800e7f8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b085      	sub	sp, #20
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	4603      	mov	r3, r0
 800e800:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e802:	79fb      	ldrb	r3, [r7, #7]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d013      	beq.n	800e830 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e808:	4b0d      	ldr	r3, [pc, #52]	; (800e840 <netif_get_by_index+0x48>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	60fb      	str	r3, [r7, #12]
 800e80e:	e00c      	b.n	800e82a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e816:	3301      	adds	r3, #1
 800e818:	b2db      	uxtb	r3, r3
 800e81a:	79fa      	ldrb	r2, [r7, #7]
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d101      	bne.n	800e824 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	e006      	b.n	800e832 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	60fb      	str	r3, [r7, #12]
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d1ef      	bne.n	800e810 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e830:	2300      	movs	r3, #0
}
 800e832:	4618      	mov	r0, r3
 800e834:	3714      	adds	r7, #20
 800e836:	46bd      	mov	sp, r7
 800e838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83c:	4770      	bx	lr
 800e83e:	bf00      	nop
 800e840:	2000fce4 	.word	0x2000fce4

0800e844 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b082      	sub	sp, #8
 800e848:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e84a:	f00a f993 	bl	8018b74 <sys_arch_protect>
 800e84e:	6038      	str	r0, [r7, #0]
 800e850:	4b0d      	ldr	r3, [pc, #52]	; (800e888 <pbuf_free_ooseq+0x44>)
 800e852:	2200      	movs	r2, #0
 800e854:	701a      	strb	r2, [r3, #0]
 800e856:	6838      	ldr	r0, [r7, #0]
 800e858:	f00a f99a 	bl	8018b90 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e85c:	4b0b      	ldr	r3, [pc, #44]	; (800e88c <pbuf_free_ooseq+0x48>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	607b      	str	r3, [r7, #4]
 800e862:	e00a      	b.n	800e87a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d003      	beq.n	800e874 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f002 fbf7 	bl	8011060 <tcp_free_ooseq>
      return;
 800e872:	e005      	b.n	800e880 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	68db      	ldr	r3, [r3, #12]
 800e878:	607b      	str	r3, [r7, #4]
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d1f1      	bne.n	800e864 <pbuf_free_ooseq+0x20>
    }
  }
}
 800e880:	3708      	adds	r7, #8
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}
 800e886:	bf00      	nop
 800e888:	2000fcec 	.word	0x2000fcec
 800e88c:	2000fcf4 	.word	0x2000fcf4

0800e890 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b082      	sub	sp, #8
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e898:	f7ff ffd4 	bl	800e844 <pbuf_free_ooseq>
}
 800e89c:	bf00      	nop
 800e89e:	3708      	adds	r7, #8
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}

0800e8a4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b082      	sub	sp, #8
 800e8a8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e8aa:	f00a f963 	bl	8018b74 <sys_arch_protect>
 800e8ae:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e8b0:	4b0f      	ldr	r3, [pc, #60]	; (800e8f0 <pbuf_pool_is_empty+0x4c>)
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e8b6:	4b0e      	ldr	r3, [pc, #56]	; (800e8f0 <pbuf_pool_is_empty+0x4c>)
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f00a f967 	bl	8018b90 <sys_arch_unprotect>

  if (!queued) {
 800e8c2:	78fb      	ldrb	r3, [r7, #3]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d10f      	bne.n	800e8e8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e8c8:	2100      	movs	r1, #0
 800e8ca:	480a      	ldr	r0, [pc, #40]	; (800e8f4 <pbuf_pool_is_empty+0x50>)
 800e8cc:	f7fe ff4e 	bl	800d76c <tcpip_try_callback>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d008      	beq.n	800e8e8 <pbuf_pool_is_empty+0x44>
 800e8d6:	f00a f94d 	bl	8018b74 <sys_arch_protect>
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	4b04      	ldr	r3, [pc, #16]	; (800e8f0 <pbuf_pool_is_empty+0x4c>)
 800e8de:	2200      	movs	r2, #0
 800e8e0:	701a      	strb	r2, [r3, #0]
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f00a f954 	bl	8018b90 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e8e8:	bf00      	nop
 800e8ea:	3708      	adds	r7, #8
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}
 800e8f0:	2000fcec 	.word	0x2000fcec
 800e8f4:	0800e891 	.word	0x0800e891

0800e8f8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b085      	sub	sp, #20
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	60f8      	str	r0, [r7, #12]
 800e900:	60b9      	str	r1, [r7, #8]
 800e902:	4611      	mov	r1, r2
 800e904:	461a      	mov	r2, r3
 800e906:	460b      	mov	r3, r1
 800e908:	80fb      	strh	r3, [r7, #6]
 800e90a:	4613      	mov	r3, r2
 800e90c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	2200      	movs	r2, #0
 800e912:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	68ba      	ldr	r2, [r7, #8]
 800e918:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	88fa      	ldrh	r2, [r7, #6]
 800e91e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	88ba      	ldrh	r2, [r7, #4]
 800e924:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e926:	8b3b      	ldrh	r3, [r7, #24]
 800e928:	b2da      	uxtb	r2, r3
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	7f3a      	ldrb	r2, [r7, #28]
 800e932:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2201      	movs	r2, #1
 800e938:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	2200      	movs	r2, #0
 800e93e:	73da      	strb	r2, [r3, #15]
}
 800e940:	bf00      	nop
 800e942:	3714      	adds	r7, #20
 800e944:	46bd      	mov	sp, r7
 800e946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94a:	4770      	bx	lr

0800e94c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b08c      	sub	sp, #48	; 0x30
 800e950:	af02      	add	r7, sp, #8
 800e952:	4603      	mov	r3, r0
 800e954:	71fb      	strb	r3, [r7, #7]
 800e956:	460b      	mov	r3, r1
 800e958:	80bb      	strh	r3, [r7, #4]
 800e95a:	4613      	mov	r3, r2
 800e95c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e95e:	79fb      	ldrb	r3, [r7, #7]
 800e960:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e962:	887b      	ldrh	r3, [r7, #2]
 800e964:	2b41      	cmp	r3, #65	; 0x41
 800e966:	d00b      	beq.n	800e980 <pbuf_alloc+0x34>
 800e968:	2b41      	cmp	r3, #65	; 0x41
 800e96a:	dc02      	bgt.n	800e972 <pbuf_alloc+0x26>
 800e96c:	2b01      	cmp	r3, #1
 800e96e:	d007      	beq.n	800e980 <pbuf_alloc+0x34>
 800e970:	e0c2      	b.n	800eaf8 <pbuf_alloc+0x1ac>
 800e972:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e976:	d00b      	beq.n	800e990 <pbuf_alloc+0x44>
 800e978:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e97c:	d070      	beq.n	800ea60 <pbuf_alloc+0x114>
 800e97e:	e0bb      	b.n	800eaf8 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e980:	887a      	ldrh	r2, [r7, #2]
 800e982:	88bb      	ldrh	r3, [r7, #4]
 800e984:	4619      	mov	r1, r3
 800e986:	2000      	movs	r0, #0
 800e988:	f000 f8d2 	bl	800eb30 <pbuf_alloc_reference>
 800e98c:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e98e:	e0bd      	b.n	800eb0c <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e990:	2300      	movs	r3, #0
 800e992:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e994:	2300      	movs	r3, #0
 800e996:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e998:	88bb      	ldrh	r3, [r7, #4]
 800e99a:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e99c:	200c      	movs	r0, #12
 800e99e:	f7ff fc3b 	bl	800e218 <memp_malloc>
 800e9a2:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d109      	bne.n	800e9be <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800e9aa:	f7ff ff7b 	bl	800e8a4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d002      	beq.n	800e9ba <pbuf_alloc+0x6e>
            pbuf_free(p);
 800e9b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e9b6:	f000 faa9 	bl	800ef0c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	e0a7      	b.n	800eb0e <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e9be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e9c0:	3303      	adds	r3, #3
 800e9c2:	b29b      	uxth	r3, r3
 800e9c4:	f023 0303 	bic.w	r3, r3, #3
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e9ce:	b29b      	uxth	r3, r3
 800e9d0:	8b7a      	ldrh	r2, [r7, #26]
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	bf28      	it	cs
 800e9d6:	4613      	movcs	r3, r2
 800e9d8:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e9da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e9dc:	3310      	adds	r3, #16
 800e9de:	693a      	ldr	r2, [r7, #16]
 800e9e0:	4413      	add	r3, r2
 800e9e2:	3303      	adds	r3, #3
 800e9e4:	f023 0303 	bic.w	r3, r3, #3
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	89f9      	ldrh	r1, [r7, #14]
 800e9ec:	8b7a      	ldrh	r2, [r7, #26]
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	9301      	str	r3, [sp, #4]
 800e9f2:	887b      	ldrh	r3, [r7, #2]
 800e9f4:	9300      	str	r3, [sp, #0]
 800e9f6:	460b      	mov	r3, r1
 800e9f8:	4601      	mov	r1, r0
 800e9fa:	6938      	ldr	r0, [r7, #16]
 800e9fc:	f7ff ff7c 	bl	800e8f8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	f003 0303 	and.w	r3, r3, #3
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d006      	beq.n	800ea1a <pbuf_alloc+0xce>
 800ea0c:	4b42      	ldr	r3, [pc, #264]	; (800eb18 <pbuf_alloc+0x1cc>)
 800ea0e:	f240 1201 	movw	r2, #257	; 0x101
 800ea12:	4942      	ldr	r1, [pc, #264]	; (800eb1c <pbuf_alloc+0x1d0>)
 800ea14:	4842      	ldr	r0, [pc, #264]	; (800eb20 <pbuf_alloc+0x1d4>)
 800ea16:	f00a ff53 	bl	80198c0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ea1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea1c:	3303      	adds	r3, #3
 800ea1e:	f023 0303 	bic.w	r3, r3, #3
 800ea22:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800ea26:	d106      	bne.n	800ea36 <pbuf_alloc+0xea>
 800ea28:	4b3b      	ldr	r3, [pc, #236]	; (800eb18 <pbuf_alloc+0x1cc>)
 800ea2a:	f240 1203 	movw	r2, #259	; 0x103
 800ea2e:	493d      	ldr	r1, [pc, #244]	; (800eb24 <pbuf_alloc+0x1d8>)
 800ea30:	483b      	ldr	r0, [pc, #236]	; (800eb20 <pbuf_alloc+0x1d4>)
 800ea32:	f00a ff45 	bl	80198c0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ea36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d102      	bne.n	800ea42 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	627b      	str	r3, [r7, #36]	; 0x24
 800ea40:	e002      	b.n	800ea48 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ea42:	69fb      	ldr	r3, [r7, #28]
 800ea44:	693a      	ldr	r2, [r7, #16]
 800ea46:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ea48:	693b      	ldr	r3, [r7, #16]
 800ea4a:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ea4c:	8b7a      	ldrh	r2, [r7, #26]
 800ea4e:	89fb      	ldrh	r3, [r7, #14]
 800ea50:	1ad3      	subs	r3, r2, r3
 800ea52:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ea54:	2300      	movs	r3, #0
 800ea56:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800ea58:	8b7b      	ldrh	r3, [r7, #26]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d19e      	bne.n	800e99c <pbuf_alloc+0x50>
      break;
 800ea5e:	e055      	b.n	800eb0c <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ea60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea62:	3303      	adds	r3, #3
 800ea64:	b29b      	uxth	r3, r3
 800ea66:	f023 0303 	bic.w	r3, r3, #3
 800ea6a:	b29a      	uxth	r2, r3
 800ea6c:	88bb      	ldrh	r3, [r7, #4]
 800ea6e:	3303      	adds	r3, #3
 800ea70:	b29b      	uxth	r3, r3
 800ea72:	f023 0303 	bic.w	r3, r3, #3
 800ea76:	b29b      	uxth	r3, r3
 800ea78:	4413      	add	r3, r2
 800ea7a:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ea7c:	8b3b      	ldrh	r3, [r7, #24]
 800ea7e:	3310      	adds	r3, #16
 800ea80:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ea82:	8b3a      	ldrh	r2, [r7, #24]
 800ea84:	88bb      	ldrh	r3, [r7, #4]
 800ea86:	3303      	adds	r3, #3
 800ea88:	f023 0303 	bic.w	r3, r3, #3
 800ea8c:	429a      	cmp	r2, r3
 800ea8e:	d306      	bcc.n	800ea9e <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ea90:	8afa      	ldrh	r2, [r7, #22]
 800ea92:	88bb      	ldrh	r3, [r7, #4]
 800ea94:	3303      	adds	r3, #3
 800ea96:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d201      	bcs.n	800eaa2 <pbuf_alloc+0x156>
        return NULL;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	e035      	b.n	800eb0e <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800eaa2:	8afb      	ldrh	r3, [r7, #22]
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7ff fa35 	bl	800df14 <mem_malloc>
 800eaaa:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800eaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d101      	bne.n	800eab6 <pbuf_alloc+0x16a>
        return NULL;
 800eab2:	2300      	movs	r3, #0
 800eab4:	e02b      	b.n	800eb0e <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800eab6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eab8:	3310      	adds	r3, #16
 800eaba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eabc:	4413      	add	r3, r2
 800eabe:	3303      	adds	r3, #3
 800eac0:	f023 0303 	bic.w	r3, r3, #3
 800eac4:	4618      	mov	r0, r3
 800eac6:	88b9      	ldrh	r1, [r7, #4]
 800eac8:	88ba      	ldrh	r2, [r7, #4]
 800eaca:	2300      	movs	r3, #0
 800eacc:	9301      	str	r3, [sp, #4]
 800eace:	887b      	ldrh	r3, [r7, #2]
 800ead0:	9300      	str	r3, [sp, #0]
 800ead2:	460b      	mov	r3, r1
 800ead4:	4601      	mov	r1, r0
 800ead6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ead8:	f7ff ff0e 	bl	800e8f8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800eadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	f003 0303 	and.w	r3, r3, #3
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d010      	beq.n	800eb0a <pbuf_alloc+0x1be>
 800eae8:	4b0b      	ldr	r3, [pc, #44]	; (800eb18 <pbuf_alloc+0x1cc>)
 800eaea:	f240 1223 	movw	r2, #291	; 0x123
 800eaee:	490e      	ldr	r1, [pc, #56]	; (800eb28 <pbuf_alloc+0x1dc>)
 800eaf0:	480b      	ldr	r0, [pc, #44]	; (800eb20 <pbuf_alloc+0x1d4>)
 800eaf2:	f00a fee5 	bl	80198c0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800eaf6:	e008      	b.n	800eb0a <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800eaf8:	4b07      	ldr	r3, [pc, #28]	; (800eb18 <pbuf_alloc+0x1cc>)
 800eafa:	f240 1227 	movw	r2, #295	; 0x127
 800eafe:	490b      	ldr	r1, [pc, #44]	; (800eb2c <pbuf_alloc+0x1e0>)
 800eb00:	4807      	ldr	r0, [pc, #28]	; (800eb20 <pbuf_alloc+0x1d4>)
 800eb02:	f00a fedd 	bl	80198c0 <iprintf>
      return NULL;
 800eb06:	2300      	movs	r3, #0
 800eb08:	e001      	b.n	800eb0e <pbuf_alloc+0x1c2>
      break;
 800eb0a:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800eb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3728      	adds	r7, #40	; 0x28
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}
 800eb16:	bf00      	nop
 800eb18:	0801e5f8 	.word	0x0801e5f8
 800eb1c:	0801e628 	.word	0x0801e628
 800eb20:	0801e658 	.word	0x0801e658
 800eb24:	0801e680 	.word	0x0801e680
 800eb28:	0801e6b4 	.word	0x0801e6b4
 800eb2c:	0801e6e0 	.word	0x0801e6e0

0800eb30 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b086      	sub	sp, #24
 800eb34:	af02      	add	r7, sp, #8
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	460b      	mov	r3, r1
 800eb3a:	807b      	strh	r3, [r7, #2]
 800eb3c:	4613      	mov	r3, r2
 800eb3e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800eb40:	883b      	ldrh	r3, [r7, #0]
 800eb42:	2b41      	cmp	r3, #65	; 0x41
 800eb44:	d009      	beq.n	800eb5a <pbuf_alloc_reference+0x2a>
 800eb46:	883b      	ldrh	r3, [r7, #0]
 800eb48:	2b01      	cmp	r3, #1
 800eb4a:	d006      	beq.n	800eb5a <pbuf_alloc_reference+0x2a>
 800eb4c:	4b0f      	ldr	r3, [pc, #60]	; (800eb8c <pbuf_alloc_reference+0x5c>)
 800eb4e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800eb52:	490f      	ldr	r1, [pc, #60]	; (800eb90 <pbuf_alloc_reference+0x60>)
 800eb54:	480f      	ldr	r0, [pc, #60]	; (800eb94 <pbuf_alloc_reference+0x64>)
 800eb56:	f00a feb3 	bl	80198c0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800eb5a:	200b      	movs	r0, #11
 800eb5c:	f7ff fb5c 	bl	800e218 <memp_malloc>
 800eb60:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d101      	bne.n	800eb6c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	e00b      	b.n	800eb84 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800eb6c:	8879      	ldrh	r1, [r7, #2]
 800eb6e:	887a      	ldrh	r2, [r7, #2]
 800eb70:	2300      	movs	r3, #0
 800eb72:	9301      	str	r3, [sp, #4]
 800eb74:	883b      	ldrh	r3, [r7, #0]
 800eb76:	9300      	str	r3, [sp, #0]
 800eb78:	460b      	mov	r3, r1
 800eb7a:	6879      	ldr	r1, [r7, #4]
 800eb7c:	68f8      	ldr	r0, [r7, #12]
 800eb7e:	f7ff febb 	bl	800e8f8 <pbuf_init_alloced_pbuf>
  return p;
 800eb82:	68fb      	ldr	r3, [r7, #12]
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3710      	adds	r7, #16
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	0801e5f8 	.word	0x0801e5f8
 800eb90:	0801e6fc 	.word	0x0801e6fc
 800eb94:	0801e658 	.word	0x0801e658

0800eb98 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b088      	sub	sp, #32
 800eb9c:	af02      	add	r7, sp, #8
 800eb9e:	607b      	str	r3, [r7, #4]
 800eba0:	4603      	mov	r3, r0
 800eba2:	73fb      	strb	r3, [r7, #15]
 800eba4:	460b      	mov	r3, r1
 800eba6:	81bb      	strh	r3, [r7, #12]
 800eba8:	4613      	mov	r3, r2
 800ebaa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ebac:	7bfb      	ldrb	r3, [r7, #15]
 800ebae:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ebb0:	8a7b      	ldrh	r3, [r7, #18]
 800ebb2:	3303      	adds	r3, #3
 800ebb4:	f023 0203 	bic.w	r2, r3, #3
 800ebb8:	89bb      	ldrh	r3, [r7, #12]
 800ebba:	441a      	add	r2, r3
 800ebbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d901      	bls.n	800ebc6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	e018      	b.n	800ebf8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ebc6:	6a3b      	ldr	r3, [r7, #32]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d007      	beq.n	800ebdc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ebcc:	8a7b      	ldrh	r3, [r7, #18]
 800ebce:	3303      	adds	r3, #3
 800ebd0:	f023 0303 	bic.w	r3, r3, #3
 800ebd4:	6a3a      	ldr	r2, [r7, #32]
 800ebd6:	4413      	add	r3, r2
 800ebd8:	617b      	str	r3, [r7, #20]
 800ebda:	e001      	b.n	800ebe0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	89b9      	ldrh	r1, [r7, #12]
 800ebe4:	89ba      	ldrh	r2, [r7, #12]
 800ebe6:	2302      	movs	r3, #2
 800ebe8:	9301      	str	r3, [sp, #4]
 800ebea:	897b      	ldrh	r3, [r7, #10]
 800ebec:	9300      	str	r3, [sp, #0]
 800ebee:	460b      	mov	r3, r1
 800ebf0:	6979      	ldr	r1, [r7, #20]
 800ebf2:	f7ff fe81 	bl	800e8f8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ebf6:	687b      	ldr	r3, [r7, #4]
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	3718      	adds	r7, #24
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}

0800ec00 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b084      	sub	sp, #16
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
 800ec08:	460b      	mov	r3, r1
 800ec0a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d106      	bne.n	800ec20 <pbuf_realloc+0x20>
 800ec12:	4b3a      	ldr	r3, [pc, #232]	; (800ecfc <pbuf_realloc+0xfc>)
 800ec14:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ec18:	4939      	ldr	r1, [pc, #228]	; (800ed00 <pbuf_realloc+0x100>)
 800ec1a:	483a      	ldr	r0, [pc, #232]	; (800ed04 <pbuf_realloc+0x104>)
 800ec1c:	f00a fe50 	bl	80198c0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	891b      	ldrh	r3, [r3, #8]
 800ec24:	887a      	ldrh	r2, [r7, #2]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d264      	bcs.n	800ecf4 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	891a      	ldrh	r2, [r3, #8]
 800ec2e:	887b      	ldrh	r3, [r7, #2]
 800ec30:	1ad3      	subs	r3, r2, r3
 800ec32:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ec34:	887b      	ldrh	r3, [r7, #2]
 800ec36:	817b      	strh	r3, [r7, #10]
  q = p;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ec3c:	e018      	b.n	800ec70 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	895b      	ldrh	r3, [r3, #10]
 800ec42:	897a      	ldrh	r2, [r7, #10]
 800ec44:	1ad3      	subs	r3, r2, r3
 800ec46:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	891a      	ldrh	r2, [r3, #8]
 800ec4c:	893b      	ldrh	r3, [r7, #8]
 800ec4e:	1ad3      	subs	r3, r2, r3
 800ec50:	b29a      	uxth	r2, r3
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d106      	bne.n	800ec70 <pbuf_realloc+0x70>
 800ec62:	4b26      	ldr	r3, [pc, #152]	; (800ecfc <pbuf_realloc+0xfc>)
 800ec64:	f240 12af 	movw	r2, #431	; 0x1af
 800ec68:	4927      	ldr	r1, [pc, #156]	; (800ed08 <pbuf_realloc+0x108>)
 800ec6a:	4826      	ldr	r0, [pc, #152]	; (800ed04 <pbuf_realloc+0x104>)
 800ec6c:	f00a fe28 	bl	80198c0 <iprintf>
  while (rem_len > q->len) {
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	895b      	ldrh	r3, [r3, #10]
 800ec74:	897a      	ldrh	r2, [r7, #10]
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d8e1      	bhi.n	800ec3e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	7b1b      	ldrb	r3, [r3, #12]
 800ec7e:	f003 030f 	and.w	r3, r3, #15
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d122      	bne.n	800eccc <pbuf_realloc+0xcc>
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	895b      	ldrh	r3, [r3, #10]
 800ec8a:	897a      	ldrh	r2, [r7, #10]
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	d01d      	beq.n	800eccc <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	7b5b      	ldrb	r3, [r3, #13]
 800ec94:	f003 0302 	and.w	r3, r3, #2
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d117      	bne.n	800eccc <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	685b      	ldr	r3, [r3, #4]
 800eca0:	461a      	mov	r2, r3
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	1ad3      	subs	r3, r2, r3
 800eca6:	b29a      	uxth	r2, r3
 800eca8:	897b      	ldrh	r3, [r7, #10]
 800ecaa:	4413      	add	r3, r2
 800ecac:	b29b      	uxth	r3, r3
 800ecae:	4619      	mov	r1, r3
 800ecb0:	68f8      	ldr	r0, [r7, #12]
 800ecb2:	f7ff f825 	bl	800dd00 <mem_trim>
 800ecb6:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d106      	bne.n	800eccc <pbuf_realloc+0xcc>
 800ecbe:	4b0f      	ldr	r3, [pc, #60]	; (800ecfc <pbuf_realloc+0xfc>)
 800ecc0:	f240 12bd 	movw	r2, #445	; 0x1bd
 800ecc4:	4911      	ldr	r1, [pc, #68]	; (800ed0c <pbuf_realloc+0x10c>)
 800ecc6:	480f      	ldr	r0, [pc, #60]	; (800ed04 <pbuf_realloc+0x104>)
 800ecc8:	f00a fdfa 	bl	80198c0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	897a      	ldrh	r2, [r7, #10]
 800ecd0:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	895a      	ldrh	r2, [r3, #10]
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d004      	beq.n	800ecec <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	4618      	mov	r0, r3
 800ece8:	f000 f910 	bl	800ef0c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2200      	movs	r2, #0
 800ecf0:	601a      	str	r2, [r3, #0]
 800ecf2:	e000      	b.n	800ecf6 <pbuf_realloc+0xf6>
    return;
 800ecf4:	bf00      	nop

}
 800ecf6:	3710      	adds	r7, #16
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}
 800ecfc:	0801e5f8 	.word	0x0801e5f8
 800ed00:	0801e710 	.word	0x0801e710
 800ed04:	0801e658 	.word	0x0801e658
 800ed08:	0801e728 	.word	0x0801e728
 800ed0c:	0801e740 	.word	0x0801e740

0800ed10 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b086      	sub	sp, #24
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	60f8      	str	r0, [r7, #12]
 800ed18:	60b9      	str	r1, [r7, #8]
 800ed1a:	4613      	mov	r3, r2
 800ed1c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d106      	bne.n	800ed32 <pbuf_add_header_impl+0x22>
 800ed24:	4b2b      	ldr	r3, [pc, #172]	; (800edd4 <pbuf_add_header_impl+0xc4>)
 800ed26:	f240 12df 	movw	r2, #479	; 0x1df
 800ed2a:	492b      	ldr	r1, [pc, #172]	; (800edd8 <pbuf_add_header_impl+0xc8>)
 800ed2c:	482b      	ldr	r0, [pc, #172]	; (800eddc <pbuf_add_header_impl+0xcc>)
 800ed2e:	f00a fdc7 	bl	80198c0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d003      	beq.n	800ed40 <pbuf_add_header_impl+0x30>
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed3e:	d301      	bcc.n	800ed44 <pbuf_add_header_impl+0x34>
    return 1;
 800ed40:	2301      	movs	r3, #1
 800ed42:	e043      	b.n	800edcc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d101      	bne.n	800ed4e <pbuf_add_header_impl+0x3e>
    return 0;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	e03e      	b.n	800edcc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	891a      	ldrh	r2, [r3, #8]
 800ed56:	8a7b      	ldrh	r3, [r7, #18]
 800ed58:	4413      	add	r3, r2
 800ed5a:	b29b      	uxth	r3, r3
 800ed5c:	8a7a      	ldrh	r2, [r7, #18]
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d901      	bls.n	800ed66 <pbuf_add_header_impl+0x56>
    return 1;
 800ed62:	2301      	movs	r3, #1
 800ed64:	e032      	b.n	800edcc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	7b1b      	ldrb	r3, [r3, #12]
 800ed6a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ed6c:	8a3b      	ldrh	r3, [r7, #16]
 800ed6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d00c      	beq.n	800ed90 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	685a      	ldr	r2, [r3, #4]
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	425b      	negs	r3, r3
 800ed7e:	4413      	add	r3, r2
 800ed80:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	3310      	adds	r3, #16
 800ed86:	697a      	ldr	r2, [r7, #20]
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	d20d      	bcs.n	800eda8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	e01d      	b.n	800edcc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ed90:	79fb      	ldrb	r3, [r7, #7]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d006      	beq.n	800eda4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	685a      	ldr	r2, [r3, #4]
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	425b      	negs	r3, r3
 800ed9e:	4413      	add	r3, r2
 800eda0:	617b      	str	r3, [r7, #20]
 800eda2:	e001      	b.n	800eda8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800eda4:	2301      	movs	r3, #1
 800eda6:	e011      	b.n	800edcc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	697a      	ldr	r2, [r7, #20]
 800edac:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	895a      	ldrh	r2, [r3, #10]
 800edb2:	8a7b      	ldrh	r3, [r7, #18]
 800edb4:	4413      	add	r3, r2
 800edb6:	b29a      	uxth	r2, r3
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	891a      	ldrh	r2, [r3, #8]
 800edc0:	8a7b      	ldrh	r3, [r7, #18]
 800edc2:	4413      	add	r3, r2
 800edc4:	b29a      	uxth	r2, r3
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	811a      	strh	r2, [r3, #8]


  return 0;
 800edca:	2300      	movs	r3, #0
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3718      	adds	r7, #24
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}
 800edd4:	0801e5f8 	.word	0x0801e5f8
 800edd8:	0801e75c 	.word	0x0801e75c
 800eddc:	0801e658 	.word	0x0801e658

0800ede0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b082      	sub	sp, #8
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
 800ede8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800edea:	2200      	movs	r2, #0
 800edec:	6839      	ldr	r1, [r7, #0]
 800edee:	6878      	ldr	r0, [r7, #4]
 800edf0:	f7ff ff8e 	bl	800ed10 <pbuf_add_header_impl>
 800edf4:	4603      	mov	r3, r0
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3708      	adds	r7, #8
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
	...

0800ee00 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b084      	sub	sp, #16
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d106      	bne.n	800ee1e <pbuf_remove_header+0x1e>
 800ee10:	4b20      	ldr	r3, [pc, #128]	; (800ee94 <pbuf_remove_header+0x94>)
 800ee12:	f240 224b 	movw	r2, #587	; 0x24b
 800ee16:	4920      	ldr	r1, [pc, #128]	; (800ee98 <pbuf_remove_header+0x98>)
 800ee18:	4820      	ldr	r0, [pc, #128]	; (800ee9c <pbuf_remove_header+0x9c>)
 800ee1a:	f00a fd51 	bl	80198c0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d003      	beq.n	800ee2c <pbuf_remove_header+0x2c>
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee2a:	d301      	bcc.n	800ee30 <pbuf_remove_header+0x30>
    return 1;
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	e02c      	b.n	800ee8a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d101      	bne.n	800ee3a <pbuf_remove_header+0x3a>
    return 0;
 800ee36:	2300      	movs	r3, #0
 800ee38:	e027      	b.n	800ee8a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	895b      	ldrh	r3, [r3, #10]
 800ee42:	89fa      	ldrh	r2, [r7, #14]
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d908      	bls.n	800ee5a <pbuf_remove_header+0x5a>
 800ee48:	4b12      	ldr	r3, [pc, #72]	; (800ee94 <pbuf_remove_header+0x94>)
 800ee4a:	f240 2255 	movw	r2, #597	; 0x255
 800ee4e:	4914      	ldr	r1, [pc, #80]	; (800eea0 <pbuf_remove_header+0xa0>)
 800ee50:	4812      	ldr	r0, [pc, #72]	; (800ee9c <pbuf_remove_header+0x9c>)
 800ee52:	f00a fd35 	bl	80198c0 <iprintf>
 800ee56:	2301      	movs	r3, #1
 800ee58:	e017      	b.n	800ee8a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	685b      	ldr	r3, [r3, #4]
 800ee5e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	685a      	ldr	r2, [r3, #4]
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	441a      	add	r2, r3
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	895a      	ldrh	r2, [r3, #10]
 800ee70:	89fb      	ldrh	r3, [r7, #14]
 800ee72:	1ad3      	subs	r3, r2, r3
 800ee74:	b29a      	uxth	r2, r3
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	891a      	ldrh	r2, [r3, #8]
 800ee7e:	89fb      	ldrh	r3, [r7, #14]
 800ee80:	1ad3      	subs	r3, r2, r3
 800ee82:	b29a      	uxth	r2, r3
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ee88:	2300      	movs	r3, #0
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3710      	adds	r7, #16
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}
 800ee92:	bf00      	nop
 800ee94:	0801e5f8 	.word	0x0801e5f8
 800ee98:	0801e75c 	.word	0x0801e75c
 800ee9c:	0801e658 	.word	0x0801e658
 800eea0:	0801e768 	.word	0x0801e768

0800eea4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b082      	sub	sp, #8
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	460b      	mov	r3, r1
 800eeae:	807b      	strh	r3, [r7, #2]
 800eeb0:	4613      	mov	r3, r2
 800eeb2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800eeb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	da08      	bge.n	800eece <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800eebc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eec0:	425b      	negs	r3, r3
 800eec2:	4619      	mov	r1, r3
 800eec4:	6878      	ldr	r0, [r7, #4]
 800eec6:	f7ff ff9b 	bl	800ee00 <pbuf_remove_header>
 800eeca:	4603      	mov	r3, r0
 800eecc:	e007      	b.n	800eede <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800eece:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eed2:	787a      	ldrb	r2, [r7, #1]
 800eed4:	4619      	mov	r1, r3
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	f7ff ff1a 	bl	800ed10 <pbuf_add_header_impl>
 800eedc:	4603      	mov	r3, r0
  }
}
 800eede:	4618      	mov	r0, r3
 800eee0:	3708      	adds	r7, #8
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}

0800eee6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800eee6:	b580      	push	{r7, lr}
 800eee8:	b082      	sub	sp, #8
 800eeea:	af00      	add	r7, sp, #0
 800eeec:	6078      	str	r0, [r7, #4]
 800eeee:	460b      	mov	r3, r1
 800eef0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800eef2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eef6:	2201      	movs	r2, #1
 800eef8:	4619      	mov	r1, r3
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f7ff ffd2 	bl	800eea4 <pbuf_header_impl>
 800ef00:	4603      	mov	r3, r0
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3708      	adds	r7, #8
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}
	...

0800ef0c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b088      	sub	sp, #32
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d10b      	bne.n	800ef32 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d106      	bne.n	800ef2e <pbuf_free+0x22>
 800ef20:	4b3b      	ldr	r3, [pc, #236]	; (800f010 <pbuf_free+0x104>)
 800ef22:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ef26:	493b      	ldr	r1, [pc, #236]	; (800f014 <pbuf_free+0x108>)
 800ef28:	483b      	ldr	r0, [pc, #236]	; (800f018 <pbuf_free+0x10c>)
 800ef2a:	f00a fcc9 	bl	80198c0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	e069      	b.n	800f006 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ef32:	2300      	movs	r3, #0
 800ef34:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ef36:	e062      	b.n	800effe <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ef38:	f009 fe1c 	bl	8018b74 <sys_arch_protect>
 800ef3c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	7b9b      	ldrb	r3, [r3, #14]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d106      	bne.n	800ef54 <pbuf_free+0x48>
 800ef46:	4b32      	ldr	r3, [pc, #200]	; (800f010 <pbuf_free+0x104>)
 800ef48:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ef4c:	4933      	ldr	r1, [pc, #204]	; (800f01c <pbuf_free+0x110>)
 800ef4e:	4832      	ldr	r0, [pc, #200]	; (800f018 <pbuf_free+0x10c>)
 800ef50:	f00a fcb6 	bl	80198c0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	7b9b      	ldrb	r3, [r3, #14]
 800ef58:	3b01      	subs	r3, #1
 800ef5a:	b2da      	uxtb	r2, r3
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	739a      	strb	r2, [r3, #14]
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	7b9b      	ldrb	r3, [r3, #14]
 800ef64:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ef66:	69b8      	ldr	r0, [r7, #24]
 800ef68:	f009 fe12 	bl	8018b90 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ef6c:	7dfb      	ldrb	r3, [r7, #23]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d143      	bne.n	800effa <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	7b1b      	ldrb	r3, [r3, #12]
 800ef7c:	f003 030f 	and.w	r3, r3, #15
 800ef80:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	7b5b      	ldrb	r3, [r3, #13]
 800ef86:	f003 0302 	and.w	r3, r3, #2
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d011      	beq.n	800efb2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	691b      	ldr	r3, [r3, #16]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d106      	bne.n	800efa8 <pbuf_free+0x9c>
 800ef9a:	4b1d      	ldr	r3, [pc, #116]	; (800f010 <pbuf_free+0x104>)
 800ef9c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800efa0:	491f      	ldr	r1, [pc, #124]	; (800f020 <pbuf_free+0x114>)
 800efa2:	481d      	ldr	r0, [pc, #116]	; (800f018 <pbuf_free+0x10c>)
 800efa4:	f00a fc8c 	bl	80198c0 <iprintf>
        pc->custom_free_function(p);
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	691b      	ldr	r3, [r3, #16]
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	4798      	blx	r3
 800efb0:	e01d      	b.n	800efee <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800efb2:	7bfb      	ldrb	r3, [r7, #15]
 800efb4:	2b02      	cmp	r3, #2
 800efb6:	d104      	bne.n	800efc2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800efb8:	6879      	ldr	r1, [r7, #4]
 800efba:	200c      	movs	r0, #12
 800efbc:	f7ff f97e 	bl	800e2bc <memp_free>
 800efc0:	e015      	b.n	800efee <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800efc2:	7bfb      	ldrb	r3, [r7, #15]
 800efc4:	2b01      	cmp	r3, #1
 800efc6:	d104      	bne.n	800efd2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800efc8:	6879      	ldr	r1, [r7, #4]
 800efca:	200b      	movs	r0, #11
 800efcc:	f7ff f976 	bl	800e2bc <memp_free>
 800efd0:	e00d      	b.n	800efee <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800efd2:	7bfb      	ldrb	r3, [r7, #15]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d103      	bne.n	800efe0 <pbuf_free+0xd4>
          mem_free(p);
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	f7fe fe01 	bl	800dbe0 <mem_free>
 800efde:	e006      	b.n	800efee <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800efe0:	4b0b      	ldr	r3, [pc, #44]	; (800f010 <pbuf_free+0x104>)
 800efe2:	f240 320f 	movw	r2, #783	; 0x30f
 800efe6:	490f      	ldr	r1, [pc, #60]	; (800f024 <pbuf_free+0x118>)
 800efe8:	480b      	ldr	r0, [pc, #44]	; (800f018 <pbuf_free+0x10c>)
 800efea:	f00a fc69 	bl	80198c0 <iprintf>
        }
      }
      count++;
 800efee:	7ffb      	ldrb	r3, [r7, #31]
 800eff0:	3301      	adds	r3, #1
 800eff2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800eff4:	693b      	ldr	r3, [r7, #16]
 800eff6:	607b      	str	r3, [r7, #4]
 800eff8:	e001      	b.n	800effe <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800effa:	2300      	movs	r3, #0
 800effc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d199      	bne.n	800ef38 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f004:	7ffb      	ldrb	r3, [r7, #31]
}
 800f006:	4618      	mov	r0, r3
 800f008:	3720      	adds	r7, #32
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}
 800f00e:	bf00      	nop
 800f010:	0801e5f8 	.word	0x0801e5f8
 800f014:	0801e75c 	.word	0x0801e75c
 800f018:	0801e658 	.word	0x0801e658
 800f01c:	0801e788 	.word	0x0801e788
 800f020:	0801e7a0 	.word	0x0801e7a0
 800f024:	0801e7c4 	.word	0x0801e7c4

0800f028 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f028:	b480      	push	{r7}
 800f02a:	b085      	sub	sp, #20
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f030:	2300      	movs	r3, #0
 800f032:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f034:	e005      	b.n	800f042 <pbuf_clen+0x1a>
    ++len;
 800f036:	89fb      	ldrh	r3, [r7, #14]
 800f038:	3301      	adds	r3, #1
 800f03a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d1f6      	bne.n	800f036 <pbuf_clen+0xe>
  }
  return len;
 800f048:	89fb      	ldrh	r3, [r7, #14]
}
 800f04a:	4618      	mov	r0, r3
 800f04c:	3714      	adds	r7, #20
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr
	...

0800f058 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b084      	sub	sp, #16
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d016      	beq.n	800f094 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f066:	f009 fd85 	bl	8018b74 <sys_arch_protect>
 800f06a:	60f8      	str	r0, [r7, #12]
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	7b9b      	ldrb	r3, [r3, #14]
 800f070:	3301      	adds	r3, #1
 800f072:	b2da      	uxtb	r2, r3
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	739a      	strb	r2, [r3, #14]
 800f078:	68f8      	ldr	r0, [r7, #12]
 800f07a:	f009 fd89 	bl	8018b90 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	7b9b      	ldrb	r3, [r3, #14]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d106      	bne.n	800f094 <pbuf_ref+0x3c>
 800f086:	4b05      	ldr	r3, [pc, #20]	; (800f09c <pbuf_ref+0x44>)
 800f088:	f240 3242 	movw	r2, #834	; 0x342
 800f08c:	4904      	ldr	r1, [pc, #16]	; (800f0a0 <pbuf_ref+0x48>)
 800f08e:	4805      	ldr	r0, [pc, #20]	; (800f0a4 <pbuf_ref+0x4c>)
 800f090:	f00a fc16 	bl	80198c0 <iprintf>
  }
}
 800f094:	bf00      	nop
 800f096:	3710      	adds	r7, #16
 800f098:	46bd      	mov	sp, r7
 800f09a:	bd80      	pop	{r7, pc}
 800f09c:	0801e5f8 	.word	0x0801e5f8
 800f0a0:	0801e7d8 	.word	0x0801e7d8
 800f0a4:	0801e658 	.word	0x0801e658

0800f0a8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b084      	sub	sp, #16
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d002      	beq.n	800f0be <pbuf_cat+0x16>
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d107      	bne.n	800f0ce <pbuf_cat+0x26>
 800f0be:	4b20      	ldr	r3, [pc, #128]	; (800f140 <pbuf_cat+0x98>)
 800f0c0:	f240 325a 	movw	r2, #858	; 0x35a
 800f0c4:	491f      	ldr	r1, [pc, #124]	; (800f144 <pbuf_cat+0x9c>)
 800f0c6:	4820      	ldr	r0, [pc, #128]	; (800f148 <pbuf_cat+0xa0>)
 800f0c8:	f00a fbfa 	bl	80198c0 <iprintf>
 800f0cc:	e034      	b.n	800f138 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	60fb      	str	r3, [r7, #12]
 800f0d2:	e00a      	b.n	800f0ea <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	891a      	ldrh	r2, [r3, #8]
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	891b      	ldrh	r3, [r3, #8]
 800f0dc:	4413      	add	r3, r2
 800f0de:	b29a      	uxth	r2, r3
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	60fb      	str	r3, [r7, #12]
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d1f0      	bne.n	800f0d4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	891a      	ldrh	r2, [r3, #8]
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	895b      	ldrh	r3, [r3, #10]
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d006      	beq.n	800f10c <pbuf_cat+0x64>
 800f0fe:	4b10      	ldr	r3, [pc, #64]	; (800f140 <pbuf_cat+0x98>)
 800f100:	f240 3262 	movw	r2, #866	; 0x362
 800f104:	4911      	ldr	r1, [pc, #68]	; (800f14c <pbuf_cat+0xa4>)
 800f106:	4810      	ldr	r0, [pc, #64]	; (800f148 <pbuf_cat+0xa0>)
 800f108:	f00a fbda 	bl	80198c0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d006      	beq.n	800f122 <pbuf_cat+0x7a>
 800f114:	4b0a      	ldr	r3, [pc, #40]	; (800f140 <pbuf_cat+0x98>)
 800f116:	f240 3263 	movw	r2, #867	; 0x363
 800f11a:	490d      	ldr	r1, [pc, #52]	; (800f150 <pbuf_cat+0xa8>)
 800f11c:	480a      	ldr	r0, [pc, #40]	; (800f148 <pbuf_cat+0xa0>)
 800f11e:	f00a fbcf 	bl	80198c0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	891a      	ldrh	r2, [r3, #8]
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	891b      	ldrh	r3, [r3, #8]
 800f12a:	4413      	add	r3, r2
 800f12c:	b29a      	uxth	r2, r3
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	683a      	ldr	r2, [r7, #0]
 800f136:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f138:	3710      	adds	r7, #16
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	bf00      	nop
 800f140:	0801e5f8 	.word	0x0801e5f8
 800f144:	0801e7ec 	.word	0x0801e7ec
 800f148:	0801e658 	.word	0x0801e658
 800f14c:	0801e824 	.word	0x0801e824
 800f150:	0801e854 	.word	0x0801e854

0800f154 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b082      	sub	sp, #8
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800f15e:	6839      	ldr	r1, [r7, #0]
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f7ff ffa1 	bl	800f0a8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800f166:	6838      	ldr	r0, [r7, #0]
 800f168:	f7ff ff76 	bl	800f058 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800f16c:	bf00      	nop
 800f16e:	3708      	adds	r7, #8
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}

0800f174 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b086      	sub	sp, #24
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f17e:	2300      	movs	r3, #0
 800f180:	617b      	str	r3, [r7, #20]
 800f182:	2300      	movs	r3, #0
 800f184:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d008      	beq.n	800f19e <pbuf_copy+0x2a>
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d005      	beq.n	800f19e <pbuf_copy+0x2a>
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	891a      	ldrh	r2, [r3, #8]
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	891b      	ldrh	r3, [r3, #8]
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d209      	bcs.n	800f1b2 <pbuf_copy+0x3e>
 800f19e:	4b57      	ldr	r3, [pc, #348]	; (800f2fc <pbuf_copy+0x188>)
 800f1a0:	f240 32ca 	movw	r2, #970	; 0x3ca
 800f1a4:	4956      	ldr	r1, [pc, #344]	; (800f300 <pbuf_copy+0x18c>)
 800f1a6:	4857      	ldr	r0, [pc, #348]	; (800f304 <pbuf_copy+0x190>)
 800f1a8:	f00a fb8a 	bl	80198c0 <iprintf>
 800f1ac:	f06f 030f 	mvn.w	r3, #15
 800f1b0:	e09f      	b.n	800f2f2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	895b      	ldrh	r3, [r3, #10]
 800f1b6:	461a      	mov	r2, r3
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	1ad2      	subs	r2, r2, r3
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	895b      	ldrh	r3, [r3, #10]
 800f1c0:	4619      	mov	r1, r3
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	1acb      	subs	r3, r1, r3
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d306      	bcc.n	800f1d8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	895b      	ldrh	r3, [r3, #10]
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	1ad3      	subs	r3, r2, r3
 800f1d4:	60fb      	str	r3, [r7, #12]
 800f1d6:	e005      	b.n	800f1e4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	895b      	ldrh	r3, [r3, #10]
 800f1dc:	461a      	mov	r2, r3
 800f1de:	697b      	ldr	r3, [r7, #20]
 800f1e0:	1ad3      	subs	r3, r2, r3
 800f1e2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	685a      	ldr	r2, [r3, #4]
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	18d0      	adds	r0, r2, r3
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	685a      	ldr	r2, [r3, #4]
 800f1f0:	693b      	ldr	r3, [r7, #16]
 800f1f2:	4413      	add	r3, r2
 800f1f4:	68fa      	ldr	r2, [r7, #12]
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	f009 fd22 	bl	8018c40 <memcpy>
    offset_to += len;
 800f1fc:	697a      	ldr	r2, [r7, #20]
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	4413      	add	r3, r2
 800f202:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f204:	693a      	ldr	r2, [r7, #16]
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	4413      	add	r3, r2
 800f20a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	895b      	ldrh	r3, [r3, #10]
 800f210:	461a      	mov	r2, r3
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	4293      	cmp	r3, r2
 800f216:	d906      	bls.n	800f226 <pbuf_copy+0xb2>
 800f218:	4b38      	ldr	r3, [pc, #224]	; (800f2fc <pbuf_copy+0x188>)
 800f21a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800f21e:	493a      	ldr	r1, [pc, #232]	; (800f308 <pbuf_copy+0x194>)
 800f220:	4838      	ldr	r0, [pc, #224]	; (800f304 <pbuf_copy+0x190>)
 800f222:	f00a fb4d 	bl	80198c0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	895b      	ldrh	r3, [r3, #10]
 800f22a:	461a      	mov	r2, r3
 800f22c:	693b      	ldr	r3, [r7, #16]
 800f22e:	4293      	cmp	r3, r2
 800f230:	d906      	bls.n	800f240 <pbuf_copy+0xcc>
 800f232:	4b32      	ldr	r3, [pc, #200]	; (800f2fc <pbuf_copy+0x188>)
 800f234:	f240 32da 	movw	r2, #986	; 0x3da
 800f238:	4934      	ldr	r1, [pc, #208]	; (800f30c <pbuf_copy+0x198>)
 800f23a:	4832      	ldr	r0, [pc, #200]	; (800f304 <pbuf_copy+0x190>)
 800f23c:	f00a fb40 	bl	80198c0 <iprintf>
    if (offset_from >= p_from->len) {
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	895b      	ldrh	r3, [r3, #10]
 800f244:	461a      	mov	r2, r3
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	4293      	cmp	r3, r2
 800f24a:	d304      	bcc.n	800f256 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f24c:	2300      	movs	r3, #0
 800f24e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	895b      	ldrh	r3, [r3, #10]
 800f25a:	461a      	mov	r2, r3
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	4293      	cmp	r3, r2
 800f260:	d114      	bne.n	800f28c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f262:	2300      	movs	r3, #0
 800f264:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d10c      	bne.n	800f28c <pbuf_copy+0x118>
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d009      	beq.n	800f28c <pbuf_copy+0x118>
 800f278:	4b20      	ldr	r3, [pc, #128]	; (800f2fc <pbuf_copy+0x188>)
 800f27a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800f27e:	4924      	ldr	r1, [pc, #144]	; (800f310 <pbuf_copy+0x19c>)
 800f280:	4820      	ldr	r0, [pc, #128]	; (800f304 <pbuf_copy+0x190>)
 800f282:	f00a fb1d 	bl	80198c0 <iprintf>
 800f286:	f06f 030f 	mvn.w	r3, #15
 800f28a:	e032      	b.n	800f2f2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d013      	beq.n	800f2ba <pbuf_copy+0x146>
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	895a      	ldrh	r2, [r3, #10]
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	891b      	ldrh	r3, [r3, #8]
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d10d      	bne.n	800f2ba <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d009      	beq.n	800f2ba <pbuf_copy+0x146>
 800f2a6:	4b15      	ldr	r3, [pc, #84]	; (800f2fc <pbuf_copy+0x188>)
 800f2a8:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800f2ac:	4919      	ldr	r1, [pc, #100]	; (800f314 <pbuf_copy+0x1a0>)
 800f2ae:	4815      	ldr	r0, [pc, #84]	; (800f304 <pbuf_copy+0x190>)
 800f2b0:	f00a fb06 	bl	80198c0 <iprintf>
 800f2b4:	f06f 0305 	mvn.w	r3, #5
 800f2b8:	e01b      	b.n	800f2f2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d013      	beq.n	800f2e8 <pbuf_copy+0x174>
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	895a      	ldrh	r2, [r3, #10]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	891b      	ldrh	r3, [r3, #8]
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	d10d      	bne.n	800f2e8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d009      	beq.n	800f2e8 <pbuf_copy+0x174>
 800f2d4:	4b09      	ldr	r3, [pc, #36]	; (800f2fc <pbuf_copy+0x188>)
 800f2d6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800f2da:	490e      	ldr	r1, [pc, #56]	; (800f314 <pbuf_copy+0x1a0>)
 800f2dc:	4809      	ldr	r0, [pc, #36]	; (800f304 <pbuf_copy+0x190>)
 800f2de:	f00a faef 	bl	80198c0 <iprintf>
 800f2e2:	f06f 0305 	mvn.w	r3, #5
 800f2e6:	e004      	b.n	800f2f2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	f47f af61 	bne.w	800f1b2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f2f0:	2300      	movs	r3, #0
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3718      	adds	r7, #24
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}
 800f2fa:	bf00      	nop
 800f2fc:	0801e5f8 	.word	0x0801e5f8
 800f300:	0801e8a0 	.word	0x0801e8a0
 800f304:	0801e658 	.word	0x0801e658
 800f308:	0801e8d0 	.word	0x0801e8d0
 800f30c:	0801e8e8 	.word	0x0801e8e8
 800f310:	0801e904 	.word	0x0801e904
 800f314:	0801e914 	.word	0x0801e914

0800f318 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b088      	sub	sp, #32
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	60f8      	str	r0, [r7, #12]
 800f320:	60b9      	str	r1, [r7, #8]
 800f322:	4611      	mov	r1, r2
 800f324:	461a      	mov	r2, r3
 800f326:	460b      	mov	r3, r1
 800f328:	80fb      	strh	r3, [r7, #6]
 800f32a:	4613      	mov	r3, r2
 800f32c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f32e:	2300      	movs	r3, #0
 800f330:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f332:	2300      	movs	r3, #0
 800f334:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d108      	bne.n	800f34e <pbuf_copy_partial+0x36>
 800f33c:	4b2b      	ldr	r3, [pc, #172]	; (800f3ec <pbuf_copy_partial+0xd4>)
 800f33e:	f240 420a 	movw	r2, #1034	; 0x40a
 800f342:	492b      	ldr	r1, [pc, #172]	; (800f3f0 <pbuf_copy_partial+0xd8>)
 800f344:	482b      	ldr	r0, [pc, #172]	; (800f3f4 <pbuf_copy_partial+0xdc>)
 800f346:	f00a fabb 	bl	80198c0 <iprintf>
 800f34a:	2300      	movs	r3, #0
 800f34c:	e04a      	b.n	800f3e4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d108      	bne.n	800f366 <pbuf_copy_partial+0x4e>
 800f354:	4b25      	ldr	r3, [pc, #148]	; (800f3ec <pbuf_copy_partial+0xd4>)
 800f356:	f240 420b 	movw	r2, #1035	; 0x40b
 800f35a:	4927      	ldr	r1, [pc, #156]	; (800f3f8 <pbuf_copy_partial+0xe0>)
 800f35c:	4825      	ldr	r0, [pc, #148]	; (800f3f4 <pbuf_copy_partial+0xdc>)
 800f35e:	f00a faaf 	bl	80198c0 <iprintf>
 800f362:	2300      	movs	r3, #0
 800f364:	e03e      	b.n	800f3e4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	61fb      	str	r3, [r7, #28]
 800f36a:	e034      	b.n	800f3d6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f36c:	88bb      	ldrh	r3, [r7, #4]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d00a      	beq.n	800f388 <pbuf_copy_partial+0x70>
 800f372:	69fb      	ldr	r3, [r7, #28]
 800f374:	895b      	ldrh	r3, [r3, #10]
 800f376:	88ba      	ldrh	r2, [r7, #4]
 800f378:	429a      	cmp	r2, r3
 800f37a:	d305      	bcc.n	800f388 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f37c:	69fb      	ldr	r3, [r7, #28]
 800f37e:	895b      	ldrh	r3, [r3, #10]
 800f380:	88ba      	ldrh	r2, [r7, #4]
 800f382:	1ad3      	subs	r3, r2, r3
 800f384:	80bb      	strh	r3, [r7, #4]
 800f386:	e023      	b.n	800f3d0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f388:	69fb      	ldr	r3, [r7, #28]
 800f38a:	895a      	ldrh	r2, [r3, #10]
 800f38c:	88bb      	ldrh	r3, [r7, #4]
 800f38e:	1ad3      	subs	r3, r2, r3
 800f390:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f392:	8b3a      	ldrh	r2, [r7, #24]
 800f394:	88fb      	ldrh	r3, [r7, #6]
 800f396:	429a      	cmp	r2, r3
 800f398:	d901      	bls.n	800f39e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f39a:	88fb      	ldrh	r3, [r7, #6]
 800f39c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f39e:	8b7b      	ldrh	r3, [r7, #26]
 800f3a0:	68ba      	ldr	r2, [r7, #8]
 800f3a2:	18d0      	adds	r0, r2, r3
 800f3a4:	69fb      	ldr	r3, [r7, #28]
 800f3a6:	685a      	ldr	r2, [r3, #4]
 800f3a8:	88bb      	ldrh	r3, [r7, #4]
 800f3aa:	4413      	add	r3, r2
 800f3ac:	8b3a      	ldrh	r2, [r7, #24]
 800f3ae:	4619      	mov	r1, r3
 800f3b0:	f009 fc46 	bl	8018c40 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f3b4:	8afa      	ldrh	r2, [r7, #22]
 800f3b6:	8b3b      	ldrh	r3, [r7, #24]
 800f3b8:	4413      	add	r3, r2
 800f3ba:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f3bc:	8b7a      	ldrh	r2, [r7, #26]
 800f3be:	8b3b      	ldrh	r3, [r7, #24]
 800f3c0:	4413      	add	r3, r2
 800f3c2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f3c4:	88fa      	ldrh	r2, [r7, #6]
 800f3c6:	8b3b      	ldrh	r3, [r7, #24]
 800f3c8:	1ad3      	subs	r3, r2, r3
 800f3ca:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f3d0:	69fb      	ldr	r3, [r7, #28]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	61fb      	str	r3, [r7, #28]
 800f3d6:	88fb      	ldrh	r3, [r7, #6]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d002      	beq.n	800f3e2 <pbuf_copy_partial+0xca>
 800f3dc:	69fb      	ldr	r3, [r7, #28]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d1c4      	bne.n	800f36c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f3e2:	8afb      	ldrh	r3, [r7, #22]
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3720      	adds	r7, #32
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}
 800f3ec:	0801e5f8 	.word	0x0801e5f8
 800f3f0:	0801e940 	.word	0x0801e940
 800f3f4:	0801e658 	.word	0x0801e658
 800f3f8:	0801e960 	.word	0x0801e960

0800f3fc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b084      	sub	sp, #16
 800f400:	af00      	add	r7, sp, #0
 800f402:	4603      	mov	r3, r0
 800f404:	603a      	str	r2, [r7, #0]
 800f406:	71fb      	strb	r3, [r7, #7]
 800f408:	460b      	mov	r3, r1
 800f40a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	8919      	ldrh	r1, [r3, #8]
 800f410:	88ba      	ldrh	r2, [r7, #4]
 800f412:	79fb      	ldrb	r3, [r7, #7]
 800f414:	4618      	mov	r0, r3
 800f416:	f7ff fa99 	bl	800e94c <pbuf_alloc>
 800f41a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d101      	bne.n	800f426 <pbuf_clone+0x2a>
    return NULL;
 800f422:	2300      	movs	r3, #0
 800f424:	e011      	b.n	800f44a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f426:	6839      	ldr	r1, [r7, #0]
 800f428:	68f8      	ldr	r0, [r7, #12]
 800f42a:	f7ff fea3 	bl	800f174 <pbuf_copy>
 800f42e:	4603      	mov	r3, r0
 800f430:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f432:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d006      	beq.n	800f448 <pbuf_clone+0x4c>
 800f43a:	4b06      	ldr	r3, [pc, #24]	; (800f454 <pbuf_clone+0x58>)
 800f43c:	f240 5224 	movw	r2, #1316	; 0x524
 800f440:	4905      	ldr	r1, [pc, #20]	; (800f458 <pbuf_clone+0x5c>)
 800f442:	4806      	ldr	r0, [pc, #24]	; (800f45c <pbuf_clone+0x60>)
 800f444:	f00a fa3c 	bl	80198c0 <iprintf>
  return q;
 800f448:	68fb      	ldr	r3, [r7, #12]
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	3710      	adds	r7, #16
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}
 800f452:	bf00      	nop
 800f454:	0801e5f8 	.word	0x0801e5f8
 800f458:	0801ea6c 	.word	0x0801ea6c
 800f45c:	0801e658 	.word	0x0801e658

0800f460 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f464:	f00a faa8 	bl	80199b8 <rand>
 800f468:	4603      	mov	r3, r0
 800f46a:	b29b      	uxth	r3, r3
 800f46c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f470:	b29b      	uxth	r3, r3
 800f472:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f476:	b29a      	uxth	r2, r3
 800f478:	4b01      	ldr	r3, [pc, #4]	; (800f480 <tcp_init+0x20>)
 800f47a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f47c:	bf00      	nop
 800f47e:	bd80      	pop	{r7, pc}
 800f480:	20000010 	.word	0x20000010

0800f484 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b082      	sub	sp, #8
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	7d1b      	ldrb	r3, [r3, #20]
 800f490:	2b01      	cmp	r3, #1
 800f492:	d105      	bne.n	800f4a0 <tcp_free+0x1c>
 800f494:	4b06      	ldr	r3, [pc, #24]	; (800f4b0 <tcp_free+0x2c>)
 800f496:	22d4      	movs	r2, #212	; 0xd4
 800f498:	4906      	ldr	r1, [pc, #24]	; (800f4b4 <tcp_free+0x30>)
 800f49a:	4807      	ldr	r0, [pc, #28]	; (800f4b8 <tcp_free+0x34>)
 800f49c:	f00a fa10 	bl	80198c0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f4a0:	6879      	ldr	r1, [r7, #4]
 800f4a2:	2001      	movs	r0, #1
 800f4a4:	f7fe ff0a 	bl	800e2bc <memp_free>
}
 800f4a8:	bf00      	nop
 800f4aa:	3708      	adds	r7, #8
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}
 800f4b0:	0801eaf8 	.word	0x0801eaf8
 800f4b4:	0801eb28 	.word	0x0801eb28
 800f4b8:	0801eb3c 	.word	0x0801eb3c

0800f4bc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b082      	sub	sp, #8
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	7d1b      	ldrb	r3, [r3, #20]
 800f4c8:	2b01      	cmp	r3, #1
 800f4ca:	d105      	bne.n	800f4d8 <tcp_free_listen+0x1c>
 800f4cc:	4b06      	ldr	r3, [pc, #24]	; (800f4e8 <tcp_free_listen+0x2c>)
 800f4ce:	22df      	movs	r2, #223	; 0xdf
 800f4d0:	4906      	ldr	r1, [pc, #24]	; (800f4ec <tcp_free_listen+0x30>)
 800f4d2:	4807      	ldr	r0, [pc, #28]	; (800f4f0 <tcp_free_listen+0x34>)
 800f4d4:	f00a f9f4 	bl	80198c0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f4d8:	6879      	ldr	r1, [r7, #4]
 800f4da:	2002      	movs	r0, #2
 800f4dc:	f7fe feee 	bl	800e2bc <memp_free>
}
 800f4e0:	bf00      	nop
 800f4e2:	3708      	adds	r7, #8
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}
 800f4e8:	0801eaf8 	.word	0x0801eaf8
 800f4ec:	0801eb64 	.word	0x0801eb64
 800f4f0:	0801eb3c 	.word	0x0801eb3c

0800f4f4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f4f8:	f001 f850 	bl	801059c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f4fc:	4b07      	ldr	r3, [pc, #28]	; (800f51c <tcp_tmr+0x28>)
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	3301      	adds	r3, #1
 800f502:	b2da      	uxtb	r2, r3
 800f504:	4b05      	ldr	r3, [pc, #20]	; (800f51c <tcp_tmr+0x28>)
 800f506:	701a      	strb	r2, [r3, #0]
 800f508:	4b04      	ldr	r3, [pc, #16]	; (800f51c <tcp_tmr+0x28>)
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	f003 0301 	and.w	r3, r3, #1
 800f510:	2b00      	cmp	r3, #0
 800f512:	d001      	beq.n	800f518 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f514:	f000 fd04 	bl	800ff20 <tcp_slowtmr>
  }
}
 800f518:	bf00      	nop
 800f51a:	bd80      	pop	{r7, pc}
 800f51c:	20008801 	.word	0x20008801

0800f520 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d105      	bne.n	800f53c <tcp_remove_listener+0x1c>
 800f530:	4b0d      	ldr	r3, [pc, #52]	; (800f568 <tcp_remove_listener+0x48>)
 800f532:	22ff      	movs	r2, #255	; 0xff
 800f534:	490d      	ldr	r1, [pc, #52]	; (800f56c <tcp_remove_listener+0x4c>)
 800f536:	480e      	ldr	r0, [pc, #56]	; (800f570 <tcp_remove_listener+0x50>)
 800f538:	f00a f9c2 	bl	80198c0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	60fb      	str	r3, [r7, #12]
 800f540:	e00a      	b.n	800f558 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f546:	683a      	ldr	r2, [r7, #0]
 800f548:	429a      	cmp	r2, r3
 800f54a:	d102      	bne.n	800f552 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	2200      	movs	r2, #0
 800f550:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	68db      	ldr	r3, [r3, #12]
 800f556:	60fb      	str	r3, [r7, #12]
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d1f1      	bne.n	800f542 <tcp_remove_listener+0x22>
    }
  }
}
 800f55e:	bf00      	nop
 800f560:	3710      	adds	r7, #16
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}
 800f566:	bf00      	nop
 800f568:	0801eaf8 	.word	0x0801eaf8
 800f56c:	0801eb80 	.word	0x0801eb80
 800f570:	0801eb3c 	.word	0x0801eb3c

0800f574 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b084      	sub	sp, #16
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d106      	bne.n	800f590 <tcp_listen_closed+0x1c>
 800f582:	4b14      	ldr	r3, [pc, #80]	; (800f5d4 <tcp_listen_closed+0x60>)
 800f584:	f240 1211 	movw	r2, #273	; 0x111
 800f588:	4913      	ldr	r1, [pc, #76]	; (800f5d8 <tcp_listen_closed+0x64>)
 800f58a:	4814      	ldr	r0, [pc, #80]	; (800f5dc <tcp_listen_closed+0x68>)
 800f58c:	f00a f998 	bl	80198c0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	7d1b      	ldrb	r3, [r3, #20]
 800f594:	2b01      	cmp	r3, #1
 800f596:	d006      	beq.n	800f5a6 <tcp_listen_closed+0x32>
 800f598:	4b0e      	ldr	r3, [pc, #56]	; (800f5d4 <tcp_listen_closed+0x60>)
 800f59a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f59e:	4910      	ldr	r1, [pc, #64]	; (800f5e0 <tcp_listen_closed+0x6c>)
 800f5a0:	480e      	ldr	r0, [pc, #56]	; (800f5dc <tcp_listen_closed+0x68>)
 800f5a2:	f00a f98d 	bl	80198c0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	60fb      	str	r3, [r7, #12]
 800f5aa:	e00b      	b.n	800f5c4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f5ac:	4a0d      	ldr	r2, [pc, #52]	; (800f5e4 <tcp_listen_closed+0x70>)
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	6879      	ldr	r1, [r7, #4]
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7ff ffb1 	bl	800f520 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	60fb      	str	r3, [r7, #12]
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	2b03      	cmp	r3, #3
 800f5c8:	d9f0      	bls.n	800f5ac <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f5ca:	bf00      	nop
 800f5cc:	3710      	adds	r7, #16
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}
 800f5d2:	bf00      	nop
 800f5d4:	0801eaf8 	.word	0x0801eaf8
 800f5d8:	0801eba8 	.word	0x0801eba8
 800f5dc:	0801eb3c 	.word	0x0801eb3c
 800f5e0:	0801ebb4 	.word	0x0801ebb4
 800f5e4:	08020b10 	.word	0x08020b10

0800f5e8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f5e8:	b5b0      	push	{r4, r5, r7, lr}
 800f5ea:	b088      	sub	sp, #32
 800f5ec:	af04      	add	r7, sp, #16
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	460b      	mov	r3, r1
 800f5f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d106      	bne.n	800f608 <tcp_close_shutdown+0x20>
 800f5fa:	4b61      	ldr	r3, [pc, #388]	; (800f780 <tcp_close_shutdown+0x198>)
 800f5fc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f600:	4960      	ldr	r1, [pc, #384]	; (800f784 <tcp_close_shutdown+0x19c>)
 800f602:	4861      	ldr	r0, [pc, #388]	; (800f788 <tcp_close_shutdown+0x1a0>)
 800f604:	f00a f95c 	bl	80198c0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f608:	78fb      	ldrb	r3, [r7, #3]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d066      	beq.n	800f6dc <tcp_close_shutdown+0xf4>
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	7d1b      	ldrb	r3, [r3, #20]
 800f612:	2b04      	cmp	r3, #4
 800f614:	d003      	beq.n	800f61e <tcp_close_shutdown+0x36>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	7d1b      	ldrb	r3, [r3, #20]
 800f61a:	2b07      	cmp	r3, #7
 800f61c:	d15e      	bne.n	800f6dc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f622:	2b00      	cmp	r3, #0
 800f624:	d104      	bne.n	800f630 <tcp_close_shutdown+0x48>
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f62a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f62e:	d055      	beq.n	800f6dc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	8b5b      	ldrh	r3, [r3, #26]
 800f634:	f003 0310 	and.w	r3, r3, #16
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d106      	bne.n	800f64a <tcp_close_shutdown+0x62>
 800f63c:	4b50      	ldr	r3, [pc, #320]	; (800f780 <tcp_close_shutdown+0x198>)
 800f63e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800f642:	4952      	ldr	r1, [pc, #328]	; (800f78c <tcp_close_shutdown+0x1a4>)
 800f644:	4850      	ldr	r0, [pc, #320]	; (800f788 <tcp_close_shutdown+0x1a0>)
 800f646:	f00a f93b 	bl	80198c0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f652:	687d      	ldr	r5, [r7, #4]
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	3304      	adds	r3, #4
 800f658:	687a      	ldr	r2, [r7, #4]
 800f65a:	8ad2      	ldrh	r2, [r2, #22]
 800f65c:	6879      	ldr	r1, [r7, #4]
 800f65e:	8b09      	ldrh	r1, [r1, #24]
 800f660:	9102      	str	r1, [sp, #8]
 800f662:	9201      	str	r2, [sp, #4]
 800f664:	9300      	str	r3, [sp, #0]
 800f666:	462b      	mov	r3, r5
 800f668:	4622      	mov	r2, r4
 800f66a:	4601      	mov	r1, r0
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f005 fd71 	bl	8015154 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f001 fb40 	bl	8010cf8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f678:	4b45      	ldr	r3, [pc, #276]	; (800f790 <tcp_close_shutdown+0x1a8>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	687a      	ldr	r2, [r7, #4]
 800f67e:	429a      	cmp	r2, r3
 800f680:	d105      	bne.n	800f68e <tcp_close_shutdown+0xa6>
 800f682:	4b43      	ldr	r3, [pc, #268]	; (800f790 <tcp_close_shutdown+0x1a8>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	68db      	ldr	r3, [r3, #12]
 800f688:	4a41      	ldr	r2, [pc, #260]	; (800f790 <tcp_close_shutdown+0x1a8>)
 800f68a:	6013      	str	r3, [r2, #0]
 800f68c:	e013      	b.n	800f6b6 <tcp_close_shutdown+0xce>
 800f68e:	4b40      	ldr	r3, [pc, #256]	; (800f790 <tcp_close_shutdown+0x1a8>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	60fb      	str	r3, [r7, #12]
 800f694:	e00c      	b.n	800f6b0 <tcp_close_shutdown+0xc8>
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	68db      	ldr	r3, [r3, #12]
 800f69a:	687a      	ldr	r2, [r7, #4]
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d104      	bne.n	800f6aa <tcp_close_shutdown+0xc2>
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	68da      	ldr	r2, [r3, #12]
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	60da      	str	r2, [r3, #12]
 800f6a8:	e005      	b.n	800f6b6 <tcp_close_shutdown+0xce>
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	68db      	ldr	r3, [r3, #12]
 800f6ae:	60fb      	str	r3, [r7, #12]
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d1ef      	bne.n	800f696 <tcp_close_shutdown+0xae>
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	60da      	str	r2, [r3, #12]
 800f6bc:	4b35      	ldr	r3, [pc, #212]	; (800f794 <tcp_close_shutdown+0x1ac>)
 800f6be:	2201      	movs	r2, #1
 800f6c0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f6c2:	4b35      	ldr	r3, [pc, #212]	; (800f798 <tcp_close_shutdown+0x1b0>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	687a      	ldr	r2, [r7, #4]
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d102      	bne.n	800f6d2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f6cc:	f003 ffd2 	bl	8013674 <tcp_trigger_input_pcb_close>
 800f6d0:	e002      	b.n	800f6d8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f7ff fed6 	bl	800f484 <tcp_free>
      }
      return ERR_OK;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	e04d      	b.n	800f778 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	7d1b      	ldrb	r3, [r3, #20]
 800f6e0:	2b01      	cmp	r3, #1
 800f6e2:	d02d      	beq.n	800f740 <tcp_close_shutdown+0x158>
 800f6e4:	2b02      	cmp	r3, #2
 800f6e6:	d036      	beq.n	800f756 <tcp_close_shutdown+0x16e>
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d13f      	bne.n	800f76c <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	8adb      	ldrh	r3, [r3, #22]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d021      	beq.n	800f738 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f6f4:	4b29      	ldr	r3, [pc, #164]	; (800f79c <tcp_close_shutdown+0x1b4>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	687a      	ldr	r2, [r7, #4]
 800f6fa:	429a      	cmp	r2, r3
 800f6fc:	d105      	bne.n	800f70a <tcp_close_shutdown+0x122>
 800f6fe:	4b27      	ldr	r3, [pc, #156]	; (800f79c <tcp_close_shutdown+0x1b4>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	68db      	ldr	r3, [r3, #12]
 800f704:	4a25      	ldr	r2, [pc, #148]	; (800f79c <tcp_close_shutdown+0x1b4>)
 800f706:	6013      	str	r3, [r2, #0]
 800f708:	e013      	b.n	800f732 <tcp_close_shutdown+0x14a>
 800f70a:	4b24      	ldr	r3, [pc, #144]	; (800f79c <tcp_close_shutdown+0x1b4>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	60bb      	str	r3, [r7, #8]
 800f710:	e00c      	b.n	800f72c <tcp_close_shutdown+0x144>
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	68db      	ldr	r3, [r3, #12]
 800f716:	687a      	ldr	r2, [r7, #4]
 800f718:	429a      	cmp	r2, r3
 800f71a:	d104      	bne.n	800f726 <tcp_close_shutdown+0x13e>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	68da      	ldr	r2, [r3, #12]
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	60da      	str	r2, [r3, #12]
 800f724:	e005      	b.n	800f732 <tcp_close_shutdown+0x14a>
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	68db      	ldr	r3, [r3, #12]
 800f72a:	60bb      	str	r3, [r7, #8]
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d1ef      	bne.n	800f712 <tcp_close_shutdown+0x12a>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2200      	movs	r2, #0
 800f736:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	f7ff fea3 	bl	800f484 <tcp_free>
      break;
 800f73e:	e01a      	b.n	800f776 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f7ff ff17 	bl	800f574 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f746:	6879      	ldr	r1, [r7, #4]
 800f748:	4815      	ldr	r0, [pc, #84]	; (800f7a0 <tcp_close_shutdown+0x1b8>)
 800f74a:	f001 fb25 	bl	8010d98 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f7ff feb4 	bl	800f4bc <tcp_free_listen>
      break;
 800f754:	e00f      	b.n	800f776 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f756:	6879      	ldr	r1, [r7, #4]
 800f758:	480d      	ldr	r0, [pc, #52]	; (800f790 <tcp_close_shutdown+0x1a8>)
 800f75a:	f001 fb1d 	bl	8010d98 <tcp_pcb_remove>
 800f75e:	4b0d      	ldr	r3, [pc, #52]	; (800f794 <tcp_close_shutdown+0x1ac>)
 800f760:	2201      	movs	r2, #1
 800f762:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f7ff fe8d 	bl	800f484 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f76a:	e004      	b.n	800f776 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f000 f819 	bl	800f7a4 <tcp_close_shutdown_fin>
 800f772:	4603      	mov	r3, r0
 800f774:	e000      	b.n	800f778 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800f776:	2300      	movs	r3, #0
}
 800f778:	4618      	mov	r0, r3
 800f77a:	3710      	adds	r7, #16
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bdb0      	pop	{r4, r5, r7, pc}
 800f780:	0801eaf8 	.word	0x0801eaf8
 800f784:	0801ebcc 	.word	0x0801ebcc
 800f788:	0801eb3c 	.word	0x0801eb3c
 800f78c:	0801ebec 	.word	0x0801ebec
 800f790:	2000fcf4 	.word	0x2000fcf4
 800f794:	2000fcf0 	.word	0x2000fcf0
 800f798:	2000fd08 	.word	0x2000fd08
 800f79c:	2000fd00 	.word	0x2000fd00
 800f7a0:	2000fcfc 	.word	0x2000fcfc

0800f7a4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d106      	bne.n	800f7c0 <tcp_close_shutdown_fin+0x1c>
 800f7b2:	4b2c      	ldr	r3, [pc, #176]	; (800f864 <tcp_close_shutdown_fin+0xc0>)
 800f7b4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f7b8:	492b      	ldr	r1, [pc, #172]	; (800f868 <tcp_close_shutdown_fin+0xc4>)
 800f7ba:	482c      	ldr	r0, [pc, #176]	; (800f86c <tcp_close_shutdown_fin+0xc8>)
 800f7bc:	f00a f880 	bl	80198c0 <iprintf>

  switch (pcb->state) {
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	7d1b      	ldrb	r3, [r3, #20]
 800f7c4:	2b04      	cmp	r3, #4
 800f7c6:	d010      	beq.n	800f7ea <tcp_close_shutdown_fin+0x46>
 800f7c8:	2b07      	cmp	r3, #7
 800f7ca:	d01b      	beq.n	800f804 <tcp_close_shutdown_fin+0x60>
 800f7cc:	2b03      	cmp	r3, #3
 800f7ce:	d126      	bne.n	800f81e <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	f004 fdbb 	bl	801434c <tcp_send_fin>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f7da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d11f      	bne.n	800f822 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2205      	movs	r2, #5
 800f7e6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f7e8:	e01b      	b.n	800f822 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f004 fdae 	bl	801434c <tcp_send_fin>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f7f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d114      	bne.n	800f826 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2205      	movs	r2, #5
 800f800:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f802:	e010      	b.n	800f826 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f004 fda1 	bl	801434c <tcp_send_fin>
 800f80a:	4603      	mov	r3, r0
 800f80c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f80e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d109      	bne.n	800f82a <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	2209      	movs	r2, #9
 800f81a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f81c:	e005      	b.n	800f82a <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f81e:	2300      	movs	r3, #0
 800f820:	e01c      	b.n	800f85c <tcp_close_shutdown_fin+0xb8>
      break;
 800f822:	bf00      	nop
 800f824:	e002      	b.n	800f82c <tcp_close_shutdown_fin+0x88>
      break;
 800f826:	bf00      	nop
 800f828:	e000      	b.n	800f82c <tcp_close_shutdown_fin+0x88>
      break;
 800f82a:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f82c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d103      	bne.n	800f83c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f004 fec7 	bl	80145c8 <tcp_output>
 800f83a:	e00d      	b.n	800f858 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800f83c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f840:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f844:	d108      	bne.n	800f858 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	8b5b      	ldrh	r3, [r3, #26]
 800f84a:	f043 0308 	orr.w	r3, r3, #8
 800f84e:	b29a      	uxth	r2, r3
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f854:	2300      	movs	r3, #0
 800f856:	e001      	b.n	800f85c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800f858:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3710      	adds	r7, #16
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}
 800f864:	0801eaf8 	.word	0x0801eaf8
 800f868:	0801eba8 	.word	0x0801eba8
 800f86c:	0801eb3c 	.word	0x0801eb3c

0800f870 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b082      	sub	sp, #8
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d109      	bne.n	800f892 <tcp_close+0x22>
 800f87e:	4b0f      	ldr	r3, [pc, #60]	; (800f8bc <tcp_close+0x4c>)
 800f880:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f884:	490e      	ldr	r1, [pc, #56]	; (800f8c0 <tcp_close+0x50>)
 800f886:	480f      	ldr	r0, [pc, #60]	; (800f8c4 <tcp_close+0x54>)
 800f888:	f00a f81a 	bl	80198c0 <iprintf>
 800f88c:	f06f 030f 	mvn.w	r3, #15
 800f890:	e00f      	b.n	800f8b2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	7d1b      	ldrb	r3, [r3, #20]
 800f896:	2b01      	cmp	r3, #1
 800f898:	d006      	beq.n	800f8a8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	8b5b      	ldrh	r3, [r3, #26]
 800f89e:	f043 0310 	orr.w	r3, r3, #16
 800f8a2:	b29a      	uxth	r2, r3
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f8a8:	2101      	movs	r1, #1
 800f8aa:	6878      	ldr	r0, [r7, #4]
 800f8ac:	f7ff fe9c 	bl	800f5e8 <tcp_close_shutdown>
 800f8b0:	4603      	mov	r3, r0
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	3708      	adds	r7, #8
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}
 800f8ba:	bf00      	nop
 800f8bc:	0801eaf8 	.word	0x0801eaf8
 800f8c0:	0801ec08 	.word	0x0801ec08
 800f8c4:	0801eb3c 	.word	0x0801eb3c

0800f8c8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b084      	sub	sp, #16
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	60f8      	str	r0, [r7, #12]
 800f8d0:	60b9      	str	r1, [r7, #8]
 800f8d2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d109      	bne.n	800f8ee <tcp_shutdown+0x26>
 800f8da:	4b25      	ldr	r3, [pc, #148]	; (800f970 <tcp_shutdown+0xa8>)
 800f8dc:	f240 2207 	movw	r2, #519	; 0x207
 800f8e0:	4924      	ldr	r1, [pc, #144]	; (800f974 <tcp_shutdown+0xac>)
 800f8e2:	4825      	ldr	r0, [pc, #148]	; (800f978 <tcp_shutdown+0xb0>)
 800f8e4:	f009 ffec 	bl	80198c0 <iprintf>
 800f8e8:	f06f 030f 	mvn.w	r3, #15
 800f8ec:	e03c      	b.n	800f968 <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	7d1b      	ldrb	r3, [r3, #20]
 800f8f2:	2b01      	cmp	r3, #1
 800f8f4:	d102      	bne.n	800f8fc <tcp_shutdown+0x34>
    return ERR_CONN;
 800f8f6:	f06f 030a 	mvn.w	r3, #10
 800f8fa:	e035      	b.n	800f968 <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d01b      	beq.n	800f93a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	8b5b      	ldrh	r3, [r3, #26]
 800f906:	f043 0310 	orr.w	r3, r3, #16
 800f90a:	b29a      	uxth	r2, r3
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d005      	beq.n	800f922 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800f916:	2101      	movs	r1, #1
 800f918:	68f8      	ldr	r0, [r7, #12]
 800f91a:	f7ff fe65 	bl	800f5e8 <tcp_close_shutdown>
 800f91e:	4603      	mov	r3, r0
 800f920:	e022      	b.n	800f968 <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f926:	2b00      	cmp	r3, #0
 800f928:	d007      	beq.n	800f93a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f92e:	4618      	mov	r0, r3
 800f930:	f7ff faec 	bl	800ef0c <pbuf_free>
      pcb->refused_data = NULL;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2200      	movs	r2, #0
 800f938:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d012      	beq.n	800f966 <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	7d1b      	ldrb	r3, [r3, #20]
 800f944:	2b03      	cmp	r3, #3
 800f946:	db0b      	blt.n	800f960 <tcp_shutdown+0x98>
 800f948:	2b04      	cmp	r3, #4
 800f94a:	dd01      	ble.n	800f950 <tcp_shutdown+0x88>
 800f94c:	2b07      	cmp	r3, #7
 800f94e:	d107      	bne.n	800f960 <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	b2db      	uxtb	r3, r3
 800f954:	4619      	mov	r1, r3
 800f956:	68f8      	ldr	r0, [r7, #12]
 800f958:	f7ff fe46 	bl	800f5e8 <tcp_close_shutdown>
 800f95c:	4603      	mov	r3, r0
 800f95e:	e003      	b.n	800f968 <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800f960:	f06f 030a 	mvn.w	r3, #10
 800f964:	e000      	b.n	800f968 <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800f966:	2300      	movs	r3, #0
}
 800f968:	4618      	mov	r0, r3
 800f96a:	3710      	adds	r7, #16
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}
 800f970:	0801eaf8 	.word	0x0801eaf8
 800f974:	0801ec20 	.word	0x0801ec20
 800f978:	0801eb3c 	.word	0x0801eb3c

0800f97c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b08e      	sub	sp, #56	; 0x38
 800f980:	af04      	add	r7, sp, #16
 800f982:	6078      	str	r0, [r7, #4]
 800f984:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d107      	bne.n	800f99c <tcp_abandon+0x20>
 800f98c:	4b52      	ldr	r3, [pc, #328]	; (800fad8 <tcp_abandon+0x15c>)
 800f98e:	f240 223d 	movw	r2, #573	; 0x23d
 800f992:	4952      	ldr	r1, [pc, #328]	; (800fadc <tcp_abandon+0x160>)
 800f994:	4852      	ldr	r0, [pc, #328]	; (800fae0 <tcp_abandon+0x164>)
 800f996:	f009 ff93 	bl	80198c0 <iprintf>
 800f99a:	e099      	b.n	800fad0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	7d1b      	ldrb	r3, [r3, #20]
 800f9a0:	2b01      	cmp	r3, #1
 800f9a2:	d106      	bne.n	800f9b2 <tcp_abandon+0x36>
 800f9a4:	4b4c      	ldr	r3, [pc, #304]	; (800fad8 <tcp_abandon+0x15c>)
 800f9a6:	f240 2241 	movw	r2, #577	; 0x241
 800f9aa:	494e      	ldr	r1, [pc, #312]	; (800fae4 <tcp_abandon+0x168>)
 800f9ac:	484c      	ldr	r0, [pc, #304]	; (800fae0 <tcp_abandon+0x164>)
 800f9ae:	f009 ff87 	bl	80198c0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	7d1b      	ldrb	r3, [r3, #20]
 800f9b6:	2b0a      	cmp	r3, #10
 800f9b8:	d107      	bne.n	800f9ca <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f9ba:	6879      	ldr	r1, [r7, #4]
 800f9bc:	484a      	ldr	r0, [pc, #296]	; (800fae8 <tcp_abandon+0x16c>)
 800f9be:	f001 f9eb 	bl	8010d98 <tcp_pcb_remove>
    tcp_free(pcb);
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f7ff fd5e 	bl	800f484 <tcp_free>
 800f9c8:	e082      	b.n	800fad0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9d6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9dc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9e4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	691b      	ldr	r3, [r3, #16]
 800f9ea:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	7d1b      	ldrb	r3, [r3, #20]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d126      	bne.n	800fa42 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	8adb      	ldrh	r3, [r3, #22]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d02e      	beq.n	800fa5a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f9fc:	4b3b      	ldr	r3, [pc, #236]	; (800faec <tcp_abandon+0x170>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	687a      	ldr	r2, [r7, #4]
 800fa02:	429a      	cmp	r2, r3
 800fa04:	d105      	bne.n	800fa12 <tcp_abandon+0x96>
 800fa06:	4b39      	ldr	r3, [pc, #228]	; (800faec <tcp_abandon+0x170>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	68db      	ldr	r3, [r3, #12]
 800fa0c:	4a37      	ldr	r2, [pc, #220]	; (800faec <tcp_abandon+0x170>)
 800fa0e:	6013      	str	r3, [r2, #0]
 800fa10:	e013      	b.n	800fa3a <tcp_abandon+0xbe>
 800fa12:	4b36      	ldr	r3, [pc, #216]	; (800faec <tcp_abandon+0x170>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	61fb      	str	r3, [r7, #28]
 800fa18:	e00c      	b.n	800fa34 <tcp_abandon+0xb8>
 800fa1a:	69fb      	ldr	r3, [r7, #28]
 800fa1c:	68db      	ldr	r3, [r3, #12]
 800fa1e:	687a      	ldr	r2, [r7, #4]
 800fa20:	429a      	cmp	r2, r3
 800fa22:	d104      	bne.n	800fa2e <tcp_abandon+0xb2>
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	68da      	ldr	r2, [r3, #12]
 800fa28:	69fb      	ldr	r3, [r7, #28]
 800fa2a:	60da      	str	r2, [r3, #12]
 800fa2c:	e005      	b.n	800fa3a <tcp_abandon+0xbe>
 800fa2e:	69fb      	ldr	r3, [r7, #28]
 800fa30:	68db      	ldr	r3, [r3, #12]
 800fa32:	61fb      	str	r3, [r7, #28]
 800fa34:	69fb      	ldr	r3, [r7, #28]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d1ef      	bne.n	800fa1a <tcp_abandon+0x9e>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	60da      	str	r2, [r3, #12]
 800fa40:	e00b      	b.n	800fa5a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	8adb      	ldrh	r3, [r3, #22]
 800fa4a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fa4c:	6879      	ldr	r1, [r7, #4]
 800fa4e:	4828      	ldr	r0, [pc, #160]	; (800faf0 <tcp_abandon+0x174>)
 800fa50:	f001 f9a2 	bl	8010d98 <tcp_pcb_remove>
 800fa54:	4b27      	ldr	r3, [pc, #156]	; (800faf4 <tcp_abandon+0x178>)
 800fa56:	2201      	movs	r2, #1
 800fa58:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d004      	beq.n	800fa6c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa66:	4618      	mov	r0, r3
 800fa68:	f000 fe78 	bl	801075c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d004      	beq.n	800fa7e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f000 fe6f 	bl	801075c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d004      	beq.n	800fa90 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f000 fe66 	bl	801075c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800fa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d00e      	beq.n	800fab4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800fa96:	6879      	ldr	r1, [r7, #4]
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	3304      	adds	r3, #4
 800fa9c:	687a      	ldr	r2, [r7, #4]
 800fa9e:	8b12      	ldrh	r2, [r2, #24]
 800faa0:	9202      	str	r2, [sp, #8]
 800faa2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800faa4:	9201      	str	r2, [sp, #4]
 800faa6:	9300      	str	r3, [sp, #0]
 800faa8:	460b      	mov	r3, r1
 800faaa:	697a      	ldr	r2, [r7, #20]
 800faac:	69b9      	ldr	r1, [r7, #24]
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	f005 fb50 	bl	8015154 <tcp_rst>
    }
    last_state = pcb->state;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	7d1b      	ldrb	r3, [r3, #20]
 800fab8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f7ff fce2 	bl	800f484 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800fac0:	693b      	ldr	r3, [r7, #16]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d004      	beq.n	800fad0 <tcp_abandon+0x154>
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	f06f 010c 	mvn.w	r1, #12
 800facc:	68f8      	ldr	r0, [r7, #12]
 800face:	4798      	blx	r3
  }
}
 800fad0:	3728      	adds	r7, #40	; 0x28
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
 800fad6:	bf00      	nop
 800fad8:	0801eaf8 	.word	0x0801eaf8
 800fadc:	0801ec3c 	.word	0x0801ec3c
 800fae0:	0801eb3c 	.word	0x0801eb3c
 800fae4:	0801ec58 	.word	0x0801ec58
 800fae8:	2000fd04 	.word	0x2000fd04
 800faec:	2000fd00 	.word	0x2000fd00
 800faf0:	2000fcf4 	.word	0x2000fcf4
 800faf4:	2000fcf0 	.word	0x2000fcf0

0800faf8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b082      	sub	sp, #8
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800fb00:	2101      	movs	r1, #1
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f7ff ff3a 	bl	800f97c <tcp_abandon>
}
 800fb08:	bf00      	nop
 800fb0a:	3708      	adds	r7, #8
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}

0800fb10 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b084      	sub	sp, #16
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d106      	bne.n	800fb2c <tcp_update_rcv_ann_wnd+0x1c>
 800fb1e:	4b25      	ldr	r3, [pc, #148]	; (800fbb4 <tcp_update_rcv_ann_wnd+0xa4>)
 800fb20:	f240 32a6 	movw	r2, #934	; 0x3a6
 800fb24:	4924      	ldr	r1, [pc, #144]	; (800fbb8 <tcp_update_rcv_ann_wnd+0xa8>)
 800fb26:	4825      	ldr	r0, [pc, #148]	; (800fbbc <tcp_update_rcv_ann_wnd+0xac>)
 800fb28:	f009 feca 	bl	80198c0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb30:	687a      	ldr	r2, [r7, #4]
 800fb32:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800fb34:	4413      	add	r3, r2
 800fb36:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb3c:	687a      	ldr	r2, [r7, #4]
 800fb3e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800fb40:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800fb44:	bf28      	it	cs
 800fb46:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800fb4a:	b292      	uxth	r2, r2
 800fb4c:	4413      	add	r3, r2
 800fb4e:	68fa      	ldr	r2, [r7, #12]
 800fb50:	1ad3      	subs	r3, r2, r3
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	db08      	blt.n	800fb68 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb62:	68fa      	ldr	r2, [r7, #12]
 800fb64:	1ad3      	subs	r3, r2, r3
 800fb66:	e020      	b.n	800fbaa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb70:	1ad3      	subs	r3, r2, r3
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	dd03      	ble.n	800fb7e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fb7c:	e014      	b.n	800fba8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb86:	1ad3      	subs	r3, r2, r3
 800fb88:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb90:	d306      	bcc.n	800fba0 <tcp_update_rcv_ann_wnd+0x90>
 800fb92:	4b08      	ldr	r3, [pc, #32]	; (800fbb4 <tcp_update_rcv_ann_wnd+0xa4>)
 800fb94:	f240 32b6 	movw	r2, #950	; 0x3b6
 800fb98:	4909      	ldr	r1, [pc, #36]	; (800fbc0 <tcp_update_rcv_ann_wnd+0xb0>)
 800fb9a:	4808      	ldr	r0, [pc, #32]	; (800fbbc <tcp_update_rcv_ann_wnd+0xac>)
 800fb9c:	f009 fe90 	bl	80198c0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	b29a      	uxth	r2, r3
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800fba8:	2300      	movs	r3, #0
  }
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3710      	adds	r7, #16
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}
 800fbb2:	bf00      	nop
 800fbb4:	0801eaf8 	.word	0x0801eaf8
 800fbb8:	0801ed54 	.word	0x0801ed54
 800fbbc:	0801eb3c 	.word	0x0801eb3c
 800fbc0:	0801ed78 	.word	0x0801ed78

0800fbc4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b084      	sub	sp, #16
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
 800fbcc:	460b      	mov	r3, r1
 800fbce:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d107      	bne.n	800fbe6 <tcp_recved+0x22>
 800fbd6:	4b1f      	ldr	r3, [pc, #124]	; (800fc54 <tcp_recved+0x90>)
 800fbd8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800fbdc:	491e      	ldr	r1, [pc, #120]	; (800fc58 <tcp_recved+0x94>)
 800fbde:	481f      	ldr	r0, [pc, #124]	; (800fc5c <tcp_recved+0x98>)
 800fbe0:	f009 fe6e 	bl	80198c0 <iprintf>
 800fbe4:	e032      	b.n	800fc4c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	7d1b      	ldrb	r3, [r3, #20]
 800fbea:	2b01      	cmp	r3, #1
 800fbec:	d106      	bne.n	800fbfc <tcp_recved+0x38>
 800fbee:	4b19      	ldr	r3, [pc, #100]	; (800fc54 <tcp_recved+0x90>)
 800fbf0:	f240 32d3 	movw	r2, #979	; 0x3d3
 800fbf4:	491a      	ldr	r1, [pc, #104]	; (800fc60 <tcp_recved+0x9c>)
 800fbf6:	4819      	ldr	r0, [pc, #100]	; (800fc5c <tcp_recved+0x98>)
 800fbf8:	f009 fe62 	bl	80198c0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fc00:	887b      	ldrh	r3, [r7, #2]
 800fc02:	4413      	add	r3, r2
 800fc04:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800fc06:	89fb      	ldrh	r3, [r7, #14]
 800fc08:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fc0c:	d804      	bhi.n	800fc18 <tcp_recved+0x54>
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc12:	89fa      	ldrh	r2, [r7, #14]
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d204      	bcs.n	800fc22 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fc1e:	851a      	strh	r2, [r3, #40]	; 0x28
 800fc20:	e002      	b.n	800fc28 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	89fa      	ldrh	r2, [r7, #14]
 800fc26:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f7ff ff71 	bl	800fb10 <tcp_update_rcv_ann_wnd>
 800fc2e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800fc30:	68bb      	ldr	r3, [r7, #8]
 800fc32:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fc36:	d309      	bcc.n	800fc4c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	8b5b      	ldrh	r3, [r3, #26]
 800fc3c:	f043 0302 	orr.w	r3, r3, #2
 800fc40:	b29a      	uxth	r2, r3
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f004 fcbe 	bl	80145c8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800fc4c:	3710      	adds	r7, #16
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bd80      	pop	{r7, pc}
 800fc52:	bf00      	nop
 800fc54:	0801eaf8 	.word	0x0801eaf8
 800fc58:	0801ed94 	.word	0x0801ed94
 800fc5c:	0801eb3c 	.word	0x0801eb3c
 800fc60:	0801edac 	.word	0x0801edac

0800fc64 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800fc64:	b480      	push	{r7}
 800fc66:	b083      	sub	sp, #12
 800fc68:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800fc6e:	4b1e      	ldr	r3, [pc, #120]	; (800fce8 <tcp_new_port+0x84>)
 800fc70:	881b      	ldrh	r3, [r3, #0]
 800fc72:	3301      	adds	r3, #1
 800fc74:	b29a      	uxth	r2, r3
 800fc76:	4b1c      	ldr	r3, [pc, #112]	; (800fce8 <tcp_new_port+0x84>)
 800fc78:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800fc7a:	4b1b      	ldr	r3, [pc, #108]	; (800fce8 <tcp_new_port+0x84>)
 800fc7c:	881b      	ldrh	r3, [r3, #0]
 800fc7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc82:	4293      	cmp	r3, r2
 800fc84:	d103      	bne.n	800fc8e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800fc86:	4b18      	ldr	r3, [pc, #96]	; (800fce8 <tcp_new_port+0x84>)
 800fc88:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800fc8c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800fc8e:	2300      	movs	r3, #0
 800fc90:	71fb      	strb	r3, [r7, #7]
 800fc92:	e01e      	b.n	800fcd2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800fc94:	79fb      	ldrb	r3, [r7, #7]
 800fc96:	4a15      	ldr	r2, [pc, #84]	; (800fcec <tcp_new_port+0x88>)
 800fc98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	603b      	str	r3, [r7, #0]
 800fca0:	e011      	b.n	800fcc6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	8ada      	ldrh	r2, [r3, #22]
 800fca6:	4b10      	ldr	r3, [pc, #64]	; (800fce8 <tcp_new_port+0x84>)
 800fca8:	881b      	ldrh	r3, [r3, #0]
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d108      	bne.n	800fcc0 <tcp_new_port+0x5c>
        n++;
 800fcae:	88bb      	ldrh	r3, [r7, #4]
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800fcb4:	88bb      	ldrh	r3, [r7, #4]
 800fcb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fcba:	d3d8      	bcc.n	800fc6e <tcp_new_port+0xa>
          return 0;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	e00d      	b.n	800fcdc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	68db      	ldr	r3, [r3, #12]
 800fcc4:	603b      	str	r3, [r7, #0]
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d1ea      	bne.n	800fca2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800fccc:	79fb      	ldrb	r3, [r7, #7]
 800fcce:	3301      	adds	r3, #1
 800fcd0:	71fb      	strb	r3, [r7, #7]
 800fcd2:	79fb      	ldrb	r3, [r7, #7]
 800fcd4:	2b03      	cmp	r3, #3
 800fcd6:	d9dd      	bls.n	800fc94 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800fcd8:	4b03      	ldr	r3, [pc, #12]	; (800fce8 <tcp_new_port+0x84>)
 800fcda:	881b      	ldrh	r3, [r3, #0]
}
 800fcdc:	4618      	mov	r0, r3
 800fcde:	370c      	adds	r7, #12
 800fce0:	46bd      	mov	sp, r7
 800fce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce6:	4770      	bx	lr
 800fce8:	20000010 	.word	0x20000010
 800fcec:	08020b10 	.word	0x08020b10

0800fcf0 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b08a      	sub	sp, #40	; 0x28
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	60f8      	str	r0, [r7, #12]
 800fcf8:	60b9      	str	r1, [r7, #8]
 800fcfa:	603b      	str	r3, [r7, #0]
 800fcfc:	4613      	mov	r3, r2
 800fcfe:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800fd00:	2300      	movs	r3, #0
 800fd02:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d109      	bne.n	800fd1e <tcp_connect+0x2e>
 800fd0a:	4b7d      	ldr	r3, [pc, #500]	; (800ff00 <tcp_connect+0x210>)
 800fd0c:	f240 4235 	movw	r2, #1077	; 0x435
 800fd10:	497c      	ldr	r1, [pc, #496]	; (800ff04 <tcp_connect+0x214>)
 800fd12:	487d      	ldr	r0, [pc, #500]	; (800ff08 <tcp_connect+0x218>)
 800fd14:	f009 fdd4 	bl	80198c0 <iprintf>
 800fd18:	f06f 030f 	mvn.w	r3, #15
 800fd1c:	e0ec      	b.n	800fef8 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d109      	bne.n	800fd38 <tcp_connect+0x48>
 800fd24:	4b76      	ldr	r3, [pc, #472]	; (800ff00 <tcp_connect+0x210>)
 800fd26:	f240 4236 	movw	r2, #1078	; 0x436
 800fd2a:	4978      	ldr	r1, [pc, #480]	; (800ff0c <tcp_connect+0x21c>)
 800fd2c:	4876      	ldr	r0, [pc, #472]	; (800ff08 <tcp_connect+0x218>)
 800fd2e:	f009 fdc7 	bl	80198c0 <iprintf>
 800fd32:	f06f 030f 	mvn.w	r3, #15
 800fd36:	e0df      	b.n	800fef8 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	7d1b      	ldrb	r3, [r3, #20]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d009      	beq.n	800fd54 <tcp_connect+0x64>
 800fd40:	4b6f      	ldr	r3, [pc, #444]	; (800ff00 <tcp_connect+0x210>)
 800fd42:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800fd46:	4972      	ldr	r1, [pc, #456]	; (800ff10 <tcp_connect+0x220>)
 800fd48:	486f      	ldr	r0, [pc, #444]	; (800ff08 <tcp_connect+0x218>)
 800fd4a:	f009 fdb9 	bl	80198c0 <iprintf>
 800fd4e:	f06f 0309 	mvn.w	r3, #9
 800fd52:	e0d1      	b.n	800fef8 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d002      	beq.n	800fd60 <tcp_connect+0x70>
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	e000      	b.n	800fd62 <tcp_connect+0x72>
 800fd60:	2300      	movs	r3, #0
 800fd62:	68fa      	ldr	r2, [r7, #12]
 800fd64:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	88fa      	ldrh	r2, [r7, #6]
 800fd6a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	7a1b      	ldrb	r3, [r3, #8]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d006      	beq.n	800fd82 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	7a1b      	ldrb	r3, [r3, #8]
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f7fe fd3d 	bl	800e7f8 <netif_get_by_index>
 800fd7e:	6278      	str	r0, [r7, #36]	; 0x24
 800fd80:	e005      	b.n	800fd8e <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	3304      	adds	r3, #4
 800fd86:	4618      	mov	r0, r3
 800fd88:	f007 fb50 	bl	801742c <ip4_route>
 800fd8c:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800fd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d102      	bne.n	800fd9a <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800fd94:	f06f 0303 	mvn.w	r3, #3
 800fd98:	e0ae      	b.n	800fef8 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d003      	beq.n	800fda8 <tcp_connect+0xb8>
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d111      	bne.n	800fdcc <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800fda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d002      	beq.n	800fdb4 <tcp_connect+0xc4>
 800fdae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb0:	3304      	adds	r3, #4
 800fdb2:	e000      	b.n	800fdb6 <tcp_connect+0xc6>
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800fdb8:	69fb      	ldr	r3, [r7, #28]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d102      	bne.n	800fdc4 <tcp_connect+0xd4>
      return ERR_RTE;
 800fdbe:	f06f 0303 	mvn.w	r3, #3
 800fdc2:	e099      	b.n	800fef8 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800fdc4:	69fb      	ldr	r3, [r7, #28]
 800fdc6:	681a      	ldr	r2, [r3, #0]
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	8adb      	ldrh	r3, [r3, #22]
 800fdd0:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	8adb      	ldrh	r3, [r3, #22]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d10c      	bne.n	800fdf4 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800fdda:	f7ff ff43 	bl	800fc64 <tcp_new_port>
 800fdde:	4603      	mov	r3, r0
 800fde0:	461a      	mov	r2, r3
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	8adb      	ldrh	r3, [r3, #22]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d102      	bne.n	800fdf4 <tcp_connect+0x104>
      return ERR_BUF;
 800fdee:	f06f 0301 	mvn.w	r3, #1
 800fdf2:	e081      	b.n	800fef8 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800fdf4:	68f8      	ldr	r0, [r7, #12]
 800fdf6:	f001 f863 	bl	8010ec0 <tcp_next_iss>
 800fdfa:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	2200      	movs	r2, #0
 800fe00:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	697a      	ldr	r2, [r7, #20]
 800fe06:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800fe08:	697b      	ldr	r3, [r7, #20]
 800fe0a:	1e5a      	subs	r2, r3, #1
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	1e5a      	subs	r2, r3, #1
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	1e5a      	subs	r2, r3, #1
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fe26:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fe3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fe48:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	3304      	adds	r3, #4
 800fe52:	461a      	mov	r2, r3
 800fe54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fe56:	f001 f859 	bl	8010f0c <tcp_eff_send_mss_netif>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	461a      	mov	r2, r3
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	2201      	movs	r2, #1
 800fe66:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	683a      	ldr	r2, [r7, #0]
 800fe6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800fe72:	2102      	movs	r1, #2
 800fe74:	68f8      	ldr	r0, [r7, #12]
 800fe76:	f004 fab9 	bl	80143ec <tcp_enqueue_flags>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800fe7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d136      	bne.n	800fef4 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	2202      	movs	r2, #2
 800fe8a:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800fe8c:	8b7b      	ldrh	r3, [r7, #26]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d021      	beq.n	800fed6 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800fe92:	4b20      	ldr	r3, [pc, #128]	; (800ff14 <tcp_connect+0x224>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	68fa      	ldr	r2, [r7, #12]
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d105      	bne.n	800fea8 <tcp_connect+0x1b8>
 800fe9c:	4b1d      	ldr	r3, [pc, #116]	; (800ff14 <tcp_connect+0x224>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	68db      	ldr	r3, [r3, #12]
 800fea2:	4a1c      	ldr	r2, [pc, #112]	; (800ff14 <tcp_connect+0x224>)
 800fea4:	6013      	str	r3, [r2, #0]
 800fea6:	e013      	b.n	800fed0 <tcp_connect+0x1e0>
 800fea8:	4b1a      	ldr	r3, [pc, #104]	; (800ff14 <tcp_connect+0x224>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	623b      	str	r3, [r7, #32]
 800feae:	e00c      	b.n	800feca <tcp_connect+0x1da>
 800feb0:	6a3b      	ldr	r3, [r7, #32]
 800feb2:	68db      	ldr	r3, [r3, #12]
 800feb4:	68fa      	ldr	r2, [r7, #12]
 800feb6:	429a      	cmp	r2, r3
 800feb8:	d104      	bne.n	800fec4 <tcp_connect+0x1d4>
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	68da      	ldr	r2, [r3, #12]
 800febe:	6a3b      	ldr	r3, [r7, #32]
 800fec0:	60da      	str	r2, [r3, #12]
 800fec2:	e005      	b.n	800fed0 <tcp_connect+0x1e0>
 800fec4:	6a3b      	ldr	r3, [r7, #32]
 800fec6:	68db      	ldr	r3, [r3, #12]
 800fec8:	623b      	str	r3, [r7, #32]
 800feca:	6a3b      	ldr	r3, [r7, #32]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d1ef      	bne.n	800feb0 <tcp_connect+0x1c0>
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	2200      	movs	r2, #0
 800fed4:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800fed6:	4b10      	ldr	r3, [pc, #64]	; (800ff18 <tcp_connect+0x228>)
 800fed8:	681a      	ldr	r2, [r3, #0]
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	60da      	str	r2, [r3, #12]
 800fede:	4a0e      	ldr	r2, [pc, #56]	; (800ff18 <tcp_connect+0x228>)
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	6013      	str	r3, [r2, #0]
 800fee4:	f005 faf8 	bl	80154d8 <tcp_timer_needed>
 800fee8:	4b0c      	ldr	r3, [pc, #48]	; (800ff1c <tcp_connect+0x22c>)
 800feea:	2201      	movs	r2, #1
 800feec:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800feee:	68f8      	ldr	r0, [r7, #12]
 800fef0:	f004 fb6a 	bl	80145c8 <tcp_output>
  }
  return ret;
 800fef4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	3728      	adds	r7, #40	; 0x28
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}
 800ff00:	0801eaf8 	.word	0x0801eaf8
 800ff04:	0801edd4 	.word	0x0801edd4
 800ff08:	0801eb3c 	.word	0x0801eb3c
 800ff0c:	0801edf0 	.word	0x0801edf0
 800ff10:	0801ee0c 	.word	0x0801ee0c
 800ff14:	2000fd00 	.word	0x2000fd00
 800ff18:	2000fcf4 	.word	0x2000fcf4
 800ff1c:	2000fcf0 	.word	0x2000fcf0

0800ff20 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ff20:	b5b0      	push	{r4, r5, r7, lr}
 800ff22:	b090      	sub	sp, #64	; 0x40
 800ff24:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ff26:	2300      	movs	r3, #0
 800ff28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ff2c:	4b94      	ldr	r3, [pc, #592]	; (8010180 <tcp_slowtmr+0x260>)
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	3301      	adds	r3, #1
 800ff32:	4a93      	ldr	r2, [pc, #588]	; (8010180 <tcp_slowtmr+0x260>)
 800ff34:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ff36:	4b93      	ldr	r3, [pc, #588]	; (8010184 <tcp_slowtmr+0x264>)
 800ff38:	781b      	ldrb	r3, [r3, #0]
 800ff3a:	3301      	adds	r3, #1
 800ff3c:	b2da      	uxtb	r2, r3
 800ff3e:	4b91      	ldr	r3, [pc, #580]	; (8010184 <tcp_slowtmr+0x264>)
 800ff40:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ff42:	2300      	movs	r3, #0
 800ff44:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ff46:	4b90      	ldr	r3, [pc, #576]	; (8010188 <tcp_slowtmr+0x268>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ff4c:	e29d      	b.n	801048a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ff4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff50:	7d1b      	ldrb	r3, [r3, #20]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d106      	bne.n	800ff64 <tcp_slowtmr+0x44>
 800ff56:	4b8d      	ldr	r3, [pc, #564]	; (801018c <tcp_slowtmr+0x26c>)
 800ff58:	f240 42be 	movw	r2, #1214	; 0x4be
 800ff5c:	498c      	ldr	r1, [pc, #560]	; (8010190 <tcp_slowtmr+0x270>)
 800ff5e:	488d      	ldr	r0, [pc, #564]	; (8010194 <tcp_slowtmr+0x274>)
 800ff60:	f009 fcae 	bl	80198c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ff64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff66:	7d1b      	ldrb	r3, [r3, #20]
 800ff68:	2b01      	cmp	r3, #1
 800ff6a:	d106      	bne.n	800ff7a <tcp_slowtmr+0x5a>
 800ff6c:	4b87      	ldr	r3, [pc, #540]	; (801018c <tcp_slowtmr+0x26c>)
 800ff6e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ff72:	4989      	ldr	r1, [pc, #548]	; (8010198 <tcp_slowtmr+0x278>)
 800ff74:	4887      	ldr	r0, [pc, #540]	; (8010194 <tcp_slowtmr+0x274>)
 800ff76:	f009 fca3 	bl	80198c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ff7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff7c:	7d1b      	ldrb	r3, [r3, #20]
 800ff7e:	2b0a      	cmp	r3, #10
 800ff80:	d106      	bne.n	800ff90 <tcp_slowtmr+0x70>
 800ff82:	4b82      	ldr	r3, [pc, #520]	; (801018c <tcp_slowtmr+0x26c>)
 800ff84:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ff88:	4984      	ldr	r1, [pc, #528]	; (801019c <tcp_slowtmr+0x27c>)
 800ff8a:	4882      	ldr	r0, [pc, #520]	; (8010194 <tcp_slowtmr+0x274>)
 800ff8c:	f009 fc98 	bl	80198c0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ff90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff92:	7f9a      	ldrb	r2, [r3, #30]
 800ff94:	4b7b      	ldr	r3, [pc, #492]	; (8010184 <tcp_slowtmr+0x264>)
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	429a      	cmp	r2, r3
 800ff9a:	d105      	bne.n	800ffa8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ff9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff9e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ffa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffa2:	68db      	ldr	r3, [r3, #12]
 800ffa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ffa6:	e270      	b.n	801048a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ffa8:	4b76      	ldr	r3, [pc, #472]	; (8010184 <tcp_slowtmr+0x264>)
 800ffaa:	781a      	ldrb	r2, [r3, #0]
 800ffac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffae:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ffbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffbe:	7d1b      	ldrb	r3, [r3, #20]
 800ffc0:	2b02      	cmp	r3, #2
 800ffc2:	d10a      	bne.n	800ffda <tcp_slowtmr+0xba>
 800ffc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ffca:	2b05      	cmp	r3, #5
 800ffcc:	d905      	bls.n	800ffda <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ffce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ffd2:	3301      	adds	r3, #1
 800ffd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ffd8:	e11e      	b.n	8010218 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ffda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ffe0:	2b0b      	cmp	r3, #11
 800ffe2:	d905      	bls.n	800fff0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ffe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ffe8:	3301      	adds	r3, #1
 800ffea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ffee:	e113      	b.n	8010218 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800fff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d075      	beq.n	80100e6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800fffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d006      	beq.n	8010010 <tcp_slowtmr+0xf0>
 8010002:	4b62      	ldr	r3, [pc, #392]	; (801018c <tcp_slowtmr+0x26c>)
 8010004:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8010008:	4965      	ldr	r1, [pc, #404]	; (80101a0 <tcp_slowtmr+0x280>)
 801000a:	4862      	ldr	r0, [pc, #392]	; (8010194 <tcp_slowtmr+0x274>)
 801000c:	f009 fc58 	bl	80198c0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8010010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010014:	2b00      	cmp	r3, #0
 8010016:	d106      	bne.n	8010026 <tcp_slowtmr+0x106>
 8010018:	4b5c      	ldr	r3, [pc, #368]	; (801018c <tcp_slowtmr+0x26c>)
 801001a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801001e:	4961      	ldr	r1, [pc, #388]	; (80101a4 <tcp_slowtmr+0x284>)
 8010020:	485c      	ldr	r0, [pc, #368]	; (8010194 <tcp_slowtmr+0x274>)
 8010022:	f009 fc4d 	bl	80198c0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8010026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010028:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801002c:	2b0b      	cmp	r3, #11
 801002e:	d905      	bls.n	801003c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8010030:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010034:	3301      	adds	r3, #1
 8010036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801003a:	e0ed      	b.n	8010218 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801003c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801003e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010042:	3b01      	subs	r3, #1
 8010044:	4a58      	ldr	r2, [pc, #352]	; (80101a8 <tcp_slowtmr+0x288>)
 8010046:	5cd3      	ldrb	r3, [r2, r3]
 8010048:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801004a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801004c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010050:	7c7a      	ldrb	r2, [r7, #17]
 8010052:	429a      	cmp	r2, r3
 8010054:	d907      	bls.n	8010066 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8010056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010058:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801005c:	3301      	adds	r3, #1
 801005e:	b2da      	uxtb	r2, r3
 8010060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010062:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8010066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010068:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801006c:	7c7a      	ldrb	r2, [r7, #17]
 801006e:	429a      	cmp	r2, r3
 8010070:	f200 80d2 	bhi.w	8010218 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8010074:	2301      	movs	r3, #1
 8010076:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8010078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801007a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801007e:	2b00      	cmp	r3, #0
 8010080:	d108      	bne.n	8010094 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010082:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010084:	f005 f95a 	bl	801533c <tcp_zero_window_probe>
 8010088:	4603      	mov	r3, r0
 801008a:	2b00      	cmp	r3, #0
 801008c:	d014      	beq.n	80100b8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801008e:	2300      	movs	r3, #0
 8010090:	623b      	str	r3, [r7, #32]
 8010092:	e011      	b.n	80100b8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010096:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801009a:	4619      	mov	r1, r3
 801009c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801009e:	f004 f80d 	bl	80140bc <tcp_split_unsent_seg>
 80100a2:	4603      	mov	r3, r0
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d107      	bne.n	80100b8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80100a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80100aa:	f004 fa8d 	bl	80145c8 <tcp_output>
 80100ae:	4603      	mov	r3, r0
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d101      	bne.n	80100b8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80100b4:	2300      	movs	r3, #0
 80100b6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80100b8:	6a3b      	ldr	r3, [r7, #32]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	f000 80ac 	beq.w	8010218 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80100c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100c2:	2200      	movs	r2, #0
 80100c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80100c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80100ce:	2b06      	cmp	r3, #6
 80100d0:	f200 80a2 	bhi.w	8010218 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80100d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80100da:	3301      	adds	r3, #1
 80100dc:	b2da      	uxtb	r2, r3
 80100de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80100e4:	e098      	b.n	8010218 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80100e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	db0f      	blt.n	8010110 <tcp_slowtmr+0x1f0>
 80100f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80100f6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80100fa:	4293      	cmp	r3, r2
 80100fc:	d008      	beq.n	8010110 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80100fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010100:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010104:	b29b      	uxth	r3, r3
 8010106:	3301      	adds	r3, #1
 8010108:	b29b      	uxth	r3, r3
 801010a:	b21a      	sxth	r2, r3
 801010c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801010e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8010110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010112:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8010116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010118:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801011c:	429a      	cmp	r2, r3
 801011e:	db7b      	blt.n	8010218 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8010120:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010122:	f004 fd49 	bl	8014bb8 <tcp_rexmit_rto_prepare>
 8010126:	4603      	mov	r3, r0
 8010128:	2b00      	cmp	r3, #0
 801012a:	d007      	beq.n	801013c <tcp_slowtmr+0x21c>
 801012c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801012e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010130:	2b00      	cmp	r3, #0
 8010132:	d171      	bne.n	8010218 <tcp_slowtmr+0x2f8>
 8010134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010138:	2b00      	cmp	r3, #0
 801013a:	d06d      	beq.n	8010218 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801013c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801013e:	7d1b      	ldrb	r3, [r3, #20]
 8010140:	2b02      	cmp	r3, #2
 8010142:	d03a      	beq.n	80101ba <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010146:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801014a:	2b0c      	cmp	r3, #12
 801014c:	bf28      	it	cs
 801014e:	230c      	movcs	r3, #12
 8010150:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010154:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010158:	10db      	asrs	r3, r3, #3
 801015a:	b21b      	sxth	r3, r3
 801015c:	461a      	mov	r2, r3
 801015e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010160:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010164:	4413      	add	r3, r2
 8010166:	7efa      	ldrb	r2, [r7, #27]
 8010168:	4910      	ldr	r1, [pc, #64]	; (80101ac <tcp_slowtmr+0x28c>)
 801016a:	5c8a      	ldrb	r2, [r1, r2]
 801016c:	4093      	lsls	r3, r2
 801016e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8010176:	4293      	cmp	r3, r2
 8010178:	dc1a      	bgt.n	80101b0 <tcp_slowtmr+0x290>
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	b21a      	sxth	r2, r3
 801017e:	e019      	b.n	80101b4 <tcp_slowtmr+0x294>
 8010180:	2000fcf8 	.word	0x2000fcf8
 8010184:	20008802 	.word	0x20008802
 8010188:	2000fcf4 	.word	0x2000fcf4
 801018c:	0801eaf8 	.word	0x0801eaf8
 8010190:	0801ee3c 	.word	0x0801ee3c
 8010194:	0801eb3c 	.word	0x0801eb3c
 8010198:	0801ee68 	.word	0x0801ee68
 801019c:	0801ee94 	.word	0x0801ee94
 80101a0:	0801eec4 	.word	0x0801eec4
 80101a4:	0801eef8 	.word	0x0801eef8
 80101a8:	08020b08 	.word	0x08020b08
 80101ac:	08020af8 	.word	0x08020af8
 80101b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80101b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80101ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101bc:	2200      	movs	r2, #0
 80101be:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80101c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80101c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80101cc:	4293      	cmp	r3, r2
 80101ce:	bf28      	it	cs
 80101d0:	4613      	movcs	r3, r2
 80101d2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80101d4:	8a7b      	ldrh	r3, [r7, #18]
 80101d6:	085b      	lsrs	r3, r3, #1
 80101d8:	b29a      	uxth	r2, r3
 80101da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80101e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80101e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101ea:	005b      	lsls	r3, r3, #1
 80101ec:	b29b      	uxth	r3, r3
 80101ee:	429a      	cmp	r2, r3
 80101f0:	d206      	bcs.n	8010200 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80101f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101f6:	005b      	lsls	r3, r3, #1
 80101f8:	b29a      	uxth	r2, r3
 80101fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8010200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010202:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010206:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801020a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801020c:	2200      	movs	r2, #0
 801020e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8010212:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010214:	f004 fd40 	bl	8014c98 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8010218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801021a:	7d1b      	ldrb	r3, [r3, #20]
 801021c:	2b06      	cmp	r3, #6
 801021e:	d111      	bne.n	8010244 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8010220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010222:	8b5b      	ldrh	r3, [r3, #26]
 8010224:	f003 0310 	and.w	r3, r3, #16
 8010228:	2b00      	cmp	r3, #0
 801022a:	d00b      	beq.n	8010244 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801022c:	4b9c      	ldr	r3, [pc, #624]	; (80104a0 <tcp_slowtmr+0x580>)
 801022e:	681a      	ldr	r2, [r3, #0]
 8010230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010232:	6a1b      	ldr	r3, [r3, #32]
 8010234:	1ad3      	subs	r3, r2, r3
 8010236:	2b28      	cmp	r3, #40	; 0x28
 8010238:	d904      	bls.n	8010244 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801023a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801023e:	3301      	adds	r3, #1
 8010240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010246:	7a5b      	ldrb	r3, [r3, #9]
 8010248:	f003 0308 	and.w	r3, r3, #8
 801024c:	2b00      	cmp	r3, #0
 801024e:	d04a      	beq.n	80102e6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8010250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010252:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010254:	2b04      	cmp	r3, #4
 8010256:	d003      	beq.n	8010260 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8010258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801025a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801025c:	2b07      	cmp	r3, #7
 801025e:	d142      	bne.n	80102e6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010260:	4b8f      	ldr	r3, [pc, #572]	; (80104a0 <tcp_slowtmr+0x580>)
 8010262:	681a      	ldr	r2, [r3, #0]
 8010264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010266:	6a1b      	ldr	r3, [r3, #32]
 8010268:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801026a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801026c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8010270:	4b8c      	ldr	r3, [pc, #560]	; (80104a4 <tcp_slowtmr+0x584>)
 8010272:	440b      	add	r3, r1
 8010274:	498c      	ldr	r1, [pc, #560]	; (80104a8 <tcp_slowtmr+0x588>)
 8010276:	fba1 1303 	umull	r1, r3, r1, r3
 801027a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801027c:	429a      	cmp	r2, r3
 801027e:	d90a      	bls.n	8010296 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8010280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010284:	3301      	adds	r3, #1
 8010286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801028a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801028e:	3301      	adds	r3, #1
 8010290:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010294:	e027      	b.n	80102e6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010296:	4b82      	ldr	r3, [pc, #520]	; (80104a0 <tcp_slowtmr+0x580>)
 8010298:	681a      	ldr	r2, [r3, #0]
 801029a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801029c:	6a1b      	ldr	r3, [r3, #32]
 801029e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80102a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80102a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80102ac:	4618      	mov	r0, r3
 80102ae:	4b7f      	ldr	r3, [pc, #508]	; (80104ac <tcp_slowtmr+0x58c>)
 80102b0:	fb03 f300 	mul.w	r3, r3, r0
 80102b4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80102b6:	497c      	ldr	r1, [pc, #496]	; (80104a8 <tcp_slowtmr+0x588>)
 80102b8:	fba1 1303 	umull	r1, r3, r1, r3
 80102bc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80102be:	429a      	cmp	r2, r3
 80102c0:	d911      	bls.n	80102e6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80102c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80102c4:	f004 fffa 	bl	80152bc <tcp_keepalive>
 80102c8:	4603      	mov	r3, r0
 80102ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80102ce:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d107      	bne.n	80102e6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80102d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102d8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80102dc:	3301      	adds	r3, #1
 80102de:	b2da      	uxtb	r2, r3
 80102e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102e2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80102e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d011      	beq.n	8010312 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80102ee:	4b6c      	ldr	r3, [pc, #432]	; (80104a0 <tcp_slowtmr+0x580>)
 80102f0:	681a      	ldr	r2, [r3, #0]
 80102f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102f4:	6a1b      	ldr	r3, [r3, #32]
 80102f6:	1ad2      	subs	r2, r2, r3
 80102f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102fa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80102fe:	4619      	mov	r1, r3
 8010300:	460b      	mov	r3, r1
 8010302:	005b      	lsls	r3, r3, #1
 8010304:	440b      	add	r3, r1
 8010306:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010308:	429a      	cmp	r2, r3
 801030a:	d302      	bcc.n	8010312 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801030c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801030e:	f000 fea7 	bl	8011060 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8010312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010314:	7d1b      	ldrb	r3, [r3, #20]
 8010316:	2b03      	cmp	r3, #3
 8010318:	d10b      	bne.n	8010332 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801031a:	4b61      	ldr	r3, [pc, #388]	; (80104a0 <tcp_slowtmr+0x580>)
 801031c:	681a      	ldr	r2, [r3, #0]
 801031e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010320:	6a1b      	ldr	r3, [r3, #32]
 8010322:	1ad3      	subs	r3, r2, r3
 8010324:	2b28      	cmp	r3, #40	; 0x28
 8010326:	d904      	bls.n	8010332 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8010328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801032c:	3301      	adds	r3, #1
 801032e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8010332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010334:	7d1b      	ldrb	r3, [r3, #20]
 8010336:	2b09      	cmp	r3, #9
 8010338:	d10b      	bne.n	8010352 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801033a:	4b59      	ldr	r3, [pc, #356]	; (80104a0 <tcp_slowtmr+0x580>)
 801033c:	681a      	ldr	r2, [r3, #0]
 801033e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010340:	6a1b      	ldr	r3, [r3, #32]
 8010342:	1ad3      	subs	r3, r2, r3
 8010344:	2bf0      	cmp	r3, #240	; 0xf0
 8010346:	d904      	bls.n	8010352 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8010348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801034c:	3301      	adds	r3, #1
 801034e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010356:	2b00      	cmp	r3, #0
 8010358:	d060      	beq.n	801041c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801035a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801035c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010360:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8010362:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010364:	f000 fcc8 	bl	8010cf8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8010368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801036a:	2b00      	cmp	r3, #0
 801036c:	d010      	beq.n	8010390 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801036e:	4b50      	ldr	r3, [pc, #320]	; (80104b0 <tcp_slowtmr+0x590>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010374:	429a      	cmp	r2, r3
 8010376:	d106      	bne.n	8010386 <tcp_slowtmr+0x466>
 8010378:	4b4e      	ldr	r3, [pc, #312]	; (80104b4 <tcp_slowtmr+0x594>)
 801037a:	f240 526d 	movw	r2, #1389	; 0x56d
 801037e:	494e      	ldr	r1, [pc, #312]	; (80104b8 <tcp_slowtmr+0x598>)
 8010380:	484e      	ldr	r0, [pc, #312]	; (80104bc <tcp_slowtmr+0x59c>)
 8010382:	f009 fa9d 	bl	80198c0 <iprintf>
        prev->next = pcb->next;
 8010386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010388:	68da      	ldr	r2, [r3, #12]
 801038a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801038c:	60da      	str	r2, [r3, #12]
 801038e:	e00f      	b.n	80103b0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010390:	4b47      	ldr	r3, [pc, #284]	; (80104b0 <tcp_slowtmr+0x590>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010396:	429a      	cmp	r2, r3
 8010398:	d006      	beq.n	80103a8 <tcp_slowtmr+0x488>
 801039a:	4b46      	ldr	r3, [pc, #280]	; (80104b4 <tcp_slowtmr+0x594>)
 801039c:	f240 5271 	movw	r2, #1393	; 0x571
 80103a0:	4947      	ldr	r1, [pc, #284]	; (80104c0 <tcp_slowtmr+0x5a0>)
 80103a2:	4846      	ldr	r0, [pc, #280]	; (80104bc <tcp_slowtmr+0x59c>)
 80103a4:	f009 fa8c 	bl	80198c0 <iprintf>
        tcp_active_pcbs = pcb->next;
 80103a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103aa:	68db      	ldr	r3, [r3, #12]
 80103ac:	4a40      	ldr	r2, [pc, #256]	; (80104b0 <tcp_slowtmr+0x590>)
 80103ae:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80103b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d013      	beq.n	80103e0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80103b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80103bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103be:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80103c0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80103c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c4:	3304      	adds	r3, #4
 80103c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103c8:	8ad2      	ldrh	r2, [r2, #22]
 80103ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80103cc:	8b09      	ldrh	r1, [r1, #24]
 80103ce:	9102      	str	r1, [sp, #8]
 80103d0:	9201      	str	r2, [sp, #4]
 80103d2:	9300      	str	r3, [sp, #0]
 80103d4:	462b      	mov	r3, r5
 80103d6:	4622      	mov	r2, r4
 80103d8:	4601      	mov	r1, r0
 80103da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103dc:	f004 feba 	bl	8015154 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80103e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e2:	691b      	ldr	r3, [r3, #16]
 80103e4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80103e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e8:	7d1b      	ldrb	r3, [r3, #20]
 80103ea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80103ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80103f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f2:	68db      	ldr	r3, [r3, #12]
 80103f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80103f6:	6838      	ldr	r0, [r7, #0]
 80103f8:	f7ff f844 	bl	800f484 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80103fc:	4b31      	ldr	r3, [pc, #196]	; (80104c4 <tcp_slowtmr+0x5a4>)
 80103fe:	2200      	movs	r2, #0
 8010400:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d004      	beq.n	8010412 <tcp_slowtmr+0x4f2>
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	f06f 010c 	mvn.w	r1, #12
 801040e:	68b8      	ldr	r0, [r7, #8]
 8010410:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010412:	4b2c      	ldr	r3, [pc, #176]	; (80104c4 <tcp_slowtmr+0x5a4>)
 8010414:	781b      	ldrb	r3, [r3, #0]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d037      	beq.n	801048a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801041a:	e592      	b.n	800ff42 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801041c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801041e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010422:	68db      	ldr	r3, [r3, #12]
 8010424:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8010426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010428:	7f1b      	ldrb	r3, [r3, #28]
 801042a:	3301      	adds	r3, #1
 801042c:	b2da      	uxtb	r2, r3
 801042e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010430:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010434:	7f1a      	ldrb	r2, [r3, #28]
 8010436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010438:	7f5b      	ldrb	r3, [r3, #29]
 801043a:	429a      	cmp	r2, r3
 801043c:	d325      	bcc.n	801048a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801043e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010440:	2200      	movs	r2, #0
 8010442:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8010444:	4b1f      	ldr	r3, [pc, #124]	; (80104c4 <tcp_slowtmr+0x5a4>)
 8010446:	2200      	movs	r2, #0
 8010448:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801044a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801044c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010450:	2b00      	cmp	r3, #0
 8010452:	d00b      	beq.n	801046c <tcp_slowtmr+0x54c>
 8010454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010456:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801045a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801045c:	6912      	ldr	r2, [r2, #16]
 801045e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010460:	4610      	mov	r0, r2
 8010462:	4798      	blx	r3
 8010464:	4603      	mov	r3, r0
 8010466:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801046a:	e002      	b.n	8010472 <tcp_slowtmr+0x552>
 801046c:	2300      	movs	r3, #0
 801046e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8010472:	4b14      	ldr	r3, [pc, #80]	; (80104c4 <tcp_slowtmr+0x5a4>)
 8010474:	781b      	ldrb	r3, [r3, #0]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d000      	beq.n	801047c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801047a:	e562      	b.n	800ff42 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801047c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010480:	2b00      	cmp	r3, #0
 8010482:	d102      	bne.n	801048a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8010484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010486:	f004 f89f 	bl	80145c8 <tcp_output>
  while (pcb != NULL) {
 801048a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801048c:	2b00      	cmp	r3, #0
 801048e:	f47f ad5e 	bne.w	800ff4e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010492:	2300      	movs	r3, #0
 8010494:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8010496:	4b0c      	ldr	r3, [pc, #48]	; (80104c8 <tcp_slowtmr+0x5a8>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801049c:	e069      	b.n	8010572 <tcp_slowtmr+0x652>
 801049e:	bf00      	nop
 80104a0:	2000fcf8 	.word	0x2000fcf8
 80104a4:	000a4cb8 	.word	0x000a4cb8
 80104a8:	10624dd3 	.word	0x10624dd3
 80104ac:	000124f8 	.word	0x000124f8
 80104b0:	2000fcf4 	.word	0x2000fcf4
 80104b4:	0801eaf8 	.word	0x0801eaf8
 80104b8:	0801ef30 	.word	0x0801ef30
 80104bc:	0801eb3c 	.word	0x0801eb3c
 80104c0:	0801ef5c 	.word	0x0801ef5c
 80104c4:	2000fcf0 	.word	0x2000fcf0
 80104c8:	2000fd04 	.word	0x2000fd04
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80104cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ce:	7d1b      	ldrb	r3, [r3, #20]
 80104d0:	2b0a      	cmp	r3, #10
 80104d2:	d006      	beq.n	80104e2 <tcp_slowtmr+0x5c2>
 80104d4:	4b2a      	ldr	r3, [pc, #168]	; (8010580 <tcp_slowtmr+0x660>)
 80104d6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80104da:	492a      	ldr	r1, [pc, #168]	; (8010584 <tcp_slowtmr+0x664>)
 80104dc:	482a      	ldr	r0, [pc, #168]	; (8010588 <tcp_slowtmr+0x668>)
 80104de:	f009 f9ef 	bl	80198c0 <iprintf>
    pcb_remove = 0;
 80104e2:	2300      	movs	r3, #0
 80104e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80104e8:	4b28      	ldr	r3, [pc, #160]	; (801058c <tcp_slowtmr+0x66c>)
 80104ea:	681a      	ldr	r2, [r3, #0]
 80104ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ee:	6a1b      	ldr	r3, [r3, #32]
 80104f0:	1ad3      	subs	r3, r2, r3
 80104f2:	2bf0      	cmp	r3, #240	; 0xf0
 80104f4:	d904      	bls.n	8010500 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80104f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80104fa:	3301      	adds	r3, #1
 80104fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010504:	2b00      	cmp	r3, #0
 8010506:	d02f      	beq.n	8010568 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010508:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801050a:	f000 fbf5 	bl	8010cf8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801050e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010510:	2b00      	cmp	r3, #0
 8010512:	d010      	beq.n	8010536 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010514:	4b1e      	ldr	r3, [pc, #120]	; (8010590 <tcp_slowtmr+0x670>)
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801051a:	429a      	cmp	r2, r3
 801051c:	d106      	bne.n	801052c <tcp_slowtmr+0x60c>
 801051e:	4b18      	ldr	r3, [pc, #96]	; (8010580 <tcp_slowtmr+0x660>)
 8010520:	f240 52af 	movw	r2, #1455	; 0x5af
 8010524:	491b      	ldr	r1, [pc, #108]	; (8010594 <tcp_slowtmr+0x674>)
 8010526:	4818      	ldr	r0, [pc, #96]	; (8010588 <tcp_slowtmr+0x668>)
 8010528:	f009 f9ca 	bl	80198c0 <iprintf>
        prev->next = pcb->next;
 801052c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801052e:	68da      	ldr	r2, [r3, #12]
 8010530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010532:	60da      	str	r2, [r3, #12]
 8010534:	e00f      	b.n	8010556 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010536:	4b16      	ldr	r3, [pc, #88]	; (8010590 <tcp_slowtmr+0x670>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801053c:	429a      	cmp	r2, r3
 801053e:	d006      	beq.n	801054e <tcp_slowtmr+0x62e>
 8010540:	4b0f      	ldr	r3, [pc, #60]	; (8010580 <tcp_slowtmr+0x660>)
 8010542:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8010546:	4914      	ldr	r1, [pc, #80]	; (8010598 <tcp_slowtmr+0x678>)
 8010548:	480f      	ldr	r0, [pc, #60]	; (8010588 <tcp_slowtmr+0x668>)
 801054a:	f009 f9b9 	bl	80198c0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801054e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010550:	68db      	ldr	r3, [r3, #12]
 8010552:	4a0f      	ldr	r2, [pc, #60]	; (8010590 <tcp_slowtmr+0x670>)
 8010554:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010558:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801055a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801055c:	68db      	ldr	r3, [r3, #12]
 801055e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010560:	69f8      	ldr	r0, [r7, #28]
 8010562:	f7fe ff8f 	bl	800f484 <tcp_free>
 8010566:	e004      	b.n	8010572 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8010568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801056a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801056c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801056e:	68db      	ldr	r3, [r3, #12]
 8010570:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010574:	2b00      	cmp	r3, #0
 8010576:	d1a9      	bne.n	80104cc <tcp_slowtmr+0x5ac>
    }
  }
}
 8010578:	bf00      	nop
 801057a:	3730      	adds	r7, #48	; 0x30
 801057c:	46bd      	mov	sp, r7
 801057e:	bdb0      	pop	{r4, r5, r7, pc}
 8010580:	0801eaf8 	.word	0x0801eaf8
 8010584:	0801ef88 	.word	0x0801ef88
 8010588:	0801eb3c 	.word	0x0801eb3c
 801058c:	2000fcf8 	.word	0x2000fcf8
 8010590:	2000fd04 	.word	0x2000fd04
 8010594:	0801efb8 	.word	0x0801efb8
 8010598:	0801efe0 	.word	0x0801efe0

0801059c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b082      	sub	sp, #8
 80105a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80105a2:	4b2d      	ldr	r3, [pc, #180]	; (8010658 <tcp_fasttmr+0xbc>)
 80105a4:	781b      	ldrb	r3, [r3, #0]
 80105a6:	3301      	adds	r3, #1
 80105a8:	b2da      	uxtb	r2, r3
 80105aa:	4b2b      	ldr	r3, [pc, #172]	; (8010658 <tcp_fasttmr+0xbc>)
 80105ac:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80105ae:	4b2b      	ldr	r3, [pc, #172]	; (801065c <tcp_fasttmr+0xc0>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80105b4:	e048      	b.n	8010648 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	7f9a      	ldrb	r2, [r3, #30]
 80105ba:	4b27      	ldr	r3, [pc, #156]	; (8010658 <tcp_fasttmr+0xbc>)
 80105bc:	781b      	ldrb	r3, [r3, #0]
 80105be:	429a      	cmp	r2, r3
 80105c0:	d03f      	beq.n	8010642 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80105c2:	4b25      	ldr	r3, [pc, #148]	; (8010658 <tcp_fasttmr+0xbc>)
 80105c4:	781a      	ldrb	r2, [r3, #0]
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	8b5b      	ldrh	r3, [r3, #26]
 80105ce:	f003 0301 	and.w	r3, r3, #1
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d010      	beq.n	80105f8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	8b5b      	ldrh	r3, [r3, #26]
 80105da:	f043 0302 	orr.w	r3, r3, #2
 80105de:	b29a      	uxth	r2, r3
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80105e4:	6878      	ldr	r0, [r7, #4]
 80105e6:	f003 ffef 	bl	80145c8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	8b5b      	ldrh	r3, [r3, #26]
 80105ee:	f023 0303 	bic.w	r3, r3, #3
 80105f2:	b29a      	uxth	r2, r3
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	8b5b      	ldrh	r3, [r3, #26]
 80105fc:	f003 0308 	and.w	r3, r3, #8
 8010600:	2b00      	cmp	r3, #0
 8010602:	d009      	beq.n	8010618 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	8b5b      	ldrh	r3, [r3, #26]
 8010608:	f023 0308 	bic.w	r3, r3, #8
 801060c:	b29a      	uxth	r2, r3
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f7ff f8c6 	bl	800f7a4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	68db      	ldr	r3, [r3, #12]
 801061c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010622:	2b00      	cmp	r3, #0
 8010624:	d00a      	beq.n	801063c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010626:	4b0e      	ldr	r3, [pc, #56]	; (8010660 <tcp_fasttmr+0xc4>)
 8010628:	2200      	movs	r2, #0
 801062a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801062c:	6878      	ldr	r0, [r7, #4]
 801062e:	f000 f819 	bl	8010664 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010632:	4b0b      	ldr	r3, [pc, #44]	; (8010660 <tcp_fasttmr+0xc4>)
 8010634:	781b      	ldrb	r3, [r3, #0]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d000      	beq.n	801063c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801063a:	e7b8      	b.n	80105ae <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	607b      	str	r3, [r7, #4]
 8010640:	e002      	b.n	8010648 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	68db      	ldr	r3, [r3, #12]
 8010646:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d1b3      	bne.n	80105b6 <tcp_fasttmr+0x1a>
    }
  }
}
 801064e:	bf00      	nop
 8010650:	3708      	adds	r7, #8
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}
 8010656:	bf00      	nop
 8010658:	20008802 	.word	0x20008802
 801065c:	2000fcf4 	.word	0x2000fcf4
 8010660:	2000fcf0 	.word	0x2000fcf0

08010664 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010664:	b590      	push	{r4, r7, lr}
 8010666:	b085      	sub	sp, #20
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d109      	bne.n	8010686 <tcp_process_refused_data+0x22>
 8010672:	4b37      	ldr	r3, [pc, #220]	; (8010750 <tcp_process_refused_data+0xec>)
 8010674:	f240 6209 	movw	r2, #1545	; 0x609
 8010678:	4936      	ldr	r1, [pc, #216]	; (8010754 <tcp_process_refused_data+0xf0>)
 801067a:	4837      	ldr	r0, [pc, #220]	; (8010758 <tcp_process_refused_data+0xf4>)
 801067c:	f009 f920 	bl	80198c0 <iprintf>
 8010680:	f06f 030f 	mvn.w	r3, #15
 8010684:	e060      	b.n	8010748 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801068a:	7b5b      	ldrb	r3, [r3, #13]
 801068c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010692:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2200      	movs	r2, #0
 8010698:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d00b      	beq.n	80106bc <tcp_process_refused_data+0x58>
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	6918      	ldr	r0, [r3, #16]
 80106ae:	2300      	movs	r3, #0
 80106b0:	68ba      	ldr	r2, [r7, #8]
 80106b2:	6879      	ldr	r1, [r7, #4]
 80106b4:	47a0      	blx	r4
 80106b6:	4603      	mov	r3, r0
 80106b8:	73fb      	strb	r3, [r7, #15]
 80106ba:	e007      	b.n	80106cc <tcp_process_refused_data+0x68>
 80106bc:	2300      	movs	r3, #0
 80106be:	68ba      	ldr	r2, [r7, #8]
 80106c0:	6879      	ldr	r1, [r7, #4]
 80106c2:	2000      	movs	r0, #0
 80106c4:	f000 f8a2 	bl	801080c <tcp_recv_null>
 80106c8:	4603      	mov	r3, r0
 80106ca:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80106cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d12a      	bne.n	801072a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80106d4:	7bbb      	ldrb	r3, [r7, #14]
 80106d6:	f003 0320 	and.w	r3, r3, #32
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d033      	beq.n	8010746 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80106e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80106e6:	d005      	beq.n	80106f4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80106ec:	3301      	adds	r3, #1
 80106ee:	b29a      	uxth	r2, r3
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d00b      	beq.n	8010716 <tcp_process_refused_data+0xb2>
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	6918      	ldr	r0, [r3, #16]
 8010708:	2300      	movs	r3, #0
 801070a:	2200      	movs	r2, #0
 801070c:	6879      	ldr	r1, [r7, #4]
 801070e:	47a0      	blx	r4
 8010710:	4603      	mov	r3, r0
 8010712:	73fb      	strb	r3, [r7, #15]
 8010714:	e001      	b.n	801071a <tcp_process_refused_data+0xb6>
 8010716:	2300      	movs	r3, #0
 8010718:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801071a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801071e:	f113 0f0d 	cmn.w	r3, #13
 8010722:	d110      	bne.n	8010746 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010724:	f06f 030c 	mvn.w	r3, #12
 8010728:	e00e      	b.n	8010748 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801072a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801072e:	f113 0f0d 	cmn.w	r3, #13
 8010732:	d102      	bne.n	801073a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010734:	f06f 030c 	mvn.w	r3, #12
 8010738:	e006      	b.n	8010748 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	68ba      	ldr	r2, [r7, #8]
 801073e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8010740:	f06f 0304 	mvn.w	r3, #4
 8010744:	e000      	b.n	8010748 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8010746:	2300      	movs	r3, #0
}
 8010748:	4618      	mov	r0, r3
 801074a:	3714      	adds	r7, #20
 801074c:	46bd      	mov	sp, r7
 801074e:	bd90      	pop	{r4, r7, pc}
 8010750:	0801eaf8 	.word	0x0801eaf8
 8010754:	0801f008 	.word	0x0801f008
 8010758:	0801eb3c 	.word	0x0801eb3c

0801075c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b084      	sub	sp, #16
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010764:	e007      	b.n	8010776 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f000 f809 	bl	8010784 <tcp_seg_free>
    seg = next;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d1f4      	bne.n	8010766 <tcp_segs_free+0xa>
  }
}
 801077c:	bf00      	nop
 801077e:	3710      	adds	r7, #16
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}

08010784 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d00c      	beq.n	80107ac <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	685b      	ldr	r3, [r3, #4]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d004      	beq.n	80107a4 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	685b      	ldr	r3, [r3, #4]
 801079e:	4618      	mov	r0, r3
 80107a0:	f7fe fbb4 	bl	800ef0c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80107a4:	6879      	ldr	r1, [r7, #4]
 80107a6:	2003      	movs	r0, #3
 80107a8:	f7fd fd88 	bl	800e2bc <memp_free>
  }
}
 80107ac:	bf00      	nop
 80107ae:	3708      	adds	r7, #8
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}

080107b4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b084      	sub	sp, #16
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d106      	bne.n	80107d0 <tcp_seg_copy+0x1c>
 80107c2:	4b0f      	ldr	r3, [pc, #60]	; (8010800 <tcp_seg_copy+0x4c>)
 80107c4:	f240 6282 	movw	r2, #1666	; 0x682
 80107c8:	490e      	ldr	r1, [pc, #56]	; (8010804 <tcp_seg_copy+0x50>)
 80107ca:	480f      	ldr	r0, [pc, #60]	; (8010808 <tcp_seg_copy+0x54>)
 80107cc:	f009 f878 	bl	80198c0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80107d0:	2003      	movs	r0, #3
 80107d2:	f7fd fd21 	bl	800e218 <memp_malloc>
 80107d6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d101      	bne.n	80107e2 <tcp_seg_copy+0x2e>
    return NULL;
 80107de:	2300      	movs	r3, #0
 80107e0:	e00a      	b.n	80107f8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80107e2:	2210      	movs	r2, #16
 80107e4:	6879      	ldr	r1, [r7, #4]
 80107e6:	68f8      	ldr	r0, [r7, #12]
 80107e8:	f008 fa2a 	bl	8018c40 <memcpy>
  pbuf_ref(cseg->p);
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	685b      	ldr	r3, [r3, #4]
 80107f0:	4618      	mov	r0, r3
 80107f2:	f7fe fc31 	bl	800f058 <pbuf_ref>
  return cseg;
 80107f6:	68fb      	ldr	r3, [r7, #12]
}
 80107f8:	4618      	mov	r0, r3
 80107fa:	3710      	adds	r7, #16
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}
 8010800:	0801eaf8 	.word	0x0801eaf8
 8010804:	0801f04c 	.word	0x0801f04c
 8010808:	0801eb3c 	.word	0x0801eb3c

0801080c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b084      	sub	sp, #16
 8010810:	af00      	add	r7, sp, #0
 8010812:	60f8      	str	r0, [r7, #12]
 8010814:	60b9      	str	r1, [r7, #8]
 8010816:	607a      	str	r2, [r7, #4]
 8010818:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801081a:	68bb      	ldr	r3, [r7, #8]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d109      	bne.n	8010834 <tcp_recv_null+0x28>
 8010820:	4b12      	ldr	r3, [pc, #72]	; (801086c <tcp_recv_null+0x60>)
 8010822:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010826:	4912      	ldr	r1, [pc, #72]	; (8010870 <tcp_recv_null+0x64>)
 8010828:	4812      	ldr	r0, [pc, #72]	; (8010874 <tcp_recv_null+0x68>)
 801082a:	f009 f849 	bl	80198c0 <iprintf>
 801082e:	f06f 030f 	mvn.w	r3, #15
 8010832:	e016      	b.n	8010862 <tcp_recv_null+0x56>

  if (p != NULL) {
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d009      	beq.n	801084e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	891b      	ldrh	r3, [r3, #8]
 801083e:	4619      	mov	r1, r3
 8010840:	68b8      	ldr	r0, [r7, #8]
 8010842:	f7ff f9bf 	bl	800fbc4 <tcp_recved>
    pbuf_free(p);
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	f7fe fb60 	bl	800ef0c <pbuf_free>
 801084c:	e008      	b.n	8010860 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801084e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d104      	bne.n	8010860 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010856:	68b8      	ldr	r0, [r7, #8]
 8010858:	f7ff f80a 	bl	800f870 <tcp_close>
 801085c:	4603      	mov	r3, r0
 801085e:	e000      	b.n	8010862 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010860:	2300      	movs	r3, #0
}
 8010862:	4618      	mov	r0, r3
 8010864:	3710      	adds	r7, #16
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}
 801086a:	bf00      	nop
 801086c:	0801eaf8 	.word	0x0801eaf8
 8010870:	0801f068 	.word	0x0801f068
 8010874:	0801eb3c 	.word	0x0801eb3c

08010878 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b086      	sub	sp, #24
 801087c:	af00      	add	r7, sp, #0
 801087e:	4603      	mov	r3, r0
 8010880:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010886:	2b00      	cmp	r3, #0
 8010888:	db01      	blt.n	801088e <tcp_kill_prio+0x16>
 801088a:	79fb      	ldrb	r3, [r7, #7]
 801088c:	e000      	b.n	8010890 <tcp_kill_prio+0x18>
 801088e:	237f      	movs	r3, #127	; 0x7f
 8010890:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010892:	7afb      	ldrb	r3, [r7, #11]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d034      	beq.n	8010902 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010898:	7afb      	ldrb	r3, [r7, #11]
 801089a:	3b01      	subs	r3, #1
 801089c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801089e:	2300      	movs	r3, #0
 80108a0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80108a2:	2300      	movs	r3, #0
 80108a4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80108a6:	4b19      	ldr	r3, [pc, #100]	; (801090c <tcp_kill_prio+0x94>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	617b      	str	r3, [r7, #20]
 80108ac:	e01f      	b.n	80108ee <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80108ae:	697b      	ldr	r3, [r7, #20]
 80108b0:	7d5b      	ldrb	r3, [r3, #21]
 80108b2:	7afa      	ldrb	r2, [r7, #11]
 80108b4:	429a      	cmp	r2, r3
 80108b6:	d80c      	bhi.n	80108d2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80108b8:	697b      	ldr	r3, [r7, #20]
 80108ba:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80108bc:	7afa      	ldrb	r2, [r7, #11]
 80108be:	429a      	cmp	r2, r3
 80108c0:	d112      	bne.n	80108e8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80108c2:	4b13      	ldr	r3, [pc, #76]	; (8010910 <tcp_kill_prio+0x98>)
 80108c4:	681a      	ldr	r2, [r3, #0]
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	6a1b      	ldr	r3, [r3, #32]
 80108ca:	1ad3      	subs	r3, r2, r3
 80108cc:	68fa      	ldr	r2, [r7, #12]
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d80a      	bhi.n	80108e8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80108d2:	4b0f      	ldr	r3, [pc, #60]	; (8010910 <tcp_kill_prio+0x98>)
 80108d4:	681a      	ldr	r2, [r3, #0]
 80108d6:	697b      	ldr	r3, [r7, #20]
 80108d8:	6a1b      	ldr	r3, [r3, #32]
 80108da:	1ad3      	subs	r3, r2, r3
 80108dc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80108de:	697b      	ldr	r3, [r7, #20]
 80108e0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80108e2:	697b      	ldr	r3, [r7, #20]
 80108e4:	7d5b      	ldrb	r3, [r3, #21]
 80108e6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80108e8:	697b      	ldr	r3, [r7, #20]
 80108ea:	68db      	ldr	r3, [r3, #12]
 80108ec:	617b      	str	r3, [r7, #20]
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d1dc      	bne.n	80108ae <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80108f4:	693b      	ldr	r3, [r7, #16]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d004      	beq.n	8010904 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80108fa:	6938      	ldr	r0, [r7, #16]
 80108fc:	f7ff f8fc 	bl	800faf8 <tcp_abort>
 8010900:	e000      	b.n	8010904 <tcp_kill_prio+0x8c>
    return;
 8010902:	bf00      	nop
  }
}
 8010904:	3718      	adds	r7, #24
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}
 801090a:	bf00      	nop
 801090c:	2000fcf4 	.word	0x2000fcf4
 8010910:	2000fcf8 	.word	0x2000fcf8

08010914 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b086      	sub	sp, #24
 8010918:	af00      	add	r7, sp, #0
 801091a:	4603      	mov	r3, r0
 801091c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801091e:	79fb      	ldrb	r3, [r7, #7]
 8010920:	2b08      	cmp	r3, #8
 8010922:	d009      	beq.n	8010938 <tcp_kill_state+0x24>
 8010924:	79fb      	ldrb	r3, [r7, #7]
 8010926:	2b09      	cmp	r3, #9
 8010928:	d006      	beq.n	8010938 <tcp_kill_state+0x24>
 801092a:	4b1a      	ldr	r3, [pc, #104]	; (8010994 <tcp_kill_state+0x80>)
 801092c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010930:	4919      	ldr	r1, [pc, #100]	; (8010998 <tcp_kill_state+0x84>)
 8010932:	481a      	ldr	r0, [pc, #104]	; (801099c <tcp_kill_state+0x88>)
 8010934:	f008 ffc4 	bl	80198c0 <iprintf>

  inactivity = 0;
 8010938:	2300      	movs	r3, #0
 801093a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801093c:	2300      	movs	r3, #0
 801093e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010940:	4b17      	ldr	r3, [pc, #92]	; (80109a0 <tcp_kill_state+0x8c>)
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	617b      	str	r3, [r7, #20]
 8010946:	e017      	b.n	8010978 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	7d1b      	ldrb	r3, [r3, #20]
 801094c:	79fa      	ldrb	r2, [r7, #7]
 801094e:	429a      	cmp	r2, r3
 8010950:	d10f      	bne.n	8010972 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010952:	4b14      	ldr	r3, [pc, #80]	; (80109a4 <tcp_kill_state+0x90>)
 8010954:	681a      	ldr	r2, [r3, #0]
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	6a1b      	ldr	r3, [r3, #32]
 801095a:	1ad3      	subs	r3, r2, r3
 801095c:	68fa      	ldr	r2, [r7, #12]
 801095e:	429a      	cmp	r2, r3
 8010960:	d807      	bhi.n	8010972 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010962:	4b10      	ldr	r3, [pc, #64]	; (80109a4 <tcp_kill_state+0x90>)
 8010964:	681a      	ldr	r2, [r3, #0]
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	6a1b      	ldr	r3, [r3, #32]
 801096a:	1ad3      	subs	r3, r2, r3
 801096c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801096e:	697b      	ldr	r3, [r7, #20]
 8010970:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010972:	697b      	ldr	r3, [r7, #20]
 8010974:	68db      	ldr	r3, [r3, #12]
 8010976:	617b      	str	r3, [r7, #20]
 8010978:	697b      	ldr	r3, [r7, #20]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d1e4      	bne.n	8010948 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801097e:	693b      	ldr	r3, [r7, #16]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d003      	beq.n	801098c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010984:	2100      	movs	r1, #0
 8010986:	6938      	ldr	r0, [r7, #16]
 8010988:	f7fe fff8 	bl	800f97c <tcp_abandon>
  }
}
 801098c:	bf00      	nop
 801098e:	3718      	adds	r7, #24
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}
 8010994:	0801eaf8 	.word	0x0801eaf8
 8010998:	0801f084 	.word	0x0801f084
 801099c:	0801eb3c 	.word	0x0801eb3c
 80109a0:	2000fcf4 	.word	0x2000fcf4
 80109a4:	2000fcf8 	.word	0x2000fcf8

080109a8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b084      	sub	sp, #16
 80109ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80109ae:	2300      	movs	r3, #0
 80109b0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80109b2:	2300      	movs	r3, #0
 80109b4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80109b6:	4b12      	ldr	r3, [pc, #72]	; (8010a00 <tcp_kill_timewait+0x58>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	60fb      	str	r3, [r7, #12]
 80109bc:	e012      	b.n	80109e4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80109be:	4b11      	ldr	r3, [pc, #68]	; (8010a04 <tcp_kill_timewait+0x5c>)
 80109c0:	681a      	ldr	r2, [r3, #0]
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	6a1b      	ldr	r3, [r3, #32]
 80109c6:	1ad3      	subs	r3, r2, r3
 80109c8:	687a      	ldr	r2, [r7, #4]
 80109ca:	429a      	cmp	r2, r3
 80109cc:	d807      	bhi.n	80109de <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80109ce:	4b0d      	ldr	r3, [pc, #52]	; (8010a04 <tcp_kill_timewait+0x5c>)
 80109d0:	681a      	ldr	r2, [r3, #0]
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	6a1b      	ldr	r3, [r3, #32]
 80109d6:	1ad3      	subs	r3, r2, r3
 80109d8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	68db      	ldr	r3, [r3, #12]
 80109e2:	60fb      	str	r3, [r7, #12]
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d1e9      	bne.n	80109be <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d002      	beq.n	80109f6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80109f0:	68b8      	ldr	r0, [r7, #8]
 80109f2:	f7ff f881 	bl	800faf8 <tcp_abort>
  }
}
 80109f6:	bf00      	nop
 80109f8:	3710      	adds	r7, #16
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}
 80109fe:	bf00      	nop
 8010a00:	2000fd04 	.word	0x2000fd04
 8010a04:	2000fcf8 	.word	0x2000fcf8

08010a08 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b082      	sub	sp, #8
 8010a0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010a0e:	4b10      	ldr	r3, [pc, #64]	; (8010a50 <tcp_handle_closepend+0x48>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010a14:	e014      	b.n	8010a40 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	68db      	ldr	r3, [r3, #12]
 8010a1a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	8b5b      	ldrh	r3, [r3, #26]
 8010a20:	f003 0308 	and.w	r3, r3, #8
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d009      	beq.n	8010a3c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	8b5b      	ldrh	r3, [r3, #26]
 8010a2c:	f023 0308 	bic.w	r3, r3, #8
 8010a30:	b29a      	uxth	r2, r3
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f7fe feb4 	bl	800f7a4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d1e7      	bne.n	8010a16 <tcp_handle_closepend+0xe>
  }
}
 8010a46:	bf00      	nop
 8010a48:	3708      	adds	r7, #8
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}
 8010a4e:	bf00      	nop
 8010a50:	2000fcf4 	.word	0x2000fcf4

08010a54 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b084      	sub	sp, #16
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010a5e:	2001      	movs	r0, #1
 8010a60:	f7fd fbda 	bl	800e218 <memp_malloc>
 8010a64:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d126      	bne.n	8010aba <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010a6c:	f7ff ffcc 	bl	8010a08 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010a70:	f7ff ff9a 	bl	80109a8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010a74:	2001      	movs	r0, #1
 8010a76:	f7fd fbcf 	bl	800e218 <memp_malloc>
 8010a7a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d11b      	bne.n	8010aba <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010a82:	2009      	movs	r0, #9
 8010a84:	f7ff ff46 	bl	8010914 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010a88:	2001      	movs	r0, #1
 8010a8a:	f7fd fbc5 	bl	800e218 <memp_malloc>
 8010a8e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d111      	bne.n	8010aba <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010a96:	2008      	movs	r0, #8
 8010a98:	f7ff ff3c 	bl	8010914 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010a9c:	2001      	movs	r0, #1
 8010a9e:	f7fd fbbb 	bl	800e218 <memp_malloc>
 8010aa2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d107      	bne.n	8010aba <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010aaa:	79fb      	ldrb	r3, [r7, #7]
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7ff fee3 	bl	8010878 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010ab2:	2001      	movs	r0, #1
 8010ab4:	f7fd fbb0 	bl	800e218 <memp_malloc>
 8010ab8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d03f      	beq.n	8010b40 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010ac0:	229c      	movs	r2, #156	; 0x9c
 8010ac2:	2100      	movs	r1, #0
 8010ac4:	68f8      	ldr	r0, [r7, #12]
 8010ac6:	f008 f8df 	bl	8018c88 <memset>
    pcb->prio = prio;
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	79fa      	ldrb	r2, [r7, #7]
 8010ace:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010ad6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	22ff      	movs	r2, #255	; 0xff
 8010aee:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010af6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	2206      	movs	r2, #6
 8010afc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	2206      	movs	r2, #6
 8010b04:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b0c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	2201      	movs	r2, #1
 8010b12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010b16:	4b0d      	ldr	r3, [pc, #52]	; (8010b4c <tcp_alloc+0xf8>)
 8010b18:	681a      	ldr	r2, [r3, #0]
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010b1e:	4b0c      	ldr	r3, [pc, #48]	; (8010b50 <tcp_alloc+0xfc>)
 8010b20:	781a      	ldrb	r2, [r3, #0]
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010b2c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	4a08      	ldr	r2, [pc, #32]	; (8010b54 <tcp_alloc+0x100>)
 8010b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	4a07      	ldr	r2, [pc, #28]	; (8010b58 <tcp_alloc+0x104>)
 8010b3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010b40:	68fb      	ldr	r3, [r7, #12]
}
 8010b42:	4618      	mov	r0, r3
 8010b44:	3710      	adds	r7, #16
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}
 8010b4a:	bf00      	nop
 8010b4c:	2000fcf8 	.word	0x2000fcf8
 8010b50:	20008802 	.word	0x20008802
 8010b54:	0801080d 	.word	0x0801080d
 8010b58:	006ddd00 	.word	0x006ddd00

08010b5c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b084      	sub	sp, #16
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	4603      	mov	r3, r0
 8010b64:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8010b66:	2040      	movs	r0, #64	; 0x40
 8010b68:	f7ff ff74 	bl	8010a54 <tcp_alloc>
 8010b6c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8010b6e:	68fb      	ldr	r3, [r7, #12]
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	3710      	adds	r7, #16
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}

08010b78 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8010b78:	b480      	push	{r7}
 8010b7a:	b083      	sub	sp, #12
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d002      	beq.n	8010b8e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	683a      	ldr	r2, [r7, #0]
 8010b8c:	611a      	str	r2, [r3, #16]
  }
}
 8010b8e:	bf00      	nop
 8010b90:	370c      	adds	r7, #12
 8010b92:	46bd      	mov	sp, r7
 8010b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b98:	4770      	bx	lr
	...

08010b9c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b082      	sub	sp, #8
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d00e      	beq.n	8010bca <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	7d1b      	ldrb	r3, [r3, #20]
 8010bb0:	2b01      	cmp	r3, #1
 8010bb2:	d106      	bne.n	8010bc2 <tcp_recv+0x26>
 8010bb4:	4b07      	ldr	r3, [pc, #28]	; (8010bd4 <tcp_recv+0x38>)
 8010bb6:	f240 72df 	movw	r2, #2015	; 0x7df
 8010bba:	4907      	ldr	r1, [pc, #28]	; (8010bd8 <tcp_recv+0x3c>)
 8010bbc:	4807      	ldr	r0, [pc, #28]	; (8010bdc <tcp_recv+0x40>)
 8010bbe:	f008 fe7f 	bl	80198c0 <iprintf>
    pcb->recv = recv;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	683a      	ldr	r2, [r7, #0]
 8010bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8010bca:	bf00      	nop
 8010bcc:	3708      	adds	r7, #8
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	bf00      	nop
 8010bd4:	0801eaf8 	.word	0x0801eaf8
 8010bd8:	0801f094 	.word	0x0801f094
 8010bdc:	0801eb3c 	.word	0x0801eb3c

08010be0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b082      	sub	sp, #8
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
 8010be8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d00e      	beq.n	8010c0e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	7d1b      	ldrb	r3, [r3, #20]
 8010bf4:	2b01      	cmp	r3, #1
 8010bf6:	d106      	bne.n	8010c06 <tcp_sent+0x26>
 8010bf8:	4b07      	ldr	r3, [pc, #28]	; (8010c18 <tcp_sent+0x38>)
 8010bfa:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8010bfe:	4907      	ldr	r1, [pc, #28]	; (8010c1c <tcp_sent+0x3c>)
 8010c00:	4807      	ldr	r0, [pc, #28]	; (8010c20 <tcp_sent+0x40>)
 8010c02:	f008 fe5d 	bl	80198c0 <iprintf>
    pcb->sent = sent;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	683a      	ldr	r2, [r7, #0]
 8010c0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8010c0e:	bf00      	nop
 8010c10:	3708      	adds	r7, #8
 8010c12:	46bd      	mov	sp, r7
 8010c14:	bd80      	pop	{r7, pc}
 8010c16:	bf00      	nop
 8010c18:	0801eaf8 	.word	0x0801eaf8
 8010c1c:	0801f0bc 	.word	0x0801f0bc
 8010c20:	0801eb3c 	.word	0x0801eb3c

08010c24 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b082      	sub	sp, #8
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
 8010c2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d00e      	beq.n	8010c52 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	7d1b      	ldrb	r3, [r3, #20]
 8010c38:	2b01      	cmp	r3, #1
 8010c3a:	d106      	bne.n	8010c4a <tcp_err+0x26>
 8010c3c:	4b07      	ldr	r3, [pc, #28]	; (8010c5c <tcp_err+0x38>)
 8010c3e:	f640 020d 	movw	r2, #2061	; 0x80d
 8010c42:	4907      	ldr	r1, [pc, #28]	; (8010c60 <tcp_err+0x3c>)
 8010c44:	4807      	ldr	r0, [pc, #28]	; (8010c64 <tcp_err+0x40>)
 8010c46:	f008 fe3b 	bl	80198c0 <iprintf>
    pcb->errf = err;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	683a      	ldr	r2, [r7, #0]
 8010c4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8010c52:	bf00      	nop
 8010c54:	3708      	adds	r7, #8
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}
 8010c5a:	bf00      	nop
 8010c5c:	0801eaf8 	.word	0x0801eaf8
 8010c60:	0801f0e4 	.word	0x0801f0e4
 8010c64:	0801eb3c 	.word	0x0801eb3c

08010c68 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8010c68:	b480      	push	{r7}
 8010c6a:	b085      	sub	sp, #20
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
 8010c70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d008      	beq.n	8010c8a <tcp_accept+0x22>
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	7d1b      	ldrb	r3, [r3, #20]
 8010c7c:	2b01      	cmp	r3, #1
 8010c7e:	d104      	bne.n	8010c8a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	683a      	ldr	r2, [r7, #0]
 8010c88:	619a      	str	r2, [r3, #24]
  }
}
 8010c8a:	bf00      	nop
 8010c8c:	3714      	adds	r7, #20
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c94:	4770      	bx	lr
	...

08010c98 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b084      	sub	sp, #16
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	60f8      	str	r0, [r7, #12]
 8010ca0:	60b9      	str	r1, [r7, #8]
 8010ca2:	4613      	mov	r3, r2
 8010ca4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d107      	bne.n	8010cbc <tcp_poll+0x24>
 8010cac:	4b0e      	ldr	r3, [pc, #56]	; (8010ce8 <tcp_poll+0x50>)
 8010cae:	f640 023d 	movw	r2, #2109	; 0x83d
 8010cb2:	490e      	ldr	r1, [pc, #56]	; (8010cec <tcp_poll+0x54>)
 8010cb4:	480e      	ldr	r0, [pc, #56]	; (8010cf0 <tcp_poll+0x58>)
 8010cb6:	f008 fe03 	bl	80198c0 <iprintf>
 8010cba:	e011      	b.n	8010ce0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	7d1b      	ldrb	r3, [r3, #20]
 8010cc0:	2b01      	cmp	r3, #1
 8010cc2:	d106      	bne.n	8010cd2 <tcp_poll+0x3a>
 8010cc4:	4b08      	ldr	r3, [pc, #32]	; (8010ce8 <tcp_poll+0x50>)
 8010cc6:	f640 023e 	movw	r2, #2110	; 0x83e
 8010cca:	490a      	ldr	r1, [pc, #40]	; (8010cf4 <tcp_poll+0x5c>)
 8010ccc:	4808      	ldr	r0, [pc, #32]	; (8010cf0 <tcp_poll+0x58>)
 8010cce:	f008 fdf7 	bl	80198c0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	68ba      	ldr	r2, [r7, #8]
 8010cd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	79fa      	ldrb	r2, [r7, #7]
 8010cde:	775a      	strb	r2, [r3, #29]
}
 8010ce0:	3710      	adds	r7, #16
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd80      	pop	{r7, pc}
 8010ce6:	bf00      	nop
 8010ce8:	0801eaf8 	.word	0x0801eaf8
 8010cec:	0801f10c 	.word	0x0801f10c
 8010cf0:	0801eb3c 	.word	0x0801eb3c
 8010cf4:	0801f124 	.word	0x0801f124

08010cf8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b082      	sub	sp, #8
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d107      	bne.n	8010d16 <tcp_pcb_purge+0x1e>
 8010d06:	4b21      	ldr	r3, [pc, #132]	; (8010d8c <tcp_pcb_purge+0x94>)
 8010d08:	f640 0251 	movw	r2, #2129	; 0x851
 8010d0c:	4920      	ldr	r1, [pc, #128]	; (8010d90 <tcp_pcb_purge+0x98>)
 8010d0e:	4821      	ldr	r0, [pc, #132]	; (8010d94 <tcp_pcb_purge+0x9c>)
 8010d10:	f008 fdd6 	bl	80198c0 <iprintf>
 8010d14:	e037      	b.n	8010d86 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	7d1b      	ldrb	r3, [r3, #20]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d033      	beq.n	8010d86 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010d22:	2b0a      	cmp	r3, #10
 8010d24:	d02f      	beq.n	8010d86 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010d2a:	2b01      	cmp	r3, #1
 8010d2c:	d02b      	beq.n	8010d86 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d007      	beq.n	8010d46 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f7fe f8e6 	bl	800ef0c <pbuf_free>
      pcb->refused_data = NULL;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	2200      	movs	r2, #0
 8010d44:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d002      	beq.n	8010d54 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010d4e:	6878      	ldr	r0, [r7, #4]
 8010d50:	f000 f986 	bl	8011060 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d5a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d60:	4618      	mov	r0, r3
 8010d62:	f7ff fcfb 	bl	801075c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f7ff fcf6 	bl	801075c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2200      	movs	r2, #0
 8010d74:	66da      	str	r2, [r3, #108]	; 0x6c
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2200      	movs	r2, #0
 8010d82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8010d86:	3708      	adds	r7, #8
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd80      	pop	{r7, pc}
 8010d8c:	0801eaf8 	.word	0x0801eaf8
 8010d90:	0801f144 	.word	0x0801f144
 8010d94:	0801eb3c 	.word	0x0801eb3c

08010d98 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b084      	sub	sp, #16
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
 8010da0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d106      	bne.n	8010db6 <tcp_pcb_remove+0x1e>
 8010da8:	4b3e      	ldr	r3, [pc, #248]	; (8010ea4 <tcp_pcb_remove+0x10c>)
 8010daa:	f640 0283 	movw	r2, #2179	; 0x883
 8010dae:	493e      	ldr	r1, [pc, #248]	; (8010ea8 <tcp_pcb_remove+0x110>)
 8010db0:	483e      	ldr	r0, [pc, #248]	; (8010eac <tcp_pcb_remove+0x114>)
 8010db2:	f008 fd85 	bl	80198c0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d106      	bne.n	8010dca <tcp_pcb_remove+0x32>
 8010dbc:	4b39      	ldr	r3, [pc, #228]	; (8010ea4 <tcp_pcb_remove+0x10c>)
 8010dbe:	f640 0284 	movw	r2, #2180	; 0x884
 8010dc2:	493b      	ldr	r1, [pc, #236]	; (8010eb0 <tcp_pcb_remove+0x118>)
 8010dc4:	4839      	ldr	r0, [pc, #228]	; (8010eac <tcp_pcb_remove+0x114>)
 8010dc6:	f008 fd7b 	bl	80198c0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	683a      	ldr	r2, [r7, #0]
 8010dd0:	429a      	cmp	r2, r3
 8010dd2:	d105      	bne.n	8010de0 <tcp_pcb_remove+0x48>
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	68da      	ldr	r2, [r3, #12]
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	601a      	str	r2, [r3, #0]
 8010dde:	e013      	b.n	8010e08 <tcp_pcb_remove+0x70>
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	60fb      	str	r3, [r7, #12]
 8010de6:	e00c      	b.n	8010e02 <tcp_pcb_remove+0x6a>
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	68db      	ldr	r3, [r3, #12]
 8010dec:	683a      	ldr	r2, [r7, #0]
 8010dee:	429a      	cmp	r2, r3
 8010df0:	d104      	bne.n	8010dfc <tcp_pcb_remove+0x64>
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	68da      	ldr	r2, [r3, #12]
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	60da      	str	r2, [r3, #12]
 8010dfa:	e005      	b.n	8010e08 <tcp_pcb_remove+0x70>
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	68db      	ldr	r3, [r3, #12]
 8010e00:	60fb      	str	r3, [r7, #12]
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d1ef      	bne.n	8010de8 <tcp_pcb_remove+0x50>
 8010e08:	683b      	ldr	r3, [r7, #0]
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010e0e:	6838      	ldr	r0, [r7, #0]
 8010e10:	f7ff ff72 	bl	8010cf8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010e14:	683b      	ldr	r3, [r7, #0]
 8010e16:	7d1b      	ldrb	r3, [r3, #20]
 8010e18:	2b0a      	cmp	r3, #10
 8010e1a:	d013      	beq.n	8010e44 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010e20:	2b01      	cmp	r3, #1
 8010e22:	d00f      	beq.n	8010e44 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	8b5b      	ldrh	r3, [r3, #26]
 8010e28:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d009      	beq.n	8010e44 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	8b5b      	ldrh	r3, [r3, #26]
 8010e34:	f043 0302 	orr.w	r3, r3, #2
 8010e38:	b29a      	uxth	r2, r3
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010e3e:	6838      	ldr	r0, [r7, #0]
 8010e40:	f003 fbc2 	bl	80145c8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	7d1b      	ldrb	r3, [r3, #20]
 8010e48:	2b01      	cmp	r3, #1
 8010e4a:	d020      	beq.n	8010e8e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d006      	beq.n	8010e62 <tcp_pcb_remove+0xca>
 8010e54:	4b13      	ldr	r3, [pc, #76]	; (8010ea4 <tcp_pcb_remove+0x10c>)
 8010e56:	f640 0293 	movw	r2, #2195	; 0x893
 8010e5a:	4916      	ldr	r1, [pc, #88]	; (8010eb4 <tcp_pcb_remove+0x11c>)
 8010e5c:	4813      	ldr	r0, [pc, #76]	; (8010eac <tcp_pcb_remove+0x114>)
 8010e5e:	f008 fd2f 	bl	80198c0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d006      	beq.n	8010e78 <tcp_pcb_remove+0xe0>
 8010e6a:	4b0e      	ldr	r3, [pc, #56]	; (8010ea4 <tcp_pcb_remove+0x10c>)
 8010e6c:	f640 0294 	movw	r2, #2196	; 0x894
 8010e70:	4911      	ldr	r1, [pc, #68]	; (8010eb8 <tcp_pcb_remove+0x120>)
 8010e72:	480e      	ldr	r0, [pc, #56]	; (8010eac <tcp_pcb_remove+0x114>)
 8010e74:	f008 fd24 	bl	80198c0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d006      	beq.n	8010e8e <tcp_pcb_remove+0xf6>
 8010e80:	4b08      	ldr	r3, [pc, #32]	; (8010ea4 <tcp_pcb_remove+0x10c>)
 8010e82:	f640 0296 	movw	r2, #2198	; 0x896
 8010e86:	490d      	ldr	r1, [pc, #52]	; (8010ebc <tcp_pcb_remove+0x124>)
 8010e88:	4808      	ldr	r0, [pc, #32]	; (8010eac <tcp_pcb_remove+0x114>)
 8010e8a:	f008 fd19 	bl	80198c0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	2200      	movs	r2, #0
 8010e92:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010e94:	683b      	ldr	r3, [r7, #0]
 8010e96:	2200      	movs	r2, #0
 8010e98:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010e9a:	bf00      	nop
 8010e9c:	3710      	adds	r7, #16
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	bd80      	pop	{r7, pc}
 8010ea2:	bf00      	nop
 8010ea4:	0801eaf8 	.word	0x0801eaf8
 8010ea8:	0801f160 	.word	0x0801f160
 8010eac:	0801eb3c 	.word	0x0801eb3c
 8010eb0:	0801f17c 	.word	0x0801f17c
 8010eb4:	0801f19c 	.word	0x0801f19c
 8010eb8:	0801f1b4 	.word	0x0801f1b4
 8010ebc:	0801f1d0 	.word	0x0801f1d0

08010ec0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b082      	sub	sp, #8
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d106      	bne.n	8010edc <tcp_next_iss+0x1c>
 8010ece:	4b0a      	ldr	r3, [pc, #40]	; (8010ef8 <tcp_next_iss+0x38>)
 8010ed0:	f640 02af 	movw	r2, #2223	; 0x8af
 8010ed4:	4909      	ldr	r1, [pc, #36]	; (8010efc <tcp_next_iss+0x3c>)
 8010ed6:	480a      	ldr	r0, [pc, #40]	; (8010f00 <tcp_next_iss+0x40>)
 8010ed8:	f008 fcf2 	bl	80198c0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010edc:	4b09      	ldr	r3, [pc, #36]	; (8010f04 <tcp_next_iss+0x44>)
 8010ede:	681a      	ldr	r2, [r3, #0]
 8010ee0:	4b09      	ldr	r3, [pc, #36]	; (8010f08 <tcp_next_iss+0x48>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	4413      	add	r3, r2
 8010ee6:	4a07      	ldr	r2, [pc, #28]	; (8010f04 <tcp_next_iss+0x44>)
 8010ee8:	6013      	str	r3, [r2, #0]
  return iss;
 8010eea:	4b06      	ldr	r3, [pc, #24]	; (8010f04 <tcp_next_iss+0x44>)
 8010eec:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010eee:	4618      	mov	r0, r3
 8010ef0:	3708      	adds	r7, #8
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bd80      	pop	{r7, pc}
 8010ef6:	bf00      	nop
 8010ef8:	0801eaf8 	.word	0x0801eaf8
 8010efc:	0801f1e8 	.word	0x0801f1e8
 8010f00:	0801eb3c 	.word	0x0801eb3c
 8010f04:	20000014 	.word	0x20000014
 8010f08:	2000fcf8 	.word	0x2000fcf8

08010f0c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b086      	sub	sp, #24
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	4603      	mov	r3, r0
 8010f14:	60b9      	str	r1, [r7, #8]
 8010f16:	607a      	str	r2, [r7, #4]
 8010f18:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d106      	bne.n	8010f2e <tcp_eff_send_mss_netif+0x22>
 8010f20:	4b14      	ldr	r3, [pc, #80]	; (8010f74 <tcp_eff_send_mss_netif+0x68>)
 8010f22:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010f26:	4914      	ldr	r1, [pc, #80]	; (8010f78 <tcp_eff_send_mss_netif+0x6c>)
 8010f28:	4814      	ldr	r0, [pc, #80]	; (8010f7c <tcp_eff_send_mss_netif+0x70>)
 8010f2a:	f008 fcc9 	bl	80198c0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d101      	bne.n	8010f38 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010f34:	89fb      	ldrh	r3, [r7, #14]
 8010f36:	e019      	b.n	8010f6c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010f38:	68bb      	ldr	r3, [r7, #8]
 8010f3a:	8c1b      	ldrh	r3, [r3, #32]
 8010f3c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010f3e:	8afb      	ldrh	r3, [r7, #22]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d012      	beq.n	8010f6a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010f44:	2328      	movs	r3, #40	; 0x28
 8010f46:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010f48:	8afa      	ldrh	r2, [r7, #22]
 8010f4a:	8abb      	ldrh	r3, [r7, #20]
 8010f4c:	429a      	cmp	r2, r3
 8010f4e:	d904      	bls.n	8010f5a <tcp_eff_send_mss_netif+0x4e>
 8010f50:	8afa      	ldrh	r2, [r7, #22]
 8010f52:	8abb      	ldrh	r3, [r7, #20]
 8010f54:	1ad3      	subs	r3, r2, r3
 8010f56:	b29b      	uxth	r3, r3
 8010f58:	e000      	b.n	8010f5c <tcp_eff_send_mss_netif+0x50>
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010f5e:	8a7a      	ldrh	r2, [r7, #18]
 8010f60:	89fb      	ldrh	r3, [r7, #14]
 8010f62:	4293      	cmp	r3, r2
 8010f64:	bf28      	it	cs
 8010f66:	4613      	movcs	r3, r2
 8010f68:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010f6a:	89fb      	ldrh	r3, [r7, #14]
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	3718      	adds	r7, #24
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd80      	pop	{r7, pc}
 8010f74:	0801eaf8 	.word	0x0801eaf8
 8010f78:	0801f204 	.word	0x0801f204
 8010f7c:	0801eb3c 	.word	0x0801eb3c

08010f80 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b084      	sub	sp, #16
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
 8010f88:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d119      	bne.n	8010fc8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010f94:	4b10      	ldr	r3, [pc, #64]	; (8010fd8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010f96:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8010f9a:	4910      	ldr	r1, [pc, #64]	; (8010fdc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010f9c:	4810      	ldr	r0, [pc, #64]	; (8010fe0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010f9e:	f008 fc8f 	bl	80198c0 <iprintf>

  while (pcb != NULL) {
 8010fa2:	e011      	b.n	8010fc8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	681a      	ldr	r2, [r3, #0]
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d108      	bne.n	8010fc2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	68db      	ldr	r3, [r3, #12]
 8010fb4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010fb6:	68f8      	ldr	r0, [r7, #12]
 8010fb8:	f7fe fd9e 	bl	800faf8 <tcp_abort>
      pcb = next;
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	60fb      	str	r3, [r7, #12]
 8010fc0:	e002      	b.n	8010fc8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	68db      	ldr	r3, [r3, #12]
 8010fc6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d1ea      	bne.n	8010fa4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010fce:	bf00      	nop
 8010fd0:	3710      	adds	r7, #16
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}
 8010fd6:	bf00      	nop
 8010fd8:	0801eaf8 	.word	0x0801eaf8
 8010fdc:	0801f22c 	.word	0x0801f22c
 8010fe0:	0801eb3c 	.word	0x0801eb3c

08010fe4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b084      	sub	sp, #16
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d02a      	beq.n	801104a <tcp_netif_ip_addr_changed+0x66>
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d026      	beq.n	801104a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010ffc:	4b15      	ldr	r3, [pc, #84]	; (8011054 <tcp_netif_ip_addr_changed+0x70>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	4619      	mov	r1, r3
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f7ff ffbc 	bl	8010f80 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011008:	4b13      	ldr	r3, [pc, #76]	; (8011058 <tcp_netif_ip_addr_changed+0x74>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	4619      	mov	r1, r3
 801100e:	6878      	ldr	r0, [r7, #4]
 8011010:	f7ff ffb6 	bl	8010f80 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011014:	683b      	ldr	r3, [r7, #0]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d017      	beq.n	801104a <tcp_netif_ip_addr_changed+0x66>
 801101a:	683b      	ldr	r3, [r7, #0]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d013      	beq.n	801104a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011022:	4b0e      	ldr	r3, [pc, #56]	; (801105c <tcp_netif_ip_addr_changed+0x78>)
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	60fb      	str	r3, [r7, #12]
 8011028:	e00c      	b.n	8011044 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	681a      	ldr	r2, [r3, #0]
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	429a      	cmp	r2, r3
 8011034:	d103      	bne.n	801103e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8011036:	683b      	ldr	r3, [r7, #0]
 8011038:	681a      	ldr	r2, [r3, #0]
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	68db      	ldr	r3, [r3, #12]
 8011042:	60fb      	str	r3, [r7, #12]
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d1ef      	bne.n	801102a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801104a:	bf00      	nop
 801104c:	3710      	adds	r7, #16
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}
 8011052:	bf00      	nop
 8011054:	2000fcf4 	.word	0x2000fcf4
 8011058:	2000fd00 	.word	0x2000fd00
 801105c:	2000fcfc 	.word	0x2000fcfc

08011060 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b082      	sub	sp, #8
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801106c:	2b00      	cmp	r3, #0
 801106e:	d007      	beq.n	8011080 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011074:	4618      	mov	r0, r3
 8011076:	f7ff fb71 	bl	801075c <tcp_segs_free>
    pcb->ooseq = NULL;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2200      	movs	r2, #0
 801107e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011080:	bf00      	nop
 8011082:	3708      	adds	r7, #8
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}

08011088 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011088:	b590      	push	{r4, r7, lr}
 801108a:	b08d      	sub	sp, #52	; 0x34
 801108c:	af04      	add	r7, sp, #16
 801108e:	6078      	str	r0, [r7, #4]
 8011090:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d105      	bne.n	80110a4 <tcp_input+0x1c>
 8011098:	4b9b      	ldr	r3, [pc, #620]	; (8011308 <tcp_input+0x280>)
 801109a:	2283      	movs	r2, #131	; 0x83
 801109c:	499b      	ldr	r1, [pc, #620]	; (801130c <tcp_input+0x284>)
 801109e:	489c      	ldr	r0, [pc, #624]	; (8011310 <tcp_input+0x288>)
 80110a0:	f008 fc0e 	bl	80198c0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	685b      	ldr	r3, [r3, #4]
 80110a8:	4a9a      	ldr	r2, [pc, #616]	; (8011314 <tcp_input+0x28c>)
 80110aa:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	895b      	ldrh	r3, [r3, #10]
 80110b0:	2b13      	cmp	r3, #19
 80110b2:	f240 83c4 	bls.w	801183e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80110b6:	4b98      	ldr	r3, [pc, #608]	; (8011318 <tcp_input+0x290>)
 80110b8:	695a      	ldr	r2, [r3, #20]
 80110ba:	4b97      	ldr	r3, [pc, #604]	; (8011318 <tcp_input+0x290>)
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	4619      	mov	r1, r3
 80110c0:	4610      	mov	r0, r2
 80110c2:	f006 fc47 	bl	8017954 <ip4_addr_isbroadcast_u32>
 80110c6:	4603      	mov	r3, r0
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	f040 83ba 	bne.w	8011842 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80110ce:	4b92      	ldr	r3, [pc, #584]	; (8011318 <tcp_input+0x290>)
 80110d0:	695b      	ldr	r3, [r3, #20]
 80110d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80110d6:	2be0      	cmp	r3, #224	; 0xe0
 80110d8:	f000 83b3 	beq.w	8011842 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80110dc:	4b8d      	ldr	r3, [pc, #564]	; (8011314 <tcp_input+0x28c>)
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	899b      	ldrh	r3, [r3, #12]
 80110e2:	b29b      	uxth	r3, r3
 80110e4:	4618      	mov	r0, r3
 80110e6:	f7fc fbe1 	bl	800d8ac <lwip_htons>
 80110ea:	4603      	mov	r3, r0
 80110ec:	0b1b      	lsrs	r3, r3, #12
 80110ee:	b29b      	uxth	r3, r3
 80110f0:	b2db      	uxtb	r3, r3
 80110f2:	009b      	lsls	r3, r3, #2
 80110f4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80110f6:	7cbb      	ldrb	r3, [r7, #18]
 80110f8:	2b13      	cmp	r3, #19
 80110fa:	f240 83a2 	bls.w	8011842 <tcp_input+0x7ba>
 80110fe:	7cbb      	ldrb	r3, [r7, #18]
 8011100:	b29a      	uxth	r2, r3
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	891b      	ldrh	r3, [r3, #8]
 8011106:	429a      	cmp	r2, r3
 8011108:	f200 839b 	bhi.w	8011842 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801110c:	7cbb      	ldrb	r3, [r7, #18]
 801110e:	b29b      	uxth	r3, r3
 8011110:	3b14      	subs	r3, #20
 8011112:	b29a      	uxth	r2, r3
 8011114:	4b81      	ldr	r3, [pc, #516]	; (801131c <tcp_input+0x294>)
 8011116:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011118:	4b81      	ldr	r3, [pc, #516]	; (8011320 <tcp_input+0x298>)
 801111a:	2200      	movs	r2, #0
 801111c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	895a      	ldrh	r2, [r3, #10]
 8011122:	7cbb      	ldrb	r3, [r7, #18]
 8011124:	b29b      	uxth	r3, r3
 8011126:	429a      	cmp	r2, r3
 8011128:	d309      	bcc.n	801113e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801112a:	4b7c      	ldr	r3, [pc, #496]	; (801131c <tcp_input+0x294>)
 801112c:	881a      	ldrh	r2, [r3, #0]
 801112e:	4b7d      	ldr	r3, [pc, #500]	; (8011324 <tcp_input+0x29c>)
 8011130:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8011132:	7cbb      	ldrb	r3, [r7, #18]
 8011134:	4619      	mov	r1, r3
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	f7fd fe62 	bl	800ee00 <pbuf_remove_header>
 801113c:	e04e      	b.n	80111dc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d105      	bne.n	8011152 <tcp_input+0xca>
 8011146:	4b70      	ldr	r3, [pc, #448]	; (8011308 <tcp_input+0x280>)
 8011148:	22c2      	movs	r2, #194	; 0xc2
 801114a:	4977      	ldr	r1, [pc, #476]	; (8011328 <tcp_input+0x2a0>)
 801114c:	4870      	ldr	r0, [pc, #448]	; (8011310 <tcp_input+0x288>)
 801114e:	f008 fbb7 	bl	80198c0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8011152:	2114      	movs	r1, #20
 8011154:	6878      	ldr	r0, [r7, #4]
 8011156:	f7fd fe53 	bl	800ee00 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	895a      	ldrh	r2, [r3, #10]
 801115e:	4b71      	ldr	r3, [pc, #452]	; (8011324 <tcp_input+0x29c>)
 8011160:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8011162:	4b6e      	ldr	r3, [pc, #440]	; (801131c <tcp_input+0x294>)
 8011164:	881a      	ldrh	r2, [r3, #0]
 8011166:	4b6f      	ldr	r3, [pc, #444]	; (8011324 <tcp_input+0x29c>)
 8011168:	881b      	ldrh	r3, [r3, #0]
 801116a:	1ad3      	subs	r3, r2, r3
 801116c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801116e:	4b6d      	ldr	r3, [pc, #436]	; (8011324 <tcp_input+0x29c>)
 8011170:	881b      	ldrh	r3, [r3, #0]
 8011172:	4619      	mov	r1, r3
 8011174:	6878      	ldr	r0, [r7, #4]
 8011176:	f7fd fe43 	bl	800ee00 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	895b      	ldrh	r3, [r3, #10]
 8011180:	8a3a      	ldrh	r2, [r7, #16]
 8011182:	429a      	cmp	r2, r3
 8011184:	f200 835f 	bhi.w	8011846 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	685b      	ldr	r3, [r3, #4]
 801118e:	4a64      	ldr	r2, [pc, #400]	; (8011320 <tcp_input+0x298>)
 8011190:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	8a3a      	ldrh	r2, [r7, #16]
 8011198:	4611      	mov	r1, r2
 801119a:	4618      	mov	r0, r3
 801119c:	f7fd fe30 	bl	800ee00 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	891a      	ldrh	r2, [r3, #8]
 80111a4:	8a3b      	ldrh	r3, [r7, #16]
 80111a6:	1ad3      	subs	r3, r2, r3
 80111a8:	b29a      	uxth	r2, r3
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	895b      	ldrh	r3, [r3, #10]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d005      	beq.n	80111c2 <tcp_input+0x13a>
 80111b6:	4b54      	ldr	r3, [pc, #336]	; (8011308 <tcp_input+0x280>)
 80111b8:	22df      	movs	r2, #223	; 0xdf
 80111ba:	495c      	ldr	r1, [pc, #368]	; (801132c <tcp_input+0x2a4>)
 80111bc:	4854      	ldr	r0, [pc, #336]	; (8011310 <tcp_input+0x288>)
 80111be:	f008 fb7f 	bl	80198c0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	891a      	ldrh	r2, [r3, #8]
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	891b      	ldrh	r3, [r3, #8]
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d005      	beq.n	80111dc <tcp_input+0x154>
 80111d0:	4b4d      	ldr	r3, [pc, #308]	; (8011308 <tcp_input+0x280>)
 80111d2:	22e0      	movs	r2, #224	; 0xe0
 80111d4:	4956      	ldr	r1, [pc, #344]	; (8011330 <tcp_input+0x2a8>)
 80111d6:	484e      	ldr	r0, [pc, #312]	; (8011310 <tcp_input+0x288>)
 80111d8:	f008 fb72 	bl	80198c0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80111dc:	4b4d      	ldr	r3, [pc, #308]	; (8011314 <tcp_input+0x28c>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	881b      	ldrh	r3, [r3, #0]
 80111e2:	b29a      	uxth	r2, r3
 80111e4:	4b4b      	ldr	r3, [pc, #300]	; (8011314 <tcp_input+0x28c>)
 80111e6:	681c      	ldr	r4, [r3, #0]
 80111e8:	4610      	mov	r0, r2
 80111ea:	f7fc fb5f 	bl	800d8ac <lwip_htons>
 80111ee:	4603      	mov	r3, r0
 80111f0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80111f2:	4b48      	ldr	r3, [pc, #288]	; (8011314 <tcp_input+0x28c>)
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	885b      	ldrh	r3, [r3, #2]
 80111f8:	b29a      	uxth	r2, r3
 80111fa:	4b46      	ldr	r3, [pc, #280]	; (8011314 <tcp_input+0x28c>)
 80111fc:	681c      	ldr	r4, [r3, #0]
 80111fe:	4610      	mov	r0, r2
 8011200:	f7fc fb54 	bl	800d8ac <lwip_htons>
 8011204:	4603      	mov	r3, r0
 8011206:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011208:	4b42      	ldr	r3, [pc, #264]	; (8011314 <tcp_input+0x28c>)
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	685a      	ldr	r2, [r3, #4]
 801120e:	4b41      	ldr	r3, [pc, #260]	; (8011314 <tcp_input+0x28c>)
 8011210:	681c      	ldr	r4, [r3, #0]
 8011212:	4610      	mov	r0, r2
 8011214:	f7fc fb5f 	bl	800d8d6 <lwip_htonl>
 8011218:	4603      	mov	r3, r0
 801121a:	6063      	str	r3, [r4, #4]
 801121c:	6863      	ldr	r3, [r4, #4]
 801121e:	4a45      	ldr	r2, [pc, #276]	; (8011334 <tcp_input+0x2ac>)
 8011220:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011222:	4b3c      	ldr	r3, [pc, #240]	; (8011314 <tcp_input+0x28c>)
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	689a      	ldr	r2, [r3, #8]
 8011228:	4b3a      	ldr	r3, [pc, #232]	; (8011314 <tcp_input+0x28c>)
 801122a:	681c      	ldr	r4, [r3, #0]
 801122c:	4610      	mov	r0, r2
 801122e:	f7fc fb52 	bl	800d8d6 <lwip_htonl>
 8011232:	4603      	mov	r3, r0
 8011234:	60a3      	str	r3, [r4, #8]
 8011236:	68a3      	ldr	r3, [r4, #8]
 8011238:	4a3f      	ldr	r2, [pc, #252]	; (8011338 <tcp_input+0x2b0>)
 801123a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801123c:	4b35      	ldr	r3, [pc, #212]	; (8011314 <tcp_input+0x28c>)
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	89db      	ldrh	r3, [r3, #14]
 8011242:	b29a      	uxth	r2, r3
 8011244:	4b33      	ldr	r3, [pc, #204]	; (8011314 <tcp_input+0x28c>)
 8011246:	681c      	ldr	r4, [r3, #0]
 8011248:	4610      	mov	r0, r2
 801124a:	f7fc fb2f 	bl	800d8ac <lwip_htons>
 801124e:	4603      	mov	r3, r0
 8011250:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8011252:	4b30      	ldr	r3, [pc, #192]	; (8011314 <tcp_input+0x28c>)
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	899b      	ldrh	r3, [r3, #12]
 8011258:	b29b      	uxth	r3, r3
 801125a:	4618      	mov	r0, r3
 801125c:	f7fc fb26 	bl	800d8ac <lwip_htons>
 8011260:	4603      	mov	r3, r0
 8011262:	b2db      	uxtb	r3, r3
 8011264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011268:	b2da      	uxtb	r2, r3
 801126a:	4b34      	ldr	r3, [pc, #208]	; (801133c <tcp_input+0x2b4>)
 801126c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	891a      	ldrh	r2, [r3, #8]
 8011272:	4b33      	ldr	r3, [pc, #204]	; (8011340 <tcp_input+0x2b8>)
 8011274:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8011276:	4b31      	ldr	r3, [pc, #196]	; (801133c <tcp_input+0x2b4>)
 8011278:	781b      	ldrb	r3, [r3, #0]
 801127a:	f003 0303 	and.w	r3, r3, #3
 801127e:	2b00      	cmp	r3, #0
 8011280:	d00c      	beq.n	801129c <tcp_input+0x214>
    tcplen++;
 8011282:	4b2f      	ldr	r3, [pc, #188]	; (8011340 <tcp_input+0x2b8>)
 8011284:	881b      	ldrh	r3, [r3, #0]
 8011286:	3301      	adds	r3, #1
 8011288:	b29a      	uxth	r2, r3
 801128a:	4b2d      	ldr	r3, [pc, #180]	; (8011340 <tcp_input+0x2b8>)
 801128c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	891a      	ldrh	r2, [r3, #8]
 8011292:	4b2b      	ldr	r3, [pc, #172]	; (8011340 <tcp_input+0x2b8>)
 8011294:	881b      	ldrh	r3, [r3, #0]
 8011296:	429a      	cmp	r2, r3
 8011298:	f200 82d7 	bhi.w	801184a <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801129c:	2300      	movs	r3, #0
 801129e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80112a0:	4b28      	ldr	r3, [pc, #160]	; (8011344 <tcp_input+0x2bc>)
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	61fb      	str	r3, [r7, #28]
 80112a6:	e09d      	b.n	80113e4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80112a8:	69fb      	ldr	r3, [r7, #28]
 80112aa:	7d1b      	ldrb	r3, [r3, #20]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d105      	bne.n	80112bc <tcp_input+0x234>
 80112b0:	4b15      	ldr	r3, [pc, #84]	; (8011308 <tcp_input+0x280>)
 80112b2:	22fb      	movs	r2, #251	; 0xfb
 80112b4:	4924      	ldr	r1, [pc, #144]	; (8011348 <tcp_input+0x2c0>)
 80112b6:	4816      	ldr	r0, [pc, #88]	; (8011310 <tcp_input+0x288>)
 80112b8:	f008 fb02 	bl	80198c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80112bc:	69fb      	ldr	r3, [r7, #28]
 80112be:	7d1b      	ldrb	r3, [r3, #20]
 80112c0:	2b0a      	cmp	r3, #10
 80112c2:	d105      	bne.n	80112d0 <tcp_input+0x248>
 80112c4:	4b10      	ldr	r3, [pc, #64]	; (8011308 <tcp_input+0x280>)
 80112c6:	22fc      	movs	r2, #252	; 0xfc
 80112c8:	4920      	ldr	r1, [pc, #128]	; (801134c <tcp_input+0x2c4>)
 80112ca:	4811      	ldr	r0, [pc, #68]	; (8011310 <tcp_input+0x288>)
 80112cc:	f008 faf8 	bl	80198c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80112d0:	69fb      	ldr	r3, [r7, #28]
 80112d2:	7d1b      	ldrb	r3, [r3, #20]
 80112d4:	2b01      	cmp	r3, #1
 80112d6:	d105      	bne.n	80112e4 <tcp_input+0x25c>
 80112d8:	4b0b      	ldr	r3, [pc, #44]	; (8011308 <tcp_input+0x280>)
 80112da:	22fd      	movs	r2, #253	; 0xfd
 80112dc:	491c      	ldr	r1, [pc, #112]	; (8011350 <tcp_input+0x2c8>)
 80112de:	480c      	ldr	r0, [pc, #48]	; (8011310 <tcp_input+0x288>)
 80112e0:	f008 faee 	bl	80198c0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80112e4:	69fb      	ldr	r3, [r7, #28]
 80112e6:	7a1b      	ldrb	r3, [r3, #8]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d033      	beq.n	8011354 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80112ec:	69fb      	ldr	r3, [r7, #28]
 80112ee:	7a1a      	ldrb	r2, [r3, #8]
 80112f0:	4b09      	ldr	r3, [pc, #36]	; (8011318 <tcp_input+0x290>)
 80112f2:	685b      	ldr	r3, [r3, #4]
 80112f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80112f8:	3301      	adds	r3, #1
 80112fa:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80112fc:	429a      	cmp	r2, r3
 80112fe:	d029      	beq.n	8011354 <tcp_input+0x2cc>
      prev = pcb;
 8011300:	69fb      	ldr	r3, [r7, #28]
 8011302:	61bb      	str	r3, [r7, #24]
      continue;
 8011304:	e06b      	b.n	80113de <tcp_input+0x356>
 8011306:	bf00      	nop
 8011308:	0801f260 	.word	0x0801f260
 801130c:	0801f294 	.word	0x0801f294
 8011310:	0801f2ac 	.word	0x0801f2ac
 8011314:	20008814 	.word	0x20008814
 8011318:	2000c5e0 	.word	0x2000c5e0
 801131c:	20008818 	.word	0x20008818
 8011320:	2000881c 	.word	0x2000881c
 8011324:	2000881a 	.word	0x2000881a
 8011328:	0801f2d4 	.word	0x0801f2d4
 801132c:	0801f2e4 	.word	0x0801f2e4
 8011330:	0801f2f0 	.word	0x0801f2f0
 8011334:	20008824 	.word	0x20008824
 8011338:	20008828 	.word	0x20008828
 801133c:	20008830 	.word	0x20008830
 8011340:	2000882e 	.word	0x2000882e
 8011344:	2000fcf4 	.word	0x2000fcf4
 8011348:	0801f310 	.word	0x0801f310
 801134c:	0801f338 	.word	0x0801f338
 8011350:	0801f364 	.word	0x0801f364
    }

    if (pcb->remote_port == tcphdr->src &&
 8011354:	69fb      	ldr	r3, [r7, #28]
 8011356:	8b1a      	ldrh	r2, [r3, #24]
 8011358:	4b94      	ldr	r3, [pc, #592]	; (80115ac <tcp_input+0x524>)
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	881b      	ldrh	r3, [r3, #0]
 801135e:	b29b      	uxth	r3, r3
 8011360:	429a      	cmp	r2, r3
 8011362:	d13a      	bne.n	80113da <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8011364:	69fb      	ldr	r3, [r7, #28]
 8011366:	8ada      	ldrh	r2, [r3, #22]
 8011368:	4b90      	ldr	r3, [pc, #576]	; (80115ac <tcp_input+0x524>)
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	885b      	ldrh	r3, [r3, #2]
 801136e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011370:	429a      	cmp	r2, r3
 8011372:	d132      	bne.n	80113da <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011374:	69fb      	ldr	r3, [r7, #28]
 8011376:	685a      	ldr	r2, [r3, #4]
 8011378:	4b8d      	ldr	r3, [pc, #564]	; (80115b0 <tcp_input+0x528>)
 801137a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801137c:	429a      	cmp	r2, r3
 801137e:	d12c      	bne.n	80113da <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011380:	69fb      	ldr	r3, [r7, #28]
 8011382:	681a      	ldr	r2, [r3, #0]
 8011384:	4b8a      	ldr	r3, [pc, #552]	; (80115b0 <tcp_input+0x528>)
 8011386:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011388:	429a      	cmp	r2, r3
 801138a:	d126      	bne.n	80113da <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801138c:	69fb      	ldr	r3, [r7, #28]
 801138e:	68db      	ldr	r3, [r3, #12]
 8011390:	69fa      	ldr	r2, [r7, #28]
 8011392:	429a      	cmp	r2, r3
 8011394:	d106      	bne.n	80113a4 <tcp_input+0x31c>
 8011396:	4b87      	ldr	r3, [pc, #540]	; (80115b4 <tcp_input+0x52c>)
 8011398:	f240 120d 	movw	r2, #269	; 0x10d
 801139c:	4986      	ldr	r1, [pc, #536]	; (80115b8 <tcp_input+0x530>)
 801139e:	4887      	ldr	r0, [pc, #540]	; (80115bc <tcp_input+0x534>)
 80113a0:	f008 fa8e 	bl	80198c0 <iprintf>
      if (prev != NULL) {
 80113a4:	69bb      	ldr	r3, [r7, #24]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d00a      	beq.n	80113c0 <tcp_input+0x338>
        prev->next = pcb->next;
 80113aa:	69fb      	ldr	r3, [r7, #28]
 80113ac:	68da      	ldr	r2, [r3, #12]
 80113ae:	69bb      	ldr	r3, [r7, #24]
 80113b0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80113b2:	4b83      	ldr	r3, [pc, #524]	; (80115c0 <tcp_input+0x538>)
 80113b4:	681a      	ldr	r2, [r3, #0]
 80113b6:	69fb      	ldr	r3, [r7, #28]
 80113b8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80113ba:	4a81      	ldr	r2, [pc, #516]	; (80115c0 <tcp_input+0x538>)
 80113bc:	69fb      	ldr	r3, [r7, #28]
 80113be:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80113c0:	69fb      	ldr	r3, [r7, #28]
 80113c2:	68db      	ldr	r3, [r3, #12]
 80113c4:	69fa      	ldr	r2, [r7, #28]
 80113c6:	429a      	cmp	r2, r3
 80113c8:	d111      	bne.n	80113ee <tcp_input+0x366>
 80113ca:	4b7a      	ldr	r3, [pc, #488]	; (80115b4 <tcp_input+0x52c>)
 80113cc:	f240 1215 	movw	r2, #277	; 0x115
 80113d0:	497c      	ldr	r1, [pc, #496]	; (80115c4 <tcp_input+0x53c>)
 80113d2:	487a      	ldr	r0, [pc, #488]	; (80115bc <tcp_input+0x534>)
 80113d4:	f008 fa74 	bl	80198c0 <iprintf>
      break;
 80113d8:	e009      	b.n	80113ee <tcp_input+0x366>
    }
    prev = pcb;
 80113da:	69fb      	ldr	r3, [r7, #28]
 80113dc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80113de:	69fb      	ldr	r3, [r7, #28]
 80113e0:	68db      	ldr	r3, [r3, #12]
 80113e2:	61fb      	str	r3, [r7, #28]
 80113e4:	69fb      	ldr	r3, [r7, #28]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	f47f af5e 	bne.w	80112a8 <tcp_input+0x220>
 80113ec:	e000      	b.n	80113f0 <tcp_input+0x368>
      break;
 80113ee:	bf00      	nop
  }

  if (pcb == NULL) {
 80113f0:	69fb      	ldr	r3, [r7, #28]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	f040 8095 	bne.w	8011522 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80113f8:	4b73      	ldr	r3, [pc, #460]	; (80115c8 <tcp_input+0x540>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	61fb      	str	r3, [r7, #28]
 80113fe:	e03f      	b.n	8011480 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011400:	69fb      	ldr	r3, [r7, #28]
 8011402:	7d1b      	ldrb	r3, [r3, #20]
 8011404:	2b0a      	cmp	r3, #10
 8011406:	d006      	beq.n	8011416 <tcp_input+0x38e>
 8011408:	4b6a      	ldr	r3, [pc, #424]	; (80115b4 <tcp_input+0x52c>)
 801140a:	f240 121f 	movw	r2, #287	; 0x11f
 801140e:	496f      	ldr	r1, [pc, #444]	; (80115cc <tcp_input+0x544>)
 8011410:	486a      	ldr	r0, [pc, #424]	; (80115bc <tcp_input+0x534>)
 8011412:	f008 fa55 	bl	80198c0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011416:	69fb      	ldr	r3, [r7, #28]
 8011418:	7a1b      	ldrb	r3, [r3, #8]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d009      	beq.n	8011432 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801141e:	69fb      	ldr	r3, [r7, #28]
 8011420:	7a1a      	ldrb	r2, [r3, #8]
 8011422:	4b63      	ldr	r3, [pc, #396]	; (80115b0 <tcp_input+0x528>)
 8011424:	685b      	ldr	r3, [r3, #4]
 8011426:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801142a:	3301      	adds	r3, #1
 801142c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801142e:	429a      	cmp	r2, r3
 8011430:	d122      	bne.n	8011478 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8011432:	69fb      	ldr	r3, [r7, #28]
 8011434:	8b1a      	ldrh	r2, [r3, #24]
 8011436:	4b5d      	ldr	r3, [pc, #372]	; (80115ac <tcp_input+0x524>)
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	881b      	ldrh	r3, [r3, #0]
 801143c:	b29b      	uxth	r3, r3
 801143e:	429a      	cmp	r2, r3
 8011440:	d11b      	bne.n	801147a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8011442:	69fb      	ldr	r3, [r7, #28]
 8011444:	8ada      	ldrh	r2, [r3, #22]
 8011446:	4b59      	ldr	r3, [pc, #356]	; (80115ac <tcp_input+0x524>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	885b      	ldrh	r3, [r3, #2]
 801144c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801144e:	429a      	cmp	r2, r3
 8011450:	d113      	bne.n	801147a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011452:	69fb      	ldr	r3, [r7, #28]
 8011454:	685a      	ldr	r2, [r3, #4]
 8011456:	4b56      	ldr	r3, [pc, #344]	; (80115b0 <tcp_input+0x528>)
 8011458:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801145a:	429a      	cmp	r2, r3
 801145c:	d10d      	bne.n	801147a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801145e:	69fb      	ldr	r3, [r7, #28]
 8011460:	681a      	ldr	r2, [r3, #0]
 8011462:	4b53      	ldr	r3, [pc, #332]	; (80115b0 <tcp_input+0x528>)
 8011464:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011466:	429a      	cmp	r2, r3
 8011468:	d107      	bne.n	801147a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801146a:	69f8      	ldr	r0, [r7, #28]
 801146c:	f000 fb52 	bl	8011b14 <tcp_timewait_input>
        }
        pbuf_free(p);
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f7fd fd4b 	bl	800ef0c <pbuf_free>
        return;
 8011476:	e1ee      	b.n	8011856 <tcp_input+0x7ce>
        continue;
 8011478:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801147a:	69fb      	ldr	r3, [r7, #28]
 801147c:	68db      	ldr	r3, [r3, #12]
 801147e:	61fb      	str	r3, [r7, #28]
 8011480:	69fb      	ldr	r3, [r7, #28]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d1bc      	bne.n	8011400 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8011486:	2300      	movs	r3, #0
 8011488:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801148a:	4b51      	ldr	r3, [pc, #324]	; (80115d0 <tcp_input+0x548>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	617b      	str	r3, [r7, #20]
 8011490:	e02a      	b.n	80114e8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	7a1b      	ldrb	r3, [r3, #8]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d00c      	beq.n	80114b4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801149a:	697b      	ldr	r3, [r7, #20]
 801149c:	7a1a      	ldrb	r2, [r3, #8]
 801149e:	4b44      	ldr	r3, [pc, #272]	; (80115b0 <tcp_input+0x528>)
 80114a0:	685b      	ldr	r3, [r3, #4]
 80114a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80114a6:	3301      	adds	r3, #1
 80114a8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80114aa:	429a      	cmp	r2, r3
 80114ac:	d002      	beq.n	80114b4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	61bb      	str	r3, [r7, #24]
        continue;
 80114b2:	e016      	b.n	80114e2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80114b4:	697b      	ldr	r3, [r7, #20]
 80114b6:	8ada      	ldrh	r2, [r3, #22]
 80114b8:	4b3c      	ldr	r3, [pc, #240]	; (80115ac <tcp_input+0x524>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	885b      	ldrh	r3, [r3, #2]
 80114be:	b29b      	uxth	r3, r3
 80114c0:	429a      	cmp	r2, r3
 80114c2:	d10c      	bne.n	80114de <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80114c4:	697b      	ldr	r3, [r7, #20]
 80114c6:	681a      	ldr	r2, [r3, #0]
 80114c8:	4b39      	ldr	r3, [pc, #228]	; (80115b0 <tcp_input+0x528>)
 80114ca:	695b      	ldr	r3, [r3, #20]
 80114cc:	429a      	cmp	r2, r3
 80114ce:	d00f      	beq.n	80114f0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80114d0:	697b      	ldr	r3, [r7, #20]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d00d      	beq.n	80114f2 <tcp_input+0x46a>
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d009      	beq.n	80114f2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80114de:	697b      	ldr	r3, [r7, #20]
 80114e0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80114e2:	697b      	ldr	r3, [r7, #20]
 80114e4:	68db      	ldr	r3, [r3, #12]
 80114e6:	617b      	str	r3, [r7, #20]
 80114e8:	697b      	ldr	r3, [r7, #20]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d1d1      	bne.n	8011492 <tcp_input+0x40a>
 80114ee:	e000      	b.n	80114f2 <tcp_input+0x46a>
            break;
 80114f0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80114f2:	697b      	ldr	r3, [r7, #20]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d014      	beq.n	8011522 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80114f8:	69bb      	ldr	r3, [r7, #24]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d00a      	beq.n	8011514 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80114fe:	697b      	ldr	r3, [r7, #20]
 8011500:	68da      	ldr	r2, [r3, #12]
 8011502:	69bb      	ldr	r3, [r7, #24]
 8011504:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011506:	4b32      	ldr	r3, [pc, #200]	; (80115d0 <tcp_input+0x548>)
 8011508:	681a      	ldr	r2, [r3, #0]
 801150a:	697b      	ldr	r3, [r7, #20]
 801150c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801150e:	4a30      	ldr	r2, [pc, #192]	; (80115d0 <tcp_input+0x548>)
 8011510:	697b      	ldr	r3, [r7, #20]
 8011512:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011514:	6978      	ldr	r0, [r7, #20]
 8011516:	f000 f9ff 	bl	8011918 <tcp_listen_input>
      }
      pbuf_free(p);
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f7fd fcf6 	bl	800ef0c <pbuf_free>
      return;
 8011520:	e199      	b.n	8011856 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011522:	69fb      	ldr	r3, [r7, #28]
 8011524:	2b00      	cmp	r3, #0
 8011526:	f000 8160 	beq.w	80117ea <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801152a:	4b2a      	ldr	r3, [pc, #168]	; (80115d4 <tcp_input+0x54c>)
 801152c:	2200      	movs	r2, #0
 801152e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	891a      	ldrh	r2, [r3, #8]
 8011534:	4b27      	ldr	r3, [pc, #156]	; (80115d4 <tcp_input+0x54c>)
 8011536:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8011538:	4a26      	ldr	r2, [pc, #152]	; (80115d4 <tcp_input+0x54c>)
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801153e:	4b1b      	ldr	r3, [pc, #108]	; (80115ac <tcp_input+0x524>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	4a24      	ldr	r2, [pc, #144]	; (80115d4 <tcp_input+0x54c>)
 8011544:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8011546:	4b24      	ldr	r3, [pc, #144]	; (80115d8 <tcp_input+0x550>)
 8011548:	2200      	movs	r2, #0
 801154a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801154c:	4b23      	ldr	r3, [pc, #140]	; (80115dc <tcp_input+0x554>)
 801154e:	2200      	movs	r2, #0
 8011550:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011552:	4b23      	ldr	r3, [pc, #140]	; (80115e0 <tcp_input+0x558>)
 8011554:	2200      	movs	r2, #0
 8011556:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8011558:	4b22      	ldr	r3, [pc, #136]	; (80115e4 <tcp_input+0x55c>)
 801155a:	781b      	ldrb	r3, [r3, #0]
 801155c:	f003 0308 	and.w	r3, r3, #8
 8011560:	2b00      	cmp	r3, #0
 8011562:	d006      	beq.n	8011572 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	7b5b      	ldrb	r3, [r3, #13]
 8011568:	f043 0301 	orr.w	r3, r3, #1
 801156c:	b2da      	uxtb	r2, r3
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011572:	69fb      	ldr	r3, [r7, #28]
 8011574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011576:	2b00      	cmp	r3, #0
 8011578:	d038      	beq.n	80115ec <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801157a:	69f8      	ldr	r0, [r7, #28]
 801157c:	f7ff f872 	bl	8010664 <tcp_process_refused_data>
 8011580:	4603      	mov	r3, r0
 8011582:	f113 0f0d 	cmn.w	r3, #13
 8011586:	d007      	beq.n	8011598 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011588:	69fb      	ldr	r3, [r7, #28]
 801158a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801158c:	2b00      	cmp	r3, #0
 801158e:	d02d      	beq.n	80115ec <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011590:	4b15      	ldr	r3, [pc, #84]	; (80115e8 <tcp_input+0x560>)
 8011592:	881b      	ldrh	r3, [r3, #0]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d029      	beq.n	80115ec <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011598:	69fb      	ldr	r3, [r7, #28]
 801159a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801159c:	2b00      	cmp	r3, #0
 801159e:	f040 8104 	bne.w	80117aa <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80115a2:	69f8      	ldr	r0, [r7, #28]
 80115a4:	f003 fe28 	bl	80151f8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80115a8:	e0ff      	b.n	80117aa <tcp_input+0x722>
 80115aa:	bf00      	nop
 80115ac:	20008814 	.word	0x20008814
 80115b0:	2000c5e0 	.word	0x2000c5e0
 80115b4:	0801f260 	.word	0x0801f260
 80115b8:	0801f38c 	.word	0x0801f38c
 80115bc:	0801f2ac 	.word	0x0801f2ac
 80115c0:	2000fcf4 	.word	0x2000fcf4
 80115c4:	0801f3b8 	.word	0x0801f3b8
 80115c8:	2000fd04 	.word	0x2000fd04
 80115cc:	0801f3e4 	.word	0x0801f3e4
 80115d0:	2000fcfc 	.word	0x2000fcfc
 80115d4:	20008804 	.word	0x20008804
 80115d8:	20008834 	.word	0x20008834
 80115dc:	20008831 	.word	0x20008831
 80115e0:	2000882c 	.word	0x2000882c
 80115e4:	20008830 	.word	0x20008830
 80115e8:	2000882e 	.word	0x2000882e
      }
    }
    tcp_input_pcb = pcb;
 80115ec:	4a9b      	ldr	r2, [pc, #620]	; (801185c <tcp_input+0x7d4>)
 80115ee:	69fb      	ldr	r3, [r7, #28]
 80115f0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80115f2:	69f8      	ldr	r0, [r7, #28]
 80115f4:	f000 fb0a 	bl	8011c0c <tcp_process>
 80115f8:	4603      	mov	r3, r0
 80115fa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80115fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011600:	f113 0f0d 	cmn.w	r3, #13
 8011604:	f000 80d3 	beq.w	80117ae <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8011608:	4b95      	ldr	r3, [pc, #596]	; (8011860 <tcp_input+0x7d8>)
 801160a:	781b      	ldrb	r3, [r3, #0]
 801160c:	f003 0308 	and.w	r3, r3, #8
 8011610:	2b00      	cmp	r3, #0
 8011612:	d015      	beq.n	8011640 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011614:	69fb      	ldr	r3, [r7, #28]
 8011616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801161a:	2b00      	cmp	r3, #0
 801161c:	d008      	beq.n	8011630 <tcp_input+0x5a8>
 801161e:	69fb      	ldr	r3, [r7, #28]
 8011620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011624:	69fa      	ldr	r2, [r7, #28]
 8011626:	6912      	ldr	r2, [r2, #16]
 8011628:	f06f 010d 	mvn.w	r1, #13
 801162c:	4610      	mov	r0, r2
 801162e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011630:	69f9      	ldr	r1, [r7, #28]
 8011632:	488c      	ldr	r0, [pc, #560]	; (8011864 <tcp_input+0x7dc>)
 8011634:	f7ff fbb0 	bl	8010d98 <tcp_pcb_remove>
        tcp_free(pcb);
 8011638:	69f8      	ldr	r0, [r7, #28]
 801163a:	f7fd ff23 	bl	800f484 <tcp_free>
 801163e:	e0c1      	b.n	80117c4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8011640:	2300      	movs	r3, #0
 8011642:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011644:	4b88      	ldr	r3, [pc, #544]	; (8011868 <tcp_input+0x7e0>)
 8011646:	881b      	ldrh	r3, [r3, #0]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d01d      	beq.n	8011688 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801164c:	4b86      	ldr	r3, [pc, #536]	; (8011868 <tcp_input+0x7e0>)
 801164e:	881b      	ldrh	r3, [r3, #0]
 8011650:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011652:	69fb      	ldr	r3, [r7, #28]
 8011654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011658:	2b00      	cmp	r3, #0
 801165a:	d00a      	beq.n	8011672 <tcp_input+0x5ea>
 801165c:	69fb      	ldr	r3, [r7, #28]
 801165e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011662:	69fa      	ldr	r2, [r7, #28]
 8011664:	6910      	ldr	r0, [r2, #16]
 8011666:	89fa      	ldrh	r2, [r7, #14]
 8011668:	69f9      	ldr	r1, [r7, #28]
 801166a:	4798      	blx	r3
 801166c:	4603      	mov	r3, r0
 801166e:	74fb      	strb	r3, [r7, #19]
 8011670:	e001      	b.n	8011676 <tcp_input+0x5ee>
 8011672:	2300      	movs	r3, #0
 8011674:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011676:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801167a:	f113 0f0d 	cmn.w	r3, #13
 801167e:	f000 8098 	beq.w	80117b2 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011682:	4b79      	ldr	r3, [pc, #484]	; (8011868 <tcp_input+0x7e0>)
 8011684:	2200      	movs	r2, #0
 8011686:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011688:	69f8      	ldr	r0, [r7, #28]
 801168a:	f000 f905 	bl	8011898 <tcp_input_delayed_close>
 801168e:	4603      	mov	r3, r0
 8011690:	2b00      	cmp	r3, #0
 8011692:	f040 8090 	bne.w	80117b6 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011696:	4b75      	ldr	r3, [pc, #468]	; (801186c <tcp_input+0x7e4>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d041      	beq.n	8011722 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801169e:	69fb      	ldr	r3, [r7, #28]
 80116a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d006      	beq.n	80116b4 <tcp_input+0x62c>
 80116a6:	4b72      	ldr	r3, [pc, #456]	; (8011870 <tcp_input+0x7e8>)
 80116a8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80116ac:	4971      	ldr	r1, [pc, #452]	; (8011874 <tcp_input+0x7ec>)
 80116ae:	4872      	ldr	r0, [pc, #456]	; (8011878 <tcp_input+0x7f0>)
 80116b0:	f008 f906 	bl	80198c0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80116b4:	69fb      	ldr	r3, [r7, #28]
 80116b6:	8b5b      	ldrh	r3, [r3, #26]
 80116b8:	f003 0310 	and.w	r3, r3, #16
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d008      	beq.n	80116d2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80116c0:	4b6a      	ldr	r3, [pc, #424]	; (801186c <tcp_input+0x7e4>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	4618      	mov	r0, r3
 80116c6:	f7fd fc21 	bl	800ef0c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80116ca:	69f8      	ldr	r0, [r7, #28]
 80116cc:	f7fe fa14 	bl	800faf8 <tcp_abort>
            goto aborted;
 80116d0:	e078      	b.n	80117c4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80116d2:	69fb      	ldr	r3, [r7, #28]
 80116d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d00c      	beq.n	80116f6 <tcp_input+0x66e>
 80116dc:	69fb      	ldr	r3, [r7, #28]
 80116de:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80116e2:	69fb      	ldr	r3, [r7, #28]
 80116e4:	6918      	ldr	r0, [r3, #16]
 80116e6:	4b61      	ldr	r3, [pc, #388]	; (801186c <tcp_input+0x7e4>)
 80116e8:	681a      	ldr	r2, [r3, #0]
 80116ea:	2300      	movs	r3, #0
 80116ec:	69f9      	ldr	r1, [r7, #28]
 80116ee:	47a0      	blx	r4
 80116f0:	4603      	mov	r3, r0
 80116f2:	74fb      	strb	r3, [r7, #19]
 80116f4:	e008      	b.n	8011708 <tcp_input+0x680>
 80116f6:	4b5d      	ldr	r3, [pc, #372]	; (801186c <tcp_input+0x7e4>)
 80116f8:	681a      	ldr	r2, [r3, #0]
 80116fa:	2300      	movs	r3, #0
 80116fc:	69f9      	ldr	r1, [r7, #28]
 80116fe:	2000      	movs	r0, #0
 8011700:	f7ff f884 	bl	801080c <tcp_recv_null>
 8011704:	4603      	mov	r3, r0
 8011706:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011708:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801170c:	f113 0f0d 	cmn.w	r3, #13
 8011710:	d053      	beq.n	80117ba <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011712:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d003      	beq.n	8011722 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801171a:	4b54      	ldr	r3, [pc, #336]	; (801186c <tcp_input+0x7e4>)
 801171c:	681a      	ldr	r2, [r3, #0]
 801171e:	69fb      	ldr	r3, [r7, #28]
 8011720:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011722:	4b4f      	ldr	r3, [pc, #316]	; (8011860 <tcp_input+0x7d8>)
 8011724:	781b      	ldrb	r3, [r3, #0]
 8011726:	f003 0320 	and.w	r3, r3, #32
 801172a:	2b00      	cmp	r3, #0
 801172c:	d030      	beq.n	8011790 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801172e:	69fb      	ldr	r3, [r7, #28]
 8011730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011732:	2b00      	cmp	r3, #0
 8011734:	d009      	beq.n	801174a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011736:	69fb      	ldr	r3, [r7, #28]
 8011738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801173a:	7b5a      	ldrb	r2, [r3, #13]
 801173c:	69fb      	ldr	r3, [r7, #28]
 801173e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011740:	f042 0220 	orr.w	r2, r2, #32
 8011744:	b2d2      	uxtb	r2, r2
 8011746:	735a      	strb	r2, [r3, #13]
 8011748:	e022      	b.n	8011790 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801174a:	69fb      	ldr	r3, [r7, #28]
 801174c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801174e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011752:	d005      	beq.n	8011760 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8011754:	69fb      	ldr	r3, [r7, #28]
 8011756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011758:	3301      	adds	r3, #1
 801175a:	b29a      	uxth	r2, r3
 801175c:	69fb      	ldr	r3, [r7, #28]
 801175e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011760:	69fb      	ldr	r3, [r7, #28]
 8011762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011766:	2b00      	cmp	r3, #0
 8011768:	d00b      	beq.n	8011782 <tcp_input+0x6fa>
 801176a:	69fb      	ldr	r3, [r7, #28]
 801176c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011770:	69fb      	ldr	r3, [r7, #28]
 8011772:	6918      	ldr	r0, [r3, #16]
 8011774:	2300      	movs	r3, #0
 8011776:	2200      	movs	r2, #0
 8011778:	69f9      	ldr	r1, [r7, #28]
 801177a:	47a0      	blx	r4
 801177c:	4603      	mov	r3, r0
 801177e:	74fb      	strb	r3, [r7, #19]
 8011780:	e001      	b.n	8011786 <tcp_input+0x6fe>
 8011782:	2300      	movs	r3, #0
 8011784:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011786:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801178a:	f113 0f0d 	cmn.w	r3, #13
 801178e:	d016      	beq.n	80117be <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011790:	4b32      	ldr	r3, [pc, #200]	; (801185c <tcp_input+0x7d4>)
 8011792:	2200      	movs	r2, #0
 8011794:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011796:	69f8      	ldr	r0, [r7, #28]
 8011798:	f000 f87e 	bl	8011898 <tcp_input_delayed_close>
 801179c:	4603      	mov	r3, r0
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d10f      	bne.n	80117c2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80117a2:	69f8      	ldr	r0, [r7, #28]
 80117a4:	f002 ff10 	bl	80145c8 <tcp_output>
 80117a8:	e00c      	b.n	80117c4 <tcp_input+0x73c>
        goto aborted;
 80117aa:	bf00      	nop
 80117ac:	e00a      	b.n	80117c4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80117ae:	bf00      	nop
 80117b0:	e008      	b.n	80117c4 <tcp_input+0x73c>
              goto aborted;
 80117b2:	bf00      	nop
 80117b4:	e006      	b.n	80117c4 <tcp_input+0x73c>
          goto aborted;
 80117b6:	bf00      	nop
 80117b8:	e004      	b.n	80117c4 <tcp_input+0x73c>
            goto aborted;
 80117ba:	bf00      	nop
 80117bc:	e002      	b.n	80117c4 <tcp_input+0x73c>
              goto aborted;
 80117be:	bf00      	nop
 80117c0:	e000      	b.n	80117c4 <tcp_input+0x73c>
          goto aborted;
 80117c2:	bf00      	nop
    tcp_input_pcb = NULL;
 80117c4:	4b25      	ldr	r3, [pc, #148]	; (801185c <tcp_input+0x7d4>)
 80117c6:	2200      	movs	r2, #0
 80117c8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80117ca:	4b28      	ldr	r3, [pc, #160]	; (801186c <tcp_input+0x7e4>)
 80117cc:	2200      	movs	r2, #0
 80117ce:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80117d0:	4b2a      	ldr	r3, [pc, #168]	; (801187c <tcp_input+0x7f4>)
 80117d2:	685b      	ldr	r3, [r3, #4]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d03d      	beq.n	8011854 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 80117d8:	4b28      	ldr	r3, [pc, #160]	; (801187c <tcp_input+0x7f4>)
 80117da:	685b      	ldr	r3, [r3, #4]
 80117dc:	4618      	mov	r0, r3
 80117de:	f7fd fb95 	bl	800ef0c <pbuf_free>
      inseg.p = NULL;
 80117e2:	4b26      	ldr	r3, [pc, #152]	; (801187c <tcp_input+0x7f4>)
 80117e4:	2200      	movs	r2, #0
 80117e6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80117e8:	e034      	b.n	8011854 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80117ea:	4b25      	ldr	r3, [pc, #148]	; (8011880 <tcp_input+0x7f8>)
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	899b      	ldrh	r3, [r3, #12]
 80117f0:	b29b      	uxth	r3, r3
 80117f2:	4618      	mov	r0, r3
 80117f4:	f7fc f85a 	bl	800d8ac <lwip_htons>
 80117f8:	4603      	mov	r3, r0
 80117fa:	b2db      	uxtb	r3, r3
 80117fc:	f003 0304 	and.w	r3, r3, #4
 8011800:	2b00      	cmp	r3, #0
 8011802:	d118      	bne.n	8011836 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011804:	4b1f      	ldr	r3, [pc, #124]	; (8011884 <tcp_input+0x7fc>)
 8011806:	6819      	ldr	r1, [r3, #0]
 8011808:	4b1f      	ldr	r3, [pc, #124]	; (8011888 <tcp_input+0x800>)
 801180a:	881b      	ldrh	r3, [r3, #0]
 801180c:	461a      	mov	r2, r3
 801180e:	4b1f      	ldr	r3, [pc, #124]	; (801188c <tcp_input+0x804>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011814:	4b1a      	ldr	r3, [pc, #104]	; (8011880 <tcp_input+0x7f8>)
 8011816:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011818:	885b      	ldrh	r3, [r3, #2]
 801181a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801181c:	4a18      	ldr	r2, [pc, #96]	; (8011880 <tcp_input+0x7f8>)
 801181e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011820:	8812      	ldrh	r2, [r2, #0]
 8011822:	b292      	uxth	r2, r2
 8011824:	9202      	str	r2, [sp, #8]
 8011826:	9301      	str	r3, [sp, #4]
 8011828:	4b19      	ldr	r3, [pc, #100]	; (8011890 <tcp_input+0x808>)
 801182a:	9300      	str	r3, [sp, #0]
 801182c:	4b19      	ldr	r3, [pc, #100]	; (8011894 <tcp_input+0x80c>)
 801182e:	4602      	mov	r2, r0
 8011830:	2000      	movs	r0, #0
 8011832:	f003 fc8f 	bl	8015154 <tcp_rst>
    pbuf_free(p);
 8011836:	6878      	ldr	r0, [r7, #4]
 8011838:	f7fd fb68 	bl	800ef0c <pbuf_free>
  return;
 801183c:	e00a      	b.n	8011854 <tcp_input+0x7cc>
    goto dropped;
 801183e:	bf00      	nop
 8011840:	e004      	b.n	801184c <tcp_input+0x7c4>
dropped:
 8011842:	bf00      	nop
 8011844:	e002      	b.n	801184c <tcp_input+0x7c4>
      goto dropped;
 8011846:	bf00      	nop
 8011848:	e000      	b.n	801184c <tcp_input+0x7c4>
      goto dropped;
 801184a:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801184c:	6878      	ldr	r0, [r7, #4]
 801184e:	f7fd fb5d 	bl	800ef0c <pbuf_free>
 8011852:	e000      	b.n	8011856 <tcp_input+0x7ce>
  return;
 8011854:	bf00      	nop
}
 8011856:	3724      	adds	r7, #36	; 0x24
 8011858:	46bd      	mov	sp, r7
 801185a:	bd90      	pop	{r4, r7, pc}
 801185c:	2000fd08 	.word	0x2000fd08
 8011860:	20008831 	.word	0x20008831
 8011864:	2000fcf4 	.word	0x2000fcf4
 8011868:	2000882c 	.word	0x2000882c
 801186c:	20008834 	.word	0x20008834
 8011870:	0801f260 	.word	0x0801f260
 8011874:	0801f414 	.word	0x0801f414
 8011878:	0801f2ac 	.word	0x0801f2ac
 801187c:	20008804 	.word	0x20008804
 8011880:	20008814 	.word	0x20008814
 8011884:	20008828 	.word	0x20008828
 8011888:	2000882e 	.word	0x2000882e
 801188c:	20008824 	.word	0x20008824
 8011890:	2000c5f0 	.word	0x2000c5f0
 8011894:	2000c5f4 	.word	0x2000c5f4

08011898 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b082      	sub	sp, #8
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d106      	bne.n	80118b4 <tcp_input_delayed_close+0x1c>
 80118a6:	4b17      	ldr	r3, [pc, #92]	; (8011904 <tcp_input_delayed_close+0x6c>)
 80118a8:	f240 225a 	movw	r2, #602	; 0x25a
 80118ac:	4916      	ldr	r1, [pc, #88]	; (8011908 <tcp_input_delayed_close+0x70>)
 80118ae:	4817      	ldr	r0, [pc, #92]	; (801190c <tcp_input_delayed_close+0x74>)
 80118b0:	f008 f806 	bl	80198c0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80118b4:	4b16      	ldr	r3, [pc, #88]	; (8011910 <tcp_input_delayed_close+0x78>)
 80118b6:	781b      	ldrb	r3, [r3, #0]
 80118b8:	f003 0310 	and.w	r3, r3, #16
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d01c      	beq.n	80118fa <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	8b5b      	ldrh	r3, [r3, #26]
 80118c4:	f003 0310 	and.w	r3, r3, #16
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d10d      	bne.n	80118e8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d008      	beq.n	80118e8 <tcp_input_delayed_close+0x50>
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118dc:	687a      	ldr	r2, [r7, #4]
 80118de:	6912      	ldr	r2, [r2, #16]
 80118e0:	f06f 010e 	mvn.w	r1, #14
 80118e4:	4610      	mov	r0, r2
 80118e6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80118e8:	6879      	ldr	r1, [r7, #4]
 80118ea:	480a      	ldr	r0, [pc, #40]	; (8011914 <tcp_input_delayed_close+0x7c>)
 80118ec:	f7ff fa54 	bl	8010d98 <tcp_pcb_remove>
    tcp_free(pcb);
 80118f0:	6878      	ldr	r0, [r7, #4]
 80118f2:	f7fd fdc7 	bl	800f484 <tcp_free>
    return 1;
 80118f6:	2301      	movs	r3, #1
 80118f8:	e000      	b.n	80118fc <tcp_input_delayed_close+0x64>
  }
  return 0;
 80118fa:	2300      	movs	r3, #0
}
 80118fc:	4618      	mov	r0, r3
 80118fe:	3708      	adds	r7, #8
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}
 8011904:	0801f260 	.word	0x0801f260
 8011908:	0801f430 	.word	0x0801f430
 801190c:	0801f2ac 	.word	0x0801f2ac
 8011910:	20008831 	.word	0x20008831
 8011914:	2000fcf4 	.word	0x2000fcf4

08011918 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011918:	b590      	push	{r4, r7, lr}
 801191a:	b08b      	sub	sp, #44	; 0x2c
 801191c:	af04      	add	r7, sp, #16
 801191e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011920:	4b6f      	ldr	r3, [pc, #444]	; (8011ae0 <tcp_listen_input+0x1c8>)
 8011922:	781b      	ldrb	r3, [r3, #0]
 8011924:	f003 0304 	and.w	r3, r3, #4
 8011928:	2b00      	cmp	r3, #0
 801192a:	f040 80d3 	bne.w	8011ad4 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d106      	bne.n	8011942 <tcp_listen_input+0x2a>
 8011934:	4b6b      	ldr	r3, [pc, #428]	; (8011ae4 <tcp_listen_input+0x1cc>)
 8011936:	f240 2281 	movw	r2, #641	; 0x281
 801193a:	496b      	ldr	r1, [pc, #428]	; (8011ae8 <tcp_listen_input+0x1d0>)
 801193c:	486b      	ldr	r0, [pc, #428]	; (8011aec <tcp_listen_input+0x1d4>)
 801193e:	f007 ffbf 	bl	80198c0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011942:	4b67      	ldr	r3, [pc, #412]	; (8011ae0 <tcp_listen_input+0x1c8>)
 8011944:	781b      	ldrb	r3, [r3, #0]
 8011946:	f003 0310 	and.w	r3, r3, #16
 801194a:	2b00      	cmp	r3, #0
 801194c:	d019      	beq.n	8011982 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801194e:	4b68      	ldr	r3, [pc, #416]	; (8011af0 <tcp_listen_input+0x1d8>)
 8011950:	6819      	ldr	r1, [r3, #0]
 8011952:	4b68      	ldr	r3, [pc, #416]	; (8011af4 <tcp_listen_input+0x1dc>)
 8011954:	881b      	ldrh	r3, [r3, #0]
 8011956:	461a      	mov	r2, r3
 8011958:	4b67      	ldr	r3, [pc, #412]	; (8011af8 <tcp_listen_input+0x1e0>)
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801195e:	4b67      	ldr	r3, [pc, #412]	; (8011afc <tcp_listen_input+0x1e4>)
 8011960:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011962:	885b      	ldrh	r3, [r3, #2]
 8011964:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011966:	4a65      	ldr	r2, [pc, #404]	; (8011afc <tcp_listen_input+0x1e4>)
 8011968:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801196a:	8812      	ldrh	r2, [r2, #0]
 801196c:	b292      	uxth	r2, r2
 801196e:	9202      	str	r2, [sp, #8]
 8011970:	9301      	str	r3, [sp, #4]
 8011972:	4b63      	ldr	r3, [pc, #396]	; (8011b00 <tcp_listen_input+0x1e8>)
 8011974:	9300      	str	r3, [sp, #0]
 8011976:	4b63      	ldr	r3, [pc, #396]	; (8011b04 <tcp_listen_input+0x1ec>)
 8011978:	4602      	mov	r2, r0
 801197a:	6878      	ldr	r0, [r7, #4]
 801197c:	f003 fbea 	bl	8015154 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011980:	e0aa      	b.n	8011ad8 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8011982:	4b57      	ldr	r3, [pc, #348]	; (8011ae0 <tcp_listen_input+0x1c8>)
 8011984:	781b      	ldrb	r3, [r3, #0]
 8011986:	f003 0302 	and.w	r3, r3, #2
 801198a:	2b00      	cmp	r3, #0
 801198c:	f000 80a4 	beq.w	8011ad8 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	7d5b      	ldrb	r3, [r3, #21]
 8011994:	4618      	mov	r0, r3
 8011996:	f7ff f85d 	bl	8010a54 <tcp_alloc>
 801199a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801199c:	697b      	ldr	r3, [r7, #20]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d111      	bne.n	80119c6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	699b      	ldr	r3, [r3, #24]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d00a      	beq.n	80119c0 <tcp_listen_input+0xa8>
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	699b      	ldr	r3, [r3, #24]
 80119ae:	687a      	ldr	r2, [r7, #4]
 80119b0:	6910      	ldr	r0, [r2, #16]
 80119b2:	f04f 32ff 	mov.w	r2, #4294967295
 80119b6:	2100      	movs	r1, #0
 80119b8:	4798      	blx	r3
 80119ba:	4603      	mov	r3, r0
 80119bc:	73bb      	strb	r3, [r7, #14]
      return;
 80119be:	e08c      	b.n	8011ada <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80119c0:	23f0      	movs	r3, #240	; 0xf0
 80119c2:	73bb      	strb	r3, [r7, #14]
      return;
 80119c4:	e089      	b.n	8011ada <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80119c6:	4b50      	ldr	r3, [pc, #320]	; (8011b08 <tcp_listen_input+0x1f0>)
 80119c8:	695a      	ldr	r2, [r3, #20]
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80119ce:	4b4e      	ldr	r3, [pc, #312]	; (8011b08 <tcp_listen_input+0x1f0>)
 80119d0:	691a      	ldr	r2, [r3, #16]
 80119d2:	697b      	ldr	r3, [r7, #20]
 80119d4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	8ada      	ldrh	r2, [r3, #22]
 80119da:	697b      	ldr	r3, [r7, #20]
 80119dc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80119de:	4b47      	ldr	r3, [pc, #284]	; (8011afc <tcp_listen_input+0x1e4>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	881b      	ldrh	r3, [r3, #0]
 80119e4:	b29a      	uxth	r2, r3
 80119e6:	697b      	ldr	r3, [r7, #20]
 80119e8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80119ea:	697b      	ldr	r3, [r7, #20]
 80119ec:	2203      	movs	r2, #3
 80119ee:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80119f0:	4b41      	ldr	r3, [pc, #260]	; (8011af8 <tcp_listen_input+0x1e0>)
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	1c5a      	adds	r2, r3, #1
 80119f6:	697b      	ldr	r3, [r7, #20]
 80119f8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80119fa:	697b      	ldr	r3, [r7, #20]
 80119fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011a02:	6978      	ldr	r0, [r7, #20]
 8011a04:	f7ff fa5c 	bl	8010ec0 <tcp_next_iss>
 8011a08:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	693a      	ldr	r2, [r7, #16]
 8011a0e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011a10:	697b      	ldr	r3, [r7, #20]
 8011a12:	693a      	ldr	r2, [r7, #16]
 8011a14:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8011a16:	697b      	ldr	r3, [r7, #20]
 8011a18:	693a      	ldr	r2, [r7, #16]
 8011a1a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011a1c:	697b      	ldr	r3, [r7, #20]
 8011a1e:	693a      	ldr	r2, [r7, #16]
 8011a20:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011a22:	4b35      	ldr	r3, [pc, #212]	; (8011af8 <tcp_listen_input+0x1e0>)
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	1e5a      	subs	r2, r3, #1
 8011a28:	697b      	ldr	r3, [r7, #20]
 8011a2a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	691a      	ldr	r2, [r3, #16]
 8011a30:	697b      	ldr	r3, [r7, #20]
 8011a32:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011a34:	697b      	ldr	r3, [r7, #20]
 8011a36:	687a      	ldr	r2, [r7, #4]
 8011a38:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	7a5b      	ldrb	r3, [r3, #9]
 8011a3e:	f003 030c 	and.w	r3, r3, #12
 8011a42:	b2da      	uxtb	r2, r3
 8011a44:	697b      	ldr	r3, [r7, #20]
 8011a46:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	7a1a      	ldrb	r2, [r3, #8]
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011a50:	4b2e      	ldr	r3, [pc, #184]	; (8011b0c <tcp_listen_input+0x1f4>)
 8011a52:	681a      	ldr	r2, [r3, #0]
 8011a54:	697b      	ldr	r3, [r7, #20]
 8011a56:	60da      	str	r2, [r3, #12]
 8011a58:	4a2c      	ldr	r2, [pc, #176]	; (8011b0c <tcp_listen_input+0x1f4>)
 8011a5a:	697b      	ldr	r3, [r7, #20]
 8011a5c:	6013      	str	r3, [r2, #0]
 8011a5e:	f003 fd3b 	bl	80154d8 <tcp_timer_needed>
 8011a62:	4b2b      	ldr	r3, [pc, #172]	; (8011b10 <tcp_listen_input+0x1f8>)
 8011a64:	2201      	movs	r2, #1
 8011a66:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011a68:	6978      	ldr	r0, [r7, #20]
 8011a6a:	f001 fd8f 	bl	801358c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011a6e:	4b23      	ldr	r3, [pc, #140]	; (8011afc <tcp_listen_input+0x1e4>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	89db      	ldrh	r3, [r3, #14]
 8011a74:	b29a      	uxth	r2, r3
 8011a76:	697b      	ldr	r3, [r7, #20]
 8011a78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011a7c:	697b      	ldr	r3, [r7, #20]
 8011a7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011a82:	697b      	ldr	r3, [r7, #20]
 8011a84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011a88:	697b      	ldr	r3, [r7, #20]
 8011a8a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	3304      	adds	r3, #4
 8011a90:	4618      	mov	r0, r3
 8011a92:	f005 fccb 	bl	801742c <ip4_route>
 8011a96:	4601      	mov	r1, r0
 8011a98:	697b      	ldr	r3, [r7, #20]
 8011a9a:	3304      	adds	r3, #4
 8011a9c:	461a      	mov	r2, r3
 8011a9e:	4620      	mov	r0, r4
 8011aa0:	f7ff fa34 	bl	8010f0c <tcp_eff_send_mss_netif>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	461a      	mov	r2, r3
 8011aa8:	697b      	ldr	r3, [r7, #20]
 8011aaa:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011aac:	2112      	movs	r1, #18
 8011aae:	6978      	ldr	r0, [r7, #20]
 8011ab0:	f002 fc9c 	bl	80143ec <tcp_enqueue_flags>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d004      	beq.n	8011aca <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011ac0:	2100      	movs	r1, #0
 8011ac2:	6978      	ldr	r0, [r7, #20]
 8011ac4:	f7fd ff5a 	bl	800f97c <tcp_abandon>
      return;
 8011ac8:	e007      	b.n	8011ada <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8011aca:	6978      	ldr	r0, [r7, #20]
 8011acc:	f002 fd7c 	bl	80145c8 <tcp_output>
  return;
 8011ad0:	bf00      	nop
 8011ad2:	e001      	b.n	8011ad8 <tcp_listen_input+0x1c0>
    return;
 8011ad4:	bf00      	nop
 8011ad6:	e000      	b.n	8011ada <tcp_listen_input+0x1c2>
  return;
 8011ad8:	bf00      	nop
}
 8011ada:	371c      	adds	r7, #28
 8011adc:	46bd      	mov	sp, r7
 8011ade:	bd90      	pop	{r4, r7, pc}
 8011ae0:	20008830 	.word	0x20008830
 8011ae4:	0801f260 	.word	0x0801f260
 8011ae8:	0801f458 	.word	0x0801f458
 8011aec:	0801f2ac 	.word	0x0801f2ac
 8011af0:	20008828 	.word	0x20008828
 8011af4:	2000882e 	.word	0x2000882e
 8011af8:	20008824 	.word	0x20008824
 8011afc:	20008814 	.word	0x20008814
 8011b00:	2000c5f0 	.word	0x2000c5f0
 8011b04:	2000c5f4 	.word	0x2000c5f4
 8011b08:	2000c5e0 	.word	0x2000c5e0
 8011b0c:	2000fcf4 	.word	0x2000fcf4
 8011b10:	2000fcf0 	.word	0x2000fcf0

08011b14 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b086      	sub	sp, #24
 8011b18:	af04      	add	r7, sp, #16
 8011b1a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011b1c:	4b30      	ldr	r3, [pc, #192]	; (8011be0 <tcp_timewait_input+0xcc>)
 8011b1e:	781b      	ldrb	r3, [r3, #0]
 8011b20:	f003 0304 	and.w	r3, r3, #4
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d154      	bne.n	8011bd2 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d106      	bne.n	8011b3c <tcp_timewait_input+0x28>
 8011b2e:	4b2d      	ldr	r3, [pc, #180]	; (8011be4 <tcp_timewait_input+0xd0>)
 8011b30:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011b34:	492c      	ldr	r1, [pc, #176]	; (8011be8 <tcp_timewait_input+0xd4>)
 8011b36:	482d      	ldr	r0, [pc, #180]	; (8011bec <tcp_timewait_input+0xd8>)
 8011b38:	f007 fec2 	bl	80198c0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011b3c:	4b28      	ldr	r3, [pc, #160]	; (8011be0 <tcp_timewait_input+0xcc>)
 8011b3e:	781b      	ldrb	r3, [r3, #0]
 8011b40:	f003 0302 	and.w	r3, r3, #2
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d02a      	beq.n	8011b9e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011b48:	4b29      	ldr	r3, [pc, #164]	; (8011bf0 <tcp_timewait_input+0xdc>)
 8011b4a:	681a      	ldr	r2, [r3, #0]
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b50:	1ad3      	subs	r3, r2, r3
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	db2d      	blt.n	8011bb2 <tcp_timewait_input+0x9e>
 8011b56:	4b26      	ldr	r3, [pc, #152]	; (8011bf0 <tcp_timewait_input+0xdc>)
 8011b58:	681a      	ldr	r2, [r3, #0]
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b5e:	6879      	ldr	r1, [r7, #4]
 8011b60:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011b62:	440b      	add	r3, r1
 8011b64:	1ad3      	subs	r3, r2, r3
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	dc23      	bgt.n	8011bb2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b6a:	4b22      	ldr	r3, [pc, #136]	; (8011bf4 <tcp_timewait_input+0xe0>)
 8011b6c:	6819      	ldr	r1, [r3, #0]
 8011b6e:	4b22      	ldr	r3, [pc, #136]	; (8011bf8 <tcp_timewait_input+0xe4>)
 8011b70:	881b      	ldrh	r3, [r3, #0]
 8011b72:	461a      	mov	r2, r3
 8011b74:	4b1e      	ldr	r3, [pc, #120]	; (8011bf0 <tcp_timewait_input+0xdc>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b7a:	4b20      	ldr	r3, [pc, #128]	; (8011bfc <tcp_timewait_input+0xe8>)
 8011b7c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b7e:	885b      	ldrh	r3, [r3, #2]
 8011b80:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b82:	4a1e      	ldr	r2, [pc, #120]	; (8011bfc <tcp_timewait_input+0xe8>)
 8011b84:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b86:	8812      	ldrh	r2, [r2, #0]
 8011b88:	b292      	uxth	r2, r2
 8011b8a:	9202      	str	r2, [sp, #8]
 8011b8c:	9301      	str	r3, [sp, #4]
 8011b8e:	4b1c      	ldr	r3, [pc, #112]	; (8011c00 <tcp_timewait_input+0xec>)
 8011b90:	9300      	str	r3, [sp, #0]
 8011b92:	4b1c      	ldr	r3, [pc, #112]	; (8011c04 <tcp_timewait_input+0xf0>)
 8011b94:	4602      	mov	r2, r0
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	f003 fadc 	bl	8015154 <tcp_rst>
      return;
 8011b9c:	e01c      	b.n	8011bd8 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8011b9e:	4b10      	ldr	r3, [pc, #64]	; (8011be0 <tcp_timewait_input+0xcc>)
 8011ba0:	781b      	ldrb	r3, [r3, #0]
 8011ba2:	f003 0301 	and.w	r3, r3, #1
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d003      	beq.n	8011bb2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011baa:	4b17      	ldr	r3, [pc, #92]	; (8011c08 <tcp_timewait_input+0xf4>)
 8011bac:	681a      	ldr	r2, [r3, #0]
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011bb2:	4b11      	ldr	r3, [pc, #68]	; (8011bf8 <tcp_timewait_input+0xe4>)
 8011bb4:	881b      	ldrh	r3, [r3, #0]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d00d      	beq.n	8011bd6 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	8b5b      	ldrh	r3, [r3, #26]
 8011bbe:	f043 0302 	orr.w	r3, r3, #2
 8011bc2:	b29a      	uxth	r2, r3
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011bc8:	6878      	ldr	r0, [r7, #4]
 8011bca:	f002 fcfd 	bl	80145c8 <tcp_output>
  }
  return;
 8011bce:	bf00      	nop
 8011bd0:	e001      	b.n	8011bd6 <tcp_timewait_input+0xc2>
    return;
 8011bd2:	bf00      	nop
 8011bd4:	e000      	b.n	8011bd8 <tcp_timewait_input+0xc4>
  return;
 8011bd6:	bf00      	nop
}
 8011bd8:	3708      	adds	r7, #8
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}
 8011bde:	bf00      	nop
 8011be0:	20008830 	.word	0x20008830
 8011be4:	0801f260 	.word	0x0801f260
 8011be8:	0801f478 	.word	0x0801f478
 8011bec:	0801f2ac 	.word	0x0801f2ac
 8011bf0:	20008824 	.word	0x20008824
 8011bf4:	20008828 	.word	0x20008828
 8011bf8:	2000882e 	.word	0x2000882e
 8011bfc:	20008814 	.word	0x20008814
 8011c00:	2000c5f0 	.word	0x2000c5f0
 8011c04:	2000c5f4 	.word	0x2000c5f4
 8011c08:	2000fcf8 	.word	0x2000fcf8

08011c0c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011c0c:	b590      	push	{r4, r7, lr}
 8011c0e:	b08d      	sub	sp, #52	; 0x34
 8011c10:	af04      	add	r7, sp, #16
 8011c12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011c14:	2300      	movs	r3, #0
 8011c16:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011c18:	2300      	movs	r3, #0
 8011c1a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d106      	bne.n	8011c30 <tcp_process+0x24>
 8011c22:	4ba5      	ldr	r3, [pc, #660]	; (8011eb8 <tcp_process+0x2ac>)
 8011c24:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011c28:	49a4      	ldr	r1, [pc, #656]	; (8011ebc <tcp_process+0x2b0>)
 8011c2a:	48a5      	ldr	r0, [pc, #660]	; (8011ec0 <tcp_process+0x2b4>)
 8011c2c:	f007 fe48 	bl	80198c0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011c30:	4ba4      	ldr	r3, [pc, #656]	; (8011ec4 <tcp_process+0x2b8>)
 8011c32:	781b      	ldrb	r3, [r3, #0]
 8011c34:	f003 0304 	and.w	r3, r3, #4
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d04e      	beq.n	8011cda <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	7d1b      	ldrb	r3, [r3, #20]
 8011c40:	2b02      	cmp	r3, #2
 8011c42:	d108      	bne.n	8011c56 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011c48:	4b9f      	ldr	r3, [pc, #636]	; (8011ec8 <tcp_process+0x2bc>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	429a      	cmp	r2, r3
 8011c4e:	d123      	bne.n	8011c98 <tcp_process+0x8c>
        acceptable = 1;
 8011c50:	2301      	movs	r3, #1
 8011c52:	76fb      	strb	r3, [r7, #27]
 8011c54:	e020      	b.n	8011c98 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c5a:	4b9c      	ldr	r3, [pc, #624]	; (8011ecc <tcp_process+0x2c0>)
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	429a      	cmp	r2, r3
 8011c60:	d102      	bne.n	8011c68 <tcp_process+0x5c>
        acceptable = 1;
 8011c62:	2301      	movs	r3, #1
 8011c64:	76fb      	strb	r3, [r7, #27]
 8011c66:	e017      	b.n	8011c98 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011c68:	4b98      	ldr	r3, [pc, #608]	; (8011ecc <tcp_process+0x2c0>)
 8011c6a:	681a      	ldr	r2, [r3, #0]
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c70:	1ad3      	subs	r3, r2, r3
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	db10      	blt.n	8011c98 <tcp_process+0x8c>
 8011c76:	4b95      	ldr	r3, [pc, #596]	; (8011ecc <tcp_process+0x2c0>)
 8011c78:	681a      	ldr	r2, [r3, #0]
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c7e:	6879      	ldr	r1, [r7, #4]
 8011c80:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011c82:	440b      	add	r3, r1
 8011c84:	1ad3      	subs	r3, r2, r3
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	dc06      	bgt.n	8011c98 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	8b5b      	ldrh	r3, [r3, #26]
 8011c8e:	f043 0302 	orr.w	r3, r3, #2
 8011c92:	b29a      	uxth	r2, r3
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011c98:	7efb      	ldrb	r3, [r7, #27]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d01b      	beq.n	8011cd6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	7d1b      	ldrb	r3, [r3, #20]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d106      	bne.n	8011cb4 <tcp_process+0xa8>
 8011ca6:	4b84      	ldr	r3, [pc, #528]	; (8011eb8 <tcp_process+0x2ac>)
 8011ca8:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011cac:	4988      	ldr	r1, [pc, #544]	; (8011ed0 <tcp_process+0x2c4>)
 8011cae:	4884      	ldr	r0, [pc, #528]	; (8011ec0 <tcp_process+0x2b4>)
 8011cb0:	f007 fe06 	bl	80198c0 <iprintf>
      recv_flags |= TF_RESET;
 8011cb4:	4b87      	ldr	r3, [pc, #540]	; (8011ed4 <tcp_process+0x2c8>)
 8011cb6:	781b      	ldrb	r3, [r3, #0]
 8011cb8:	f043 0308 	orr.w	r3, r3, #8
 8011cbc:	b2da      	uxtb	r2, r3
 8011cbe:	4b85      	ldr	r3, [pc, #532]	; (8011ed4 <tcp_process+0x2c8>)
 8011cc0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	8b5b      	ldrh	r3, [r3, #26]
 8011cc6:	f023 0301 	bic.w	r3, r3, #1
 8011cca:	b29a      	uxth	r2, r3
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011cd0:	f06f 030d 	mvn.w	r3, #13
 8011cd4:	e37a      	b.n	80123cc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	e378      	b.n	80123cc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011cda:	4b7a      	ldr	r3, [pc, #488]	; (8011ec4 <tcp_process+0x2b8>)
 8011cdc:	781b      	ldrb	r3, [r3, #0]
 8011cde:	f003 0302 	and.w	r3, r3, #2
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d010      	beq.n	8011d08 <tcp_process+0xfc>
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	7d1b      	ldrb	r3, [r3, #20]
 8011cea:	2b02      	cmp	r3, #2
 8011cec:	d00c      	beq.n	8011d08 <tcp_process+0xfc>
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	7d1b      	ldrb	r3, [r3, #20]
 8011cf2:	2b03      	cmp	r3, #3
 8011cf4:	d008      	beq.n	8011d08 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	8b5b      	ldrh	r3, [r3, #26]
 8011cfa:	f043 0302 	orr.w	r3, r3, #2
 8011cfe:	b29a      	uxth	r2, r3
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011d04:	2300      	movs	r3, #0
 8011d06:	e361      	b.n	80123cc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	8b5b      	ldrh	r3, [r3, #26]
 8011d0c:	f003 0310 	and.w	r3, r3, #16
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d103      	bne.n	8011d1c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011d14:	4b70      	ldr	r3, [pc, #448]	; (8011ed8 <tcp_process+0x2cc>)
 8011d16:	681a      	ldr	r2, [r3, #0]
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2200      	movs	r2, #0
 8011d20:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	2200      	movs	r2, #0
 8011d28:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8011d2c:	6878      	ldr	r0, [r7, #4]
 8011d2e:	f001 fc2d 	bl	801358c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	7d1b      	ldrb	r3, [r3, #20]
 8011d36:	3b02      	subs	r3, #2
 8011d38:	2b07      	cmp	r3, #7
 8011d3a:	f200 8337 	bhi.w	80123ac <tcp_process+0x7a0>
 8011d3e:	a201      	add	r2, pc, #4	; (adr r2, 8011d44 <tcp_process+0x138>)
 8011d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d44:	08011d65 	.word	0x08011d65
 8011d48:	08011f95 	.word	0x08011f95
 8011d4c:	0801210d 	.word	0x0801210d
 8011d50:	08012137 	.word	0x08012137
 8011d54:	0801225b 	.word	0x0801225b
 8011d58:	0801210d 	.word	0x0801210d
 8011d5c:	080122e7 	.word	0x080122e7
 8011d60:	08012377 	.word	0x08012377
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011d64:	4b57      	ldr	r3, [pc, #348]	; (8011ec4 <tcp_process+0x2b8>)
 8011d66:	781b      	ldrb	r3, [r3, #0]
 8011d68:	f003 0310 	and.w	r3, r3, #16
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	f000 80e4 	beq.w	8011f3a <tcp_process+0x32e>
 8011d72:	4b54      	ldr	r3, [pc, #336]	; (8011ec4 <tcp_process+0x2b8>)
 8011d74:	781b      	ldrb	r3, [r3, #0]
 8011d76:	f003 0302 	and.w	r3, r3, #2
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	f000 80dd 	beq.w	8011f3a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d84:	1c5a      	adds	r2, r3, #1
 8011d86:	4b50      	ldr	r3, [pc, #320]	; (8011ec8 <tcp_process+0x2bc>)
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	429a      	cmp	r2, r3
 8011d8c:	f040 80d5 	bne.w	8011f3a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011d90:	4b4e      	ldr	r3, [pc, #312]	; (8011ecc <tcp_process+0x2c0>)
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	1c5a      	adds	r2, r3, #1
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011da2:	4b49      	ldr	r3, [pc, #292]	; (8011ec8 <tcp_process+0x2bc>)
 8011da4:	681a      	ldr	r2, [r3, #0]
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8011daa:	4b4c      	ldr	r3, [pc, #304]	; (8011edc <tcp_process+0x2d0>)
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	89db      	ldrh	r3, [r3, #14]
 8011db0:	b29a      	uxth	r2, r3
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011dc4:	4b41      	ldr	r3, [pc, #260]	; (8011ecc <tcp_process+0x2c0>)
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	1e5a      	subs	r2, r3, #1
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	2204      	movs	r2, #4
 8011dd2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	3304      	adds	r3, #4
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f005 fb25 	bl	801742c <ip4_route>
 8011de2:	4601      	mov	r1, r0
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	3304      	adds	r3, #4
 8011de8:	461a      	mov	r2, r3
 8011dea:	4620      	mov	r0, r4
 8011dec:	f7ff f88e 	bl	8010f0c <tcp_eff_send_mss_netif>
 8011df0:	4603      	mov	r3, r0
 8011df2:	461a      	mov	r2, r3
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011dfc:	009a      	lsls	r2, r3, #2
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e02:	005b      	lsls	r3, r3, #1
 8011e04:	f241 111c 	movw	r1, #4380	; 0x111c
 8011e08:	428b      	cmp	r3, r1
 8011e0a:	bf38      	it	cc
 8011e0c:	460b      	movcc	r3, r1
 8011e0e:	429a      	cmp	r2, r3
 8011e10:	d204      	bcs.n	8011e1c <tcp_process+0x210>
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e16:	009b      	lsls	r3, r3, #2
 8011e18:	b29b      	uxth	r3, r3
 8011e1a:	e00d      	b.n	8011e38 <tcp_process+0x22c>
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e20:	005b      	lsls	r3, r3, #1
 8011e22:	f241 121c 	movw	r2, #4380	; 0x111c
 8011e26:	4293      	cmp	r3, r2
 8011e28:	d904      	bls.n	8011e34 <tcp_process+0x228>
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e2e:	005b      	lsls	r3, r3, #1
 8011e30:	b29b      	uxth	r3, r3
 8011e32:	e001      	b.n	8011e38 <tcp_process+0x22c>
 8011e34:	f241 131c 	movw	r3, #4380	; 0x111c
 8011e38:	687a      	ldr	r2, [r7, #4]
 8011e3a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d106      	bne.n	8011e56 <tcp_process+0x24a>
 8011e48:	4b1b      	ldr	r3, [pc, #108]	; (8011eb8 <tcp_process+0x2ac>)
 8011e4a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011e4e:	4924      	ldr	r1, [pc, #144]	; (8011ee0 <tcp_process+0x2d4>)
 8011e50:	481b      	ldr	r0, [pc, #108]	; (8011ec0 <tcp_process+0x2b4>)
 8011e52:	f007 fd35 	bl	80198c0 <iprintf>
        --pcb->snd_queuelen;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e5c:	3b01      	subs	r3, #1
 8011e5e:	b29a      	uxth	r2, r3
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e6a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011e6c:	69fb      	ldr	r3, [r7, #28]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d111      	bne.n	8011e96 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e76:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011e78:	69fb      	ldr	r3, [r7, #28]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d106      	bne.n	8011e8c <tcp_process+0x280>
 8011e7e:	4b0e      	ldr	r3, [pc, #56]	; (8011eb8 <tcp_process+0x2ac>)
 8011e80:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011e84:	4917      	ldr	r1, [pc, #92]	; (8011ee4 <tcp_process+0x2d8>)
 8011e86:	480e      	ldr	r0, [pc, #56]	; (8011ec0 <tcp_process+0x2b4>)
 8011e88:	f007 fd1a 	bl	80198c0 <iprintf>
          pcb->unsent = rseg->next;
 8011e8c:	69fb      	ldr	r3, [r7, #28]
 8011e8e:	681a      	ldr	r2, [r3, #0]
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	66da      	str	r2, [r3, #108]	; 0x6c
 8011e94:	e003      	b.n	8011e9e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8011e96:	69fb      	ldr	r3, [r7, #28]
 8011e98:	681a      	ldr	r2, [r3, #0]
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011e9e:	69f8      	ldr	r0, [r7, #28]
 8011ea0:	f7fe fc70 	bl	8010784 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d11d      	bne.n	8011ee8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011eb2:	861a      	strh	r2, [r3, #48]	; 0x30
 8011eb4:	e01f      	b.n	8011ef6 <tcp_process+0x2ea>
 8011eb6:	bf00      	nop
 8011eb8:	0801f260 	.word	0x0801f260
 8011ebc:	0801f498 	.word	0x0801f498
 8011ec0:	0801f2ac 	.word	0x0801f2ac
 8011ec4:	20008830 	.word	0x20008830
 8011ec8:	20008828 	.word	0x20008828
 8011ecc:	20008824 	.word	0x20008824
 8011ed0:	0801f4b4 	.word	0x0801f4b4
 8011ed4:	20008831 	.word	0x20008831
 8011ed8:	2000fcf8 	.word	0x2000fcf8
 8011edc:	20008814 	.word	0x20008814
 8011ee0:	0801f4d4 	.word	0x0801f4d4
 8011ee4:	0801f4ec 	.word	0x0801f4ec
        } else {
          pcb->rtime = 0;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2200      	movs	r2, #0
 8011eec:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d00a      	beq.n	8011f16 <tcp_process+0x30a>
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011f06:	687a      	ldr	r2, [r7, #4]
 8011f08:	6910      	ldr	r0, [r2, #16]
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	6879      	ldr	r1, [r7, #4]
 8011f0e:	4798      	blx	r3
 8011f10:	4603      	mov	r3, r0
 8011f12:	76bb      	strb	r3, [r7, #26]
 8011f14:	e001      	b.n	8011f1a <tcp_process+0x30e>
 8011f16:	2300      	movs	r3, #0
 8011f18:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8011f1a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011f1e:	f113 0f0d 	cmn.w	r3, #13
 8011f22:	d102      	bne.n	8011f2a <tcp_process+0x31e>
          return ERR_ABRT;
 8011f24:	f06f 030c 	mvn.w	r3, #12
 8011f28:	e250      	b.n	80123cc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	8b5b      	ldrh	r3, [r3, #26]
 8011f2e:	f043 0302 	orr.w	r3, r3, #2
 8011f32:	b29a      	uxth	r2, r3
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011f38:	e23a      	b.n	80123b0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011f3a:	4b9d      	ldr	r3, [pc, #628]	; (80121b0 <tcp_process+0x5a4>)
 8011f3c:	781b      	ldrb	r3, [r3, #0]
 8011f3e:	f003 0310 	and.w	r3, r3, #16
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	f000 8234 	beq.w	80123b0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f48:	4b9a      	ldr	r3, [pc, #616]	; (80121b4 <tcp_process+0x5a8>)
 8011f4a:	6819      	ldr	r1, [r3, #0]
 8011f4c:	4b9a      	ldr	r3, [pc, #616]	; (80121b8 <tcp_process+0x5ac>)
 8011f4e:	881b      	ldrh	r3, [r3, #0]
 8011f50:	461a      	mov	r2, r3
 8011f52:	4b9a      	ldr	r3, [pc, #616]	; (80121bc <tcp_process+0x5b0>)
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011f58:	4b99      	ldr	r3, [pc, #612]	; (80121c0 <tcp_process+0x5b4>)
 8011f5a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f5c:	885b      	ldrh	r3, [r3, #2]
 8011f5e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011f60:	4a97      	ldr	r2, [pc, #604]	; (80121c0 <tcp_process+0x5b4>)
 8011f62:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f64:	8812      	ldrh	r2, [r2, #0]
 8011f66:	b292      	uxth	r2, r2
 8011f68:	9202      	str	r2, [sp, #8]
 8011f6a:	9301      	str	r3, [sp, #4]
 8011f6c:	4b95      	ldr	r3, [pc, #596]	; (80121c4 <tcp_process+0x5b8>)
 8011f6e:	9300      	str	r3, [sp, #0]
 8011f70:	4b95      	ldr	r3, [pc, #596]	; (80121c8 <tcp_process+0x5bc>)
 8011f72:	4602      	mov	r2, r0
 8011f74:	6878      	ldr	r0, [r7, #4]
 8011f76:	f003 f8ed 	bl	8015154 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011f80:	2b05      	cmp	r3, #5
 8011f82:	f200 8215 	bhi.w	80123b0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	2200      	movs	r2, #0
 8011f8a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011f8c:	6878      	ldr	r0, [r7, #4]
 8011f8e:	f002 feab 	bl	8014ce8 <tcp_rexmit_rto>
      break;
 8011f92:	e20d      	b.n	80123b0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011f94:	4b86      	ldr	r3, [pc, #536]	; (80121b0 <tcp_process+0x5a4>)
 8011f96:	781b      	ldrb	r3, [r3, #0]
 8011f98:	f003 0310 	and.w	r3, r3, #16
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	f000 80a1 	beq.w	80120e4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011fa2:	4b84      	ldr	r3, [pc, #528]	; (80121b4 <tcp_process+0x5a8>)
 8011fa4:	681a      	ldr	r2, [r3, #0]
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011faa:	1ad3      	subs	r3, r2, r3
 8011fac:	3b01      	subs	r3, #1
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	db7e      	blt.n	80120b0 <tcp_process+0x4a4>
 8011fb2:	4b80      	ldr	r3, [pc, #512]	; (80121b4 <tcp_process+0x5a8>)
 8011fb4:	681a      	ldr	r2, [r3, #0]
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011fba:	1ad3      	subs	r3, r2, r3
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	dc77      	bgt.n	80120b0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2204      	movs	r2, #4
 8011fc4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d102      	bne.n	8011fd4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011fce:	23fa      	movs	r3, #250	; 0xfa
 8011fd0:	76bb      	strb	r3, [r7, #26]
 8011fd2:	e01d      	b.n	8012010 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fd8:	699b      	ldr	r3, [r3, #24]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d106      	bne.n	8011fec <tcp_process+0x3e0>
 8011fde:	4b7b      	ldr	r3, [pc, #492]	; (80121cc <tcp_process+0x5c0>)
 8011fe0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011fe4:	497a      	ldr	r1, [pc, #488]	; (80121d0 <tcp_process+0x5c4>)
 8011fe6:	487b      	ldr	r0, [pc, #492]	; (80121d4 <tcp_process+0x5c8>)
 8011fe8:	f007 fc6a 	bl	80198c0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ff0:	699b      	ldr	r3, [r3, #24]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d00a      	beq.n	801200c <tcp_process+0x400>
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ffa:	699b      	ldr	r3, [r3, #24]
 8011ffc:	687a      	ldr	r2, [r7, #4]
 8011ffe:	6910      	ldr	r0, [r2, #16]
 8012000:	2200      	movs	r2, #0
 8012002:	6879      	ldr	r1, [r7, #4]
 8012004:	4798      	blx	r3
 8012006:	4603      	mov	r3, r0
 8012008:	76bb      	strb	r3, [r7, #26]
 801200a:	e001      	b.n	8012010 <tcp_process+0x404>
 801200c:	23f0      	movs	r3, #240	; 0xf0
 801200e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8012010:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d00a      	beq.n	801202e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012018:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801201c:	f113 0f0d 	cmn.w	r3, #13
 8012020:	d002      	beq.n	8012028 <tcp_process+0x41c>
              tcp_abort(pcb);
 8012022:	6878      	ldr	r0, [r7, #4]
 8012024:	f7fd fd68 	bl	800faf8 <tcp_abort>
            }
            return ERR_ABRT;
 8012028:	f06f 030c 	mvn.w	r3, #12
 801202c:	e1ce      	b.n	80123cc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801202e:	6878      	ldr	r0, [r7, #4]
 8012030:	f000 fae0 	bl	80125f4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012034:	4b68      	ldr	r3, [pc, #416]	; (80121d8 <tcp_process+0x5cc>)
 8012036:	881b      	ldrh	r3, [r3, #0]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d005      	beq.n	8012048 <tcp_process+0x43c>
            recv_acked--;
 801203c:	4b66      	ldr	r3, [pc, #408]	; (80121d8 <tcp_process+0x5cc>)
 801203e:	881b      	ldrh	r3, [r3, #0]
 8012040:	3b01      	subs	r3, #1
 8012042:	b29a      	uxth	r2, r3
 8012044:	4b64      	ldr	r3, [pc, #400]	; (80121d8 <tcp_process+0x5cc>)
 8012046:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801204c:	009a      	lsls	r2, r3, #2
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012052:	005b      	lsls	r3, r3, #1
 8012054:	f241 111c 	movw	r1, #4380	; 0x111c
 8012058:	428b      	cmp	r3, r1
 801205a:	bf38      	it	cc
 801205c:	460b      	movcc	r3, r1
 801205e:	429a      	cmp	r2, r3
 8012060:	d204      	bcs.n	801206c <tcp_process+0x460>
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012066:	009b      	lsls	r3, r3, #2
 8012068:	b29b      	uxth	r3, r3
 801206a:	e00d      	b.n	8012088 <tcp_process+0x47c>
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012070:	005b      	lsls	r3, r3, #1
 8012072:	f241 121c 	movw	r2, #4380	; 0x111c
 8012076:	4293      	cmp	r3, r2
 8012078:	d904      	bls.n	8012084 <tcp_process+0x478>
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801207e:	005b      	lsls	r3, r3, #1
 8012080:	b29b      	uxth	r3, r3
 8012082:	e001      	b.n	8012088 <tcp_process+0x47c>
 8012084:	f241 131c 	movw	r3, #4380	; 0x111c
 8012088:	687a      	ldr	r2, [r7, #4]
 801208a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801208e:	4b53      	ldr	r3, [pc, #332]	; (80121dc <tcp_process+0x5d0>)
 8012090:	781b      	ldrb	r3, [r3, #0]
 8012092:	f003 0320 	and.w	r3, r3, #32
 8012096:	2b00      	cmp	r3, #0
 8012098:	d037      	beq.n	801210a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	8b5b      	ldrh	r3, [r3, #26]
 801209e:	f043 0302 	orr.w	r3, r3, #2
 80120a2:	b29a      	uxth	r2, r3
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	2207      	movs	r2, #7
 80120ac:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80120ae:	e02c      	b.n	801210a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80120b0:	4b40      	ldr	r3, [pc, #256]	; (80121b4 <tcp_process+0x5a8>)
 80120b2:	6819      	ldr	r1, [r3, #0]
 80120b4:	4b40      	ldr	r3, [pc, #256]	; (80121b8 <tcp_process+0x5ac>)
 80120b6:	881b      	ldrh	r3, [r3, #0]
 80120b8:	461a      	mov	r2, r3
 80120ba:	4b40      	ldr	r3, [pc, #256]	; (80121bc <tcp_process+0x5b0>)
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80120c0:	4b3f      	ldr	r3, [pc, #252]	; (80121c0 <tcp_process+0x5b4>)
 80120c2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80120c4:	885b      	ldrh	r3, [r3, #2]
 80120c6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80120c8:	4a3d      	ldr	r2, [pc, #244]	; (80121c0 <tcp_process+0x5b4>)
 80120ca:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80120cc:	8812      	ldrh	r2, [r2, #0]
 80120ce:	b292      	uxth	r2, r2
 80120d0:	9202      	str	r2, [sp, #8]
 80120d2:	9301      	str	r3, [sp, #4]
 80120d4:	4b3b      	ldr	r3, [pc, #236]	; (80121c4 <tcp_process+0x5b8>)
 80120d6:	9300      	str	r3, [sp, #0]
 80120d8:	4b3b      	ldr	r3, [pc, #236]	; (80121c8 <tcp_process+0x5bc>)
 80120da:	4602      	mov	r2, r0
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f003 f839 	bl	8015154 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80120e2:	e167      	b.n	80123b4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80120e4:	4b32      	ldr	r3, [pc, #200]	; (80121b0 <tcp_process+0x5a4>)
 80120e6:	781b      	ldrb	r3, [r3, #0]
 80120e8:	f003 0302 	and.w	r3, r3, #2
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	f000 8161 	beq.w	80123b4 <tcp_process+0x7a8>
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120f6:	1e5a      	subs	r2, r3, #1
 80120f8:	4b30      	ldr	r3, [pc, #192]	; (80121bc <tcp_process+0x5b0>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	429a      	cmp	r2, r3
 80120fe:	f040 8159 	bne.w	80123b4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8012102:	6878      	ldr	r0, [r7, #4]
 8012104:	f002 fe12 	bl	8014d2c <tcp_rexmit>
      break;
 8012108:	e154      	b.n	80123b4 <tcp_process+0x7a8>
 801210a:	e153      	b.n	80123b4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801210c:	6878      	ldr	r0, [r7, #4]
 801210e:	f000 fa71 	bl	80125f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8012112:	4b32      	ldr	r3, [pc, #200]	; (80121dc <tcp_process+0x5d0>)
 8012114:	781b      	ldrb	r3, [r3, #0]
 8012116:	f003 0320 	and.w	r3, r3, #32
 801211a:	2b00      	cmp	r3, #0
 801211c:	f000 814c 	beq.w	80123b8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	8b5b      	ldrh	r3, [r3, #26]
 8012124:	f043 0302 	orr.w	r3, r3, #2
 8012128:	b29a      	uxth	r2, r3
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	2207      	movs	r2, #7
 8012132:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012134:	e140      	b.n	80123b8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8012136:	6878      	ldr	r0, [r7, #4]
 8012138:	f000 fa5c 	bl	80125f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801213c:	4b27      	ldr	r3, [pc, #156]	; (80121dc <tcp_process+0x5d0>)
 801213e:	781b      	ldrb	r3, [r3, #0]
 8012140:	f003 0320 	and.w	r3, r3, #32
 8012144:	2b00      	cmp	r3, #0
 8012146:	d071      	beq.n	801222c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012148:	4b19      	ldr	r3, [pc, #100]	; (80121b0 <tcp_process+0x5a4>)
 801214a:	781b      	ldrb	r3, [r3, #0]
 801214c:	f003 0310 	and.w	r3, r3, #16
 8012150:	2b00      	cmp	r3, #0
 8012152:	d060      	beq.n	8012216 <tcp_process+0x60a>
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012158:	4b16      	ldr	r3, [pc, #88]	; (80121b4 <tcp_process+0x5a8>)
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	429a      	cmp	r2, r3
 801215e:	d15a      	bne.n	8012216 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012164:	2b00      	cmp	r3, #0
 8012166:	d156      	bne.n	8012216 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	8b5b      	ldrh	r3, [r3, #26]
 801216c:	f043 0302 	orr.w	r3, r3, #2
 8012170:	b29a      	uxth	r2, r3
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8012176:	6878      	ldr	r0, [r7, #4]
 8012178:	f7fe fdbe 	bl	8010cf8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801217c:	4b18      	ldr	r3, [pc, #96]	; (80121e0 <tcp_process+0x5d4>)
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	687a      	ldr	r2, [r7, #4]
 8012182:	429a      	cmp	r2, r3
 8012184:	d105      	bne.n	8012192 <tcp_process+0x586>
 8012186:	4b16      	ldr	r3, [pc, #88]	; (80121e0 <tcp_process+0x5d4>)
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	68db      	ldr	r3, [r3, #12]
 801218c:	4a14      	ldr	r2, [pc, #80]	; (80121e0 <tcp_process+0x5d4>)
 801218e:	6013      	str	r3, [r2, #0]
 8012190:	e02e      	b.n	80121f0 <tcp_process+0x5e4>
 8012192:	4b13      	ldr	r3, [pc, #76]	; (80121e0 <tcp_process+0x5d4>)
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	617b      	str	r3, [r7, #20]
 8012198:	e027      	b.n	80121ea <tcp_process+0x5de>
 801219a:	697b      	ldr	r3, [r7, #20]
 801219c:	68db      	ldr	r3, [r3, #12]
 801219e:	687a      	ldr	r2, [r7, #4]
 80121a0:	429a      	cmp	r2, r3
 80121a2:	d11f      	bne.n	80121e4 <tcp_process+0x5d8>
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	68da      	ldr	r2, [r3, #12]
 80121a8:	697b      	ldr	r3, [r7, #20]
 80121aa:	60da      	str	r2, [r3, #12]
 80121ac:	e020      	b.n	80121f0 <tcp_process+0x5e4>
 80121ae:	bf00      	nop
 80121b0:	20008830 	.word	0x20008830
 80121b4:	20008828 	.word	0x20008828
 80121b8:	2000882e 	.word	0x2000882e
 80121bc:	20008824 	.word	0x20008824
 80121c0:	20008814 	.word	0x20008814
 80121c4:	2000c5f0 	.word	0x2000c5f0
 80121c8:	2000c5f4 	.word	0x2000c5f4
 80121cc:	0801f260 	.word	0x0801f260
 80121d0:	0801f500 	.word	0x0801f500
 80121d4:	0801f2ac 	.word	0x0801f2ac
 80121d8:	2000882c 	.word	0x2000882c
 80121dc:	20008831 	.word	0x20008831
 80121e0:	2000fcf4 	.word	0x2000fcf4
 80121e4:	697b      	ldr	r3, [r7, #20]
 80121e6:	68db      	ldr	r3, [r3, #12]
 80121e8:	617b      	str	r3, [r7, #20]
 80121ea:	697b      	ldr	r3, [r7, #20]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d1d4      	bne.n	801219a <tcp_process+0x58e>
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2200      	movs	r2, #0
 80121f4:	60da      	str	r2, [r3, #12]
 80121f6:	4b77      	ldr	r3, [pc, #476]	; (80123d4 <tcp_process+0x7c8>)
 80121f8:	2201      	movs	r2, #1
 80121fa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	220a      	movs	r2, #10
 8012200:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8012202:	4b75      	ldr	r3, [pc, #468]	; (80123d8 <tcp_process+0x7cc>)
 8012204:	681a      	ldr	r2, [r3, #0]
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	60da      	str	r2, [r3, #12]
 801220a:	4a73      	ldr	r2, [pc, #460]	; (80123d8 <tcp_process+0x7cc>)
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	6013      	str	r3, [r2, #0]
 8012210:	f003 f962 	bl	80154d8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012214:	e0d2      	b.n	80123bc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	8b5b      	ldrh	r3, [r3, #26]
 801221a:	f043 0302 	orr.w	r3, r3, #2
 801221e:	b29a      	uxth	r2, r3
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2208      	movs	r2, #8
 8012228:	751a      	strb	r2, [r3, #20]
      break;
 801222a:	e0c7      	b.n	80123bc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801222c:	4b6b      	ldr	r3, [pc, #428]	; (80123dc <tcp_process+0x7d0>)
 801222e:	781b      	ldrb	r3, [r3, #0]
 8012230:	f003 0310 	and.w	r3, r3, #16
 8012234:	2b00      	cmp	r3, #0
 8012236:	f000 80c1 	beq.w	80123bc <tcp_process+0x7b0>
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801223e:	4b68      	ldr	r3, [pc, #416]	; (80123e0 <tcp_process+0x7d4>)
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	429a      	cmp	r2, r3
 8012244:	f040 80ba 	bne.w	80123bc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801224c:	2b00      	cmp	r3, #0
 801224e:	f040 80b5 	bne.w	80123bc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	2206      	movs	r2, #6
 8012256:	751a      	strb	r2, [r3, #20]
      break;
 8012258:	e0b0      	b.n	80123bc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801225a:	6878      	ldr	r0, [r7, #4]
 801225c:	f000 f9ca 	bl	80125f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012260:	4b60      	ldr	r3, [pc, #384]	; (80123e4 <tcp_process+0x7d8>)
 8012262:	781b      	ldrb	r3, [r3, #0]
 8012264:	f003 0320 	and.w	r3, r3, #32
 8012268:	2b00      	cmp	r3, #0
 801226a:	f000 80a9 	beq.w	80123c0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	8b5b      	ldrh	r3, [r3, #26]
 8012272:	f043 0302 	orr.w	r3, r3, #2
 8012276:	b29a      	uxth	r2, r3
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f7fe fd3b 	bl	8010cf8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012282:	4b59      	ldr	r3, [pc, #356]	; (80123e8 <tcp_process+0x7dc>)
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	687a      	ldr	r2, [r7, #4]
 8012288:	429a      	cmp	r2, r3
 801228a:	d105      	bne.n	8012298 <tcp_process+0x68c>
 801228c:	4b56      	ldr	r3, [pc, #344]	; (80123e8 <tcp_process+0x7dc>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	68db      	ldr	r3, [r3, #12]
 8012292:	4a55      	ldr	r2, [pc, #340]	; (80123e8 <tcp_process+0x7dc>)
 8012294:	6013      	str	r3, [r2, #0]
 8012296:	e013      	b.n	80122c0 <tcp_process+0x6b4>
 8012298:	4b53      	ldr	r3, [pc, #332]	; (80123e8 <tcp_process+0x7dc>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	613b      	str	r3, [r7, #16]
 801229e:	e00c      	b.n	80122ba <tcp_process+0x6ae>
 80122a0:	693b      	ldr	r3, [r7, #16]
 80122a2:	68db      	ldr	r3, [r3, #12]
 80122a4:	687a      	ldr	r2, [r7, #4]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d104      	bne.n	80122b4 <tcp_process+0x6a8>
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	68da      	ldr	r2, [r3, #12]
 80122ae:	693b      	ldr	r3, [r7, #16]
 80122b0:	60da      	str	r2, [r3, #12]
 80122b2:	e005      	b.n	80122c0 <tcp_process+0x6b4>
 80122b4:	693b      	ldr	r3, [r7, #16]
 80122b6:	68db      	ldr	r3, [r3, #12]
 80122b8:	613b      	str	r3, [r7, #16]
 80122ba:	693b      	ldr	r3, [r7, #16]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d1ef      	bne.n	80122a0 <tcp_process+0x694>
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2200      	movs	r2, #0
 80122c4:	60da      	str	r2, [r3, #12]
 80122c6:	4b43      	ldr	r3, [pc, #268]	; (80123d4 <tcp_process+0x7c8>)
 80122c8:	2201      	movs	r2, #1
 80122ca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	220a      	movs	r2, #10
 80122d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80122d2:	4b41      	ldr	r3, [pc, #260]	; (80123d8 <tcp_process+0x7cc>)
 80122d4:	681a      	ldr	r2, [r3, #0]
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	60da      	str	r2, [r3, #12]
 80122da:	4a3f      	ldr	r2, [pc, #252]	; (80123d8 <tcp_process+0x7cc>)
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	6013      	str	r3, [r2, #0]
 80122e0:	f003 f8fa 	bl	80154d8 <tcp_timer_needed>
      }
      break;
 80122e4:	e06c      	b.n	80123c0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f000 f984 	bl	80125f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80122ec:	4b3b      	ldr	r3, [pc, #236]	; (80123dc <tcp_process+0x7d0>)
 80122ee:	781b      	ldrb	r3, [r3, #0]
 80122f0:	f003 0310 	and.w	r3, r3, #16
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d065      	beq.n	80123c4 <tcp_process+0x7b8>
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80122fc:	4b38      	ldr	r3, [pc, #224]	; (80123e0 <tcp_process+0x7d4>)
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	429a      	cmp	r2, r3
 8012302:	d15f      	bne.n	80123c4 <tcp_process+0x7b8>
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012308:	2b00      	cmp	r3, #0
 801230a:	d15b      	bne.n	80123c4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801230c:	6878      	ldr	r0, [r7, #4]
 801230e:	f7fe fcf3 	bl	8010cf8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012312:	4b35      	ldr	r3, [pc, #212]	; (80123e8 <tcp_process+0x7dc>)
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	687a      	ldr	r2, [r7, #4]
 8012318:	429a      	cmp	r2, r3
 801231a:	d105      	bne.n	8012328 <tcp_process+0x71c>
 801231c:	4b32      	ldr	r3, [pc, #200]	; (80123e8 <tcp_process+0x7dc>)
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	68db      	ldr	r3, [r3, #12]
 8012322:	4a31      	ldr	r2, [pc, #196]	; (80123e8 <tcp_process+0x7dc>)
 8012324:	6013      	str	r3, [r2, #0]
 8012326:	e013      	b.n	8012350 <tcp_process+0x744>
 8012328:	4b2f      	ldr	r3, [pc, #188]	; (80123e8 <tcp_process+0x7dc>)
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	60fb      	str	r3, [r7, #12]
 801232e:	e00c      	b.n	801234a <tcp_process+0x73e>
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	68db      	ldr	r3, [r3, #12]
 8012334:	687a      	ldr	r2, [r7, #4]
 8012336:	429a      	cmp	r2, r3
 8012338:	d104      	bne.n	8012344 <tcp_process+0x738>
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	68da      	ldr	r2, [r3, #12]
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	60da      	str	r2, [r3, #12]
 8012342:	e005      	b.n	8012350 <tcp_process+0x744>
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	68db      	ldr	r3, [r3, #12]
 8012348:	60fb      	str	r3, [r7, #12]
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d1ef      	bne.n	8012330 <tcp_process+0x724>
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	2200      	movs	r2, #0
 8012354:	60da      	str	r2, [r3, #12]
 8012356:	4b1f      	ldr	r3, [pc, #124]	; (80123d4 <tcp_process+0x7c8>)
 8012358:	2201      	movs	r2, #1
 801235a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	220a      	movs	r2, #10
 8012360:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012362:	4b1d      	ldr	r3, [pc, #116]	; (80123d8 <tcp_process+0x7cc>)
 8012364:	681a      	ldr	r2, [r3, #0]
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	60da      	str	r2, [r3, #12]
 801236a:	4a1b      	ldr	r2, [pc, #108]	; (80123d8 <tcp_process+0x7cc>)
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	6013      	str	r3, [r2, #0]
 8012370:	f003 f8b2 	bl	80154d8 <tcp_timer_needed>
      }
      break;
 8012374:	e026      	b.n	80123c4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8012376:	6878      	ldr	r0, [r7, #4]
 8012378:	f000 f93c 	bl	80125f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801237c:	4b17      	ldr	r3, [pc, #92]	; (80123dc <tcp_process+0x7d0>)
 801237e:	781b      	ldrb	r3, [r3, #0]
 8012380:	f003 0310 	and.w	r3, r3, #16
 8012384:	2b00      	cmp	r3, #0
 8012386:	d01f      	beq.n	80123c8 <tcp_process+0x7bc>
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801238c:	4b14      	ldr	r3, [pc, #80]	; (80123e0 <tcp_process+0x7d4>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	429a      	cmp	r2, r3
 8012392:	d119      	bne.n	80123c8 <tcp_process+0x7bc>
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012398:	2b00      	cmp	r3, #0
 801239a:	d115      	bne.n	80123c8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801239c:	4b11      	ldr	r3, [pc, #68]	; (80123e4 <tcp_process+0x7d8>)
 801239e:	781b      	ldrb	r3, [r3, #0]
 80123a0:	f043 0310 	orr.w	r3, r3, #16
 80123a4:	b2da      	uxtb	r2, r3
 80123a6:	4b0f      	ldr	r3, [pc, #60]	; (80123e4 <tcp_process+0x7d8>)
 80123a8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80123aa:	e00d      	b.n	80123c8 <tcp_process+0x7bc>
    default:
      break;
 80123ac:	bf00      	nop
 80123ae:	e00c      	b.n	80123ca <tcp_process+0x7be>
      break;
 80123b0:	bf00      	nop
 80123b2:	e00a      	b.n	80123ca <tcp_process+0x7be>
      break;
 80123b4:	bf00      	nop
 80123b6:	e008      	b.n	80123ca <tcp_process+0x7be>
      break;
 80123b8:	bf00      	nop
 80123ba:	e006      	b.n	80123ca <tcp_process+0x7be>
      break;
 80123bc:	bf00      	nop
 80123be:	e004      	b.n	80123ca <tcp_process+0x7be>
      break;
 80123c0:	bf00      	nop
 80123c2:	e002      	b.n	80123ca <tcp_process+0x7be>
      break;
 80123c4:	bf00      	nop
 80123c6:	e000      	b.n	80123ca <tcp_process+0x7be>
      break;
 80123c8:	bf00      	nop
  }
  return ERR_OK;
 80123ca:	2300      	movs	r3, #0
}
 80123cc:	4618      	mov	r0, r3
 80123ce:	3724      	adds	r7, #36	; 0x24
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd90      	pop	{r4, r7, pc}
 80123d4:	2000fcf0 	.word	0x2000fcf0
 80123d8:	2000fd04 	.word	0x2000fd04
 80123dc:	20008830 	.word	0x20008830
 80123e0:	20008828 	.word	0x20008828
 80123e4:	20008831 	.word	0x20008831
 80123e8:	2000fcf4 	.word	0x2000fcf4

080123ec <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80123ec:	b590      	push	{r4, r7, lr}
 80123ee:	b085      	sub	sp, #20
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
 80123f4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d106      	bne.n	801240a <tcp_oos_insert_segment+0x1e>
 80123fc:	4b3b      	ldr	r3, [pc, #236]	; (80124ec <tcp_oos_insert_segment+0x100>)
 80123fe:	f240 421f 	movw	r2, #1055	; 0x41f
 8012402:	493b      	ldr	r1, [pc, #236]	; (80124f0 <tcp_oos_insert_segment+0x104>)
 8012404:	483b      	ldr	r0, [pc, #236]	; (80124f4 <tcp_oos_insert_segment+0x108>)
 8012406:	f007 fa5b 	bl	80198c0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	68db      	ldr	r3, [r3, #12]
 801240e:	899b      	ldrh	r3, [r3, #12]
 8012410:	b29b      	uxth	r3, r3
 8012412:	4618      	mov	r0, r3
 8012414:	f7fb fa4a 	bl	800d8ac <lwip_htons>
 8012418:	4603      	mov	r3, r0
 801241a:	b2db      	uxtb	r3, r3
 801241c:	f003 0301 	and.w	r3, r3, #1
 8012420:	2b00      	cmp	r3, #0
 8012422:	d028      	beq.n	8012476 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012424:	6838      	ldr	r0, [r7, #0]
 8012426:	f7fe f999 	bl	801075c <tcp_segs_free>
    next = NULL;
 801242a:	2300      	movs	r3, #0
 801242c:	603b      	str	r3, [r7, #0]
 801242e:	e056      	b.n	80124de <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012430:	683b      	ldr	r3, [r7, #0]
 8012432:	68db      	ldr	r3, [r3, #12]
 8012434:	899b      	ldrh	r3, [r3, #12]
 8012436:	b29b      	uxth	r3, r3
 8012438:	4618      	mov	r0, r3
 801243a:	f7fb fa37 	bl	800d8ac <lwip_htons>
 801243e:	4603      	mov	r3, r0
 8012440:	b2db      	uxtb	r3, r3
 8012442:	f003 0301 	and.w	r3, r3, #1
 8012446:	2b00      	cmp	r3, #0
 8012448:	d00d      	beq.n	8012466 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	68db      	ldr	r3, [r3, #12]
 801244e:	899b      	ldrh	r3, [r3, #12]
 8012450:	b29c      	uxth	r4, r3
 8012452:	2001      	movs	r0, #1
 8012454:	f7fb fa2a 	bl	800d8ac <lwip_htons>
 8012458:	4603      	mov	r3, r0
 801245a:	461a      	mov	r2, r3
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	68db      	ldr	r3, [r3, #12]
 8012460:	4322      	orrs	r2, r4
 8012462:	b292      	uxth	r2, r2
 8012464:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801246a:	683b      	ldr	r3, [r7, #0]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012470:	68f8      	ldr	r0, [r7, #12]
 8012472:	f7fe f987 	bl	8010784 <tcp_seg_free>
    while (next &&
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d00e      	beq.n	801249a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	891b      	ldrh	r3, [r3, #8]
 8012480:	461a      	mov	r2, r3
 8012482:	4b1d      	ldr	r3, [pc, #116]	; (80124f8 <tcp_oos_insert_segment+0x10c>)
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	441a      	add	r2, r3
 8012488:	683b      	ldr	r3, [r7, #0]
 801248a:	68db      	ldr	r3, [r3, #12]
 801248c:	685b      	ldr	r3, [r3, #4]
 801248e:	6839      	ldr	r1, [r7, #0]
 8012490:	8909      	ldrh	r1, [r1, #8]
 8012492:	440b      	add	r3, r1
 8012494:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012496:	2b00      	cmp	r3, #0
 8012498:	daca      	bge.n	8012430 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801249a:	683b      	ldr	r3, [r7, #0]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d01e      	beq.n	80124de <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	891b      	ldrh	r3, [r3, #8]
 80124a4:	461a      	mov	r2, r3
 80124a6:	4b14      	ldr	r3, [pc, #80]	; (80124f8 <tcp_oos_insert_segment+0x10c>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	441a      	add	r2, r3
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	68db      	ldr	r3, [r3, #12]
 80124b0:	685b      	ldr	r3, [r3, #4]
 80124b2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	dd12      	ble.n	80124de <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	68db      	ldr	r3, [r3, #12]
 80124bc:	685b      	ldr	r3, [r3, #4]
 80124be:	b29a      	uxth	r2, r3
 80124c0:	4b0d      	ldr	r3, [pc, #52]	; (80124f8 <tcp_oos_insert_segment+0x10c>)
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	b29b      	uxth	r3, r3
 80124c6:	1ad3      	subs	r3, r2, r3
 80124c8:	b29a      	uxth	r2, r3
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	685a      	ldr	r2, [r3, #4]
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	891b      	ldrh	r3, [r3, #8]
 80124d6:	4619      	mov	r1, r3
 80124d8:	4610      	mov	r0, r2
 80124da:	f7fc fb91 	bl	800ec00 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	683a      	ldr	r2, [r7, #0]
 80124e2:	601a      	str	r2, [r3, #0]
}
 80124e4:	bf00      	nop
 80124e6:	3714      	adds	r7, #20
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd90      	pop	{r4, r7, pc}
 80124ec:	0801f260 	.word	0x0801f260
 80124f0:	0801f520 	.word	0x0801f520
 80124f4:	0801f2ac 	.word	0x0801f2ac
 80124f8:	20008824 	.word	0x20008824

080124fc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80124fc:	b5b0      	push	{r4, r5, r7, lr}
 80124fe:	b086      	sub	sp, #24
 8012500:	af00      	add	r7, sp, #0
 8012502:	60f8      	str	r0, [r7, #12]
 8012504:	60b9      	str	r1, [r7, #8]
 8012506:	607a      	str	r2, [r7, #4]
 8012508:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801250a:	e03e      	b.n	801258a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801250c:	68bb      	ldr	r3, [r7, #8]
 801250e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012510:	68bb      	ldr	r3, [r7, #8]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8012516:	697b      	ldr	r3, [r7, #20]
 8012518:	685b      	ldr	r3, [r3, #4]
 801251a:	4618      	mov	r0, r3
 801251c:	f7fc fd84 	bl	800f028 <pbuf_clen>
 8012520:	4603      	mov	r3, r0
 8012522:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801252a:	8a7a      	ldrh	r2, [r7, #18]
 801252c:	429a      	cmp	r2, r3
 801252e:	d906      	bls.n	801253e <tcp_free_acked_segments+0x42>
 8012530:	4b2a      	ldr	r3, [pc, #168]	; (80125dc <tcp_free_acked_segments+0xe0>)
 8012532:	f240 4257 	movw	r2, #1111	; 0x457
 8012536:	492a      	ldr	r1, [pc, #168]	; (80125e0 <tcp_free_acked_segments+0xe4>)
 8012538:	482a      	ldr	r0, [pc, #168]	; (80125e4 <tcp_free_acked_segments+0xe8>)
 801253a:	f007 f9c1 	bl	80198c0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8012544:	8a7b      	ldrh	r3, [r7, #18]
 8012546:	1ad3      	subs	r3, r2, r3
 8012548:	b29a      	uxth	r2, r3
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012550:	697b      	ldr	r3, [r7, #20]
 8012552:	891a      	ldrh	r2, [r3, #8]
 8012554:	4b24      	ldr	r3, [pc, #144]	; (80125e8 <tcp_free_acked_segments+0xec>)
 8012556:	881b      	ldrh	r3, [r3, #0]
 8012558:	4413      	add	r3, r2
 801255a:	b29a      	uxth	r2, r3
 801255c:	4b22      	ldr	r3, [pc, #136]	; (80125e8 <tcp_free_acked_segments+0xec>)
 801255e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012560:	6978      	ldr	r0, [r7, #20]
 8012562:	f7fe f90f 	bl	8010784 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801256c:	2b00      	cmp	r3, #0
 801256e:	d00c      	beq.n	801258a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012570:	68bb      	ldr	r3, [r7, #8]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d109      	bne.n	801258a <tcp_free_acked_segments+0x8e>
 8012576:	683b      	ldr	r3, [r7, #0]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d106      	bne.n	801258a <tcp_free_acked_segments+0x8e>
 801257c:	4b17      	ldr	r3, [pc, #92]	; (80125dc <tcp_free_acked_segments+0xe0>)
 801257e:	f240 4262 	movw	r2, #1122	; 0x462
 8012582:	491a      	ldr	r1, [pc, #104]	; (80125ec <tcp_free_acked_segments+0xf0>)
 8012584:	4817      	ldr	r0, [pc, #92]	; (80125e4 <tcp_free_acked_segments+0xe8>)
 8012586:	f007 f99b 	bl	80198c0 <iprintf>
  while (seg_list != NULL &&
 801258a:	68bb      	ldr	r3, [r7, #8]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d020      	beq.n	80125d2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012590:	68bb      	ldr	r3, [r7, #8]
 8012592:	68db      	ldr	r3, [r3, #12]
 8012594:	685b      	ldr	r3, [r3, #4]
 8012596:	4618      	mov	r0, r3
 8012598:	f7fb f99d 	bl	800d8d6 <lwip_htonl>
 801259c:	4604      	mov	r4, r0
 801259e:	68bb      	ldr	r3, [r7, #8]
 80125a0:	891b      	ldrh	r3, [r3, #8]
 80125a2:	461d      	mov	r5, r3
 80125a4:	68bb      	ldr	r3, [r7, #8]
 80125a6:	68db      	ldr	r3, [r3, #12]
 80125a8:	899b      	ldrh	r3, [r3, #12]
 80125aa:	b29b      	uxth	r3, r3
 80125ac:	4618      	mov	r0, r3
 80125ae:	f7fb f97d 	bl	800d8ac <lwip_htons>
 80125b2:	4603      	mov	r3, r0
 80125b4:	b2db      	uxtb	r3, r3
 80125b6:	f003 0303 	and.w	r3, r3, #3
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d001      	beq.n	80125c2 <tcp_free_acked_segments+0xc6>
 80125be:	2301      	movs	r3, #1
 80125c0:	e000      	b.n	80125c4 <tcp_free_acked_segments+0xc8>
 80125c2:	2300      	movs	r3, #0
 80125c4:	442b      	add	r3, r5
 80125c6:	18e2      	adds	r2, r4, r3
 80125c8:	4b09      	ldr	r3, [pc, #36]	; (80125f0 <tcp_free_acked_segments+0xf4>)
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	dd9c      	ble.n	801250c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80125d2:	68bb      	ldr	r3, [r7, #8]
}
 80125d4:	4618      	mov	r0, r3
 80125d6:	3718      	adds	r7, #24
 80125d8:	46bd      	mov	sp, r7
 80125da:	bdb0      	pop	{r4, r5, r7, pc}
 80125dc:	0801f260 	.word	0x0801f260
 80125e0:	0801f548 	.word	0x0801f548
 80125e4:	0801f2ac 	.word	0x0801f2ac
 80125e8:	2000882c 	.word	0x2000882c
 80125ec:	0801f570 	.word	0x0801f570
 80125f0:	20008828 	.word	0x20008828

080125f4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80125f4:	b5b0      	push	{r4, r5, r7, lr}
 80125f6:	b094      	sub	sp, #80	; 0x50
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80125fc:	2300      	movs	r3, #0
 80125fe:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d106      	bne.n	8012614 <tcp_receive+0x20>
 8012606:	4ba6      	ldr	r3, [pc, #664]	; (80128a0 <tcp_receive+0x2ac>)
 8012608:	f240 427b 	movw	r2, #1147	; 0x47b
 801260c:	49a5      	ldr	r1, [pc, #660]	; (80128a4 <tcp_receive+0x2b0>)
 801260e:	48a6      	ldr	r0, [pc, #664]	; (80128a8 <tcp_receive+0x2b4>)
 8012610:	f007 f956 	bl	80198c0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	7d1b      	ldrb	r3, [r3, #20]
 8012618:	2b03      	cmp	r3, #3
 801261a:	d806      	bhi.n	801262a <tcp_receive+0x36>
 801261c:	4ba0      	ldr	r3, [pc, #640]	; (80128a0 <tcp_receive+0x2ac>)
 801261e:	f240 427c 	movw	r2, #1148	; 0x47c
 8012622:	49a2      	ldr	r1, [pc, #648]	; (80128ac <tcp_receive+0x2b8>)
 8012624:	48a0      	ldr	r0, [pc, #640]	; (80128a8 <tcp_receive+0x2b4>)
 8012626:	f007 f94b 	bl	80198c0 <iprintf>

  if (flags & TCP_ACK) {
 801262a:	4ba1      	ldr	r3, [pc, #644]	; (80128b0 <tcp_receive+0x2bc>)
 801262c:	781b      	ldrb	r3, [r3, #0]
 801262e:	f003 0310 	and.w	r3, r3, #16
 8012632:	2b00      	cmp	r3, #0
 8012634:	f000 8263 	beq.w	8012afe <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801263e:	461a      	mov	r2, r3
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012644:	4413      	add	r3, r2
 8012646:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801264c:	4b99      	ldr	r3, [pc, #612]	; (80128b4 <tcp_receive+0x2c0>)
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	1ad3      	subs	r3, r2, r3
 8012652:	2b00      	cmp	r3, #0
 8012654:	db1b      	blt.n	801268e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801265a:	4b96      	ldr	r3, [pc, #600]	; (80128b4 <tcp_receive+0x2c0>)
 801265c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801265e:	429a      	cmp	r2, r3
 8012660:	d106      	bne.n	8012670 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012666:	4b94      	ldr	r3, [pc, #592]	; (80128b8 <tcp_receive+0x2c4>)
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	1ad3      	subs	r3, r2, r3
 801266c:	2b00      	cmp	r3, #0
 801266e:	db0e      	blt.n	801268e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012674:	4b90      	ldr	r3, [pc, #576]	; (80128b8 <tcp_receive+0x2c4>)
 8012676:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012678:	429a      	cmp	r2, r3
 801267a:	d125      	bne.n	80126c8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801267c:	4b8f      	ldr	r3, [pc, #572]	; (80128bc <tcp_receive+0x2c8>)
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	89db      	ldrh	r3, [r3, #14]
 8012682:	b29a      	uxth	r2, r3
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801268a:	429a      	cmp	r2, r3
 801268c:	d91c      	bls.n	80126c8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801268e:	4b8b      	ldr	r3, [pc, #556]	; (80128bc <tcp_receive+0x2c8>)
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	89db      	ldrh	r3, [r3, #14]
 8012694:	b29a      	uxth	r2, r3
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80126a8:	429a      	cmp	r2, r3
 80126aa:	d205      	bcs.n	80126b8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80126b8:	4b7e      	ldr	r3, [pc, #504]	; (80128b4 <tcp_receive+0x2c0>)
 80126ba:	681a      	ldr	r2, [r3, #0]
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80126c0:	4b7d      	ldr	r3, [pc, #500]	; (80128b8 <tcp_receive+0x2c4>)
 80126c2:	681a      	ldr	r2, [r3, #0]
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80126c8:	4b7b      	ldr	r3, [pc, #492]	; (80128b8 <tcp_receive+0x2c4>)
 80126ca:	681a      	ldr	r2, [r3, #0]
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80126d0:	1ad3      	subs	r3, r2, r3
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	dc58      	bgt.n	8012788 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80126d6:	4b7a      	ldr	r3, [pc, #488]	; (80128c0 <tcp_receive+0x2cc>)
 80126d8:	881b      	ldrh	r3, [r3, #0]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d14b      	bne.n	8012776 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126e2:	687a      	ldr	r2, [r7, #4]
 80126e4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80126e8:	4413      	add	r3, r2
 80126ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80126ec:	429a      	cmp	r2, r3
 80126ee:	d142      	bne.n	8012776 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	db3d      	blt.n	8012776 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80126fe:	4b6e      	ldr	r3, [pc, #440]	; (80128b8 <tcp_receive+0x2c4>)
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	429a      	cmp	r2, r3
 8012704:	d137      	bne.n	8012776 <tcp_receive+0x182>
              found_dupack = 1;
 8012706:	2301      	movs	r3, #1
 8012708:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012710:	2bff      	cmp	r3, #255	; 0xff
 8012712:	d007      	beq.n	8012724 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801271a:	3301      	adds	r3, #1
 801271c:	b2da      	uxtb	r2, r3
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801272a:	2b03      	cmp	r3, #3
 801272c:	d91b      	bls.n	8012766 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012738:	4413      	add	r3, r2
 801273a:	b29a      	uxth	r2, r3
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012742:	429a      	cmp	r2, r3
 8012744:	d30a      	bcc.n	801275c <tcp_receive+0x168>
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012750:	4413      	add	r3, r2
 8012752:	b29a      	uxth	r2, r3
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801275a:	e004      	b.n	8012766 <tcp_receive+0x172>
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012762:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801276c:	2b02      	cmp	r3, #2
 801276e:	d902      	bls.n	8012776 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012770:	6878      	ldr	r0, [r7, #4]
 8012772:	f002 fb47 	bl	8014e04 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012778:	2b00      	cmp	r3, #0
 801277a:	f040 8160 	bne.w	8012a3e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	2200      	movs	r2, #0
 8012782:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012786:	e15a      	b.n	8012a3e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012788:	4b4b      	ldr	r3, [pc, #300]	; (80128b8 <tcp_receive+0x2c4>)
 801278a:	681a      	ldr	r2, [r3, #0]
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012790:	1ad3      	subs	r3, r2, r3
 8012792:	3b01      	subs	r3, #1
 8012794:	2b00      	cmp	r3, #0
 8012796:	f2c0 814d 	blt.w	8012a34 <tcp_receive+0x440>
 801279a:	4b47      	ldr	r3, [pc, #284]	; (80128b8 <tcp_receive+0x2c4>)
 801279c:	681a      	ldr	r2, [r3, #0]
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80127a2:	1ad3      	subs	r3, r2, r3
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	f300 8145 	bgt.w	8012a34 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	8b5b      	ldrh	r3, [r3, #26]
 80127ae:	f003 0304 	and.w	r3, r3, #4
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d010      	beq.n	80127d8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	8b5b      	ldrh	r3, [r3, #26]
 80127ba:	f023 0304 	bic.w	r3, r3, #4
 80127be:	b29a      	uxth	r2, r3
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	2200      	movs	r2, #0
 80127d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	2200      	movs	r2, #0
 80127dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80127e6:	10db      	asrs	r3, r3, #3
 80127e8:	b21b      	sxth	r3, r3
 80127ea:	b29a      	uxth	r2, r3
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80127f2:	b29b      	uxth	r3, r3
 80127f4:	4413      	add	r3, r2
 80127f6:	b29b      	uxth	r3, r3
 80127f8:	b21a      	sxth	r2, r3
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012800:	4b2d      	ldr	r3, [pc, #180]	; (80128b8 <tcp_receive+0x2c4>)
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	b29a      	uxth	r2, r3
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801280a:	b29b      	uxth	r3, r3
 801280c:	1ad3      	subs	r3, r2, r3
 801280e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	2200      	movs	r2, #0
 8012814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8012818:	4b27      	ldr	r3, [pc, #156]	; (80128b8 <tcp_receive+0x2c4>)
 801281a:	681a      	ldr	r2, [r3, #0]
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	7d1b      	ldrb	r3, [r3, #20]
 8012824:	2b03      	cmp	r3, #3
 8012826:	f240 8096 	bls.w	8012956 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012836:	429a      	cmp	r2, r3
 8012838:	d244      	bcs.n	80128c4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	8b5b      	ldrh	r3, [r3, #26]
 801283e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012842:	2b00      	cmp	r3, #0
 8012844:	d001      	beq.n	801284a <tcp_receive+0x256>
 8012846:	2301      	movs	r3, #1
 8012848:	e000      	b.n	801284c <tcp_receive+0x258>
 801284a:	2302      	movs	r3, #2
 801284c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012850:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012854:	b29a      	uxth	r2, r3
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801285a:	fb12 f303 	smulbb	r3, r2, r3
 801285e:	b29b      	uxth	r3, r3
 8012860:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012862:	4293      	cmp	r3, r2
 8012864:	bf28      	it	cs
 8012866:	4613      	movcs	r3, r2
 8012868:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012870:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012872:	4413      	add	r3, r2
 8012874:	b29a      	uxth	r2, r3
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801287c:	429a      	cmp	r2, r3
 801287e:	d309      	bcc.n	8012894 <tcp_receive+0x2a0>
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012886:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012888:	4413      	add	r3, r2
 801288a:	b29a      	uxth	r2, r3
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012892:	e060      	b.n	8012956 <tcp_receive+0x362>
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801289a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801289e:	e05a      	b.n	8012956 <tcp_receive+0x362>
 80128a0:	0801f260 	.word	0x0801f260
 80128a4:	0801f590 	.word	0x0801f590
 80128a8:	0801f2ac 	.word	0x0801f2ac
 80128ac:	0801f5ac 	.word	0x0801f5ac
 80128b0:	20008830 	.word	0x20008830
 80128b4:	20008824 	.word	0x20008824
 80128b8:	20008828 	.word	0x20008828
 80128bc:	20008814 	.word	0x20008814
 80128c0:	2000882e 	.word	0x2000882e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80128ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80128cc:	4413      	add	r3, r2
 80128ce:	b29a      	uxth	r2, r3
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80128d6:	429a      	cmp	r2, r3
 80128d8:	d309      	bcc.n	80128ee <tcp_receive+0x2fa>
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80128e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80128e2:	4413      	add	r3, r2
 80128e4:	b29a      	uxth	r2, r3
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80128ec:	e004      	b.n	80128f8 <tcp_receive+0x304>
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80128f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012904:	429a      	cmp	r2, r3
 8012906:	d326      	bcc.n	8012956 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012914:	1ad3      	subs	r3, r2, r3
 8012916:	b29a      	uxth	r2, r3
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012928:	4413      	add	r3, r2
 801292a:	b29a      	uxth	r2, r3
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012932:	429a      	cmp	r2, r3
 8012934:	d30a      	bcc.n	801294c <tcp_receive+0x358>
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012940:	4413      	add	r3, r2
 8012942:	b29a      	uxth	r2, r3
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801294a:	e004      	b.n	8012956 <tcp_receive+0x362>
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012952:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801295e:	4a98      	ldr	r2, [pc, #608]	; (8012bc0 <tcp_receive+0x5cc>)
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f7ff fdcb 	bl	80124fc <tcp_free_acked_segments>
 8012966:	4602      	mov	r2, r0
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012974:	4a93      	ldr	r2, [pc, #588]	; (8012bc4 <tcp_receive+0x5d0>)
 8012976:	6878      	ldr	r0, [r7, #4]
 8012978:	f7ff fdc0 	bl	80124fc <tcp_free_acked_segments>
 801297c:	4602      	mov	r2, r0
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012986:	2b00      	cmp	r3, #0
 8012988:	d104      	bne.n	8012994 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012990:	861a      	strh	r2, [r3, #48]	; 0x30
 8012992:	e002      	b.n	801299a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	2200      	movs	r2, #0
 8012998:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	2200      	movs	r2, #0
 801299e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d103      	bne.n	80129b0 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	2200      	movs	r2, #0
 80129ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80129b6:	4b84      	ldr	r3, [pc, #528]	; (8012bc8 <tcp_receive+0x5d4>)
 80129b8:	881b      	ldrh	r3, [r3, #0]
 80129ba:	4413      	add	r3, r2
 80129bc:	b29a      	uxth	r2, r3
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	8b5b      	ldrh	r3, [r3, #26]
 80129c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d035      	beq.n	8012a3c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d118      	bne.n	8012a0a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d00c      	beq.n	80129fa <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129e8:	68db      	ldr	r3, [r3, #12]
 80129ea:	685b      	ldr	r3, [r3, #4]
 80129ec:	4618      	mov	r0, r3
 80129ee:	f7fa ff72 	bl	800d8d6 <lwip_htonl>
 80129f2:	4603      	mov	r3, r0
 80129f4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	dc20      	bgt.n	8012a3c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	8b5b      	ldrh	r3, [r3, #26]
 80129fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012a02:	b29a      	uxth	r2, r3
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012a08:	e018      	b.n	8012a3c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a12:	68db      	ldr	r3, [r3, #12]
 8012a14:	685b      	ldr	r3, [r3, #4]
 8012a16:	4618      	mov	r0, r3
 8012a18:	f7fa ff5d 	bl	800d8d6 <lwip_htonl>
 8012a1c:	4603      	mov	r3, r0
 8012a1e:	1ae3      	subs	r3, r4, r3
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	dc0b      	bgt.n	8012a3c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	8b5b      	ldrh	r3, [r3, #26]
 8012a28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012a2c:	b29a      	uxth	r2, r3
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012a32:	e003      	b.n	8012a3c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012a34:	6878      	ldr	r0, [r7, #4]
 8012a36:	f002 fbdf 	bl	80151f8 <tcp_send_empty_ack>
 8012a3a:	e000      	b.n	8012a3e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012a3c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d05b      	beq.n	8012afe <tcp_receive+0x50a>
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012a4a:	4b60      	ldr	r3, [pc, #384]	; (8012bcc <tcp_receive+0x5d8>)
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	1ad3      	subs	r3, r2, r3
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	da54      	bge.n	8012afe <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012a54:	4b5e      	ldr	r3, [pc, #376]	; (8012bd0 <tcp_receive+0x5dc>)
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	b29a      	uxth	r2, r3
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a5e:	b29b      	uxth	r3, r3
 8012a60:	1ad3      	subs	r3, r2, r3
 8012a62:	b29b      	uxth	r3, r3
 8012a64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012a68:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012a72:	10db      	asrs	r3, r3, #3
 8012a74:	b21b      	sxth	r3, r3
 8012a76:	b29b      	uxth	r3, r3
 8012a78:	1ad3      	subs	r3, r2, r3
 8012a7a:	b29b      	uxth	r3, r3
 8012a7c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012a86:	b29a      	uxth	r2, r3
 8012a88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012a8c:	4413      	add	r3, r2
 8012a8e:	b29b      	uxth	r3, r3
 8012a90:	b21a      	sxth	r2, r3
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012a96:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	da05      	bge.n	8012aaa <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8012a9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012aa2:	425b      	negs	r3, r3
 8012aa4:	b29b      	uxth	r3, r3
 8012aa6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012aaa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012ab4:	109b      	asrs	r3, r3, #2
 8012ab6:	b21b      	sxth	r3, r3
 8012ab8:	b29b      	uxth	r3, r3
 8012aba:	1ad3      	subs	r3, r2, r3
 8012abc:	b29b      	uxth	r3, r3
 8012abe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012ac8:	b29a      	uxth	r2, r3
 8012aca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012ace:	4413      	add	r3, r2
 8012ad0:	b29b      	uxth	r3, r3
 8012ad2:	b21a      	sxth	r2, r3
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012ade:	10db      	asrs	r3, r3, #3
 8012ae0:	b21b      	sxth	r3, r3
 8012ae2:	b29a      	uxth	r2, r3
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012aea:	b29b      	uxth	r3, r3
 8012aec:	4413      	add	r3, r2
 8012aee:	b29b      	uxth	r3, r3
 8012af0:	b21a      	sxth	r2, r3
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	2200      	movs	r2, #0
 8012afc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012afe:	4b35      	ldr	r3, [pc, #212]	; (8012bd4 <tcp_receive+0x5e0>)
 8012b00:	881b      	ldrh	r3, [r3, #0]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	f000 84e1 	beq.w	80134ca <tcp_receive+0xed6>
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	7d1b      	ldrb	r3, [r3, #20]
 8012b0c:	2b06      	cmp	r3, #6
 8012b0e:	f200 84dc 	bhi.w	80134ca <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012b16:	4b30      	ldr	r3, [pc, #192]	; (8012bd8 <tcp_receive+0x5e4>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	1ad3      	subs	r3, r2, r3
 8012b1c:	3b01      	subs	r3, #1
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	f2c0 808e 	blt.w	8012c40 <tcp_receive+0x64c>
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012b28:	4b2a      	ldr	r3, [pc, #168]	; (8012bd4 <tcp_receive+0x5e0>)
 8012b2a:	881b      	ldrh	r3, [r3, #0]
 8012b2c:	4619      	mov	r1, r3
 8012b2e:	4b2a      	ldr	r3, [pc, #168]	; (8012bd8 <tcp_receive+0x5e4>)
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	440b      	add	r3, r1
 8012b34:	1ad3      	subs	r3, r2, r3
 8012b36:	3301      	adds	r3, #1
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	f300 8081 	bgt.w	8012c40 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012b3e:	4b27      	ldr	r3, [pc, #156]	; (8012bdc <tcp_receive+0x5e8>)
 8012b40:	685b      	ldr	r3, [r3, #4]
 8012b42:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012b48:	4b23      	ldr	r3, [pc, #140]	; (8012bd8 <tcp_receive+0x5e4>)
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	1ad3      	subs	r3, r2, r3
 8012b4e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012b50:	4b22      	ldr	r3, [pc, #136]	; (8012bdc <tcp_receive+0x5e8>)
 8012b52:	685b      	ldr	r3, [r3, #4]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d106      	bne.n	8012b66 <tcp_receive+0x572>
 8012b58:	4b21      	ldr	r3, [pc, #132]	; (8012be0 <tcp_receive+0x5ec>)
 8012b5a:	f240 5294 	movw	r2, #1428	; 0x594
 8012b5e:	4921      	ldr	r1, [pc, #132]	; (8012be4 <tcp_receive+0x5f0>)
 8012b60:	4821      	ldr	r0, [pc, #132]	; (8012be8 <tcp_receive+0x5f4>)
 8012b62:	f006 fead 	bl	80198c0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012b6c:	4293      	cmp	r3, r2
 8012b6e:	d906      	bls.n	8012b7e <tcp_receive+0x58a>
 8012b70:	4b1b      	ldr	r3, [pc, #108]	; (8012be0 <tcp_receive+0x5ec>)
 8012b72:	f240 5295 	movw	r2, #1429	; 0x595
 8012b76:	491d      	ldr	r1, [pc, #116]	; (8012bec <tcp_receive+0x5f8>)
 8012b78:	481b      	ldr	r0, [pc, #108]	; (8012be8 <tcp_receive+0x5f4>)
 8012b7a:	f006 fea1 	bl	80198c0 <iprintf>
      off = (u16_t)off32;
 8012b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012b84:	4b15      	ldr	r3, [pc, #84]	; (8012bdc <tcp_receive+0x5e8>)
 8012b86:	685b      	ldr	r3, [r3, #4]
 8012b88:	891b      	ldrh	r3, [r3, #8]
 8012b8a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012b8e:	429a      	cmp	r2, r3
 8012b90:	d906      	bls.n	8012ba0 <tcp_receive+0x5ac>
 8012b92:	4b13      	ldr	r3, [pc, #76]	; (8012be0 <tcp_receive+0x5ec>)
 8012b94:	f240 5297 	movw	r2, #1431	; 0x597
 8012b98:	4915      	ldr	r1, [pc, #84]	; (8012bf0 <tcp_receive+0x5fc>)
 8012b9a:	4813      	ldr	r0, [pc, #76]	; (8012be8 <tcp_receive+0x5f4>)
 8012b9c:	f006 fe90 	bl	80198c0 <iprintf>
      inseg.len -= off;
 8012ba0:	4b0e      	ldr	r3, [pc, #56]	; (8012bdc <tcp_receive+0x5e8>)
 8012ba2:	891a      	ldrh	r2, [r3, #8]
 8012ba4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ba8:	1ad3      	subs	r3, r2, r3
 8012baa:	b29a      	uxth	r2, r3
 8012bac:	4b0b      	ldr	r3, [pc, #44]	; (8012bdc <tcp_receive+0x5e8>)
 8012bae:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012bb0:	4b0a      	ldr	r3, [pc, #40]	; (8012bdc <tcp_receive+0x5e8>)
 8012bb2:	685b      	ldr	r3, [r3, #4]
 8012bb4:	891a      	ldrh	r2, [r3, #8]
 8012bb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012bba:	1ad3      	subs	r3, r2, r3
 8012bbc:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012bbe:	e029      	b.n	8012c14 <tcp_receive+0x620>
 8012bc0:	0801f5c8 	.word	0x0801f5c8
 8012bc4:	0801f5d0 	.word	0x0801f5d0
 8012bc8:	2000882c 	.word	0x2000882c
 8012bcc:	20008828 	.word	0x20008828
 8012bd0:	2000fcf8 	.word	0x2000fcf8
 8012bd4:	2000882e 	.word	0x2000882e
 8012bd8:	20008824 	.word	0x20008824
 8012bdc:	20008804 	.word	0x20008804
 8012be0:	0801f260 	.word	0x0801f260
 8012be4:	0801f5d8 	.word	0x0801f5d8
 8012be8:	0801f2ac 	.word	0x0801f2ac
 8012bec:	0801f5e8 	.word	0x0801f5e8
 8012bf0:	0801f5f8 	.word	0x0801f5f8
        off -= p->len;
 8012bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012bf6:	895b      	ldrh	r3, [r3, #10]
 8012bf8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012bfc:	1ad3      	subs	r3, r2, r3
 8012bfe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c04:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012c06:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c0a:	2200      	movs	r2, #0
 8012c0c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c16:	895b      	ldrh	r3, [r3, #10]
 8012c18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012c1c:	429a      	cmp	r2, r3
 8012c1e:	d8e9      	bhi.n	8012bf4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012c20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c24:	4619      	mov	r1, r3
 8012c26:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012c28:	f7fc f8ea 	bl	800ee00 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c30:	4a91      	ldr	r2, [pc, #580]	; (8012e78 <tcp_receive+0x884>)
 8012c32:	6013      	str	r3, [r2, #0]
 8012c34:	4b91      	ldr	r3, [pc, #580]	; (8012e7c <tcp_receive+0x888>)
 8012c36:	68db      	ldr	r3, [r3, #12]
 8012c38:	4a8f      	ldr	r2, [pc, #572]	; (8012e78 <tcp_receive+0x884>)
 8012c3a:	6812      	ldr	r2, [r2, #0]
 8012c3c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012c3e:	e00d      	b.n	8012c5c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012c40:	4b8d      	ldr	r3, [pc, #564]	; (8012e78 <tcp_receive+0x884>)
 8012c42:	681a      	ldr	r2, [r3, #0]
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c48:	1ad3      	subs	r3, r2, r3
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	da06      	bge.n	8012c5c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	8b5b      	ldrh	r3, [r3, #26]
 8012c52:	f043 0302 	orr.w	r3, r3, #2
 8012c56:	b29a      	uxth	r2, r3
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012c5c:	4b86      	ldr	r3, [pc, #536]	; (8012e78 <tcp_receive+0x884>)
 8012c5e:	681a      	ldr	r2, [r3, #0]
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c64:	1ad3      	subs	r3, r2, r3
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	f2c0 842a 	blt.w	80134c0 <tcp_receive+0xecc>
 8012c6c:	4b82      	ldr	r3, [pc, #520]	; (8012e78 <tcp_receive+0x884>)
 8012c6e:	681a      	ldr	r2, [r3, #0]
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c74:	6879      	ldr	r1, [r7, #4]
 8012c76:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012c78:	440b      	add	r3, r1
 8012c7a:	1ad3      	subs	r3, r2, r3
 8012c7c:	3301      	adds	r3, #1
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	f300 841e 	bgt.w	80134c0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c88:	4b7b      	ldr	r3, [pc, #492]	; (8012e78 <tcp_receive+0x884>)
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	429a      	cmp	r2, r3
 8012c8e:	f040 829a 	bne.w	80131c6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012c92:	4b7a      	ldr	r3, [pc, #488]	; (8012e7c <tcp_receive+0x888>)
 8012c94:	891c      	ldrh	r4, [r3, #8]
 8012c96:	4b79      	ldr	r3, [pc, #484]	; (8012e7c <tcp_receive+0x888>)
 8012c98:	68db      	ldr	r3, [r3, #12]
 8012c9a:	899b      	ldrh	r3, [r3, #12]
 8012c9c:	b29b      	uxth	r3, r3
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	f7fa fe04 	bl	800d8ac <lwip_htons>
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	b2db      	uxtb	r3, r3
 8012ca8:	f003 0303 	and.w	r3, r3, #3
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d001      	beq.n	8012cb4 <tcp_receive+0x6c0>
 8012cb0:	2301      	movs	r3, #1
 8012cb2:	e000      	b.n	8012cb6 <tcp_receive+0x6c2>
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	4423      	add	r3, r4
 8012cb8:	b29a      	uxth	r2, r3
 8012cba:	4b71      	ldr	r3, [pc, #452]	; (8012e80 <tcp_receive+0x88c>)
 8012cbc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012cc2:	4b6f      	ldr	r3, [pc, #444]	; (8012e80 <tcp_receive+0x88c>)
 8012cc4:	881b      	ldrh	r3, [r3, #0]
 8012cc6:	429a      	cmp	r2, r3
 8012cc8:	d275      	bcs.n	8012db6 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012cca:	4b6c      	ldr	r3, [pc, #432]	; (8012e7c <tcp_receive+0x888>)
 8012ccc:	68db      	ldr	r3, [r3, #12]
 8012cce:	899b      	ldrh	r3, [r3, #12]
 8012cd0:	b29b      	uxth	r3, r3
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f7fa fdea 	bl	800d8ac <lwip_htons>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	b2db      	uxtb	r3, r3
 8012cdc:	f003 0301 	and.w	r3, r3, #1
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d01f      	beq.n	8012d24 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012ce4:	4b65      	ldr	r3, [pc, #404]	; (8012e7c <tcp_receive+0x888>)
 8012ce6:	68db      	ldr	r3, [r3, #12]
 8012ce8:	899b      	ldrh	r3, [r3, #12]
 8012cea:	b29b      	uxth	r3, r3
 8012cec:	b21b      	sxth	r3, r3
 8012cee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012cf2:	b21c      	sxth	r4, r3
 8012cf4:	4b61      	ldr	r3, [pc, #388]	; (8012e7c <tcp_receive+0x888>)
 8012cf6:	68db      	ldr	r3, [r3, #12]
 8012cf8:	899b      	ldrh	r3, [r3, #12]
 8012cfa:	b29b      	uxth	r3, r3
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f7fa fdd5 	bl	800d8ac <lwip_htons>
 8012d02:	4603      	mov	r3, r0
 8012d04:	b2db      	uxtb	r3, r3
 8012d06:	b29b      	uxth	r3, r3
 8012d08:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012d0c:	b29b      	uxth	r3, r3
 8012d0e:	4618      	mov	r0, r3
 8012d10:	f7fa fdcc 	bl	800d8ac <lwip_htons>
 8012d14:	4603      	mov	r3, r0
 8012d16:	b21b      	sxth	r3, r3
 8012d18:	4323      	orrs	r3, r4
 8012d1a:	b21a      	sxth	r2, r3
 8012d1c:	4b57      	ldr	r3, [pc, #348]	; (8012e7c <tcp_receive+0x888>)
 8012d1e:	68db      	ldr	r3, [r3, #12]
 8012d20:	b292      	uxth	r2, r2
 8012d22:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012d28:	4b54      	ldr	r3, [pc, #336]	; (8012e7c <tcp_receive+0x888>)
 8012d2a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012d2c:	4b53      	ldr	r3, [pc, #332]	; (8012e7c <tcp_receive+0x888>)
 8012d2e:	68db      	ldr	r3, [r3, #12]
 8012d30:	899b      	ldrh	r3, [r3, #12]
 8012d32:	b29b      	uxth	r3, r3
 8012d34:	4618      	mov	r0, r3
 8012d36:	f7fa fdb9 	bl	800d8ac <lwip_htons>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	b2db      	uxtb	r3, r3
 8012d3e:	f003 0302 	and.w	r3, r3, #2
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d005      	beq.n	8012d52 <tcp_receive+0x75e>
            inseg.len -= 1;
 8012d46:	4b4d      	ldr	r3, [pc, #308]	; (8012e7c <tcp_receive+0x888>)
 8012d48:	891b      	ldrh	r3, [r3, #8]
 8012d4a:	3b01      	subs	r3, #1
 8012d4c:	b29a      	uxth	r2, r3
 8012d4e:	4b4b      	ldr	r3, [pc, #300]	; (8012e7c <tcp_receive+0x888>)
 8012d50:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012d52:	4b4a      	ldr	r3, [pc, #296]	; (8012e7c <tcp_receive+0x888>)
 8012d54:	685a      	ldr	r2, [r3, #4]
 8012d56:	4b49      	ldr	r3, [pc, #292]	; (8012e7c <tcp_receive+0x888>)
 8012d58:	891b      	ldrh	r3, [r3, #8]
 8012d5a:	4619      	mov	r1, r3
 8012d5c:	4610      	mov	r0, r2
 8012d5e:	f7fb ff4f 	bl	800ec00 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012d62:	4b46      	ldr	r3, [pc, #280]	; (8012e7c <tcp_receive+0x888>)
 8012d64:	891c      	ldrh	r4, [r3, #8]
 8012d66:	4b45      	ldr	r3, [pc, #276]	; (8012e7c <tcp_receive+0x888>)
 8012d68:	68db      	ldr	r3, [r3, #12]
 8012d6a:	899b      	ldrh	r3, [r3, #12]
 8012d6c:	b29b      	uxth	r3, r3
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f7fa fd9c 	bl	800d8ac <lwip_htons>
 8012d74:	4603      	mov	r3, r0
 8012d76:	b2db      	uxtb	r3, r3
 8012d78:	f003 0303 	and.w	r3, r3, #3
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d001      	beq.n	8012d84 <tcp_receive+0x790>
 8012d80:	2301      	movs	r3, #1
 8012d82:	e000      	b.n	8012d86 <tcp_receive+0x792>
 8012d84:	2300      	movs	r3, #0
 8012d86:	4423      	add	r3, r4
 8012d88:	b29a      	uxth	r2, r3
 8012d8a:	4b3d      	ldr	r3, [pc, #244]	; (8012e80 <tcp_receive+0x88c>)
 8012d8c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012d8e:	4b3c      	ldr	r3, [pc, #240]	; (8012e80 <tcp_receive+0x88c>)
 8012d90:	881b      	ldrh	r3, [r3, #0]
 8012d92:	461a      	mov	r2, r3
 8012d94:	4b38      	ldr	r3, [pc, #224]	; (8012e78 <tcp_receive+0x884>)
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	441a      	add	r2, r3
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d9e:	6879      	ldr	r1, [r7, #4]
 8012da0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012da2:	440b      	add	r3, r1
 8012da4:	429a      	cmp	r2, r3
 8012da6:	d006      	beq.n	8012db6 <tcp_receive+0x7c2>
 8012da8:	4b36      	ldr	r3, [pc, #216]	; (8012e84 <tcp_receive+0x890>)
 8012daa:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8012dae:	4936      	ldr	r1, [pc, #216]	; (8012e88 <tcp_receive+0x894>)
 8012db0:	4836      	ldr	r0, [pc, #216]	; (8012e8c <tcp_receive+0x898>)
 8012db2:	f006 fd85 	bl	80198c0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	f000 80e7 	beq.w	8012f8e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012dc0:	4b2e      	ldr	r3, [pc, #184]	; (8012e7c <tcp_receive+0x888>)
 8012dc2:	68db      	ldr	r3, [r3, #12]
 8012dc4:	899b      	ldrh	r3, [r3, #12]
 8012dc6:	b29b      	uxth	r3, r3
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f7fa fd6f 	bl	800d8ac <lwip_htons>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	b2db      	uxtb	r3, r3
 8012dd2:	f003 0301 	and.w	r3, r3, #1
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d010      	beq.n	8012dfc <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012dda:	e00a      	b.n	8012df2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012de0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012de6:	681a      	ldr	r2, [r3, #0]
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012dec:	68f8      	ldr	r0, [r7, #12]
 8012dee:	f7fd fcc9 	bl	8010784 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d1f0      	bne.n	8012ddc <tcp_receive+0x7e8>
 8012dfa:	e0c8      	b.n	8012f8e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e00:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012e02:	e052      	b.n	8012eaa <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e06:	68db      	ldr	r3, [r3, #12]
 8012e08:	899b      	ldrh	r3, [r3, #12]
 8012e0a:	b29b      	uxth	r3, r3
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f7fa fd4d 	bl	800d8ac <lwip_htons>
 8012e12:	4603      	mov	r3, r0
 8012e14:	b2db      	uxtb	r3, r3
 8012e16:	f003 0301 	and.w	r3, r3, #1
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d03d      	beq.n	8012e9a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012e1e:	4b17      	ldr	r3, [pc, #92]	; (8012e7c <tcp_receive+0x888>)
 8012e20:	68db      	ldr	r3, [r3, #12]
 8012e22:	899b      	ldrh	r3, [r3, #12]
 8012e24:	b29b      	uxth	r3, r3
 8012e26:	4618      	mov	r0, r3
 8012e28:	f7fa fd40 	bl	800d8ac <lwip_htons>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	b2db      	uxtb	r3, r3
 8012e30:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d130      	bne.n	8012e9a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012e38:	4b10      	ldr	r3, [pc, #64]	; (8012e7c <tcp_receive+0x888>)
 8012e3a:	68db      	ldr	r3, [r3, #12]
 8012e3c:	899b      	ldrh	r3, [r3, #12]
 8012e3e:	b29c      	uxth	r4, r3
 8012e40:	2001      	movs	r0, #1
 8012e42:	f7fa fd33 	bl	800d8ac <lwip_htons>
 8012e46:	4603      	mov	r3, r0
 8012e48:	461a      	mov	r2, r3
 8012e4a:	4b0c      	ldr	r3, [pc, #48]	; (8012e7c <tcp_receive+0x888>)
 8012e4c:	68db      	ldr	r3, [r3, #12]
 8012e4e:	4322      	orrs	r2, r4
 8012e50:	b292      	uxth	r2, r2
 8012e52:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012e54:	4b09      	ldr	r3, [pc, #36]	; (8012e7c <tcp_receive+0x888>)
 8012e56:	891c      	ldrh	r4, [r3, #8]
 8012e58:	4b08      	ldr	r3, [pc, #32]	; (8012e7c <tcp_receive+0x888>)
 8012e5a:	68db      	ldr	r3, [r3, #12]
 8012e5c:	899b      	ldrh	r3, [r3, #12]
 8012e5e:	b29b      	uxth	r3, r3
 8012e60:	4618      	mov	r0, r3
 8012e62:	f7fa fd23 	bl	800d8ac <lwip_htons>
 8012e66:	4603      	mov	r3, r0
 8012e68:	b2db      	uxtb	r3, r3
 8012e6a:	f003 0303 	and.w	r3, r3, #3
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d00e      	beq.n	8012e90 <tcp_receive+0x89c>
 8012e72:	2301      	movs	r3, #1
 8012e74:	e00d      	b.n	8012e92 <tcp_receive+0x89e>
 8012e76:	bf00      	nop
 8012e78:	20008824 	.word	0x20008824
 8012e7c:	20008804 	.word	0x20008804
 8012e80:	2000882e 	.word	0x2000882e
 8012e84:	0801f260 	.word	0x0801f260
 8012e88:	0801f608 	.word	0x0801f608
 8012e8c:	0801f2ac 	.word	0x0801f2ac
 8012e90:	2300      	movs	r3, #0
 8012e92:	4423      	add	r3, r4
 8012e94:	b29a      	uxth	r2, r3
 8012e96:	4b98      	ldr	r3, [pc, #608]	; (80130f8 <tcp_receive+0xb04>)
 8012e98:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e9c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012ea4:	6938      	ldr	r0, [r7, #16]
 8012ea6:	f7fd fc6d 	bl	8010784 <tcp_seg_free>
            while (next &&
 8012eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d00e      	beq.n	8012ece <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012eb0:	4b91      	ldr	r3, [pc, #580]	; (80130f8 <tcp_receive+0xb04>)
 8012eb2:	881b      	ldrh	r3, [r3, #0]
 8012eb4:	461a      	mov	r2, r3
 8012eb6:	4b91      	ldr	r3, [pc, #580]	; (80130fc <tcp_receive+0xb08>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	441a      	add	r2, r3
 8012ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ebe:	68db      	ldr	r3, [r3, #12]
 8012ec0:	685b      	ldr	r3, [r3, #4]
 8012ec2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012ec4:	8909      	ldrh	r1, [r1, #8]
 8012ec6:	440b      	add	r3, r1
 8012ec8:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	da9a      	bge.n	8012e04 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d059      	beq.n	8012f88 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8012ed4:	4b88      	ldr	r3, [pc, #544]	; (80130f8 <tcp_receive+0xb04>)
 8012ed6:	881b      	ldrh	r3, [r3, #0]
 8012ed8:	461a      	mov	r2, r3
 8012eda:	4b88      	ldr	r3, [pc, #544]	; (80130fc <tcp_receive+0xb08>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	441a      	add	r2, r3
 8012ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ee2:	68db      	ldr	r3, [r3, #12]
 8012ee4:	685b      	ldr	r3, [r3, #4]
 8012ee6:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	dd4d      	ble.n	8012f88 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012eee:	68db      	ldr	r3, [r3, #12]
 8012ef0:	685b      	ldr	r3, [r3, #4]
 8012ef2:	b29a      	uxth	r2, r3
 8012ef4:	4b81      	ldr	r3, [pc, #516]	; (80130fc <tcp_receive+0xb08>)
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	b29b      	uxth	r3, r3
 8012efa:	1ad3      	subs	r3, r2, r3
 8012efc:	b29a      	uxth	r2, r3
 8012efe:	4b80      	ldr	r3, [pc, #512]	; (8013100 <tcp_receive+0xb0c>)
 8012f00:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012f02:	4b7f      	ldr	r3, [pc, #508]	; (8013100 <tcp_receive+0xb0c>)
 8012f04:	68db      	ldr	r3, [r3, #12]
 8012f06:	899b      	ldrh	r3, [r3, #12]
 8012f08:	b29b      	uxth	r3, r3
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7fa fcce 	bl	800d8ac <lwip_htons>
 8012f10:	4603      	mov	r3, r0
 8012f12:	b2db      	uxtb	r3, r3
 8012f14:	f003 0302 	and.w	r3, r3, #2
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d005      	beq.n	8012f28 <tcp_receive+0x934>
                inseg.len -= 1;
 8012f1c:	4b78      	ldr	r3, [pc, #480]	; (8013100 <tcp_receive+0xb0c>)
 8012f1e:	891b      	ldrh	r3, [r3, #8]
 8012f20:	3b01      	subs	r3, #1
 8012f22:	b29a      	uxth	r2, r3
 8012f24:	4b76      	ldr	r3, [pc, #472]	; (8013100 <tcp_receive+0xb0c>)
 8012f26:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012f28:	4b75      	ldr	r3, [pc, #468]	; (8013100 <tcp_receive+0xb0c>)
 8012f2a:	685a      	ldr	r2, [r3, #4]
 8012f2c:	4b74      	ldr	r3, [pc, #464]	; (8013100 <tcp_receive+0xb0c>)
 8012f2e:	891b      	ldrh	r3, [r3, #8]
 8012f30:	4619      	mov	r1, r3
 8012f32:	4610      	mov	r0, r2
 8012f34:	f7fb fe64 	bl	800ec00 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012f38:	4b71      	ldr	r3, [pc, #452]	; (8013100 <tcp_receive+0xb0c>)
 8012f3a:	891c      	ldrh	r4, [r3, #8]
 8012f3c:	4b70      	ldr	r3, [pc, #448]	; (8013100 <tcp_receive+0xb0c>)
 8012f3e:	68db      	ldr	r3, [r3, #12]
 8012f40:	899b      	ldrh	r3, [r3, #12]
 8012f42:	b29b      	uxth	r3, r3
 8012f44:	4618      	mov	r0, r3
 8012f46:	f7fa fcb1 	bl	800d8ac <lwip_htons>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	b2db      	uxtb	r3, r3
 8012f4e:	f003 0303 	and.w	r3, r3, #3
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d001      	beq.n	8012f5a <tcp_receive+0x966>
 8012f56:	2301      	movs	r3, #1
 8012f58:	e000      	b.n	8012f5c <tcp_receive+0x968>
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	4423      	add	r3, r4
 8012f5e:	b29a      	uxth	r2, r3
 8012f60:	4b65      	ldr	r3, [pc, #404]	; (80130f8 <tcp_receive+0xb04>)
 8012f62:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012f64:	4b64      	ldr	r3, [pc, #400]	; (80130f8 <tcp_receive+0xb04>)
 8012f66:	881b      	ldrh	r3, [r3, #0]
 8012f68:	461a      	mov	r2, r3
 8012f6a:	4b64      	ldr	r3, [pc, #400]	; (80130fc <tcp_receive+0xb08>)
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	441a      	add	r2, r3
 8012f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f72:	68db      	ldr	r3, [r3, #12]
 8012f74:	685b      	ldr	r3, [r3, #4]
 8012f76:	429a      	cmp	r2, r3
 8012f78:	d006      	beq.n	8012f88 <tcp_receive+0x994>
 8012f7a:	4b62      	ldr	r3, [pc, #392]	; (8013104 <tcp_receive+0xb10>)
 8012f7c:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8012f80:	4961      	ldr	r1, [pc, #388]	; (8013108 <tcp_receive+0xb14>)
 8012f82:	4862      	ldr	r0, [pc, #392]	; (801310c <tcp_receive+0xb18>)
 8012f84:	f006 fc9c 	bl	80198c0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012f8c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012f8e:	4b5a      	ldr	r3, [pc, #360]	; (80130f8 <tcp_receive+0xb04>)
 8012f90:	881b      	ldrh	r3, [r3, #0]
 8012f92:	461a      	mov	r2, r3
 8012f94:	4b59      	ldr	r3, [pc, #356]	; (80130fc <tcp_receive+0xb08>)
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	441a      	add	r2, r3
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012fa2:	4b55      	ldr	r3, [pc, #340]	; (80130f8 <tcp_receive+0xb04>)
 8012fa4:	881b      	ldrh	r3, [r3, #0]
 8012fa6:	429a      	cmp	r2, r3
 8012fa8:	d206      	bcs.n	8012fb8 <tcp_receive+0x9c4>
 8012faa:	4b56      	ldr	r3, [pc, #344]	; (8013104 <tcp_receive+0xb10>)
 8012fac:	f240 6207 	movw	r2, #1543	; 0x607
 8012fb0:	4957      	ldr	r1, [pc, #348]	; (8013110 <tcp_receive+0xb1c>)
 8012fb2:	4856      	ldr	r0, [pc, #344]	; (801310c <tcp_receive+0xb18>)
 8012fb4:	f006 fc84 	bl	80198c0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012fbc:	4b4e      	ldr	r3, [pc, #312]	; (80130f8 <tcp_receive+0xb04>)
 8012fbe:	881b      	ldrh	r3, [r3, #0]
 8012fc0:	1ad3      	subs	r3, r2, r3
 8012fc2:	b29a      	uxth	r2, r3
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012fc8:	6878      	ldr	r0, [r7, #4]
 8012fca:	f7fc fda1 	bl	800fb10 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012fce:	4b4c      	ldr	r3, [pc, #304]	; (8013100 <tcp_receive+0xb0c>)
 8012fd0:	685b      	ldr	r3, [r3, #4]
 8012fd2:	891b      	ldrh	r3, [r3, #8]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d006      	beq.n	8012fe6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8012fd8:	4b49      	ldr	r3, [pc, #292]	; (8013100 <tcp_receive+0xb0c>)
 8012fda:	685b      	ldr	r3, [r3, #4]
 8012fdc:	4a4d      	ldr	r2, [pc, #308]	; (8013114 <tcp_receive+0xb20>)
 8012fde:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012fe0:	4b47      	ldr	r3, [pc, #284]	; (8013100 <tcp_receive+0xb0c>)
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012fe6:	4b46      	ldr	r3, [pc, #280]	; (8013100 <tcp_receive+0xb0c>)
 8012fe8:	68db      	ldr	r3, [r3, #12]
 8012fea:	899b      	ldrh	r3, [r3, #12]
 8012fec:	b29b      	uxth	r3, r3
 8012fee:	4618      	mov	r0, r3
 8012ff0:	f7fa fc5c 	bl	800d8ac <lwip_htons>
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	b2db      	uxtb	r3, r3
 8012ff8:	f003 0301 	and.w	r3, r3, #1
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	f000 80b8 	beq.w	8013172 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013002:	4b45      	ldr	r3, [pc, #276]	; (8013118 <tcp_receive+0xb24>)
 8013004:	781b      	ldrb	r3, [r3, #0]
 8013006:	f043 0320 	orr.w	r3, r3, #32
 801300a:	b2da      	uxtb	r2, r3
 801300c:	4b42      	ldr	r3, [pc, #264]	; (8013118 <tcp_receive+0xb24>)
 801300e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013010:	e0af      	b.n	8013172 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013016:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801301c:	68db      	ldr	r3, [r3, #12]
 801301e:	685b      	ldr	r3, [r3, #4]
 8013020:	4a36      	ldr	r2, [pc, #216]	; (80130fc <tcp_receive+0xb08>)
 8013022:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013024:	68bb      	ldr	r3, [r7, #8]
 8013026:	891b      	ldrh	r3, [r3, #8]
 8013028:	461c      	mov	r4, r3
 801302a:	68bb      	ldr	r3, [r7, #8]
 801302c:	68db      	ldr	r3, [r3, #12]
 801302e:	899b      	ldrh	r3, [r3, #12]
 8013030:	b29b      	uxth	r3, r3
 8013032:	4618      	mov	r0, r3
 8013034:	f7fa fc3a 	bl	800d8ac <lwip_htons>
 8013038:	4603      	mov	r3, r0
 801303a:	b2db      	uxtb	r3, r3
 801303c:	f003 0303 	and.w	r3, r3, #3
 8013040:	2b00      	cmp	r3, #0
 8013042:	d001      	beq.n	8013048 <tcp_receive+0xa54>
 8013044:	2301      	movs	r3, #1
 8013046:	e000      	b.n	801304a <tcp_receive+0xa56>
 8013048:	2300      	movs	r3, #0
 801304a:	191a      	adds	r2, r3, r4
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013050:	441a      	add	r2, r3
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801305a:	461c      	mov	r4, r3
 801305c:	68bb      	ldr	r3, [r7, #8]
 801305e:	891b      	ldrh	r3, [r3, #8]
 8013060:	461d      	mov	r5, r3
 8013062:	68bb      	ldr	r3, [r7, #8]
 8013064:	68db      	ldr	r3, [r3, #12]
 8013066:	899b      	ldrh	r3, [r3, #12]
 8013068:	b29b      	uxth	r3, r3
 801306a:	4618      	mov	r0, r3
 801306c:	f7fa fc1e 	bl	800d8ac <lwip_htons>
 8013070:	4603      	mov	r3, r0
 8013072:	b2db      	uxtb	r3, r3
 8013074:	f003 0303 	and.w	r3, r3, #3
 8013078:	2b00      	cmp	r3, #0
 801307a:	d001      	beq.n	8013080 <tcp_receive+0xa8c>
 801307c:	2301      	movs	r3, #1
 801307e:	e000      	b.n	8013082 <tcp_receive+0xa8e>
 8013080:	2300      	movs	r3, #0
 8013082:	442b      	add	r3, r5
 8013084:	429c      	cmp	r4, r3
 8013086:	d206      	bcs.n	8013096 <tcp_receive+0xaa2>
 8013088:	4b1e      	ldr	r3, [pc, #120]	; (8013104 <tcp_receive+0xb10>)
 801308a:	f240 622c 	movw	r2, #1580	; 0x62c
 801308e:	4923      	ldr	r1, [pc, #140]	; (801311c <tcp_receive+0xb28>)
 8013090:	481e      	ldr	r0, [pc, #120]	; (801310c <tcp_receive+0xb18>)
 8013092:	f006 fc15 	bl	80198c0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8013096:	68bb      	ldr	r3, [r7, #8]
 8013098:	891b      	ldrh	r3, [r3, #8]
 801309a:	461c      	mov	r4, r3
 801309c:	68bb      	ldr	r3, [r7, #8]
 801309e:	68db      	ldr	r3, [r3, #12]
 80130a0:	899b      	ldrh	r3, [r3, #12]
 80130a2:	b29b      	uxth	r3, r3
 80130a4:	4618      	mov	r0, r3
 80130a6:	f7fa fc01 	bl	800d8ac <lwip_htons>
 80130aa:	4603      	mov	r3, r0
 80130ac:	b2db      	uxtb	r3, r3
 80130ae:	f003 0303 	and.w	r3, r3, #3
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d001      	beq.n	80130ba <tcp_receive+0xac6>
 80130b6:	2301      	movs	r3, #1
 80130b8:	e000      	b.n	80130bc <tcp_receive+0xac8>
 80130ba:	2300      	movs	r3, #0
 80130bc:	1919      	adds	r1, r3, r4
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80130c2:	b28b      	uxth	r3, r1
 80130c4:	1ad3      	subs	r3, r2, r3
 80130c6:	b29a      	uxth	r2, r3
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80130cc:	6878      	ldr	r0, [r7, #4]
 80130ce:	f7fc fd1f 	bl	800fb10 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80130d2:	68bb      	ldr	r3, [r7, #8]
 80130d4:	685b      	ldr	r3, [r3, #4]
 80130d6:	891b      	ldrh	r3, [r3, #8]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d028      	beq.n	801312e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80130dc:	4b0d      	ldr	r3, [pc, #52]	; (8013114 <tcp_receive+0xb20>)
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d01d      	beq.n	8013120 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80130e4:	4b0b      	ldr	r3, [pc, #44]	; (8013114 <tcp_receive+0xb20>)
 80130e6:	681a      	ldr	r2, [r3, #0]
 80130e8:	68bb      	ldr	r3, [r7, #8]
 80130ea:	685b      	ldr	r3, [r3, #4]
 80130ec:	4619      	mov	r1, r3
 80130ee:	4610      	mov	r0, r2
 80130f0:	f7fb ffda 	bl	800f0a8 <pbuf_cat>
 80130f4:	e018      	b.n	8013128 <tcp_receive+0xb34>
 80130f6:	bf00      	nop
 80130f8:	2000882e 	.word	0x2000882e
 80130fc:	20008824 	.word	0x20008824
 8013100:	20008804 	.word	0x20008804
 8013104:	0801f260 	.word	0x0801f260
 8013108:	0801f640 	.word	0x0801f640
 801310c:	0801f2ac 	.word	0x0801f2ac
 8013110:	0801f67c 	.word	0x0801f67c
 8013114:	20008834 	.word	0x20008834
 8013118:	20008831 	.word	0x20008831
 801311c:	0801f69c 	.word	0x0801f69c
            } else {
              recv_data = cseg->p;
 8013120:	68bb      	ldr	r3, [r7, #8]
 8013122:	685b      	ldr	r3, [r3, #4]
 8013124:	4a70      	ldr	r2, [pc, #448]	; (80132e8 <tcp_receive+0xcf4>)
 8013126:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	2200      	movs	r2, #0
 801312c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801312e:	68bb      	ldr	r3, [r7, #8]
 8013130:	68db      	ldr	r3, [r3, #12]
 8013132:	899b      	ldrh	r3, [r3, #12]
 8013134:	b29b      	uxth	r3, r3
 8013136:	4618      	mov	r0, r3
 8013138:	f7fa fbb8 	bl	800d8ac <lwip_htons>
 801313c:	4603      	mov	r3, r0
 801313e:	b2db      	uxtb	r3, r3
 8013140:	f003 0301 	and.w	r3, r3, #1
 8013144:	2b00      	cmp	r3, #0
 8013146:	d00d      	beq.n	8013164 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013148:	4b68      	ldr	r3, [pc, #416]	; (80132ec <tcp_receive+0xcf8>)
 801314a:	781b      	ldrb	r3, [r3, #0]
 801314c:	f043 0320 	orr.w	r3, r3, #32
 8013150:	b2da      	uxtb	r2, r3
 8013152:	4b66      	ldr	r3, [pc, #408]	; (80132ec <tcp_receive+0xcf8>)
 8013154:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	7d1b      	ldrb	r3, [r3, #20]
 801315a:	2b04      	cmp	r3, #4
 801315c:	d102      	bne.n	8013164 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	2207      	movs	r2, #7
 8013162:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013164:	68bb      	ldr	r3, [r7, #8]
 8013166:	681a      	ldr	r2, [r3, #0]
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801316c:	68b8      	ldr	r0, [r7, #8]
 801316e:	f7fd fb09 	bl	8010784 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013176:	2b00      	cmp	r3, #0
 8013178:	d008      	beq.n	801318c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801317e:	68db      	ldr	r3, [r3, #12]
 8013180:	685a      	ldr	r2, [r3, #4]
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8013186:	429a      	cmp	r2, r3
 8013188:	f43f af43 	beq.w	8013012 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	8b5b      	ldrh	r3, [r3, #26]
 8013190:	f003 0301 	and.w	r3, r3, #1
 8013194:	2b00      	cmp	r3, #0
 8013196:	d00e      	beq.n	80131b6 <tcp_receive+0xbc2>
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	8b5b      	ldrh	r3, [r3, #26]
 801319c:	f023 0301 	bic.w	r3, r3, #1
 80131a0:	b29a      	uxth	r2, r3
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	835a      	strh	r2, [r3, #26]
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	8b5b      	ldrh	r3, [r3, #26]
 80131aa:	f043 0302 	orr.w	r3, r3, #2
 80131ae:	b29a      	uxth	r2, r3
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80131b4:	e188      	b.n	80134c8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	8b5b      	ldrh	r3, [r3, #26]
 80131ba:	f043 0301 	orr.w	r3, r3, #1
 80131be:	b29a      	uxth	r2, r3
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80131c4:	e180      	b.n	80134c8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d106      	bne.n	80131dc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80131ce:	4848      	ldr	r0, [pc, #288]	; (80132f0 <tcp_receive+0xcfc>)
 80131d0:	f7fd faf0 	bl	80107b4 <tcp_seg_copy>
 80131d4:	4602      	mov	r2, r0
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	675a      	str	r2, [r3, #116]	; 0x74
 80131da:	e16d      	b.n	80134b8 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80131dc:	2300      	movs	r3, #0
 80131de:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80131e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80131e6:	e157      	b.n	8013498 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80131e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ea:	68db      	ldr	r3, [r3, #12]
 80131ec:	685a      	ldr	r2, [r3, #4]
 80131ee:	4b41      	ldr	r3, [pc, #260]	; (80132f4 <tcp_receive+0xd00>)
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	429a      	cmp	r2, r3
 80131f4:	d11d      	bne.n	8013232 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80131f6:	4b3e      	ldr	r3, [pc, #248]	; (80132f0 <tcp_receive+0xcfc>)
 80131f8:	891a      	ldrh	r2, [r3, #8]
 80131fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131fc:	891b      	ldrh	r3, [r3, #8]
 80131fe:	429a      	cmp	r2, r3
 8013200:	f240 814f 	bls.w	80134a2 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013204:	483a      	ldr	r0, [pc, #232]	; (80132f0 <tcp_receive+0xcfc>)
 8013206:	f7fd fad5 	bl	80107b4 <tcp_seg_copy>
 801320a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801320c:	697b      	ldr	r3, [r7, #20]
 801320e:	2b00      	cmp	r3, #0
 8013210:	f000 8149 	beq.w	80134a6 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8013214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013216:	2b00      	cmp	r3, #0
 8013218:	d003      	beq.n	8013222 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801321a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801321c:	697a      	ldr	r2, [r7, #20]
 801321e:	601a      	str	r2, [r3, #0]
 8013220:	e002      	b.n	8013228 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	697a      	ldr	r2, [r7, #20]
 8013226:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013228:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801322a:	6978      	ldr	r0, [r7, #20]
 801322c:	f7ff f8de 	bl	80123ec <tcp_oos_insert_segment>
                }
                break;
 8013230:	e139      	b.n	80134a6 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8013232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013234:	2b00      	cmp	r3, #0
 8013236:	d117      	bne.n	8013268 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013238:	4b2e      	ldr	r3, [pc, #184]	; (80132f4 <tcp_receive+0xd00>)
 801323a:	681a      	ldr	r2, [r3, #0]
 801323c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801323e:	68db      	ldr	r3, [r3, #12]
 8013240:	685b      	ldr	r3, [r3, #4]
 8013242:	1ad3      	subs	r3, r2, r3
 8013244:	2b00      	cmp	r3, #0
 8013246:	da57      	bge.n	80132f8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013248:	4829      	ldr	r0, [pc, #164]	; (80132f0 <tcp_receive+0xcfc>)
 801324a:	f7fd fab3 	bl	80107b4 <tcp_seg_copy>
 801324e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8013250:	69bb      	ldr	r3, [r7, #24]
 8013252:	2b00      	cmp	r3, #0
 8013254:	f000 8129 	beq.w	80134aa <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	69ba      	ldr	r2, [r7, #24]
 801325c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801325e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013260:	69b8      	ldr	r0, [r7, #24]
 8013262:	f7ff f8c3 	bl	80123ec <tcp_oos_insert_segment>
                  }
                  break;
 8013266:	e120      	b.n	80134aa <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013268:	4b22      	ldr	r3, [pc, #136]	; (80132f4 <tcp_receive+0xd00>)
 801326a:	681a      	ldr	r2, [r3, #0]
 801326c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801326e:	68db      	ldr	r3, [r3, #12]
 8013270:	685b      	ldr	r3, [r3, #4]
 8013272:	1ad3      	subs	r3, r2, r3
 8013274:	3b01      	subs	r3, #1
 8013276:	2b00      	cmp	r3, #0
 8013278:	db3e      	blt.n	80132f8 <tcp_receive+0xd04>
 801327a:	4b1e      	ldr	r3, [pc, #120]	; (80132f4 <tcp_receive+0xd00>)
 801327c:	681a      	ldr	r2, [r3, #0]
 801327e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013280:	68db      	ldr	r3, [r3, #12]
 8013282:	685b      	ldr	r3, [r3, #4]
 8013284:	1ad3      	subs	r3, r2, r3
 8013286:	3301      	adds	r3, #1
 8013288:	2b00      	cmp	r3, #0
 801328a:	dc35      	bgt.n	80132f8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801328c:	4818      	ldr	r0, [pc, #96]	; (80132f0 <tcp_receive+0xcfc>)
 801328e:	f7fd fa91 	bl	80107b4 <tcp_seg_copy>
 8013292:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8013294:	69fb      	ldr	r3, [r7, #28]
 8013296:	2b00      	cmp	r3, #0
 8013298:	f000 8109 	beq.w	80134ae <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801329c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801329e:	68db      	ldr	r3, [r3, #12]
 80132a0:	685b      	ldr	r3, [r3, #4]
 80132a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80132a4:	8912      	ldrh	r2, [r2, #8]
 80132a6:	441a      	add	r2, r3
 80132a8:	4b12      	ldr	r3, [pc, #72]	; (80132f4 <tcp_receive+0xd00>)
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	1ad3      	subs	r3, r2, r3
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	dd12      	ble.n	80132d8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80132b2:	4b10      	ldr	r3, [pc, #64]	; (80132f4 <tcp_receive+0xd00>)
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	b29a      	uxth	r2, r3
 80132b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132ba:	68db      	ldr	r3, [r3, #12]
 80132bc:	685b      	ldr	r3, [r3, #4]
 80132be:	b29b      	uxth	r3, r3
 80132c0:	1ad3      	subs	r3, r2, r3
 80132c2:	b29a      	uxth	r2, r3
 80132c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132c6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80132c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132ca:	685a      	ldr	r2, [r3, #4]
 80132cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132ce:	891b      	ldrh	r3, [r3, #8]
 80132d0:	4619      	mov	r1, r3
 80132d2:	4610      	mov	r0, r2
 80132d4:	f7fb fc94 	bl	800ec00 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80132d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132da:	69fa      	ldr	r2, [r7, #28]
 80132dc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80132de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80132e0:	69f8      	ldr	r0, [r7, #28]
 80132e2:	f7ff f883 	bl	80123ec <tcp_oos_insert_segment>
                  }
                  break;
 80132e6:	e0e2      	b.n	80134ae <tcp_receive+0xeba>
 80132e8:	20008834 	.word	0x20008834
 80132ec:	20008831 	.word	0x20008831
 80132f0:	20008804 	.word	0x20008804
 80132f4:	20008824 	.word	0x20008824
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80132f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132fa:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80132fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	2b00      	cmp	r3, #0
 8013302:	f040 80c6 	bne.w	8013492 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8013306:	4b80      	ldr	r3, [pc, #512]	; (8013508 <tcp_receive+0xf14>)
 8013308:	681a      	ldr	r2, [r3, #0]
 801330a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801330c:	68db      	ldr	r3, [r3, #12]
 801330e:	685b      	ldr	r3, [r3, #4]
 8013310:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8013312:	2b00      	cmp	r3, #0
 8013314:	f340 80bd 	ble.w	8013492 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801331a:	68db      	ldr	r3, [r3, #12]
 801331c:	899b      	ldrh	r3, [r3, #12]
 801331e:	b29b      	uxth	r3, r3
 8013320:	4618      	mov	r0, r3
 8013322:	f7fa fac3 	bl	800d8ac <lwip_htons>
 8013326:	4603      	mov	r3, r0
 8013328:	b2db      	uxtb	r3, r3
 801332a:	f003 0301 	and.w	r3, r3, #1
 801332e:	2b00      	cmp	r3, #0
 8013330:	f040 80bf 	bne.w	80134b2 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013334:	4875      	ldr	r0, [pc, #468]	; (801350c <tcp_receive+0xf18>)
 8013336:	f7fd fa3d 	bl	80107b4 <tcp_seg_copy>
 801333a:	4602      	mov	r2, r0
 801333c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801333e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8013340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	2b00      	cmp	r3, #0
 8013346:	f000 80b6 	beq.w	80134b6 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801334a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801334c:	68db      	ldr	r3, [r3, #12]
 801334e:	685b      	ldr	r3, [r3, #4]
 8013350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013352:	8912      	ldrh	r2, [r2, #8]
 8013354:	441a      	add	r2, r3
 8013356:	4b6c      	ldr	r3, [pc, #432]	; (8013508 <tcp_receive+0xf14>)
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	1ad3      	subs	r3, r2, r3
 801335c:	2b00      	cmp	r3, #0
 801335e:	dd12      	ble.n	8013386 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8013360:	4b69      	ldr	r3, [pc, #420]	; (8013508 <tcp_receive+0xf14>)
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	b29a      	uxth	r2, r3
 8013366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013368:	68db      	ldr	r3, [r3, #12]
 801336a:	685b      	ldr	r3, [r3, #4]
 801336c:	b29b      	uxth	r3, r3
 801336e:	1ad3      	subs	r3, r2, r3
 8013370:	b29a      	uxth	r2, r3
 8013372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013374:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8013376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013378:	685a      	ldr	r2, [r3, #4]
 801337a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801337c:	891b      	ldrh	r3, [r3, #8]
 801337e:	4619      	mov	r1, r3
 8013380:	4610      	mov	r0, r2
 8013382:	f7fb fc3d 	bl	800ec00 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8013386:	4b62      	ldr	r3, [pc, #392]	; (8013510 <tcp_receive+0xf1c>)
 8013388:	881b      	ldrh	r3, [r3, #0]
 801338a:	461a      	mov	r2, r3
 801338c:	4b5e      	ldr	r3, [pc, #376]	; (8013508 <tcp_receive+0xf14>)
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	441a      	add	r2, r3
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013396:	6879      	ldr	r1, [r7, #4]
 8013398:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801339a:	440b      	add	r3, r1
 801339c:	1ad3      	subs	r3, r2, r3
 801339e:	2b00      	cmp	r3, #0
 80133a0:	f340 8089 	ble.w	80134b6 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80133a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	68db      	ldr	r3, [r3, #12]
 80133aa:	899b      	ldrh	r3, [r3, #12]
 80133ac:	b29b      	uxth	r3, r3
 80133ae:	4618      	mov	r0, r3
 80133b0:	f7fa fa7c 	bl	800d8ac <lwip_htons>
 80133b4:	4603      	mov	r3, r0
 80133b6:	b2db      	uxtb	r3, r3
 80133b8:	f003 0301 	and.w	r3, r3, #1
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d022      	beq.n	8013406 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80133c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	68db      	ldr	r3, [r3, #12]
 80133c6:	899b      	ldrh	r3, [r3, #12]
 80133c8:	b29b      	uxth	r3, r3
 80133ca:	b21b      	sxth	r3, r3
 80133cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80133d0:	b21c      	sxth	r4, r3
 80133d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	68db      	ldr	r3, [r3, #12]
 80133d8:	899b      	ldrh	r3, [r3, #12]
 80133da:	b29b      	uxth	r3, r3
 80133dc:	4618      	mov	r0, r3
 80133de:	f7fa fa65 	bl	800d8ac <lwip_htons>
 80133e2:	4603      	mov	r3, r0
 80133e4:	b2db      	uxtb	r3, r3
 80133e6:	b29b      	uxth	r3, r3
 80133e8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80133ec:	b29b      	uxth	r3, r3
 80133ee:	4618      	mov	r0, r3
 80133f0:	f7fa fa5c 	bl	800d8ac <lwip_htons>
 80133f4:	4603      	mov	r3, r0
 80133f6:	b21b      	sxth	r3, r3
 80133f8:	4323      	orrs	r3, r4
 80133fa:	b21a      	sxth	r2, r3
 80133fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	68db      	ldr	r3, [r3, #12]
 8013402:	b292      	uxth	r2, r2
 8013404:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801340a:	b29a      	uxth	r2, r3
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013410:	4413      	add	r3, r2
 8013412:	b299      	uxth	r1, r3
 8013414:	4b3c      	ldr	r3, [pc, #240]	; (8013508 <tcp_receive+0xf14>)
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	b29a      	uxth	r2, r3
 801341a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	1a8a      	subs	r2, r1, r2
 8013420:	b292      	uxth	r2, r2
 8013422:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8013424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	685a      	ldr	r2, [r3, #4]
 801342a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	891b      	ldrh	r3, [r3, #8]
 8013430:	4619      	mov	r1, r3
 8013432:	4610      	mov	r0, r2
 8013434:	f7fb fbe4 	bl	800ec00 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	891c      	ldrh	r4, [r3, #8]
 801343e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	68db      	ldr	r3, [r3, #12]
 8013444:	899b      	ldrh	r3, [r3, #12]
 8013446:	b29b      	uxth	r3, r3
 8013448:	4618      	mov	r0, r3
 801344a:	f7fa fa2f 	bl	800d8ac <lwip_htons>
 801344e:	4603      	mov	r3, r0
 8013450:	b2db      	uxtb	r3, r3
 8013452:	f003 0303 	and.w	r3, r3, #3
 8013456:	2b00      	cmp	r3, #0
 8013458:	d001      	beq.n	801345e <tcp_receive+0xe6a>
 801345a:	2301      	movs	r3, #1
 801345c:	e000      	b.n	8013460 <tcp_receive+0xe6c>
 801345e:	2300      	movs	r3, #0
 8013460:	4423      	add	r3, r4
 8013462:	b29a      	uxth	r2, r3
 8013464:	4b2a      	ldr	r3, [pc, #168]	; (8013510 <tcp_receive+0xf1c>)
 8013466:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013468:	4b29      	ldr	r3, [pc, #164]	; (8013510 <tcp_receive+0xf1c>)
 801346a:	881b      	ldrh	r3, [r3, #0]
 801346c:	461a      	mov	r2, r3
 801346e:	4b26      	ldr	r3, [pc, #152]	; (8013508 <tcp_receive+0xf14>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	441a      	add	r2, r3
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013478:	6879      	ldr	r1, [r7, #4]
 801347a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801347c:	440b      	add	r3, r1
 801347e:	429a      	cmp	r2, r3
 8013480:	d019      	beq.n	80134b6 <tcp_receive+0xec2>
 8013482:	4b24      	ldr	r3, [pc, #144]	; (8013514 <tcp_receive+0xf20>)
 8013484:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013488:	4923      	ldr	r1, [pc, #140]	; (8013518 <tcp_receive+0xf24>)
 801348a:	4824      	ldr	r0, [pc, #144]	; (801351c <tcp_receive+0xf28>)
 801348c:	f006 fa18 	bl	80198c0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013490:	e011      	b.n	80134b6 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	63bb      	str	r3, [r7, #56]	; 0x38
 8013498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801349a:	2b00      	cmp	r3, #0
 801349c:	f47f aea4 	bne.w	80131e8 <tcp_receive+0xbf4>
 80134a0:	e00a      	b.n	80134b8 <tcp_receive+0xec4>
                break;
 80134a2:	bf00      	nop
 80134a4:	e008      	b.n	80134b8 <tcp_receive+0xec4>
                break;
 80134a6:	bf00      	nop
 80134a8:	e006      	b.n	80134b8 <tcp_receive+0xec4>
                  break;
 80134aa:	bf00      	nop
 80134ac:	e004      	b.n	80134b8 <tcp_receive+0xec4>
                  break;
 80134ae:	bf00      	nop
 80134b0:	e002      	b.n	80134b8 <tcp_receive+0xec4>
                  break;
 80134b2:	bf00      	nop
 80134b4:	e000      	b.n	80134b8 <tcp_receive+0xec4>
                break;
 80134b6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80134b8:	6878      	ldr	r0, [r7, #4]
 80134ba:	f001 fe9d 	bl	80151f8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80134be:	e003      	b.n	80134c8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80134c0:	6878      	ldr	r0, [r7, #4]
 80134c2:	f001 fe99 	bl	80151f8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80134c6:	e01a      	b.n	80134fe <tcp_receive+0xf0a>
 80134c8:	e019      	b.n	80134fe <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80134ca:	4b0f      	ldr	r3, [pc, #60]	; (8013508 <tcp_receive+0xf14>)
 80134cc:	681a      	ldr	r2, [r3, #0]
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134d2:	1ad3      	subs	r3, r2, r3
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	db0a      	blt.n	80134ee <tcp_receive+0xefa>
 80134d8:	4b0b      	ldr	r3, [pc, #44]	; (8013508 <tcp_receive+0xf14>)
 80134da:	681a      	ldr	r2, [r3, #0]
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134e0:	6879      	ldr	r1, [r7, #4]
 80134e2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80134e4:	440b      	add	r3, r1
 80134e6:	1ad3      	subs	r3, r2, r3
 80134e8:	3301      	adds	r3, #1
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	dd07      	ble.n	80134fe <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	8b5b      	ldrh	r3, [r3, #26]
 80134f2:	f043 0302 	orr.w	r3, r3, #2
 80134f6:	b29a      	uxth	r2, r3
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80134fc:	e7ff      	b.n	80134fe <tcp_receive+0xf0a>
 80134fe:	bf00      	nop
 8013500:	3750      	adds	r7, #80	; 0x50
 8013502:	46bd      	mov	sp, r7
 8013504:	bdb0      	pop	{r4, r5, r7, pc}
 8013506:	bf00      	nop
 8013508:	20008824 	.word	0x20008824
 801350c:	20008804 	.word	0x20008804
 8013510:	2000882e 	.word	0x2000882e
 8013514:	0801f260 	.word	0x0801f260
 8013518:	0801f608 	.word	0x0801f608
 801351c:	0801f2ac 	.word	0x0801f2ac

08013520 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013520:	b480      	push	{r7}
 8013522:	b083      	sub	sp, #12
 8013524:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8013526:	4b15      	ldr	r3, [pc, #84]	; (801357c <tcp_get_next_optbyte+0x5c>)
 8013528:	881b      	ldrh	r3, [r3, #0]
 801352a:	1c5a      	adds	r2, r3, #1
 801352c:	b291      	uxth	r1, r2
 801352e:	4a13      	ldr	r2, [pc, #76]	; (801357c <tcp_get_next_optbyte+0x5c>)
 8013530:	8011      	strh	r1, [r2, #0]
 8013532:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013534:	4b12      	ldr	r3, [pc, #72]	; (8013580 <tcp_get_next_optbyte+0x60>)
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d004      	beq.n	8013546 <tcp_get_next_optbyte+0x26>
 801353c:	4b11      	ldr	r3, [pc, #68]	; (8013584 <tcp_get_next_optbyte+0x64>)
 801353e:	881b      	ldrh	r3, [r3, #0]
 8013540:	88fa      	ldrh	r2, [r7, #6]
 8013542:	429a      	cmp	r2, r3
 8013544:	d208      	bcs.n	8013558 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8013546:	4b10      	ldr	r3, [pc, #64]	; (8013588 <tcp_get_next_optbyte+0x68>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	3314      	adds	r3, #20
 801354c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801354e:	88fb      	ldrh	r3, [r7, #6]
 8013550:	683a      	ldr	r2, [r7, #0]
 8013552:	4413      	add	r3, r2
 8013554:	781b      	ldrb	r3, [r3, #0]
 8013556:	e00b      	b.n	8013570 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8013558:	88fb      	ldrh	r3, [r7, #6]
 801355a:	b2da      	uxtb	r2, r3
 801355c:	4b09      	ldr	r3, [pc, #36]	; (8013584 <tcp_get_next_optbyte+0x64>)
 801355e:	881b      	ldrh	r3, [r3, #0]
 8013560:	b2db      	uxtb	r3, r3
 8013562:	1ad3      	subs	r3, r2, r3
 8013564:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8013566:	4b06      	ldr	r3, [pc, #24]	; (8013580 <tcp_get_next_optbyte+0x60>)
 8013568:	681a      	ldr	r2, [r3, #0]
 801356a:	797b      	ldrb	r3, [r7, #5]
 801356c:	4413      	add	r3, r2
 801356e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013570:	4618      	mov	r0, r3
 8013572:	370c      	adds	r7, #12
 8013574:	46bd      	mov	sp, r7
 8013576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357a:	4770      	bx	lr
 801357c:	20008820 	.word	0x20008820
 8013580:	2000881c 	.word	0x2000881c
 8013584:	2000881a 	.word	0x2000881a
 8013588:	20008814 	.word	0x20008814

0801358c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b084      	sub	sp, #16
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d106      	bne.n	80135a8 <tcp_parseopt+0x1c>
 801359a:	4b31      	ldr	r3, [pc, #196]	; (8013660 <tcp_parseopt+0xd4>)
 801359c:	f240 727d 	movw	r2, #1917	; 0x77d
 80135a0:	4930      	ldr	r1, [pc, #192]	; (8013664 <tcp_parseopt+0xd8>)
 80135a2:	4831      	ldr	r0, [pc, #196]	; (8013668 <tcp_parseopt+0xdc>)
 80135a4:	f006 f98c 	bl	80198c0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80135a8:	4b30      	ldr	r3, [pc, #192]	; (801366c <tcp_parseopt+0xe0>)
 80135aa:	881b      	ldrh	r3, [r3, #0]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d053      	beq.n	8013658 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80135b0:	4b2f      	ldr	r3, [pc, #188]	; (8013670 <tcp_parseopt+0xe4>)
 80135b2:	2200      	movs	r2, #0
 80135b4:	801a      	strh	r2, [r3, #0]
 80135b6:	e043      	b.n	8013640 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 80135b8:	f7ff ffb2 	bl	8013520 <tcp_get_next_optbyte>
 80135bc:	4603      	mov	r3, r0
 80135be:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80135c0:	7bfb      	ldrb	r3, [r7, #15]
 80135c2:	2b01      	cmp	r3, #1
 80135c4:	d03c      	beq.n	8013640 <tcp_parseopt+0xb4>
 80135c6:	2b02      	cmp	r3, #2
 80135c8:	d002      	beq.n	80135d0 <tcp_parseopt+0x44>
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d03f      	beq.n	801364e <tcp_parseopt+0xc2>
 80135ce:	e026      	b.n	801361e <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80135d0:	f7ff ffa6 	bl	8013520 <tcp_get_next_optbyte>
 80135d4:	4603      	mov	r3, r0
 80135d6:	2b04      	cmp	r3, #4
 80135d8:	d13b      	bne.n	8013652 <tcp_parseopt+0xc6>
 80135da:	4b25      	ldr	r3, [pc, #148]	; (8013670 <tcp_parseopt+0xe4>)
 80135dc:	881b      	ldrh	r3, [r3, #0]
 80135de:	3302      	adds	r3, #2
 80135e0:	4a22      	ldr	r2, [pc, #136]	; (801366c <tcp_parseopt+0xe0>)
 80135e2:	8812      	ldrh	r2, [r2, #0]
 80135e4:	4293      	cmp	r3, r2
 80135e6:	dc34      	bgt.n	8013652 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80135e8:	f7ff ff9a 	bl	8013520 <tcp_get_next_optbyte>
 80135ec:	4603      	mov	r3, r0
 80135ee:	b29b      	uxth	r3, r3
 80135f0:	021b      	lsls	r3, r3, #8
 80135f2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80135f4:	f7ff ff94 	bl	8013520 <tcp_get_next_optbyte>
 80135f8:	4603      	mov	r3, r0
 80135fa:	b29a      	uxth	r2, r3
 80135fc:	89bb      	ldrh	r3, [r7, #12]
 80135fe:	4313      	orrs	r3, r2
 8013600:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013602:	89bb      	ldrh	r3, [r7, #12]
 8013604:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013608:	d804      	bhi.n	8013614 <tcp_parseopt+0x88>
 801360a:	89bb      	ldrh	r3, [r7, #12]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d001      	beq.n	8013614 <tcp_parseopt+0x88>
 8013610:	89ba      	ldrh	r2, [r7, #12]
 8013612:	e001      	b.n	8013618 <tcp_parseopt+0x8c>
 8013614:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801361c:	e010      	b.n	8013640 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801361e:	f7ff ff7f 	bl	8013520 <tcp_get_next_optbyte>
 8013622:	4603      	mov	r3, r0
 8013624:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8013626:	7afb      	ldrb	r3, [r7, #11]
 8013628:	2b01      	cmp	r3, #1
 801362a:	d914      	bls.n	8013656 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801362c:	7afb      	ldrb	r3, [r7, #11]
 801362e:	b29a      	uxth	r2, r3
 8013630:	4b0f      	ldr	r3, [pc, #60]	; (8013670 <tcp_parseopt+0xe4>)
 8013632:	881b      	ldrh	r3, [r3, #0]
 8013634:	4413      	add	r3, r2
 8013636:	b29b      	uxth	r3, r3
 8013638:	3b02      	subs	r3, #2
 801363a:	b29a      	uxth	r2, r3
 801363c:	4b0c      	ldr	r3, [pc, #48]	; (8013670 <tcp_parseopt+0xe4>)
 801363e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013640:	4b0b      	ldr	r3, [pc, #44]	; (8013670 <tcp_parseopt+0xe4>)
 8013642:	881a      	ldrh	r2, [r3, #0]
 8013644:	4b09      	ldr	r3, [pc, #36]	; (801366c <tcp_parseopt+0xe0>)
 8013646:	881b      	ldrh	r3, [r3, #0]
 8013648:	429a      	cmp	r2, r3
 801364a:	d3b5      	bcc.n	80135b8 <tcp_parseopt+0x2c>
 801364c:	e004      	b.n	8013658 <tcp_parseopt+0xcc>
          return;
 801364e:	bf00      	nop
 8013650:	e002      	b.n	8013658 <tcp_parseopt+0xcc>
            return;
 8013652:	bf00      	nop
 8013654:	e000      	b.n	8013658 <tcp_parseopt+0xcc>
            return;
 8013656:	bf00      	nop
      }
    }
  }
}
 8013658:	3710      	adds	r7, #16
 801365a:	46bd      	mov	sp, r7
 801365c:	bd80      	pop	{r7, pc}
 801365e:	bf00      	nop
 8013660:	0801f260 	.word	0x0801f260
 8013664:	0801f6c4 	.word	0x0801f6c4
 8013668:	0801f2ac 	.word	0x0801f2ac
 801366c:	20008818 	.word	0x20008818
 8013670:	20008820 	.word	0x20008820

08013674 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8013674:	b480      	push	{r7}
 8013676:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013678:	4b05      	ldr	r3, [pc, #20]	; (8013690 <tcp_trigger_input_pcb_close+0x1c>)
 801367a:	781b      	ldrb	r3, [r3, #0]
 801367c:	f043 0310 	orr.w	r3, r3, #16
 8013680:	b2da      	uxtb	r2, r3
 8013682:	4b03      	ldr	r3, [pc, #12]	; (8013690 <tcp_trigger_input_pcb_close+0x1c>)
 8013684:	701a      	strb	r2, [r3, #0]
}
 8013686:	bf00      	nop
 8013688:	46bd      	mov	sp, r7
 801368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801368e:	4770      	bx	lr
 8013690:	20008831 	.word	0x20008831

08013694 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b084      	sub	sp, #16
 8013698:	af00      	add	r7, sp, #0
 801369a:	60f8      	str	r0, [r7, #12]
 801369c:	60b9      	str	r1, [r7, #8]
 801369e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d00a      	beq.n	80136bc <tcp_route+0x28>
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	7a1b      	ldrb	r3, [r3, #8]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d006      	beq.n	80136bc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	7a1b      	ldrb	r3, [r3, #8]
 80136b2:	4618      	mov	r0, r3
 80136b4:	f7fb f8a0 	bl	800e7f8 <netif_get_by_index>
 80136b8:	4603      	mov	r3, r0
 80136ba:	e003      	b.n	80136c4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80136bc:	6878      	ldr	r0, [r7, #4]
 80136be:	f003 feb5 	bl	801742c <ip4_route>
 80136c2:	4603      	mov	r3, r0
  }
}
 80136c4:	4618      	mov	r0, r3
 80136c6:	3710      	adds	r7, #16
 80136c8:	46bd      	mov	sp, r7
 80136ca:	bd80      	pop	{r7, pc}

080136cc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80136cc:	b590      	push	{r4, r7, lr}
 80136ce:	b087      	sub	sp, #28
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	60f8      	str	r0, [r7, #12]
 80136d4:	60b9      	str	r1, [r7, #8]
 80136d6:	603b      	str	r3, [r7, #0]
 80136d8:	4613      	mov	r3, r2
 80136da:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d105      	bne.n	80136ee <tcp_create_segment+0x22>
 80136e2:	4b44      	ldr	r3, [pc, #272]	; (80137f4 <tcp_create_segment+0x128>)
 80136e4:	22a3      	movs	r2, #163	; 0xa3
 80136e6:	4944      	ldr	r1, [pc, #272]	; (80137f8 <tcp_create_segment+0x12c>)
 80136e8:	4844      	ldr	r0, [pc, #272]	; (80137fc <tcp_create_segment+0x130>)
 80136ea:	f006 f8e9 	bl	80198c0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80136ee:	68bb      	ldr	r3, [r7, #8]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d105      	bne.n	8013700 <tcp_create_segment+0x34>
 80136f4:	4b3f      	ldr	r3, [pc, #252]	; (80137f4 <tcp_create_segment+0x128>)
 80136f6:	22a4      	movs	r2, #164	; 0xa4
 80136f8:	4941      	ldr	r1, [pc, #260]	; (8013800 <tcp_create_segment+0x134>)
 80136fa:	4840      	ldr	r0, [pc, #256]	; (80137fc <tcp_create_segment+0x130>)
 80136fc:	f006 f8e0 	bl	80198c0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013700:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013704:	009b      	lsls	r3, r3, #2
 8013706:	b2db      	uxtb	r3, r3
 8013708:	f003 0304 	and.w	r3, r3, #4
 801370c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801370e:	2003      	movs	r0, #3
 8013710:	f7fa fd82 	bl	800e218 <memp_malloc>
 8013714:	6138      	str	r0, [r7, #16]
 8013716:	693b      	ldr	r3, [r7, #16]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d104      	bne.n	8013726 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801371c:	68b8      	ldr	r0, [r7, #8]
 801371e:	f7fb fbf5 	bl	800ef0c <pbuf_free>
    return NULL;
 8013722:	2300      	movs	r3, #0
 8013724:	e061      	b.n	80137ea <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8013726:	693b      	ldr	r3, [r7, #16]
 8013728:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801372c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801372e:	693b      	ldr	r3, [r7, #16]
 8013730:	2200      	movs	r2, #0
 8013732:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013734:	693b      	ldr	r3, [r7, #16]
 8013736:	68ba      	ldr	r2, [r7, #8]
 8013738:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801373a:	68bb      	ldr	r3, [r7, #8]
 801373c:	891a      	ldrh	r2, [r3, #8]
 801373e:	7dfb      	ldrb	r3, [r7, #23]
 8013740:	b29b      	uxth	r3, r3
 8013742:	429a      	cmp	r2, r3
 8013744:	d205      	bcs.n	8013752 <tcp_create_segment+0x86>
 8013746:	4b2b      	ldr	r3, [pc, #172]	; (80137f4 <tcp_create_segment+0x128>)
 8013748:	22b0      	movs	r2, #176	; 0xb0
 801374a:	492e      	ldr	r1, [pc, #184]	; (8013804 <tcp_create_segment+0x138>)
 801374c:	482b      	ldr	r0, [pc, #172]	; (80137fc <tcp_create_segment+0x130>)
 801374e:	f006 f8b7 	bl	80198c0 <iprintf>
  seg->len = p->tot_len - optlen;
 8013752:	68bb      	ldr	r3, [r7, #8]
 8013754:	891a      	ldrh	r2, [r3, #8]
 8013756:	7dfb      	ldrb	r3, [r7, #23]
 8013758:	b29b      	uxth	r3, r3
 801375a:	1ad3      	subs	r3, r2, r3
 801375c:	b29a      	uxth	r2, r3
 801375e:	693b      	ldr	r3, [r7, #16]
 8013760:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013762:	2114      	movs	r1, #20
 8013764:	68b8      	ldr	r0, [r7, #8]
 8013766:	f7fb fb3b 	bl	800ede0 <pbuf_add_header>
 801376a:	4603      	mov	r3, r0
 801376c:	2b00      	cmp	r3, #0
 801376e:	d004      	beq.n	801377a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013770:	6938      	ldr	r0, [r7, #16]
 8013772:	f7fd f807 	bl	8010784 <tcp_seg_free>
    return NULL;
 8013776:	2300      	movs	r3, #0
 8013778:	e037      	b.n	80137ea <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801377a:	693b      	ldr	r3, [r7, #16]
 801377c:	685b      	ldr	r3, [r3, #4]
 801377e:	685a      	ldr	r2, [r3, #4]
 8013780:	693b      	ldr	r3, [r7, #16]
 8013782:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	8ada      	ldrh	r2, [r3, #22]
 8013788:	693b      	ldr	r3, [r7, #16]
 801378a:	68dc      	ldr	r4, [r3, #12]
 801378c:	4610      	mov	r0, r2
 801378e:	f7fa f88d 	bl	800d8ac <lwip_htons>
 8013792:	4603      	mov	r3, r0
 8013794:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	8b1a      	ldrh	r2, [r3, #24]
 801379a:	693b      	ldr	r3, [r7, #16]
 801379c:	68dc      	ldr	r4, [r3, #12]
 801379e:	4610      	mov	r0, r2
 80137a0:	f7fa f884 	bl	800d8ac <lwip_htons>
 80137a4:	4603      	mov	r3, r0
 80137a6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80137a8:	693b      	ldr	r3, [r7, #16]
 80137aa:	68dc      	ldr	r4, [r3, #12]
 80137ac:	6838      	ldr	r0, [r7, #0]
 80137ae:	f7fa f892 	bl	800d8d6 <lwip_htonl>
 80137b2:	4603      	mov	r3, r0
 80137b4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80137b6:	7dfb      	ldrb	r3, [r7, #23]
 80137b8:	089b      	lsrs	r3, r3, #2
 80137ba:	b2db      	uxtb	r3, r3
 80137bc:	b29b      	uxth	r3, r3
 80137be:	3305      	adds	r3, #5
 80137c0:	b29b      	uxth	r3, r3
 80137c2:	031b      	lsls	r3, r3, #12
 80137c4:	b29a      	uxth	r2, r3
 80137c6:	79fb      	ldrb	r3, [r7, #7]
 80137c8:	b29b      	uxth	r3, r3
 80137ca:	4313      	orrs	r3, r2
 80137cc:	b29a      	uxth	r2, r3
 80137ce:	693b      	ldr	r3, [r7, #16]
 80137d0:	68dc      	ldr	r4, [r3, #12]
 80137d2:	4610      	mov	r0, r2
 80137d4:	f7fa f86a 	bl	800d8ac <lwip_htons>
 80137d8:	4603      	mov	r3, r0
 80137da:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80137dc:	693b      	ldr	r3, [r7, #16]
 80137de:	68db      	ldr	r3, [r3, #12]
 80137e0:	2200      	movs	r2, #0
 80137e2:	749a      	strb	r2, [r3, #18]
 80137e4:	2200      	movs	r2, #0
 80137e6:	74da      	strb	r2, [r3, #19]
  return seg;
 80137e8:	693b      	ldr	r3, [r7, #16]
}
 80137ea:	4618      	mov	r0, r3
 80137ec:	371c      	adds	r7, #28
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bd90      	pop	{r4, r7, pc}
 80137f2:	bf00      	nop
 80137f4:	0801f6e0 	.word	0x0801f6e0
 80137f8:	0801f714 	.word	0x0801f714
 80137fc:	0801f734 	.word	0x0801f734
 8013800:	0801f75c 	.word	0x0801f75c
 8013804:	0801f780 	.word	0x0801f780

08013808 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b086      	sub	sp, #24
 801380c:	af00      	add	r7, sp, #0
 801380e:	607b      	str	r3, [r7, #4]
 8013810:	4603      	mov	r3, r0
 8013812:	73fb      	strb	r3, [r7, #15]
 8013814:	460b      	mov	r3, r1
 8013816:	81bb      	strh	r3, [r7, #12]
 8013818:	4613      	mov	r3, r2
 801381a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801381c:	89bb      	ldrh	r3, [r7, #12]
 801381e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d105      	bne.n	8013832 <tcp_pbuf_prealloc+0x2a>
 8013826:	4b30      	ldr	r3, [pc, #192]	; (80138e8 <tcp_pbuf_prealloc+0xe0>)
 8013828:	22e8      	movs	r2, #232	; 0xe8
 801382a:	4930      	ldr	r1, [pc, #192]	; (80138ec <tcp_pbuf_prealloc+0xe4>)
 801382c:	4830      	ldr	r0, [pc, #192]	; (80138f0 <tcp_pbuf_prealloc+0xe8>)
 801382e:	f006 f847 	bl	80198c0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8013832:	6a3b      	ldr	r3, [r7, #32]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d105      	bne.n	8013844 <tcp_pbuf_prealloc+0x3c>
 8013838:	4b2b      	ldr	r3, [pc, #172]	; (80138e8 <tcp_pbuf_prealloc+0xe0>)
 801383a:	22e9      	movs	r2, #233	; 0xe9
 801383c:	492d      	ldr	r1, [pc, #180]	; (80138f4 <tcp_pbuf_prealloc+0xec>)
 801383e:	482c      	ldr	r0, [pc, #176]	; (80138f0 <tcp_pbuf_prealloc+0xe8>)
 8013840:	f006 f83e 	bl	80198c0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8013844:	89ba      	ldrh	r2, [r7, #12]
 8013846:	897b      	ldrh	r3, [r7, #10]
 8013848:	429a      	cmp	r2, r3
 801384a:	d221      	bcs.n	8013890 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801384c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013850:	f003 0302 	and.w	r3, r3, #2
 8013854:	2b00      	cmp	r3, #0
 8013856:	d111      	bne.n	801387c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8013858:	6a3b      	ldr	r3, [r7, #32]
 801385a:	8b5b      	ldrh	r3, [r3, #26]
 801385c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013860:	2b00      	cmp	r3, #0
 8013862:	d115      	bne.n	8013890 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8013864:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013868:	2b00      	cmp	r3, #0
 801386a:	d007      	beq.n	801387c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801386c:	6a3b      	ldr	r3, [r7, #32]
 801386e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8013870:	2b00      	cmp	r3, #0
 8013872:	d103      	bne.n	801387c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8013874:	6a3b      	ldr	r3, [r7, #32]
 8013876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8013878:	2b00      	cmp	r3, #0
 801387a:	d009      	beq.n	8013890 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801387c:	89bb      	ldrh	r3, [r7, #12]
 801387e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8013882:	f023 0203 	bic.w	r2, r3, #3
 8013886:	897b      	ldrh	r3, [r7, #10]
 8013888:	4293      	cmp	r3, r2
 801388a:	bf28      	it	cs
 801388c:	4613      	movcs	r3, r2
 801388e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013890:	8af9      	ldrh	r1, [r7, #22]
 8013892:	7bfb      	ldrb	r3, [r7, #15]
 8013894:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013898:	4618      	mov	r0, r3
 801389a:	f7fb f857 	bl	800e94c <pbuf_alloc>
 801389e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80138a0:	693b      	ldr	r3, [r7, #16]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d101      	bne.n	80138aa <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80138a6:	2300      	movs	r3, #0
 80138a8:	e019      	b.n	80138de <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80138aa:	693b      	ldr	r3, [r7, #16]
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d006      	beq.n	80138c0 <tcp_pbuf_prealloc+0xb8>
 80138b2:	4b0d      	ldr	r3, [pc, #52]	; (80138e8 <tcp_pbuf_prealloc+0xe0>)
 80138b4:	f240 120b 	movw	r2, #267	; 0x10b
 80138b8:	490f      	ldr	r1, [pc, #60]	; (80138f8 <tcp_pbuf_prealloc+0xf0>)
 80138ba:	480d      	ldr	r0, [pc, #52]	; (80138f0 <tcp_pbuf_prealloc+0xe8>)
 80138bc:	f006 f800 	bl	80198c0 <iprintf>
  *oversize = p->len - length;
 80138c0:	693b      	ldr	r3, [r7, #16]
 80138c2:	895a      	ldrh	r2, [r3, #10]
 80138c4:	89bb      	ldrh	r3, [r7, #12]
 80138c6:	1ad3      	subs	r3, r2, r3
 80138c8:	b29a      	uxth	r2, r3
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80138ce:	693b      	ldr	r3, [r7, #16]
 80138d0:	89ba      	ldrh	r2, [r7, #12]
 80138d2:	811a      	strh	r2, [r3, #8]
 80138d4:	693b      	ldr	r3, [r7, #16]
 80138d6:	891a      	ldrh	r2, [r3, #8]
 80138d8:	693b      	ldr	r3, [r7, #16]
 80138da:	815a      	strh	r2, [r3, #10]
  return p;
 80138dc:	693b      	ldr	r3, [r7, #16]
}
 80138de:	4618      	mov	r0, r3
 80138e0:	3718      	adds	r7, #24
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd80      	pop	{r7, pc}
 80138e6:	bf00      	nop
 80138e8:	0801f6e0 	.word	0x0801f6e0
 80138ec:	0801f798 	.word	0x0801f798
 80138f0:	0801f734 	.word	0x0801f734
 80138f4:	0801f7bc 	.word	0x0801f7bc
 80138f8:	0801f7dc 	.word	0x0801f7dc

080138fc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b082      	sub	sp, #8
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
 8013904:	460b      	mov	r3, r1
 8013906:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d106      	bne.n	801391c <tcp_write_checks+0x20>
 801390e:	4b33      	ldr	r3, [pc, #204]	; (80139dc <tcp_write_checks+0xe0>)
 8013910:	f240 1233 	movw	r2, #307	; 0x133
 8013914:	4932      	ldr	r1, [pc, #200]	; (80139e0 <tcp_write_checks+0xe4>)
 8013916:	4833      	ldr	r0, [pc, #204]	; (80139e4 <tcp_write_checks+0xe8>)
 8013918:	f005 ffd2 	bl	80198c0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	7d1b      	ldrb	r3, [r3, #20]
 8013920:	2b04      	cmp	r3, #4
 8013922:	d00e      	beq.n	8013942 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013928:	2b07      	cmp	r3, #7
 801392a:	d00a      	beq.n	8013942 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013930:	2b02      	cmp	r3, #2
 8013932:	d006      	beq.n	8013942 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013938:	2b03      	cmp	r3, #3
 801393a:	d002      	beq.n	8013942 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801393c:	f06f 030a 	mvn.w	r3, #10
 8013940:	e048      	b.n	80139d4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8013942:	887b      	ldrh	r3, [r7, #2]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d101      	bne.n	801394c <tcp_write_checks+0x50>
    return ERR_OK;
 8013948:	2300      	movs	r3, #0
 801394a:	e043      	b.n	80139d4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013952:	887a      	ldrh	r2, [r7, #2]
 8013954:	429a      	cmp	r2, r3
 8013956:	d909      	bls.n	801396c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	8b5b      	ldrh	r3, [r3, #26]
 801395c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013960:	b29a      	uxth	r2, r3
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013966:	f04f 33ff 	mov.w	r3, #4294967295
 801396a:	e033      	b.n	80139d4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013972:	2b08      	cmp	r3, #8
 8013974:	d909      	bls.n	801398a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	8b5b      	ldrh	r3, [r3, #26]
 801397a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801397e:	b29a      	uxth	r2, r3
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013984:	f04f 33ff 	mov.w	r3, #4294967295
 8013988:	e024      	b.n	80139d4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013990:	2b00      	cmp	r3, #0
 8013992:	d00f      	beq.n	80139b4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013998:	2b00      	cmp	r3, #0
 801399a:	d11a      	bne.n	80139d2 <tcp_write_checks+0xd6>
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d116      	bne.n	80139d2 <tcp_write_checks+0xd6>
 80139a4:	4b0d      	ldr	r3, [pc, #52]	; (80139dc <tcp_write_checks+0xe0>)
 80139a6:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80139aa:	490f      	ldr	r1, [pc, #60]	; (80139e8 <tcp_write_checks+0xec>)
 80139ac:	480d      	ldr	r0, [pc, #52]	; (80139e4 <tcp_write_checks+0xe8>)
 80139ae:	f005 ff87 	bl	80198c0 <iprintf>
 80139b2:	e00e      	b.n	80139d2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d103      	bne.n	80139c4 <tcp_write_checks+0xc8>
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d006      	beq.n	80139d2 <tcp_write_checks+0xd6>
 80139c4:	4b05      	ldr	r3, [pc, #20]	; (80139dc <tcp_write_checks+0xe0>)
 80139c6:	f240 1259 	movw	r2, #345	; 0x159
 80139ca:	4908      	ldr	r1, [pc, #32]	; (80139ec <tcp_write_checks+0xf0>)
 80139cc:	4805      	ldr	r0, [pc, #20]	; (80139e4 <tcp_write_checks+0xe8>)
 80139ce:	f005 ff77 	bl	80198c0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80139d2:	2300      	movs	r3, #0
}
 80139d4:	4618      	mov	r0, r3
 80139d6:	3708      	adds	r7, #8
 80139d8:	46bd      	mov	sp, r7
 80139da:	bd80      	pop	{r7, pc}
 80139dc:	0801f6e0 	.word	0x0801f6e0
 80139e0:	0801f7f0 	.word	0x0801f7f0
 80139e4:	0801f734 	.word	0x0801f734
 80139e8:	0801f810 	.word	0x0801f810
 80139ec:	0801f84c 	.word	0x0801f84c

080139f0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80139f0:	b590      	push	{r4, r7, lr}
 80139f2:	b09b      	sub	sp, #108	; 0x6c
 80139f4:	af04      	add	r7, sp, #16
 80139f6:	60f8      	str	r0, [r7, #12]
 80139f8:	60b9      	str	r1, [r7, #8]
 80139fa:	4611      	mov	r1, r2
 80139fc:	461a      	mov	r2, r3
 80139fe:	460b      	mov	r3, r1
 8013a00:	80fb      	strh	r3, [r7, #6]
 8013a02:	4613      	mov	r3, r2
 8013a04:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8013a06:	2300      	movs	r3, #0
 8013a08:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	653b      	str	r3, [r7, #80]	; 0x50
 8013a0e:	2300      	movs	r3, #0
 8013a10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013a12:	2300      	movs	r3, #0
 8013a14:	64bb      	str	r3, [r7, #72]	; 0x48
 8013a16:	2300      	movs	r3, #0
 8013a18:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013a20:	2300      	movs	r3, #0
 8013a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8013a26:	2300      	movs	r3, #0
 8013a28:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013a2e:	2300      	movs	r3, #0
 8013a30:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d109      	bne.n	8013a4c <tcp_write+0x5c>
 8013a38:	4ba5      	ldr	r3, [pc, #660]	; (8013cd0 <tcp_write+0x2e0>)
 8013a3a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013a3e:	49a5      	ldr	r1, [pc, #660]	; (8013cd4 <tcp_write+0x2e4>)
 8013a40:	48a5      	ldr	r0, [pc, #660]	; (8013cd8 <tcp_write+0x2e8>)
 8013a42:	f005 ff3d 	bl	80198c0 <iprintf>
 8013a46:	f06f 030f 	mvn.w	r3, #15
 8013a4a:	e32c      	b.n	80140a6 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013a52:	085b      	lsrs	r3, r3, #1
 8013a54:	b29a      	uxth	r2, r3
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013a5a:	4293      	cmp	r3, r2
 8013a5c:	bf28      	it	cs
 8013a5e:	4613      	movcs	r3, r2
 8013a60:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8013a62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d102      	bne.n	8013a6e <tcp_write+0x7e>
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013a6c:	e000      	b.n	8013a70 <tcp_write+0x80>
 8013a6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013a70:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8013a72:	68bb      	ldr	r3, [r7, #8]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d109      	bne.n	8013a8c <tcp_write+0x9c>
 8013a78:	4b95      	ldr	r3, [pc, #596]	; (8013cd0 <tcp_write+0x2e0>)
 8013a7a:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8013a7e:	4997      	ldr	r1, [pc, #604]	; (8013cdc <tcp_write+0x2ec>)
 8013a80:	4895      	ldr	r0, [pc, #596]	; (8013cd8 <tcp_write+0x2e8>)
 8013a82:	f005 ff1d 	bl	80198c0 <iprintf>
 8013a86:	f06f 030f 	mvn.w	r3, #15
 8013a8a:	e30c      	b.n	80140a6 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013a8c:	88fb      	ldrh	r3, [r7, #6]
 8013a8e:	4619      	mov	r1, r3
 8013a90:	68f8      	ldr	r0, [r7, #12]
 8013a92:	f7ff ff33 	bl	80138fc <tcp_write_checks>
 8013a96:	4603      	mov	r3, r0
 8013a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8013a9c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d002      	beq.n	8013aaa <tcp_write+0xba>
    return err;
 8013aa4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013aa8:	e2fd      	b.n	80140a6 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ab0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	f000 80f7 	beq.w	8013cb2 <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ac8:	653b      	str	r3, [r7, #80]	; 0x50
 8013aca:	e002      	b.n	8013ad2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8013acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d1f8      	bne.n	8013acc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8013ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013adc:	7a9b      	ldrb	r3, [r3, #10]
 8013ade:	009b      	lsls	r3, r3, #2
 8013ae0:	b29b      	uxth	r3, r3
 8013ae2:	f003 0304 	and.w	r3, r3, #4
 8013ae6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013ae8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013aec:	891b      	ldrh	r3, [r3, #8]
 8013aee:	4619      	mov	r1, r3
 8013af0:	8c3b      	ldrh	r3, [r7, #32]
 8013af2:	440b      	add	r3, r1
 8013af4:	429a      	cmp	r2, r3
 8013af6:	da06      	bge.n	8013b06 <tcp_write+0x116>
 8013af8:	4b75      	ldr	r3, [pc, #468]	; (8013cd0 <tcp_write+0x2e0>)
 8013afa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013afe:	4978      	ldr	r1, [pc, #480]	; (8013ce0 <tcp_write+0x2f0>)
 8013b00:	4875      	ldr	r0, [pc, #468]	; (8013cd8 <tcp_write+0x2e8>)
 8013b02:	f005 fedd 	bl	80198c0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8013b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b08:	891a      	ldrh	r2, [r3, #8]
 8013b0a:	8c3b      	ldrh	r3, [r7, #32]
 8013b0c:	4413      	add	r3, r2
 8013b0e:	b29b      	uxth	r3, r3
 8013b10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013b12:	1ad3      	subs	r3, r2, r3
 8013b14:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013b1c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013b1e:	8a7b      	ldrh	r3, [r7, #18]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d027      	beq.n	8013b74 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8013b24:	8a7b      	ldrh	r3, [r7, #18]
 8013b26:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013b28:	429a      	cmp	r2, r3
 8013b2a:	d206      	bcs.n	8013b3a <tcp_write+0x14a>
 8013b2c:	4b68      	ldr	r3, [pc, #416]	; (8013cd0 <tcp_write+0x2e0>)
 8013b2e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8013b32:	496c      	ldr	r1, [pc, #432]	; (8013ce4 <tcp_write+0x2f4>)
 8013b34:	4868      	ldr	r0, [pc, #416]	; (8013cd8 <tcp_write+0x2e8>)
 8013b36:	f005 fec3 	bl	80198c0 <iprintf>
      seg = last_unsent;
 8013b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013b3e:	8a7b      	ldrh	r3, [r7, #18]
 8013b40:	88fa      	ldrh	r2, [r7, #6]
 8013b42:	429a      	cmp	r2, r3
 8013b44:	d901      	bls.n	8013b4a <tcp_write+0x15a>
 8013b46:	8a7b      	ldrh	r3, [r7, #18]
 8013b48:	e000      	b.n	8013b4c <tcp_write+0x15c>
 8013b4a:	88fb      	ldrh	r3, [r7, #6]
 8013b4c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013b4e:	4293      	cmp	r3, r2
 8013b50:	bfa8      	it	ge
 8013b52:	4613      	movge	r3, r2
 8013b54:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8013b56:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013b5a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013b5c:	4413      	add	r3, r2
 8013b5e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8013b62:	8a7a      	ldrh	r2, [r7, #18]
 8013b64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013b66:	1ad3      	subs	r3, r2, r3
 8013b68:	b29b      	uxth	r3, r3
 8013b6a:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8013b6c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013b6e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013b70:	1ad3      	subs	r3, r2, r3
 8013b72:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8013b74:	8a7b      	ldrh	r3, [r7, #18]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d00b      	beq.n	8013b92 <tcp_write+0x1a2>
 8013b7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013b7e:	88fb      	ldrh	r3, [r7, #6]
 8013b80:	429a      	cmp	r2, r3
 8013b82:	d006      	beq.n	8013b92 <tcp_write+0x1a2>
 8013b84:	4b52      	ldr	r3, [pc, #328]	; (8013cd0 <tcp_write+0x2e0>)
 8013b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013b8a:	4957      	ldr	r1, [pc, #348]	; (8013ce8 <tcp_write+0x2f8>)
 8013b8c:	4852      	ldr	r0, [pc, #328]	; (8013cd8 <tcp_write+0x2e8>)
 8013b8e:	f005 fe97 	bl	80198c0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013b92:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013b96:	88fb      	ldrh	r3, [r7, #6]
 8013b98:	429a      	cmp	r2, r3
 8013b9a:	f080 8168 	bcs.w	8013e6e <tcp_write+0x47e>
 8013b9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	f000 8164 	beq.w	8013e6e <tcp_write+0x47e>
 8013ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ba8:	891b      	ldrh	r3, [r3, #8]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	f000 815f 	beq.w	8013e6e <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013bb0:	88fa      	ldrh	r2, [r7, #6]
 8013bb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013bb6:	1ad2      	subs	r2, r2, r3
 8013bb8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013bba:	4293      	cmp	r3, r2
 8013bbc:	bfa8      	it	ge
 8013bbe:	4613      	movge	r3, r2
 8013bc0:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013bc4:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013bc6:	797b      	ldrb	r3, [r7, #5]
 8013bc8:	f003 0301 	and.w	r3, r3, #1
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d027      	beq.n	8013c20 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013bd0:	f107 0012 	add.w	r0, r7, #18
 8013bd4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013bd6:	8bf9      	ldrh	r1, [r7, #30]
 8013bd8:	2301      	movs	r3, #1
 8013bda:	9302      	str	r3, [sp, #8]
 8013bdc:	797b      	ldrb	r3, [r7, #5]
 8013bde:	9301      	str	r3, [sp, #4]
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	9300      	str	r3, [sp, #0]
 8013be4:	4603      	mov	r3, r0
 8013be6:	2000      	movs	r0, #0
 8013be8:	f7ff fe0e 	bl	8013808 <tcp_pbuf_prealloc>
 8013bec:	6578      	str	r0, [r7, #84]	; 0x54
 8013bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	f000 8226 	beq.w	8014042 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8013bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013bf8:	6858      	ldr	r0, [r3, #4]
 8013bfa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013bfe:	68ba      	ldr	r2, [r7, #8]
 8013c00:	4413      	add	r3, r2
 8013c02:	8bfa      	ldrh	r2, [r7, #30]
 8013c04:	4619      	mov	r1, r3
 8013c06:	f005 f81b 	bl	8018c40 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013c0a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013c0c:	f7fb fa0c 	bl	800f028 <pbuf_clen>
 8013c10:	4603      	mov	r3, r0
 8013c12:	461a      	mov	r2, r3
 8013c14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013c18:	4413      	add	r3, r2
 8013c1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013c1e:	e041      	b.n	8013ca4 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c22:	685b      	ldr	r3, [r3, #4]
 8013c24:	637b      	str	r3, [r7, #52]	; 0x34
 8013c26:	e002      	b.n	8013c2e <tcp_write+0x23e>
 8013c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8013c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d1f8      	bne.n	8013c28 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c38:	7b1b      	ldrb	r3, [r3, #12]
 8013c3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d115      	bne.n	8013c6e <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c44:	685b      	ldr	r3, [r3, #4]
 8013c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c48:	8952      	ldrh	r2, [r2, #10]
 8013c4a:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013c4c:	68ba      	ldr	r2, [r7, #8]
 8013c4e:	429a      	cmp	r2, r3
 8013c50:	d10d      	bne.n	8013c6e <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013c52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d006      	beq.n	8013c68 <tcp_write+0x278>
 8013c5a:	4b1d      	ldr	r3, [pc, #116]	; (8013cd0 <tcp_write+0x2e0>)
 8013c5c:	f240 2231 	movw	r2, #561	; 0x231
 8013c60:	4922      	ldr	r1, [pc, #136]	; (8013cec <tcp_write+0x2fc>)
 8013c62:	481d      	ldr	r0, [pc, #116]	; (8013cd8 <tcp_write+0x2e8>)
 8013c64:	f005 fe2c 	bl	80198c0 <iprintf>
          extendlen = seglen;
 8013c68:	8bfb      	ldrh	r3, [r7, #30]
 8013c6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8013c6c:	e01a      	b.n	8013ca4 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8013c6e:	8bfb      	ldrh	r3, [r7, #30]
 8013c70:	2201      	movs	r2, #1
 8013c72:	4619      	mov	r1, r3
 8013c74:	2000      	movs	r0, #0
 8013c76:	f7fa fe69 	bl	800e94c <pbuf_alloc>
 8013c7a:	6578      	str	r0, [r7, #84]	; 0x54
 8013c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	f000 81e1 	beq.w	8014046 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8013c84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013c88:	68ba      	ldr	r2, [r7, #8]
 8013c8a:	441a      	add	r2, r3
 8013c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c8e:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8013c90:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013c92:	f7fb f9c9 	bl	800f028 <pbuf_clen>
 8013c96:	4603      	mov	r3, r0
 8013c98:	461a      	mov	r2, r3
 8013c9a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013c9e:	4413      	add	r3, r2
 8013ca0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8013ca4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013ca8:	8bfb      	ldrh	r3, [r7, #30]
 8013caa:	4413      	add	r3, r2
 8013cac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8013cb0:	e0dd      	b.n	8013e6e <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	f000 80d8 	beq.w	8013e6e <tcp_write+0x47e>
 8013cbe:	4b04      	ldr	r3, [pc, #16]	; (8013cd0 <tcp_write+0x2e0>)
 8013cc0:	f240 224b 	movw	r2, #587	; 0x24b
 8013cc4:	490a      	ldr	r1, [pc, #40]	; (8013cf0 <tcp_write+0x300>)
 8013cc6:	4804      	ldr	r0, [pc, #16]	; (8013cd8 <tcp_write+0x2e8>)
 8013cc8:	f005 fdfa 	bl	80198c0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8013ccc:	e0cf      	b.n	8013e6e <tcp_write+0x47e>
 8013cce:	bf00      	nop
 8013cd0:	0801f6e0 	.word	0x0801f6e0
 8013cd4:	0801f880 	.word	0x0801f880
 8013cd8:	0801f734 	.word	0x0801f734
 8013cdc:	0801f898 	.word	0x0801f898
 8013ce0:	0801f8cc 	.word	0x0801f8cc
 8013ce4:	0801f8e4 	.word	0x0801f8e4
 8013ce8:	0801f904 	.word	0x0801f904
 8013cec:	0801f924 	.word	0x0801f924
 8013cf0:	0801f950 	.word	0x0801f950
    struct pbuf *p;
    u16_t left = len - pos;
 8013cf4:	88fa      	ldrh	r2, [r7, #6]
 8013cf6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013cfa:	1ad3      	subs	r3, r2, r3
 8013cfc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8013cfe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013d02:	b29b      	uxth	r3, r3
 8013d04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013d06:	1ad3      	subs	r3, r2, r3
 8013d08:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8013d0a:	8b7a      	ldrh	r2, [r7, #26]
 8013d0c:	8bbb      	ldrh	r3, [r7, #28]
 8013d0e:	4293      	cmp	r3, r2
 8013d10:	bf28      	it	cs
 8013d12:	4613      	movcs	r3, r2
 8013d14:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013d16:	797b      	ldrb	r3, [r7, #5]
 8013d18:	f003 0301 	and.w	r3, r3, #1
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d036      	beq.n	8013d8e <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013d20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013d24:	b29a      	uxth	r2, r3
 8013d26:	8b3b      	ldrh	r3, [r7, #24]
 8013d28:	4413      	add	r3, r2
 8013d2a:	b299      	uxth	r1, r3
 8013d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	bf0c      	ite	eq
 8013d32:	2301      	moveq	r3, #1
 8013d34:	2300      	movne	r3, #0
 8013d36:	b2db      	uxtb	r3, r3
 8013d38:	f107 0012 	add.w	r0, r7, #18
 8013d3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013d3e:	9302      	str	r3, [sp, #8]
 8013d40:	797b      	ldrb	r3, [r7, #5]
 8013d42:	9301      	str	r3, [sp, #4]
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	9300      	str	r3, [sp, #0]
 8013d48:	4603      	mov	r3, r0
 8013d4a:	2036      	movs	r0, #54	; 0x36
 8013d4c:	f7ff fd5c 	bl	8013808 <tcp_pbuf_prealloc>
 8013d50:	6338      	str	r0, [r7, #48]	; 0x30
 8013d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	f000 8178 	beq.w	801404a <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8013d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d5c:	895b      	ldrh	r3, [r3, #10]
 8013d5e:	8b3a      	ldrh	r2, [r7, #24]
 8013d60:	429a      	cmp	r2, r3
 8013d62:	d906      	bls.n	8013d72 <tcp_write+0x382>
 8013d64:	4b8c      	ldr	r3, [pc, #560]	; (8013f98 <tcp_write+0x5a8>)
 8013d66:	f240 2267 	movw	r2, #615	; 0x267
 8013d6a:	498c      	ldr	r1, [pc, #560]	; (8013f9c <tcp_write+0x5ac>)
 8013d6c:	488c      	ldr	r0, [pc, #560]	; (8013fa0 <tcp_write+0x5b0>)
 8013d6e:	f005 fda7 	bl	80198c0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8013d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d74:	685a      	ldr	r2, [r3, #4]
 8013d76:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013d7a:	18d0      	adds	r0, r2, r3
 8013d7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013d80:	68ba      	ldr	r2, [r7, #8]
 8013d82:	4413      	add	r3, r2
 8013d84:	8b3a      	ldrh	r2, [r7, #24]
 8013d86:	4619      	mov	r1, r3
 8013d88:	f004 ff5a 	bl	8018c40 <memcpy>
 8013d8c:	e02f      	b.n	8013dee <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8013d8e:	8a7b      	ldrh	r3, [r7, #18]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d006      	beq.n	8013da2 <tcp_write+0x3b2>
 8013d94:	4b80      	ldr	r3, [pc, #512]	; (8013f98 <tcp_write+0x5a8>)
 8013d96:	f240 2271 	movw	r2, #625	; 0x271
 8013d9a:	4982      	ldr	r1, [pc, #520]	; (8013fa4 <tcp_write+0x5b4>)
 8013d9c:	4880      	ldr	r0, [pc, #512]	; (8013fa0 <tcp_write+0x5b0>)
 8013d9e:	f005 fd8f 	bl	80198c0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8013da2:	8b3b      	ldrh	r3, [r7, #24]
 8013da4:	2201      	movs	r2, #1
 8013da6:	4619      	mov	r1, r3
 8013da8:	2036      	movs	r0, #54	; 0x36
 8013daa:	f7fa fdcf 	bl	800e94c <pbuf_alloc>
 8013dae:	6178      	str	r0, [r7, #20]
 8013db0:	697b      	ldr	r3, [r7, #20]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	f000 814b 	beq.w	801404e <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8013db8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013dbc:	68ba      	ldr	r2, [r7, #8]
 8013dbe:	441a      	add	r2, r3
 8013dc0:	697b      	ldr	r3, [r7, #20]
 8013dc2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013dc4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013dc8:	b29b      	uxth	r3, r3
 8013dca:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013dce:	4619      	mov	r1, r3
 8013dd0:	2036      	movs	r0, #54	; 0x36
 8013dd2:	f7fa fdbb 	bl	800e94c <pbuf_alloc>
 8013dd6:	6338      	str	r0, [r7, #48]	; 0x30
 8013dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d103      	bne.n	8013de6 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8013dde:	6978      	ldr	r0, [r7, #20]
 8013de0:	f7fb f894 	bl	800ef0c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013de4:	e136      	b.n	8014054 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8013de6:	6979      	ldr	r1, [r7, #20]
 8013de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013dea:	f7fb f95d 	bl	800f0a8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013dee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013df0:	f7fb f91a 	bl	800f028 <pbuf_clen>
 8013df4:	4603      	mov	r3, r0
 8013df6:	461a      	mov	r2, r3
 8013df8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013dfc:	4413      	add	r3, r2
 8013dfe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013e02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013e06:	2b09      	cmp	r3, #9
 8013e08:	d903      	bls.n	8013e12 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8013e0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e0c:	f7fb f87e 	bl	800ef0c <pbuf_free>
      goto memerr;
 8013e10:	e120      	b.n	8014054 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013e16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013e1a:	441a      	add	r2, r3
 8013e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e20:	9300      	str	r3, [sp, #0]
 8013e22:	4613      	mov	r3, r2
 8013e24:	2200      	movs	r2, #0
 8013e26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013e28:	68f8      	ldr	r0, [r7, #12]
 8013e2a:	f7ff fc4f 	bl	80136cc <tcp_create_segment>
 8013e2e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	f000 810d 	beq.w	8014052 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8013e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d102      	bne.n	8013e44 <tcp_write+0x454>
      queue = seg;
 8013e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e40:	647b      	str	r3, [r7, #68]	; 0x44
 8013e42:	e00c      	b.n	8013e5e <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d106      	bne.n	8013e58 <tcp_write+0x468>
 8013e4a:	4b53      	ldr	r3, [pc, #332]	; (8013f98 <tcp_write+0x5a8>)
 8013e4c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013e50:	4955      	ldr	r1, [pc, #340]	; (8013fa8 <tcp_write+0x5b8>)
 8013e52:	4853      	ldr	r0, [pc, #332]	; (8013fa0 <tcp_write+0x5b0>)
 8013e54:	f005 fd34 	bl	80198c0 <iprintf>
      prev_seg->next = seg;
 8013e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013e5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013e5c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8013e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e60:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8013e62:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013e66:	8b3b      	ldrh	r3, [r7, #24]
 8013e68:	4413      	add	r3, r2
 8013e6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8013e6e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013e72:	88fb      	ldrh	r3, [r7, #6]
 8013e74:	429a      	cmp	r2, r3
 8013e76:	f4ff af3d 	bcc.w	8013cf4 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8013e7a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d02c      	beq.n	8013eda <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8013e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e82:	685b      	ldr	r3, [r3, #4]
 8013e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e86:	e01e      	b.n	8013ec6 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8013e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e8a:	891a      	ldrh	r2, [r3, #8]
 8013e8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013e8e:	4413      	add	r3, r2
 8013e90:	b29a      	uxth	r2, r3
 8013e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e94:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8013e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d110      	bne.n	8013ec0 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8013e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ea0:	685b      	ldr	r3, [r3, #4]
 8013ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ea4:	8952      	ldrh	r2, [r2, #10]
 8013ea6:	4413      	add	r3, r2
 8013ea8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013eaa:	68b9      	ldr	r1, [r7, #8]
 8013eac:	4618      	mov	r0, r3
 8013eae:	f004 fec7 	bl	8018c40 <memcpy>
        p->len += oversize_used;
 8013eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eb4:	895a      	ldrh	r2, [r3, #10]
 8013eb6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013eb8:	4413      	add	r3, r2
 8013eba:	b29a      	uxth	r2, r3
 8013ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ebe:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d1dd      	bne.n	8013e88 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 8013ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ece:	891a      	ldrh	r2, [r3, #8]
 8013ed0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013ed2:	4413      	add	r3, r2
 8013ed4:	b29a      	uxth	r2, r3
 8013ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ed8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8013eda:	8a7a      	ldrh	r2, [r7, #18]
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8013ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d018      	beq.n	8013f1a <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8013ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d106      	bne.n	8013efc <tcp_write+0x50c>
 8013eee:	4b2a      	ldr	r3, [pc, #168]	; (8013f98 <tcp_write+0x5a8>)
 8013ef0:	f240 22e1 	movw	r2, #737	; 0x2e1
 8013ef4:	492d      	ldr	r1, [pc, #180]	; (8013fac <tcp_write+0x5bc>)
 8013ef6:	482a      	ldr	r0, [pc, #168]	; (8013fa0 <tcp_write+0x5b0>)
 8013ef8:	f005 fce2 	bl	80198c0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013efe:	685b      	ldr	r3, [r3, #4]
 8013f00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013f02:	4618      	mov	r0, r3
 8013f04:	f7fb f8d0 	bl	800f0a8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8013f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f0a:	891a      	ldrh	r2, [r3, #8]
 8013f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013f0e:	891b      	ldrh	r3, [r3, #8]
 8013f10:	4413      	add	r3, r2
 8013f12:	b29a      	uxth	r2, r3
 8013f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f16:	811a      	strh	r2, [r3, #8]
 8013f18:	e037      	b.n	8013f8a <tcp_write+0x59a>
  } else if (extendlen > 0) {
 8013f1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d034      	beq.n	8013f8a <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d003      	beq.n	8013f2e <tcp_write+0x53e>
 8013f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f28:	685b      	ldr	r3, [r3, #4]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d106      	bne.n	8013f3c <tcp_write+0x54c>
 8013f2e:	4b1a      	ldr	r3, [pc, #104]	; (8013f98 <tcp_write+0x5a8>)
 8013f30:	f240 22e7 	movw	r2, #743	; 0x2e7
 8013f34:	491e      	ldr	r1, [pc, #120]	; (8013fb0 <tcp_write+0x5c0>)
 8013f36:	481a      	ldr	r0, [pc, #104]	; (8013fa0 <tcp_write+0x5b0>)
 8013f38:	f005 fcc2 	bl	80198c0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f3e:	685b      	ldr	r3, [r3, #4]
 8013f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8013f42:	e009      	b.n	8013f58 <tcp_write+0x568>
      p->tot_len += extendlen;
 8013f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f46:	891a      	ldrh	r2, [r3, #8]
 8013f48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013f4a:	4413      	add	r3, r2
 8013f4c:	b29a      	uxth	r2, r3
 8013f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f50:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	62bb      	str	r3, [r7, #40]	; 0x28
 8013f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d1f1      	bne.n	8013f44 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8013f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f62:	891a      	ldrh	r2, [r3, #8]
 8013f64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013f66:	4413      	add	r3, r2
 8013f68:	b29a      	uxth	r2, r3
 8013f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f6c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8013f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f70:	895a      	ldrh	r2, [r3, #10]
 8013f72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013f74:	4413      	add	r3, r2
 8013f76:	b29a      	uxth	r2, r3
 8013f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f7a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f7e:	891a      	ldrh	r2, [r3, #8]
 8013f80:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013f82:	4413      	add	r3, r2
 8013f84:	b29a      	uxth	r2, r3
 8013f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f88:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8013f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d111      	bne.n	8013fb4 <tcp_write+0x5c4>
    pcb->unsent = queue;
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013f94:	66da      	str	r2, [r3, #108]	; 0x6c
 8013f96:	e010      	b.n	8013fba <tcp_write+0x5ca>
 8013f98:	0801f6e0 	.word	0x0801f6e0
 8013f9c:	0801f980 	.word	0x0801f980
 8013fa0:	0801f734 	.word	0x0801f734
 8013fa4:	0801f9c0 	.word	0x0801f9c0
 8013fa8:	0801f9d0 	.word	0x0801f9d0
 8013fac:	0801f9e4 	.word	0x0801f9e4
 8013fb0:	0801fa1c 	.word	0x0801fa1c
  } else {
    last_unsent->next = queue;
 8013fb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013fb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013fb8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013fbe:	88fb      	ldrh	r3, [r7, #6]
 8013fc0:	441a      	add	r2, r3
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013fcc:	88fb      	ldrh	r3, [r7, #6]
 8013fce:	1ad3      	subs	r3, r2, r3
 8013fd0:	b29a      	uxth	r2, r3
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013fde:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d00e      	beq.n	801400a <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d10a      	bne.n	801400a <tcp_write+0x61a>
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d106      	bne.n	801400a <tcp_write+0x61a>
 8013ffc:	4b2c      	ldr	r3, [pc, #176]	; (80140b0 <tcp_write+0x6c0>)
 8013ffe:	f240 3213 	movw	r2, #787	; 0x313
 8014002:	492c      	ldr	r1, [pc, #176]	; (80140b4 <tcp_write+0x6c4>)
 8014004:	482c      	ldr	r0, [pc, #176]	; (80140b8 <tcp_write+0x6c8>)
 8014006:	f005 fc5b 	bl	80198c0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801400a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801400c:	2b00      	cmp	r3, #0
 801400e:	d016      	beq.n	801403e <tcp_write+0x64e>
 8014010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014012:	68db      	ldr	r3, [r3, #12]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d012      	beq.n	801403e <tcp_write+0x64e>
 8014018:	797b      	ldrb	r3, [r7, #5]
 801401a:	f003 0302 	and.w	r3, r3, #2
 801401e:	2b00      	cmp	r3, #0
 8014020:	d10d      	bne.n	801403e <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8014022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014024:	68db      	ldr	r3, [r3, #12]
 8014026:	899b      	ldrh	r3, [r3, #12]
 8014028:	b29c      	uxth	r4, r3
 801402a:	2008      	movs	r0, #8
 801402c:	f7f9 fc3e 	bl	800d8ac <lwip_htons>
 8014030:	4603      	mov	r3, r0
 8014032:	461a      	mov	r2, r3
 8014034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014036:	68db      	ldr	r3, [r3, #12]
 8014038:	4322      	orrs	r2, r4
 801403a:	b292      	uxth	r2, r2
 801403c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801403e:	2300      	movs	r3, #0
 8014040:	e031      	b.n	80140a6 <tcp_write+0x6b6>
          goto memerr;
 8014042:	bf00      	nop
 8014044:	e006      	b.n	8014054 <tcp_write+0x664>
            goto memerr;
 8014046:	bf00      	nop
 8014048:	e004      	b.n	8014054 <tcp_write+0x664>
        goto memerr;
 801404a:	bf00      	nop
 801404c:	e002      	b.n	8014054 <tcp_write+0x664>
        goto memerr;
 801404e:	bf00      	nop
 8014050:	e000      	b.n	8014054 <tcp_write+0x664>
      goto memerr;
 8014052:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	8b5b      	ldrh	r3, [r3, #26]
 8014058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801405c:	b29a      	uxth	r2, r3
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8014062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014064:	2b00      	cmp	r3, #0
 8014066:	d002      	beq.n	801406e <tcp_write+0x67e>
    pbuf_free(concat_p);
 8014068:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801406a:	f7fa ff4f 	bl	800ef0c <pbuf_free>
  }
  if (queue != NULL) {
 801406e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014070:	2b00      	cmp	r3, #0
 8014072:	d002      	beq.n	801407a <tcp_write+0x68a>
    tcp_segs_free(queue);
 8014074:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014076:	f7fc fb71 	bl	801075c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014080:	2b00      	cmp	r3, #0
 8014082:	d00e      	beq.n	80140a2 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014088:	2b00      	cmp	r3, #0
 801408a:	d10a      	bne.n	80140a2 <tcp_write+0x6b2>
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014090:	2b00      	cmp	r3, #0
 8014092:	d106      	bne.n	80140a2 <tcp_write+0x6b2>
 8014094:	4b06      	ldr	r3, [pc, #24]	; (80140b0 <tcp_write+0x6c0>)
 8014096:	f44f 724a 	mov.w	r2, #808	; 0x328
 801409a:	4906      	ldr	r1, [pc, #24]	; (80140b4 <tcp_write+0x6c4>)
 801409c:	4806      	ldr	r0, [pc, #24]	; (80140b8 <tcp_write+0x6c8>)
 801409e:	f005 fc0f 	bl	80198c0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80140a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80140a6:	4618      	mov	r0, r3
 80140a8:	375c      	adds	r7, #92	; 0x5c
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bd90      	pop	{r4, r7, pc}
 80140ae:	bf00      	nop
 80140b0:	0801f6e0 	.word	0x0801f6e0
 80140b4:	0801fa54 	.word	0x0801fa54
 80140b8:	0801f734 	.word	0x0801f734

080140bc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80140bc:	b590      	push	{r4, r7, lr}
 80140be:	b08b      	sub	sp, #44	; 0x2c
 80140c0:	af02      	add	r7, sp, #8
 80140c2:	6078      	str	r0, [r7, #4]
 80140c4:	460b      	mov	r3, r1
 80140c6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80140c8:	2300      	movs	r3, #0
 80140ca:	61fb      	str	r3, [r7, #28]
 80140cc:	2300      	movs	r3, #0
 80140ce:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80140d0:	2300      	movs	r3, #0
 80140d2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d106      	bne.n	80140e8 <tcp_split_unsent_seg+0x2c>
 80140da:	4b95      	ldr	r3, [pc, #596]	; (8014330 <tcp_split_unsent_seg+0x274>)
 80140dc:	f240 324b 	movw	r2, #843	; 0x34b
 80140e0:	4994      	ldr	r1, [pc, #592]	; (8014334 <tcp_split_unsent_seg+0x278>)
 80140e2:	4895      	ldr	r0, [pc, #596]	; (8014338 <tcp_split_unsent_seg+0x27c>)
 80140e4:	f005 fbec 	bl	80198c0 <iprintf>

  useg = pcb->unsent;
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140ec:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80140ee:	697b      	ldr	r3, [r7, #20]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d102      	bne.n	80140fa <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80140f4:	f04f 33ff 	mov.w	r3, #4294967295
 80140f8:	e116      	b.n	8014328 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80140fa:	887b      	ldrh	r3, [r7, #2]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d109      	bne.n	8014114 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014100:	4b8b      	ldr	r3, [pc, #556]	; (8014330 <tcp_split_unsent_seg+0x274>)
 8014102:	f240 3253 	movw	r2, #851	; 0x353
 8014106:	498d      	ldr	r1, [pc, #564]	; (801433c <tcp_split_unsent_seg+0x280>)
 8014108:	488b      	ldr	r0, [pc, #556]	; (8014338 <tcp_split_unsent_seg+0x27c>)
 801410a:	f005 fbd9 	bl	80198c0 <iprintf>
    return ERR_VAL;
 801410e:	f06f 0305 	mvn.w	r3, #5
 8014112:	e109      	b.n	8014328 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014114:	697b      	ldr	r3, [r7, #20]
 8014116:	891b      	ldrh	r3, [r3, #8]
 8014118:	887a      	ldrh	r2, [r7, #2]
 801411a:	429a      	cmp	r2, r3
 801411c:	d301      	bcc.n	8014122 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801411e:	2300      	movs	r3, #0
 8014120:	e102      	b.n	8014328 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014126:	887a      	ldrh	r2, [r7, #2]
 8014128:	429a      	cmp	r2, r3
 801412a:	d906      	bls.n	801413a <tcp_split_unsent_seg+0x7e>
 801412c:	4b80      	ldr	r3, [pc, #512]	; (8014330 <tcp_split_unsent_seg+0x274>)
 801412e:	f240 325b 	movw	r2, #859	; 0x35b
 8014132:	4983      	ldr	r1, [pc, #524]	; (8014340 <tcp_split_unsent_seg+0x284>)
 8014134:	4880      	ldr	r0, [pc, #512]	; (8014338 <tcp_split_unsent_seg+0x27c>)
 8014136:	f005 fbc3 	bl	80198c0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801413a:	697b      	ldr	r3, [r7, #20]
 801413c:	891b      	ldrh	r3, [r3, #8]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d106      	bne.n	8014150 <tcp_split_unsent_seg+0x94>
 8014142:	4b7b      	ldr	r3, [pc, #492]	; (8014330 <tcp_split_unsent_seg+0x274>)
 8014144:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8014148:	497e      	ldr	r1, [pc, #504]	; (8014344 <tcp_split_unsent_seg+0x288>)
 801414a:	487b      	ldr	r0, [pc, #492]	; (8014338 <tcp_split_unsent_seg+0x27c>)
 801414c:	f005 fbb8 	bl	80198c0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014150:	697b      	ldr	r3, [r7, #20]
 8014152:	7a9b      	ldrb	r3, [r3, #10]
 8014154:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014156:	7bfb      	ldrb	r3, [r7, #15]
 8014158:	009b      	lsls	r3, r3, #2
 801415a:	b2db      	uxtb	r3, r3
 801415c:	f003 0304 	and.w	r3, r3, #4
 8014160:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014162:	697b      	ldr	r3, [r7, #20]
 8014164:	891a      	ldrh	r2, [r3, #8]
 8014166:	887b      	ldrh	r3, [r7, #2]
 8014168:	1ad3      	subs	r3, r2, r3
 801416a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801416c:	7bbb      	ldrb	r3, [r7, #14]
 801416e:	b29a      	uxth	r2, r3
 8014170:	89bb      	ldrh	r3, [r7, #12]
 8014172:	4413      	add	r3, r2
 8014174:	b29b      	uxth	r3, r3
 8014176:	f44f 7220 	mov.w	r2, #640	; 0x280
 801417a:	4619      	mov	r1, r3
 801417c:	2036      	movs	r0, #54	; 0x36
 801417e:	f7fa fbe5 	bl	800e94c <pbuf_alloc>
 8014182:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014184:	693b      	ldr	r3, [r7, #16]
 8014186:	2b00      	cmp	r3, #0
 8014188:	f000 80b7 	beq.w	80142fa <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801418c:	697b      	ldr	r3, [r7, #20]
 801418e:	685b      	ldr	r3, [r3, #4]
 8014190:	891a      	ldrh	r2, [r3, #8]
 8014192:	697b      	ldr	r3, [r7, #20]
 8014194:	891b      	ldrh	r3, [r3, #8]
 8014196:	1ad3      	subs	r3, r2, r3
 8014198:	b29a      	uxth	r2, r3
 801419a:	887b      	ldrh	r3, [r7, #2]
 801419c:	4413      	add	r3, r2
 801419e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80141a0:	697b      	ldr	r3, [r7, #20]
 80141a2:	6858      	ldr	r0, [r3, #4]
 80141a4:	693b      	ldr	r3, [r7, #16]
 80141a6:	685a      	ldr	r2, [r3, #4]
 80141a8:	7bbb      	ldrb	r3, [r7, #14]
 80141aa:	18d1      	adds	r1, r2, r3
 80141ac:	897b      	ldrh	r3, [r7, #10]
 80141ae:	89ba      	ldrh	r2, [r7, #12]
 80141b0:	f7fb f8b2 	bl	800f318 <pbuf_copy_partial>
 80141b4:	4603      	mov	r3, r0
 80141b6:	461a      	mov	r2, r3
 80141b8:	89bb      	ldrh	r3, [r7, #12]
 80141ba:	4293      	cmp	r3, r2
 80141bc:	f040 809f 	bne.w	80142fe <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80141c0:	697b      	ldr	r3, [r7, #20]
 80141c2:	68db      	ldr	r3, [r3, #12]
 80141c4:	899b      	ldrh	r3, [r3, #12]
 80141c6:	b29b      	uxth	r3, r3
 80141c8:	4618      	mov	r0, r3
 80141ca:	f7f9 fb6f 	bl	800d8ac <lwip_htons>
 80141ce:	4603      	mov	r3, r0
 80141d0:	b2db      	uxtb	r3, r3
 80141d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80141d6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80141d8:	2300      	movs	r3, #0
 80141da:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80141dc:	7efb      	ldrb	r3, [r7, #27]
 80141de:	f003 0308 	and.w	r3, r3, #8
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d007      	beq.n	80141f6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80141e6:	7efb      	ldrb	r3, [r7, #27]
 80141e8:	f023 0308 	bic.w	r3, r3, #8
 80141ec:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80141ee:	7ebb      	ldrb	r3, [r7, #26]
 80141f0:	f043 0308 	orr.w	r3, r3, #8
 80141f4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80141f6:	7efb      	ldrb	r3, [r7, #27]
 80141f8:	f003 0301 	and.w	r3, r3, #1
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d007      	beq.n	8014210 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014200:	7efb      	ldrb	r3, [r7, #27]
 8014202:	f023 0301 	bic.w	r3, r3, #1
 8014206:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8014208:	7ebb      	ldrb	r3, [r7, #26]
 801420a:	f043 0301 	orr.w	r3, r3, #1
 801420e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014210:	697b      	ldr	r3, [r7, #20]
 8014212:	68db      	ldr	r3, [r3, #12]
 8014214:	685b      	ldr	r3, [r3, #4]
 8014216:	4618      	mov	r0, r3
 8014218:	f7f9 fb5d 	bl	800d8d6 <lwip_htonl>
 801421c:	4602      	mov	r2, r0
 801421e:	887b      	ldrh	r3, [r7, #2]
 8014220:	18d1      	adds	r1, r2, r3
 8014222:	7eba      	ldrb	r2, [r7, #26]
 8014224:	7bfb      	ldrb	r3, [r7, #15]
 8014226:	9300      	str	r3, [sp, #0]
 8014228:	460b      	mov	r3, r1
 801422a:	6939      	ldr	r1, [r7, #16]
 801422c:	6878      	ldr	r0, [r7, #4]
 801422e:	f7ff fa4d 	bl	80136cc <tcp_create_segment>
 8014232:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014234:	69fb      	ldr	r3, [r7, #28]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d063      	beq.n	8014302 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801423a:	697b      	ldr	r3, [r7, #20]
 801423c:	685b      	ldr	r3, [r3, #4]
 801423e:	4618      	mov	r0, r3
 8014240:	f7fa fef2 	bl	800f028 <pbuf_clen>
 8014244:	4603      	mov	r3, r0
 8014246:	461a      	mov	r2, r3
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801424e:	1a9b      	subs	r3, r3, r2
 8014250:	b29a      	uxth	r2, r3
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014258:	697b      	ldr	r3, [r7, #20]
 801425a:	6858      	ldr	r0, [r3, #4]
 801425c:	697b      	ldr	r3, [r7, #20]
 801425e:	685b      	ldr	r3, [r3, #4]
 8014260:	891a      	ldrh	r2, [r3, #8]
 8014262:	89bb      	ldrh	r3, [r7, #12]
 8014264:	1ad3      	subs	r3, r2, r3
 8014266:	b29b      	uxth	r3, r3
 8014268:	4619      	mov	r1, r3
 801426a:	f7fa fcc9 	bl	800ec00 <pbuf_realloc>
  useg->len -= remainder;
 801426e:	697b      	ldr	r3, [r7, #20]
 8014270:	891a      	ldrh	r2, [r3, #8]
 8014272:	89bb      	ldrh	r3, [r7, #12]
 8014274:	1ad3      	subs	r3, r2, r3
 8014276:	b29a      	uxth	r2, r3
 8014278:	697b      	ldr	r3, [r7, #20]
 801427a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801427c:	697b      	ldr	r3, [r7, #20]
 801427e:	68db      	ldr	r3, [r3, #12]
 8014280:	899b      	ldrh	r3, [r3, #12]
 8014282:	b29c      	uxth	r4, r3
 8014284:	7efb      	ldrb	r3, [r7, #27]
 8014286:	b29b      	uxth	r3, r3
 8014288:	4618      	mov	r0, r3
 801428a:	f7f9 fb0f 	bl	800d8ac <lwip_htons>
 801428e:	4603      	mov	r3, r0
 8014290:	461a      	mov	r2, r3
 8014292:	697b      	ldr	r3, [r7, #20]
 8014294:	68db      	ldr	r3, [r3, #12]
 8014296:	4322      	orrs	r2, r4
 8014298:	b292      	uxth	r2, r2
 801429a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801429c:	697b      	ldr	r3, [r7, #20]
 801429e:	685b      	ldr	r3, [r3, #4]
 80142a0:	4618      	mov	r0, r3
 80142a2:	f7fa fec1 	bl	800f028 <pbuf_clen>
 80142a6:	4603      	mov	r3, r0
 80142a8:	461a      	mov	r2, r3
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80142b0:	4413      	add	r3, r2
 80142b2:	b29a      	uxth	r2, r3
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80142ba:	69fb      	ldr	r3, [r7, #28]
 80142bc:	685b      	ldr	r3, [r3, #4]
 80142be:	4618      	mov	r0, r3
 80142c0:	f7fa feb2 	bl	800f028 <pbuf_clen>
 80142c4:	4603      	mov	r3, r0
 80142c6:	461a      	mov	r2, r3
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80142ce:	4413      	add	r3, r2
 80142d0:	b29a      	uxth	r2, r3
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80142d8:	697b      	ldr	r3, [r7, #20]
 80142da:	681a      	ldr	r2, [r3, #0]
 80142dc:	69fb      	ldr	r3, [r7, #28]
 80142de:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80142e0:	697b      	ldr	r3, [r7, #20]
 80142e2:	69fa      	ldr	r2, [r7, #28]
 80142e4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80142e6:	69fb      	ldr	r3, [r7, #28]
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d103      	bne.n	80142f6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	2200      	movs	r2, #0
 80142f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80142f6:	2300      	movs	r3, #0
 80142f8:	e016      	b.n	8014328 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80142fa:	bf00      	nop
 80142fc:	e002      	b.n	8014304 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80142fe:	bf00      	nop
 8014300:	e000      	b.n	8014304 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014302:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014304:	69fb      	ldr	r3, [r7, #28]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d006      	beq.n	8014318 <tcp_split_unsent_seg+0x25c>
 801430a:	4b09      	ldr	r3, [pc, #36]	; (8014330 <tcp_split_unsent_seg+0x274>)
 801430c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8014310:	490d      	ldr	r1, [pc, #52]	; (8014348 <tcp_split_unsent_seg+0x28c>)
 8014312:	4809      	ldr	r0, [pc, #36]	; (8014338 <tcp_split_unsent_seg+0x27c>)
 8014314:	f005 fad4 	bl	80198c0 <iprintf>
  if (p != NULL) {
 8014318:	693b      	ldr	r3, [r7, #16]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d002      	beq.n	8014324 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801431e:	6938      	ldr	r0, [r7, #16]
 8014320:	f7fa fdf4 	bl	800ef0c <pbuf_free>
  }

  return ERR_MEM;
 8014324:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014328:	4618      	mov	r0, r3
 801432a:	3724      	adds	r7, #36	; 0x24
 801432c:	46bd      	mov	sp, r7
 801432e:	bd90      	pop	{r4, r7, pc}
 8014330:	0801f6e0 	.word	0x0801f6e0
 8014334:	0801fa74 	.word	0x0801fa74
 8014338:	0801f734 	.word	0x0801f734
 801433c:	0801fa98 	.word	0x0801fa98
 8014340:	0801fabc 	.word	0x0801fabc
 8014344:	0801facc 	.word	0x0801facc
 8014348:	0801fadc 	.word	0x0801fadc

0801434c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801434c:	b590      	push	{r4, r7, lr}
 801434e:	b085      	sub	sp, #20
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d106      	bne.n	8014368 <tcp_send_fin+0x1c>
 801435a:	4b21      	ldr	r3, [pc, #132]	; (80143e0 <tcp_send_fin+0x94>)
 801435c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8014360:	4920      	ldr	r1, [pc, #128]	; (80143e4 <tcp_send_fin+0x98>)
 8014362:	4821      	ldr	r0, [pc, #132]	; (80143e8 <tcp_send_fin+0x9c>)
 8014364:	f005 faac 	bl	80198c0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801436c:	2b00      	cmp	r3, #0
 801436e:	d02e      	beq.n	80143ce <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014374:	60fb      	str	r3, [r7, #12]
 8014376:	e002      	b.n	801437e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d1f8      	bne.n	8014378 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	68db      	ldr	r3, [r3, #12]
 801438a:	899b      	ldrh	r3, [r3, #12]
 801438c:	b29b      	uxth	r3, r3
 801438e:	4618      	mov	r0, r3
 8014390:	f7f9 fa8c 	bl	800d8ac <lwip_htons>
 8014394:	4603      	mov	r3, r0
 8014396:	b2db      	uxtb	r3, r3
 8014398:	f003 0307 	and.w	r3, r3, #7
 801439c:	2b00      	cmp	r3, #0
 801439e:	d116      	bne.n	80143ce <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	68db      	ldr	r3, [r3, #12]
 80143a4:	899b      	ldrh	r3, [r3, #12]
 80143a6:	b29c      	uxth	r4, r3
 80143a8:	2001      	movs	r0, #1
 80143aa:	f7f9 fa7f 	bl	800d8ac <lwip_htons>
 80143ae:	4603      	mov	r3, r0
 80143b0:	461a      	mov	r2, r3
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	68db      	ldr	r3, [r3, #12]
 80143b6:	4322      	orrs	r2, r4
 80143b8:	b292      	uxth	r2, r2
 80143ba:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	8b5b      	ldrh	r3, [r3, #26]
 80143c0:	f043 0320 	orr.w	r3, r3, #32
 80143c4:	b29a      	uxth	r2, r3
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80143ca:	2300      	movs	r3, #0
 80143cc:	e004      	b.n	80143d8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80143ce:	2101      	movs	r1, #1
 80143d0:	6878      	ldr	r0, [r7, #4]
 80143d2:	f000 f80b 	bl	80143ec <tcp_enqueue_flags>
 80143d6:	4603      	mov	r3, r0
}
 80143d8:	4618      	mov	r0, r3
 80143da:	3714      	adds	r7, #20
 80143dc:	46bd      	mov	sp, r7
 80143de:	bd90      	pop	{r4, r7, pc}
 80143e0:	0801f6e0 	.word	0x0801f6e0
 80143e4:	0801fae8 	.word	0x0801fae8
 80143e8:	0801f734 	.word	0x0801f734

080143ec <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b08a      	sub	sp, #40	; 0x28
 80143f0:	af02      	add	r7, sp, #8
 80143f2:	6078      	str	r0, [r7, #4]
 80143f4:	460b      	mov	r3, r1
 80143f6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80143f8:	2300      	movs	r3, #0
 80143fa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80143fc:	2300      	movs	r3, #0
 80143fe:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014400:	78fb      	ldrb	r3, [r7, #3]
 8014402:	f003 0303 	and.w	r3, r3, #3
 8014406:	2b00      	cmp	r3, #0
 8014408:	d106      	bne.n	8014418 <tcp_enqueue_flags+0x2c>
 801440a:	4b67      	ldr	r3, [pc, #412]	; (80145a8 <tcp_enqueue_flags+0x1bc>)
 801440c:	f240 4212 	movw	r2, #1042	; 0x412
 8014410:	4966      	ldr	r1, [pc, #408]	; (80145ac <tcp_enqueue_flags+0x1c0>)
 8014412:	4867      	ldr	r0, [pc, #412]	; (80145b0 <tcp_enqueue_flags+0x1c4>)
 8014414:	f005 fa54 	bl	80198c0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d106      	bne.n	801442c <tcp_enqueue_flags+0x40>
 801441e:	4b62      	ldr	r3, [pc, #392]	; (80145a8 <tcp_enqueue_flags+0x1bc>)
 8014420:	f240 4213 	movw	r2, #1043	; 0x413
 8014424:	4963      	ldr	r1, [pc, #396]	; (80145b4 <tcp_enqueue_flags+0x1c8>)
 8014426:	4862      	ldr	r0, [pc, #392]	; (80145b0 <tcp_enqueue_flags+0x1c4>)
 8014428:	f005 fa4a 	bl	80198c0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801442c:	78fb      	ldrb	r3, [r7, #3]
 801442e:	f003 0302 	and.w	r3, r3, #2
 8014432:	2b00      	cmp	r3, #0
 8014434:	d001      	beq.n	801443a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8014436:	2301      	movs	r3, #1
 8014438:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801443a:	7ffb      	ldrb	r3, [r7, #31]
 801443c:	009b      	lsls	r3, r3, #2
 801443e:	b2db      	uxtb	r3, r3
 8014440:	f003 0304 	and.w	r3, r3, #4
 8014444:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014446:	7dfb      	ldrb	r3, [r7, #23]
 8014448:	b29b      	uxth	r3, r3
 801444a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801444e:	4619      	mov	r1, r3
 8014450:	2036      	movs	r0, #54	; 0x36
 8014452:	f7fa fa7b 	bl	800e94c <pbuf_alloc>
 8014456:	6138      	str	r0, [r7, #16]
 8014458:	693b      	ldr	r3, [r7, #16]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d109      	bne.n	8014472 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	8b5b      	ldrh	r3, [r3, #26]
 8014462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014466:	b29a      	uxth	r2, r3
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801446c:	f04f 33ff 	mov.w	r3, #4294967295
 8014470:	e095      	b.n	801459e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014472:	693b      	ldr	r3, [r7, #16]
 8014474:	895a      	ldrh	r2, [r3, #10]
 8014476:	7dfb      	ldrb	r3, [r7, #23]
 8014478:	b29b      	uxth	r3, r3
 801447a:	429a      	cmp	r2, r3
 801447c:	d206      	bcs.n	801448c <tcp_enqueue_flags+0xa0>
 801447e:	4b4a      	ldr	r3, [pc, #296]	; (80145a8 <tcp_enqueue_flags+0x1bc>)
 8014480:	f240 423a 	movw	r2, #1082	; 0x43a
 8014484:	494c      	ldr	r1, [pc, #304]	; (80145b8 <tcp_enqueue_flags+0x1cc>)
 8014486:	484a      	ldr	r0, [pc, #296]	; (80145b0 <tcp_enqueue_flags+0x1c4>)
 8014488:	f005 fa1a 	bl	80198c0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014490:	78fa      	ldrb	r2, [r7, #3]
 8014492:	7ffb      	ldrb	r3, [r7, #31]
 8014494:	9300      	str	r3, [sp, #0]
 8014496:	460b      	mov	r3, r1
 8014498:	6939      	ldr	r1, [r7, #16]
 801449a:	6878      	ldr	r0, [r7, #4]
 801449c:	f7ff f916 	bl	80136cc <tcp_create_segment>
 80144a0:	60f8      	str	r0, [r7, #12]
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d109      	bne.n	80144bc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	8b5b      	ldrh	r3, [r3, #26]
 80144ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80144b0:	b29a      	uxth	r2, r3
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80144b6:	f04f 33ff 	mov.w	r3, #4294967295
 80144ba:	e070      	b.n	801459e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	68db      	ldr	r3, [r3, #12]
 80144c0:	f003 0303 	and.w	r3, r3, #3
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d006      	beq.n	80144d6 <tcp_enqueue_flags+0xea>
 80144c8:	4b37      	ldr	r3, [pc, #220]	; (80145a8 <tcp_enqueue_flags+0x1bc>)
 80144ca:	f240 4242 	movw	r2, #1090	; 0x442
 80144ce:	493b      	ldr	r1, [pc, #236]	; (80145bc <tcp_enqueue_flags+0x1d0>)
 80144d0:	4837      	ldr	r0, [pc, #220]	; (80145b0 <tcp_enqueue_flags+0x1c4>)
 80144d2:	f005 f9f5 	bl	80198c0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	891b      	ldrh	r3, [r3, #8]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d006      	beq.n	80144ec <tcp_enqueue_flags+0x100>
 80144de:	4b32      	ldr	r3, [pc, #200]	; (80145a8 <tcp_enqueue_flags+0x1bc>)
 80144e0:	f240 4243 	movw	r2, #1091	; 0x443
 80144e4:	4936      	ldr	r1, [pc, #216]	; (80145c0 <tcp_enqueue_flags+0x1d4>)
 80144e6:	4832      	ldr	r0, [pc, #200]	; (80145b0 <tcp_enqueue_flags+0x1c4>)
 80144e8:	f005 f9ea 	bl	80198c0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d103      	bne.n	80144fc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	68fa      	ldr	r2, [r7, #12]
 80144f8:	66da      	str	r2, [r3, #108]	; 0x6c
 80144fa:	e00d      	b.n	8014518 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014500:	61bb      	str	r3, [r7, #24]
 8014502:	e002      	b.n	801450a <tcp_enqueue_flags+0x11e>
 8014504:	69bb      	ldr	r3, [r7, #24]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	61bb      	str	r3, [r7, #24]
 801450a:	69bb      	ldr	r3, [r7, #24]
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d1f8      	bne.n	8014504 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014512:	69bb      	ldr	r3, [r7, #24]
 8014514:	68fa      	ldr	r2, [r7, #12]
 8014516:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	2200      	movs	r2, #0
 801451c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014520:	78fb      	ldrb	r3, [r7, #3]
 8014522:	f003 0302 	and.w	r3, r3, #2
 8014526:	2b00      	cmp	r3, #0
 8014528:	d104      	bne.n	8014534 <tcp_enqueue_flags+0x148>
 801452a:	78fb      	ldrb	r3, [r7, #3]
 801452c:	f003 0301 	and.w	r3, r3, #1
 8014530:	2b00      	cmp	r3, #0
 8014532:	d004      	beq.n	801453e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014538:	1c5a      	adds	r2, r3, #1
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801453e:	78fb      	ldrb	r3, [r7, #3]
 8014540:	f003 0301 	and.w	r3, r3, #1
 8014544:	2b00      	cmp	r3, #0
 8014546:	d006      	beq.n	8014556 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	8b5b      	ldrh	r3, [r3, #26]
 801454c:	f043 0320 	orr.w	r3, r3, #32
 8014550:	b29a      	uxth	r2, r3
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	685b      	ldr	r3, [r3, #4]
 801455a:	4618      	mov	r0, r3
 801455c:	f7fa fd64 	bl	800f028 <pbuf_clen>
 8014560:	4603      	mov	r3, r0
 8014562:	461a      	mov	r2, r3
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801456a:	4413      	add	r3, r2
 801456c:	b29a      	uxth	r2, r3
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801457a:	2b00      	cmp	r3, #0
 801457c:	d00e      	beq.n	801459c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014582:	2b00      	cmp	r3, #0
 8014584:	d10a      	bne.n	801459c <tcp_enqueue_flags+0x1b0>
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801458a:	2b00      	cmp	r3, #0
 801458c:	d106      	bne.n	801459c <tcp_enqueue_flags+0x1b0>
 801458e:	4b06      	ldr	r3, [pc, #24]	; (80145a8 <tcp_enqueue_flags+0x1bc>)
 8014590:	f240 4266 	movw	r2, #1126	; 0x466
 8014594:	490b      	ldr	r1, [pc, #44]	; (80145c4 <tcp_enqueue_flags+0x1d8>)
 8014596:	4806      	ldr	r0, [pc, #24]	; (80145b0 <tcp_enqueue_flags+0x1c4>)
 8014598:	f005 f992 	bl	80198c0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801459c:	2300      	movs	r3, #0
}
 801459e:	4618      	mov	r0, r3
 80145a0:	3720      	adds	r7, #32
 80145a2:	46bd      	mov	sp, r7
 80145a4:	bd80      	pop	{r7, pc}
 80145a6:	bf00      	nop
 80145a8:	0801f6e0 	.word	0x0801f6e0
 80145ac:	0801fb04 	.word	0x0801fb04
 80145b0:	0801f734 	.word	0x0801f734
 80145b4:	0801fb5c 	.word	0x0801fb5c
 80145b8:	0801fb7c 	.word	0x0801fb7c
 80145bc:	0801fbb8 	.word	0x0801fbb8
 80145c0:	0801fbd0 	.word	0x0801fbd0
 80145c4:	0801fbfc 	.word	0x0801fbfc

080145c8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80145c8:	b5b0      	push	{r4, r5, r7, lr}
 80145ca:	b08a      	sub	sp, #40	; 0x28
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d106      	bne.n	80145e4 <tcp_output+0x1c>
 80145d6:	4ba0      	ldr	r3, [pc, #640]	; (8014858 <tcp_output+0x290>)
 80145d8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80145dc:	499f      	ldr	r1, [pc, #636]	; (801485c <tcp_output+0x294>)
 80145de:	48a0      	ldr	r0, [pc, #640]	; (8014860 <tcp_output+0x298>)
 80145e0:	f005 f96e 	bl	80198c0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	7d1b      	ldrb	r3, [r3, #20]
 80145e8:	2b01      	cmp	r3, #1
 80145ea:	d106      	bne.n	80145fa <tcp_output+0x32>
 80145ec:	4b9a      	ldr	r3, [pc, #616]	; (8014858 <tcp_output+0x290>)
 80145ee:	f240 42e4 	movw	r2, #1252	; 0x4e4
 80145f2:	499c      	ldr	r1, [pc, #624]	; (8014864 <tcp_output+0x29c>)
 80145f4:	489a      	ldr	r0, [pc, #616]	; (8014860 <tcp_output+0x298>)
 80145f6:	f005 f963 	bl	80198c0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80145fa:	4b9b      	ldr	r3, [pc, #620]	; (8014868 <tcp_output+0x2a0>)
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	687a      	ldr	r2, [r7, #4]
 8014600:	429a      	cmp	r2, r3
 8014602:	d101      	bne.n	8014608 <tcp_output+0x40>
    return ERR_OK;
 8014604:	2300      	movs	r3, #0
 8014606:	e1d2      	b.n	80149ae <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014614:	429a      	cmp	r2, r3
 8014616:	d203      	bcs.n	8014620 <tcp_output+0x58>
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801461e:	e002      	b.n	8014626 <tcp_output+0x5e>
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014626:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801462c:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014630:	2b00      	cmp	r3, #0
 8014632:	d10b      	bne.n	801464c <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	8b5b      	ldrh	r3, [r3, #26]
 8014638:	f003 0302 	and.w	r3, r3, #2
 801463c:	2b00      	cmp	r3, #0
 801463e:	f000 81a9 	beq.w	8014994 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8014642:	6878      	ldr	r0, [r7, #4]
 8014644:	f000 fdd8 	bl	80151f8 <tcp_send_empty_ack>
 8014648:	4603      	mov	r3, r0
 801464a:	e1b0      	b.n	80149ae <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801464c:	6879      	ldr	r1, [r7, #4]
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	3304      	adds	r3, #4
 8014652:	461a      	mov	r2, r3
 8014654:	6878      	ldr	r0, [r7, #4]
 8014656:	f7ff f81d 	bl	8013694 <tcp_route>
 801465a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801465c:	697b      	ldr	r3, [r7, #20]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d102      	bne.n	8014668 <tcp_output+0xa0>
    return ERR_RTE;
 8014662:	f06f 0303 	mvn.w	r3, #3
 8014666:	e1a2      	b.n	80149ae <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d003      	beq.n	8014676 <tcp_output+0xae>
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d111      	bne.n	801469a <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014676:	697b      	ldr	r3, [r7, #20]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d002      	beq.n	8014682 <tcp_output+0xba>
 801467c:	697b      	ldr	r3, [r7, #20]
 801467e:	3304      	adds	r3, #4
 8014680:	e000      	b.n	8014684 <tcp_output+0xbc>
 8014682:	2300      	movs	r3, #0
 8014684:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014686:	693b      	ldr	r3, [r7, #16]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d102      	bne.n	8014692 <tcp_output+0xca>
      return ERR_RTE;
 801468c:	f06f 0303 	mvn.w	r3, #3
 8014690:	e18d      	b.n	80149ae <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014692:	693b      	ldr	r3, [r7, #16]
 8014694:	681a      	ldr	r2, [r3, #0]
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801469c:	68db      	ldr	r3, [r3, #12]
 801469e:	685b      	ldr	r3, [r3, #4]
 80146a0:	4618      	mov	r0, r3
 80146a2:	f7f9 f918 	bl	800d8d6 <lwip_htonl>
 80146a6:	4602      	mov	r2, r0
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80146ac:	1ad3      	subs	r3, r2, r3
 80146ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146b0:	8912      	ldrh	r2, [r2, #8]
 80146b2:	4413      	add	r3, r2
 80146b4:	69ba      	ldr	r2, [r7, #24]
 80146b6:	429a      	cmp	r2, r3
 80146b8:	d227      	bcs.n	801470a <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80146c0:	461a      	mov	r2, r3
 80146c2:	69bb      	ldr	r3, [r7, #24]
 80146c4:	4293      	cmp	r3, r2
 80146c6:	d114      	bne.n	80146f2 <tcp_output+0x12a>
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d110      	bne.n	80146f2 <tcp_output+0x12a>
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d10b      	bne.n	80146f2 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	2200      	movs	r2, #0
 80146de:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	2201      	movs	r2, #1
 80146e6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	2200      	movs	r2, #0
 80146ee:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	8b5b      	ldrh	r3, [r3, #26]
 80146f6:	f003 0302 	and.w	r3, r3, #2
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	f000 814c 	beq.w	8014998 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8014700:	6878      	ldr	r0, [r7, #4]
 8014702:	f000 fd79 	bl	80151f8 <tcp_send_empty_ack>
 8014706:	4603      	mov	r3, r0
 8014708:	e151      	b.n	80149ae <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	2200      	movs	r2, #0
 801470e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014716:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014718:	6a3b      	ldr	r3, [r7, #32]
 801471a:	2b00      	cmp	r3, #0
 801471c:	f000 811b 	beq.w	8014956 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8014720:	e002      	b.n	8014728 <tcp_output+0x160>
 8014722:	6a3b      	ldr	r3, [r7, #32]
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	623b      	str	r3, [r7, #32]
 8014728:	6a3b      	ldr	r3, [r7, #32]
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d1f8      	bne.n	8014722 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8014730:	e111      	b.n	8014956 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014734:	68db      	ldr	r3, [r3, #12]
 8014736:	899b      	ldrh	r3, [r3, #12]
 8014738:	b29b      	uxth	r3, r3
 801473a:	4618      	mov	r0, r3
 801473c:	f7f9 f8b6 	bl	800d8ac <lwip_htons>
 8014740:	4603      	mov	r3, r0
 8014742:	b2db      	uxtb	r3, r3
 8014744:	f003 0304 	and.w	r3, r3, #4
 8014748:	2b00      	cmp	r3, #0
 801474a:	d006      	beq.n	801475a <tcp_output+0x192>
 801474c:	4b42      	ldr	r3, [pc, #264]	; (8014858 <tcp_output+0x290>)
 801474e:	f240 5237 	movw	r2, #1335	; 0x537
 8014752:	4946      	ldr	r1, [pc, #280]	; (801486c <tcp_output+0x2a4>)
 8014754:	4842      	ldr	r0, [pc, #264]	; (8014860 <tcp_output+0x298>)
 8014756:	f005 f8b3 	bl	80198c0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801475e:	2b00      	cmp	r3, #0
 8014760:	d01f      	beq.n	80147a2 <tcp_output+0x1da>
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	8b5b      	ldrh	r3, [r3, #26]
 8014766:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801476a:	2b00      	cmp	r3, #0
 801476c:	d119      	bne.n	80147a2 <tcp_output+0x1da>
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014772:	2b00      	cmp	r3, #0
 8014774:	d00b      	beq.n	801478e <tcp_output+0x1c6>
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d110      	bne.n	80147a2 <tcp_output+0x1da>
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014784:	891a      	ldrh	r2, [r3, #8]
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801478a:	429a      	cmp	r2, r3
 801478c:	d209      	bcs.n	80147a2 <tcp_output+0x1da>
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014794:	2b00      	cmp	r3, #0
 8014796:	d004      	beq.n	80147a2 <tcp_output+0x1da>
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801479e:	2b08      	cmp	r3, #8
 80147a0:	d901      	bls.n	80147a6 <tcp_output+0x1de>
 80147a2:	2301      	movs	r3, #1
 80147a4:	e000      	b.n	80147a8 <tcp_output+0x1e0>
 80147a6:	2300      	movs	r3, #0
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d106      	bne.n	80147ba <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	8b5b      	ldrh	r3, [r3, #26]
 80147b0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	f000 80e3 	beq.w	8014980 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	7d1b      	ldrb	r3, [r3, #20]
 80147be:	2b02      	cmp	r3, #2
 80147c0:	d00d      	beq.n	80147de <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80147c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147c4:	68db      	ldr	r3, [r3, #12]
 80147c6:	899b      	ldrh	r3, [r3, #12]
 80147c8:	b29c      	uxth	r4, r3
 80147ca:	2010      	movs	r0, #16
 80147cc:	f7f9 f86e 	bl	800d8ac <lwip_htons>
 80147d0:	4603      	mov	r3, r0
 80147d2:	461a      	mov	r2, r3
 80147d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147d6:	68db      	ldr	r3, [r3, #12]
 80147d8:	4322      	orrs	r2, r4
 80147da:	b292      	uxth	r2, r2
 80147dc:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80147de:	697a      	ldr	r2, [r7, #20]
 80147e0:	6879      	ldr	r1, [r7, #4]
 80147e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147e4:	f000 f908 	bl	80149f8 <tcp_output_segment>
 80147e8:	4603      	mov	r3, r0
 80147ea:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80147ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d009      	beq.n	8014808 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	8b5b      	ldrh	r3, [r3, #26]
 80147f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80147fc:	b29a      	uxth	r2, r3
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	835a      	strh	r2, [r3, #26]
      return err;
 8014802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014806:	e0d2      	b.n	80149ae <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801480a:	681a      	ldr	r2, [r3, #0]
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	7d1b      	ldrb	r3, [r3, #20]
 8014814:	2b02      	cmp	r3, #2
 8014816:	d006      	beq.n	8014826 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	8b5b      	ldrh	r3, [r3, #26]
 801481c:	f023 0303 	bic.w	r3, r3, #3
 8014820:	b29a      	uxth	r2, r3
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014828:	68db      	ldr	r3, [r3, #12]
 801482a:	685b      	ldr	r3, [r3, #4]
 801482c:	4618      	mov	r0, r3
 801482e:	f7f9 f852 	bl	800d8d6 <lwip_htonl>
 8014832:	4604      	mov	r4, r0
 8014834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014836:	891b      	ldrh	r3, [r3, #8]
 8014838:	461d      	mov	r5, r3
 801483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801483c:	68db      	ldr	r3, [r3, #12]
 801483e:	899b      	ldrh	r3, [r3, #12]
 8014840:	b29b      	uxth	r3, r3
 8014842:	4618      	mov	r0, r3
 8014844:	f7f9 f832 	bl	800d8ac <lwip_htons>
 8014848:	4603      	mov	r3, r0
 801484a:	b2db      	uxtb	r3, r3
 801484c:	f003 0303 	and.w	r3, r3, #3
 8014850:	2b00      	cmp	r3, #0
 8014852:	d00d      	beq.n	8014870 <tcp_output+0x2a8>
 8014854:	2301      	movs	r3, #1
 8014856:	e00c      	b.n	8014872 <tcp_output+0x2aa>
 8014858:	0801f6e0 	.word	0x0801f6e0
 801485c:	0801fc24 	.word	0x0801fc24
 8014860:	0801f734 	.word	0x0801f734
 8014864:	0801fc3c 	.word	0x0801fc3c
 8014868:	2000fd08 	.word	0x2000fd08
 801486c:	0801fc64 	.word	0x0801fc64
 8014870:	2300      	movs	r3, #0
 8014872:	442b      	add	r3, r5
 8014874:	4423      	add	r3, r4
 8014876:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801487c:	68bb      	ldr	r3, [r7, #8]
 801487e:	1ad3      	subs	r3, r2, r3
 8014880:	2b00      	cmp	r3, #0
 8014882:	da02      	bge.n	801488a <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	68ba      	ldr	r2, [r7, #8]
 8014888:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801488c:	891b      	ldrh	r3, [r3, #8]
 801488e:	461c      	mov	r4, r3
 8014890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014892:	68db      	ldr	r3, [r3, #12]
 8014894:	899b      	ldrh	r3, [r3, #12]
 8014896:	b29b      	uxth	r3, r3
 8014898:	4618      	mov	r0, r3
 801489a:	f7f9 f807 	bl	800d8ac <lwip_htons>
 801489e:	4603      	mov	r3, r0
 80148a0:	b2db      	uxtb	r3, r3
 80148a2:	f003 0303 	and.w	r3, r3, #3
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d001      	beq.n	80148ae <tcp_output+0x2e6>
 80148aa:	2301      	movs	r3, #1
 80148ac:	e000      	b.n	80148b0 <tcp_output+0x2e8>
 80148ae:	2300      	movs	r3, #0
 80148b0:	4423      	add	r3, r4
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d049      	beq.n	801494a <tcp_output+0x382>
      seg->next = NULL;
 80148b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148b8:	2200      	movs	r2, #0
 80148ba:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d105      	bne.n	80148d0 <tcp_output+0x308>
        pcb->unacked = seg;
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148c8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80148ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148cc:	623b      	str	r3, [r7, #32]
 80148ce:	e03f      	b.n	8014950 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80148d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148d2:	68db      	ldr	r3, [r3, #12]
 80148d4:	685b      	ldr	r3, [r3, #4]
 80148d6:	4618      	mov	r0, r3
 80148d8:	f7f8 fffd 	bl	800d8d6 <lwip_htonl>
 80148dc:	4604      	mov	r4, r0
 80148de:	6a3b      	ldr	r3, [r7, #32]
 80148e0:	68db      	ldr	r3, [r3, #12]
 80148e2:	685b      	ldr	r3, [r3, #4]
 80148e4:	4618      	mov	r0, r3
 80148e6:	f7f8 fff6 	bl	800d8d6 <lwip_htonl>
 80148ea:	4603      	mov	r3, r0
 80148ec:	1ae3      	subs	r3, r4, r3
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	da24      	bge.n	801493c <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	3370      	adds	r3, #112	; 0x70
 80148f6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80148f8:	e002      	b.n	8014900 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80148fa:	69fb      	ldr	r3, [r7, #28]
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014900:	69fb      	ldr	r3, [r7, #28]
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d011      	beq.n	801492c <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014908:	69fb      	ldr	r3, [r7, #28]
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	68db      	ldr	r3, [r3, #12]
 801490e:	685b      	ldr	r3, [r3, #4]
 8014910:	4618      	mov	r0, r3
 8014912:	f7f8 ffe0 	bl	800d8d6 <lwip_htonl>
 8014916:	4604      	mov	r4, r0
 8014918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801491a:	68db      	ldr	r3, [r3, #12]
 801491c:	685b      	ldr	r3, [r3, #4]
 801491e:	4618      	mov	r0, r3
 8014920:	f7f8 ffd9 	bl	800d8d6 <lwip_htonl>
 8014924:	4603      	mov	r3, r0
 8014926:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014928:	2b00      	cmp	r3, #0
 801492a:	dbe6      	blt.n	80148fa <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 801492c:	69fb      	ldr	r3, [r7, #28]
 801492e:	681a      	ldr	r2, [r3, #0]
 8014930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014932:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014934:	69fb      	ldr	r3, [r7, #28]
 8014936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014938:	601a      	str	r2, [r3, #0]
 801493a:	e009      	b.n	8014950 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801493c:	6a3b      	ldr	r3, [r7, #32]
 801493e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014940:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8014942:	6a3b      	ldr	r3, [r7, #32]
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	623b      	str	r3, [r7, #32]
 8014948:	e002      	b.n	8014950 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801494a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801494c:	f7fb ff1a 	bl	8010784 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014954:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014958:	2b00      	cmp	r3, #0
 801495a:	d012      	beq.n	8014982 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801495e:	68db      	ldr	r3, [r3, #12]
 8014960:	685b      	ldr	r3, [r3, #4]
 8014962:	4618      	mov	r0, r3
 8014964:	f7f8 ffb7 	bl	800d8d6 <lwip_htonl>
 8014968:	4602      	mov	r2, r0
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801496e:	1ad3      	subs	r3, r2, r3
 8014970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014972:	8912      	ldrh	r2, [r2, #8]
 8014974:	4413      	add	r3, r2
  while (seg != NULL &&
 8014976:	69ba      	ldr	r2, [r7, #24]
 8014978:	429a      	cmp	r2, r3
 801497a:	f4bf aeda 	bcs.w	8014732 <tcp_output+0x16a>
 801497e:	e000      	b.n	8014982 <tcp_output+0x3ba>
      break;
 8014980:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014986:	2b00      	cmp	r3, #0
 8014988:	d108      	bne.n	801499c <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	2200      	movs	r2, #0
 801498e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8014992:	e004      	b.n	801499e <tcp_output+0x3d6>
    goto output_done;
 8014994:	bf00      	nop
 8014996:	e002      	b.n	801499e <tcp_output+0x3d6>
    goto output_done;
 8014998:	bf00      	nop
 801499a:	e000      	b.n	801499e <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801499c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	8b5b      	ldrh	r3, [r3, #26]
 80149a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80149a6:	b29a      	uxth	r2, r3
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80149ac:	2300      	movs	r3, #0
}
 80149ae:	4618      	mov	r0, r3
 80149b0:	3728      	adds	r7, #40	; 0x28
 80149b2:	46bd      	mov	sp, r7
 80149b4:	bdb0      	pop	{r4, r5, r7, pc}
 80149b6:	bf00      	nop

080149b8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b082      	sub	sp, #8
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d106      	bne.n	80149d4 <tcp_output_segment_busy+0x1c>
 80149c6:	4b09      	ldr	r3, [pc, #36]	; (80149ec <tcp_output_segment_busy+0x34>)
 80149c8:	f240 529a 	movw	r2, #1434	; 0x59a
 80149cc:	4908      	ldr	r1, [pc, #32]	; (80149f0 <tcp_output_segment_busy+0x38>)
 80149ce:	4809      	ldr	r0, [pc, #36]	; (80149f4 <tcp_output_segment_busy+0x3c>)
 80149d0:	f004 ff76 	bl	80198c0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	685b      	ldr	r3, [r3, #4]
 80149d8:	7b9b      	ldrb	r3, [r3, #14]
 80149da:	2b01      	cmp	r3, #1
 80149dc:	d001      	beq.n	80149e2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80149de:	2301      	movs	r3, #1
 80149e0:	e000      	b.n	80149e4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80149e2:	2300      	movs	r3, #0
}
 80149e4:	4618      	mov	r0, r3
 80149e6:	3708      	adds	r7, #8
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bd80      	pop	{r7, pc}
 80149ec:	0801f6e0 	.word	0x0801f6e0
 80149f0:	0801fc7c 	.word	0x0801fc7c
 80149f4:	0801f734 	.word	0x0801f734

080149f8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80149f8:	b5b0      	push	{r4, r5, r7, lr}
 80149fa:	b08c      	sub	sp, #48	; 0x30
 80149fc:	af04      	add	r7, sp, #16
 80149fe:	60f8      	str	r0, [r7, #12]
 8014a00:	60b9      	str	r1, [r7, #8]
 8014a02:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d106      	bne.n	8014a18 <tcp_output_segment+0x20>
 8014a0a:	4b64      	ldr	r3, [pc, #400]	; (8014b9c <tcp_output_segment+0x1a4>)
 8014a0c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8014a10:	4963      	ldr	r1, [pc, #396]	; (8014ba0 <tcp_output_segment+0x1a8>)
 8014a12:	4864      	ldr	r0, [pc, #400]	; (8014ba4 <tcp_output_segment+0x1ac>)
 8014a14:	f004 ff54 	bl	80198c0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014a18:	68bb      	ldr	r3, [r7, #8]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d106      	bne.n	8014a2c <tcp_output_segment+0x34>
 8014a1e:	4b5f      	ldr	r3, [pc, #380]	; (8014b9c <tcp_output_segment+0x1a4>)
 8014a20:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014a24:	4960      	ldr	r1, [pc, #384]	; (8014ba8 <tcp_output_segment+0x1b0>)
 8014a26:	485f      	ldr	r0, [pc, #380]	; (8014ba4 <tcp_output_segment+0x1ac>)
 8014a28:	f004 ff4a 	bl	80198c0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d106      	bne.n	8014a40 <tcp_output_segment+0x48>
 8014a32:	4b5a      	ldr	r3, [pc, #360]	; (8014b9c <tcp_output_segment+0x1a4>)
 8014a34:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014a38:	495c      	ldr	r1, [pc, #368]	; (8014bac <tcp_output_segment+0x1b4>)
 8014a3a:	485a      	ldr	r0, [pc, #360]	; (8014ba4 <tcp_output_segment+0x1ac>)
 8014a3c:	f004 ff40 	bl	80198c0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8014a40:	68f8      	ldr	r0, [r7, #12]
 8014a42:	f7ff ffb9 	bl	80149b8 <tcp_output_segment_busy>
 8014a46:	4603      	mov	r3, r0
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d001      	beq.n	8014a50 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	e0a0      	b.n	8014b92 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014a50:	68bb      	ldr	r3, [r7, #8]
 8014a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	68dc      	ldr	r4, [r3, #12]
 8014a58:	4610      	mov	r0, r2
 8014a5a:	f7f8 ff3c 	bl	800d8d6 <lwip_htonl>
 8014a5e:	4603      	mov	r3, r0
 8014a60:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014a62:	68bb      	ldr	r3, [r7, #8]
 8014a64:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	68dc      	ldr	r4, [r3, #12]
 8014a6a:	4610      	mov	r0, r2
 8014a6c:	f7f8 ff1e 	bl	800d8ac <lwip_htons>
 8014a70:	4603      	mov	r3, r0
 8014a72:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014a74:	68bb      	ldr	r3, [r7, #8]
 8014a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a78:	68ba      	ldr	r2, [r7, #8]
 8014a7a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014a7c:	441a      	add	r2, r3
 8014a7e:	68bb      	ldr	r3, [r7, #8]
 8014a80:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	68db      	ldr	r3, [r3, #12]
 8014a86:	3314      	adds	r3, #20
 8014a88:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	7a9b      	ldrb	r3, [r3, #10]
 8014a8e:	f003 0301 	and.w	r3, r3, #1
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d015      	beq.n	8014ac2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014a96:	68bb      	ldr	r3, [r7, #8]
 8014a98:	3304      	adds	r3, #4
 8014a9a:	461a      	mov	r2, r3
 8014a9c:	6879      	ldr	r1, [r7, #4]
 8014a9e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8014aa2:	f7fc fa33 	bl	8010f0c <tcp_eff_send_mss_netif>
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014aaa:	8b7b      	ldrh	r3, [r7, #26]
 8014aac:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	f7f8 ff10 	bl	800d8d6 <lwip_htonl>
 8014ab6:	4602      	mov	r2, r0
 8014ab8:	69fb      	ldr	r3, [r7, #28]
 8014aba:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014abc:	69fb      	ldr	r3, [r7, #28]
 8014abe:	3304      	adds	r3, #4
 8014ac0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8014ac2:	68bb      	ldr	r3, [r7, #8]
 8014ac4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	da02      	bge.n	8014ad2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014acc:	68bb      	ldr	r3, [r7, #8]
 8014ace:	2200      	movs	r2, #0
 8014ad0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8014ad2:	68bb      	ldr	r3, [r7, #8]
 8014ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d10c      	bne.n	8014af4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014ada:	4b35      	ldr	r3, [pc, #212]	; (8014bb0 <tcp_output_segment+0x1b8>)
 8014adc:	681a      	ldr	r2, [r3, #0]
 8014ade:	68bb      	ldr	r3, [r7, #8]
 8014ae0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	68db      	ldr	r3, [r3, #12]
 8014ae6:	685b      	ldr	r3, [r3, #4]
 8014ae8:	4618      	mov	r0, r3
 8014aea:	f7f8 fef4 	bl	800d8d6 <lwip_htonl>
 8014aee:	4602      	mov	r2, r0
 8014af0:	68bb      	ldr	r3, [r7, #8]
 8014af2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	68db      	ldr	r3, [r3, #12]
 8014af8:	461a      	mov	r2, r3
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	685b      	ldr	r3, [r3, #4]
 8014afe:	685b      	ldr	r3, [r3, #4]
 8014b00:	1ad3      	subs	r3, r2, r3
 8014b02:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	685b      	ldr	r3, [r3, #4]
 8014b08:	8959      	ldrh	r1, [r3, #10]
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	685b      	ldr	r3, [r3, #4]
 8014b0e:	8b3a      	ldrh	r2, [r7, #24]
 8014b10:	1a8a      	subs	r2, r1, r2
 8014b12:	b292      	uxth	r2, r2
 8014b14:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	685b      	ldr	r3, [r3, #4]
 8014b1a:	8919      	ldrh	r1, [r3, #8]
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	685b      	ldr	r3, [r3, #4]
 8014b20:	8b3a      	ldrh	r2, [r7, #24]
 8014b22:	1a8a      	subs	r2, r1, r2
 8014b24:	b292      	uxth	r2, r2
 8014b26:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	685b      	ldr	r3, [r3, #4]
 8014b2c:	68fa      	ldr	r2, [r7, #12]
 8014b2e:	68d2      	ldr	r2, [r2, #12]
 8014b30:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	68db      	ldr	r3, [r3, #12]
 8014b36:	2200      	movs	r2, #0
 8014b38:	741a      	strb	r2, [r3, #16]
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	68db      	ldr	r3, [r3, #12]
 8014b42:	f103 0214 	add.w	r2, r3, #20
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	7a9b      	ldrb	r3, [r3, #10]
 8014b4a:	009b      	lsls	r3, r3, #2
 8014b4c:	f003 0304 	and.w	r3, r3, #4
 8014b50:	4413      	add	r3, r2
 8014b52:	69fa      	ldr	r2, [r7, #28]
 8014b54:	429a      	cmp	r2, r3
 8014b56:	d006      	beq.n	8014b66 <tcp_output_segment+0x16e>
 8014b58:	4b10      	ldr	r3, [pc, #64]	; (8014b9c <tcp_output_segment+0x1a4>)
 8014b5a:	f240 621c 	movw	r2, #1564	; 0x61c
 8014b5e:	4915      	ldr	r1, [pc, #84]	; (8014bb4 <tcp_output_segment+0x1bc>)
 8014b60:	4810      	ldr	r0, [pc, #64]	; (8014ba4 <tcp_output_segment+0x1ac>)
 8014b62:	f004 fead 	bl	80198c0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	6858      	ldr	r0, [r3, #4]
 8014b6a:	68b9      	ldr	r1, [r7, #8]
 8014b6c:	68bb      	ldr	r3, [r7, #8]
 8014b6e:	1d1c      	adds	r4, r3, #4
 8014b70:	68bb      	ldr	r3, [r7, #8]
 8014b72:	7add      	ldrb	r5, [r3, #11]
 8014b74:	68bb      	ldr	r3, [r7, #8]
 8014b76:	7a9b      	ldrb	r3, [r3, #10]
 8014b78:	687a      	ldr	r2, [r7, #4]
 8014b7a:	9202      	str	r2, [sp, #8]
 8014b7c:	2206      	movs	r2, #6
 8014b7e:	9201      	str	r2, [sp, #4]
 8014b80:	9300      	str	r3, [sp, #0]
 8014b82:	462b      	mov	r3, r5
 8014b84:	4622      	mov	r2, r4
 8014b86:	f002 fe0d 	bl	80177a4 <ip4_output_if>
 8014b8a:	4603      	mov	r3, r0
 8014b8c:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014b8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014b92:	4618      	mov	r0, r3
 8014b94:	3720      	adds	r7, #32
 8014b96:	46bd      	mov	sp, r7
 8014b98:	bdb0      	pop	{r4, r5, r7, pc}
 8014b9a:	bf00      	nop
 8014b9c:	0801f6e0 	.word	0x0801f6e0
 8014ba0:	0801fca4 	.word	0x0801fca4
 8014ba4:	0801f734 	.word	0x0801f734
 8014ba8:	0801fcc4 	.word	0x0801fcc4
 8014bac:	0801fce4 	.word	0x0801fce4
 8014bb0:	2000fcf8 	.word	0x2000fcf8
 8014bb4:	0801fd08 	.word	0x0801fd08

08014bb8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014bb8:	b5b0      	push	{r4, r5, r7, lr}
 8014bba:	b084      	sub	sp, #16
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d106      	bne.n	8014bd4 <tcp_rexmit_rto_prepare+0x1c>
 8014bc6:	4b31      	ldr	r3, [pc, #196]	; (8014c8c <tcp_rexmit_rto_prepare+0xd4>)
 8014bc8:	f240 6263 	movw	r2, #1635	; 0x663
 8014bcc:	4930      	ldr	r1, [pc, #192]	; (8014c90 <tcp_rexmit_rto_prepare+0xd8>)
 8014bce:	4831      	ldr	r0, [pc, #196]	; (8014c94 <tcp_rexmit_rto_prepare+0xdc>)
 8014bd0:	f004 fe76 	bl	80198c0 <iprintf>

  if (pcb->unacked == NULL) {
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d102      	bne.n	8014be2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014bdc:	f06f 0305 	mvn.w	r3, #5
 8014be0:	e050      	b.n	8014c84 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014be6:	60fb      	str	r3, [r7, #12]
 8014be8:	e00b      	b.n	8014c02 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014bea:	68f8      	ldr	r0, [r7, #12]
 8014bec:	f7ff fee4 	bl	80149b8 <tcp_output_segment_busy>
 8014bf0:	4603      	mov	r3, r0
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d002      	beq.n	8014bfc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8014bf6:	f06f 0305 	mvn.w	r3, #5
 8014bfa:	e043      	b.n	8014c84 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	60fb      	str	r3, [r7, #12]
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d1ef      	bne.n	8014bea <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014c0a:	68f8      	ldr	r0, [r7, #12]
 8014c0c:	f7ff fed4 	bl	80149b8 <tcp_output_segment_busy>
 8014c10:	4603      	mov	r3, r0
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d002      	beq.n	8014c1c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8014c16:	f06f 0305 	mvn.w	r3, #5
 8014c1a:	e033      	b.n	8014c84 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	2200      	movs	r2, #0
 8014c30:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	8b5b      	ldrh	r3, [r3, #26]
 8014c36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014c3a:	b29a      	uxth	r2, r3
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	68db      	ldr	r3, [r3, #12]
 8014c44:	685b      	ldr	r3, [r3, #4]
 8014c46:	4618      	mov	r0, r3
 8014c48:	f7f8 fe45 	bl	800d8d6 <lwip_htonl>
 8014c4c:	4604      	mov	r4, r0
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	891b      	ldrh	r3, [r3, #8]
 8014c52:	461d      	mov	r5, r3
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	68db      	ldr	r3, [r3, #12]
 8014c58:	899b      	ldrh	r3, [r3, #12]
 8014c5a:	b29b      	uxth	r3, r3
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	f7f8 fe25 	bl	800d8ac <lwip_htons>
 8014c62:	4603      	mov	r3, r0
 8014c64:	b2db      	uxtb	r3, r3
 8014c66:	f003 0303 	and.w	r3, r3, #3
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d001      	beq.n	8014c72 <tcp_rexmit_rto_prepare+0xba>
 8014c6e:	2301      	movs	r3, #1
 8014c70:	e000      	b.n	8014c74 <tcp_rexmit_rto_prepare+0xbc>
 8014c72:	2300      	movs	r3, #0
 8014c74:	442b      	add	r3, r5
 8014c76:	18e2      	adds	r2, r4, r3
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	2200      	movs	r2, #0
 8014c80:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8014c82:	2300      	movs	r3, #0
}
 8014c84:	4618      	mov	r0, r3
 8014c86:	3710      	adds	r7, #16
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8014c8c:	0801f6e0 	.word	0x0801f6e0
 8014c90:	0801fd1c 	.word	0x0801fd1c
 8014c94:	0801f734 	.word	0x0801f734

08014c98 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b082      	sub	sp, #8
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d106      	bne.n	8014cb4 <tcp_rexmit_rto_commit+0x1c>
 8014ca6:	4b0d      	ldr	r3, [pc, #52]	; (8014cdc <tcp_rexmit_rto_commit+0x44>)
 8014ca8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014cac:	490c      	ldr	r1, [pc, #48]	; (8014ce0 <tcp_rexmit_rto_commit+0x48>)
 8014cae:	480d      	ldr	r0, [pc, #52]	; (8014ce4 <tcp_rexmit_rto_commit+0x4c>)
 8014cb0:	f004 fe06 	bl	80198c0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014cba:	2bff      	cmp	r3, #255	; 0xff
 8014cbc:	d007      	beq.n	8014cce <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014cc4:	3301      	adds	r3, #1
 8014cc6:	b2da      	uxtb	r2, r3
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014cce:	6878      	ldr	r0, [r7, #4]
 8014cd0:	f7ff fc7a 	bl	80145c8 <tcp_output>
}
 8014cd4:	bf00      	nop
 8014cd6:	3708      	adds	r7, #8
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	bd80      	pop	{r7, pc}
 8014cdc:	0801f6e0 	.word	0x0801f6e0
 8014ce0:	0801fd40 	.word	0x0801fd40
 8014ce4:	0801f734 	.word	0x0801f734

08014ce8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b082      	sub	sp, #8
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d106      	bne.n	8014d04 <tcp_rexmit_rto+0x1c>
 8014cf6:	4b0a      	ldr	r3, [pc, #40]	; (8014d20 <tcp_rexmit_rto+0x38>)
 8014cf8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014cfc:	4909      	ldr	r1, [pc, #36]	; (8014d24 <tcp_rexmit_rto+0x3c>)
 8014cfe:	480a      	ldr	r0, [pc, #40]	; (8014d28 <tcp_rexmit_rto+0x40>)
 8014d00:	f004 fdde 	bl	80198c0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014d04:	6878      	ldr	r0, [r7, #4]
 8014d06:	f7ff ff57 	bl	8014bb8 <tcp_rexmit_rto_prepare>
 8014d0a:	4603      	mov	r3, r0
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d102      	bne.n	8014d16 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014d10:	6878      	ldr	r0, [r7, #4]
 8014d12:	f7ff ffc1 	bl	8014c98 <tcp_rexmit_rto_commit>
  }
}
 8014d16:	bf00      	nop
 8014d18:	3708      	adds	r7, #8
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	bd80      	pop	{r7, pc}
 8014d1e:	bf00      	nop
 8014d20:	0801f6e0 	.word	0x0801f6e0
 8014d24:	0801fd64 	.word	0x0801fd64
 8014d28:	0801f734 	.word	0x0801f734

08014d2c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014d2c:	b590      	push	{r4, r7, lr}
 8014d2e:	b085      	sub	sp, #20
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d106      	bne.n	8014d48 <tcp_rexmit+0x1c>
 8014d3a:	4b2f      	ldr	r3, [pc, #188]	; (8014df8 <tcp_rexmit+0xcc>)
 8014d3c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014d40:	492e      	ldr	r1, [pc, #184]	; (8014dfc <tcp_rexmit+0xd0>)
 8014d42:	482f      	ldr	r0, [pc, #188]	; (8014e00 <tcp_rexmit+0xd4>)
 8014d44:	f004 fdbc 	bl	80198c0 <iprintf>

  if (pcb->unacked == NULL) {
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d102      	bne.n	8014d56 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014d50:	f06f 0305 	mvn.w	r3, #5
 8014d54:	e04c      	b.n	8014df0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d5a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014d5c:	68b8      	ldr	r0, [r7, #8]
 8014d5e:	f7ff fe2b 	bl	80149b8 <tcp_output_segment_busy>
 8014d62:	4603      	mov	r3, r0
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d002      	beq.n	8014d6e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014d68:	f06f 0305 	mvn.w	r3, #5
 8014d6c:	e040      	b.n	8014df0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014d6e:	68bb      	ldr	r3, [r7, #8]
 8014d70:	681a      	ldr	r2, [r3, #0]
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	336c      	adds	r3, #108	; 0x6c
 8014d7a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014d7c:	e002      	b.n	8014d84 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d011      	beq.n	8014db0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	68db      	ldr	r3, [r3, #12]
 8014d92:	685b      	ldr	r3, [r3, #4]
 8014d94:	4618      	mov	r0, r3
 8014d96:	f7f8 fd9e 	bl	800d8d6 <lwip_htonl>
 8014d9a:	4604      	mov	r4, r0
 8014d9c:	68bb      	ldr	r3, [r7, #8]
 8014d9e:	68db      	ldr	r3, [r3, #12]
 8014da0:	685b      	ldr	r3, [r3, #4]
 8014da2:	4618      	mov	r0, r3
 8014da4:	f7f8 fd97 	bl	800d8d6 <lwip_htonl>
 8014da8:	4603      	mov	r3, r0
 8014daa:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	dbe6      	blt.n	8014d7e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	681a      	ldr	r2, [r3, #0]
 8014db4:	68bb      	ldr	r3, [r7, #8]
 8014db6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	68ba      	ldr	r2, [r7, #8]
 8014dbc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014dbe:	68bb      	ldr	r3, [r7, #8]
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d103      	bne.n	8014dce <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	2200      	movs	r2, #0
 8014dca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014dd4:	2bff      	cmp	r3, #255	; 0xff
 8014dd6:	d007      	beq.n	8014de8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014dde:	3301      	adds	r3, #1
 8014de0:	b2da      	uxtb	r2, r3
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	2200      	movs	r2, #0
 8014dec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014dee:	2300      	movs	r3, #0
}
 8014df0:	4618      	mov	r0, r3
 8014df2:	3714      	adds	r7, #20
 8014df4:	46bd      	mov	sp, r7
 8014df6:	bd90      	pop	{r4, r7, pc}
 8014df8:	0801f6e0 	.word	0x0801f6e0
 8014dfc:	0801fd80 	.word	0x0801fd80
 8014e00:	0801f734 	.word	0x0801f734

08014e04 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b082      	sub	sp, #8
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d106      	bne.n	8014e20 <tcp_rexmit_fast+0x1c>
 8014e12:	4b2f      	ldr	r3, [pc, #188]	; (8014ed0 <tcp_rexmit_fast+0xcc>)
 8014e14:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014e18:	492e      	ldr	r1, [pc, #184]	; (8014ed4 <tcp_rexmit_fast+0xd0>)
 8014e1a:	482f      	ldr	r0, [pc, #188]	; (8014ed8 <tcp_rexmit_fast+0xd4>)
 8014e1c:	f004 fd50 	bl	80198c0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d04f      	beq.n	8014ec8 <tcp_rexmit_fast+0xc4>
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	8b5b      	ldrh	r3, [r3, #26]
 8014e2c:	f003 0304 	and.w	r3, r3, #4
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d149      	bne.n	8014ec8 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014e34:	6878      	ldr	r0, [r7, #4]
 8014e36:	f7ff ff79 	bl	8014d2c <tcp_rexmit>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d143      	bne.n	8014ec8 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014e4c:	429a      	cmp	r2, r3
 8014e4e:	d208      	bcs.n	8014e62 <tcp_rexmit_fast+0x5e>
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	da00      	bge.n	8014e5c <tcp_rexmit_fast+0x58>
 8014e5a:	3301      	adds	r3, #1
 8014e5c:	105b      	asrs	r3, r3, #1
 8014e5e:	b29b      	uxth	r3, r3
 8014e60:	e007      	b.n	8014e72 <tcp_rexmit_fast+0x6e>
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	da00      	bge.n	8014e6e <tcp_rexmit_fast+0x6a>
 8014e6c:	3301      	adds	r3, #1
 8014e6e:	105b      	asrs	r3, r3, #1
 8014e70:	b29b      	uxth	r3, r3
 8014e72:	687a      	ldr	r2, [r7, #4]
 8014e74:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014e7e:	461a      	mov	r2, r3
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014e84:	005b      	lsls	r3, r3, #1
 8014e86:	429a      	cmp	r2, r3
 8014e88:	d206      	bcs.n	8014e98 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014e8e:	005b      	lsls	r3, r3, #1
 8014e90:	b29a      	uxth	r2, r3
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ea2:	4619      	mov	r1, r3
 8014ea4:	0049      	lsls	r1, r1, #1
 8014ea6:	440b      	add	r3, r1
 8014ea8:	b29b      	uxth	r3, r3
 8014eaa:	4413      	add	r3, r2
 8014eac:	b29a      	uxth	r2, r3
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	8b5b      	ldrh	r3, [r3, #26]
 8014eb8:	f043 0304 	orr.w	r3, r3, #4
 8014ebc:	b29a      	uxth	r2, r3
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8014ec8:	bf00      	nop
 8014eca:	3708      	adds	r7, #8
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bd80      	pop	{r7, pc}
 8014ed0:	0801f6e0 	.word	0x0801f6e0
 8014ed4:	0801fd98 	.word	0x0801fd98
 8014ed8:	0801f734 	.word	0x0801f734

08014edc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b086      	sub	sp, #24
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	60f8      	str	r0, [r7, #12]
 8014ee4:	607b      	str	r3, [r7, #4]
 8014ee6:	460b      	mov	r3, r1
 8014ee8:	817b      	strh	r3, [r7, #10]
 8014eea:	4613      	mov	r3, r2
 8014eec:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014eee:	897a      	ldrh	r2, [r7, #10]
 8014ef0:	893b      	ldrh	r3, [r7, #8]
 8014ef2:	4413      	add	r3, r2
 8014ef4:	b29b      	uxth	r3, r3
 8014ef6:	3314      	adds	r3, #20
 8014ef8:	b29b      	uxth	r3, r3
 8014efa:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014efe:	4619      	mov	r1, r3
 8014f00:	2022      	movs	r0, #34	; 0x22
 8014f02:	f7f9 fd23 	bl	800e94c <pbuf_alloc>
 8014f06:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014f08:	697b      	ldr	r3, [r7, #20]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d04e      	beq.n	8014fac <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014f0e:	697b      	ldr	r3, [r7, #20]
 8014f10:	895b      	ldrh	r3, [r3, #10]
 8014f12:	461a      	mov	r2, r3
 8014f14:	897b      	ldrh	r3, [r7, #10]
 8014f16:	3314      	adds	r3, #20
 8014f18:	429a      	cmp	r2, r3
 8014f1a:	da06      	bge.n	8014f2a <tcp_output_alloc_header_common+0x4e>
 8014f1c:	4b26      	ldr	r3, [pc, #152]	; (8014fb8 <tcp_output_alloc_header_common+0xdc>)
 8014f1e:	f240 7224 	movw	r2, #1828	; 0x724
 8014f22:	4926      	ldr	r1, [pc, #152]	; (8014fbc <tcp_output_alloc_header_common+0xe0>)
 8014f24:	4826      	ldr	r0, [pc, #152]	; (8014fc0 <tcp_output_alloc_header_common+0xe4>)
 8014f26:	f004 fccb 	bl	80198c0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014f2a:	697b      	ldr	r3, [r7, #20]
 8014f2c:	685b      	ldr	r3, [r3, #4]
 8014f2e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014f30:	8c3b      	ldrh	r3, [r7, #32]
 8014f32:	4618      	mov	r0, r3
 8014f34:	f7f8 fcba 	bl	800d8ac <lwip_htons>
 8014f38:	4603      	mov	r3, r0
 8014f3a:	461a      	mov	r2, r3
 8014f3c:	693b      	ldr	r3, [r7, #16]
 8014f3e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014f40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014f42:	4618      	mov	r0, r3
 8014f44:	f7f8 fcb2 	bl	800d8ac <lwip_htons>
 8014f48:	4603      	mov	r3, r0
 8014f4a:	461a      	mov	r2, r3
 8014f4c:	693b      	ldr	r3, [r7, #16]
 8014f4e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014f50:	693b      	ldr	r3, [r7, #16]
 8014f52:	687a      	ldr	r2, [r7, #4]
 8014f54:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014f56:	68f8      	ldr	r0, [r7, #12]
 8014f58:	f7f8 fcbd 	bl	800d8d6 <lwip_htonl>
 8014f5c:	4602      	mov	r2, r0
 8014f5e:	693b      	ldr	r3, [r7, #16]
 8014f60:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014f62:	897b      	ldrh	r3, [r7, #10]
 8014f64:	089b      	lsrs	r3, r3, #2
 8014f66:	b29b      	uxth	r3, r3
 8014f68:	3305      	adds	r3, #5
 8014f6a:	b29b      	uxth	r3, r3
 8014f6c:	031b      	lsls	r3, r3, #12
 8014f6e:	b29a      	uxth	r2, r3
 8014f70:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014f74:	b29b      	uxth	r3, r3
 8014f76:	4313      	orrs	r3, r2
 8014f78:	b29b      	uxth	r3, r3
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	f7f8 fc96 	bl	800d8ac <lwip_htons>
 8014f80:	4603      	mov	r3, r0
 8014f82:	461a      	mov	r2, r3
 8014f84:	693b      	ldr	r3, [r7, #16]
 8014f86:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014f88:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	f7f8 fc8e 	bl	800d8ac <lwip_htons>
 8014f90:	4603      	mov	r3, r0
 8014f92:	461a      	mov	r2, r3
 8014f94:	693b      	ldr	r3, [r7, #16]
 8014f96:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014f98:	693b      	ldr	r3, [r7, #16]
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	741a      	strb	r2, [r3, #16]
 8014f9e:	2200      	movs	r2, #0
 8014fa0:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014fa2:	693b      	ldr	r3, [r7, #16]
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	749a      	strb	r2, [r3, #18]
 8014fa8:	2200      	movs	r2, #0
 8014faa:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014fac:	697b      	ldr	r3, [r7, #20]
}
 8014fae:	4618      	mov	r0, r3
 8014fb0:	3718      	adds	r7, #24
 8014fb2:	46bd      	mov	sp, r7
 8014fb4:	bd80      	pop	{r7, pc}
 8014fb6:	bf00      	nop
 8014fb8:	0801f6e0 	.word	0x0801f6e0
 8014fbc:	0801fdb8 	.word	0x0801fdb8
 8014fc0:	0801f734 	.word	0x0801f734

08014fc4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014fc4:	b5b0      	push	{r4, r5, r7, lr}
 8014fc6:	b08a      	sub	sp, #40	; 0x28
 8014fc8:	af04      	add	r7, sp, #16
 8014fca:	60f8      	str	r0, [r7, #12]
 8014fcc:	607b      	str	r3, [r7, #4]
 8014fce:	460b      	mov	r3, r1
 8014fd0:	817b      	strh	r3, [r7, #10]
 8014fd2:	4613      	mov	r3, r2
 8014fd4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d106      	bne.n	8014fea <tcp_output_alloc_header+0x26>
 8014fdc:	4b15      	ldr	r3, [pc, #84]	; (8015034 <tcp_output_alloc_header+0x70>)
 8014fde:	f240 7242 	movw	r2, #1858	; 0x742
 8014fe2:	4915      	ldr	r1, [pc, #84]	; (8015038 <tcp_output_alloc_header+0x74>)
 8014fe4:	4815      	ldr	r0, [pc, #84]	; (801503c <tcp_output_alloc_header+0x78>)
 8014fe6:	f004 fc6b 	bl	80198c0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	8adb      	ldrh	r3, [r3, #22]
 8014ff2:	68fa      	ldr	r2, [r7, #12]
 8014ff4:	8b12      	ldrh	r2, [r2, #24]
 8014ff6:	68f9      	ldr	r1, [r7, #12]
 8014ff8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8014ffa:	893d      	ldrh	r5, [r7, #8]
 8014ffc:	897c      	ldrh	r4, [r7, #10]
 8014ffe:	9103      	str	r1, [sp, #12]
 8015000:	2110      	movs	r1, #16
 8015002:	9102      	str	r1, [sp, #8]
 8015004:	9201      	str	r2, [sp, #4]
 8015006:	9300      	str	r3, [sp, #0]
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	462a      	mov	r2, r5
 801500c:	4621      	mov	r1, r4
 801500e:	f7ff ff65 	bl	8014edc <tcp_output_alloc_header_common>
 8015012:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015014:	697b      	ldr	r3, [r7, #20]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d006      	beq.n	8015028 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801501e:	68fa      	ldr	r2, [r7, #12]
 8015020:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015022:	441a      	add	r2, r3
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8015028:	697b      	ldr	r3, [r7, #20]
}
 801502a:	4618      	mov	r0, r3
 801502c:	3718      	adds	r7, #24
 801502e:	46bd      	mov	sp, r7
 8015030:	bdb0      	pop	{r4, r5, r7, pc}
 8015032:	bf00      	nop
 8015034:	0801f6e0 	.word	0x0801f6e0
 8015038:	0801fde8 	.word	0x0801fde8
 801503c:	0801f734 	.word	0x0801f734

08015040 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8015040:	b580      	push	{r7, lr}
 8015042:	b088      	sub	sp, #32
 8015044:	af00      	add	r7, sp, #0
 8015046:	60f8      	str	r0, [r7, #12]
 8015048:	60b9      	str	r1, [r7, #8]
 801504a:	4611      	mov	r1, r2
 801504c:	461a      	mov	r2, r3
 801504e:	460b      	mov	r3, r1
 8015050:	71fb      	strb	r3, [r7, #7]
 8015052:	4613      	mov	r3, r2
 8015054:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8015056:	2300      	movs	r3, #0
 8015058:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801505a:	68bb      	ldr	r3, [r7, #8]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d106      	bne.n	801506e <tcp_output_fill_options+0x2e>
 8015060:	4b13      	ldr	r3, [pc, #76]	; (80150b0 <tcp_output_fill_options+0x70>)
 8015062:	f240 7256 	movw	r2, #1878	; 0x756
 8015066:	4913      	ldr	r1, [pc, #76]	; (80150b4 <tcp_output_fill_options+0x74>)
 8015068:	4813      	ldr	r0, [pc, #76]	; (80150b8 <tcp_output_fill_options+0x78>)
 801506a:	f004 fc29 	bl	80198c0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801506e:	68bb      	ldr	r3, [r7, #8]
 8015070:	685b      	ldr	r3, [r3, #4]
 8015072:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015074:	69bb      	ldr	r3, [r7, #24]
 8015076:	3314      	adds	r3, #20
 8015078:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801507a:	69bb      	ldr	r3, [r7, #24]
 801507c:	f103 0214 	add.w	r2, r3, #20
 8015080:	8bfb      	ldrh	r3, [r7, #30]
 8015082:	009b      	lsls	r3, r3, #2
 8015084:	4619      	mov	r1, r3
 8015086:	79fb      	ldrb	r3, [r7, #7]
 8015088:	009b      	lsls	r3, r3, #2
 801508a:	f003 0304 	and.w	r3, r3, #4
 801508e:	440b      	add	r3, r1
 8015090:	4413      	add	r3, r2
 8015092:	697a      	ldr	r2, [r7, #20]
 8015094:	429a      	cmp	r2, r3
 8015096:	d006      	beq.n	80150a6 <tcp_output_fill_options+0x66>
 8015098:	4b05      	ldr	r3, [pc, #20]	; (80150b0 <tcp_output_fill_options+0x70>)
 801509a:	f240 7275 	movw	r2, #1909	; 0x775
 801509e:	4907      	ldr	r1, [pc, #28]	; (80150bc <tcp_output_fill_options+0x7c>)
 80150a0:	4805      	ldr	r0, [pc, #20]	; (80150b8 <tcp_output_fill_options+0x78>)
 80150a2:	f004 fc0d 	bl	80198c0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80150a6:	bf00      	nop
 80150a8:	3720      	adds	r7, #32
 80150aa:	46bd      	mov	sp, r7
 80150ac:	bd80      	pop	{r7, pc}
 80150ae:	bf00      	nop
 80150b0:	0801f6e0 	.word	0x0801f6e0
 80150b4:	0801fe10 	.word	0x0801fe10
 80150b8:	0801f734 	.word	0x0801f734
 80150bc:	0801fd08 	.word	0x0801fd08

080150c0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80150c0:	b580      	push	{r7, lr}
 80150c2:	b08a      	sub	sp, #40	; 0x28
 80150c4:	af04      	add	r7, sp, #16
 80150c6:	60f8      	str	r0, [r7, #12]
 80150c8:	60b9      	str	r1, [r7, #8]
 80150ca:	607a      	str	r2, [r7, #4]
 80150cc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80150ce:	68bb      	ldr	r3, [r7, #8]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d106      	bne.n	80150e2 <tcp_output_control_segment+0x22>
 80150d4:	4b1c      	ldr	r3, [pc, #112]	; (8015148 <tcp_output_control_segment+0x88>)
 80150d6:	f240 7287 	movw	r2, #1927	; 0x787
 80150da:	491c      	ldr	r1, [pc, #112]	; (801514c <tcp_output_control_segment+0x8c>)
 80150dc:	481c      	ldr	r0, [pc, #112]	; (8015150 <tcp_output_control_segment+0x90>)
 80150de:	f004 fbef 	bl	80198c0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80150e2:	683a      	ldr	r2, [r7, #0]
 80150e4:	6879      	ldr	r1, [r7, #4]
 80150e6:	68f8      	ldr	r0, [r7, #12]
 80150e8:	f7fe fad4 	bl	8013694 <tcp_route>
 80150ec:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80150ee:	693b      	ldr	r3, [r7, #16]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d102      	bne.n	80150fa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80150f4:	23fc      	movs	r3, #252	; 0xfc
 80150f6:	75fb      	strb	r3, [r7, #23]
 80150f8:	e01c      	b.n	8015134 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d006      	beq.n	801510e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	7adb      	ldrb	r3, [r3, #11]
 8015104:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	7a9b      	ldrb	r3, [r3, #10]
 801510a:	757b      	strb	r3, [r7, #21]
 801510c:	e003      	b.n	8015116 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801510e:	23ff      	movs	r3, #255	; 0xff
 8015110:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8015112:	2300      	movs	r3, #0
 8015114:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015116:	7dba      	ldrb	r2, [r7, #22]
 8015118:	693b      	ldr	r3, [r7, #16]
 801511a:	9302      	str	r3, [sp, #8]
 801511c:	2306      	movs	r3, #6
 801511e:	9301      	str	r3, [sp, #4]
 8015120:	7d7b      	ldrb	r3, [r7, #21]
 8015122:	9300      	str	r3, [sp, #0]
 8015124:	4613      	mov	r3, r2
 8015126:	683a      	ldr	r2, [r7, #0]
 8015128:	6879      	ldr	r1, [r7, #4]
 801512a:	68b8      	ldr	r0, [r7, #8]
 801512c:	f002 fb3a 	bl	80177a4 <ip4_output_if>
 8015130:	4603      	mov	r3, r0
 8015132:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015134:	68b8      	ldr	r0, [r7, #8]
 8015136:	f7f9 fee9 	bl	800ef0c <pbuf_free>
  return err;
 801513a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801513e:	4618      	mov	r0, r3
 8015140:	3718      	adds	r7, #24
 8015142:	46bd      	mov	sp, r7
 8015144:	bd80      	pop	{r7, pc}
 8015146:	bf00      	nop
 8015148:	0801f6e0 	.word	0x0801f6e0
 801514c:	0801fe38 	.word	0x0801fe38
 8015150:	0801f734 	.word	0x0801f734

08015154 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015154:	b590      	push	{r4, r7, lr}
 8015156:	b08b      	sub	sp, #44	; 0x2c
 8015158:	af04      	add	r7, sp, #16
 801515a:	60f8      	str	r0, [r7, #12]
 801515c:	60b9      	str	r1, [r7, #8]
 801515e:	607a      	str	r2, [r7, #4]
 8015160:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015162:	683b      	ldr	r3, [r7, #0]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d106      	bne.n	8015176 <tcp_rst+0x22>
 8015168:	4b1f      	ldr	r3, [pc, #124]	; (80151e8 <tcp_rst+0x94>)
 801516a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801516e:	491f      	ldr	r1, [pc, #124]	; (80151ec <tcp_rst+0x98>)
 8015170:	481f      	ldr	r0, [pc, #124]	; (80151f0 <tcp_rst+0x9c>)
 8015172:	f004 fba5 	bl	80198c0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015178:	2b00      	cmp	r3, #0
 801517a:	d106      	bne.n	801518a <tcp_rst+0x36>
 801517c:	4b1a      	ldr	r3, [pc, #104]	; (80151e8 <tcp_rst+0x94>)
 801517e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8015182:	491c      	ldr	r1, [pc, #112]	; (80151f4 <tcp_rst+0xa0>)
 8015184:	481a      	ldr	r0, [pc, #104]	; (80151f0 <tcp_rst+0x9c>)
 8015186:	f004 fb9b 	bl	80198c0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801518a:	2300      	movs	r3, #0
 801518c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801518e:	f246 0308 	movw	r3, #24584	; 0x6008
 8015192:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015194:	7dfb      	ldrb	r3, [r7, #23]
 8015196:	b29c      	uxth	r4, r3
 8015198:	68b8      	ldr	r0, [r7, #8]
 801519a:	f7f8 fb9c 	bl	800d8d6 <lwip_htonl>
 801519e:	4602      	mov	r2, r0
 80151a0:	8abb      	ldrh	r3, [r7, #20]
 80151a2:	9303      	str	r3, [sp, #12]
 80151a4:	2314      	movs	r3, #20
 80151a6:	9302      	str	r3, [sp, #8]
 80151a8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80151aa:	9301      	str	r3, [sp, #4]
 80151ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80151ae:	9300      	str	r3, [sp, #0]
 80151b0:	4613      	mov	r3, r2
 80151b2:	2200      	movs	r2, #0
 80151b4:	4621      	mov	r1, r4
 80151b6:	6878      	ldr	r0, [r7, #4]
 80151b8:	f7ff fe90 	bl	8014edc <tcp_output_alloc_header_common>
 80151bc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80151be:	693b      	ldr	r3, [r7, #16]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d00c      	beq.n	80151de <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80151c4:	7dfb      	ldrb	r3, [r7, #23]
 80151c6:	2200      	movs	r2, #0
 80151c8:	6939      	ldr	r1, [r7, #16]
 80151ca:	68f8      	ldr	r0, [r7, #12]
 80151cc:	f7ff ff38 	bl	8015040 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80151d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151d2:	683a      	ldr	r2, [r7, #0]
 80151d4:	6939      	ldr	r1, [r7, #16]
 80151d6:	68f8      	ldr	r0, [r7, #12]
 80151d8:	f7ff ff72 	bl	80150c0 <tcp_output_control_segment>
 80151dc:	e000      	b.n	80151e0 <tcp_rst+0x8c>
    return;
 80151de:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80151e0:	371c      	adds	r7, #28
 80151e2:	46bd      	mov	sp, r7
 80151e4:	bd90      	pop	{r4, r7, pc}
 80151e6:	bf00      	nop
 80151e8:	0801f6e0 	.word	0x0801f6e0
 80151ec:	0801fe64 	.word	0x0801fe64
 80151f0:	0801f734 	.word	0x0801f734
 80151f4:	0801fe80 	.word	0x0801fe80

080151f8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80151f8:	b590      	push	{r4, r7, lr}
 80151fa:	b087      	sub	sp, #28
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015200:	2300      	movs	r3, #0
 8015202:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015204:	2300      	movs	r3, #0
 8015206:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d106      	bne.n	801521c <tcp_send_empty_ack+0x24>
 801520e:	4b28      	ldr	r3, [pc, #160]	; (80152b0 <tcp_send_empty_ack+0xb8>)
 8015210:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8015214:	4927      	ldr	r1, [pc, #156]	; (80152b4 <tcp_send_empty_ack+0xbc>)
 8015216:	4828      	ldr	r0, [pc, #160]	; (80152b8 <tcp_send_empty_ack+0xc0>)
 8015218:	f004 fb52 	bl	80198c0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801521c:	7dfb      	ldrb	r3, [r7, #23]
 801521e:	009b      	lsls	r3, r3, #2
 8015220:	b2db      	uxtb	r3, r3
 8015222:	f003 0304 	and.w	r3, r3, #4
 8015226:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015228:	7d7b      	ldrb	r3, [r7, #21]
 801522a:	b29c      	uxth	r4, r3
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015230:	4618      	mov	r0, r3
 8015232:	f7f8 fb50 	bl	800d8d6 <lwip_htonl>
 8015236:	4603      	mov	r3, r0
 8015238:	2200      	movs	r2, #0
 801523a:	4621      	mov	r1, r4
 801523c:	6878      	ldr	r0, [r7, #4]
 801523e:	f7ff fec1 	bl	8014fc4 <tcp_output_alloc_header>
 8015242:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015244:	693b      	ldr	r3, [r7, #16]
 8015246:	2b00      	cmp	r3, #0
 8015248:	d109      	bne.n	801525e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	8b5b      	ldrh	r3, [r3, #26]
 801524e:	f043 0303 	orr.w	r3, r3, #3
 8015252:	b29a      	uxth	r2, r3
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015258:	f06f 0301 	mvn.w	r3, #1
 801525c:	e023      	b.n	80152a6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801525e:	7dbb      	ldrb	r3, [r7, #22]
 8015260:	7dfa      	ldrb	r2, [r7, #23]
 8015262:	6939      	ldr	r1, [r7, #16]
 8015264:	6878      	ldr	r0, [r7, #4]
 8015266:	f7ff feeb 	bl	8015040 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801526a:	687a      	ldr	r2, [r7, #4]
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	3304      	adds	r3, #4
 8015270:	6939      	ldr	r1, [r7, #16]
 8015272:	6878      	ldr	r0, [r7, #4]
 8015274:	f7ff ff24 	bl	80150c0 <tcp_output_control_segment>
 8015278:	4603      	mov	r3, r0
 801527a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801527c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d007      	beq.n	8015294 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	8b5b      	ldrh	r3, [r3, #26]
 8015288:	f043 0303 	orr.w	r3, r3, #3
 801528c:	b29a      	uxth	r2, r3
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	835a      	strh	r2, [r3, #26]
 8015292:	e006      	b.n	80152a2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	8b5b      	ldrh	r3, [r3, #26]
 8015298:	f023 0303 	bic.w	r3, r3, #3
 801529c:	b29a      	uxth	r2, r3
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80152a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80152a6:	4618      	mov	r0, r3
 80152a8:	371c      	adds	r7, #28
 80152aa:	46bd      	mov	sp, r7
 80152ac:	bd90      	pop	{r4, r7, pc}
 80152ae:	bf00      	nop
 80152b0:	0801f6e0 	.word	0x0801f6e0
 80152b4:	0801fe9c 	.word	0x0801fe9c
 80152b8:	0801f734 	.word	0x0801f734

080152bc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80152bc:	b590      	push	{r4, r7, lr}
 80152be:	b087      	sub	sp, #28
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80152c4:	2300      	movs	r3, #0
 80152c6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d106      	bne.n	80152dc <tcp_keepalive+0x20>
 80152ce:	4b18      	ldr	r3, [pc, #96]	; (8015330 <tcp_keepalive+0x74>)
 80152d0:	f640 0224 	movw	r2, #2084	; 0x824
 80152d4:	4917      	ldr	r1, [pc, #92]	; (8015334 <tcp_keepalive+0x78>)
 80152d6:	4818      	ldr	r0, [pc, #96]	; (8015338 <tcp_keepalive+0x7c>)
 80152d8:	f004 faf2 	bl	80198c0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80152dc:	7dfb      	ldrb	r3, [r7, #23]
 80152de:	b29c      	uxth	r4, r3
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80152e4:	3b01      	subs	r3, #1
 80152e6:	4618      	mov	r0, r3
 80152e8:	f7f8 faf5 	bl	800d8d6 <lwip_htonl>
 80152ec:	4603      	mov	r3, r0
 80152ee:	2200      	movs	r2, #0
 80152f0:	4621      	mov	r1, r4
 80152f2:	6878      	ldr	r0, [r7, #4]
 80152f4:	f7ff fe66 	bl	8014fc4 <tcp_output_alloc_header>
 80152f8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80152fa:	693b      	ldr	r3, [r7, #16]
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d102      	bne.n	8015306 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015300:	f04f 33ff 	mov.w	r3, #4294967295
 8015304:	e010      	b.n	8015328 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015306:	7dfb      	ldrb	r3, [r7, #23]
 8015308:	2200      	movs	r2, #0
 801530a:	6939      	ldr	r1, [r7, #16]
 801530c:	6878      	ldr	r0, [r7, #4]
 801530e:	f7ff fe97 	bl	8015040 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015312:	687a      	ldr	r2, [r7, #4]
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	3304      	adds	r3, #4
 8015318:	6939      	ldr	r1, [r7, #16]
 801531a:	6878      	ldr	r0, [r7, #4]
 801531c:	f7ff fed0 	bl	80150c0 <tcp_output_control_segment>
 8015320:	4603      	mov	r3, r0
 8015322:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015324:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015328:	4618      	mov	r0, r3
 801532a:	371c      	adds	r7, #28
 801532c:	46bd      	mov	sp, r7
 801532e:	bd90      	pop	{r4, r7, pc}
 8015330:	0801f6e0 	.word	0x0801f6e0
 8015334:	0801febc 	.word	0x0801febc
 8015338:	0801f734 	.word	0x0801f734

0801533c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801533c:	b590      	push	{r4, r7, lr}
 801533e:	b08b      	sub	sp, #44	; 0x2c
 8015340:	af00      	add	r7, sp, #0
 8015342:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015344:	2300      	movs	r3, #0
 8015346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d106      	bne.n	801535e <tcp_zero_window_probe+0x22>
 8015350:	4b4c      	ldr	r3, [pc, #304]	; (8015484 <tcp_zero_window_probe+0x148>)
 8015352:	f640 024f 	movw	r2, #2127	; 0x84f
 8015356:	494c      	ldr	r1, [pc, #304]	; (8015488 <tcp_zero_window_probe+0x14c>)
 8015358:	484c      	ldr	r0, [pc, #304]	; (801548c <tcp_zero_window_probe+0x150>)
 801535a:	f004 fab1 	bl	80198c0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015362:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8015364:	6a3b      	ldr	r3, [r7, #32]
 8015366:	2b00      	cmp	r3, #0
 8015368:	d101      	bne.n	801536e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801536a:	2300      	movs	r3, #0
 801536c:	e086      	b.n	801547c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015374:	2bff      	cmp	r3, #255	; 0xff
 8015376:	d007      	beq.n	8015388 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801537e:	3301      	adds	r3, #1
 8015380:	b2da      	uxtb	r2, r3
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015388:	6a3b      	ldr	r3, [r7, #32]
 801538a:	68db      	ldr	r3, [r3, #12]
 801538c:	899b      	ldrh	r3, [r3, #12]
 801538e:	b29b      	uxth	r3, r3
 8015390:	4618      	mov	r0, r3
 8015392:	f7f8 fa8b 	bl	800d8ac <lwip_htons>
 8015396:	4603      	mov	r3, r0
 8015398:	b2db      	uxtb	r3, r3
 801539a:	f003 0301 	and.w	r3, r3, #1
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d005      	beq.n	80153ae <tcp_zero_window_probe+0x72>
 80153a2:	6a3b      	ldr	r3, [r7, #32]
 80153a4:	891b      	ldrh	r3, [r3, #8]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d101      	bne.n	80153ae <tcp_zero_window_probe+0x72>
 80153aa:	2301      	movs	r3, #1
 80153ac:	e000      	b.n	80153b0 <tcp_zero_window_probe+0x74>
 80153ae:	2300      	movs	r3, #0
 80153b0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80153b2:	7ffb      	ldrb	r3, [r7, #31]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	bf0c      	ite	eq
 80153b8:	2301      	moveq	r3, #1
 80153ba:	2300      	movne	r3, #0
 80153bc:	b2db      	uxtb	r3, r3
 80153be:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80153c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153c4:	b299      	uxth	r1, r3
 80153c6:	6a3b      	ldr	r3, [r7, #32]
 80153c8:	68db      	ldr	r3, [r3, #12]
 80153ca:	685b      	ldr	r3, [r3, #4]
 80153cc:	8bba      	ldrh	r2, [r7, #28]
 80153ce:	6878      	ldr	r0, [r7, #4]
 80153d0:	f7ff fdf8 	bl	8014fc4 <tcp_output_alloc_header>
 80153d4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80153d6:	69bb      	ldr	r3, [r7, #24]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d102      	bne.n	80153e2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80153dc:	f04f 33ff 	mov.w	r3, #4294967295
 80153e0:	e04c      	b.n	801547c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80153e2:	69bb      	ldr	r3, [r7, #24]
 80153e4:	685b      	ldr	r3, [r3, #4]
 80153e6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80153e8:	7ffb      	ldrb	r3, [r7, #31]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d011      	beq.n	8015412 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80153ee:	697b      	ldr	r3, [r7, #20]
 80153f0:	899b      	ldrh	r3, [r3, #12]
 80153f2:	b29b      	uxth	r3, r3
 80153f4:	b21b      	sxth	r3, r3
 80153f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80153fa:	b21c      	sxth	r4, r3
 80153fc:	2011      	movs	r0, #17
 80153fe:	f7f8 fa55 	bl	800d8ac <lwip_htons>
 8015402:	4603      	mov	r3, r0
 8015404:	b21b      	sxth	r3, r3
 8015406:	4323      	orrs	r3, r4
 8015408:	b21b      	sxth	r3, r3
 801540a:	b29a      	uxth	r2, r3
 801540c:	697b      	ldr	r3, [r7, #20]
 801540e:	819a      	strh	r2, [r3, #12]
 8015410:	e010      	b.n	8015434 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015412:	69bb      	ldr	r3, [r7, #24]
 8015414:	685b      	ldr	r3, [r3, #4]
 8015416:	3314      	adds	r3, #20
 8015418:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801541a:	6a3b      	ldr	r3, [r7, #32]
 801541c:	6858      	ldr	r0, [r3, #4]
 801541e:	6a3b      	ldr	r3, [r7, #32]
 8015420:	685b      	ldr	r3, [r3, #4]
 8015422:	891a      	ldrh	r2, [r3, #8]
 8015424:	6a3b      	ldr	r3, [r7, #32]
 8015426:	891b      	ldrh	r3, [r3, #8]
 8015428:	1ad3      	subs	r3, r2, r3
 801542a:	b29b      	uxth	r3, r3
 801542c:	2201      	movs	r2, #1
 801542e:	6939      	ldr	r1, [r7, #16]
 8015430:	f7f9 ff72 	bl	800f318 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015434:	6a3b      	ldr	r3, [r7, #32]
 8015436:	68db      	ldr	r3, [r3, #12]
 8015438:	685b      	ldr	r3, [r3, #4]
 801543a:	4618      	mov	r0, r3
 801543c:	f7f8 fa4b 	bl	800d8d6 <lwip_htonl>
 8015440:	4603      	mov	r3, r0
 8015442:	3301      	adds	r3, #1
 8015444:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	1ad3      	subs	r3, r2, r3
 801544e:	2b00      	cmp	r3, #0
 8015450:	da02      	bge.n	8015458 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	68fa      	ldr	r2, [r7, #12]
 8015456:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801545c:	2200      	movs	r2, #0
 801545e:	69b9      	ldr	r1, [r7, #24]
 8015460:	6878      	ldr	r0, [r7, #4]
 8015462:	f7ff fded 	bl	8015040 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015466:	687a      	ldr	r2, [r7, #4]
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	3304      	adds	r3, #4
 801546c:	69b9      	ldr	r1, [r7, #24]
 801546e:	6878      	ldr	r0, [r7, #4]
 8015470:	f7ff fe26 	bl	80150c0 <tcp_output_control_segment>
 8015474:	4603      	mov	r3, r0
 8015476:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015478:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801547c:	4618      	mov	r0, r3
 801547e:	372c      	adds	r7, #44	; 0x2c
 8015480:	46bd      	mov	sp, r7
 8015482:	bd90      	pop	{r4, r7, pc}
 8015484:	0801f6e0 	.word	0x0801f6e0
 8015488:	0801fed8 	.word	0x0801fed8
 801548c:	0801f734 	.word	0x0801f734

08015490 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b082      	sub	sp, #8
 8015494:	af00      	add	r7, sp, #0
 8015496:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015498:	f7fa f82c 	bl	800f4f4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801549c:	4b0a      	ldr	r3, [pc, #40]	; (80154c8 <tcpip_tcp_timer+0x38>)
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d103      	bne.n	80154ac <tcpip_tcp_timer+0x1c>
 80154a4:	4b09      	ldr	r3, [pc, #36]	; (80154cc <tcpip_tcp_timer+0x3c>)
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d005      	beq.n	80154b8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80154ac:	2200      	movs	r2, #0
 80154ae:	4908      	ldr	r1, [pc, #32]	; (80154d0 <tcpip_tcp_timer+0x40>)
 80154b0:	20fa      	movs	r0, #250	; 0xfa
 80154b2:	f000 f8f1 	bl	8015698 <sys_timeout>
 80154b6:	e002      	b.n	80154be <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80154b8:	4b06      	ldr	r3, [pc, #24]	; (80154d4 <tcpip_tcp_timer+0x44>)
 80154ba:	2200      	movs	r2, #0
 80154bc:	601a      	str	r2, [r3, #0]
  }
}
 80154be:	bf00      	nop
 80154c0:	3708      	adds	r7, #8
 80154c2:	46bd      	mov	sp, r7
 80154c4:	bd80      	pop	{r7, pc}
 80154c6:	bf00      	nop
 80154c8:	2000fcf4 	.word	0x2000fcf4
 80154cc:	2000fd04 	.word	0x2000fd04
 80154d0:	08015491 	.word	0x08015491
 80154d4:	20008840 	.word	0x20008840

080154d8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80154d8:	b580      	push	{r7, lr}
 80154da:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80154dc:	4b0a      	ldr	r3, [pc, #40]	; (8015508 <tcp_timer_needed+0x30>)
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d10f      	bne.n	8015504 <tcp_timer_needed+0x2c>
 80154e4:	4b09      	ldr	r3, [pc, #36]	; (801550c <tcp_timer_needed+0x34>)
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d103      	bne.n	80154f4 <tcp_timer_needed+0x1c>
 80154ec:	4b08      	ldr	r3, [pc, #32]	; (8015510 <tcp_timer_needed+0x38>)
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d007      	beq.n	8015504 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80154f4:	4b04      	ldr	r3, [pc, #16]	; (8015508 <tcp_timer_needed+0x30>)
 80154f6:	2201      	movs	r2, #1
 80154f8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80154fa:	2200      	movs	r2, #0
 80154fc:	4905      	ldr	r1, [pc, #20]	; (8015514 <tcp_timer_needed+0x3c>)
 80154fe:	20fa      	movs	r0, #250	; 0xfa
 8015500:	f000 f8ca 	bl	8015698 <sys_timeout>
  }
}
 8015504:	bf00      	nop
 8015506:	bd80      	pop	{r7, pc}
 8015508:	20008840 	.word	0x20008840
 801550c:	2000fcf4 	.word	0x2000fcf4
 8015510:	2000fd04 	.word	0x2000fd04
 8015514:	08015491 	.word	0x08015491

08015518 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b086      	sub	sp, #24
 801551c:	af00      	add	r7, sp, #0
 801551e:	60f8      	str	r0, [r7, #12]
 8015520:	60b9      	str	r1, [r7, #8]
 8015522:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015524:	200a      	movs	r0, #10
 8015526:	f7f8 fe77 	bl	800e218 <memp_malloc>
 801552a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801552c:	693b      	ldr	r3, [r7, #16]
 801552e:	2b00      	cmp	r3, #0
 8015530:	d109      	bne.n	8015546 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015532:	693b      	ldr	r3, [r7, #16]
 8015534:	2b00      	cmp	r3, #0
 8015536:	d151      	bne.n	80155dc <sys_timeout_abs+0xc4>
 8015538:	4b2a      	ldr	r3, [pc, #168]	; (80155e4 <sys_timeout_abs+0xcc>)
 801553a:	22be      	movs	r2, #190	; 0xbe
 801553c:	492a      	ldr	r1, [pc, #168]	; (80155e8 <sys_timeout_abs+0xd0>)
 801553e:	482b      	ldr	r0, [pc, #172]	; (80155ec <sys_timeout_abs+0xd4>)
 8015540:	f004 f9be 	bl	80198c0 <iprintf>
    return;
 8015544:	e04a      	b.n	80155dc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015546:	693b      	ldr	r3, [r7, #16]
 8015548:	2200      	movs	r2, #0
 801554a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801554c:	693b      	ldr	r3, [r7, #16]
 801554e:	68ba      	ldr	r2, [r7, #8]
 8015550:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015552:	693b      	ldr	r3, [r7, #16]
 8015554:	687a      	ldr	r2, [r7, #4]
 8015556:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015558:	693b      	ldr	r3, [r7, #16]
 801555a:	68fa      	ldr	r2, [r7, #12]
 801555c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801555e:	4b24      	ldr	r3, [pc, #144]	; (80155f0 <sys_timeout_abs+0xd8>)
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d103      	bne.n	801556e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015566:	4a22      	ldr	r2, [pc, #136]	; (80155f0 <sys_timeout_abs+0xd8>)
 8015568:	693b      	ldr	r3, [r7, #16]
 801556a:	6013      	str	r3, [r2, #0]
    return;
 801556c:	e037      	b.n	80155de <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801556e:	693b      	ldr	r3, [r7, #16]
 8015570:	685a      	ldr	r2, [r3, #4]
 8015572:	4b1f      	ldr	r3, [pc, #124]	; (80155f0 <sys_timeout_abs+0xd8>)
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	685b      	ldr	r3, [r3, #4]
 8015578:	1ad3      	subs	r3, r2, r3
 801557a:	0fdb      	lsrs	r3, r3, #31
 801557c:	f003 0301 	and.w	r3, r3, #1
 8015580:	b2db      	uxtb	r3, r3
 8015582:	2b00      	cmp	r3, #0
 8015584:	d007      	beq.n	8015596 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015586:	4b1a      	ldr	r3, [pc, #104]	; (80155f0 <sys_timeout_abs+0xd8>)
 8015588:	681a      	ldr	r2, [r3, #0]
 801558a:	693b      	ldr	r3, [r7, #16]
 801558c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801558e:	4a18      	ldr	r2, [pc, #96]	; (80155f0 <sys_timeout_abs+0xd8>)
 8015590:	693b      	ldr	r3, [r7, #16]
 8015592:	6013      	str	r3, [r2, #0]
 8015594:	e023      	b.n	80155de <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015596:	4b16      	ldr	r3, [pc, #88]	; (80155f0 <sys_timeout_abs+0xd8>)
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	617b      	str	r3, [r7, #20]
 801559c:	e01a      	b.n	80155d4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801559e:	697b      	ldr	r3, [r7, #20]
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d00b      	beq.n	80155be <sys_timeout_abs+0xa6>
 80155a6:	693b      	ldr	r3, [r7, #16]
 80155a8:	685a      	ldr	r2, [r3, #4]
 80155aa:	697b      	ldr	r3, [r7, #20]
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	685b      	ldr	r3, [r3, #4]
 80155b0:	1ad3      	subs	r3, r2, r3
 80155b2:	0fdb      	lsrs	r3, r3, #31
 80155b4:	f003 0301 	and.w	r3, r3, #1
 80155b8:	b2db      	uxtb	r3, r3
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d007      	beq.n	80155ce <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80155be:	697b      	ldr	r3, [r7, #20]
 80155c0:	681a      	ldr	r2, [r3, #0]
 80155c2:	693b      	ldr	r3, [r7, #16]
 80155c4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80155c6:	697b      	ldr	r3, [r7, #20]
 80155c8:	693a      	ldr	r2, [r7, #16]
 80155ca:	601a      	str	r2, [r3, #0]
        break;
 80155cc:	e007      	b.n	80155de <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80155ce:	697b      	ldr	r3, [r7, #20]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	617b      	str	r3, [r7, #20]
 80155d4:	697b      	ldr	r3, [r7, #20]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d1e1      	bne.n	801559e <sys_timeout_abs+0x86>
 80155da:	e000      	b.n	80155de <sys_timeout_abs+0xc6>
    return;
 80155dc:	bf00      	nop
      }
    }
  }
}
 80155de:	3718      	adds	r7, #24
 80155e0:	46bd      	mov	sp, r7
 80155e2:	bd80      	pop	{r7, pc}
 80155e4:	0801fefc 	.word	0x0801fefc
 80155e8:	0801ff30 	.word	0x0801ff30
 80155ec:	0801ff70 	.word	0x0801ff70
 80155f0:	20008838 	.word	0x20008838

080155f4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b086      	sub	sp, #24
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015600:	697b      	ldr	r3, [r7, #20]
 8015602:	685b      	ldr	r3, [r3, #4]
 8015604:	4798      	blx	r3

  now = sys_now();
 8015606:	f7f2 ffed 	bl	80085e4 <sys_now>
 801560a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801560c:	697b      	ldr	r3, [r7, #20]
 801560e:	681a      	ldr	r2, [r3, #0]
 8015610:	4b0f      	ldr	r3, [pc, #60]	; (8015650 <lwip_cyclic_timer+0x5c>)
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	4413      	add	r3, r2
 8015616:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015618:	68fa      	ldr	r2, [r7, #12]
 801561a:	693b      	ldr	r3, [r7, #16]
 801561c:	1ad3      	subs	r3, r2, r3
 801561e:	0fdb      	lsrs	r3, r3, #31
 8015620:	f003 0301 	and.w	r3, r3, #1
 8015624:	b2db      	uxtb	r3, r3
 8015626:	2b00      	cmp	r3, #0
 8015628:	d009      	beq.n	801563e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801562a:	697b      	ldr	r3, [r7, #20]
 801562c:	681a      	ldr	r2, [r3, #0]
 801562e:	693b      	ldr	r3, [r7, #16]
 8015630:	4413      	add	r3, r2
 8015632:	687a      	ldr	r2, [r7, #4]
 8015634:	4907      	ldr	r1, [pc, #28]	; (8015654 <lwip_cyclic_timer+0x60>)
 8015636:	4618      	mov	r0, r3
 8015638:	f7ff ff6e 	bl	8015518 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801563c:	e004      	b.n	8015648 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801563e:	687a      	ldr	r2, [r7, #4]
 8015640:	4904      	ldr	r1, [pc, #16]	; (8015654 <lwip_cyclic_timer+0x60>)
 8015642:	68f8      	ldr	r0, [r7, #12]
 8015644:	f7ff ff68 	bl	8015518 <sys_timeout_abs>
}
 8015648:	bf00      	nop
 801564a:	3718      	adds	r7, #24
 801564c:	46bd      	mov	sp, r7
 801564e:	bd80      	pop	{r7, pc}
 8015650:	2000883c 	.word	0x2000883c
 8015654:	080155f5 	.word	0x080155f5

08015658 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015658:	b580      	push	{r7, lr}
 801565a:	b082      	sub	sp, #8
 801565c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801565e:	2301      	movs	r3, #1
 8015660:	607b      	str	r3, [r7, #4]
 8015662:	e00e      	b.n	8015682 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015664:	4a0a      	ldr	r2, [pc, #40]	; (8015690 <sys_timeouts_init+0x38>)
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	00db      	lsls	r3, r3, #3
 8015670:	4a07      	ldr	r2, [pc, #28]	; (8015690 <sys_timeouts_init+0x38>)
 8015672:	4413      	add	r3, r2
 8015674:	461a      	mov	r2, r3
 8015676:	4907      	ldr	r1, [pc, #28]	; (8015694 <sys_timeouts_init+0x3c>)
 8015678:	f000 f80e 	bl	8015698 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	3301      	adds	r3, #1
 8015680:	607b      	str	r3, [r7, #4]
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	2b02      	cmp	r3, #2
 8015686:	d9ed      	bls.n	8015664 <sys_timeouts_init+0xc>
  }
}
 8015688:	bf00      	nop
 801568a:	3708      	adds	r7, #8
 801568c:	46bd      	mov	sp, r7
 801568e:	bd80      	pop	{r7, pc}
 8015690:	08020b20 	.word	0x08020b20
 8015694:	080155f5 	.word	0x080155f5

08015698 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b086      	sub	sp, #24
 801569c:	af00      	add	r7, sp, #0
 801569e:	60f8      	str	r0, [r7, #12]
 80156a0:	60b9      	str	r1, [r7, #8]
 80156a2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80156a4:	68fb      	ldr	r3, [r7, #12]
 80156a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80156aa:	d306      	bcc.n	80156ba <sys_timeout+0x22>
 80156ac:	4b0a      	ldr	r3, [pc, #40]	; (80156d8 <sys_timeout+0x40>)
 80156ae:	f240 1229 	movw	r2, #297	; 0x129
 80156b2:	490a      	ldr	r1, [pc, #40]	; (80156dc <sys_timeout+0x44>)
 80156b4:	480a      	ldr	r0, [pc, #40]	; (80156e0 <sys_timeout+0x48>)
 80156b6:	f004 f903 	bl	80198c0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80156ba:	f7f2 ff93 	bl	80085e4 <sys_now>
 80156be:	4602      	mov	r2, r0
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	4413      	add	r3, r2
 80156c4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80156c6:	687a      	ldr	r2, [r7, #4]
 80156c8:	68b9      	ldr	r1, [r7, #8]
 80156ca:	6978      	ldr	r0, [r7, #20]
 80156cc:	f7ff ff24 	bl	8015518 <sys_timeout_abs>
#endif
}
 80156d0:	bf00      	nop
 80156d2:	3718      	adds	r7, #24
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bd80      	pop	{r7, pc}
 80156d8:	0801fefc 	.word	0x0801fefc
 80156dc:	0801ff98 	.word	0x0801ff98
 80156e0:	0801ff70 	.word	0x0801ff70

080156e4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b084      	sub	sp, #16
 80156e8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80156ea:	f7f2 ff7b 	bl	80085e4 <sys_now>
 80156ee:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80156f0:	4b17      	ldr	r3, [pc, #92]	; (8015750 <sys_check_timeouts+0x6c>)
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80156f6:	68bb      	ldr	r3, [r7, #8]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d022      	beq.n	8015742 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80156fc:	68bb      	ldr	r3, [r7, #8]
 80156fe:	685b      	ldr	r3, [r3, #4]
 8015700:	68fa      	ldr	r2, [r7, #12]
 8015702:	1ad3      	subs	r3, r2, r3
 8015704:	0fdb      	lsrs	r3, r3, #31
 8015706:	f003 0301 	and.w	r3, r3, #1
 801570a:	b2db      	uxtb	r3, r3
 801570c:	2b00      	cmp	r3, #0
 801570e:	d11a      	bne.n	8015746 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015710:	68bb      	ldr	r3, [r7, #8]
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	4a0e      	ldr	r2, [pc, #56]	; (8015750 <sys_check_timeouts+0x6c>)
 8015716:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8015718:	68bb      	ldr	r3, [r7, #8]
 801571a:	689b      	ldr	r3, [r3, #8]
 801571c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801571e:	68bb      	ldr	r3, [r7, #8]
 8015720:	68db      	ldr	r3, [r3, #12]
 8015722:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015724:	68bb      	ldr	r3, [r7, #8]
 8015726:	685b      	ldr	r3, [r3, #4]
 8015728:	4a0a      	ldr	r2, [pc, #40]	; (8015754 <sys_check_timeouts+0x70>)
 801572a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801572c:	68b9      	ldr	r1, [r7, #8]
 801572e:	200a      	movs	r0, #10
 8015730:	f7f8 fdc4 	bl	800e2bc <memp_free>
    if (handler != NULL) {
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d0da      	beq.n	80156f0 <sys_check_timeouts+0xc>
      handler(arg);
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	6838      	ldr	r0, [r7, #0]
 801573e:	4798      	blx	r3
  do {
 8015740:	e7d6      	b.n	80156f0 <sys_check_timeouts+0xc>
      return;
 8015742:	bf00      	nop
 8015744:	e000      	b.n	8015748 <sys_check_timeouts+0x64>
      return;
 8015746:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8015748:	3710      	adds	r7, #16
 801574a:	46bd      	mov	sp, r7
 801574c:	bd80      	pop	{r7, pc}
 801574e:	bf00      	nop
 8015750:	20008838 	.word	0x20008838
 8015754:	2000883c 	.word	0x2000883c

08015758 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b082      	sub	sp, #8
 801575c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801575e:	4b16      	ldr	r3, [pc, #88]	; (80157b8 <sys_timeouts_sleeptime+0x60>)
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d102      	bne.n	801576c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8015766:	f04f 33ff 	mov.w	r3, #4294967295
 801576a:	e020      	b.n	80157ae <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801576c:	f7f2 ff3a 	bl	80085e4 <sys_now>
 8015770:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015772:	4b11      	ldr	r3, [pc, #68]	; (80157b8 <sys_timeouts_sleeptime+0x60>)
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	685a      	ldr	r2, [r3, #4]
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	1ad3      	subs	r3, r2, r3
 801577c:	0fdb      	lsrs	r3, r3, #31
 801577e:	f003 0301 	and.w	r3, r3, #1
 8015782:	b2db      	uxtb	r3, r3
 8015784:	2b00      	cmp	r3, #0
 8015786:	d001      	beq.n	801578c <sys_timeouts_sleeptime+0x34>
    return 0;
 8015788:	2300      	movs	r3, #0
 801578a:	e010      	b.n	80157ae <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801578c:	4b0a      	ldr	r3, [pc, #40]	; (80157b8 <sys_timeouts_sleeptime+0x60>)
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	685a      	ldr	r2, [r3, #4]
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	1ad3      	subs	r3, r2, r3
 8015796:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8015798:	683b      	ldr	r3, [r7, #0]
 801579a:	2b00      	cmp	r3, #0
 801579c:	da06      	bge.n	80157ac <sys_timeouts_sleeptime+0x54>
 801579e:	4b07      	ldr	r3, [pc, #28]	; (80157bc <sys_timeouts_sleeptime+0x64>)
 80157a0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80157a4:	4906      	ldr	r1, [pc, #24]	; (80157c0 <sys_timeouts_sleeptime+0x68>)
 80157a6:	4807      	ldr	r0, [pc, #28]	; (80157c4 <sys_timeouts_sleeptime+0x6c>)
 80157a8:	f004 f88a 	bl	80198c0 <iprintf>
    return ret;
 80157ac:	683b      	ldr	r3, [r7, #0]
  }
}
 80157ae:	4618      	mov	r0, r3
 80157b0:	3708      	adds	r7, #8
 80157b2:	46bd      	mov	sp, r7
 80157b4:	bd80      	pop	{r7, pc}
 80157b6:	bf00      	nop
 80157b8:	20008838 	.word	0x20008838
 80157bc:	0801fefc 	.word	0x0801fefc
 80157c0:	0801ffd0 	.word	0x0801ffd0
 80157c4:	0801ff70 	.word	0x0801ff70

080157c8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80157c8:	b580      	push	{r7, lr}
 80157ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80157cc:	f004 f8f4 	bl	80199b8 <rand>
 80157d0:	4603      	mov	r3, r0
 80157d2:	b29b      	uxth	r3, r3
 80157d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80157d8:	b29b      	uxth	r3, r3
 80157da:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80157de:	b29a      	uxth	r2, r3
 80157e0:	4b01      	ldr	r3, [pc, #4]	; (80157e8 <udp_init+0x20>)
 80157e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80157e4:	bf00      	nop
 80157e6:	bd80      	pop	{r7, pc}
 80157e8:	20000018 	.word	0x20000018

080157ec <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80157ec:	b480      	push	{r7}
 80157ee:	b083      	sub	sp, #12
 80157f0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80157f2:	2300      	movs	r3, #0
 80157f4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80157f6:	4b17      	ldr	r3, [pc, #92]	; (8015854 <udp_new_port+0x68>)
 80157f8:	881b      	ldrh	r3, [r3, #0]
 80157fa:	1c5a      	adds	r2, r3, #1
 80157fc:	b291      	uxth	r1, r2
 80157fe:	4a15      	ldr	r2, [pc, #84]	; (8015854 <udp_new_port+0x68>)
 8015800:	8011      	strh	r1, [r2, #0]
 8015802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015806:	4293      	cmp	r3, r2
 8015808:	d103      	bne.n	8015812 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801580a:	4b12      	ldr	r3, [pc, #72]	; (8015854 <udp_new_port+0x68>)
 801580c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015810:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015812:	4b11      	ldr	r3, [pc, #68]	; (8015858 <udp_new_port+0x6c>)
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	603b      	str	r3, [r7, #0]
 8015818:	e011      	b.n	801583e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801581a:	683b      	ldr	r3, [r7, #0]
 801581c:	8a5a      	ldrh	r2, [r3, #18]
 801581e:	4b0d      	ldr	r3, [pc, #52]	; (8015854 <udp_new_port+0x68>)
 8015820:	881b      	ldrh	r3, [r3, #0]
 8015822:	429a      	cmp	r2, r3
 8015824:	d108      	bne.n	8015838 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8015826:	88fb      	ldrh	r3, [r7, #6]
 8015828:	3301      	adds	r3, #1
 801582a:	80fb      	strh	r3, [r7, #6]
 801582c:	88fb      	ldrh	r3, [r7, #6]
 801582e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015832:	d3e0      	bcc.n	80157f6 <udp_new_port+0xa>
        return 0;
 8015834:	2300      	movs	r3, #0
 8015836:	e007      	b.n	8015848 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015838:	683b      	ldr	r3, [r7, #0]
 801583a:	68db      	ldr	r3, [r3, #12]
 801583c:	603b      	str	r3, [r7, #0]
 801583e:	683b      	ldr	r3, [r7, #0]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d1ea      	bne.n	801581a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015844:	4b03      	ldr	r3, [pc, #12]	; (8015854 <udp_new_port+0x68>)
 8015846:	881b      	ldrh	r3, [r3, #0]
}
 8015848:	4618      	mov	r0, r3
 801584a:	370c      	adds	r7, #12
 801584c:	46bd      	mov	sp, r7
 801584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015852:	4770      	bx	lr
 8015854:	20000018 	.word	0x20000018
 8015858:	2000fd0c 	.word	0x2000fd0c

0801585c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801585c:	b580      	push	{r7, lr}
 801585e:	b084      	sub	sp, #16
 8015860:	af00      	add	r7, sp, #0
 8015862:	60f8      	str	r0, [r7, #12]
 8015864:	60b9      	str	r1, [r7, #8]
 8015866:	4613      	mov	r3, r2
 8015868:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d105      	bne.n	801587c <udp_input_local_match+0x20>
 8015870:	4b27      	ldr	r3, [pc, #156]	; (8015910 <udp_input_local_match+0xb4>)
 8015872:	2287      	movs	r2, #135	; 0x87
 8015874:	4927      	ldr	r1, [pc, #156]	; (8015914 <udp_input_local_match+0xb8>)
 8015876:	4828      	ldr	r0, [pc, #160]	; (8015918 <udp_input_local_match+0xbc>)
 8015878:	f004 f822 	bl	80198c0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801587c:	68bb      	ldr	r3, [r7, #8]
 801587e:	2b00      	cmp	r3, #0
 8015880:	d105      	bne.n	801588e <udp_input_local_match+0x32>
 8015882:	4b23      	ldr	r3, [pc, #140]	; (8015910 <udp_input_local_match+0xb4>)
 8015884:	2288      	movs	r2, #136	; 0x88
 8015886:	4925      	ldr	r1, [pc, #148]	; (801591c <udp_input_local_match+0xc0>)
 8015888:	4823      	ldr	r0, [pc, #140]	; (8015918 <udp_input_local_match+0xbc>)
 801588a:	f004 f819 	bl	80198c0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	7a1b      	ldrb	r3, [r3, #8]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d00b      	beq.n	80158ae <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	7a1a      	ldrb	r2, [r3, #8]
 801589a:	4b21      	ldr	r3, [pc, #132]	; (8015920 <udp_input_local_match+0xc4>)
 801589c:	685b      	ldr	r3, [r3, #4]
 801589e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80158a2:	3301      	adds	r3, #1
 80158a4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80158a6:	429a      	cmp	r2, r3
 80158a8:	d001      	beq.n	80158ae <udp_input_local_match+0x52>
    return 0;
 80158aa:	2300      	movs	r3, #0
 80158ac:	e02b      	b.n	8015906 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80158ae:	79fb      	ldrb	r3, [r7, #7]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d018      	beq.n	80158e6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d013      	beq.n	80158e2 <udp_input_local_match+0x86>
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d00f      	beq.n	80158e2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80158c2:	4b17      	ldr	r3, [pc, #92]	; (8015920 <udp_input_local_match+0xc4>)
 80158c4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80158c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158ca:	d00a      	beq.n	80158e2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	681a      	ldr	r2, [r3, #0]
 80158d0:	4b13      	ldr	r3, [pc, #76]	; (8015920 <udp_input_local_match+0xc4>)
 80158d2:	695b      	ldr	r3, [r3, #20]
 80158d4:	405a      	eors	r2, r3
 80158d6:	68bb      	ldr	r3, [r7, #8]
 80158d8:	3308      	adds	r3, #8
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d110      	bne.n	8015904 <udp_input_local_match+0xa8>
          return 1;
 80158e2:	2301      	movs	r3, #1
 80158e4:	e00f      	b.n	8015906 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d009      	beq.n	8015900 <udp_input_local_match+0xa4>
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d005      	beq.n	8015900 <udp_input_local_match+0xa4>
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	681a      	ldr	r2, [r3, #0]
 80158f8:	4b09      	ldr	r3, [pc, #36]	; (8015920 <udp_input_local_match+0xc4>)
 80158fa:	695b      	ldr	r3, [r3, #20]
 80158fc:	429a      	cmp	r2, r3
 80158fe:	d101      	bne.n	8015904 <udp_input_local_match+0xa8>
        return 1;
 8015900:	2301      	movs	r3, #1
 8015902:	e000      	b.n	8015906 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015904:	2300      	movs	r3, #0
}
 8015906:	4618      	mov	r0, r3
 8015908:	3710      	adds	r7, #16
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}
 801590e:	bf00      	nop
 8015910:	0801ffe4 	.word	0x0801ffe4
 8015914:	08020014 	.word	0x08020014
 8015918:	08020038 	.word	0x08020038
 801591c:	08020060 	.word	0x08020060
 8015920:	2000c5e0 	.word	0x2000c5e0

08015924 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015924:	b590      	push	{r4, r7, lr}
 8015926:	b08d      	sub	sp, #52	; 0x34
 8015928:	af02      	add	r7, sp, #8
 801592a:	6078      	str	r0, [r7, #4]
 801592c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801592e:	2300      	movs	r3, #0
 8015930:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d105      	bne.n	8015944 <udp_input+0x20>
 8015938:	4b7c      	ldr	r3, [pc, #496]	; (8015b2c <udp_input+0x208>)
 801593a:	22cf      	movs	r2, #207	; 0xcf
 801593c:	497c      	ldr	r1, [pc, #496]	; (8015b30 <udp_input+0x20c>)
 801593e:	487d      	ldr	r0, [pc, #500]	; (8015b34 <udp_input+0x210>)
 8015940:	f003 ffbe 	bl	80198c0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015944:	683b      	ldr	r3, [r7, #0]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d105      	bne.n	8015956 <udp_input+0x32>
 801594a:	4b78      	ldr	r3, [pc, #480]	; (8015b2c <udp_input+0x208>)
 801594c:	22d0      	movs	r2, #208	; 0xd0
 801594e:	497a      	ldr	r1, [pc, #488]	; (8015b38 <udp_input+0x214>)
 8015950:	4878      	ldr	r0, [pc, #480]	; (8015b34 <udp_input+0x210>)
 8015952:	f003 ffb5 	bl	80198c0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	895b      	ldrh	r3, [r3, #10]
 801595a:	2b07      	cmp	r3, #7
 801595c:	d803      	bhi.n	8015966 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801595e:	6878      	ldr	r0, [r7, #4]
 8015960:	f7f9 fad4 	bl	800ef0c <pbuf_free>
    goto end;
 8015964:	e0de      	b.n	8015b24 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	685b      	ldr	r3, [r3, #4]
 801596a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801596c:	4b73      	ldr	r3, [pc, #460]	; (8015b3c <udp_input+0x218>)
 801596e:	695a      	ldr	r2, [r3, #20]
 8015970:	4b72      	ldr	r3, [pc, #456]	; (8015b3c <udp_input+0x218>)
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	4619      	mov	r1, r3
 8015976:	4610      	mov	r0, r2
 8015978:	f001 ffec 	bl	8017954 <ip4_addr_isbroadcast_u32>
 801597c:	4603      	mov	r3, r0
 801597e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015980:	697b      	ldr	r3, [r7, #20]
 8015982:	881b      	ldrh	r3, [r3, #0]
 8015984:	b29b      	uxth	r3, r3
 8015986:	4618      	mov	r0, r3
 8015988:	f7f7 ff90 	bl	800d8ac <lwip_htons>
 801598c:	4603      	mov	r3, r0
 801598e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015990:	697b      	ldr	r3, [r7, #20]
 8015992:	885b      	ldrh	r3, [r3, #2]
 8015994:	b29b      	uxth	r3, r3
 8015996:	4618      	mov	r0, r3
 8015998:	f7f7 ff88 	bl	800d8ac <lwip_htons>
 801599c:	4603      	mov	r3, r0
 801599e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80159a0:	2300      	movs	r3, #0
 80159a2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80159a4:	2300      	movs	r3, #0
 80159a6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80159a8:	2300      	movs	r3, #0
 80159aa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80159ac:	4b64      	ldr	r3, [pc, #400]	; (8015b40 <udp_input+0x21c>)
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	627b      	str	r3, [r7, #36]	; 0x24
 80159b2:	e054      	b.n	8015a5e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80159b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159b6:	8a5b      	ldrh	r3, [r3, #18]
 80159b8:	89fa      	ldrh	r2, [r7, #14]
 80159ba:	429a      	cmp	r2, r3
 80159bc:	d14a      	bne.n	8015a54 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80159be:	7cfb      	ldrb	r3, [r7, #19]
 80159c0:	461a      	mov	r2, r3
 80159c2:	6839      	ldr	r1, [r7, #0]
 80159c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80159c6:	f7ff ff49 	bl	801585c <udp_input_local_match>
 80159ca:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d041      	beq.n	8015a54 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80159d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159d2:	7c1b      	ldrb	r3, [r3, #16]
 80159d4:	f003 0304 	and.w	r3, r3, #4
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d11d      	bne.n	8015a18 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80159dc:	69fb      	ldr	r3, [r7, #28]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d102      	bne.n	80159e8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80159e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159e4:	61fb      	str	r3, [r7, #28]
 80159e6:	e017      	b.n	8015a18 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80159e8:	7cfb      	ldrb	r3, [r7, #19]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d014      	beq.n	8015a18 <udp_input+0xf4>
 80159ee:	4b53      	ldr	r3, [pc, #332]	; (8015b3c <udp_input+0x218>)
 80159f0:	695b      	ldr	r3, [r3, #20]
 80159f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159f6:	d10f      	bne.n	8015a18 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80159f8:	69fb      	ldr	r3, [r7, #28]
 80159fa:	681a      	ldr	r2, [r3, #0]
 80159fc:	683b      	ldr	r3, [r7, #0]
 80159fe:	3304      	adds	r3, #4
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	429a      	cmp	r2, r3
 8015a04:	d008      	beq.n	8015a18 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a08:	681a      	ldr	r2, [r3, #0]
 8015a0a:	683b      	ldr	r3, [r7, #0]
 8015a0c:	3304      	adds	r3, #4
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	429a      	cmp	r2, r3
 8015a12:	d101      	bne.n	8015a18 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a16:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a1a:	8a9b      	ldrh	r3, [r3, #20]
 8015a1c:	8a3a      	ldrh	r2, [r7, #16]
 8015a1e:	429a      	cmp	r2, r3
 8015a20:	d118      	bne.n	8015a54 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a24:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d005      	beq.n	8015a36 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8015a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a2c:	685a      	ldr	r2, [r3, #4]
 8015a2e:	4b43      	ldr	r3, [pc, #268]	; (8015b3c <udp_input+0x218>)
 8015a30:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015a32:	429a      	cmp	r2, r3
 8015a34:	d10e      	bne.n	8015a54 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015a36:	6a3b      	ldr	r3, [r7, #32]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d014      	beq.n	8015a66 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a3e:	68da      	ldr	r2, [r3, #12]
 8015a40:	6a3b      	ldr	r3, [r7, #32]
 8015a42:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015a44:	4b3e      	ldr	r3, [pc, #248]	; (8015b40 <udp_input+0x21c>)
 8015a46:	681a      	ldr	r2, [r3, #0]
 8015a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a4a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015a4c:	4a3c      	ldr	r2, [pc, #240]	; (8015b40 <udp_input+0x21c>)
 8015a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a50:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015a52:	e008      	b.n	8015a66 <udp_input+0x142>
      }
    }

    prev = pcb;
 8015a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a56:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a5a:	68db      	ldr	r3, [r3, #12]
 8015a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8015a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d1a7      	bne.n	80159b4 <udp_input+0x90>
 8015a64:	e000      	b.n	8015a68 <udp_input+0x144>
        break;
 8015a66:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d101      	bne.n	8015a72 <udp_input+0x14e>
    pcb = uncon_pcb;
 8015a6e:	69fb      	ldr	r3, [r7, #28]
 8015a70:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d002      	beq.n	8015a7e <udp_input+0x15a>
    for_us = 1;
 8015a78:	2301      	movs	r3, #1
 8015a7a:	76fb      	strb	r3, [r7, #27]
 8015a7c:	e00a      	b.n	8015a94 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015a7e:	683b      	ldr	r3, [r7, #0]
 8015a80:	3304      	adds	r3, #4
 8015a82:	681a      	ldr	r2, [r3, #0]
 8015a84:	4b2d      	ldr	r3, [pc, #180]	; (8015b3c <udp_input+0x218>)
 8015a86:	695b      	ldr	r3, [r3, #20]
 8015a88:	429a      	cmp	r2, r3
 8015a8a:	bf0c      	ite	eq
 8015a8c:	2301      	moveq	r3, #1
 8015a8e:	2300      	movne	r3, #0
 8015a90:	b2db      	uxtb	r3, r3
 8015a92:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015a94:	7efb      	ldrb	r3, [r7, #27]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d041      	beq.n	8015b1e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8015a9a:	2108      	movs	r1, #8
 8015a9c:	6878      	ldr	r0, [r7, #4]
 8015a9e:	f7f9 f9af 	bl	800ee00 <pbuf_remove_header>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d00a      	beq.n	8015abe <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015aa8:	4b20      	ldr	r3, [pc, #128]	; (8015b2c <udp_input+0x208>)
 8015aaa:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8015aae:	4925      	ldr	r1, [pc, #148]	; (8015b44 <udp_input+0x220>)
 8015ab0:	4820      	ldr	r0, [pc, #128]	; (8015b34 <udp_input+0x210>)
 8015ab2:	f003 ff05 	bl	80198c0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015ab6:	6878      	ldr	r0, [r7, #4]
 8015ab8:	f7f9 fa28 	bl	800ef0c <pbuf_free>
      goto end;
 8015abc:	e032      	b.n	8015b24 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8015abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d012      	beq.n	8015aea <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ac6:	699b      	ldr	r3, [r3, #24]
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d00a      	beq.n	8015ae2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ace:	699c      	ldr	r4, [r3, #24]
 8015ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ad2:	69d8      	ldr	r0, [r3, #28]
 8015ad4:	8a3b      	ldrh	r3, [r7, #16]
 8015ad6:	9300      	str	r3, [sp, #0]
 8015ad8:	4b1b      	ldr	r3, [pc, #108]	; (8015b48 <udp_input+0x224>)
 8015ada:	687a      	ldr	r2, [r7, #4]
 8015adc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015ade:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015ae0:	e021      	b.n	8015b26 <udp_input+0x202>
        pbuf_free(p);
 8015ae2:	6878      	ldr	r0, [r7, #4]
 8015ae4:	f7f9 fa12 	bl	800ef0c <pbuf_free>
        goto end;
 8015ae8:	e01c      	b.n	8015b24 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8015aea:	7cfb      	ldrb	r3, [r7, #19]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d112      	bne.n	8015b16 <udp_input+0x1f2>
 8015af0:	4b12      	ldr	r3, [pc, #72]	; (8015b3c <udp_input+0x218>)
 8015af2:	695b      	ldr	r3, [r3, #20]
 8015af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015af8:	2be0      	cmp	r3, #224	; 0xe0
 8015afa:	d00c      	beq.n	8015b16 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015afc:	4b0f      	ldr	r3, [pc, #60]	; (8015b3c <udp_input+0x218>)
 8015afe:	899b      	ldrh	r3, [r3, #12]
 8015b00:	3308      	adds	r3, #8
 8015b02:	b29b      	uxth	r3, r3
 8015b04:	b21b      	sxth	r3, r3
 8015b06:	4619      	mov	r1, r3
 8015b08:	6878      	ldr	r0, [r7, #4]
 8015b0a:	f7f9 f9ec 	bl	800eee6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015b0e:	2103      	movs	r1, #3
 8015b10:	6878      	ldr	r0, [r7, #4]
 8015b12:	f001 fc01 	bl	8017318 <icmp_dest_unreach>
      pbuf_free(p);
 8015b16:	6878      	ldr	r0, [r7, #4]
 8015b18:	f7f9 f9f8 	bl	800ef0c <pbuf_free>
  return;
 8015b1c:	e003      	b.n	8015b26 <udp_input+0x202>
    pbuf_free(p);
 8015b1e:	6878      	ldr	r0, [r7, #4]
 8015b20:	f7f9 f9f4 	bl	800ef0c <pbuf_free>
  return;
 8015b24:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015b26:	372c      	adds	r7, #44	; 0x2c
 8015b28:	46bd      	mov	sp, r7
 8015b2a:	bd90      	pop	{r4, r7, pc}
 8015b2c:	0801ffe4 	.word	0x0801ffe4
 8015b30:	08020088 	.word	0x08020088
 8015b34:	08020038 	.word	0x08020038
 8015b38:	080200a0 	.word	0x080200a0
 8015b3c:	2000c5e0 	.word	0x2000c5e0
 8015b40:	2000fd0c 	.word	0x2000fd0c
 8015b44:	080200bc 	.word	0x080200bc
 8015b48:	2000c5f0 	.word	0x2000c5f0

08015b4c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	b082      	sub	sp, #8
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	6078      	str	r0, [r7, #4]
 8015b54:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d109      	bne.n	8015b70 <udp_send+0x24>
 8015b5c:	4b11      	ldr	r3, [pc, #68]	; (8015ba4 <udp_send+0x58>)
 8015b5e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8015b62:	4911      	ldr	r1, [pc, #68]	; (8015ba8 <udp_send+0x5c>)
 8015b64:	4811      	ldr	r0, [pc, #68]	; (8015bac <udp_send+0x60>)
 8015b66:	f003 feab 	bl	80198c0 <iprintf>
 8015b6a:	f06f 030f 	mvn.w	r3, #15
 8015b6e:	e015      	b.n	8015b9c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8015b70:	683b      	ldr	r3, [r7, #0]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d109      	bne.n	8015b8a <udp_send+0x3e>
 8015b76:	4b0b      	ldr	r3, [pc, #44]	; (8015ba4 <udp_send+0x58>)
 8015b78:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8015b7c:	490c      	ldr	r1, [pc, #48]	; (8015bb0 <udp_send+0x64>)
 8015b7e:	480b      	ldr	r0, [pc, #44]	; (8015bac <udp_send+0x60>)
 8015b80:	f003 fe9e 	bl	80198c0 <iprintf>
 8015b84:	f06f 030f 	mvn.w	r3, #15
 8015b88:	e008      	b.n	8015b9c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	1d1a      	adds	r2, r3, #4
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	8a9b      	ldrh	r3, [r3, #20]
 8015b92:	6839      	ldr	r1, [r7, #0]
 8015b94:	6878      	ldr	r0, [r7, #4]
 8015b96:	f000 f80d 	bl	8015bb4 <udp_sendto>
 8015b9a:	4603      	mov	r3, r0
}
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	3708      	adds	r7, #8
 8015ba0:	46bd      	mov	sp, r7
 8015ba2:	bd80      	pop	{r7, pc}
 8015ba4:	0801ffe4 	.word	0x0801ffe4
 8015ba8:	080200d8 	.word	0x080200d8
 8015bac:	08020038 	.word	0x08020038
 8015bb0:	080200f0 	.word	0x080200f0

08015bb4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b088      	sub	sp, #32
 8015bb8:	af02      	add	r7, sp, #8
 8015bba:	60f8      	str	r0, [r7, #12]
 8015bbc:	60b9      	str	r1, [r7, #8]
 8015bbe:	607a      	str	r2, [r7, #4]
 8015bc0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d109      	bne.n	8015bdc <udp_sendto+0x28>
 8015bc8:	4b23      	ldr	r3, [pc, #140]	; (8015c58 <udp_sendto+0xa4>)
 8015bca:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015bce:	4923      	ldr	r1, [pc, #140]	; (8015c5c <udp_sendto+0xa8>)
 8015bd0:	4823      	ldr	r0, [pc, #140]	; (8015c60 <udp_sendto+0xac>)
 8015bd2:	f003 fe75 	bl	80198c0 <iprintf>
 8015bd6:	f06f 030f 	mvn.w	r3, #15
 8015bda:	e038      	b.n	8015c4e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8015bdc:	68bb      	ldr	r3, [r7, #8]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d109      	bne.n	8015bf6 <udp_sendto+0x42>
 8015be2:	4b1d      	ldr	r3, [pc, #116]	; (8015c58 <udp_sendto+0xa4>)
 8015be4:	f240 2219 	movw	r2, #537	; 0x219
 8015be8:	491e      	ldr	r1, [pc, #120]	; (8015c64 <udp_sendto+0xb0>)
 8015bea:	481d      	ldr	r0, [pc, #116]	; (8015c60 <udp_sendto+0xac>)
 8015bec:	f003 fe68 	bl	80198c0 <iprintf>
 8015bf0:	f06f 030f 	mvn.w	r3, #15
 8015bf4:	e02b      	b.n	8015c4e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d109      	bne.n	8015c10 <udp_sendto+0x5c>
 8015bfc:	4b16      	ldr	r3, [pc, #88]	; (8015c58 <udp_sendto+0xa4>)
 8015bfe:	f240 221a 	movw	r2, #538	; 0x21a
 8015c02:	4919      	ldr	r1, [pc, #100]	; (8015c68 <udp_sendto+0xb4>)
 8015c04:	4816      	ldr	r0, [pc, #88]	; (8015c60 <udp_sendto+0xac>)
 8015c06:	f003 fe5b 	bl	80198c0 <iprintf>
 8015c0a:	f06f 030f 	mvn.w	r3, #15
 8015c0e:	e01e      	b.n	8015c4e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	7a1b      	ldrb	r3, [r3, #8]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d006      	beq.n	8015c26 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	7a1b      	ldrb	r3, [r3, #8]
 8015c1c:	4618      	mov	r0, r3
 8015c1e:	f7f8 fdeb 	bl	800e7f8 <netif_get_by_index>
 8015c22:	6178      	str	r0, [r7, #20]
 8015c24:	e003      	b.n	8015c2e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8015c26:	6878      	ldr	r0, [r7, #4]
 8015c28:	f001 fc00 	bl	801742c <ip4_route>
 8015c2c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8015c2e:	697b      	ldr	r3, [r7, #20]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d102      	bne.n	8015c3a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8015c34:	f06f 0303 	mvn.w	r3, #3
 8015c38:	e009      	b.n	8015c4e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8015c3a:	887a      	ldrh	r2, [r7, #2]
 8015c3c:	697b      	ldr	r3, [r7, #20]
 8015c3e:	9300      	str	r3, [sp, #0]
 8015c40:	4613      	mov	r3, r2
 8015c42:	687a      	ldr	r2, [r7, #4]
 8015c44:	68b9      	ldr	r1, [r7, #8]
 8015c46:	68f8      	ldr	r0, [r7, #12]
 8015c48:	f000 f810 	bl	8015c6c <udp_sendto_if>
 8015c4c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015c4e:	4618      	mov	r0, r3
 8015c50:	3718      	adds	r7, #24
 8015c52:	46bd      	mov	sp, r7
 8015c54:	bd80      	pop	{r7, pc}
 8015c56:	bf00      	nop
 8015c58:	0801ffe4 	.word	0x0801ffe4
 8015c5c:	08020108 	.word	0x08020108
 8015c60:	08020038 	.word	0x08020038
 8015c64:	08020120 	.word	0x08020120
 8015c68:	0802013c 	.word	0x0802013c

08015c6c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b088      	sub	sp, #32
 8015c70:	af02      	add	r7, sp, #8
 8015c72:	60f8      	str	r0, [r7, #12]
 8015c74:	60b9      	str	r1, [r7, #8]
 8015c76:	607a      	str	r2, [r7, #4]
 8015c78:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d109      	bne.n	8015c94 <udp_sendto_if+0x28>
 8015c80:	4b2e      	ldr	r3, [pc, #184]	; (8015d3c <udp_sendto_if+0xd0>)
 8015c82:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015c86:	492e      	ldr	r1, [pc, #184]	; (8015d40 <udp_sendto_if+0xd4>)
 8015c88:	482e      	ldr	r0, [pc, #184]	; (8015d44 <udp_sendto_if+0xd8>)
 8015c8a:	f003 fe19 	bl	80198c0 <iprintf>
 8015c8e:	f06f 030f 	mvn.w	r3, #15
 8015c92:	e04f      	b.n	8015d34 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015c94:	68bb      	ldr	r3, [r7, #8]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d109      	bne.n	8015cae <udp_sendto_if+0x42>
 8015c9a:	4b28      	ldr	r3, [pc, #160]	; (8015d3c <udp_sendto_if+0xd0>)
 8015c9c:	f240 2281 	movw	r2, #641	; 0x281
 8015ca0:	4929      	ldr	r1, [pc, #164]	; (8015d48 <udp_sendto_if+0xdc>)
 8015ca2:	4828      	ldr	r0, [pc, #160]	; (8015d44 <udp_sendto_if+0xd8>)
 8015ca4:	f003 fe0c 	bl	80198c0 <iprintf>
 8015ca8:	f06f 030f 	mvn.w	r3, #15
 8015cac:	e042      	b.n	8015d34 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d109      	bne.n	8015cc8 <udp_sendto_if+0x5c>
 8015cb4:	4b21      	ldr	r3, [pc, #132]	; (8015d3c <udp_sendto_if+0xd0>)
 8015cb6:	f240 2282 	movw	r2, #642	; 0x282
 8015cba:	4924      	ldr	r1, [pc, #144]	; (8015d4c <udp_sendto_if+0xe0>)
 8015cbc:	4821      	ldr	r0, [pc, #132]	; (8015d44 <udp_sendto_if+0xd8>)
 8015cbe:	f003 fdff 	bl	80198c0 <iprintf>
 8015cc2:	f06f 030f 	mvn.w	r3, #15
 8015cc6:	e035      	b.n	8015d34 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8015cc8:	6a3b      	ldr	r3, [r7, #32]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d109      	bne.n	8015ce2 <udp_sendto_if+0x76>
 8015cce:	4b1b      	ldr	r3, [pc, #108]	; (8015d3c <udp_sendto_if+0xd0>)
 8015cd0:	f240 2283 	movw	r2, #643	; 0x283
 8015cd4:	491e      	ldr	r1, [pc, #120]	; (8015d50 <udp_sendto_if+0xe4>)
 8015cd6:	481b      	ldr	r0, [pc, #108]	; (8015d44 <udp_sendto_if+0xd8>)
 8015cd8:	f003 fdf2 	bl	80198c0 <iprintf>
 8015cdc:	f06f 030f 	mvn.w	r3, #15
 8015ce0:	e028      	b.n	8015d34 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d009      	beq.n	8015cfc <udp_sendto_if+0x90>
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d005      	beq.n	8015cfc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015cf8:	2be0      	cmp	r3, #224	; 0xe0
 8015cfa:	d103      	bne.n	8015d04 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8015cfc:	6a3b      	ldr	r3, [r7, #32]
 8015cfe:	3304      	adds	r3, #4
 8015d00:	617b      	str	r3, [r7, #20]
 8015d02:	e00b      	b.n	8015d1c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	681a      	ldr	r2, [r3, #0]
 8015d08:	6a3b      	ldr	r3, [r7, #32]
 8015d0a:	3304      	adds	r3, #4
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	429a      	cmp	r2, r3
 8015d10:	d002      	beq.n	8015d18 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8015d12:	f06f 0303 	mvn.w	r3, #3
 8015d16:	e00d      	b.n	8015d34 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8015d1c:	887a      	ldrh	r2, [r7, #2]
 8015d1e:	697b      	ldr	r3, [r7, #20]
 8015d20:	9301      	str	r3, [sp, #4]
 8015d22:	6a3b      	ldr	r3, [r7, #32]
 8015d24:	9300      	str	r3, [sp, #0]
 8015d26:	4613      	mov	r3, r2
 8015d28:	687a      	ldr	r2, [r7, #4]
 8015d2a:	68b9      	ldr	r1, [r7, #8]
 8015d2c:	68f8      	ldr	r0, [r7, #12]
 8015d2e:	f000 f811 	bl	8015d54 <udp_sendto_if_src>
 8015d32:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015d34:	4618      	mov	r0, r3
 8015d36:	3718      	adds	r7, #24
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	bd80      	pop	{r7, pc}
 8015d3c:	0801ffe4 	.word	0x0801ffe4
 8015d40:	08020158 	.word	0x08020158
 8015d44:	08020038 	.word	0x08020038
 8015d48:	08020174 	.word	0x08020174
 8015d4c:	08020190 	.word	0x08020190
 8015d50:	080201b0 	.word	0x080201b0

08015d54 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8015d54:	b580      	push	{r7, lr}
 8015d56:	b08c      	sub	sp, #48	; 0x30
 8015d58:	af04      	add	r7, sp, #16
 8015d5a:	60f8      	str	r0, [r7, #12]
 8015d5c:	60b9      	str	r1, [r7, #8]
 8015d5e:	607a      	str	r2, [r7, #4]
 8015d60:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d109      	bne.n	8015d7c <udp_sendto_if_src+0x28>
 8015d68:	4b65      	ldr	r3, [pc, #404]	; (8015f00 <udp_sendto_if_src+0x1ac>)
 8015d6a:	f240 22d1 	movw	r2, #721	; 0x2d1
 8015d6e:	4965      	ldr	r1, [pc, #404]	; (8015f04 <udp_sendto_if_src+0x1b0>)
 8015d70:	4865      	ldr	r0, [pc, #404]	; (8015f08 <udp_sendto_if_src+0x1b4>)
 8015d72:	f003 fda5 	bl	80198c0 <iprintf>
 8015d76:	f06f 030f 	mvn.w	r3, #15
 8015d7a:	e0bc      	b.n	8015ef6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8015d7c:	68bb      	ldr	r3, [r7, #8]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d109      	bne.n	8015d96 <udp_sendto_if_src+0x42>
 8015d82:	4b5f      	ldr	r3, [pc, #380]	; (8015f00 <udp_sendto_if_src+0x1ac>)
 8015d84:	f240 22d2 	movw	r2, #722	; 0x2d2
 8015d88:	4960      	ldr	r1, [pc, #384]	; (8015f0c <udp_sendto_if_src+0x1b8>)
 8015d8a:	485f      	ldr	r0, [pc, #380]	; (8015f08 <udp_sendto_if_src+0x1b4>)
 8015d8c:	f003 fd98 	bl	80198c0 <iprintf>
 8015d90:	f06f 030f 	mvn.w	r3, #15
 8015d94:	e0af      	b.n	8015ef6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d109      	bne.n	8015db0 <udp_sendto_if_src+0x5c>
 8015d9c:	4b58      	ldr	r3, [pc, #352]	; (8015f00 <udp_sendto_if_src+0x1ac>)
 8015d9e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8015da2:	495b      	ldr	r1, [pc, #364]	; (8015f10 <udp_sendto_if_src+0x1bc>)
 8015da4:	4858      	ldr	r0, [pc, #352]	; (8015f08 <udp_sendto_if_src+0x1b4>)
 8015da6:	f003 fd8b 	bl	80198c0 <iprintf>
 8015daa:	f06f 030f 	mvn.w	r3, #15
 8015dae:	e0a2      	b.n	8015ef6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8015db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d109      	bne.n	8015dca <udp_sendto_if_src+0x76>
 8015db6:	4b52      	ldr	r3, [pc, #328]	; (8015f00 <udp_sendto_if_src+0x1ac>)
 8015db8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8015dbc:	4955      	ldr	r1, [pc, #340]	; (8015f14 <udp_sendto_if_src+0x1c0>)
 8015dbe:	4852      	ldr	r0, [pc, #328]	; (8015f08 <udp_sendto_if_src+0x1b4>)
 8015dc0:	f003 fd7e 	bl	80198c0 <iprintf>
 8015dc4:	f06f 030f 	mvn.w	r3, #15
 8015dc8:	e095      	b.n	8015ef6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8015dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d109      	bne.n	8015de4 <udp_sendto_if_src+0x90>
 8015dd0:	4b4b      	ldr	r3, [pc, #300]	; (8015f00 <udp_sendto_if_src+0x1ac>)
 8015dd2:	f240 22d5 	movw	r2, #725	; 0x2d5
 8015dd6:	4950      	ldr	r1, [pc, #320]	; (8015f18 <udp_sendto_if_src+0x1c4>)
 8015dd8:	484b      	ldr	r0, [pc, #300]	; (8015f08 <udp_sendto_if_src+0x1b4>)
 8015dda:	f003 fd71 	bl	80198c0 <iprintf>
 8015dde:	f06f 030f 	mvn.w	r3, #15
 8015de2:	e088      	b.n	8015ef6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	8a5b      	ldrh	r3, [r3, #18]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d10f      	bne.n	8015e0c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015dec:	68f9      	ldr	r1, [r7, #12]
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	8a5b      	ldrh	r3, [r3, #18]
 8015df2:	461a      	mov	r2, r3
 8015df4:	68f8      	ldr	r0, [r7, #12]
 8015df6:	f000 f893 	bl	8015f20 <udp_bind>
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8015dfe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d002      	beq.n	8015e0c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8015e06:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015e0a:	e074      	b.n	8015ef6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8015e0c:	68bb      	ldr	r3, [r7, #8]
 8015e0e:	891b      	ldrh	r3, [r3, #8]
 8015e10:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8015e14:	4293      	cmp	r3, r2
 8015e16:	d902      	bls.n	8015e1e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8015e18:	f04f 33ff 	mov.w	r3, #4294967295
 8015e1c:	e06b      	b.n	8015ef6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8015e1e:	2108      	movs	r1, #8
 8015e20:	68b8      	ldr	r0, [r7, #8]
 8015e22:	f7f8 ffdd 	bl	800ede0 <pbuf_add_header>
 8015e26:	4603      	mov	r3, r0
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d015      	beq.n	8015e58 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8015e2c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015e30:	2108      	movs	r1, #8
 8015e32:	2022      	movs	r0, #34	; 0x22
 8015e34:	f7f8 fd8a 	bl	800e94c <pbuf_alloc>
 8015e38:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8015e3a:	69fb      	ldr	r3, [r7, #28]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d102      	bne.n	8015e46 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8015e40:	f04f 33ff 	mov.w	r3, #4294967295
 8015e44:	e057      	b.n	8015ef6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8015e46:	68bb      	ldr	r3, [r7, #8]
 8015e48:	891b      	ldrh	r3, [r3, #8]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d006      	beq.n	8015e5c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8015e4e:	68b9      	ldr	r1, [r7, #8]
 8015e50:	69f8      	ldr	r0, [r7, #28]
 8015e52:	f7f9 f97f 	bl	800f154 <pbuf_chain>
 8015e56:	e001      	b.n	8015e5c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8015e58:	68bb      	ldr	r3, [r7, #8]
 8015e5a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8015e5c:	69fb      	ldr	r3, [r7, #28]
 8015e5e:	895b      	ldrh	r3, [r3, #10]
 8015e60:	2b07      	cmp	r3, #7
 8015e62:	d806      	bhi.n	8015e72 <udp_sendto_if_src+0x11e>
 8015e64:	4b26      	ldr	r3, [pc, #152]	; (8015f00 <udp_sendto_if_src+0x1ac>)
 8015e66:	f240 320e 	movw	r2, #782	; 0x30e
 8015e6a:	492c      	ldr	r1, [pc, #176]	; (8015f1c <udp_sendto_if_src+0x1c8>)
 8015e6c:	4826      	ldr	r0, [pc, #152]	; (8015f08 <udp_sendto_if_src+0x1b4>)
 8015e6e:	f003 fd27 	bl	80198c0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8015e72:	69fb      	ldr	r3, [r7, #28]
 8015e74:	685b      	ldr	r3, [r3, #4]
 8015e76:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	8a5b      	ldrh	r3, [r3, #18]
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	f7f7 fd15 	bl	800d8ac <lwip_htons>
 8015e82:	4603      	mov	r3, r0
 8015e84:	461a      	mov	r2, r3
 8015e86:	697b      	ldr	r3, [r7, #20]
 8015e88:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8015e8a:	887b      	ldrh	r3, [r7, #2]
 8015e8c:	4618      	mov	r0, r3
 8015e8e:	f7f7 fd0d 	bl	800d8ac <lwip_htons>
 8015e92:	4603      	mov	r3, r0
 8015e94:	461a      	mov	r2, r3
 8015e96:	697b      	ldr	r3, [r7, #20]
 8015e98:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8015e9a:	697b      	ldr	r3, [r7, #20]
 8015e9c:	2200      	movs	r2, #0
 8015e9e:	719a      	strb	r2, [r3, #6]
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8015ea4:	69fb      	ldr	r3, [r7, #28]
 8015ea6:	891b      	ldrh	r3, [r3, #8]
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	f7f7 fcff 	bl	800d8ac <lwip_htons>
 8015eae:	4603      	mov	r3, r0
 8015eb0:	461a      	mov	r2, r3
 8015eb2:	697b      	ldr	r3, [r7, #20]
 8015eb4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8015eb6:	2311      	movs	r3, #17
 8015eb8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	7adb      	ldrb	r3, [r3, #11]
 8015ebe:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	7a9b      	ldrb	r3, [r3, #10]
 8015ec4:	7cb9      	ldrb	r1, [r7, #18]
 8015ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ec8:	9202      	str	r2, [sp, #8]
 8015eca:	7cfa      	ldrb	r2, [r7, #19]
 8015ecc:	9201      	str	r2, [sp, #4]
 8015ece:	9300      	str	r3, [sp, #0]
 8015ed0:	460b      	mov	r3, r1
 8015ed2:	687a      	ldr	r2, [r7, #4]
 8015ed4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015ed6:	69f8      	ldr	r0, [r7, #28]
 8015ed8:	f001 fc8e 	bl	80177f8 <ip4_output_if_src>
 8015edc:	4603      	mov	r3, r0
 8015ede:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8015ee0:	69fa      	ldr	r2, [r7, #28]
 8015ee2:	68bb      	ldr	r3, [r7, #8]
 8015ee4:	429a      	cmp	r2, r3
 8015ee6:	d004      	beq.n	8015ef2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8015ee8:	69f8      	ldr	r0, [r7, #28]
 8015eea:	f7f9 f80f 	bl	800ef0c <pbuf_free>
    q = NULL;
 8015eee:	2300      	movs	r3, #0
 8015ef0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8015ef2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	3720      	adds	r7, #32
 8015efa:	46bd      	mov	sp, r7
 8015efc:	bd80      	pop	{r7, pc}
 8015efe:	bf00      	nop
 8015f00:	0801ffe4 	.word	0x0801ffe4
 8015f04:	080201d0 	.word	0x080201d0
 8015f08:	08020038 	.word	0x08020038
 8015f0c:	080201f0 	.word	0x080201f0
 8015f10:	08020210 	.word	0x08020210
 8015f14:	08020234 	.word	0x08020234
 8015f18:	08020258 	.word	0x08020258
 8015f1c:	0802027c 	.word	0x0802027c

08015f20 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b086      	sub	sp, #24
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	60f8      	str	r0, [r7, #12]
 8015f28:	60b9      	str	r1, [r7, #8]
 8015f2a:	4613      	mov	r3, r2
 8015f2c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015f2e:	68bb      	ldr	r3, [r7, #8]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d101      	bne.n	8015f38 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015f34:	4b39      	ldr	r3, [pc, #228]	; (801601c <udp_bind+0xfc>)
 8015f36:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d109      	bne.n	8015f52 <udp_bind+0x32>
 8015f3e:	4b38      	ldr	r3, [pc, #224]	; (8016020 <udp_bind+0x100>)
 8015f40:	f240 32b7 	movw	r2, #951	; 0x3b7
 8015f44:	4937      	ldr	r1, [pc, #220]	; (8016024 <udp_bind+0x104>)
 8015f46:	4838      	ldr	r0, [pc, #224]	; (8016028 <udp_bind+0x108>)
 8015f48:	f003 fcba 	bl	80198c0 <iprintf>
 8015f4c:	f06f 030f 	mvn.w	r3, #15
 8015f50:	e060      	b.n	8016014 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8015f52:	2300      	movs	r3, #0
 8015f54:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015f56:	4b35      	ldr	r3, [pc, #212]	; (801602c <udp_bind+0x10c>)
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	617b      	str	r3, [r7, #20]
 8015f5c:	e009      	b.n	8015f72 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8015f5e:	68fa      	ldr	r2, [r7, #12]
 8015f60:	697b      	ldr	r3, [r7, #20]
 8015f62:	429a      	cmp	r2, r3
 8015f64:	d102      	bne.n	8015f6c <udp_bind+0x4c>
      rebind = 1;
 8015f66:	2301      	movs	r3, #1
 8015f68:	74fb      	strb	r3, [r7, #19]
      break;
 8015f6a:	e005      	b.n	8015f78 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015f6c:	697b      	ldr	r3, [r7, #20]
 8015f6e:	68db      	ldr	r3, [r3, #12]
 8015f70:	617b      	str	r3, [r7, #20]
 8015f72:	697b      	ldr	r3, [r7, #20]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d1f2      	bne.n	8015f5e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8015f78:	88fb      	ldrh	r3, [r7, #6]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d109      	bne.n	8015f92 <udp_bind+0x72>
    port = udp_new_port();
 8015f7e:	f7ff fc35 	bl	80157ec <udp_new_port>
 8015f82:	4603      	mov	r3, r0
 8015f84:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015f86:	88fb      	ldrh	r3, [r7, #6]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d12c      	bne.n	8015fe6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8015f8c:	f06f 0307 	mvn.w	r3, #7
 8015f90:	e040      	b.n	8016014 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015f92:	4b26      	ldr	r3, [pc, #152]	; (801602c <udp_bind+0x10c>)
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	617b      	str	r3, [r7, #20]
 8015f98:	e022      	b.n	8015fe0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8015f9a:	68fa      	ldr	r2, [r7, #12]
 8015f9c:	697b      	ldr	r3, [r7, #20]
 8015f9e:	429a      	cmp	r2, r3
 8015fa0:	d01b      	beq.n	8015fda <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8015fa2:	697b      	ldr	r3, [r7, #20]
 8015fa4:	8a5b      	ldrh	r3, [r3, #18]
 8015fa6:	88fa      	ldrh	r2, [r7, #6]
 8015fa8:	429a      	cmp	r2, r3
 8015faa:	d116      	bne.n	8015fda <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015fac:	697b      	ldr	r3, [r7, #20]
 8015fae:	681a      	ldr	r2, [r3, #0]
 8015fb0:	68bb      	ldr	r3, [r7, #8]
 8015fb2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015fb4:	429a      	cmp	r2, r3
 8015fb6:	d00d      	beq.n	8015fd4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015fb8:	68bb      	ldr	r3, [r7, #8]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d00a      	beq.n	8015fd4 <udp_bind+0xb4>
 8015fbe:	68bb      	ldr	r3, [r7, #8]
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d006      	beq.n	8015fd4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015fc6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d003      	beq.n	8015fd4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015fcc:	697b      	ldr	r3, [r7, #20]
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d102      	bne.n	8015fda <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015fd4:	f06f 0307 	mvn.w	r3, #7
 8015fd8:	e01c      	b.n	8016014 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015fda:	697b      	ldr	r3, [r7, #20]
 8015fdc:	68db      	ldr	r3, [r3, #12]
 8015fde:	617b      	str	r3, [r7, #20]
 8015fe0:	697b      	ldr	r3, [r7, #20]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d1d9      	bne.n	8015f9a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015fe6:	68bb      	ldr	r3, [r7, #8]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d002      	beq.n	8015ff2 <udp_bind+0xd2>
 8015fec:	68bb      	ldr	r3, [r7, #8]
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	e000      	b.n	8015ff4 <udp_bind+0xd4>
 8015ff2:	2300      	movs	r3, #0
 8015ff4:	68fa      	ldr	r2, [r7, #12]
 8015ff6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	88fa      	ldrh	r2, [r7, #6]
 8015ffc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8015ffe:	7cfb      	ldrb	r3, [r7, #19]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d106      	bne.n	8016012 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8016004:	4b09      	ldr	r3, [pc, #36]	; (801602c <udp_bind+0x10c>)
 8016006:	681a      	ldr	r2, [r3, #0]
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801600c:	4a07      	ldr	r2, [pc, #28]	; (801602c <udp_bind+0x10c>)
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8016012:	2300      	movs	r3, #0
}
 8016014:	4618      	mov	r0, r3
 8016016:	3718      	adds	r7, #24
 8016018:	46bd      	mov	sp, r7
 801601a:	bd80      	pop	{r7, pc}
 801601c:	08020b38 	.word	0x08020b38
 8016020:	0801ffe4 	.word	0x0801ffe4
 8016024:	080202ac 	.word	0x080202ac
 8016028:	08020038 	.word	0x08020038
 801602c:	2000fd0c 	.word	0x2000fd0c

08016030 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016030:	b580      	push	{r7, lr}
 8016032:	b086      	sub	sp, #24
 8016034:	af00      	add	r7, sp, #0
 8016036:	60f8      	str	r0, [r7, #12]
 8016038:	60b9      	str	r1, [r7, #8]
 801603a:	4613      	mov	r3, r2
 801603c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	2b00      	cmp	r3, #0
 8016042:	d109      	bne.n	8016058 <udp_connect+0x28>
 8016044:	4b2c      	ldr	r3, [pc, #176]	; (80160f8 <udp_connect+0xc8>)
 8016046:	f240 4235 	movw	r2, #1077	; 0x435
 801604a:	492c      	ldr	r1, [pc, #176]	; (80160fc <udp_connect+0xcc>)
 801604c:	482c      	ldr	r0, [pc, #176]	; (8016100 <udp_connect+0xd0>)
 801604e:	f003 fc37 	bl	80198c0 <iprintf>
 8016052:	f06f 030f 	mvn.w	r3, #15
 8016056:	e04b      	b.n	80160f0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8016058:	68bb      	ldr	r3, [r7, #8]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d109      	bne.n	8016072 <udp_connect+0x42>
 801605e:	4b26      	ldr	r3, [pc, #152]	; (80160f8 <udp_connect+0xc8>)
 8016060:	f240 4236 	movw	r2, #1078	; 0x436
 8016064:	4927      	ldr	r1, [pc, #156]	; (8016104 <udp_connect+0xd4>)
 8016066:	4826      	ldr	r0, [pc, #152]	; (8016100 <udp_connect+0xd0>)
 8016068:	f003 fc2a 	bl	80198c0 <iprintf>
 801606c:	f06f 030f 	mvn.w	r3, #15
 8016070:	e03e      	b.n	80160f0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	8a5b      	ldrh	r3, [r3, #18]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d10f      	bne.n	801609a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801607a:	68f9      	ldr	r1, [r7, #12]
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	8a5b      	ldrh	r3, [r3, #18]
 8016080:	461a      	mov	r2, r3
 8016082:	68f8      	ldr	r0, [r7, #12]
 8016084:	f7ff ff4c 	bl	8015f20 <udp_bind>
 8016088:	4603      	mov	r3, r0
 801608a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801608c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016090:	2b00      	cmp	r3, #0
 8016092:	d002      	beq.n	801609a <udp_connect+0x6a>
      return err;
 8016094:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016098:	e02a      	b.n	80160f0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801609a:	68bb      	ldr	r3, [r7, #8]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d002      	beq.n	80160a6 <udp_connect+0x76>
 80160a0:	68bb      	ldr	r3, [r7, #8]
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	e000      	b.n	80160a8 <udp_connect+0x78>
 80160a6:	2300      	movs	r3, #0
 80160a8:	68fa      	ldr	r2, [r7, #12]
 80160aa:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	88fa      	ldrh	r2, [r7, #6]
 80160b0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	7c1b      	ldrb	r3, [r3, #16]
 80160b6:	f043 0304 	orr.w	r3, r3, #4
 80160ba:	b2da      	uxtb	r2, r3
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80160c0:	4b11      	ldr	r3, [pc, #68]	; (8016108 <udp_connect+0xd8>)
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	617b      	str	r3, [r7, #20]
 80160c6:	e008      	b.n	80160da <udp_connect+0xaa>
    if (pcb == ipcb) {
 80160c8:	68fa      	ldr	r2, [r7, #12]
 80160ca:	697b      	ldr	r3, [r7, #20]
 80160cc:	429a      	cmp	r2, r3
 80160ce:	d101      	bne.n	80160d4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80160d0:	2300      	movs	r3, #0
 80160d2:	e00d      	b.n	80160f0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80160d4:	697b      	ldr	r3, [r7, #20]
 80160d6:	68db      	ldr	r3, [r3, #12]
 80160d8:	617b      	str	r3, [r7, #20]
 80160da:	697b      	ldr	r3, [r7, #20]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d1f3      	bne.n	80160c8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80160e0:	4b09      	ldr	r3, [pc, #36]	; (8016108 <udp_connect+0xd8>)
 80160e2:	681a      	ldr	r2, [r3, #0]
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80160e8:	4a07      	ldr	r2, [pc, #28]	; (8016108 <udp_connect+0xd8>)
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80160ee:	2300      	movs	r3, #0
}
 80160f0:	4618      	mov	r0, r3
 80160f2:	3718      	adds	r7, #24
 80160f4:	46bd      	mov	sp, r7
 80160f6:	bd80      	pop	{r7, pc}
 80160f8:	0801ffe4 	.word	0x0801ffe4
 80160fc:	080202c4 	.word	0x080202c4
 8016100:	08020038 	.word	0x08020038
 8016104:	080202e0 	.word	0x080202e0
 8016108:	2000fd0c 	.word	0x2000fd0c

0801610c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801610c:	b580      	push	{r7, lr}
 801610e:	b084      	sub	sp, #16
 8016110:	af00      	add	r7, sp, #0
 8016112:	60f8      	str	r0, [r7, #12]
 8016114:	60b9      	str	r1, [r7, #8]
 8016116:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d107      	bne.n	801612e <udp_recv+0x22>
 801611e:	4b08      	ldr	r3, [pc, #32]	; (8016140 <udp_recv+0x34>)
 8016120:	f240 428a 	movw	r2, #1162	; 0x48a
 8016124:	4907      	ldr	r1, [pc, #28]	; (8016144 <udp_recv+0x38>)
 8016126:	4808      	ldr	r0, [pc, #32]	; (8016148 <udp_recv+0x3c>)
 8016128:	f003 fbca 	bl	80198c0 <iprintf>
 801612c:	e005      	b.n	801613a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	68ba      	ldr	r2, [r7, #8]
 8016132:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	687a      	ldr	r2, [r7, #4]
 8016138:	61da      	str	r2, [r3, #28]
}
 801613a:	3710      	adds	r7, #16
 801613c:	46bd      	mov	sp, r7
 801613e:	bd80      	pop	{r7, pc}
 8016140:	0801ffe4 	.word	0x0801ffe4
 8016144:	08020318 	.word	0x08020318
 8016148:	08020038 	.word	0x08020038

0801614c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801614c:	b580      	push	{r7, lr}
 801614e:	b084      	sub	sp, #16
 8016150:	af00      	add	r7, sp, #0
 8016152:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d107      	bne.n	801616a <udp_remove+0x1e>
 801615a:	4b19      	ldr	r3, [pc, #100]	; (80161c0 <udp_remove+0x74>)
 801615c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8016160:	4918      	ldr	r1, [pc, #96]	; (80161c4 <udp_remove+0x78>)
 8016162:	4819      	ldr	r0, [pc, #100]	; (80161c8 <udp_remove+0x7c>)
 8016164:	f003 fbac 	bl	80198c0 <iprintf>
 8016168:	e026      	b.n	80161b8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801616a:	4b18      	ldr	r3, [pc, #96]	; (80161cc <udp_remove+0x80>)
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	687a      	ldr	r2, [r7, #4]
 8016170:	429a      	cmp	r2, r3
 8016172:	d105      	bne.n	8016180 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8016174:	4b15      	ldr	r3, [pc, #84]	; (80161cc <udp_remove+0x80>)
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	68db      	ldr	r3, [r3, #12]
 801617a:	4a14      	ldr	r2, [pc, #80]	; (80161cc <udp_remove+0x80>)
 801617c:	6013      	str	r3, [r2, #0]
 801617e:	e017      	b.n	80161b0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016180:	4b12      	ldr	r3, [pc, #72]	; (80161cc <udp_remove+0x80>)
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	60fb      	str	r3, [r7, #12]
 8016186:	e010      	b.n	80161aa <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	68db      	ldr	r3, [r3, #12]
 801618c:	2b00      	cmp	r3, #0
 801618e:	d009      	beq.n	80161a4 <udp_remove+0x58>
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	68db      	ldr	r3, [r3, #12]
 8016194:	687a      	ldr	r2, [r7, #4]
 8016196:	429a      	cmp	r2, r3
 8016198:	d104      	bne.n	80161a4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	68da      	ldr	r2, [r3, #12]
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	60da      	str	r2, [r3, #12]
        break;
 80161a2:	e005      	b.n	80161b0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	68db      	ldr	r3, [r3, #12]
 80161a8:	60fb      	str	r3, [r7, #12]
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d1eb      	bne.n	8016188 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80161b0:	6879      	ldr	r1, [r7, #4]
 80161b2:	2000      	movs	r0, #0
 80161b4:	f7f8 f882 	bl	800e2bc <memp_free>
}
 80161b8:	3710      	adds	r7, #16
 80161ba:	46bd      	mov	sp, r7
 80161bc:	bd80      	pop	{r7, pc}
 80161be:	bf00      	nop
 80161c0:	0801ffe4 	.word	0x0801ffe4
 80161c4:	08020330 	.word	0x08020330
 80161c8:	08020038 	.word	0x08020038
 80161cc:	2000fd0c 	.word	0x2000fd0c

080161d0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80161d0:	b580      	push	{r7, lr}
 80161d2:	b082      	sub	sp, #8
 80161d4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80161d6:	2000      	movs	r0, #0
 80161d8:	f7f8 f81e 	bl	800e218 <memp_malloc>
 80161dc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d007      	beq.n	80161f4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80161e4:	2220      	movs	r2, #32
 80161e6:	2100      	movs	r1, #0
 80161e8:	6878      	ldr	r0, [r7, #4]
 80161ea:	f002 fd4d 	bl	8018c88 <memset>
    pcb->ttl = UDP_TTL;
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	22ff      	movs	r2, #255	; 0xff
 80161f2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80161f4:	687b      	ldr	r3, [r7, #4]
}
 80161f6:	4618      	mov	r0, r3
 80161f8:	3708      	adds	r7, #8
 80161fa:	46bd      	mov	sp, r7
 80161fc:	bd80      	pop	{r7, pc}

080161fe <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80161fe:	b580      	push	{r7, lr}
 8016200:	b084      	sub	sp, #16
 8016202:	af00      	add	r7, sp, #0
 8016204:	4603      	mov	r3, r0
 8016206:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8016208:	f7ff ffe2 	bl	80161d0 <udp_new>
 801620c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801620e:	68fb      	ldr	r3, [r7, #12]
}
 8016210:	4618      	mov	r0, r3
 8016212:	3710      	adds	r7, #16
 8016214:	46bd      	mov	sp, r7
 8016216:	bd80      	pop	{r7, pc}

08016218 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016218:	b480      	push	{r7}
 801621a:	b085      	sub	sp, #20
 801621c:	af00      	add	r7, sp, #0
 801621e:	6078      	str	r0, [r7, #4]
 8016220:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d01e      	beq.n	8016266 <udp_netif_ip_addr_changed+0x4e>
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	2b00      	cmp	r3, #0
 801622e:	d01a      	beq.n	8016266 <udp_netif_ip_addr_changed+0x4e>
 8016230:	683b      	ldr	r3, [r7, #0]
 8016232:	2b00      	cmp	r3, #0
 8016234:	d017      	beq.n	8016266 <udp_netif_ip_addr_changed+0x4e>
 8016236:	683b      	ldr	r3, [r7, #0]
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d013      	beq.n	8016266 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801623e:	4b0d      	ldr	r3, [pc, #52]	; (8016274 <udp_netif_ip_addr_changed+0x5c>)
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	60fb      	str	r3, [r7, #12]
 8016244:	e00c      	b.n	8016260 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	681a      	ldr	r2, [r3, #0]
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	429a      	cmp	r2, r3
 8016250:	d103      	bne.n	801625a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016252:	683b      	ldr	r3, [r7, #0]
 8016254:	681a      	ldr	r2, [r3, #0]
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	68db      	ldr	r3, [r3, #12]
 801625e:	60fb      	str	r3, [r7, #12]
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	2b00      	cmp	r3, #0
 8016264:	d1ef      	bne.n	8016246 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016266:	bf00      	nop
 8016268:	3714      	adds	r7, #20
 801626a:	46bd      	mov	sp, r7
 801626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016270:	4770      	bx	lr
 8016272:	bf00      	nop
 8016274:	2000fd0c 	.word	0x2000fd0c

08016278 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016278:	b580      	push	{r7, lr}
 801627a:	b082      	sub	sp, #8
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016280:	4915      	ldr	r1, [pc, #84]	; (80162d8 <etharp_free_entry+0x60>)
 8016282:	687a      	ldr	r2, [r7, #4]
 8016284:	4613      	mov	r3, r2
 8016286:	005b      	lsls	r3, r3, #1
 8016288:	4413      	add	r3, r2
 801628a:	00db      	lsls	r3, r3, #3
 801628c:	440b      	add	r3, r1
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	2b00      	cmp	r3, #0
 8016292:	d013      	beq.n	80162bc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016294:	4910      	ldr	r1, [pc, #64]	; (80162d8 <etharp_free_entry+0x60>)
 8016296:	687a      	ldr	r2, [r7, #4]
 8016298:	4613      	mov	r3, r2
 801629a:	005b      	lsls	r3, r3, #1
 801629c:	4413      	add	r3, r2
 801629e:	00db      	lsls	r3, r3, #3
 80162a0:	440b      	add	r3, r1
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	4618      	mov	r0, r3
 80162a6:	f7f8 fe31 	bl	800ef0c <pbuf_free>
    arp_table[i].q = NULL;
 80162aa:	490b      	ldr	r1, [pc, #44]	; (80162d8 <etharp_free_entry+0x60>)
 80162ac:	687a      	ldr	r2, [r7, #4]
 80162ae:	4613      	mov	r3, r2
 80162b0:	005b      	lsls	r3, r3, #1
 80162b2:	4413      	add	r3, r2
 80162b4:	00db      	lsls	r3, r3, #3
 80162b6:	440b      	add	r3, r1
 80162b8:	2200      	movs	r2, #0
 80162ba:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80162bc:	4906      	ldr	r1, [pc, #24]	; (80162d8 <etharp_free_entry+0x60>)
 80162be:	687a      	ldr	r2, [r7, #4]
 80162c0:	4613      	mov	r3, r2
 80162c2:	005b      	lsls	r3, r3, #1
 80162c4:	4413      	add	r3, r2
 80162c6:	00db      	lsls	r3, r3, #3
 80162c8:	440b      	add	r3, r1
 80162ca:	3314      	adds	r3, #20
 80162cc:	2200      	movs	r2, #0
 80162ce:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80162d0:	bf00      	nop
 80162d2:	3708      	adds	r7, #8
 80162d4:	46bd      	mov	sp, r7
 80162d6:	bd80      	pop	{r7, pc}
 80162d8:	20008844 	.word	0x20008844

080162dc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80162dc:	b580      	push	{r7, lr}
 80162de:	b082      	sub	sp, #8
 80162e0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80162e2:	2300      	movs	r3, #0
 80162e4:	607b      	str	r3, [r7, #4]
 80162e6:	e096      	b.n	8016416 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80162e8:	494f      	ldr	r1, [pc, #316]	; (8016428 <etharp_tmr+0x14c>)
 80162ea:	687a      	ldr	r2, [r7, #4]
 80162ec:	4613      	mov	r3, r2
 80162ee:	005b      	lsls	r3, r3, #1
 80162f0:	4413      	add	r3, r2
 80162f2:	00db      	lsls	r3, r3, #3
 80162f4:	440b      	add	r3, r1
 80162f6:	3314      	adds	r3, #20
 80162f8:	781b      	ldrb	r3, [r3, #0]
 80162fa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80162fc:	78fb      	ldrb	r3, [r7, #3]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	f000 8086 	beq.w	8016410 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016304:	4948      	ldr	r1, [pc, #288]	; (8016428 <etharp_tmr+0x14c>)
 8016306:	687a      	ldr	r2, [r7, #4]
 8016308:	4613      	mov	r3, r2
 801630a:	005b      	lsls	r3, r3, #1
 801630c:	4413      	add	r3, r2
 801630e:	00db      	lsls	r3, r3, #3
 8016310:	440b      	add	r3, r1
 8016312:	3312      	adds	r3, #18
 8016314:	881b      	ldrh	r3, [r3, #0]
 8016316:	3301      	adds	r3, #1
 8016318:	b298      	uxth	r0, r3
 801631a:	4943      	ldr	r1, [pc, #268]	; (8016428 <etharp_tmr+0x14c>)
 801631c:	687a      	ldr	r2, [r7, #4]
 801631e:	4613      	mov	r3, r2
 8016320:	005b      	lsls	r3, r3, #1
 8016322:	4413      	add	r3, r2
 8016324:	00db      	lsls	r3, r3, #3
 8016326:	440b      	add	r3, r1
 8016328:	3312      	adds	r3, #18
 801632a:	4602      	mov	r2, r0
 801632c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801632e:	493e      	ldr	r1, [pc, #248]	; (8016428 <etharp_tmr+0x14c>)
 8016330:	687a      	ldr	r2, [r7, #4]
 8016332:	4613      	mov	r3, r2
 8016334:	005b      	lsls	r3, r3, #1
 8016336:	4413      	add	r3, r2
 8016338:	00db      	lsls	r3, r3, #3
 801633a:	440b      	add	r3, r1
 801633c:	3312      	adds	r3, #18
 801633e:	881b      	ldrh	r3, [r3, #0]
 8016340:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016344:	d215      	bcs.n	8016372 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016346:	4938      	ldr	r1, [pc, #224]	; (8016428 <etharp_tmr+0x14c>)
 8016348:	687a      	ldr	r2, [r7, #4]
 801634a:	4613      	mov	r3, r2
 801634c:	005b      	lsls	r3, r3, #1
 801634e:	4413      	add	r3, r2
 8016350:	00db      	lsls	r3, r3, #3
 8016352:	440b      	add	r3, r1
 8016354:	3314      	adds	r3, #20
 8016356:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016358:	2b01      	cmp	r3, #1
 801635a:	d10e      	bne.n	801637a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801635c:	4932      	ldr	r1, [pc, #200]	; (8016428 <etharp_tmr+0x14c>)
 801635e:	687a      	ldr	r2, [r7, #4]
 8016360:	4613      	mov	r3, r2
 8016362:	005b      	lsls	r3, r3, #1
 8016364:	4413      	add	r3, r2
 8016366:	00db      	lsls	r3, r3, #3
 8016368:	440b      	add	r3, r1
 801636a:	3312      	adds	r3, #18
 801636c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801636e:	2b04      	cmp	r3, #4
 8016370:	d903      	bls.n	801637a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016372:	6878      	ldr	r0, [r7, #4]
 8016374:	f7ff ff80 	bl	8016278 <etharp_free_entry>
 8016378:	e04a      	b.n	8016410 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801637a:	492b      	ldr	r1, [pc, #172]	; (8016428 <etharp_tmr+0x14c>)
 801637c:	687a      	ldr	r2, [r7, #4]
 801637e:	4613      	mov	r3, r2
 8016380:	005b      	lsls	r3, r3, #1
 8016382:	4413      	add	r3, r2
 8016384:	00db      	lsls	r3, r3, #3
 8016386:	440b      	add	r3, r1
 8016388:	3314      	adds	r3, #20
 801638a:	781b      	ldrb	r3, [r3, #0]
 801638c:	2b03      	cmp	r3, #3
 801638e:	d10a      	bne.n	80163a6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016390:	4925      	ldr	r1, [pc, #148]	; (8016428 <etharp_tmr+0x14c>)
 8016392:	687a      	ldr	r2, [r7, #4]
 8016394:	4613      	mov	r3, r2
 8016396:	005b      	lsls	r3, r3, #1
 8016398:	4413      	add	r3, r2
 801639a:	00db      	lsls	r3, r3, #3
 801639c:	440b      	add	r3, r1
 801639e:	3314      	adds	r3, #20
 80163a0:	2204      	movs	r2, #4
 80163a2:	701a      	strb	r2, [r3, #0]
 80163a4:	e034      	b.n	8016410 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80163a6:	4920      	ldr	r1, [pc, #128]	; (8016428 <etharp_tmr+0x14c>)
 80163a8:	687a      	ldr	r2, [r7, #4]
 80163aa:	4613      	mov	r3, r2
 80163ac:	005b      	lsls	r3, r3, #1
 80163ae:	4413      	add	r3, r2
 80163b0:	00db      	lsls	r3, r3, #3
 80163b2:	440b      	add	r3, r1
 80163b4:	3314      	adds	r3, #20
 80163b6:	781b      	ldrb	r3, [r3, #0]
 80163b8:	2b04      	cmp	r3, #4
 80163ba:	d10a      	bne.n	80163d2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80163bc:	491a      	ldr	r1, [pc, #104]	; (8016428 <etharp_tmr+0x14c>)
 80163be:	687a      	ldr	r2, [r7, #4]
 80163c0:	4613      	mov	r3, r2
 80163c2:	005b      	lsls	r3, r3, #1
 80163c4:	4413      	add	r3, r2
 80163c6:	00db      	lsls	r3, r3, #3
 80163c8:	440b      	add	r3, r1
 80163ca:	3314      	adds	r3, #20
 80163cc:	2202      	movs	r2, #2
 80163ce:	701a      	strb	r2, [r3, #0]
 80163d0:	e01e      	b.n	8016410 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80163d2:	4915      	ldr	r1, [pc, #84]	; (8016428 <etharp_tmr+0x14c>)
 80163d4:	687a      	ldr	r2, [r7, #4]
 80163d6:	4613      	mov	r3, r2
 80163d8:	005b      	lsls	r3, r3, #1
 80163da:	4413      	add	r3, r2
 80163dc:	00db      	lsls	r3, r3, #3
 80163de:	440b      	add	r3, r1
 80163e0:	3314      	adds	r3, #20
 80163e2:	781b      	ldrb	r3, [r3, #0]
 80163e4:	2b01      	cmp	r3, #1
 80163e6:	d113      	bne.n	8016410 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80163e8:	490f      	ldr	r1, [pc, #60]	; (8016428 <etharp_tmr+0x14c>)
 80163ea:	687a      	ldr	r2, [r7, #4]
 80163ec:	4613      	mov	r3, r2
 80163ee:	005b      	lsls	r3, r3, #1
 80163f0:	4413      	add	r3, r2
 80163f2:	00db      	lsls	r3, r3, #3
 80163f4:	440b      	add	r3, r1
 80163f6:	3308      	adds	r3, #8
 80163f8:	6818      	ldr	r0, [r3, #0]
 80163fa:	687a      	ldr	r2, [r7, #4]
 80163fc:	4613      	mov	r3, r2
 80163fe:	005b      	lsls	r3, r3, #1
 8016400:	4413      	add	r3, r2
 8016402:	00db      	lsls	r3, r3, #3
 8016404:	4a08      	ldr	r2, [pc, #32]	; (8016428 <etharp_tmr+0x14c>)
 8016406:	4413      	add	r3, r2
 8016408:	3304      	adds	r3, #4
 801640a:	4619      	mov	r1, r3
 801640c:	f000 fe6e 	bl	80170ec <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	3301      	adds	r3, #1
 8016414:	607b      	str	r3, [r7, #4]
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	2b09      	cmp	r3, #9
 801641a:	f77f af65 	ble.w	80162e8 <etharp_tmr+0xc>
      }
    }
  }
}
 801641e:	bf00      	nop
 8016420:	3708      	adds	r7, #8
 8016422:	46bd      	mov	sp, r7
 8016424:	bd80      	pop	{r7, pc}
 8016426:	bf00      	nop
 8016428:	20008844 	.word	0x20008844

0801642c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801642c:	b580      	push	{r7, lr}
 801642e:	b08a      	sub	sp, #40	; 0x28
 8016430:	af00      	add	r7, sp, #0
 8016432:	60f8      	str	r0, [r7, #12]
 8016434:	460b      	mov	r3, r1
 8016436:	607a      	str	r2, [r7, #4]
 8016438:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801643a:	230a      	movs	r3, #10
 801643c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801643e:	230a      	movs	r3, #10
 8016440:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016442:	230a      	movs	r3, #10
 8016444:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016446:	2300      	movs	r3, #0
 8016448:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801644a:	230a      	movs	r3, #10
 801644c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801644e:	2300      	movs	r3, #0
 8016450:	83bb      	strh	r3, [r7, #28]
 8016452:	2300      	movs	r3, #0
 8016454:	837b      	strh	r3, [r7, #26]
 8016456:	2300      	movs	r3, #0
 8016458:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801645a:	2300      	movs	r3, #0
 801645c:	843b      	strh	r3, [r7, #32]
 801645e:	e0ae      	b.n	80165be <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016460:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016464:	49a6      	ldr	r1, [pc, #664]	; (8016700 <etharp_find_entry+0x2d4>)
 8016466:	4613      	mov	r3, r2
 8016468:	005b      	lsls	r3, r3, #1
 801646a:	4413      	add	r3, r2
 801646c:	00db      	lsls	r3, r3, #3
 801646e:	440b      	add	r3, r1
 8016470:	3314      	adds	r3, #20
 8016472:	781b      	ldrb	r3, [r3, #0]
 8016474:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016476:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801647a:	2b0a      	cmp	r3, #10
 801647c:	d105      	bne.n	801648a <etharp_find_entry+0x5e>
 801647e:	7dfb      	ldrb	r3, [r7, #23]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d102      	bne.n	801648a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016484:	8c3b      	ldrh	r3, [r7, #32]
 8016486:	847b      	strh	r3, [r7, #34]	; 0x22
 8016488:	e095      	b.n	80165b6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801648a:	7dfb      	ldrb	r3, [r7, #23]
 801648c:	2b00      	cmp	r3, #0
 801648e:	f000 8092 	beq.w	80165b6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016492:	7dfb      	ldrb	r3, [r7, #23]
 8016494:	2b01      	cmp	r3, #1
 8016496:	d009      	beq.n	80164ac <etharp_find_entry+0x80>
 8016498:	7dfb      	ldrb	r3, [r7, #23]
 801649a:	2b01      	cmp	r3, #1
 801649c:	d806      	bhi.n	80164ac <etharp_find_entry+0x80>
 801649e:	4b99      	ldr	r3, [pc, #612]	; (8016704 <etharp_find_entry+0x2d8>)
 80164a0:	f44f 7292 	mov.w	r2, #292	; 0x124
 80164a4:	4998      	ldr	r1, [pc, #608]	; (8016708 <etharp_find_entry+0x2dc>)
 80164a6:	4899      	ldr	r0, [pc, #612]	; (801670c <etharp_find_entry+0x2e0>)
 80164a8:	f003 fa0a 	bl	80198c0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d020      	beq.n	80164f4 <etharp_find_entry+0xc8>
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	6819      	ldr	r1, [r3, #0]
 80164b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80164ba:	4891      	ldr	r0, [pc, #580]	; (8016700 <etharp_find_entry+0x2d4>)
 80164bc:	4613      	mov	r3, r2
 80164be:	005b      	lsls	r3, r3, #1
 80164c0:	4413      	add	r3, r2
 80164c2:	00db      	lsls	r3, r3, #3
 80164c4:	4403      	add	r3, r0
 80164c6:	3304      	adds	r3, #4
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	4299      	cmp	r1, r3
 80164cc:	d112      	bne.n	80164f4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d00c      	beq.n	80164ee <etharp_find_entry+0xc2>
 80164d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80164d8:	4989      	ldr	r1, [pc, #548]	; (8016700 <etharp_find_entry+0x2d4>)
 80164da:	4613      	mov	r3, r2
 80164dc:	005b      	lsls	r3, r3, #1
 80164de:	4413      	add	r3, r2
 80164e0:	00db      	lsls	r3, r3, #3
 80164e2:	440b      	add	r3, r1
 80164e4:	3308      	adds	r3, #8
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	687a      	ldr	r2, [r7, #4]
 80164ea:	429a      	cmp	r2, r3
 80164ec:	d102      	bne.n	80164f4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80164ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80164f2:	e100      	b.n	80166f6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80164f4:	7dfb      	ldrb	r3, [r7, #23]
 80164f6:	2b01      	cmp	r3, #1
 80164f8:	d140      	bne.n	801657c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80164fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80164fe:	4980      	ldr	r1, [pc, #512]	; (8016700 <etharp_find_entry+0x2d4>)
 8016500:	4613      	mov	r3, r2
 8016502:	005b      	lsls	r3, r3, #1
 8016504:	4413      	add	r3, r2
 8016506:	00db      	lsls	r3, r3, #3
 8016508:	440b      	add	r3, r1
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	2b00      	cmp	r3, #0
 801650e:	d01a      	beq.n	8016546 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016510:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016514:	497a      	ldr	r1, [pc, #488]	; (8016700 <etharp_find_entry+0x2d4>)
 8016516:	4613      	mov	r3, r2
 8016518:	005b      	lsls	r3, r3, #1
 801651a:	4413      	add	r3, r2
 801651c:	00db      	lsls	r3, r3, #3
 801651e:	440b      	add	r3, r1
 8016520:	3312      	adds	r3, #18
 8016522:	881b      	ldrh	r3, [r3, #0]
 8016524:	8bba      	ldrh	r2, [r7, #28]
 8016526:	429a      	cmp	r2, r3
 8016528:	d845      	bhi.n	80165b6 <etharp_find_entry+0x18a>
            old_queue = i;
 801652a:	8c3b      	ldrh	r3, [r7, #32]
 801652c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801652e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016532:	4973      	ldr	r1, [pc, #460]	; (8016700 <etharp_find_entry+0x2d4>)
 8016534:	4613      	mov	r3, r2
 8016536:	005b      	lsls	r3, r3, #1
 8016538:	4413      	add	r3, r2
 801653a:	00db      	lsls	r3, r3, #3
 801653c:	440b      	add	r3, r1
 801653e:	3312      	adds	r3, #18
 8016540:	881b      	ldrh	r3, [r3, #0]
 8016542:	83bb      	strh	r3, [r7, #28]
 8016544:	e037      	b.n	80165b6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016546:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801654a:	496d      	ldr	r1, [pc, #436]	; (8016700 <etharp_find_entry+0x2d4>)
 801654c:	4613      	mov	r3, r2
 801654e:	005b      	lsls	r3, r3, #1
 8016550:	4413      	add	r3, r2
 8016552:	00db      	lsls	r3, r3, #3
 8016554:	440b      	add	r3, r1
 8016556:	3312      	adds	r3, #18
 8016558:	881b      	ldrh	r3, [r3, #0]
 801655a:	8b7a      	ldrh	r2, [r7, #26]
 801655c:	429a      	cmp	r2, r3
 801655e:	d82a      	bhi.n	80165b6 <etharp_find_entry+0x18a>
            old_pending = i;
 8016560:	8c3b      	ldrh	r3, [r7, #32]
 8016562:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016564:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016568:	4965      	ldr	r1, [pc, #404]	; (8016700 <etharp_find_entry+0x2d4>)
 801656a:	4613      	mov	r3, r2
 801656c:	005b      	lsls	r3, r3, #1
 801656e:	4413      	add	r3, r2
 8016570:	00db      	lsls	r3, r3, #3
 8016572:	440b      	add	r3, r1
 8016574:	3312      	adds	r3, #18
 8016576:	881b      	ldrh	r3, [r3, #0]
 8016578:	837b      	strh	r3, [r7, #26]
 801657a:	e01c      	b.n	80165b6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801657c:	7dfb      	ldrb	r3, [r7, #23]
 801657e:	2b01      	cmp	r3, #1
 8016580:	d919      	bls.n	80165b6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016582:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016586:	495e      	ldr	r1, [pc, #376]	; (8016700 <etharp_find_entry+0x2d4>)
 8016588:	4613      	mov	r3, r2
 801658a:	005b      	lsls	r3, r3, #1
 801658c:	4413      	add	r3, r2
 801658e:	00db      	lsls	r3, r3, #3
 8016590:	440b      	add	r3, r1
 8016592:	3312      	adds	r3, #18
 8016594:	881b      	ldrh	r3, [r3, #0]
 8016596:	8b3a      	ldrh	r2, [r7, #24]
 8016598:	429a      	cmp	r2, r3
 801659a:	d80c      	bhi.n	80165b6 <etharp_find_entry+0x18a>
            old_stable = i;
 801659c:	8c3b      	ldrh	r3, [r7, #32]
 801659e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80165a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165a4:	4956      	ldr	r1, [pc, #344]	; (8016700 <etharp_find_entry+0x2d4>)
 80165a6:	4613      	mov	r3, r2
 80165a8:	005b      	lsls	r3, r3, #1
 80165aa:	4413      	add	r3, r2
 80165ac:	00db      	lsls	r3, r3, #3
 80165ae:	440b      	add	r3, r1
 80165b0:	3312      	adds	r3, #18
 80165b2:	881b      	ldrh	r3, [r3, #0]
 80165b4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80165b6:	8c3b      	ldrh	r3, [r7, #32]
 80165b8:	3301      	adds	r3, #1
 80165ba:	b29b      	uxth	r3, r3
 80165bc:	843b      	strh	r3, [r7, #32]
 80165be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80165c2:	2b09      	cmp	r3, #9
 80165c4:	f77f af4c 	ble.w	8016460 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80165c8:	7afb      	ldrb	r3, [r7, #11]
 80165ca:	f003 0302 	and.w	r3, r3, #2
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d108      	bne.n	80165e4 <etharp_find_entry+0x1b8>
 80165d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80165d6:	2b0a      	cmp	r3, #10
 80165d8:	d107      	bne.n	80165ea <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80165da:	7afb      	ldrb	r3, [r7, #11]
 80165dc:	f003 0301 	and.w	r3, r3, #1
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d102      	bne.n	80165ea <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80165e4:	f04f 33ff 	mov.w	r3, #4294967295
 80165e8:	e085      	b.n	80166f6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80165ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80165ee:	2b09      	cmp	r3, #9
 80165f0:	dc02      	bgt.n	80165f8 <etharp_find_entry+0x1cc>
    i = empty;
 80165f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80165f4:	843b      	strh	r3, [r7, #32]
 80165f6:	e039      	b.n	801666c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80165f8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80165fc:	2b09      	cmp	r3, #9
 80165fe:	dc14      	bgt.n	801662a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016600:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016602:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016604:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016608:	493d      	ldr	r1, [pc, #244]	; (8016700 <etharp_find_entry+0x2d4>)
 801660a:	4613      	mov	r3, r2
 801660c:	005b      	lsls	r3, r3, #1
 801660e:	4413      	add	r3, r2
 8016610:	00db      	lsls	r3, r3, #3
 8016612:	440b      	add	r3, r1
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d018      	beq.n	801664c <etharp_find_entry+0x220>
 801661a:	4b3a      	ldr	r3, [pc, #232]	; (8016704 <etharp_find_entry+0x2d8>)
 801661c:	f240 126d 	movw	r2, #365	; 0x16d
 8016620:	493b      	ldr	r1, [pc, #236]	; (8016710 <etharp_find_entry+0x2e4>)
 8016622:	483a      	ldr	r0, [pc, #232]	; (801670c <etharp_find_entry+0x2e0>)
 8016624:	f003 f94c 	bl	80198c0 <iprintf>
 8016628:	e010      	b.n	801664c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801662a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801662e:	2b09      	cmp	r3, #9
 8016630:	dc02      	bgt.n	8016638 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016632:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016634:	843b      	strh	r3, [r7, #32]
 8016636:	e009      	b.n	801664c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016638:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801663c:	2b09      	cmp	r3, #9
 801663e:	dc02      	bgt.n	8016646 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016640:	8bfb      	ldrh	r3, [r7, #30]
 8016642:	843b      	strh	r3, [r7, #32]
 8016644:	e002      	b.n	801664c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016646:	f04f 33ff 	mov.w	r3, #4294967295
 801664a:	e054      	b.n	80166f6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801664c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016650:	2b09      	cmp	r3, #9
 8016652:	dd06      	ble.n	8016662 <etharp_find_entry+0x236>
 8016654:	4b2b      	ldr	r3, [pc, #172]	; (8016704 <etharp_find_entry+0x2d8>)
 8016656:	f240 127f 	movw	r2, #383	; 0x17f
 801665a:	492e      	ldr	r1, [pc, #184]	; (8016714 <etharp_find_entry+0x2e8>)
 801665c:	482b      	ldr	r0, [pc, #172]	; (801670c <etharp_find_entry+0x2e0>)
 801665e:	f003 f92f 	bl	80198c0 <iprintf>
    etharp_free_entry(i);
 8016662:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016666:	4618      	mov	r0, r3
 8016668:	f7ff fe06 	bl	8016278 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801666c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016670:	2b09      	cmp	r3, #9
 8016672:	dd06      	ble.n	8016682 <etharp_find_entry+0x256>
 8016674:	4b23      	ldr	r3, [pc, #140]	; (8016704 <etharp_find_entry+0x2d8>)
 8016676:	f240 1283 	movw	r2, #387	; 0x183
 801667a:	4926      	ldr	r1, [pc, #152]	; (8016714 <etharp_find_entry+0x2e8>)
 801667c:	4823      	ldr	r0, [pc, #140]	; (801670c <etharp_find_entry+0x2e0>)
 801667e:	f003 f91f 	bl	80198c0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016682:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016686:	491e      	ldr	r1, [pc, #120]	; (8016700 <etharp_find_entry+0x2d4>)
 8016688:	4613      	mov	r3, r2
 801668a:	005b      	lsls	r3, r3, #1
 801668c:	4413      	add	r3, r2
 801668e:	00db      	lsls	r3, r3, #3
 8016690:	440b      	add	r3, r1
 8016692:	3314      	adds	r3, #20
 8016694:	781b      	ldrb	r3, [r3, #0]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d006      	beq.n	80166a8 <etharp_find_entry+0x27c>
 801669a:	4b1a      	ldr	r3, [pc, #104]	; (8016704 <etharp_find_entry+0x2d8>)
 801669c:	f240 1285 	movw	r2, #389	; 0x185
 80166a0:	491d      	ldr	r1, [pc, #116]	; (8016718 <etharp_find_entry+0x2ec>)
 80166a2:	481a      	ldr	r0, [pc, #104]	; (801670c <etharp_find_entry+0x2e0>)
 80166a4:	f003 f90c 	bl	80198c0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d00b      	beq.n	80166c6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80166ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80166b2:	68fb      	ldr	r3, [r7, #12]
 80166b4:	6819      	ldr	r1, [r3, #0]
 80166b6:	4812      	ldr	r0, [pc, #72]	; (8016700 <etharp_find_entry+0x2d4>)
 80166b8:	4613      	mov	r3, r2
 80166ba:	005b      	lsls	r3, r3, #1
 80166bc:	4413      	add	r3, r2
 80166be:	00db      	lsls	r3, r3, #3
 80166c0:	4403      	add	r3, r0
 80166c2:	3304      	adds	r3, #4
 80166c4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80166c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80166ca:	490d      	ldr	r1, [pc, #52]	; (8016700 <etharp_find_entry+0x2d4>)
 80166cc:	4613      	mov	r3, r2
 80166ce:	005b      	lsls	r3, r3, #1
 80166d0:	4413      	add	r3, r2
 80166d2:	00db      	lsls	r3, r3, #3
 80166d4:	440b      	add	r3, r1
 80166d6:	3312      	adds	r3, #18
 80166d8:	2200      	movs	r2, #0
 80166da:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80166dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80166e0:	4907      	ldr	r1, [pc, #28]	; (8016700 <etharp_find_entry+0x2d4>)
 80166e2:	4613      	mov	r3, r2
 80166e4:	005b      	lsls	r3, r3, #1
 80166e6:	4413      	add	r3, r2
 80166e8:	00db      	lsls	r3, r3, #3
 80166ea:	440b      	add	r3, r1
 80166ec:	3308      	adds	r3, #8
 80166ee:	687a      	ldr	r2, [r7, #4]
 80166f0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80166f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80166f6:	4618      	mov	r0, r3
 80166f8:	3728      	adds	r7, #40	; 0x28
 80166fa:	46bd      	mov	sp, r7
 80166fc:	bd80      	pop	{r7, pc}
 80166fe:	bf00      	nop
 8016700:	20008844 	.word	0x20008844
 8016704:	08020348 	.word	0x08020348
 8016708:	08020380 	.word	0x08020380
 801670c:	080203c0 	.word	0x080203c0
 8016710:	080203e8 	.word	0x080203e8
 8016714:	08020400 	.word	0x08020400
 8016718:	08020414 	.word	0x08020414

0801671c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801671c:	b580      	push	{r7, lr}
 801671e:	b088      	sub	sp, #32
 8016720:	af02      	add	r7, sp, #8
 8016722:	60f8      	str	r0, [r7, #12]
 8016724:	60b9      	str	r1, [r7, #8]
 8016726:	607a      	str	r2, [r7, #4]
 8016728:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016730:	2b06      	cmp	r3, #6
 8016732:	d006      	beq.n	8016742 <etharp_update_arp_entry+0x26>
 8016734:	4b48      	ldr	r3, [pc, #288]	; (8016858 <etharp_update_arp_entry+0x13c>)
 8016736:	f240 12a9 	movw	r2, #425	; 0x1a9
 801673a:	4948      	ldr	r1, [pc, #288]	; (801685c <etharp_update_arp_entry+0x140>)
 801673c:	4848      	ldr	r0, [pc, #288]	; (8016860 <etharp_update_arp_entry+0x144>)
 801673e:	f003 f8bf 	bl	80198c0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016742:	68bb      	ldr	r3, [r7, #8]
 8016744:	2b00      	cmp	r3, #0
 8016746:	d012      	beq.n	801676e <etharp_update_arp_entry+0x52>
 8016748:	68bb      	ldr	r3, [r7, #8]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	2b00      	cmp	r3, #0
 801674e:	d00e      	beq.n	801676e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016750:	68bb      	ldr	r3, [r7, #8]
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	68f9      	ldr	r1, [r7, #12]
 8016756:	4618      	mov	r0, r3
 8016758:	f001 f8fc 	bl	8017954 <ip4_addr_isbroadcast_u32>
 801675c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801675e:	2b00      	cmp	r3, #0
 8016760:	d105      	bne.n	801676e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016762:	68bb      	ldr	r3, [r7, #8]
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801676a:	2be0      	cmp	r3, #224	; 0xe0
 801676c:	d102      	bne.n	8016774 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801676e:	f06f 030f 	mvn.w	r3, #15
 8016772:	e06c      	b.n	801684e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016774:	78fb      	ldrb	r3, [r7, #3]
 8016776:	68fa      	ldr	r2, [r7, #12]
 8016778:	4619      	mov	r1, r3
 801677a:	68b8      	ldr	r0, [r7, #8]
 801677c:	f7ff fe56 	bl	801642c <etharp_find_entry>
 8016780:	4603      	mov	r3, r0
 8016782:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016784:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016788:	2b00      	cmp	r3, #0
 801678a:	da02      	bge.n	8016792 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801678c:	8afb      	ldrh	r3, [r7, #22]
 801678e:	b25b      	sxtb	r3, r3
 8016790:	e05d      	b.n	801684e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016792:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016796:	4933      	ldr	r1, [pc, #204]	; (8016864 <etharp_update_arp_entry+0x148>)
 8016798:	4613      	mov	r3, r2
 801679a:	005b      	lsls	r3, r3, #1
 801679c:	4413      	add	r3, r2
 801679e:	00db      	lsls	r3, r3, #3
 80167a0:	440b      	add	r3, r1
 80167a2:	3314      	adds	r3, #20
 80167a4:	2202      	movs	r2, #2
 80167a6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80167a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80167ac:	492d      	ldr	r1, [pc, #180]	; (8016864 <etharp_update_arp_entry+0x148>)
 80167ae:	4613      	mov	r3, r2
 80167b0:	005b      	lsls	r3, r3, #1
 80167b2:	4413      	add	r3, r2
 80167b4:	00db      	lsls	r3, r3, #3
 80167b6:	440b      	add	r3, r1
 80167b8:	3308      	adds	r3, #8
 80167ba:	68fa      	ldr	r2, [r7, #12]
 80167bc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80167be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80167c2:	4613      	mov	r3, r2
 80167c4:	005b      	lsls	r3, r3, #1
 80167c6:	4413      	add	r3, r2
 80167c8:	00db      	lsls	r3, r3, #3
 80167ca:	3308      	adds	r3, #8
 80167cc:	4a25      	ldr	r2, [pc, #148]	; (8016864 <etharp_update_arp_entry+0x148>)
 80167ce:	4413      	add	r3, r2
 80167d0:	3304      	adds	r3, #4
 80167d2:	2206      	movs	r2, #6
 80167d4:	6879      	ldr	r1, [r7, #4]
 80167d6:	4618      	mov	r0, r3
 80167d8:	f002 fa32 	bl	8018c40 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80167dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80167e0:	4920      	ldr	r1, [pc, #128]	; (8016864 <etharp_update_arp_entry+0x148>)
 80167e2:	4613      	mov	r3, r2
 80167e4:	005b      	lsls	r3, r3, #1
 80167e6:	4413      	add	r3, r2
 80167e8:	00db      	lsls	r3, r3, #3
 80167ea:	440b      	add	r3, r1
 80167ec:	3312      	adds	r3, #18
 80167ee:	2200      	movs	r2, #0
 80167f0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80167f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80167f6:	491b      	ldr	r1, [pc, #108]	; (8016864 <etharp_update_arp_entry+0x148>)
 80167f8:	4613      	mov	r3, r2
 80167fa:	005b      	lsls	r3, r3, #1
 80167fc:	4413      	add	r3, r2
 80167fe:	00db      	lsls	r3, r3, #3
 8016800:	440b      	add	r3, r1
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d021      	beq.n	801684c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016808:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801680c:	4915      	ldr	r1, [pc, #84]	; (8016864 <etharp_update_arp_entry+0x148>)
 801680e:	4613      	mov	r3, r2
 8016810:	005b      	lsls	r3, r3, #1
 8016812:	4413      	add	r3, r2
 8016814:	00db      	lsls	r3, r3, #3
 8016816:	440b      	add	r3, r1
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801681c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016820:	4910      	ldr	r1, [pc, #64]	; (8016864 <etharp_update_arp_entry+0x148>)
 8016822:	4613      	mov	r3, r2
 8016824:	005b      	lsls	r3, r3, #1
 8016826:	4413      	add	r3, r2
 8016828:	00db      	lsls	r3, r3, #3
 801682a:	440b      	add	r3, r1
 801682c:	2200      	movs	r2, #0
 801682e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8016836:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801683a:	9300      	str	r3, [sp, #0]
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	6939      	ldr	r1, [r7, #16]
 8016840:	68f8      	ldr	r0, [r7, #12]
 8016842:	f001 ff8b 	bl	801875c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016846:	6938      	ldr	r0, [r7, #16]
 8016848:	f7f8 fb60 	bl	800ef0c <pbuf_free>
  }
  return ERR_OK;
 801684c:	2300      	movs	r3, #0
}
 801684e:	4618      	mov	r0, r3
 8016850:	3718      	adds	r7, #24
 8016852:	46bd      	mov	sp, r7
 8016854:	bd80      	pop	{r7, pc}
 8016856:	bf00      	nop
 8016858:	08020348 	.word	0x08020348
 801685c:	08020440 	.word	0x08020440
 8016860:	080203c0 	.word	0x080203c0
 8016864:	20008844 	.word	0x20008844

08016868 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016868:	b580      	push	{r7, lr}
 801686a:	b084      	sub	sp, #16
 801686c:	af00      	add	r7, sp, #0
 801686e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016870:	2300      	movs	r3, #0
 8016872:	60fb      	str	r3, [r7, #12]
 8016874:	e01e      	b.n	80168b4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016876:	4913      	ldr	r1, [pc, #76]	; (80168c4 <etharp_cleanup_netif+0x5c>)
 8016878:	68fa      	ldr	r2, [r7, #12]
 801687a:	4613      	mov	r3, r2
 801687c:	005b      	lsls	r3, r3, #1
 801687e:	4413      	add	r3, r2
 8016880:	00db      	lsls	r3, r3, #3
 8016882:	440b      	add	r3, r1
 8016884:	3314      	adds	r3, #20
 8016886:	781b      	ldrb	r3, [r3, #0]
 8016888:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801688a:	7afb      	ldrb	r3, [r7, #11]
 801688c:	2b00      	cmp	r3, #0
 801688e:	d00e      	beq.n	80168ae <etharp_cleanup_netif+0x46>
 8016890:	490c      	ldr	r1, [pc, #48]	; (80168c4 <etharp_cleanup_netif+0x5c>)
 8016892:	68fa      	ldr	r2, [r7, #12]
 8016894:	4613      	mov	r3, r2
 8016896:	005b      	lsls	r3, r3, #1
 8016898:	4413      	add	r3, r2
 801689a:	00db      	lsls	r3, r3, #3
 801689c:	440b      	add	r3, r1
 801689e:	3308      	adds	r3, #8
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	687a      	ldr	r2, [r7, #4]
 80168a4:	429a      	cmp	r2, r3
 80168a6:	d102      	bne.n	80168ae <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80168a8:	68f8      	ldr	r0, [r7, #12]
 80168aa:	f7ff fce5 	bl	8016278 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80168ae:	68fb      	ldr	r3, [r7, #12]
 80168b0:	3301      	adds	r3, #1
 80168b2:	60fb      	str	r3, [r7, #12]
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	2b09      	cmp	r3, #9
 80168b8:	dddd      	ble.n	8016876 <etharp_cleanup_netif+0xe>
    }
  }
}
 80168ba:	bf00      	nop
 80168bc:	3710      	adds	r7, #16
 80168be:	46bd      	mov	sp, r7
 80168c0:	bd80      	pop	{r7, pc}
 80168c2:	bf00      	nop
 80168c4:	20008844 	.word	0x20008844

080168c8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80168c8:	b5b0      	push	{r4, r5, r7, lr}
 80168ca:	b08a      	sub	sp, #40	; 0x28
 80168cc:	af04      	add	r7, sp, #16
 80168ce:	6078      	str	r0, [r7, #4]
 80168d0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80168d2:	683b      	ldr	r3, [r7, #0]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d107      	bne.n	80168e8 <etharp_input+0x20>
 80168d8:	4b3d      	ldr	r3, [pc, #244]	; (80169d0 <etharp_input+0x108>)
 80168da:	f240 228a 	movw	r2, #650	; 0x28a
 80168de:	493d      	ldr	r1, [pc, #244]	; (80169d4 <etharp_input+0x10c>)
 80168e0:	483d      	ldr	r0, [pc, #244]	; (80169d8 <etharp_input+0x110>)
 80168e2:	f002 ffed 	bl	80198c0 <iprintf>
 80168e6:	e06f      	b.n	80169c8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	685b      	ldr	r3, [r3, #4]
 80168ec:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80168ee:	693b      	ldr	r3, [r7, #16]
 80168f0:	881b      	ldrh	r3, [r3, #0]
 80168f2:	b29b      	uxth	r3, r3
 80168f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80168f8:	d10c      	bne.n	8016914 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80168fa:	693b      	ldr	r3, [r7, #16]
 80168fc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80168fe:	2b06      	cmp	r3, #6
 8016900:	d108      	bne.n	8016914 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016902:	693b      	ldr	r3, [r7, #16]
 8016904:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016906:	2b04      	cmp	r3, #4
 8016908:	d104      	bne.n	8016914 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801690a:	693b      	ldr	r3, [r7, #16]
 801690c:	885b      	ldrh	r3, [r3, #2]
 801690e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016910:	2b08      	cmp	r3, #8
 8016912:	d003      	beq.n	801691c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016914:	6878      	ldr	r0, [r7, #4]
 8016916:	f7f8 faf9 	bl	800ef0c <pbuf_free>
    return;
 801691a:	e055      	b.n	80169c8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801691c:	693b      	ldr	r3, [r7, #16]
 801691e:	330e      	adds	r3, #14
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016924:	693b      	ldr	r3, [r7, #16]
 8016926:	3318      	adds	r3, #24
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801692c:	683b      	ldr	r3, [r7, #0]
 801692e:	3304      	adds	r3, #4
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d102      	bne.n	801693c <etharp_input+0x74>
    for_us = 0;
 8016936:	2300      	movs	r3, #0
 8016938:	75fb      	strb	r3, [r7, #23]
 801693a:	e009      	b.n	8016950 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801693c:	68ba      	ldr	r2, [r7, #8]
 801693e:	683b      	ldr	r3, [r7, #0]
 8016940:	3304      	adds	r3, #4
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	429a      	cmp	r2, r3
 8016946:	bf0c      	ite	eq
 8016948:	2301      	moveq	r3, #1
 801694a:	2300      	movne	r3, #0
 801694c:	b2db      	uxtb	r3, r3
 801694e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016950:	693b      	ldr	r3, [r7, #16]
 8016952:	f103 0208 	add.w	r2, r3, #8
 8016956:	7dfb      	ldrb	r3, [r7, #23]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d001      	beq.n	8016960 <etharp_input+0x98>
 801695c:	2301      	movs	r3, #1
 801695e:	e000      	b.n	8016962 <etharp_input+0x9a>
 8016960:	2302      	movs	r3, #2
 8016962:	f107 010c 	add.w	r1, r7, #12
 8016966:	6838      	ldr	r0, [r7, #0]
 8016968:	f7ff fed8 	bl	801671c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801696c:	693b      	ldr	r3, [r7, #16]
 801696e:	88db      	ldrh	r3, [r3, #6]
 8016970:	b29b      	uxth	r3, r3
 8016972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016976:	d003      	beq.n	8016980 <etharp_input+0xb8>
 8016978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801697c:	d01e      	beq.n	80169bc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801697e:	e020      	b.n	80169c2 <etharp_input+0xfa>
      if (for_us) {
 8016980:	7dfb      	ldrb	r3, [r7, #23]
 8016982:	2b00      	cmp	r3, #0
 8016984:	d01c      	beq.n	80169c0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016986:	683b      	ldr	r3, [r7, #0]
 8016988:	f103 0022 	add.w	r0, r3, #34	; 0x22
 801698c:	693b      	ldr	r3, [r7, #16]
 801698e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016992:	683b      	ldr	r3, [r7, #0]
 8016994:	f103 0522 	add.w	r5, r3, #34	; 0x22
 8016998:	683b      	ldr	r3, [r7, #0]
 801699a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801699c:	693a      	ldr	r2, [r7, #16]
 801699e:	3208      	adds	r2, #8
        etharp_raw(netif,
 80169a0:	2102      	movs	r1, #2
 80169a2:	9103      	str	r1, [sp, #12]
 80169a4:	f107 010c 	add.w	r1, r7, #12
 80169a8:	9102      	str	r1, [sp, #8]
 80169aa:	9201      	str	r2, [sp, #4]
 80169ac:	9300      	str	r3, [sp, #0]
 80169ae:	462b      	mov	r3, r5
 80169b0:	4622      	mov	r2, r4
 80169b2:	4601      	mov	r1, r0
 80169b4:	6838      	ldr	r0, [r7, #0]
 80169b6:	f000 faeb 	bl	8016f90 <etharp_raw>
      break;
 80169ba:	e001      	b.n	80169c0 <etharp_input+0xf8>
      break;
 80169bc:	bf00      	nop
 80169be:	e000      	b.n	80169c2 <etharp_input+0xfa>
      break;
 80169c0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80169c2:	6878      	ldr	r0, [r7, #4]
 80169c4:	f7f8 faa2 	bl	800ef0c <pbuf_free>
}
 80169c8:	3718      	adds	r7, #24
 80169ca:	46bd      	mov	sp, r7
 80169cc:	bdb0      	pop	{r4, r5, r7, pc}
 80169ce:	bf00      	nop
 80169d0:	08020348 	.word	0x08020348
 80169d4:	08020498 	.word	0x08020498
 80169d8:	080203c0 	.word	0x080203c0

080169dc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80169dc:	b580      	push	{r7, lr}
 80169de:	b086      	sub	sp, #24
 80169e0:	af02      	add	r7, sp, #8
 80169e2:	60f8      	str	r0, [r7, #12]
 80169e4:	60b9      	str	r1, [r7, #8]
 80169e6:	4613      	mov	r3, r2
 80169e8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80169ea:	79fa      	ldrb	r2, [r7, #7]
 80169ec:	4944      	ldr	r1, [pc, #272]	; (8016b00 <etharp_output_to_arp_index+0x124>)
 80169ee:	4613      	mov	r3, r2
 80169f0:	005b      	lsls	r3, r3, #1
 80169f2:	4413      	add	r3, r2
 80169f4:	00db      	lsls	r3, r3, #3
 80169f6:	440b      	add	r3, r1
 80169f8:	3314      	adds	r3, #20
 80169fa:	781b      	ldrb	r3, [r3, #0]
 80169fc:	2b01      	cmp	r3, #1
 80169fe:	d806      	bhi.n	8016a0e <etharp_output_to_arp_index+0x32>
 8016a00:	4b40      	ldr	r3, [pc, #256]	; (8016b04 <etharp_output_to_arp_index+0x128>)
 8016a02:	f240 22ef 	movw	r2, #751	; 0x2ef
 8016a06:	4940      	ldr	r1, [pc, #256]	; (8016b08 <etharp_output_to_arp_index+0x12c>)
 8016a08:	4840      	ldr	r0, [pc, #256]	; (8016b0c <etharp_output_to_arp_index+0x130>)
 8016a0a:	f002 ff59 	bl	80198c0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016a0e:	79fa      	ldrb	r2, [r7, #7]
 8016a10:	493b      	ldr	r1, [pc, #236]	; (8016b00 <etharp_output_to_arp_index+0x124>)
 8016a12:	4613      	mov	r3, r2
 8016a14:	005b      	lsls	r3, r3, #1
 8016a16:	4413      	add	r3, r2
 8016a18:	00db      	lsls	r3, r3, #3
 8016a1a:	440b      	add	r3, r1
 8016a1c:	3314      	adds	r3, #20
 8016a1e:	781b      	ldrb	r3, [r3, #0]
 8016a20:	2b02      	cmp	r3, #2
 8016a22:	d153      	bne.n	8016acc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016a24:	79fa      	ldrb	r2, [r7, #7]
 8016a26:	4936      	ldr	r1, [pc, #216]	; (8016b00 <etharp_output_to_arp_index+0x124>)
 8016a28:	4613      	mov	r3, r2
 8016a2a:	005b      	lsls	r3, r3, #1
 8016a2c:	4413      	add	r3, r2
 8016a2e:	00db      	lsls	r3, r3, #3
 8016a30:	440b      	add	r3, r1
 8016a32:	3312      	adds	r3, #18
 8016a34:	881b      	ldrh	r3, [r3, #0]
 8016a36:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016a3a:	d919      	bls.n	8016a70 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016a3c:	79fa      	ldrb	r2, [r7, #7]
 8016a3e:	4613      	mov	r3, r2
 8016a40:	005b      	lsls	r3, r3, #1
 8016a42:	4413      	add	r3, r2
 8016a44:	00db      	lsls	r3, r3, #3
 8016a46:	4a2e      	ldr	r2, [pc, #184]	; (8016b00 <etharp_output_to_arp_index+0x124>)
 8016a48:	4413      	add	r3, r2
 8016a4a:	3304      	adds	r3, #4
 8016a4c:	4619      	mov	r1, r3
 8016a4e:	68f8      	ldr	r0, [r7, #12]
 8016a50:	f000 fb4c 	bl	80170ec <etharp_request>
 8016a54:	4603      	mov	r3, r0
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d138      	bne.n	8016acc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016a5a:	79fa      	ldrb	r2, [r7, #7]
 8016a5c:	4928      	ldr	r1, [pc, #160]	; (8016b00 <etharp_output_to_arp_index+0x124>)
 8016a5e:	4613      	mov	r3, r2
 8016a60:	005b      	lsls	r3, r3, #1
 8016a62:	4413      	add	r3, r2
 8016a64:	00db      	lsls	r3, r3, #3
 8016a66:	440b      	add	r3, r1
 8016a68:	3314      	adds	r3, #20
 8016a6a:	2203      	movs	r2, #3
 8016a6c:	701a      	strb	r2, [r3, #0]
 8016a6e:	e02d      	b.n	8016acc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016a70:	79fa      	ldrb	r2, [r7, #7]
 8016a72:	4923      	ldr	r1, [pc, #140]	; (8016b00 <etharp_output_to_arp_index+0x124>)
 8016a74:	4613      	mov	r3, r2
 8016a76:	005b      	lsls	r3, r3, #1
 8016a78:	4413      	add	r3, r2
 8016a7a:	00db      	lsls	r3, r3, #3
 8016a7c:	440b      	add	r3, r1
 8016a7e:	3312      	adds	r3, #18
 8016a80:	881b      	ldrh	r3, [r3, #0]
 8016a82:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016a86:	d321      	bcc.n	8016acc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016a88:	79fa      	ldrb	r2, [r7, #7]
 8016a8a:	4613      	mov	r3, r2
 8016a8c:	005b      	lsls	r3, r3, #1
 8016a8e:	4413      	add	r3, r2
 8016a90:	00db      	lsls	r3, r3, #3
 8016a92:	4a1b      	ldr	r2, [pc, #108]	; (8016b00 <etharp_output_to_arp_index+0x124>)
 8016a94:	4413      	add	r3, r2
 8016a96:	1d19      	adds	r1, r3, #4
 8016a98:	79fa      	ldrb	r2, [r7, #7]
 8016a9a:	4613      	mov	r3, r2
 8016a9c:	005b      	lsls	r3, r3, #1
 8016a9e:	4413      	add	r3, r2
 8016aa0:	00db      	lsls	r3, r3, #3
 8016aa2:	3308      	adds	r3, #8
 8016aa4:	4a16      	ldr	r2, [pc, #88]	; (8016b00 <etharp_output_to_arp_index+0x124>)
 8016aa6:	4413      	add	r3, r2
 8016aa8:	3304      	adds	r3, #4
 8016aaa:	461a      	mov	r2, r3
 8016aac:	68f8      	ldr	r0, [r7, #12]
 8016aae:	f000 fafb 	bl	80170a8 <etharp_request_dst>
 8016ab2:	4603      	mov	r3, r0
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d109      	bne.n	8016acc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016ab8:	79fa      	ldrb	r2, [r7, #7]
 8016aba:	4911      	ldr	r1, [pc, #68]	; (8016b00 <etharp_output_to_arp_index+0x124>)
 8016abc:	4613      	mov	r3, r2
 8016abe:	005b      	lsls	r3, r3, #1
 8016ac0:	4413      	add	r3, r2
 8016ac2:	00db      	lsls	r3, r3, #3
 8016ac4:	440b      	add	r3, r1
 8016ac6:	3314      	adds	r3, #20
 8016ac8:	2203      	movs	r2, #3
 8016aca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	f103 0122 	add.w	r1, r3, #34	; 0x22
 8016ad2:	79fa      	ldrb	r2, [r7, #7]
 8016ad4:	4613      	mov	r3, r2
 8016ad6:	005b      	lsls	r3, r3, #1
 8016ad8:	4413      	add	r3, r2
 8016ada:	00db      	lsls	r3, r3, #3
 8016adc:	3308      	adds	r3, #8
 8016ade:	4a08      	ldr	r2, [pc, #32]	; (8016b00 <etharp_output_to_arp_index+0x124>)
 8016ae0:	4413      	add	r3, r2
 8016ae2:	1d1a      	adds	r2, r3, #4
 8016ae4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016ae8:	9300      	str	r3, [sp, #0]
 8016aea:	4613      	mov	r3, r2
 8016aec:	460a      	mov	r2, r1
 8016aee:	68b9      	ldr	r1, [r7, #8]
 8016af0:	68f8      	ldr	r0, [r7, #12]
 8016af2:	f001 fe33 	bl	801875c <ethernet_output>
 8016af6:	4603      	mov	r3, r0
}
 8016af8:	4618      	mov	r0, r3
 8016afa:	3710      	adds	r7, #16
 8016afc:	46bd      	mov	sp, r7
 8016afe:	bd80      	pop	{r7, pc}
 8016b00:	20008844 	.word	0x20008844
 8016b04:	08020348 	.word	0x08020348
 8016b08:	080204b8 	.word	0x080204b8
 8016b0c:	080203c0 	.word	0x080203c0

08016b10 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b08a      	sub	sp, #40	; 0x28
 8016b14:	af02      	add	r7, sp, #8
 8016b16:	60f8      	str	r0, [r7, #12]
 8016b18:	60b9      	str	r1, [r7, #8]
 8016b1a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d106      	bne.n	8016b34 <etharp_output+0x24>
 8016b26:	4b73      	ldr	r3, [pc, #460]	; (8016cf4 <etharp_output+0x1e4>)
 8016b28:	f240 321e 	movw	r2, #798	; 0x31e
 8016b2c:	4972      	ldr	r1, [pc, #456]	; (8016cf8 <etharp_output+0x1e8>)
 8016b2e:	4873      	ldr	r0, [pc, #460]	; (8016cfc <etharp_output+0x1ec>)
 8016b30:	f002 fec6 	bl	80198c0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016b34:	68bb      	ldr	r3, [r7, #8]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d106      	bne.n	8016b48 <etharp_output+0x38>
 8016b3a:	4b6e      	ldr	r3, [pc, #440]	; (8016cf4 <etharp_output+0x1e4>)
 8016b3c:	f240 321f 	movw	r2, #799	; 0x31f
 8016b40:	496f      	ldr	r1, [pc, #444]	; (8016d00 <etharp_output+0x1f0>)
 8016b42:	486e      	ldr	r0, [pc, #440]	; (8016cfc <etharp_output+0x1ec>)
 8016b44:	f002 febc 	bl	80198c0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d106      	bne.n	8016b5c <etharp_output+0x4c>
 8016b4e:	4b69      	ldr	r3, [pc, #420]	; (8016cf4 <etharp_output+0x1e4>)
 8016b50:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016b54:	496b      	ldr	r1, [pc, #428]	; (8016d04 <etharp_output+0x1f4>)
 8016b56:	4869      	ldr	r0, [pc, #420]	; (8016cfc <etharp_output+0x1ec>)
 8016b58:	f002 feb2 	bl	80198c0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	68f9      	ldr	r1, [r7, #12]
 8016b62:	4618      	mov	r0, r3
 8016b64:	f000 fef6 	bl	8017954 <ip4_addr_isbroadcast_u32>
 8016b68:	4603      	mov	r3, r0
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d002      	beq.n	8016b74 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016b6e:	4b66      	ldr	r3, [pc, #408]	; (8016d08 <etharp_output+0x1f8>)
 8016b70:	61fb      	str	r3, [r7, #28]
 8016b72:	e0af      	b.n	8016cd4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016b7c:	2be0      	cmp	r3, #224	; 0xe0
 8016b7e:	d118      	bne.n	8016bb2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016b80:	2301      	movs	r3, #1
 8016b82:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016b84:	2300      	movs	r3, #0
 8016b86:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016b88:	235e      	movs	r3, #94	; 0x5e
 8016b8a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	3301      	adds	r3, #1
 8016b90:	781b      	ldrb	r3, [r3, #0]
 8016b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016b96:	b2db      	uxtb	r3, r3
 8016b98:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	3302      	adds	r3, #2
 8016b9e:	781b      	ldrb	r3, [r3, #0]
 8016ba0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	3303      	adds	r3, #3
 8016ba6:	781b      	ldrb	r3, [r3, #0]
 8016ba8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016baa:	f107 0310 	add.w	r3, r7, #16
 8016bae:	61fb      	str	r3, [r7, #28]
 8016bb0:	e090      	b.n	8016cd4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	681a      	ldr	r2, [r3, #0]
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	3304      	adds	r3, #4
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	405a      	eors	r2, r3
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	3308      	adds	r3, #8
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	4013      	ands	r3, r2
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d012      	beq.n	8016bf0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016bd0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016bd4:	4293      	cmp	r3, r2
 8016bd6:	d00b      	beq.n	8016bf0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	330c      	adds	r3, #12
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d003      	beq.n	8016bea <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	330c      	adds	r3, #12
 8016be6:	61bb      	str	r3, [r7, #24]
 8016be8:	e002      	b.n	8016bf0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016bea:	f06f 0303 	mvn.w	r3, #3
 8016bee:	e07d      	b.n	8016cec <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016bf0:	4b46      	ldr	r3, [pc, #280]	; (8016d0c <etharp_output+0x1fc>)
 8016bf2:	781b      	ldrb	r3, [r3, #0]
 8016bf4:	4619      	mov	r1, r3
 8016bf6:	4a46      	ldr	r2, [pc, #280]	; (8016d10 <etharp_output+0x200>)
 8016bf8:	460b      	mov	r3, r1
 8016bfa:	005b      	lsls	r3, r3, #1
 8016bfc:	440b      	add	r3, r1
 8016bfe:	00db      	lsls	r3, r3, #3
 8016c00:	4413      	add	r3, r2
 8016c02:	3314      	adds	r3, #20
 8016c04:	781b      	ldrb	r3, [r3, #0]
 8016c06:	2b01      	cmp	r3, #1
 8016c08:	d925      	bls.n	8016c56 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016c0a:	4b40      	ldr	r3, [pc, #256]	; (8016d0c <etharp_output+0x1fc>)
 8016c0c:	781b      	ldrb	r3, [r3, #0]
 8016c0e:	4619      	mov	r1, r3
 8016c10:	4a3f      	ldr	r2, [pc, #252]	; (8016d10 <etharp_output+0x200>)
 8016c12:	460b      	mov	r3, r1
 8016c14:	005b      	lsls	r3, r3, #1
 8016c16:	440b      	add	r3, r1
 8016c18:	00db      	lsls	r3, r3, #3
 8016c1a:	4413      	add	r3, r2
 8016c1c:	3308      	adds	r3, #8
 8016c1e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016c20:	68fa      	ldr	r2, [r7, #12]
 8016c22:	429a      	cmp	r2, r3
 8016c24:	d117      	bne.n	8016c56 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016c26:	69bb      	ldr	r3, [r7, #24]
 8016c28:	681a      	ldr	r2, [r3, #0]
 8016c2a:	4b38      	ldr	r3, [pc, #224]	; (8016d0c <etharp_output+0x1fc>)
 8016c2c:	781b      	ldrb	r3, [r3, #0]
 8016c2e:	4618      	mov	r0, r3
 8016c30:	4937      	ldr	r1, [pc, #220]	; (8016d10 <etharp_output+0x200>)
 8016c32:	4603      	mov	r3, r0
 8016c34:	005b      	lsls	r3, r3, #1
 8016c36:	4403      	add	r3, r0
 8016c38:	00db      	lsls	r3, r3, #3
 8016c3a:	440b      	add	r3, r1
 8016c3c:	3304      	adds	r3, #4
 8016c3e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016c40:	429a      	cmp	r2, r3
 8016c42:	d108      	bne.n	8016c56 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016c44:	4b31      	ldr	r3, [pc, #196]	; (8016d0c <etharp_output+0x1fc>)
 8016c46:	781b      	ldrb	r3, [r3, #0]
 8016c48:	461a      	mov	r2, r3
 8016c4a:	68b9      	ldr	r1, [r7, #8]
 8016c4c:	68f8      	ldr	r0, [r7, #12]
 8016c4e:	f7ff fec5 	bl	80169dc <etharp_output_to_arp_index>
 8016c52:	4603      	mov	r3, r0
 8016c54:	e04a      	b.n	8016cec <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016c56:	2300      	movs	r3, #0
 8016c58:	75fb      	strb	r3, [r7, #23]
 8016c5a:	e031      	b.n	8016cc0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016c5c:	7dfa      	ldrb	r2, [r7, #23]
 8016c5e:	492c      	ldr	r1, [pc, #176]	; (8016d10 <etharp_output+0x200>)
 8016c60:	4613      	mov	r3, r2
 8016c62:	005b      	lsls	r3, r3, #1
 8016c64:	4413      	add	r3, r2
 8016c66:	00db      	lsls	r3, r3, #3
 8016c68:	440b      	add	r3, r1
 8016c6a:	3314      	adds	r3, #20
 8016c6c:	781b      	ldrb	r3, [r3, #0]
 8016c6e:	2b01      	cmp	r3, #1
 8016c70:	d923      	bls.n	8016cba <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016c72:	7dfa      	ldrb	r2, [r7, #23]
 8016c74:	4926      	ldr	r1, [pc, #152]	; (8016d10 <etharp_output+0x200>)
 8016c76:	4613      	mov	r3, r2
 8016c78:	005b      	lsls	r3, r3, #1
 8016c7a:	4413      	add	r3, r2
 8016c7c:	00db      	lsls	r3, r3, #3
 8016c7e:	440b      	add	r3, r1
 8016c80:	3308      	adds	r3, #8
 8016c82:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016c84:	68fa      	ldr	r2, [r7, #12]
 8016c86:	429a      	cmp	r2, r3
 8016c88:	d117      	bne.n	8016cba <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016c8a:	69bb      	ldr	r3, [r7, #24]
 8016c8c:	6819      	ldr	r1, [r3, #0]
 8016c8e:	7dfa      	ldrb	r2, [r7, #23]
 8016c90:	481f      	ldr	r0, [pc, #124]	; (8016d10 <etharp_output+0x200>)
 8016c92:	4613      	mov	r3, r2
 8016c94:	005b      	lsls	r3, r3, #1
 8016c96:	4413      	add	r3, r2
 8016c98:	00db      	lsls	r3, r3, #3
 8016c9a:	4403      	add	r3, r0
 8016c9c:	3304      	adds	r3, #4
 8016c9e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016ca0:	4299      	cmp	r1, r3
 8016ca2:	d10a      	bne.n	8016cba <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016ca4:	4a19      	ldr	r2, [pc, #100]	; (8016d0c <etharp_output+0x1fc>)
 8016ca6:	7dfb      	ldrb	r3, [r7, #23]
 8016ca8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016caa:	7dfb      	ldrb	r3, [r7, #23]
 8016cac:	461a      	mov	r2, r3
 8016cae:	68b9      	ldr	r1, [r7, #8]
 8016cb0:	68f8      	ldr	r0, [r7, #12]
 8016cb2:	f7ff fe93 	bl	80169dc <etharp_output_to_arp_index>
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	e018      	b.n	8016cec <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016cba:	7dfb      	ldrb	r3, [r7, #23]
 8016cbc:	3301      	adds	r3, #1
 8016cbe:	75fb      	strb	r3, [r7, #23]
 8016cc0:	7dfb      	ldrb	r3, [r7, #23]
 8016cc2:	2b09      	cmp	r3, #9
 8016cc4:	d9ca      	bls.n	8016c5c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016cc6:	68ba      	ldr	r2, [r7, #8]
 8016cc8:	69b9      	ldr	r1, [r7, #24]
 8016cca:	68f8      	ldr	r0, [r7, #12]
 8016ccc:	f000 f822 	bl	8016d14 <etharp_query>
 8016cd0:	4603      	mov	r3, r0
 8016cd2:	e00b      	b.n	8016cec <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8016cda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016cde:	9300      	str	r3, [sp, #0]
 8016ce0:	69fb      	ldr	r3, [r7, #28]
 8016ce2:	68b9      	ldr	r1, [r7, #8]
 8016ce4:	68f8      	ldr	r0, [r7, #12]
 8016ce6:	f001 fd39 	bl	801875c <ethernet_output>
 8016cea:	4603      	mov	r3, r0
}
 8016cec:	4618      	mov	r0, r3
 8016cee:	3720      	adds	r7, #32
 8016cf0:	46bd      	mov	sp, r7
 8016cf2:	bd80      	pop	{r7, pc}
 8016cf4:	08020348 	.word	0x08020348
 8016cf8:	08020498 	.word	0x08020498
 8016cfc:	080203c0 	.word	0x080203c0
 8016d00:	080204e8 	.word	0x080204e8
 8016d04:	08020488 	.word	0x08020488
 8016d08:	08020b3c 	.word	0x08020b3c
 8016d0c:	20008934 	.word	0x20008934
 8016d10:	20008844 	.word	0x20008844

08016d14 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016d14:	b580      	push	{r7, lr}
 8016d16:	b08c      	sub	sp, #48	; 0x30
 8016d18:	af02      	add	r7, sp, #8
 8016d1a:	60f8      	str	r0, [r7, #12]
 8016d1c:	60b9      	str	r1, [r7, #8]
 8016d1e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	3322      	adds	r3, #34	; 0x22
 8016d24:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016d26:	23ff      	movs	r3, #255	; 0xff
 8016d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016d30:	68bb      	ldr	r3, [r7, #8]
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	68f9      	ldr	r1, [r7, #12]
 8016d36:	4618      	mov	r0, r3
 8016d38:	f000 fe0c 	bl	8017954 <ip4_addr_isbroadcast_u32>
 8016d3c:	4603      	mov	r3, r0
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d10c      	bne.n	8016d5c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016d42:	68bb      	ldr	r3, [r7, #8]
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016d4a:	2be0      	cmp	r3, #224	; 0xe0
 8016d4c:	d006      	beq.n	8016d5c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016d4e:	68bb      	ldr	r3, [r7, #8]
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d003      	beq.n	8016d5c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016d54:	68bb      	ldr	r3, [r7, #8]
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d102      	bne.n	8016d62 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016d5c:	f06f 030f 	mvn.w	r3, #15
 8016d60:	e102      	b.n	8016f68 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016d62:	68fa      	ldr	r2, [r7, #12]
 8016d64:	2101      	movs	r1, #1
 8016d66:	68b8      	ldr	r0, [r7, #8]
 8016d68:	f7ff fb60 	bl	801642c <etharp_find_entry>
 8016d6c:	4603      	mov	r3, r0
 8016d6e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016d70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	da02      	bge.n	8016d7e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016d78:	8a7b      	ldrh	r3, [r7, #18]
 8016d7a:	b25b      	sxtb	r3, r3
 8016d7c:	e0f4      	b.n	8016f68 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016d7e:	8a7b      	ldrh	r3, [r7, #18]
 8016d80:	2b7e      	cmp	r3, #126	; 0x7e
 8016d82:	d906      	bls.n	8016d92 <etharp_query+0x7e>
 8016d84:	4b7a      	ldr	r3, [pc, #488]	; (8016f70 <etharp_query+0x25c>)
 8016d86:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016d8a:	497a      	ldr	r1, [pc, #488]	; (8016f74 <etharp_query+0x260>)
 8016d8c:	487a      	ldr	r0, [pc, #488]	; (8016f78 <etharp_query+0x264>)
 8016d8e:	f002 fd97 	bl	80198c0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016d92:	8a7b      	ldrh	r3, [r7, #18]
 8016d94:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016d96:	7c7a      	ldrb	r2, [r7, #17]
 8016d98:	4978      	ldr	r1, [pc, #480]	; (8016f7c <etharp_query+0x268>)
 8016d9a:	4613      	mov	r3, r2
 8016d9c:	005b      	lsls	r3, r3, #1
 8016d9e:	4413      	add	r3, r2
 8016da0:	00db      	lsls	r3, r3, #3
 8016da2:	440b      	add	r3, r1
 8016da4:	3314      	adds	r3, #20
 8016da6:	781b      	ldrb	r3, [r3, #0]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d115      	bne.n	8016dd8 <etharp_query+0xc4>
    is_new_entry = 1;
 8016dac:	2301      	movs	r3, #1
 8016dae:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016db0:	7c7a      	ldrb	r2, [r7, #17]
 8016db2:	4972      	ldr	r1, [pc, #456]	; (8016f7c <etharp_query+0x268>)
 8016db4:	4613      	mov	r3, r2
 8016db6:	005b      	lsls	r3, r3, #1
 8016db8:	4413      	add	r3, r2
 8016dba:	00db      	lsls	r3, r3, #3
 8016dbc:	440b      	add	r3, r1
 8016dbe:	3314      	adds	r3, #20
 8016dc0:	2201      	movs	r2, #1
 8016dc2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016dc4:	7c7a      	ldrb	r2, [r7, #17]
 8016dc6:	496d      	ldr	r1, [pc, #436]	; (8016f7c <etharp_query+0x268>)
 8016dc8:	4613      	mov	r3, r2
 8016dca:	005b      	lsls	r3, r3, #1
 8016dcc:	4413      	add	r3, r2
 8016dce:	00db      	lsls	r3, r3, #3
 8016dd0:	440b      	add	r3, r1
 8016dd2:	3308      	adds	r3, #8
 8016dd4:	68fa      	ldr	r2, [r7, #12]
 8016dd6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016dd8:	7c7a      	ldrb	r2, [r7, #17]
 8016dda:	4968      	ldr	r1, [pc, #416]	; (8016f7c <etharp_query+0x268>)
 8016ddc:	4613      	mov	r3, r2
 8016dde:	005b      	lsls	r3, r3, #1
 8016de0:	4413      	add	r3, r2
 8016de2:	00db      	lsls	r3, r3, #3
 8016de4:	440b      	add	r3, r1
 8016de6:	3314      	adds	r3, #20
 8016de8:	781b      	ldrb	r3, [r3, #0]
 8016dea:	2b01      	cmp	r3, #1
 8016dec:	d011      	beq.n	8016e12 <etharp_query+0xfe>
 8016dee:	7c7a      	ldrb	r2, [r7, #17]
 8016df0:	4962      	ldr	r1, [pc, #392]	; (8016f7c <etharp_query+0x268>)
 8016df2:	4613      	mov	r3, r2
 8016df4:	005b      	lsls	r3, r3, #1
 8016df6:	4413      	add	r3, r2
 8016df8:	00db      	lsls	r3, r3, #3
 8016dfa:	440b      	add	r3, r1
 8016dfc:	3314      	adds	r3, #20
 8016dfe:	781b      	ldrb	r3, [r3, #0]
 8016e00:	2b01      	cmp	r3, #1
 8016e02:	d806      	bhi.n	8016e12 <etharp_query+0xfe>
 8016e04:	4b5a      	ldr	r3, [pc, #360]	; (8016f70 <etharp_query+0x25c>)
 8016e06:	f240 32cf 	movw	r2, #975	; 0x3cf
 8016e0a:	495d      	ldr	r1, [pc, #372]	; (8016f80 <etharp_query+0x26c>)
 8016e0c:	485a      	ldr	r0, [pc, #360]	; (8016f78 <etharp_query+0x264>)
 8016e0e:	f002 fd57 	bl	80198c0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016e12:	6a3b      	ldr	r3, [r7, #32]
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d102      	bne.n	8016e1e <etharp_query+0x10a>
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d10c      	bne.n	8016e38 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016e1e:	68b9      	ldr	r1, [r7, #8]
 8016e20:	68f8      	ldr	r0, [r7, #12]
 8016e22:	f000 f963 	bl	80170ec <etharp_request>
 8016e26:	4603      	mov	r3, r0
 8016e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d102      	bne.n	8016e38 <etharp_query+0x124>
      return result;
 8016e32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016e36:	e097      	b.n	8016f68 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d106      	bne.n	8016e4c <etharp_query+0x138>
 8016e3e:	4b4c      	ldr	r3, [pc, #304]	; (8016f70 <etharp_query+0x25c>)
 8016e40:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016e44:	494f      	ldr	r1, [pc, #316]	; (8016f84 <etharp_query+0x270>)
 8016e46:	484c      	ldr	r0, [pc, #304]	; (8016f78 <etharp_query+0x264>)
 8016e48:	f002 fd3a 	bl	80198c0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016e4c:	7c7a      	ldrb	r2, [r7, #17]
 8016e4e:	494b      	ldr	r1, [pc, #300]	; (8016f7c <etharp_query+0x268>)
 8016e50:	4613      	mov	r3, r2
 8016e52:	005b      	lsls	r3, r3, #1
 8016e54:	4413      	add	r3, r2
 8016e56:	00db      	lsls	r3, r3, #3
 8016e58:	440b      	add	r3, r1
 8016e5a:	3314      	adds	r3, #20
 8016e5c:	781b      	ldrb	r3, [r3, #0]
 8016e5e:	2b01      	cmp	r3, #1
 8016e60:	d918      	bls.n	8016e94 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016e62:	4a49      	ldr	r2, [pc, #292]	; (8016f88 <etharp_query+0x274>)
 8016e64:	7c7b      	ldrb	r3, [r7, #17]
 8016e66:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016e68:	7c7a      	ldrb	r2, [r7, #17]
 8016e6a:	4613      	mov	r3, r2
 8016e6c:	005b      	lsls	r3, r3, #1
 8016e6e:	4413      	add	r3, r2
 8016e70:	00db      	lsls	r3, r3, #3
 8016e72:	3308      	adds	r3, #8
 8016e74:	4a41      	ldr	r2, [pc, #260]	; (8016f7c <etharp_query+0x268>)
 8016e76:	4413      	add	r3, r2
 8016e78:	1d1a      	adds	r2, r3, #4
 8016e7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016e7e:	9300      	str	r3, [sp, #0]
 8016e80:	4613      	mov	r3, r2
 8016e82:	697a      	ldr	r2, [r7, #20]
 8016e84:	6879      	ldr	r1, [r7, #4]
 8016e86:	68f8      	ldr	r0, [r7, #12]
 8016e88:	f001 fc68 	bl	801875c <ethernet_output>
 8016e8c:	4603      	mov	r3, r0
 8016e8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016e92:	e067      	b.n	8016f64 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016e94:	7c7a      	ldrb	r2, [r7, #17]
 8016e96:	4939      	ldr	r1, [pc, #228]	; (8016f7c <etharp_query+0x268>)
 8016e98:	4613      	mov	r3, r2
 8016e9a:	005b      	lsls	r3, r3, #1
 8016e9c:	4413      	add	r3, r2
 8016e9e:	00db      	lsls	r3, r3, #3
 8016ea0:	440b      	add	r3, r1
 8016ea2:	3314      	adds	r3, #20
 8016ea4:	781b      	ldrb	r3, [r3, #0]
 8016ea6:	2b01      	cmp	r3, #1
 8016ea8:	d15c      	bne.n	8016f64 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016eaa:	2300      	movs	r3, #0
 8016eac:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016eb2:	e01c      	b.n	8016eee <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016eb4:	69fb      	ldr	r3, [r7, #28]
 8016eb6:	895a      	ldrh	r2, [r3, #10]
 8016eb8:	69fb      	ldr	r3, [r7, #28]
 8016eba:	891b      	ldrh	r3, [r3, #8]
 8016ebc:	429a      	cmp	r2, r3
 8016ebe:	d10a      	bne.n	8016ed6 <etharp_query+0x1c2>
 8016ec0:	69fb      	ldr	r3, [r7, #28]
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d006      	beq.n	8016ed6 <etharp_query+0x1c2>
 8016ec8:	4b29      	ldr	r3, [pc, #164]	; (8016f70 <etharp_query+0x25c>)
 8016eca:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016ece:	492f      	ldr	r1, [pc, #188]	; (8016f8c <etharp_query+0x278>)
 8016ed0:	4829      	ldr	r0, [pc, #164]	; (8016f78 <etharp_query+0x264>)
 8016ed2:	f002 fcf5 	bl	80198c0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016ed6:	69fb      	ldr	r3, [r7, #28]
 8016ed8:	7b1b      	ldrb	r3, [r3, #12]
 8016eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d002      	beq.n	8016ee8 <etharp_query+0x1d4>
        copy_needed = 1;
 8016ee2:	2301      	movs	r3, #1
 8016ee4:	61bb      	str	r3, [r7, #24]
        break;
 8016ee6:	e005      	b.n	8016ef4 <etharp_query+0x1e0>
      }
      p = p->next;
 8016ee8:	69fb      	ldr	r3, [r7, #28]
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016eee:	69fb      	ldr	r3, [r7, #28]
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d1df      	bne.n	8016eb4 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8016ef4:	69bb      	ldr	r3, [r7, #24]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d007      	beq.n	8016f0a <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016efa:	687a      	ldr	r2, [r7, #4]
 8016efc:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016f00:	200e      	movs	r0, #14
 8016f02:	f7f8 fa7b 	bl	800f3fc <pbuf_clone>
 8016f06:	61f8      	str	r0, [r7, #28]
 8016f08:	e004      	b.n	8016f14 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016f0e:	69f8      	ldr	r0, [r7, #28]
 8016f10:	f7f8 f8a2 	bl	800f058 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016f14:	69fb      	ldr	r3, [r7, #28]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d021      	beq.n	8016f5e <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016f1a:	7c7a      	ldrb	r2, [r7, #17]
 8016f1c:	4917      	ldr	r1, [pc, #92]	; (8016f7c <etharp_query+0x268>)
 8016f1e:	4613      	mov	r3, r2
 8016f20:	005b      	lsls	r3, r3, #1
 8016f22:	4413      	add	r3, r2
 8016f24:	00db      	lsls	r3, r3, #3
 8016f26:	440b      	add	r3, r1
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d00a      	beq.n	8016f44 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016f2e:	7c7a      	ldrb	r2, [r7, #17]
 8016f30:	4912      	ldr	r1, [pc, #72]	; (8016f7c <etharp_query+0x268>)
 8016f32:	4613      	mov	r3, r2
 8016f34:	005b      	lsls	r3, r3, #1
 8016f36:	4413      	add	r3, r2
 8016f38:	00db      	lsls	r3, r3, #3
 8016f3a:	440b      	add	r3, r1
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	4618      	mov	r0, r3
 8016f40:	f7f7 ffe4 	bl	800ef0c <pbuf_free>
      }
      arp_table[i].q = p;
 8016f44:	7c7a      	ldrb	r2, [r7, #17]
 8016f46:	490d      	ldr	r1, [pc, #52]	; (8016f7c <etharp_query+0x268>)
 8016f48:	4613      	mov	r3, r2
 8016f4a:	005b      	lsls	r3, r3, #1
 8016f4c:	4413      	add	r3, r2
 8016f4e:	00db      	lsls	r3, r3, #3
 8016f50:	440b      	add	r3, r1
 8016f52:	69fa      	ldr	r2, [r7, #28]
 8016f54:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016f56:	2300      	movs	r3, #0
 8016f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016f5c:	e002      	b.n	8016f64 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016f5e:	23ff      	movs	r3, #255	; 0xff
 8016f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016f64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016f68:	4618      	mov	r0, r3
 8016f6a:	3728      	adds	r7, #40	; 0x28
 8016f6c:	46bd      	mov	sp, r7
 8016f6e:	bd80      	pop	{r7, pc}
 8016f70:	08020348 	.word	0x08020348
 8016f74:	080204f4 	.word	0x080204f4
 8016f78:	080203c0 	.word	0x080203c0
 8016f7c:	20008844 	.word	0x20008844
 8016f80:	08020504 	.word	0x08020504
 8016f84:	080204e8 	.word	0x080204e8
 8016f88:	20008934 	.word	0x20008934
 8016f8c:	0802052c 	.word	0x0802052c

08016f90 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016f90:	b580      	push	{r7, lr}
 8016f92:	b08a      	sub	sp, #40	; 0x28
 8016f94:	af02      	add	r7, sp, #8
 8016f96:	60f8      	str	r0, [r7, #12]
 8016f98:	60b9      	str	r1, [r7, #8]
 8016f9a:	607a      	str	r2, [r7, #4]
 8016f9c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016fa2:	68fb      	ldr	r3, [r7, #12]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d106      	bne.n	8016fb6 <etharp_raw+0x26>
 8016fa8:	4b3a      	ldr	r3, [pc, #232]	; (8017094 <etharp_raw+0x104>)
 8016faa:	f240 4257 	movw	r2, #1111	; 0x457
 8016fae:	493a      	ldr	r1, [pc, #232]	; (8017098 <etharp_raw+0x108>)
 8016fb0:	483a      	ldr	r0, [pc, #232]	; (801709c <etharp_raw+0x10c>)
 8016fb2:	f002 fc85 	bl	80198c0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016fb6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016fba:	211c      	movs	r1, #28
 8016fbc:	200e      	movs	r0, #14
 8016fbe:	f7f7 fcc5 	bl	800e94c <pbuf_alloc>
 8016fc2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016fc4:	69bb      	ldr	r3, [r7, #24]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d102      	bne.n	8016fd0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016fca:	f04f 33ff 	mov.w	r3, #4294967295
 8016fce:	e05d      	b.n	801708c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016fd0:	69bb      	ldr	r3, [r7, #24]
 8016fd2:	895b      	ldrh	r3, [r3, #10]
 8016fd4:	2b1b      	cmp	r3, #27
 8016fd6:	d806      	bhi.n	8016fe6 <etharp_raw+0x56>
 8016fd8:	4b2e      	ldr	r3, [pc, #184]	; (8017094 <etharp_raw+0x104>)
 8016fda:	f240 4263 	movw	r2, #1123	; 0x463
 8016fde:	4930      	ldr	r1, [pc, #192]	; (80170a0 <etharp_raw+0x110>)
 8016fe0:	482e      	ldr	r0, [pc, #184]	; (801709c <etharp_raw+0x10c>)
 8016fe2:	f002 fc6d 	bl	80198c0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016fe6:	69bb      	ldr	r3, [r7, #24]
 8016fe8:	685b      	ldr	r3, [r3, #4]
 8016fea:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016fec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016fee:	4618      	mov	r0, r3
 8016ff0:	f7f6 fc5c 	bl	800d8ac <lwip_htons>
 8016ff4:	4603      	mov	r3, r0
 8016ff6:	461a      	mov	r2, r3
 8016ff8:	697b      	ldr	r3, [r7, #20]
 8016ffa:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017002:	2b06      	cmp	r3, #6
 8017004:	d006      	beq.n	8017014 <etharp_raw+0x84>
 8017006:	4b23      	ldr	r3, [pc, #140]	; (8017094 <etharp_raw+0x104>)
 8017008:	f240 426a 	movw	r2, #1130	; 0x46a
 801700c:	4925      	ldr	r1, [pc, #148]	; (80170a4 <etharp_raw+0x114>)
 801700e:	4823      	ldr	r0, [pc, #140]	; (801709c <etharp_raw+0x10c>)
 8017010:	f002 fc56 	bl	80198c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017014:	697b      	ldr	r3, [r7, #20]
 8017016:	3308      	adds	r3, #8
 8017018:	2206      	movs	r2, #6
 801701a:	6839      	ldr	r1, [r7, #0]
 801701c:	4618      	mov	r0, r3
 801701e:	f001 fe0f 	bl	8018c40 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017022:	697b      	ldr	r3, [r7, #20]
 8017024:	3312      	adds	r3, #18
 8017026:	2206      	movs	r2, #6
 8017028:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801702a:	4618      	mov	r0, r3
 801702c:	f001 fe08 	bl	8018c40 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017030:	697b      	ldr	r3, [r7, #20]
 8017032:	330e      	adds	r3, #14
 8017034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017036:	6812      	ldr	r2, [r2, #0]
 8017038:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801703a:	697b      	ldr	r3, [r7, #20]
 801703c:	3318      	adds	r3, #24
 801703e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017040:	6812      	ldr	r2, [r2, #0]
 8017042:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017044:	697b      	ldr	r3, [r7, #20]
 8017046:	2200      	movs	r2, #0
 8017048:	701a      	strb	r2, [r3, #0]
 801704a:	2200      	movs	r2, #0
 801704c:	f042 0201 	orr.w	r2, r2, #1
 8017050:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017052:	697b      	ldr	r3, [r7, #20]
 8017054:	2200      	movs	r2, #0
 8017056:	f042 0208 	orr.w	r2, r2, #8
 801705a:	709a      	strb	r2, [r3, #2]
 801705c:	2200      	movs	r2, #0
 801705e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017060:	697b      	ldr	r3, [r7, #20]
 8017062:	2206      	movs	r2, #6
 8017064:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017066:	697b      	ldr	r3, [r7, #20]
 8017068:	2204      	movs	r2, #4
 801706a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801706c:	f640 0306 	movw	r3, #2054	; 0x806
 8017070:	9300      	str	r3, [sp, #0]
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	68ba      	ldr	r2, [r7, #8]
 8017076:	69b9      	ldr	r1, [r7, #24]
 8017078:	68f8      	ldr	r0, [r7, #12]
 801707a:	f001 fb6f 	bl	801875c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801707e:	69b8      	ldr	r0, [r7, #24]
 8017080:	f7f7 ff44 	bl	800ef0c <pbuf_free>
  p = NULL;
 8017084:	2300      	movs	r3, #0
 8017086:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017088:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801708c:	4618      	mov	r0, r3
 801708e:	3720      	adds	r7, #32
 8017090:	46bd      	mov	sp, r7
 8017092:	bd80      	pop	{r7, pc}
 8017094:	08020348 	.word	0x08020348
 8017098:	08020498 	.word	0x08020498
 801709c:	080203c0 	.word	0x080203c0
 80170a0:	08020548 	.word	0x08020548
 80170a4:	0802057c 	.word	0x0802057c

080170a8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b088      	sub	sp, #32
 80170ac:	af04      	add	r7, sp, #16
 80170ae:	60f8      	str	r0, [r7, #12]
 80170b0:	60b9      	str	r1, [r7, #8]
 80170b2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	f103 0022 	add.w	r0, r3, #34	; 0x22
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80170c4:	2201      	movs	r2, #1
 80170c6:	9203      	str	r2, [sp, #12]
 80170c8:	68ba      	ldr	r2, [r7, #8]
 80170ca:	9202      	str	r2, [sp, #8]
 80170cc:	4a06      	ldr	r2, [pc, #24]	; (80170e8 <etharp_request_dst+0x40>)
 80170ce:	9201      	str	r2, [sp, #4]
 80170d0:	9300      	str	r3, [sp, #0]
 80170d2:	4603      	mov	r3, r0
 80170d4:	687a      	ldr	r2, [r7, #4]
 80170d6:	68f8      	ldr	r0, [r7, #12]
 80170d8:	f7ff ff5a 	bl	8016f90 <etharp_raw>
 80170dc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80170de:	4618      	mov	r0, r3
 80170e0:	3710      	adds	r7, #16
 80170e2:	46bd      	mov	sp, r7
 80170e4:	bd80      	pop	{r7, pc}
 80170e6:	bf00      	nop
 80170e8:	08020b44 	.word	0x08020b44

080170ec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80170ec:	b580      	push	{r7, lr}
 80170ee:	b082      	sub	sp, #8
 80170f0:	af00      	add	r7, sp, #0
 80170f2:	6078      	str	r0, [r7, #4]
 80170f4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80170f6:	4a05      	ldr	r2, [pc, #20]	; (801710c <etharp_request+0x20>)
 80170f8:	6839      	ldr	r1, [r7, #0]
 80170fa:	6878      	ldr	r0, [r7, #4]
 80170fc:	f7ff ffd4 	bl	80170a8 <etharp_request_dst>
 8017100:	4603      	mov	r3, r0
}
 8017102:	4618      	mov	r0, r3
 8017104:	3708      	adds	r7, #8
 8017106:	46bd      	mov	sp, r7
 8017108:	bd80      	pop	{r7, pc}
 801710a:	bf00      	nop
 801710c:	08020b3c 	.word	0x08020b3c

08017110 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017110:	b580      	push	{r7, lr}
 8017112:	b08e      	sub	sp, #56	; 0x38
 8017114:	af04      	add	r7, sp, #16
 8017116:	6078      	str	r0, [r7, #4]
 8017118:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801711a:	4b79      	ldr	r3, [pc, #484]	; (8017300 <icmp_input+0x1f0>)
 801711c:	689b      	ldr	r3, [r3, #8]
 801711e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017122:	781b      	ldrb	r3, [r3, #0]
 8017124:	f003 030f 	and.w	r3, r3, #15
 8017128:	b2db      	uxtb	r3, r3
 801712a:	009b      	lsls	r3, r3, #2
 801712c:	b2db      	uxtb	r3, r3
 801712e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017130:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017132:	2b13      	cmp	r3, #19
 8017134:	f240 80cd 	bls.w	80172d2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	895b      	ldrh	r3, [r3, #10]
 801713c:	2b03      	cmp	r3, #3
 801713e:	f240 80ca 	bls.w	80172d6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	685b      	ldr	r3, [r3, #4]
 8017146:	781b      	ldrb	r3, [r3, #0]
 8017148:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801714c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017150:	2b00      	cmp	r3, #0
 8017152:	f000 80b7 	beq.w	80172c4 <icmp_input+0x1b4>
 8017156:	2b08      	cmp	r3, #8
 8017158:	f040 80b7 	bne.w	80172ca <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801715c:	4b69      	ldr	r3, [pc, #420]	; (8017304 <icmp_input+0x1f4>)
 801715e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017160:	4b67      	ldr	r3, [pc, #412]	; (8017300 <icmp_input+0x1f0>)
 8017162:	695b      	ldr	r3, [r3, #20]
 8017164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017168:	2be0      	cmp	r3, #224	; 0xe0
 801716a:	f000 80bb 	beq.w	80172e4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801716e:	4b64      	ldr	r3, [pc, #400]	; (8017300 <icmp_input+0x1f0>)
 8017170:	695a      	ldr	r2, [r3, #20]
 8017172:	4b63      	ldr	r3, [pc, #396]	; (8017300 <icmp_input+0x1f0>)
 8017174:	681b      	ldr	r3, [r3, #0]
 8017176:	4619      	mov	r1, r3
 8017178:	4610      	mov	r0, r2
 801717a:	f000 fbeb 	bl	8017954 <ip4_addr_isbroadcast_u32>
 801717e:	4603      	mov	r3, r0
 8017180:	2b00      	cmp	r3, #0
 8017182:	f040 80b1 	bne.w	80172e8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	891b      	ldrh	r3, [r3, #8]
 801718a:	2b07      	cmp	r3, #7
 801718c:	f240 80a5 	bls.w	80172da <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017190:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017192:	330e      	adds	r3, #14
 8017194:	4619      	mov	r1, r3
 8017196:	6878      	ldr	r0, [r7, #4]
 8017198:	f7f7 fe22 	bl	800ede0 <pbuf_add_header>
 801719c:	4603      	mov	r3, r0
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d04b      	beq.n	801723a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	891a      	ldrh	r2, [r3, #8]
 80171a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80171a8:	4413      	add	r3, r2
 80171aa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	891b      	ldrh	r3, [r3, #8]
 80171b0:	8b7a      	ldrh	r2, [r7, #26]
 80171b2:	429a      	cmp	r2, r3
 80171b4:	f0c0 809a 	bcc.w	80172ec <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80171b8:	8b7b      	ldrh	r3, [r7, #26]
 80171ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80171be:	4619      	mov	r1, r3
 80171c0:	200e      	movs	r0, #14
 80171c2:	f7f7 fbc3 	bl	800e94c <pbuf_alloc>
 80171c6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80171c8:	697b      	ldr	r3, [r7, #20]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	f000 8090 	beq.w	80172f0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80171d0:	697b      	ldr	r3, [r7, #20]
 80171d2:	895b      	ldrh	r3, [r3, #10]
 80171d4:	461a      	mov	r2, r3
 80171d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80171d8:	3308      	adds	r3, #8
 80171da:	429a      	cmp	r2, r3
 80171dc:	d203      	bcs.n	80171e6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80171de:	6978      	ldr	r0, [r7, #20]
 80171e0:	f7f7 fe94 	bl	800ef0c <pbuf_free>
          goto icmperr;
 80171e4:	e085      	b.n	80172f2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80171e6:	697b      	ldr	r3, [r7, #20]
 80171e8:	685b      	ldr	r3, [r3, #4]
 80171ea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80171ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80171ee:	4618      	mov	r0, r3
 80171f0:	f001 fd26 	bl	8018c40 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80171f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80171f6:	4619      	mov	r1, r3
 80171f8:	6978      	ldr	r0, [r7, #20]
 80171fa:	f7f7 fe01 	bl	800ee00 <pbuf_remove_header>
 80171fe:	4603      	mov	r3, r0
 8017200:	2b00      	cmp	r3, #0
 8017202:	d009      	beq.n	8017218 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017204:	4b40      	ldr	r3, [pc, #256]	; (8017308 <icmp_input+0x1f8>)
 8017206:	22b6      	movs	r2, #182	; 0xb6
 8017208:	4940      	ldr	r1, [pc, #256]	; (801730c <icmp_input+0x1fc>)
 801720a:	4841      	ldr	r0, [pc, #260]	; (8017310 <icmp_input+0x200>)
 801720c:	f002 fb58 	bl	80198c0 <iprintf>
          pbuf_free(r);
 8017210:	6978      	ldr	r0, [r7, #20]
 8017212:	f7f7 fe7b 	bl	800ef0c <pbuf_free>
          goto icmperr;
 8017216:	e06c      	b.n	80172f2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017218:	6879      	ldr	r1, [r7, #4]
 801721a:	6978      	ldr	r0, [r7, #20]
 801721c:	f7f7 ffaa 	bl	800f174 <pbuf_copy>
 8017220:	4603      	mov	r3, r0
 8017222:	2b00      	cmp	r3, #0
 8017224:	d003      	beq.n	801722e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017226:	6978      	ldr	r0, [r7, #20]
 8017228:	f7f7 fe70 	bl	800ef0c <pbuf_free>
          goto icmperr;
 801722c:	e061      	b.n	80172f2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801722e:	6878      	ldr	r0, [r7, #4]
 8017230:	f7f7 fe6c 	bl	800ef0c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017234:	697b      	ldr	r3, [r7, #20]
 8017236:	607b      	str	r3, [r7, #4]
 8017238:	e00f      	b.n	801725a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801723a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801723c:	330e      	adds	r3, #14
 801723e:	4619      	mov	r1, r3
 8017240:	6878      	ldr	r0, [r7, #4]
 8017242:	f7f7 fddd 	bl	800ee00 <pbuf_remove_header>
 8017246:	4603      	mov	r3, r0
 8017248:	2b00      	cmp	r3, #0
 801724a:	d006      	beq.n	801725a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801724c:	4b2e      	ldr	r3, [pc, #184]	; (8017308 <icmp_input+0x1f8>)
 801724e:	22c7      	movs	r2, #199	; 0xc7
 8017250:	4930      	ldr	r1, [pc, #192]	; (8017314 <icmp_input+0x204>)
 8017252:	482f      	ldr	r0, [pc, #188]	; (8017310 <icmp_input+0x200>)
 8017254:	f002 fb34 	bl	80198c0 <iprintf>
          goto icmperr;
 8017258:	e04b      	b.n	80172f2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	685b      	ldr	r3, [r3, #4]
 801725e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017260:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017262:	4619      	mov	r1, r3
 8017264:	6878      	ldr	r0, [r7, #4]
 8017266:	f7f7 fdbb 	bl	800ede0 <pbuf_add_header>
 801726a:	4603      	mov	r3, r0
 801726c:	2b00      	cmp	r3, #0
 801726e:	d12b      	bne.n	80172c8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	685b      	ldr	r3, [r3, #4]
 8017274:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017276:	69fb      	ldr	r3, [r7, #28]
 8017278:	681a      	ldr	r2, [r3, #0]
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801727e:	4b20      	ldr	r3, [pc, #128]	; (8017300 <icmp_input+0x1f0>)
 8017280:	691a      	ldr	r2, [r3, #16]
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017286:	693b      	ldr	r3, [r7, #16]
 8017288:	2200      	movs	r2, #0
 801728a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801728c:	693b      	ldr	r3, [r7, #16]
 801728e:	2200      	movs	r2, #0
 8017290:	709a      	strb	r2, [r3, #2]
 8017292:	2200      	movs	r2, #0
 8017294:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	22ff      	movs	r2, #255	; 0xff
 801729a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	2200      	movs	r2, #0
 80172a0:	729a      	strb	r2, [r3, #10]
 80172a2:	2200      	movs	r2, #0
 80172a4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80172a6:	683b      	ldr	r3, [r7, #0]
 80172a8:	9302      	str	r3, [sp, #8]
 80172aa:	2301      	movs	r3, #1
 80172ac:	9301      	str	r3, [sp, #4]
 80172ae:	2300      	movs	r3, #0
 80172b0:	9300      	str	r3, [sp, #0]
 80172b2:	23ff      	movs	r3, #255	; 0xff
 80172b4:	2200      	movs	r2, #0
 80172b6:	69f9      	ldr	r1, [r7, #28]
 80172b8:	6878      	ldr	r0, [r7, #4]
 80172ba:	f000 fa73 	bl	80177a4 <ip4_output_if>
 80172be:	4603      	mov	r3, r0
 80172c0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80172c2:	e001      	b.n	80172c8 <icmp_input+0x1b8>
      break;
 80172c4:	bf00      	nop
 80172c6:	e000      	b.n	80172ca <icmp_input+0x1ba>
      break;
 80172c8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80172ca:	6878      	ldr	r0, [r7, #4]
 80172cc:	f7f7 fe1e 	bl	800ef0c <pbuf_free>
  return;
 80172d0:	e013      	b.n	80172fa <icmp_input+0x1ea>
    goto lenerr;
 80172d2:	bf00      	nop
 80172d4:	e002      	b.n	80172dc <icmp_input+0x1cc>
    goto lenerr;
 80172d6:	bf00      	nop
 80172d8:	e000      	b.n	80172dc <icmp_input+0x1cc>
        goto lenerr;
 80172da:	bf00      	nop
lenerr:
  pbuf_free(p);
 80172dc:	6878      	ldr	r0, [r7, #4]
 80172de:	f7f7 fe15 	bl	800ef0c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80172e2:	e00a      	b.n	80172fa <icmp_input+0x1ea>
        goto icmperr;
 80172e4:	bf00      	nop
 80172e6:	e004      	b.n	80172f2 <icmp_input+0x1e2>
        goto icmperr;
 80172e8:	bf00      	nop
 80172ea:	e002      	b.n	80172f2 <icmp_input+0x1e2>
          goto icmperr;
 80172ec:	bf00      	nop
 80172ee:	e000      	b.n	80172f2 <icmp_input+0x1e2>
          goto icmperr;
 80172f0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80172f2:	6878      	ldr	r0, [r7, #4]
 80172f4:	f7f7 fe0a 	bl	800ef0c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80172f8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80172fa:	3728      	adds	r7, #40	; 0x28
 80172fc:	46bd      	mov	sp, r7
 80172fe:	bd80      	pop	{r7, pc}
 8017300:	2000c5e0 	.word	0x2000c5e0
 8017304:	2000c5f4 	.word	0x2000c5f4
 8017308:	080205c0 	.word	0x080205c0
 801730c:	080205f8 	.word	0x080205f8
 8017310:	08020630 	.word	0x08020630
 8017314:	08020658 	.word	0x08020658

08017318 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017318:	b580      	push	{r7, lr}
 801731a:	b082      	sub	sp, #8
 801731c:	af00      	add	r7, sp, #0
 801731e:	6078      	str	r0, [r7, #4]
 8017320:	460b      	mov	r3, r1
 8017322:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017324:	78fb      	ldrb	r3, [r7, #3]
 8017326:	461a      	mov	r2, r3
 8017328:	2103      	movs	r1, #3
 801732a:	6878      	ldr	r0, [r7, #4]
 801732c:	f000 f814 	bl	8017358 <icmp_send_response>
}
 8017330:	bf00      	nop
 8017332:	3708      	adds	r7, #8
 8017334:	46bd      	mov	sp, r7
 8017336:	bd80      	pop	{r7, pc}

08017338 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017338:	b580      	push	{r7, lr}
 801733a:	b082      	sub	sp, #8
 801733c:	af00      	add	r7, sp, #0
 801733e:	6078      	str	r0, [r7, #4]
 8017340:	460b      	mov	r3, r1
 8017342:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017344:	78fb      	ldrb	r3, [r7, #3]
 8017346:	461a      	mov	r2, r3
 8017348:	210b      	movs	r1, #11
 801734a:	6878      	ldr	r0, [r7, #4]
 801734c:	f000 f804 	bl	8017358 <icmp_send_response>
}
 8017350:	bf00      	nop
 8017352:	3708      	adds	r7, #8
 8017354:	46bd      	mov	sp, r7
 8017356:	bd80      	pop	{r7, pc}

08017358 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017358:	b580      	push	{r7, lr}
 801735a:	b08c      	sub	sp, #48	; 0x30
 801735c:	af04      	add	r7, sp, #16
 801735e:	6078      	str	r0, [r7, #4]
 8017360:	460b      	mov	r3, r1
 8017362:	70fb      	strb	r3, [r7, #3]
 8017364:	4613      	mov	r3, r2
 8017366:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017368:	f44f 7220 	mov.w	r2, #640	; 0x280
 801736c:	2124      	movs	r1, #36	; 0x24
 801736e:	2022      	movs	r0, #34	; 0x22
 8017370:	f7f7 faec 	bl	800e94c <pbuf_alloc>
 8017374:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017376:	69fb      	ldr	r3, [r7, #28]
 8017378:	2b00      	cmp	r3, #0
 801737a:	d04c      	beq.n	8017416 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801737c:	69fb      	ldr	r3, [r7, #28]
 801737e:	895b      	ldrh	r3, [r3, #10]
 8017380:	2b23      	cmp	r3, #35	; 0x23
 8017382:	d806      	bhi.n	8017392 <icmp_send_response+0x3a>
 8017384:	4b26      	ldr	r3, [pc, #152]	; (8017420 <icmp_send_response+0xc8>)
 8017386:	f240 1269 	movw	r2, #361	; 0x169
 801738a:	4926      	ldr	r1, [pc, #152]	; (8017424 <icmp_send_response+0xcc>)
 801738c:	4826      	ldr	r0, [pc, #152]	; (8017428 <icmp_send_response+0xd0>)
 801738e:	f002 fa97 	bl	80198c0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	685b      	ldr	r3, [r3, #4]
 8017396:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017398:	69fb      	ldr	r3, [r7, #28]
 801739a:	685b      	ldr	r3, [r3, #4]
 801739c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801739e:	697b      	ldr	r3, [r7, #20]
 80173a0:	78fa      	ldrb	r2, [r7, #3]
 80173a2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80173a4:	697b      	ldr	r3, [r7, #20]
 80173a6:	78ba      	ldrb	r2, [r7, #2]
 80173a8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80173aa:	697b      	ldr	r3, [r7, #20]
 80173ac:	2200      	movs	r2, #0
 80173ae:	711a      	strb	r2, [r3, #4]
 80173b0:	2200      	movs	r2, #0
 80173b2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80173b4:	697b      	ldr	r3, [r7, #20]
 80173b6:	2200      	movs	r2, #0
 80173b8:	719a      	strb	r2, [r3, #6]
 80173ba:	2200      	movs	r2, #0
 80173bc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80173be:	69fb      	ldr	r3, [r7, #28]
 80173c0:	685b      	ldr	r3, [r3, #4]
 80173c2:	f103 0008 	add.w	r0, r3, #8
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	685b      	ldr	r3, [r3, #4]
 80173ca:	221c      	movs	r2, #28
 80173cc:	4619      	mov	r1, r3
 80173ce:	f001 fc37 	bl	8018c40 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80173d2:	69bb      	ldr	r3, [r7, #24]
 80173d4:	68db      	ldr	r3, [r3, #12]
 80173d6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80173d8:	f107 030c 	add.w	r3, r7, #12
 80173dc:	4618      	mov	r0, r3
 80173de:	f000 f825 	bl	801742c <ip4_route>
 80173e2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80173e4:	693b      	ldr	r3, [r7, #16]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d011      	beq.n	801740e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80173ea:	697b      	ldr	r3, [r7, #20]
 80173ec:	2200      	movs	r2, #0
 80173ee:	709a      	strb	r2, [r3, #2]
 80173f0:	2200      	movs	r2, #0
 80173f2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80173f4:	f107 020c 	add.w	r2, r7, #12
 80173f8:	693b      	ldr	r3, [r7, #16]
 80173fa:	9302      	str	r3, [sp, #8]
 80173fc:	2301      	movs	r3, #1
 80173fe:	9301      	str	r3, [sp, #4]
 8017400:	2300      	movs	r3, #0
 8017402:	9300      	str	r3, [sp, #0]
 8017404:	23ff      	movs	r3, #255	; 0xff
 8017406:	2100      	movs	r1, #0
 8017408:	69f8      	ldr	r0, [r7, #28]
 801740a:	f000 f9cb 	bl	80177a4 <ip4_output_if>
  }
  pbuf_free(q);
 801740e:	69f8      	ldr	r0, [r7, #28]
 8017410:	f7f7 fd7c 	bl	800ef0c <pbuf_free>
 8017414:	e000      	b.n	8017418 <icmp_send_response+0xc0>
    return;
 8017416:	bf00      	nop
}
 8017418:	3720      	adds	r7, #32
 801741a:	46bd      	mov	sp, r7
 801741c:	bd80      	pop	{r7, pc}
 801741e:	bf00      	nop
 8017420:	080205c0 	.word	0x080205c0
 8017424:	0802068c 	.word	0x0802068c
 8017428:	08020630 	.word	0x08020630

0801742c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801742c:	b480      	push	{r7}
 801742e:	b085      	sub	sp, #20
 8017430:	af00      	add	r7, sp, #0
 8017432:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017434:	4b33      	ldr	r3, [pc, #204]	; (8017504 <ip4_route+0xd8>)
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	60fb      	str	r3, [r7, #12]
 801743a:	e036      	b.n	80174aa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8017442:	f003 0301 	and.w	r3, r3, #1
 8017446:	b2db      	uxtb	r3, r3
 8017448:	2b00      	cmp	r3, #0
 801744a:	d02b      	beq.n	80174a4 <ip4_route+0x78>
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8017452:	089b      	lsrs	r3, r3, #2
 8017454:	f003 0301 	and.w	r3, r3, #1
 8017458:	b2db      	uxtb	r3, r3
 801745a:	2b00      	cmp	r3, #0
 801745c:	d022      	beq.n	80174a4 <ip4_route+0x78>
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	3304      	adds	r3, #4
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	2b00      	cmp	r3, #0
 8017466:	d01d      	beq.n	80174a4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	681a      	ldr	r2, [r3, #0]
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	3304      	adds	r3, #4
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	405a      	eors	r2, r3
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	3308      	adds	r3, #8
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	4013      	ands	r3, r2
 801747c:	2b00      	cmp	r3, #0
 801747e:	d101      	bne.n	8017484 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	e038      	b.n	80174f6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017484:	68fb      	ldr	r3, [r7, #12]
 8017486:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801748a:	f003 0302 	and.w	r3, r3, #2
 801748e:	2b00      	cmp	r3, #0
 8017490:	d108      	bne.n	80174a4 <ip4_route+0x78>
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	681a      	ldr	r2, [r3, #0]
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	330c      	adds	r3, #12
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	429a      	cmp	r2, r3
 801749e:	d101      	bne.n	80174a4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	e028      	b.n	80174f6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	60fb      	str	r3, [r7, #12]
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d1c5      	bne.n	801743c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80174b0:	4b15      	ldr	r3, [pc, #84]	; (8017508 <ip4_route+0xdc>)
 80174b2:	681b      	ldr	r3, [r3, #0]
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d01a      	beq.n	80174ee <ip4_route+0xc2>
 80174b8:	4b13      	ldr	r3, [pc, #76]	; (8017508 <ip4_route+0xdc>)
 80174ba:	681b      	ldr	r3, [r3, #0]
 80174bc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80174c0:	f003 0301 	and.w	r3, r3, #1
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d012      	beq.n	80174ee <ip4_route+0xc2>
 80174c8:	4b0f      	ldr	r3, [pc, #60]	; (8017508 <ip4_route+0xdc>)
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80174d0:	f003 0304 	and.w	r3, r3, #4
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d00a      	beq.n	80174ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80174d8:	4b0b      	ldr	r3, [pc, #44]	; (8017508 <ip4_route+0xdc>)
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	3304      	adds	r3, #4
 80174de:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d004      	beq.n	80174ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	b2db      	uxtb	r3, r3
 80174ea:	2b7f      	cmp	r3, #127	; 0x7f
 80174ec:	d101      	bne.n	80174f2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80174ee:	2300      	movs	r3, #0
 80174f0:	e001      	b.n	80174f6 <ip4_route+0xca>
  }

  return netif_default;
 80174f2:	4b05      	ldr	r3, [pc, #20]	; (8017508 <ip4_route+0xdc>)
 80174f4:	681b      	ldr	r3, [r3, #0]
}
 80174f6:	4618      	mov	r0, r3
 80174f8:	3714      	adds	r7, #20
 80174fa:	46bd      	mov	sp, r7
 80174fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017500:	4770      	bx	lr
 8017502:	bf00      	nop
 8017504:	2000fce4 	.word	0x2000fce4
 8017508:	2000fce8 	.word	0x2000fce8

0801750c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801750c:	b580      	push	{r7, lr}
 801750e:	b082      	sub	sp, #8
 8017510:	af00      	add	r7, sp, #0
 8017512:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801751a:	f003 0301 	and.w	r3, r3, #1
 801751e:	b2db      	uxtb	r3, r3
 8017520:	2b00      	cmp	r3, #0
 8017522:	d016      	beq.n	8017552 <ip4_input_accept+0x46>
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	3304      	adds	r3, #4
 8017528:	681b      	ldr	r3, [r3, #0]
 801752a:	2b00      	cmp	r3, #0
 801752c:	d011      	beq.n	8017552 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801752e:	4b0b      	ldr	r3, [pc, #44]	; (801755c <ip4_input_accept+0x50>)
 8017530:	695a      	ldr	r2, [r3, #20]
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	3304      	adds	r3, #4
 8017536:	681b      	ldr	r3, [r3, #0]
 8017538:	429a      	cmp	r2, r3
 801753a:	d008      	beq.n	801754e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801753c:	4b07      	ldr	r3, [pc, #28]	; (801755c <ip4_input_accept+0x50>)
 801753e:	695b      	ldr	r3, [r3, #20]
 8017540:	6879      	ldr	r1, [r7, #4]
 8017542:	4618      	mov	r0, r3
 8017544:	f000 fa06 	bl	8017954 <ip4_addr_isbroadcast_u32>
 8017548:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801754a:	2b00      	cmp	r3, #0
 801754c:	d001      	beq.n	8017552 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801754e:	2301      	movs	r3, #1
 8017550:	e000      	b.n	8017554 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017552:	2300      	movs	r3, #0
}
 8017554:	4618      	mov	r0, r3
 8017556:	3708      	adds	r7, #8
 8017558:	46bd      	mov	sp, r7
 801755a:	bd80      	pop	{r7, pc}
 801755c:	2000c5e0 	.word	0x2000c5e0

08017560 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017560:	b580      	push	{r7, lr}
 8017562:	b086      	sub	sp, #24
 8017564:	af00      	add	r7, sp, #0
 8017566:	6078      	str	r0, [r7, #4]
 8017568:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	685b      	ldr	r3, [r3, #4]
 801756e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017570:	697b      	ldr	r3, [r7, #20]
 8017572:	781b      	ldrb	r3, [r3, #0]
 8017574:	091b      	lsrs	r3, r3, #4
 8017576:	b2db      	uxtb	r3, r3
 8017578:	2b04      	cmp	r3, #4
 801757a:	d004      	beq.n	8017586 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801757c:	6878      	ldr	r0, [r7, #4]
 801757e:	f7f7 fcc5 	bl	800ef0c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017582:	2300      	movs	r3, #0
 8017584:	e105      	b.n	8017792 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017586:	697b      	ldr	r3, [r7, #20]
 8017588:	781b      	ldrb	r3, [r3, #0]
 801758a:	f003 030f 	and.w	r3, r3, #15
 801758e:	b2db      	uxtb	r3, r3
 8017590:	009b      	lsls	r3, r3, #2
 8017592:	b2db      	uxtb	r3, r3
 8017594:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017596:	697b      	ldr	r3, [r7, #20]
 8017598:	885b      	ldrh	r3, [r3, #2]
 801759a:	b29b      	uxth	r3, r3
 801759c:	4618      	mov	r0, r3
 801759e:	f7f6 f985 	bl	800d8ac <lwip_htons>
 80175a2:	4603      	mov	r3, r0
 80175a4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	891b      	ldrh	r3, [r3, #8]
 80175aa:	89ba      	ldrh	r2, [r7, #12]
 80175ac:	429a      	cmp	r2, r3
 80175ae:	d204      	bcs.n	80175ba <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80175b0:	89bb      	ldrh	r3, [r7, #12]
 80175b2:	4619      	mov	r1, r3
 80175b4:	6878      	ldr	r0, [r7, #4]
 80175b6:	f7f7 fb23 	bl	800ec00 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	895b      	ldrh	r3, [r3, #10]
 80175be:	89fa      	ldrh	r2, [r7, #14]
 80175c0:	429a      	cmp	r2, r3
 80175c2:	d807      	bhi.n	80175d4 <ip4_input+0x74>
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	891b      	ldrh	r3, [r3, #8]
 80175c8:	89ba      	ldrh	r2, [r7, #12]
 80175ca:	429a      	cmp	r2, r3
 80175cc:	d802      	bhi.n	80175d4 <ip4_input+0x74>
 80175ce:	89fb      	ldrh	r3, [r7, #14]
 80175d0:	2b13      	cmp	r3, #19
 80175d2:	d804      	bhi.n	80175de <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80175d4:	6878      	ldr	r0, [r7, #4]
 80175d6:	f7f7 fc99 	bl	800ef0c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80175da:	2300      	movs	r3, #0
 80175dc:	e0d9      	b.n	8017792 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80175de:	697b      	ldr	r3, [r7, #20]
 80175e0:	691b      	ldr	r3, [r3, #16]
 80175e2:	4a6e      	ldr	r2, [pc, #440]	; (801779c <ip4_input+0x23c>)
 80175e4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80175e6:	697b      	ldr	r3, [r7, #20]
 80175e8:	68db      	ldr	r3, [r3, #12]
 80175ea:	4a6c      	ldr	r2, [pc, #432]	; (801779c <ip4_input+0x23c>)
 80175ec:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80175ee:	4b6b      	ldr	r3, [pc, #428]	; (801779c <ip4_input+0x23c>)
 80175f0:	695b      	ldr	r3, [r3, #20]
 80175f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80175f6:	2be0      	cmp	r3, #224	; 0xe0
 80175f8:	d112      	bne.n	8017620 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80175fa:	683b      	ldr	r3, [r7, #0]
 80175fc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8017600:	f003 0301 	and.w	r3, r3, #1
 8017604:	b2db      	uxtb	r3, r3
 8017606:	2b00      	cmp	r3, #0
 8017608:	d007      	beq.n	801761a <ip4_input+0xba>
 801760a:	683b      	ldr	r3, [r7, #0]
 801760c:	3304      	adds	r3, #4
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	2b00      	cmp	r3, #0
 8017612:	d002      	beq.n	801761a <ip4_input+0xba>
      netif = inp;
 8017614:	683b      	ldr	r3, [r7, #0]
 8017616:	613b      	str	r3, [r7, #16]
 8017618:	e02a      	b.n	8017670 <ip4_input+0x110>
    } else {
      netif = NULL;
 801761a:	2300      	movs	r3, #0
 801761c:	613b      	str	r3, [r7, #16]
 801761e:	e027      	b.n	8017670 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017620:	6838      	ldr	r0, [r7, #0]
 8017622:	f7ff ff73 	bl	801750c <ip4_input_accept>
 8017626:	4603      	mov	r3, r0
 8017628:	2b00      	cmp	r3, #0
 801762a:	d002      	beq.n	8017632 <ip4_input+0xd2>
      netif = inp;
 801762c:	683b      	ldr	r3, [r7, #0]
 801762e:	613b      	str	r3, [r7, #16]
 8017630:	e01e      	b.n	8017670 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017632:	2300      	movs	r3, #0
 8017634:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017636:	4b59      	ldr	r3, [pc, #356]	; (801779c <ip4_input+0x23c>)
 8017638:	695b      	ldr	r3, [r3, #20]
 801763a:	b2db      	uxtb	r3, r3
 801763c:	2b7f      	cmp	r3, #127	; 0x7f
 801763e:	d017      	beq.n	8017670 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017640:	4b57      	ldr	r3, [pc, #348]	; (80177a0 <ip4_input+0x240>)
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	613b      	str	r3, [r7, #16]
 8017646:	e00e      	b.n	8017666 <ip4_input+0x106>
          if (netif == inp) {
 8017648:	693a      	ldr	r2, [r7, #16]
 801764a:	683b      	ldr	r3, [r7, #0]
 801764c:	429a      	cmp	r2, r3
 801764e:	d006      	beq.n	801765e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017650:	6938      	ldr	r0, [r7, #16]
 8017652:	f7ff ff5b 	bl	801750c <ip4_input_accept>
 8017656:	4603      	mov	r3, r0
 8017658:	2b00      	cmp	r3, #0
 801765a:	d108      	bne.n	801766e <ip4_input+0x10e>
 801765c:	e000      	b.n	8017660 <ip4_input+0x100>
            continue;
 801765e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017660:	693b      	ldr	r3, [r7, #16]
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	613b      	str	r3, [r7, #16]
 8017666:	693b      	ldr	r3, [r7, #16]
 8017668:	2b00      	cmp	r3, #0
 801766a:	d1ed      	bne.n	8017648 <ip4_input+0xe8>
 801766c:	e000      	b.n	8017670 <ip4_input+0x110>
            break;
 801766e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017670:	4b4a      	ldr	r3, [pc, #296]	; (801779c <ip4_input+0x23c>)
 8017672:	691b      	ldr	r3, [r3, #16]
 8017674:	6839      	ldr	r1, [r7, #0]
 8017676:	4618      	mov	r0, r3
 8017678:	f000 f96c 	bl	8017954 <ip4_addr_isbroadcast_u32>
 801767c:	4603      	mov	r3, r0
 801767e:	2b00      	cmp	r3, #0
 8017680:	d105      	bne.n	801768e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017682:	4b46      	ldr	r3, [pc, #280]	; (801779c <ip4_input+0x23c>)
 8017684:	691b      	ldr	r3, [r3, #16]
 8017686:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801768a:	2be0      	cmp	r3, #224	; 0xe0
 801768c:	d104      	bne.n	8017698 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801768e:	6878      	ldr	r0, [r7, #4]
 8017690:	f7f7 fc3c 	bl	800ef0c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017694:	2300      	movs	r3, #0
 8017696:	e07c      	b.n	8017792 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017698:	693b      	ldr	r3, [r7, #16]
 801769a:	2b00      	cmp	r3, #0
 801769c:	d104      	bne.n	80176a8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801769e:	6878      	ldr	r0, [r7, #4]
 80176a0:	f7f7 fc34 	bl	800ef0c <pbuf_free>
    return ERR_OK;
 80176a4:	2300      	movs	r3, #0
 80176a6:	e074      	b.n	8017792 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80176a8:	697b      	ldr	r3, [r7, #20]
 80176aa:	88db      	ldrh	r3, [r3, #6]
 80176ac:	b29b      	uxth	r3, r3
 80176ae:	461a      	mov	r2, r3
 80176b0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80176b4:	4013      	ands	r3, r2
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d00b      	beq.n	80176d2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80176ba:	6878      	ldr	r0, [r7, #4]
 80176bc:	f000 fc90 	bl	8017fe0 <ip4_reass>
 80176c0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d101      	bne.n	80176cc <ip4_input+0x16c>
      return ERR_OK;
 80176c8:	2300      	movs	r3, #0
 80176ca:	e062      	b.n	8017792 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	685b      	ldr	r3, [r3, #4]
 80176d0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80176d2:	4a32      	ldr	r2, [pc, #200]	; (801779c <ip4_input+0x23c>)
 80176d4:	693b      	ldr	r3, [r7, #16]
 80176d6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80176d8:	4a30      	ldr	r2, [pc, #192]	; (801779c <ip4_input+0x23c>)
 80176da:	683b      	ldr	r3, [r7, #0]
 80176dc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80176de:	4a2f      	ldr	r2, [pc, #188]	; (801779c <ip4_input+0x23c>)
 80176e0:	697b      	ldr	r3, [r7, #20]
 80176e2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80176e4:	697b      	ldr	r3, [r7, #20]
 80176e6:	781b      	ldrb	r3, [r3, #0]
 80176e8:	f003 030f 	and.w	r3, r3, #15
 80176ec:	b2db      	uxtb	r3, r3
 80176ee:	009b      	lsls	r3, r3, #2
 80176f0:	b2db      	uxtb	r3, r3
 80176f2:	b29a      	uxth	r2, r3
 80176f4:	4b29      	ldr	r3, [pc, #164]	; (801779c <ip4_input+0x23c>)
 80176f6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80176f8:	89fb      	ldrh	r3, [r7, #14]
 80176fa:	4619      	mov	r1, r3
 80176fc:	6878      	ldr	r0, [r7, #4]
 80176fe:	f7f7 fb7f 	bl	800ee00 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017702:	697b      	ldr	r3, [r7, #20]
 8017704:	7a5b      	ldrb	r3, [r3, #9]
 8017706:	2b06      	cmp	r3, #6
 8017708:	d009      	beq.n	801771e <ip4_input+0x1be>
 801770a:	2b11      	cmp	r3, #17
 801770c:	d002      	beq.n	8017714 <ip4_input+0x1b4>
 801770e:	2b01      	cmp	r3, #1
 8017710:	d00a      	beq.n	8017728 <ip4_input+0x1c8>
 8017712:	e00e      	b.n	8017732 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017714:	6839      	ldr	r1, [r7, #0]
 8017716:	6878      	ldr	r0, [r7, #4]
 8017718:	f7fe f904 	bl	8015924 <udp_input>
        break;
 801771c:	e026      	b.n	801776c <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801771e:	6839      	ldr	r1, [r7, #0]
 8017720:	6878      	ldr	r0, [r7, #4]
 8017722:	f7f9 fcb1 	bl	8011088 <tcp_input>
        break;
 8017726:	e021      	b.n	801776c <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017728:	6839      	ldr	r1, [r7, #0]
 801772a:	6878      	ldr	r0, [r7, #4]
 801772c:	f7ff fcf0 	bl	8017110 <icmp_input>
        break;
 8017730:	e01c      	b.n	801776c <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017732:	4b1a      	ldr	r3, [pc, #104]	; (801779c <ip4_input+0x23c>)
 8017734:	695b      	ldr	r3, [r3, #20]
 8017736:	6939      	ldr	r1, [r7, #16]
 8017738:	4618      	mov	r0, r3
 801773a:	f000 f90b 	bl	8017954 <ip4_addr_isbroadcast_u32>
 801773e:	4603      	mov	r3, r0
 8017740:	2b00      	cmp	r3, #0
 8017742:	d10f      	bne.n	8017764 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017744:	4b15      	ldr	r3, [pc, #84]	; (801779c <ip4_input+0x23c>)
 8017746:	695b      	ldr	r3, [r3, #20]
 8017748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801774c:	2be0      	cmp	r3, #224	; 0xe0
 801774e:	d009      	beq.n	8017764 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017750:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017754:	4619      	mov	r1, r3
 8017756:	6878      	ldr	r0, [r7, #4]
 8017758:	f7f7 fbc5 	bl	800eee6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801775c:	2102      	movs	r1, #2
 801775e:	6878      	ldr	r0, [r7, #4]
 8017760:	f7ff fdda 	bl	8017318 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017764:	6878      	ldr	r0, [r7, #4]
 8017766:	f7f7 fbd1 	bl	800ef0c <pbuf_free>
        break;
 801776a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801776c:	4b0b      	ldr	r3, [pc, #44]	; (801779c <ip4_input+0x23c>)
 801776e:	2200      	movs	r2, #0
 8017770:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017772:	4b0a      	ldr	r3, [pc, #40]	; (801779c <ip4_input+0x23c>)
 8017774:	2200      	movs	r2, #0
 8017776:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017778:	4b08      	ldr	r3, [pc, #32]	; (801779c <ip4_input+0x23c>)
 801777a:	2200      	movs	r2, #0
 801777c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801777e:	4b07      	ldr	r3, [pc, #28]	; (801779c <ip4_input+0x23c>)
 8017780:	2200      	movs	r2, #0
 8017782:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017784:	4b05      	ldr	r3, [pc, #20]	; (801779c <ip4_input+0x23c>)
 8017786:	2200      	movs	r2, #0
 8017788:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801778a:	4b04      	ldr	r3, [pc, #16]	; (801779c <ip4_input+0x23c>)
 801778c:	2200      	movs	r2, #0
 801778e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017790:	2300      	movs	r3, #0
}
 8017792:	4618      	mov	r0, r3
 8017794:	3718      	adds	r7, #24
 8017796:	46bd      	mov	sp, r7
 8017798:	bd80      	pop	{r7, pc}
 801779a:	bf00      	nop
 801779c:	2000c5e0 	.word	0x2000c5e0
 80177a0:	2000fce4 	.word	0x2000fce4

080177a4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80177a4:	b580      	push	{r7, lr}
 80177a6:	b08a      	sub	sp, #40	; 0x28
 80177a8:	af04      	add	r7, sp, #16
 80177aa:	60f8      	str	r0, [r7, #12]
 80177ac:	60b9      	str	r1, [r7, #8]
 80177ae:	607a      	str	r2, [r7, #4]
 80177b0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80177b2:	68bb      	ldr	r3, [r7, #8]
 80177b4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d009      	beq.n	80177d0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80177bc:	68bb      	ldr	r3, [r7, #8]
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d003      	beq.n	80177ca <ip4_output_if+0x26>
 80177c2:	68bb      	ldr	r3, [r7, #8]
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d102      	bne.n	80177d0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80177ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177cc:	3304      	adds	r3, #4
 80177ce:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80177d0:	78fa      	ldrb	r2, [r7, #3]
 80177d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177d4:	9302      	str	r3, [sp, #8]
 80177d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80177da:	9301      	str	r3, [sp, #4]
 80177dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80177e0:	9300      	str	r3, [sp, #0]
 80177e2:	4613      	mov	r3, r2
 80177e4:	687a      	ldr	r2, [r7, #4]
 80177e6:	6979      	ldr	r1, [r7, #20]
 80177e8:	68f8      	ldr	r0, [r7, #12]
 80177ea:	f000 f805 	bl	80177f8 <ip4_output_if_src>
 80177ee:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80177f0:	4618      	mov	r0, r3
 80177f2:	3718      	adds	r7, #24
 80177f4:	46bd      	mov	sp, r7
 80177f6:	bd80      	pop	{r7, pc}

080177f8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b088      	sub	sp, #32
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	60f8      	str	r0, [r7, #12]
 8017800:	60b9      	str	r1, [r7, #8]
 8017802:	607a      	str	r2, [r7, #4]
 8017804:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	7b9b      	ldrb	r3, [r3, #14]
 801780a:	2b01      	cmp	r3, #1
 801780c:	d006      	beq.n	801781c <ip4_output_if_src+0x24>
 801780e:	4b4b      	ldr	r3, [pc, #300]	; (801793c <ip4_output_if_src+0x144>)
 8017810:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017814:	494a      	ldr	r1, [pc, #296]	; (8017940 <ip4_output_if_src+0x148>)
 8017816:	484b      	ldr	r0, [pc, #300]	; (8017944 <ip4_output_if_src+0x14c>)
 8017818:	f002 f852 	bl	80198c0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	2b00      	cmp	r3, #0
 8017820:	d060      	beq.n	80178e4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017822:	2314      	movs	r3, #20
 8017824:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017826:	2114      	movs	r1, #20
 8017828:	68f8      	ldr	r0, [r7, #12]
 801782a:	f7f7 fad9 	bl	800ede0 <pbuf_add_header>
 801782e:	4603      	mov	r3, r0
 8017830:	2b00      	cmp	r3, #0
 8017832:	d002      	beq.n	801783a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017834:	f06f 0301 	mvn.w	r3, #1
 8017838:	e07c      	b.n	8017934 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	685b      	ldr	r3, [r3, #4]
 801783e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	895b      	ldrh	r3, [r3, #10]
 8017844:	2b13      	cmp	r3, #19
 8017846:	d806      	bhi.n	8017856 <ip4_output_if_src+0x5e>
 8017848:	4b3c      	ldr	r3, [pc, #240]	; (801793c <ip4_output_if_src+0x144>)
 801784a:	f240 3289 	movw	r2, #905	; 0x389
 801784e:	493e      	ldr	r1, [pc, #248]	; (8017948 <ip4_output_if_src+0x150>)
 8017850:	483c      	ldr	r0, [pc, #240]	; (8017944 <ip4_output_if_src+0x14c>)
 8017852:	f002 f835 	bl	80198c0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017856:	69fb      	ldr	r3, [r7, #28]
 8017858:	78fa      	ldrb	r2, [r7, #3]
 801785a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801785c:	69fb      	ldr	r3, [r7, #28]
 801785e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017862:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	681a      	ldr	r2, [r3, #0]
 8017868:	69fb      	ldr	r3, [r7, #28]
 801786a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801786c:	8b7b      	ldrh	r3, [r7, #26]
 801786e:	089b      	lsrs	r3, r3, #2
 8017870:	b29b      	uxth	r3, r3
 8017872:	b2db      	uxtb	r3, r3
 8017874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017878:	b2da      	uxtb	r2, r3
 801787a:	69fb      	ldr	r3, [r7, #28]
 801787c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801787e:	69fb      	ldr	r3, [r7, #28]
 8017880:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017884:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	891b      	ldrh	r3, [r3, #8]
 801788a:	4618      	mov	r0, r3
 801788c:	f7f6 f80e 	bl	800d8ac <lwip_htons>
 8017890:	4603      	mov	r3, r0
 8017892:	461a      	mov	r2, r3
 8017894:	69fb      	ldr	r3, [r7, #28]
 8017896:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017898:	69fb      	ldr	r3, [r7, #28]
 801789a:	2200      	movs	r2, #0
 801789c:	719a      	strb	r2, [r3, #6]
 801789e:	2200      	movs	r2, #0
 80178a0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80178a2:	4b2a      	ldr	r3, [pc, #168]	; (801794c <ip4_output_if_src+0x154>)
 80178a4:	881b      	ldrh	r3, [r3, #0]
 80178a6:	4618      	mov	r0, r3
 80178a8:	f7f6 f800 	bl	800d8ac <lwip_htons>
 80178ac:	4603      	mov	r3, r0
 80178ae:	461a      	mov	r2, r3
 80178b0:	69fb      	ldr	r3, [r7, #28]
 80178b2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80178b4:	4b25      	ldr	r3, [pc, #148]	; (801794c <ip4_output_if_src+0x154>)
 80178b6:	881b      	ldrh	r3, [r3, #0]
 80178b8:	3301      	adds	r3, #1
 80178ba:	b29a      	uxth	r2, r3
 80178bc:	4b23      	ldr	r3, [pc, #140]	; (801794c <ip4_output_if_src+0x154>)
 80178be:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80178c0:	68bb      	ldr	r3, [r7, #8]
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d104      	bne.n	80178d0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80178c6:	4b22      	ldr	r3, [pc, #136]	; (8017950 <ip4_output_if_src+0x158>)
 80178c8:	681a      	ldr	r2, [r3, #0]
 80178ca:	69fb      	ldr	r3, [r7, #28]
 80178cc:	60da      	str	r2, [r3, #12]
 80178ce:	e003      	b.n	80178d8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80178d0:	68bb      	ldr	r3, [r7, #8]
 80178d2:	681a      	ldr	r2, [r3, #0]
 80178d4:	69fb      	ldr	r3, [r7, #28]
 80178d6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80178d8:	69fb      	ldr	r3, [r7, #28]
 80178da:	2200      	movs	r2, #0
 80178dc:	729a      	strb	r2, [r3, #10]
 80178de:	2200      	movs	r2, #0
 80178e0:	72da      	strb	r2, [r3, #11]
 80178e2:	e00f      	b.n	8017904 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	895b      	ldrh	r3, [r3, #10]
 80178e8:	2b13      	cmp	r3, #19
 80178ea:	d802      	bhi.n	80178f2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80178ec:	f06f 0301 	mvn.w	r3, #1
 80178f0:	e020      	b.n	8017934 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80178f2:	68fb      	ldr	r3, [r7, #12]
 80178f4:	685b      	ldr	r3, [r3, #4]
 80178f6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80178f8:	69fb      	ldr	r3, [r7, #28]
 80178fa:	691b      	ldr	r3, [r3, #16]
 80178fc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80178fe:	f107 0314 	add.w	r3, r7, #20
 8017902:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017906:	8c1b      	ldrh	r3, [r3, #32]
 8017908:	2b00      	cmp	r3, #0
 801790a:	d00c      	beq.n	8017926 <ip4_output_if_src+0x12e>
 801790c:	68fb      	ldr	r3, [r7, #12]
 801790e:	891a      	ldrh	r2, [r3, #8]
 8017910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017912:	8c1b      	ldrh	r3, [r3, #32]
 8017914:	429a      	cmp	r2, r3
 8017916:	d906      	bls.n	8017926 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017918:	687a      	ldr	r2, [r7, #4]
 801791a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801791c:	68f8      	ldr	r0, [r7, #12]
 801791e:	f000 fd4b 	bl	80183b8 <ip4_frag>
 8017922:	4603      	mov	r3, r0
 8017924:	e006      	b.n	8017934 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017928:	695b      	ldr	r3, [r3, #20]
 801792a:	687a      	ldr	r2, [r7, #4]
 801792c:	68f9      	ldr	r1, [r7, #12]
 801792e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017930:	4798      	blx	r3
 8017932:	4603      	mov	r3, r0
}
 8017934:	4618      	mov	r0, r3
 8017936:	3720      	adds	r7, #32
 8017938:	46bd      	mov	sp, r7
 801793a:	bd80      	pop	{r7, pc}
 801793c:	080206b8 	.word	0x080206b8
 8017940:	080206ec 	.word	0x080206ec
 8017944:	080206f8 	.word	0x080206f8
 8017948:	08020720 	.word	0x08020720
 801794c:	20008936 	.word	0x20008936
 8017950:	08020b38 	.word	0x08020b38

08017954 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017954:	b480      	push	{r7}
 8017956:	b085      	sub	sp, #20
 8017958:	af00      	add	r7, sp, #0
 801795a:	6078      	str	r0, [r7, #4]
 801795c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017968:	d002      	beq.n	8017970 <ip4_addr_isbroadcast_u32+0x1c>
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	2b00      	cmp	r3, #0
 801796e:	d101      	bne.n	8017974 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017970:	2301      	movs	r3, #1
 8017972:	e02a      	b.n	80179ca <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017974:	683b      	ldr	r3, [r7, #0]
 8017976:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801797a:	f003 0302 	and.w	r3, r3, #2
 801797e:	2b00      	cmp	r3, #0
 8017980:	d101      	bne.n	8017986 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017982:	2300      	movs	r3, #0
 8017984:	e021      	b.n	80179ca <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017986:	683b      	ldr	r3, [r7, #0]
 8017988:	3304      	adds	r3, #4
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	687a      	ldr	r2, [r7, #4]
 801798e:	429a      	cmp	r2, r3
 8017990:	d101      	bne.n	8017996 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017992:	2300      	movs	r3, #0
 8017994:	e019      	b.n	80179ca <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017996:	68fa      	ldr	r2, [r7, #12]
 8017998:	683b      	ldr	r3, [r7, #0]
 801799a:	3304      	adds	r3, #4
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	405a      	eors	r2, r3
 80179a0:	683b      	ldr	r3, [r7, #0]
 80179a2:	3308      	adds	r3, #8
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	4013      	ands	r3, r2
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d10d      	bne.n	80179c8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80179ac:	683b      	ldr	r3, [r7, #0]
 80179ae:	3308      	adds	r3, #8
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	43da      	mvns	r2, r3
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80179b8:	683b      	ldr	r3, [r7, #0]
 80179ba:	3308      	adds	r3, #8
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80179c0:	429a      	cmp	r2, r3
 80179c2:	d101      	bne.n	80179c8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80179c4:	2301      	movs	r3, #1
 80179c6:	e000      	b.n	80179ca <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80179c8:	2300      	movs	r3, #0
  }
}
 80179ca:	4618      	mov	r0, r3
 80179cc:	3714      	adds	r7, #20
 80179ce:	46bd      	mov	sp, r7
 80179d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179d4:	4770      	bx	lr
	...

080179d8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80179d8:	b580      	push	{r7, lr}
 80179da:	b084      	sub	sp, #16
 80179dc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80179de:	2300      	movs	r3, #0
 80179e0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80179e2:	4b12      	ldr	r3, [pc, #72]	; (8017a2c <ip_reass_tmr+0x54>)
 80179e4:	681b      	ldr	r3, [r3, #0]
 80179e6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80179e8:	e018      	b.n	8017a1c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80179ea:	68fb      	ldr	r3, [r7, #12]
 80179ec:	7fdb      	ldrb	r3, [r3, #31]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d00b      	beq.n	8017a0a <ip_reass_tmr+0x32>
      r->timer--;
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	7fdb      	ldrb	r3, [r3, #31]
 80179f6:	3b01      	subs	r3, #1
 80179f8:	b2da      	uxtb	r2, r3
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80179fe:	68fb      	ldr	r3, [r7, #12]
 8017a00:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	60fb      	str	r3, [r7, #12]
 8017a08:	e008      	b.n	8017a1c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017a14:	68b9      	ldr	r1, [r7, #8]
 8017a16:	6878      	ldr	r0, [r7, #4]
 8017a18:	f000 f80a 	bl	8017a30 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017a1c:	68fb      	ldr	r3, [r7, #12]
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d1e3      	bne.n	80179ea <ip_reass_tmr+0x12>
    }
  }
}
 8017a22:	bf00      	nop
 8017a24:	3710      	adds	r7, #16
 8017a26:	46bd      	mov	sp, r7
 8017a28:	bd80      	pop	{r7, pc}
 8017a2a:	bf00      	nop
 8017a2c:	20008938 	.word	0x20008938

08017a30 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017a30:	b580      	push	{r7, lr}
 8017a32:	b088      	sub	sp, #32
 8017a34:	af00      	add	r7, sp, #0
 8017a36:	6078      	str	r0, [r7, #4]
 8017a38:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017a3a:	2300      	movs	r3, #0
 8017a3c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017a3e:	683a      	ldr	r2, [r7, #0]
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	429a      	cmp	r2, r3
 8017a44:	d105      	bne.n	8017a52 <ip_reass_free_complete_datagram+0x22>
 8017a46:	4b45      	ldr	r3, [pc, #276]	; (8017b5c <ip_reass_free_complete_datagram+0x12c>)
 8017a48:	22ab      	movs	r2, #171	; 0xab
 8017a4a:	4945      	ldr	r1, [pc, #276]	; (8017b60 <ip_reass_free_complete_datagram+0x130>)
 8017a4c:	4845      	ldr	r0, [pc, #276]	; (8017b64 <ip_reass_free_complete_datagram+0x134>)
 8017a4e:	f001 ff37 	bl	80198c0 <iprintf>
  if (prev != NULL) {
 8017a52:	683b      	ldr	r3, [r7, #0]
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d00a      	beq.n	8017a6e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017a58:	683b      	ldr	r3, [r7, #0]
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	687a      	ldr	r2, [r7, #4]
 8017a5e:	429a      	cmp	r2, r3
 8017a60:	d005      	beq.n	8017a6e <ip_reass_free_complete_datagram+0x3e>
 8017a62:	4b3e      	ldr	r3, [pc, #248]	; (8017b5c <ip_reass_free_complete_datagram+0x12c>)
 8017a64:	22ad      	movs	r2, #173	; 0xad
 8017a66:	4940      	ldr	r1, [pc, #256]	; (8017b68 <ip_reass_free_complete_datagram+0x138>)
 8017a68:	483e      	ldr	r0, [pc, #248]	; (8017b64 <ip_reass_free_complete_datagram+0x134>)
 8017a6a:	f001 ff29 	bl	80198c0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	685b      	ldr	r3, [r3, #4]
 8017a72:	685b      	ldr	r3, [r3, #4]
 8017a74:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017a76:	697b      	ldr	r3, [r7, #20]
 8017a78:	889b      	ldrh	r3, [r3, #4]
 8017a7a:	b29b      	uxth	r3, r3
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d12a      	bne.n	8017ad6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	685b      	ldr	r3, [r3, #4]
 8017a84:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017a86:	697b      	ldr	r3, [r7, #20]
 8017a88:	681a      	ldr	r2, [r3, #0]
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017a8e:	69bb      	ldr	r3, [r7, #24]
 8017a90:	6858      	ldr	r0, [r3, #4]
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	3308      	adds	r3, #8
 8017a96:	2214      	movs	r2, #20
 8017a98:	4619      	mov	r1, r3
 8017a9a:	f001 f8d1 	bl	8018c40 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017a9e:	2101      	movs	r1, #1
 8017aa0:	69b8      	ldr	r0, [r7, #24]
 8017aa2:	f7ff fc49 	bl	8017338 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017aa6:	69b8      	ldr	r0, [r7, #24]
 8017aa8:	f7f7 fabe 	bl	800f028 <pbuf_clen>
 8017aac:	4603      	mov	r3, r0
 8017aae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017ab0:	8bfa      	ldrh	r2, [r7, #30]
 8017ab2:	8a7b      	ldrh	r3, [r7, #18]
 8017ab4:	4413      	add	r3, r2
 8017ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017aba:	db05      	blt.n	8017ac8 <ip_reass_free_complete_datagram+0x98>
 8017abc:	4b27      	ldr	r3, [pc, #156]	; (8017b5c <ip_reass_free_complete_datagram+0x12c>)
 8017abe:	22bc      	movs	r2, #188	; 0xbc
 8017ac0:	492a      	ldr	r1, [pc, #168]	; (8017b6c <ip_reass_free_complete_datagram+0x13c>)
 8017ac2:	4828      	ldr	r0, [pc, #160]	; (8017b64 <ip_reass_free_complete_datagram+0x134>)
 8017ac4:	f001 fefc 	bl	80198c0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017ac8:	8bfa      	ldrh	r2, [r7, #30]
 8017aca:	8a7b      	ldrh	r3, [r7, #18]
 8017acc:	4413      	add	r3, r2
 8017ace:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017ad0:	69b8      	ldr	r0, [r7, #24]
 8017ad2:	f7f7 fa1b 	bl	800ef0c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	685b      	ldr	r3, [r3, #4]
 8017ada:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017adc:	e01f      	b.n	8017b1e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017ade:	69bb      	ldr	r3, [r7, #24]
 8017ae0:	685b      	ldr	r3, [r3, #4]
 8017ae2:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017ae4:	69bb      	ldr	r3, [r7, #24]
 8017ae6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017ae8:	697b      	ldr	r3, [r7, #20]
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017aee:	68f8      	ldr	r0, [r7, #12]
 8017af0:	f7f7 fa9a 	bl	800f028 <pbuf_clen>
 8017af4:	4603      	mov	r3, r0
 8017af6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017af8:	8bfa      	ldrh	r2, [r7, #30]
 8017afa:	8a7b      	ldrh	r3, [r7, #18]
 8017afc:	4413      	add	r3, r2
 8017afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017b02:	db05      	blt.n	8017b10 <ip_reass_free_complete_datagram+0xe0>
 8017b04:	4b15      	ldr	r3, [pc, #84]	; (8017b5c <ip_reass_free_complete_datagram+0x12c>)
 8017b06:	22cc      	movs	r2, #204	; 0xcc
 8017b08:	4918      	ldr	r1, [pc, #96]	; (8017b6c <ip_reass_free_complete_datagram+0x13c>)
 8017b0a:	4816      	ldr	r0, [pc, #88]	; (8017b64 <ip_reass_free_complete_datagram+0x134>)
 8017b0c:	f001 fed8 	bl	80198c0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017b10:	8bfa      	ldrh	r2, [r7, #30]
 8017b12:	8a7b      	ldrh	r3, [r7, #18]
 8017b14:	4413      	add	r3, r2
 8017b16:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017b18:	68f8      	ldr	r0, [r7, #12]
 8017b1a:	f7f7 f9f7 	bl	800ef0c <pbuf_free>
  while (p != NULL) {
 8017b1e:	69bb      	ldr	r3, [r7, #24]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d1dc      	bne.n	8017ade <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017b24:	6839      	ldr	r1, [r7, #0]
 8017b26:	6878      	ldr	r0, [r7, #4]
 8017b28:	f000 f8c2 	bl	8017cb0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017b2c:	4b10      	ldr	r3, [pc, #64]	; (8017b70 <ip_reass_free_complete_datagram+0x140>)
 8017b2e:	881b      	ldrh	r3, [r3, #0]
 8017b30:	8bfa      	ldrh	r2, [r7, #30]
 8017b32:	429a      	cmp	r2, r3
 8017b34:	d905      	bls.n	8017b42 <ip_reass_free_complete_datagram+0x112>
 8017b36:	4b09      	ldr	r3, [pc, #36]	; (8017b5c <ip_reass_free_complete_datagram+0x12c>)
 8017b38:	22d2      	movs	r2, #210	; 0xd2
 8017b3a:	490e      	ldr	r1, [pc, #56]	; (8017b74 <ip_reass_free_complete_datagram+0x144>)
 8017b3c:	4809      	ldr	r0, [pc, #36]	; (8017b64 <ip_reass_free_complete_datagram+0x134>)
 8017b3e:	f001 febf 	bl	80198c0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017b42:	4b0b      	ldr	r3, [pc, #44]	; (8017b70 <ip_reass_free_complete_datagram+0x140>)
 8017b44:	881a      	ldrh	r2, [r3, #0]
 8017b46:	8bfb      	ldrh	r3, [r7, #30]
 8017b48:	1ad3      	subs	r3, r2, r3
 8017b4a:	b29a      	uxth	r2, r3
 8017b4c:	4b08      	ldr	r3, [pc, #32]	; (8017b70 <ip_reass_free_complete_datagram+0x140>)
 8017b4e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017b50:	8bfb      	ldrh	r3, [r7, #30]
}
 8017b52:	4618      	mov	r0, r3
 8017b54:	3720      	adds	r7, #32
 8017b56:	46bd      	mov	sp, r7
 8017b58:	bd80      	pop	{r7, pc}
 8017b5a:	bf00      	nop
 8017b5c:	08020750 	.word	0x08020750
 8017b60:	0802078c 	.word	0x0802078c
 8017b64:	08020798 	.word	0x08020798
 8017b68:	080207c0 	.word	0x080207c0
 8017b6c:	080207d4 	.word	0x080207d4
 8017b70:	2000893c 	.word	0x2000893c
 8017b74:	080207f4 	.word	0x080207f4

08017b78 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017b78:	b580      	push	{r7, lr}
 8017b7a:	b08a      	sub	sp, #40	; 0x28
 8017b7c:	af00      	add	r7, sp, #0
 8017b7e:	6078      	str	r0, [r7, #4]
 8017b80:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017b82:	2300      	movs	r3, #0
 8017b84:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017b86:	2300      	movs	r3, #0
 8017b88:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017b8e:	2300      	movs	r3, #0
 8017b90:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017b92:	2300      	movs	r3, #0
 8017b94:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017b96:	4b28      	ldr	r3, [pc, #160]	; (8017c38 <ip_reass_remove_oldest_datagram+0xc0>)
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017b9c:	e030      	b.n	8017c00 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ba0:	695a      	ldr	r2, [r3, #20]
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	68db      	ldr	r3, [r3, #12]
 8017ba6:	429a      	cmp	r2, r3
 8017ba8:	d10c      	bne.n	8017bc4 <ip_reass_remove_oldest_datagram+0x4c>
 8017baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bac:	699a      	ldr	r2, [r3, #24]
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	691b      	ldr	r3, [r3, #16]
 8017bb2:	429a      	cmp	r2, r3
 8017bb4:	d106      	bne.n	8017bc4 <ip_reass_remove_oldest_datagram+0x4c>
 8017bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bb8:	899a      	ldrh	r2, [r3, #12]
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	889b      	ldrh	r3, [r3, #4]
 8017bbe:	b29b      	uxth	r3, r3
 8017bc0:	429a      	cmp	r2, r3
 8017bc2:	d014      	beq.n	8017bee <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017bc4:	693b      	ldr	r3, [r7, #16]
 8017bc6:	3301      	adds	r3, #1
 8017bc8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017bca:	6a3b      	ldr	r3, [r7, #32]
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d104      	bne.n	8017bda <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bd2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017bd4:	69fb      	ldr	r3, [r7, #28]
 8017bd6:	61bb      	str	r3, [r7, #24]
 8017bd8:	e009      	b.n	8017bee <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bdc:	7fda      	ldrb	r2, [r3, #31]
 8017bde:	6a3b      	ldr	r3, [r7, #32]
 8017be0:	7fdb      	ldrb	r3, [r3, #31]
 8017be2:	429a      	cmp	r2, r3
 8017be4:	d803      	bhi.n	8017bee <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017be8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017bea:	69fb      	ldr	r3, [r7, #28]
 8017bec:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d001      	beq.n	8017bfa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bf8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d1cb      	bne.n	8017b9e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017c06:	6a3b      	ldr	r3, [r7, #32]
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d008      	beq.n	8017c1e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017c0c:	69b9      	ldr	r1, [r7, #24]
 8017c0e:	6a38      	ldr	r0, [r7, #32]
 8017c10:	f7ff ff0e 	bl	8017a30 <ip_reass_free_complete_datagram>
 8017c14:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017c16:	697a      	ldr	r2, [r7, #20]
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	4413      	add	r3, r2
 8017c1c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017c1e:	697a      	ldr	r2, [r7, #20]
 8017c20:	683b      	ldr	r3, [r7, #0]
 8017c22:	429a      	cmp	r2, r3
 8017c24:	da02      	bge.n	8017c2c <ip_reass_remove_oldest_datagram+0xb4>
 8017c26:	693b      	ldr	r3, [r7, #16]
 8017c28:	2b01      	cmp	r3, #1
 8017c2a:	dcac      	bgt.n	8017b86 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017c2c:	697b      	ldr	r3, [r7, #20]
}
 8017c2e:	4618      	mov	r0, r3
 8017c30:	3728      	adds	r7, #40	; 0x28
 8017c32:	46bd      	mov	sp, r7
 8017c34:	bd80      	pop	{r7, pc}
 8017c36:	bf00      	nop
 8017c38:	20008938 	.word	0x20008938

08017c3c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017c3c:	b580      	push	{r7, lr}
 8017c3e:	b084      	sub	sp, #16
 8017c40:	af00      	add	r7, sp, #0
 8017c42:	6078      	str	r0, [r7, #4]
 8017c44:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017c46:	2004      	movs	r0, #4
 8017c48:	f7f6 fae6 	bl	800e218 <memp_malloc>
 8017c4c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017c4e:	68fb      	ldr	r3, [r7, #12]
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	d110      	bne.n	8017c76 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017c54:	6839      	ldr	r1, [r7, #0]
 8017c56:	6878      	ldr	r0, [r7, #4]
 8017c58:	f7ff ff8e 	bl	8017b78 <ip_reass_remove_oldest_datagram>
 8017c5c:	4602      	mov	r2, r0
 8017c5e:	683b      	ldr	r3, [r7, #0]
 8017c60:	4293      	cmp	r3, r2
 8017c62:	dc03      	bgt.n	8017c6c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017c64:	2004      	movs	r0, #4
 8017c66:	f7f6 fad7 	bl	800e218 <memp_malloc>
 8017c6a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017c6c:	68fb      	ldr	r3, [r7, #12]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d101      	bne.n	8017c76 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017c72:	2300      	movs	r3, #0
 8017c74:	e016      	b.n	8017ca4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017c76:	2220      	movs	r2, #32
 8017c78:	2100      	movs	r1, #0
 8017c7a:	68f8      	ldr	r0, [r7, #12]
 8017c7c:	f001 f804 	bl	8018c88 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	220f      	movs	r2, #15
 8017c84:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017c86:	4b09      	ldr	r3, [pc, #36]	; (8017cac <ip_reass_enqueue_new_datagram+0x70>)
 8017c88:	681a      	ldr	r2, [r3, #0]
 8017c8a:	68fb      	ldr	r3, [r7, #12]
 8017c8c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017c8e:	4a07      	ldr	r2, [pc, #28]	; (8017cac <ip_reass_enqueue_new_datagram+0x70>)
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	3308      	adds	r3, #8
 8017c98:	2214      	movs	r2, #20
 8017c9a:	6879      	ldr	r1, [r7, #4]
 8017c9c:	4618      	mov	r0, r3
 8017c9e:	f000 ffcf 	bl	8018c40 <memcpy>
  return ipr;
 8017ca2:	68fb      	ldr	r3, [r7, #12]
}
 8017ca4:	4618      	mov	r0, r3
 8017ca6:	3710      	adds	r7, #16
 8017ca8:	46bd      	mov	sp, r7
 8017caa:	bd80      	pop	{r7, pc}
 8017cac:	20008938 	.word	0x20008938

08017cb0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017cb0:	b580      	push	{r7, lr}
 8017cb2:	b082      	sub	sp, #8
 8017cb4:	af00      	add	r7, sp, #0
 8017cb6:	6078      	str	r0, [r7, #4]
 8017cb8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017cba:	4b10      	ldr	r3, [pc, #64]	; (8017cfc <ip_reass_dequeue_datagram+0x4c>)
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	687a      	ldr	r2, [r7, #4]
 8017cc0:	429a      	cmp	r2, r3
 8017cc2:	d104      	bne.n	8017cce <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	4a0c      	ldr	r2, [pc, #48]	; (8017cfc <ip_reass_dequeue_datagram+0x4c>)
 8017cca:	6013      	str	r3, [r2, #0]
 8017ccc:	e00d      	b.n	8017cea <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017cce:	683b      	ldr	r3, [r7, #0]
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d106      	bne.n	8017ce2 <ip_reass_dequeue_datagram+0x32>
 8017cd4:	4b0a      	ldr	r3, [pc, #40]	; (8017d00 <ip_reass_dequeue_datagram+0x50>)
 8017cd6:	f240 1245 	movw	r2, #325	; 0x145
 8017cda:	490a      	ldr	r1, [pc, #40]	; (8017d04 <ip_reass_dequeue_datagram+0x54>)
 8017cdc:	480a      	ldr	r0, [pc, #40]	; (8017d08 <ip_reass_dequeue_datagram+0x58>)
 8017cde:	f001 fdef 	bl	80198c0 <iprintf>
    prev->next = ipr->next;
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	681a      	ldr	r2, [r3, #0]
 8017ce6:	683b      	ldr	r3, [r7, #0]
 8017ce8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017cea:	6879      	ldr	r1, [r7, #4]
 8017cec:	2004      	movs	r0, #4
 8017cee:	f7f6 fae5 	bl	800e2bc <memp_free>
}
 8017cf2:	bf00      	nop
 8017cf4:	3708      	adds	r7, #8
 8017cf6:	46bd      	mov	sp, r7
 8017cf8:	bd80      	pop	{r7, pc}
 8017cfa:	bf00      	nop
 8017cfc:	20008938 	.word	0x20008938
 8017d00:	08020750 	.word	0x08020750
 8017d04:	08020818 	.word	0x08020818
 8017d08:	08020798 	.word	0x08020798

08017d0c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017d0c:	b580      	push	{r7, lr}
 8017d0e:	b08c      	sub	sp, #48	; 0x30
 8017d10:	af00      	add	r7, sp, #0
 8017d12:	60f8      	str	r0, [r7, #12]
 8017d14:	60b9      	str	r1, [r7, #8]
 8017d16:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017d18:	2300      	movs	r3, #0
 8017d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017d1c:	2301      	movs	r3, #1
 8017d1e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017d20:	68bb      	ldr	r3, [r7, #8]
 8017d22:	685b      	ldr	r3, [r3, #4]
 8017d24:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017d26:	69fb      	ldr	r3, [r7, #28]
 8017d28:	885b      	ldrh	r3, [r3, #2]
 8017d2a:	b29b      	uxth	r3, r3
 8017d2c:	4618      	mov	r0, r3
 8017d2e:	f7f5 fdbd 	bl	800d8ac <lwip_htons>
 8017d32:	4603      	mov	r3, r0
 8017d34:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017d36:	69fb      	ldr	r3, [r7, #28]
 8017d38:	781b      	ldrb	r3, [r3, #0]
 8017d3a:	f003 030f 	and.w	r3, r3, #15
 8017d3e:	b2db      	uxtb	r3, r3
 8017d40:	009b      	lsls	r3, r3, #2
 8017d42:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017d44:	7e7b      	ldrb	r3, [r7, #25]
 8017d46:	b29b      	uxth	r3, r3
 8017d48:	8b7a      	ldrh	r2, [r7, #26]
 8017d4a:	429a      	cmp	r2, r3
 8017d4c:	d202      	bcs.n	8017d54 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8017d52:	e135      	b.n	8017fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017d54:	7e7b      	ldrb	r3, [r7, #25]
 8017d56:	b29b      	uxth	r3, r3
 8017d58:	8b7a      	ldrh	r2, [r7, #26]
 8017d5a:	1ad3      	subs	r3, r2, r3
 8017d5c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017d5e:	69fb      	ldr	r3, [r7, #28]
 8017d60:	88db      	ldrh	r3, [r3, #6]
 8017d62:	b29b      	uxth	r3, r3
 8017d64:	4618      	mov	r0, r3
 8017d66:	f7f5 fda1 	bl	800d8ac <lwip_htons>
 8017d6a:	4603      	mov	r3, r0
 8017d6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017d70:	b29b      	uxth	r3, r3
 8017d72:	00db      	lsls	r3, r3, #3
 8017d74:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017d76:	68bb      	ldr	r3, [r7, #8]
 8017d78:	685b      	ldr	r3, [r3, #4]
 8017d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d7e:	2200      	movs	r2, #0
 8017d80:	701a      	strb	r2, [r3, #0]
 8017d82:	2200      	movs	r2, #0
 8017d84:	705a      	strb	r2, [r3, #1]
 8017d86:	2200      	movs	r2, #0
 8017d88:	709a      	strb	r2, [r3, #2]
 8017d8a:	2200      	movs	r2, #0
 8017d8c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d90:	8afa      	ldrh	r2, [r7, #22]
 8017d92:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017d94:	8afa      	ldrh	r2, [r7, #22]
 8017d96:	8b7b      	ldrh	r3, [r7, #26]
 8017d98:	4413      	add	r3, r2
 8017d9a:	b29a      	uxth	r2, r3
 8017d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d9e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017da2:	88db      	ldrh	r3, [r3, #6]
 8017da4:	b29b      	uxth	r3, r3
 8017da6:	8afa      	ldrh	r2, [r7, #22]
 8017da8:	429a      	cmp	r2, r3
 8017daa:	d902      	bls.n	8017db2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017dac:	f04f 33ff 	mov.w	r3, #4294967295
 8017db0:	e106      	b.n	8017fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017db2:	68fb      	ldr	r3, [r7, #12]
 8017db4:	685b      	ldr	r3, [r3, #4]
 8017db6:	627b      	str	r3, [r7, #36]	; 0x24
 8017db8:	e068      	b.n	8017e8c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dbc:	685b      	ldr	r3, [r3, #4]
 8017dbe:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dc2:	889b      	ldrh	r3, [r3, #4]
 8017dc4:	b29a      	uxth	r2, r3
 8017dc6:	693b      	ldr	r3, [r7, #16]
 8017dc8:	889b      	ldrh	r3, [r3, #4]
 8017dca:	b29b      	uxth	r3, r3
 8017dcc:	429a      	cmp	r2, r3
 8017dce:	d235      	bcs.n	8017e3c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017dd4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d020      	beq.n	8017e1e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dde:	889b      	ldrh	r3, [r3, #4]
 8017de0:	b29a      	uxth	r2, r3
 8017de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017de4:	88db      	ldrh	r3, [r3, #6]
 8017de6:	b29b      	uxth	r3, r3
 8017de8:	429a      	cmp	r2, r3
 8017dea:	d307      	bcc.n	8017dfc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dee:	88db      	ldrh	r3, [r3, #6]
 8017df0:	b29a      	uxth	r2, r3
 8017df2:	693b      	ldr	r3, [r7, #16]
 8017df4:	889b      	ldrh	r3, [r3, #4]
 8017df6:	b29b      	uxth	r3, r3
 8017df8:	429a      	cmp	r2, r3
 8017dfa:	d902      	bls.n	8017e02 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8017e00:	e0de      	b.n	8017fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e04:	68ba      	ldr	r2, [r7, #8]
 8017e06:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e0a:	88db      	ldrh	r3, [r3, #6]
 8017e0c:	b29a      	uxth	r2, r3
 8017e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e10:	889b      	ldrh	r3, [r3, #4]
 8017e12:	b29b      	uxth	r3, r3
 8017e14:	429a      	cmp	r2, r3
 8017e16:	d03d      	beq.n	8017e94 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017e18:	2300      	movs	r3, #0
 8017e1a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017e1c:	e03a      	b.n	8017e94 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e20:	88db      	ldrh	r3, [r3, #6]
 8017e22:	b29a      	uxth	r2, r3
 8017e24:	693b      	ldr	r3, [r7, #16]
 8017e26:	889b      	ldrh	r3, [r3, #4]
 8017e28:	b29b      	uxth	r3, r3
 8017e2a:	429a      	cmp	r2, r3
 8017e2c:	d902      	bls.n	8017e34 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8017e32:	e0c5      	b.n	8017fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	68ba      	ldr	r2, [r7, #8]
 8017e38:	605a      	str	r2, [r3, #4]
      break;
 8017e3a:	e02b      	b.n	8017e94 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e3e:	889b      	ldrh	r3, [r3, #4]
 8017e40:	b29a      	uxth	r2, r3
 8017e42:	693b      	ldr	r3, [r7, #16]
 8017e44:	889b      	ldrh	r3, [r3, #4]
 8017e46:	b29b      	uxth	r3, r3
 8017e48:	429a      	cmp	r2, r3
 8017e4a:	d102      	bne.n	8017e52 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8017e50:	e0b6      	b.n	8017fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e54:	889b      	ldrh	r3, [r3, #4]
 8017e56:	b29a      	uxth	r2, r3
 8017e58:	693b      	ldr	r3, [r7, #16]
 8017e5a:	88db      	ldrh	r3, [r3, #6]
 8017e5c:	b29b      	uxth	r3, r3
 8017e5e:	429a      	cmp	r2, r3
 8017e60:	d202      	bcs.n	8017e68 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017e62:	f04f 33ff 	mov.w	r3, #4294967295
 8017e66:	e0ab      	b.n	8017fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d009      	beq.n	8017e82 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e70:	88db      	ldrh	r3, [r3, #6]
 8017e72:	b29a      	uxth	r2, r3
 8017e74:	693b      	ldr	r3, [r7, #16]
 8017e76:	889b      	ldrh	r3, [r3, #4]
 8017e78:	b29b      	uxth	r3, r3
 8017e7a:	429a      	cmp	r2, r3
 8017e7c:	d001      	beq.n	8017e82 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017e7e:	2300      	movs	r3, #0
 8017e80:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017e82:	693b      	ldr	r3, [r7, #16]
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017e88:	693b      	ldr	r3, [r7, #16]
 8017e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d193      	bne.n	8017dba <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017e92:	e000      	b.n	8017e96 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017e94:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d12d      	bne.n	8017ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d01c      	beq.n	8017edc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ea4:	88db      	ldrh	r3, [r3, #6]
 8017ea6:	b29a      	uxth	r2, r3
 8017ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eaa:	889b      	ldrh	r3, [r3, #4]
 8017eac:	b29b      	uxth	r3, r3
 8017eae:	429a      	cmp	r2, r3
 8017eb0:	d906      	bls.n	8017ec0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017eb2:	4b45      	ldr	r3, [pc, #276]	; (8017fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017eb4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017eb8:	4944      	ldr	r1, [pc, #272]	; (8017fcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017eba:	4845      	ldr	r0, [pc, #276]	; (8017fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017ebc:	f001 fd00 	bl	80198c0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ec2:	68ba      	ldr	r2, [r7, #8]
 8017ec4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ec8:	88db      	ldrh	r3, [r3, #6]
 8017eca:	b29a      	uxth	r2, r3
 8017ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ece:	889b      	ldrh	r3, [r3, #4]
 8017ed0:	b29b      	uxth	r3, r3
 8017ed2:	429a      	cmp	r2, r3
 8017ed4:	d010      	beq.n	8017ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	623b      	str	r3, [r7, #32]
 8017eda:	e00d      	b.n	8017ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017edc:	68fb      	ldr	r3, [r7, #12]
 8017ede:	685b      	ldr	r3, [r3, #4]
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d006      	beq.n	8017ef2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017ee4:	4b38      	ldr	r3, [pc, #224]	; (8017fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017ee6:	f240 12bf 	movw	r2, #447	; 0x1bf
 8017eea:	493a      	ldr	r1, [pc, #232]	; (8017fd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017eec:	4838      	ldr	r0, [pc, #224]	; (8017fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017eee:	f001 fce7 	bl	80198c0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017ef2:	68fb      	ldr	r3, [r7, #12]
 8017ef4:	68ba      	ldr	r2, [r7, #8]
 8017ef6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d105      	bne.n	8017f0a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	7f9b      	ldrb	r3, [r3, #30]
 8017f02:	f003 0301 	and.w	r3, r3, #1
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d059      	beq.n	8017fbe <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017f0a:	6a3b      	ldr	r3, [r7, #32]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d04f      	beq.n	8017fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017f10:	68fb      	ldr	r3, [r7, #12]
 8017f12:	685b      	ldr	r3, [r3, #4]
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d006      	beq.n	8017f26 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017f18:	68fb      	ldr	r3, [r7, #12]
 8017f1a:	685b      	ldr	r3, [r3, #4]
 8017f1c:	685b      	ldr	r3, [r3, #4]
 8017f1e:	889b      	ldrh	r3, [r3, #4]
 8017f20:	b29b      	uxth	r3, r3
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d002      	beq.n	8017f2c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017f26:	2300      	movs	r3, #0
 8017f28:	623b      	str	r3, [r7, #32]
 8017f2a:	e041      	b.n	8017fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f2e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017f36:	e012      	b.n	8017f5e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f3a:	685b      	ldr	r3, [r3, #4]
 8017f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f40:	88db      	ldrh	r3, [r3, #6]
 8017f42:	b29a      	uxth	r2, r3
 8017f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f46:	889b      	ldrh	r3, [r3, #4]
 8017f48:	b29b      	uxth	r3, r3
 8017f4a:	429a      	cmp	r2, r3
 8017f4c:	d002      	beq.n	8017f54 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017f4e:	2300      	movs	r3, #0
 8017f50:	623b      	str	r3, [r7, #32]
            break;
 8017f52:	e007      	b.n	8017f64 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f56:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d1e9      	bne.n	8017f38 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017f64:	6a3b      	ldr	r3, [r7, #32]
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d022      	beq.n	8017fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	685b      	ldr	r3, [r3, #4]
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d106      	bne.n	8017f80 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017f72:	4b15      	ldr	r3, [pc, #84]	; (8017fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017f74:	f240 12df 	movw	r2, #479	; 0x1df
 8017f78:	4917      	ldr	r1, [pc, #92]	; (8017fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017f7a:	4815      	ldr	r0, [pc, #84]	; (8017fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017f7c:	f001 fca0 	bl	80198c0 <iprintf>
          LWIP_ASSERT("sanity check",
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	685b      	ldr	r3, [r3, #4]
 8017f84:	685b      	ldr	r3, [r3, #4]
 8017f86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f88:	429a      	cmp	r2, r3
 8017f8a:	d106      	bne.n	8017f9a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017f8c:	4b0e      	ldr	r3, [pc, #56]	; (8017fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017f8e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8017f92:	4911      	ldr	r1, [pc, #68]	; (8017fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017f94:	480e      	ldr	r0, [pc, #56]	; (8017fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017f96:	f001 fc93 	bl	80198c0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d006      	beq.n	8017fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017fa2:	4b09      	ldr	r3, [pc, #36]	; (8017fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017fa4:	f240 12e3 	movw	r2, #483	; 0x1e3
 8017fa8:	490c      	ldr	r1, [pc, #48]	; (8017fdc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017faa:	4809      	ldr	r0, [pc, #36]	; (8017fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017fac:	f001 fc88 	bl	80198c0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017fb0:	6a3b      	ldr	r3, [r7, #32]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	bf14      	ite	ne
 8017fb6:	2301      	movne	r3, #1
 8017fb8:	2300      	moveq	r3, #0
 8017fba:	b2db      	uxtb	r3, r3
 8017fbc:	e000      	b.n	8017fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017fbe:	2300      	movs	r3, #0
}
 8017fc0:	4618      	mov	r0, r3
 8017fc2:	3730      	adds	r7, #48	; 0x30
 8017fc4:	46bd      	mov	sp, r7
 8017fc6:	bd80      	pop	{r7, pc}
 8017fc8:	08020750 	.word	0x08020750
 8017fcc:	08020834 	.word	0x08020834
 8017fd0:	08020798 	.word	0x08020798
 8017fd4:	08020854 	.word	0x08020854
 8017fd8:	0802088c 	.word	0x0802088c
 8017fdc:	0802089c 	.word	0x0802089c

08017fe0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b08e      	sub	sp, #56	; 0x38
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	685b      	ldr	r3, [r3, #4]
 8017fec:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ff0:	781b      	ldrb	r3, [r3, #0]
 8017ff2:	f003 030f 	and.w	r3, r3, #15
 8017ff6:	b2db      	uxtb	r3, r3
 8017ff8:	009b      	lsls	r3, r3, #2
 8017ffa:	b2db      	uxtb	r3, r3
 8017ffc:	2b14      	cmp	r3, #20
 8017ffe:	f040 8167 	bne.w	80182d0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8018002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018004:	88db      	ldrh	r3, [r3, #6]
 8018006:	b29b      	uxth	r3, r3
 8018008:	4618      	mov	r0, r3
 801800a:	f7f5 fc4f 	bl	800d8ac <lwip_htons>
 801800e:	4603      	mov	r3, r0
 8018010:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018014:	b29b      	uxth	r3, r3
 8018016:	00db      	lsls	r3, r3, #3
 8018018:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801801a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801801c:	885b      	ldrh	r3, [r3, #2]
 801801e:	b29b      	uxth	r3, r3
 8018020:	4618      	mov	r0, r3
 8018022:	f7f5 fc43 	bl	800d8ac <lwip_htons>
 8018026:	4603      	mov	r3, r0
 8018028:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801802c:	781b      	ldrb	r3, [r3, #0]
 801802e:	f003 030f 	and.w	r3, r3, #15
 8018032:	b2db      	uxtb	r3, r3
 8018034:	009b      	lsls	r3, r3, #2
 8018036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801803a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801803e:	b29b      	uxth	r3, r3
 8018040:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018042:	429a      	cmp	r2, r3
 8018044:	f0c0 8146 	bcc.w	80182d4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018048:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801804c:	b29b      	uxth	r3, r3
 801804e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018050:	1ad3      	subs	r3, r2, r3
 8018052:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018054:	6878      	ldr	r0, [r7, #4]
 8018056:	f7f6 ffe7 	bl	800f028 <pbuf_clen>
 801805a:	4603      	mov	r3, r0
 801805c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801805e:	4ba3      	ldr	r3, [pc, #652]	; (80182ec <ip4_reass+0x30c>)
 8018060:	881b      	ldrh	r3, [r3, #0]
 8018062:	461a      	mov	r2, r3
 8018064:	8c3b      	ldrh	r3, [r7, #32]
 8018066:	4413      	add	r3, r2
 8018068:	2b0a      	cmp	r3, #10
 801806a:	dd10      	ble.n	801808e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801806c:	8c3b      	ldrh	r3, [r7, #32]
 801806e:	4619      	mov	r1, r3
 8018070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018072:	f7ff fd81 	bl	8017b78 <ip_reass_remove_oldest_datagram>
 8018076:	4603      	mov	r3, r0
 8018078:	2b00      	cmp	r3, #0
 801807a:	f000 812d 	beq.w	80182d8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801807e:	4b9b      	ldr	r3, [pc, #620]	; (80182ec <ip4_reass+0x30c>)
 8018080:	881b      	ldrh	r3, [r3, #0]
 8018082:	461a      	mov	r2, r3
 8018084:	8c3b      	ldrh	r3, [r7, #32]
 8018086:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018088:	2b0a      	cmp	r3, #10
 801808a:	f300 8125 	bgt.w	80182d8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801808e:	4b98      	ldr	r3, [pc, #608]	; (80182f0 <ip4_reass+0x310>)
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	633b      	str	r3, [r7, #48]	; 0x30
 8018094:	e015      	b.n	80180c2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018098:	695a      	ldr	r2, [r3, #20]
 801809a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801809c:	68db      	ldr	r3, [r3, #12]
 801809e:	429a      	cmp	r2, r3
 80180a0:	d10c      	bne.n	80180bc <ip4_reass+0xdc>
 80180a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180a4:	699a      	ldr	r2, [r3, #24]
 80180a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180a8:	691b      	ldr	r3, [r3, #16]
 80180aa:	429a      	cmp	r2, r3
 80180ac:	d106      	bne.n	80180bc <ip4_reass+0xdc>
 80180ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180b0:	899a      	ldrh	r2, [r3, #12]
 80180b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180b4:	889b      	ldrh	r3, [r3, #4]
 80180b6:	b29b      	uxth	r3, r3
 80180b8:	429a      	cmp	r2, r3
 80180ba:	d006      	beq.n	80180ca <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80180bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	633b      	str	r3, [r7, #48]	; 0x30
 80180c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d1e6      	bne.n	8018096 <ip4_reass+0xb6>
 80180c8:	e000      	b.n	80180cc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80180ca:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80180cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d109      	bne.n	80180e6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80180d2:	8c3b      	ldrh	r3, [r7, #32]
 80180d4:	4619      	mov	r1, r3
 80180d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180d8:	f7ff fdb0 	bl	8017c3c <ip_reass_enqueue_new_datagram>
 80180dc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80180de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d11c      	bne.n	801811e <ip4_reass+0x13e>
      goto nullreturn;
 80180e4:	e0f9      	b.n	80182da <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80180e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180e8:	88db      	ldrh	r3, [r3, #6]
 80180ea:	b29b      	uxth	r3, r3
 80180ec:	4618      	mov	r0, r3
 80180ee:	f7f5 fbdd 	bl	800d8ac <lwip_htons>
 80180f2:	4603      	mov	r3, r0
 80180f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d110      	bne.n	801811e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80180fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180fe:	89db      	ldrh	r3, [r3, #14]
 8018100:	4618      	mov	r0, r3
 8018102:	f7f5 fbd3 	bl	800d8ac <lwip_htons>
 8018106:	4603      	mov	r3, r0
 8018108:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801810c:	2b00      	cmp	r3, #0
 801810e:	d006      	beq.n	801811e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018112:	3308      	adds	r3, #8
 8018114:	2214      	movs	r2, #20
 8018116:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018118:	4618      	mov	r0, r3
 801811a:	f000 fd91 	bl	8018c40 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018120:	88db      	ldrh	r3, [r3, #6]
 8018122:	b29b      	uxth	r3, r3
 8018124:	f003 0320 	and.w	r3, r3, #32
 8018128:	2b00      	cmp	r3, #0
 801812a:	bf0c      	ite	eq
 801812c:	2301      	moveq	r3, #1
 801812e:	2300      	movne	r3, #0
 8018130:	b2db      	uxtb	r3, r3
 8018132:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018134:	69fb      	ldr	r3, [r7, #28]
 8018136:	2b00      	cmp	r3, #0
 8018138:	d00e      	beq.n	8018158 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801813a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801813c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801813e:	4413      	add	r3, r2
 8018140:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018142:	8b7a      	ldrh	r2, [r7, #26]
 8018144:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018146:	429a      	cmp	r2, r3
 8018148:	f0c0 80a0 	bcc.w	801828c <ip4_reass+0x2ac>
 801814c:	8b7b      	ldrh	r3, [r7, #26]
 801814e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8018152:	4293      	cmp	r3, r2
 8018154:	f200 809a 	bhi.w	801828c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018158:	69fa      	ldr	r2, [r7, #28]
 801815a:	6879      	ldr	r1, [r7, #4]
 801815c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801815e:	f7ff fdd5 	bl	8017d0c <ip_reass_chain_frag_into_datagram_and_validate>
 8018162:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018164:	697b      	ldr	r3, [r7, #20]
 8018166:	f1b3 3fff 	cmp.w	r3, #4294967295
 801816a:	f000 8091 	beq.w	8018290 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801816e:	4b5f      	ldr	r3, [pc, #380]	; (80182ec <ip4_reass+0x30c>)
 8018170:	881a      	ldrh	r2, [r3, #0]
 8018172:	8c3b      	ldrh	r3, [r7, #32]
 8018174:	4413      	add	r3, r2
 8018176:	b29a      	uxth	r2, r3
 8018178:	4b5c      	ldr	r3, [pc, #368]	; (80182ec <ip4_reass+0x30c>)
 801817a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801817c:	69fb      	ldr	r3, [r7, #28]
 801817e:	2b00      	cmp	r3, #0
 8018180:	d00d      	beq.n	801819e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018182:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018184:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018186:	4413      	add	r3, r2
 8018188:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801818a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801818c:	8a7a      	ldrh	r2, [r7, #18]
 801818e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018192:	7f9b      	ldrb	r3, [r3, #30]
 8018194:	f043 0301 	orr.w	r3, r3, #1
 8018198:	b2da      	uxtb	r2, r3
 801819a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801819c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801819e:	697b      	ldr	r3, [r7, #20]
 80181a0:	2b01      	cmp	r3, #1
 80181a2:	d171      	bne.n	8018288 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80181a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181a6:	8b9b      	ldrh	r3, [r3, #28]
 80181a8:	3314      	adds	r3, #20
 80181aa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80181ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181ae:	685b      	ldr	r3, [r3, #4]
 80181b0:	685b      	ldr	r3, [r3, #4]
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80181b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181b8:	685b      	ldr	r3, [r3, #4]
 80181ba:	685b      	ldr	r3, [r3, #4]
 80181bc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80181be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181c0:	3308      	adds	r3, #8
 80181c2:	2214      	movs	r2, #20
 80181c4:	4619      	mov	r1, r3
 80181c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80181c8:	f000 fd3a 	bl	8018c40 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80181cc:	8a3b      	ldrh	r3, [r7, #16]
 80181ce:	4618      	mov	r0, r3
 80181d0:	f7f5 fb6c 	bl	800d8ac <lwip_htons>
 80181d4:	4603      	mov	r3, r0
 80181d6:	461a      	mov	r2, r3
 80181d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181da:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80181dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181de:	2200      	movs	r2, #0
 80181e0:	719a      	strb	r2, [r3, #6]
 80181e2:	2200      	movs	r2, #0
 80181e4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80181e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181e8:	2200      	movs	r2, #0
 80181ea:	729a      	strb	r2, [r3, #10]
 80181ec:	2200      	movs	r2, #0
 80181ee:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80181f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181f2:	685b      	ldr	r3, [r3, #4]
 80181f4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80181f6:	e00d      	b.n	8018214 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80181f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80181fa:	685b      	ldr	r3, [r3, #4]
 80181fc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80181fe:	2114      	movs	r1, #20
 8018200:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018202:	f7f6 fdfd 	bl	800ee00 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018206:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018208:	6878      	ldr	r0, [r7, #4]
 801820a:	f7f6 ff4d 	bl	800f0a8 <pbuf_cat>
      r = iprh->next_pbuf;
 801820e:	68fb      	ldr	r3, [r7, #12]
 8018210:	681b      	ldr	r3, [r3, #0]
 8018212:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018216:	2b00      	cmp	r3, #0
 8018218:	d1ee      	bne.n	80181f8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801821a:	4b35      	ldr	r3, [pc, #212]	; (80182f0 <ip4_reass+0x310>)
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018220:	429a      	cmp	r2, r3
 8018222:	d102      	bne.n	801822a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018224:	2300      	movs	r3, #0
 8018226:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018228:	e010      	b.n	801824c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801822a:	4b31      	ldr	r3, [pc, #196]	; (80182f0 <ip4_reass+0x310>)
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018230:	e007      	b.n	8018242 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018238:	429a      	cmp	r2, r3
 801823a:	d006      	beq.n	801824a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801823c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018244:	2b00      	cmp	r3, #0
 8018246:	d1f4      	bne.n	8018232 <ip4_reass+0x252>
 8018248:	e000      	b.n	801824c <ip4_reass+0x26c>
          break;
 801824a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801824c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801824e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018250:	f7ff fd2e 	bl	8017cb0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018254:	6878      	ldr	r0, [r7, #4]
 8018256:	f7f6 fee7 	bl	800f028 <pbuf_clen>
 801825a:	4603      	mov	r3, r0
 801825c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801825e:	4b23      	ldr	r3, [pc, #140]	; (80182ec <ip4_reass+0x30c>)
 8018260:	881b      	ldrh	r3, [r3, #0]
 8018262:	8c3a      	ldrh	r2, [r7, #32]
 8018264:	429a      	cmp	r2, r3
 8018266:	d906      	bls.n	8018276 <ip4_reass+0x296>
 8018268:	4b22      	ldr	r3, [pc, #136]	; (80182f4 <ip4_reass+0x314>)
 801826a:	f240 229b 	movw	r2, #667	; 0x29b
 801826e:	4922      	ldr	r1, [pc, #136]	; (80182f8 <ip4_reass+0x318>)
 8018270:	4822      	ldr	r0, [pc, #136]	; (80182fc <ip4_reass+0x31c>)
 8018272:	f001 fb25 	bl	80198c0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018276:	4b1d      	ldr	r3, [pc, #116]	; (80182ec <ip4_reass+0x30c>)
 8018278:	881a      	ldrh	r2, [r3, #0]
 801827a:	8c3b      	ldrh	r3, [r7, #32]
 801827c:	1ad3      	subs	r3, r2, r3
 801827e:	b29a      	uxth	r2, r3
 8018280:	4b1a      	ldr	r3, [pc, #104]	; (80182ec <ip4_reass+0x30c>)
 8018282:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	e02c      	b.n	80182e2 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018288:	2300      	movs	r3, #0
 801828a:	e02a      	b.n	80182e2 <ip4_reass+0x302>

nullreturn_ipr:
 801828c:	bf00      	nop
 801828e:	e000      	b.n	8018292 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8018290:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018294:	2b00      	cmp	r3, #0
 8018296:	d106      	bne.n	80182a6 <ip4_reass+0x2c6>
 8018298:	4b16      	ldr	r3, [pc, #88]	; (80182f4 <ip4_reass+0x314>)
 801829a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801829e:	4918      	ldr	r1, [pc, #96]	; (8018300 <ip4_reass+0x320>)
 80182a0:	4816      	ldr	r0, [pc, #88]	; (80182fc <ip4_reass+0x31c>)
 80182a2:	f001 fb0d 	bl	80198c0 <iprintf>
  if (ipr->p == NULL) {
 80182a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182a8:	685b      	ldr	r3, [r3, #4]
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d114      	bne.n	80182d8 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80182ae:	4b10      	ldr	r3, [pc, #64]	; (80182f0 <ip4_reass+0x310>)
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80182b4:	429a      	cmp	r2, r3
 80182b6:	d006      	beq.n	80182c6 <ip4_reass+0x2e6>
 80182b8:	4b0e      	ldr	r3, [pc, #56]	; (80182f4 <ip4_reass+0x314>)
 80182ba:	f240 22ab 	movw	r2, #683	; 0x2ab
 80182be:	4911      	ldr	r1, [pc, #68]	; (8018304 <ip4_reass+0x324>)
 80182c0:	480e      	ldr	r0, [pc, #56]	; (80182fc <ip4_reass+0x31c>)
 80182c2:	f001 fafd 	bl	80198c0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80182c6:	2100      	movs	r1, #0
 80182c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80182ca:	f7ff fcf1 	bl	8017cb0 <ip_reass_dequeue_datagram>
 80182ce:	e004      	b.n	80182da <ip4_reass+0x2fa>
    goto nullreturn;
 80182d0:	bf00      	nop
 80182d2:	e002      	b.n	80182da <ip4_reass+0x2fa>
    goto nullreturn;
 80182d4:	bf00      	nop
 80182d6:	e000      	b.n	80182da <ip4_reass+0x2fa>
  }

nullreturn:
 80182d8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80182da:	6878      	ldr	r0, [r7, #4]
 80182dc:	f7f6 fe16 	bl	800ef0c <pbuf_free>
  return NULL;
 80182e0:	2300      	movs	r3, #0
}
 80182e2:	4618      	mov	r0, r3
 80182e4:	3738      	adds	r7, #56	; 0x38
 80182e6:	46bd      	mov	sp, r7
 80182e8:	bd80      	pop	{r7, pc}
 80182ea:	bf00      	nop
 80182ec:	2000893c 	.word	0x2000893c
 80182f0:	20008938 	.word	0x20008938
 80182f4:	08020750 	.word	0x08020750
 80182f8:	080208c0 	.word	0x080208c0
 80182fc:	08020798 	.word	0x08020798
 8018300:	080208dc 	.word	0x080208dc
 8018304:	080208e8 	.word	0x080208e8

08018308 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018308:	b580      	push	{r7, lr}
 801830a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801830c:	2005      	movs	r0, #5
 801830e:	f7f5 ff83 	bl	800e218 <memp_malloc>
 8018312:	4603      	mov	r3, r0
}
 8018314:	4618      	mov	r0, r3
 8018316:	bd80      	pop	{r7, pc}

08018318 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018318:	b580      	push	{r7, lr}
 801831a:	b082      	sub	sp, #8
 801831c:	af00      	add	r7, sp, #0
 801831e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	2b00      	cmp	r3, #0
 8018324:	d106      	bne.n	8018334 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018326:	4b07      	ldr	r3, [pc, #28]	; (8018344 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018328:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801832c:	4906      	ldr	r1, [pc, #24]	; (8018348 <ip_frag_free_pbuf_custom_ref+0x30>)
 801832e:	4807      	ldr	r0, [pc, #28]	; (801834c <ip_frag_free_pbuf_custom_ref+0x34>)
 8018330:	f001 fac6 	bl	80198c0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018334:	6879      	ldr	r1, [r7, #4]
 8018336:	2005      	movs	r0, #5
 8018338:	f7f5 ffc0 	bl	800e2bc <memp_free>
}
 801833c:	bf00      	nop
 801833e:	3708      	adds	r7, #8
 8018340:	46bd      	mov	sp, r7
 8018342:	bd80      	pop	{r7, pc}
 8018344:	08020750 	.word	0x08020750
 8018348:	08020908 	.word	0x08020908
 801834c:	08020798 	.word	0x08020798

08018350 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018350:	b580      	push	{r7, lr}
 8018352:	b084      	sub	sp, #16
 8018354:	af00      	add	r7, sp, #0
 8018356:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	2b00      	cmp	r3, #0
 8018360:	d106      	bne.n	8018370 <ipfrag_free_pbuf_custom+0x20>
 8018362:	4b11      	ldr	r3, [pc, #68]	; (80183a8 <ipfrag_free_pbuf_custom+0x58>)
 8018364:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018368:	4910      	ldr	r1, [pc, #64]	; (80183ac <ipfrag_free_pbuf_custom+0x5c>)
 801836a:	4811      	ldr	r0, [pc, #68]	; (80183b0 <ipfrag_free_pbuf_custom+0x60>)
 801836c:	f001 faa8 	bl	80198c0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018370:	68fa      	ldr	r2, [r7, #12]
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	429a      	cmp	r2, r3
 8018376:	d006      	beq.n	8018386 <ipfrag_free_pbuf_custom+0x36>
 8018378:	4b0b      	ldr	r3, [pc, #44]	; (80183a8 <ipfrag_free_pbuf_custom+0x58>)
 801837a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801837e:	490d      	ldr	r1, [pc, #52]	; (80183b4 <ipfrag_free_pbuf_custom+0x64>)
 8018380:	480b      	ldr	r0, [pc, #44]	; (80183b0 <ipfrag_free_pbuf_custom+0x60>)
 8018382:	f001 fa9d 	bl	80198c0 <iprintf>
  if (pcr->original != NULL) {
 8018386:	68fb      	ldr	r3, [r7, #12]
 8018388:	695b      	ldr	r3, [r3, #20]
 801838a:	2b00      	cmp	r3, #0
 801838c:	d004      	beq.n	8018398 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801838e:	68fb      	ldr	r3, [r7, #12]
 8018390:	695b      	ldr	r3, [r3, #20]
 8018392:	4618      	mov	r0, r3
 8018394:	f7f6 fdba 	bl	800ef0c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018398:	68f8      	ldr	r0, [r7, #12]
 801839a:	f7ff ffbd 	bl	8018318 <ip_frag_free_pbuf_custom_ref>
}
 801839e:	bf00      	nop
 80183a0:	3710      	adds	r7, #16
 80183a2:	46bd      	mov	sp, r7
 80183a4:	bd80      	pop	{r7, pc}
 80183a6:	bf00      	nop
 80183a8:	08020750 	.word	0x08020750
 80183ac:	08020914 	.word	0x08020914
 80183b0:	08020798 	.word	0x08020798
 80183b4:	08020920 	.word	0x08020920

080183b8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b094      	sub	sp, #80	; 0x50
 80183bc:	af02      	add	r7, sp, #8
 80183be:	60f8      	str	r0, [r7, #12]
 80183c0:	60b9      	str	r1, [r7, #8]
 80183c2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80183c4:	2300      	movs	r3, #0
 80183c6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80183ca:	68bb      	ldr	r3, [r7, #8]
 80183cc:	8c1b      	ldrh	r3, [r3, #32]
 80183ce:	3b14      	subs	r3, #20
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	da00      	bge.n	80183d6 <ip4_frag+0x1e>
 80183d4:	3307      	adds	r3, #7
 80183d6:	10db      	asrs	r3, r3, #3
 80183d8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80183da:	2314      	movs	r3, #20
 80183dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	685b      	ldr	r3, [r3, #4]
 80183e2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80183e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183e6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80183e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183ea:	781b      	ldrb	r3, [r3, #0]
 80183ec:	f003 030f 	and.w	r3, r3, #15
 80183f0:	b2db      	uxtb	r3, r3
 80183f2:	009b      	lsls	r3, r3, #2
 80183f4:	b2db      	uxtb	r3, r3
 80183f6:	2b14      	cmp	r3, #20
 80183f8:	d002      	beq.n	8018400 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80183fa:	f06f 0305 	mvn.w	r3, #5
 80183fe:	e10f      	b.n	8018620 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018400:	68fb      	ldr	r3, [r7, #12]
 8018402:	895b      	ldrh	r3, [r3, #10]
 8018404:	2b13      	cmp	r3, #19
 8018406:	d809      	bhi.n	801841c <ip4_frag+0x64>
 8018408:	4b87      	ldr	r3, [pc, #540]	; (8018628 <ip4_frag+0x270>)
 801840a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801840e:	4987      	ldr	r1, [pc, #540]	; (801862c <ip4_frag+0x274>)
 8018410:	4887      	ldr	r0, [pc, #540]	; (8018630 <ip4_frag+0x278>)
 8018412:	f001 fa55 	bl	80198c0 <iprintf>
 8018416:	f06f 0305 	mvn.w	r3, #5
 801841a:	e101      	b.n	8018620 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801841c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801841e:	88db      	ldrh	r3, [r3, #6]
 8018420:	b29b      	uxth	r3, r3
 8018422:	4618      	mov	r0, r3
 8018424:	f7f5 fa42 	bl	800d8ac <lwip_htons>
 8018428:	4603      	mov	r3, r0
 801842a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801842c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801842e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018432:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018436:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801843c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801843e:	68fb      	ldr	r3, [r7, #12]
 8018440:	891b      	ldrh	r3, [r3, #8]
 8018442:	3b14      	subs	r3, #20
 8018444:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018448:	e0e0      	b.n	801860c <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801844a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801844c:	00db      	lsls	r3, r3, #3
 801844e:	b29b      	uxth	r3, r3
 8018450:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018454:	4293      	cmp	r3, r2
 8018456:	bf28      	it	cs
 8018458:	4613      	movcs	r3, r2
 801845a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801845c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018460:	2114      	movs	r1, #20
 8018462:	200e      	movs	r0, #14
 8018464:	f7f6 fa72 	bl	800e94c <pbuf_alloc>
 8018468:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801846c:	2b00      	cmp	r3, #0
 801846e:	f000 80d4 	beq.w	801861a <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018474:	895b      	ldrh	r3, [r3, #10]
 8018476:	2b13      	cmp	r3, #19
 8018478:	d806      	bhi.n	8018488 <ip4_frag+0xd0>
 801847a:	4b6b      	ldr	r3, [pc, #428]	; (8018628 <ip4_frag+0x270>)
 801847c:	f240 3225 	movw	r2, #805	; 0x325
 8018480:	496c      	ldr	r1, [pc, #432]	; (8018634 <ip4_frag+0x27c>)
 8018482:	486b      	ldr	r0, [pc, #428]	; (8018630 <ip4_frag+0x278>)
 8018484:	f001 fa1c 	bl	80198c0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801848a:	685b      	ldr	r3, [r3, #4]
 801848c:	2214      	movs	r2, #20
 801848e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018490:	4618      	mov	r0, r3
 8018492:	f000 fbd5 	bl	8018c40 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018498:	685b      	ldr	r3, [r3, #4]
 801849a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801849c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801849e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80184a2:	e064      	b.n	801856e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80184a4:	68fb      	ldr	r3, [r7, #12]
 80184a6:	895a      	ldrh	r2, [r3, #10]
 80184a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80184aa:	1ad3      	subs	r3, r2, r3
 80184ac:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80184ae:	68fb      	ldr	r3, [r7, #12]
 80184b0:	895b      	ldrh	r3, [r3, #10]
 80184b2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80184b4:	429a      	cmp	r2, r3
 80184b6:	d906      	bls.n	80184c6 <ip4_frag+0x10e>
 80184b8:	4b5b      	ldr	r3, [pc, #364]	; (8018628 <ip4_frag+0x270>)
 80184ba:	f240 322d 	movw	r2, #813	; 0x32d
 80184be:	495e      	ldr	r1, [pc, #376]	; (8018638 <ip4_frag+0x280>)
 80184c0:	485b      	ldr	r0, [pc, #364]	; (8018630 <ip4_frag+0x278>)
 80184c2:	f001 f9fd 	bl	80198c0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80184c6:	8bfa      	ldrh	r2, [r7, #30]
 80184c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80184cc:	4293      	cmp	r3, r2
 80184ce:	bf28      	it	cs
 80184d0:	4613      	movcs	r3, r2
 80184d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80184d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d105      	bne.n	80184ea <ip4_frag+0x132>
        poff = 0;
 80184de:	2300      	movs	r3, #0
 80184e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80184e2:	68fb      	ldr	r3, [r7, #12]
 80184e4:	681b      	ldr	r3, [r3, #0]
 80184e6:	60fb      	str	r3, [r7, #12]
        continue;
 80184e8:	e041      	b.n	801856e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80184ea:	f7ff ff0d 	bl	8018308 <ip_frag_alloc_pbuf_custom_ref>
 80184ee:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80184f0:	69bb      	ldr	r3, [r7, #24]
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d103      	bne.n	80184fe <ip4_frag+0x146>
        pbuf_free(rambuf);
 80184f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80184f8:	f7f6 fd08 	bl	800ef0c <pbuf_free>
        goto memerr;
 80184fc:	e08e      	b.n	801861c <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80184fe:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018500:	68fb      	ldr	r3, [r7, #12]
 8018502:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018504:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018506:	4413      	add	r3, r2
 8018508:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801850c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018510:	9201      	str	r2, [sp, #4]
 8018512:	9300      	str	r3, [sp, #0]
 8018514:	4603      	mov	r3, r0
 8018516:	2241      	movs	r2, #65	; 0x41
 8018518:	2000      	movs	r0, #0
 801851a:	f7f6 fb3d 	bl	800eb98 <pbuf_alloced_custom>
 801851e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018520:	697b      	ldr	r3, [r7, #20]
 8018522:	2b00      	cmp	r3, #0
 8018524:	d106      	bne.n	8018534 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018526:	69b8      	ldr	r0, [r7, #24]
 8018528:	f7ff fef6 	bl	8018318 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801852c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801852e:	f7f6 fced 	bl	800ef0c <pbuf_free>
        goto memerr;
 8018532:	e073      	b.n	801861c <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8018534:	68f8      	ldr	r0, [r7, #12]
 8018536:	f7f6 fd8f 	bl	800f058 <pbuf_ref>
      pcr->original = p;
 801853a:	69bb      	ldr	r3, [r7, #24]
 801853c:	68fa      	ldr	r2, [r7, #12]
 801853e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018540:	69bb      	ldr	r3, [r7, #24]
 8018542:	4a3e      	ldr	r2, [pc, #248]	; (801863c <ip4_frag+0x284>)
 8018544:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018546:	6979      	ldr	r1, [r7, #20]
 8018548:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801854a:	f7f6 fdad 	bl	800f0a8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801854e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018552:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018556:	1ad3      	subs	r3, r2, r3
 8018558:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801855c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018560:	2b00      	cmp	r3, #0
 8018562:	d004      	beq.n	801856e <ip4_frag+0x1b6>
        poff = 0;
 8018564:	2300      	movs	r3, #0
 8018566:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801856e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018572:	2b00      	cmp	r3, #0
 8018574:	d196      	bne.n	80184a4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018576:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018578:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801857c:	4413      	add	r3, r2
 801857e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018580:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018584:	68bb      	ldr	r3, [r7, #8]
 8018586:	8c1b      	ldrh	r3, [r3, #32]
 8018588:	3b14      	subs	r3, #20
 801858a:	429a      	cmp	r2, r3
 801858c:	bfd4      	ite	le
 801858e:	2301      	movle	r3, #1
 8018590:	2300      	movgt	r3, #0
 8018592:	b2db      	uxtb	r3, r3
 8018594:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018596:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801859a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801859e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80185a0:	6a3b      	ldr	r3, [r7, #32]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d002      	beq.n	80185ac <ip4_frag+0x1f4>
 80185a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d003      	beq.n	80185b4 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80185ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80185ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80185b2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80185b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80185b6:	4618      	mov	r0, r3
 80185b8:	f7f5 f978 	bl	800d8ac <lwip_htons>
 80185bc:	4603      	mov	r3, r0
 80185be:	461a      	mov	r2, r3
 80185c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185c2:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80185c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80185c6:	3314      	adds	r3, #20
 80185c8:	b29b      	uxth	r3, r3
 80185ca:	4618      	mov	r0, r3
 80185cc:	f7f5 f96e 	bl	800d8ac <lwip_htons>
 80185d0:	4603      	mov	r3, r0
 80185d2:	461a      	mov	r2, r3
 80185d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185d6:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80185d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185da:	2200      	movs	r2, #0
 80185dc:	729a      	strb	r2, [r3, #10]
 80185de:	2200      	movs	r2, #0
 80185e0:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80185e2:	68bb      	ldr	r3, [r7, #8]
 80185e4:	695b      	ldr	r3, [r3, #20]
 80185e6:	687a      	ldr	r2, [r7, #4]
 80185e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80185ea:	68b8      	ldr	r0, [r7, #8]
 80185ec:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80185ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80185f0:	f7f6 fc8c 	bl	800ef0c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80185f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80185f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80185fa:	1ad3      	subs	r3, r2, r3
 80185fc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018600:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018604:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018606:	4413      	add	r3, r2
 8018608:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801860c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018610:	2b00      	cmp	r3, #0
 8018612:	f47f af1a 	bne.w	801844a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018616:	2300      	movs	r3, #0
 8018618:	e002      	b.n	8018620 <ip4_frag+0x268>
      goto memerr;
 801861a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801861c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018620:	4618      	mov	r0, r3
 8018622:	3748      	adds	r7, #72	; 0x48
 8018624:	46bd      	mov	sp, r7
 8018626:	bd80      	pop	{r7, pc}
 8018628:	08020750 	.word	0x08020750
 801862c:	0802092c 	.word	0x0802092c
 8018630:	08020798 	.word	0x08020798
 8018634:	08020948 	.word	0x08020948
 8018638:	08020968 	.word	0x08020968
 801863c:	08018351 	.word	0x08018351

08018640 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018640:	b580      	push	{r7, lr}
 8018642:	b086      	sub	sp, #24
 8018644:	af00      	add	r7, sp, #0
 8018646:	6078      	str	r0, [r7, #4]
 8018648:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801864a:	230e      	movs	r3, #14
 801864c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	895b      	ldrh	r3, [r3, #10]
 8018652:	2b0e      	cmp	r3, #14
 8018654:	d96e      	bls.n	8018734 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	7bdb      	ldrb	r3, [r3, #15]
 801865a:	2b00      	cmp	r3, #0
 801865c:	d106      	bne.n	801866c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801865e:	683b      	ldr	r3, [r7, #0]
 8018660:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018664:	3301      	adds	r3, #1
 8018666:	b2da      	uxtb	r2, r3
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	685b      	ldr	r3, [r3, #4]
 8018670:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018672:	693b      	ldr	r3, [r7, #16]
 8018674:	7b1a      	ldrb	r2, [r3, #12]
 8018676:	7b5b      	ldrb	r3, [r3, #13]
 8018678:	021b      	lsls	r3, r3, #8
 801867a:	4313      	orrs	r3, r2
 801867c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801867e:	693b      	ldr	r3, [r7, #16]
 8018680:	781b      	ldrb	r3, [r3, #0]
 8018682:	f003 0301 	and.w	r3, r3, #1
 8018686:	2b00      	cmp	r3, #0
 8018688:	d023      	beq.n	80186d2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801868a:	693b      	ldr	r3, [r7, #16]
 801868c:	781b      	ldrb	r3, [r3, #0]
 801868e:	2b01      	cmp	r3, #1
 8018690:	d10f      	bne.n	80186b2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018692:	693b      	ldr	r3, [r7, #16]
 8018694:	785b      	ldrb	r3, [r3, #1]
 8018696:	2b00      	cmp	r3, #0
 8018698:	d11b      	bne.n	80186d2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801869a:	693b      	ldr	r3, [r7, #16]
 801869c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801869e:	2b5e      	cmp	r3, #94	; 0x5e
 80186a0:	d117      	bne.n	80186d2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	7b5b      	ldrb	r3, [r3, #13]
 80186a6:	f043 0310 	orr.w	r3, r3, #16
 80186aa:	b2da      	uxtb	r2, r3
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	735a      	strb	r2, [r3, #13]
 80186b0:	e00f      	b.n	80186d2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80186b2:	693b      	ldr	r3, [r7, #16]
 80186b4:	2206      	movs	r2, #6
 80186b6:	4928      	ldr	r1, [pc, #160]	; (8018758 <ethernet_input+0x118>)
 80186b8:	4618      	mov	r0, r3
 80186ba:	f000 fab2 	bl	8018c22 <memcmp>
 80186be:	4603      	mov	r3, r0
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d106      	bne.n	80186d2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	7b5b      	ldrb	r3, [r3, #13]
 80186c8:	f043 0308 	orr.w	r3, r3, #8
 80186cc:	b2da      	uxtb	r2, r3
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80186d2:	89fb      	ldrh	r3, [r7, #14]
 80186d4:	2b08      	cmp	r3, #8
 80186d6:	d003      	beq.n	80186e0 <ethernet_input+0xa0>
 80186d8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80186dc:	d014      	beq.n	8018708 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80186de:	e032      	b.n	8018746 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80186e0:	683b      	ldr	r3, [r7, #0]
 80186e2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80186e6:	f003 0308 	and.w	r3, r3, #8
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d024      	beq.n	8018738 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80186ee:	8afb      	ldrh	r3, [r7, #22]
 80186f0:	4619      	mov	r1, r3
 80186f2:	6878      	ldr	r0, [r7, #4]
 80186f4:	f7f6 fb84 	bl	800ee00 <pbuf_remove_header>
 80186f8:	4603      	mov	r3, r0
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d11e      	bne.n	801873c <ethernet_input+0xfc>
        ip4_input(p, netif);
 80186fe:	6839      	ldr	r1, [r7, #0]
 8018700:	6878      	ldr	r0, [r7, #4]
 8018702:	f7fe ff2d 	bl	8017560 <ip4_input>
      break;
 8018706:	e013      	b.n	8018730 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018708:	683b      	ldr	r3, [r7, #0]
 801870a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801870e:	f003 0308 	and.w	r3, r3, #8
 8018712:	2b00      	cmp	r3, #0
 8018714:	d014      	beq.n	8018740 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018716:	8afb      	ldrh	r3, [r7, #22]
 8018718:	4619      	mov	r1, r3
 801871a:	6878      	ldr	r0, [r7, #4]
 801871c:	f7f6 fb70 	bl	800ee00 <pbuf_remove_header>
 8018720:	4603      	mov	r3, r0
 8018722:	2b00      	cmp	r3, #0
 8018724:	d10e      	bne.n	8018744 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018726:	6839      	ldr	r1, [r7, #0]
 8018728:	6878      	ldr	r0, [r7, #4]
 801872a:	f7fe f8cd 	bl	80168c8 <etharp_input>
      break;
 801872e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018730:	2300      	movs	r3, #0
 8018732:	e00c      	b.n	801874e <ethernet_input+0x10e>
    goto free_and_return;
 8018734:	bf00      	nop
 8018736:	e006      	b.n	8018746 <ethernet_input+0x106>
        goto free_and_return;
 8018738:	bf00      	nop
 801873a:	e004      	b.n	8018746 <ethernet_input+0x106>
        goto free_and_return;
 801873c:	bf00      	nop
 801873e:	e002      	b.n	8018746 <ethernet_input+0x106>
        goto free_and_return;
 8018740:	bf00      	nop
 8018742:	e000      	b.n	8018746 <ethernet_input+0x106>
        goto free_and_return;
 8018744:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018746:	6878      	ldr	r0, [r7, #4]
 8018748:	f7f6 fbe0 	bl	800ef0c <pbuf_free>
  return ERR_OK;
 801874c:	2300      	movs	r3, #0
}
 801874e:	4618      	mov	r0, r3
 8018750:	3718      	adds	r7, #24
 8018752:	46bd      	mov	sp, r7
 8018754:	bd80      	pop	{r7, pc}
 8018756:	bf00      	nop
 8018758:	08020b3c 	.word	0x08020b3c

0801875c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801875c:	b580      	push	{r7, lr}
 801875e:	b086      	sub	sp, #24
 8018760:	af00      	add	r7, sp, #0
 8018762:	60f8      	str	r0, [r7, #12]
 8018764:	60b9      	str	r1, [r7, #8]
 8018766:	607a      	str	r2, [r7, #4]
 8018768:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801876a:	8c3b      	ldrh	r3, [r7, #32]
 801876c:	4618      	mov	r0, r3
 801876e:	f7f5 f89d 	bl	800d8ac <lwip_htons>
 8018772:	4603      	mov	r3, r0
 8018774:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018776:	210e      	movs	r1, #14
 8018778:	68b8      	ldr	r0, [r7, #8]
 801877a:	f7f6 fb31 	bl	800ede0 <pbuf_add_header>
 801877e:	4603      	mov	r3, r0
 8018780:	2b00      	cmp	r3, #0
 8018782:	d125      	bne.n	80187d0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018784:	68bb      	ldr	r3, [r7, #8]
 8018786:	685b      	ldr	r3, [r3, #4]
 8018788:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801878a:	693b      	ldr	r3, [r7, #16]
 801878c:	8afa      	ldrh	r2, [r7, #22]
 801878e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018790:	693b      	ldr	r3, [r7, #16]
 8018792:	2206      	movs	r2, #6
 8018794:	6839      	ldr	r1, [r7, #0]
 8018796:	4618      	mov	r0, r3
 8018798:	f000 fa52 	bl	8018c40 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801879c:	693b      	ldr	r3, [r7, #16]
 801879e:	3306      	adds	r3, #6
 80187a0:	2206      	movs	r2, #6
 80187a2:	6879      	ldr	r1, [r7, #4]
 80187a4:	4618      	mov	r0, r3
 80187a6:	f000 fa4b 	bl	8018c40 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80187aa:	68fb      	ldr	r3, [r7, #12]
 80187ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80187b0:	2b06      	cmp	r3, #6
 80187b2:	d006      	beq.n	80187c2 <ethernet_output+0x66>
 80187b4:	4b0a      	ldr	r3, [pc, #40]	; (80187e0 <ethernet_output+0x84>)
 80187b6:	f240 1233 	movw	r2, #307	; 0x133
 80187ba:	490a      	ldr	r1, [pc, #40]	; (80187e4 <ethernet_output+0x88>)
 80187bc:	480a      	ldr	r0, [pc, #40]	; (80187e8 <ethernet_output+0x8c>)
 80187be:	f001 f87f 	bl	80198c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	699b      	ldr	r3, [r3, #24]
 80187c6:	68b9      	ldr	r1, [r7, #8]
 80187c8:	68f8      	ldr	r0, [r7, #12]
 80187ca:	4798      	blx	r3
 80187cc:	4603      	mov	r3, r0
 80187ce:	e002      	b.n	80187d6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80187d0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80187d2:	f06f 0301 	mvn.w	r3, #1
}
 80187d6:	4618      	mov	r0, r3
 80187d8:	3718      	adds	r7, #24
 80187da:	46bd      	mov	sp, r7
 80187dc:	bd80      	pop	{r7, pc}
 80187de:	bf00      	nop
 80187e0:	08020978 	.word	0x08020978
 80187e4:	080209b0 	.word	0x080209b0
 80187e8:	080209e4 	.word	0x080209e4

080187ec <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80187ec:	b580      	push	{r7, lr}
 80187ee:	b086      	sub	sp, #24
 80187f0:	af00      	add	r7, sp, #0
 80187f2:	6078      	str	r0, [r7, #4]
 80187f4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80187f6:	683b      	ldr	r3, [r7, #0]
 80187f8:	60bb      	str	r3, [r7, #8]
 80187fa:	2304      	movs	r3, #4
 80187fc:	60fb      	str	r3, [r7, #12]
 80187fe:	2300      	movs	r3, #0
 8018800:	613b      	str	r3, [r7, #16]
 8018802:	2300      	movs	r3, #0
 8018804:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8018806:	f107 0308 	add.w	r3, r7, #8
 801880a:	2100      	movs	r1, #0
 801880c:	4618      	mov	r0, r3
 801880e:	f7f0 f8e4 	bl	80089da <osMessageCreate>
 8018812:	4602      	mov	r2, r0
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	681b      	ldr	r3, [r3, #0]
 801881c:	2b00      	cmp	r3, #0
 801881e:	d102      	bne.n	8018826 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8018820:	f04f 33ff 	mov.w	r3, #4294967295
 8018824:	e000      	b.n	8018828 <sys_mbox_new+0x3c>

  return ERR_OK;
 8018826:	2300      	movs	r3, #0
}
 8018828:	4618      	mov	r0, r3
 801882a:	3718      	adds	r7, #24
 801882c:	46bd      	mov	sp, r7
 801882e:	bd80      	pop	{r7, pc}

08018830 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018830:	b580      	push	{r7, lr}
 8018832:	b082      	sub	sp, #8
 8018834:	af00      	add	r7, sp, #0
 8018836:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	681b      	ldr	r3, [r3, #0]
 801883c:	4618      	mov	r0, r3
 801883e:	f7f0 f9a9 	bl	8008b94 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	681b      	ldr	r3, [r3, #0]
 8018846:	4618      	mov	r0, r3
 8018848:	f7f0 f9ba 	bl	8008bc0 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801884c:	bf00      	nop
 801884e:	3708      	adds	r7, #8
 8018850:	46bd      	mov	sp, r7
 8018852:	bd80      	pop	{r7, pc}

08018854 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018854:	b580      	push	{r7, lr}
 8018856:	b084      	sub	sp, #16
 8018858:	af00      	add	r7, sp, #0
 801885a:	6078      	str	r0, [r7, #4]
 801885c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	6839      	ldr	r1, [r7, #0]
 8018864:	2200      	movs	r2, #0
 8018866:	4618      	mov	r0, r3
 8018868:	f7f0 f8e0 	bl	8008a2c <osMessagePut>
 801886c:	4603      	mov	r3, r0
 801886e:	2b00      	cmp	r3, #0
 8018870:	d102      	bne.n	8018878 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018872:	2300      	movs	r3, #0
 8018874:	73fb      	strb	r3, [r7, #15]
 8018876:	e001      	b.n	801887c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018878:	23ff      	movs	r3, #255	; 0xff
 801887a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801887c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018880:	4618      	mov	r0, r3
 8018882:	3710      	adds	r7, #16
 8018884:	46bd      	mov	sp, r7
 8018886:	bd80      	pop	{r7, pc}

08018888 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018888:	b580      	push	{r7, lr}
 801888a:	b08c      	sub	sp, #48	; 0x30
 801888c:	af00      	add	r7, sp, #0
 801888e:	61f8      	str	r0, [r7, #28]
 8018890:	61b9      	str	r1, [r7, #24]
 8018892:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018894:	f7ef fede 	bl	8008654 <osKernelSysTick>
 8018898:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801889a:	697b      	ldr	r3, [r7, #20]
 801889c:	2b00      	cmp	r3, #0
 801889e:	d017      	beq.n	80188d0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80188a0:	69fb      	ldr	r3, [r7, #28]
 80188a2:	6819      	ldr	r1, [r3, #0]
 80188a4:	f107 0320 	add.w	r3, r7, #32
 80188a8:	697a      	ldr	r2, [r7, #20]
 80188aa:	4618      	mov	r0, r3
 80188ac:	f7f0 f8fe 	bl	8008aac <osMessageGet>

    if(event.status == osEventMessage)
 80188b0:	6a3b      	ldr	r3, [r7, #32]
 80188b2:	2b10      	cmp	r3, #16
 80188b4:	d109      	bne.n	80188ca <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80188b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188b8:	461a      	mov	r2, r3
 80188ba:	69bb      	ldr	r3, [r7, #24]
 80188bc:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80188be:	f7ef fec9 	bl	8008654 <osKernelSysTick>
 80188c2:	4602      	mov	r2, r0
 80188c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188c6:	1ad3      	subs	r3, r2, r3
 80188c8:	e019      	b.n	80188fe <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80188ca:	f04f 33ff 	mov.w	r3, #4294967295
 80188ce:	e016      	b.n	80188fe <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80188d0:	69fb      	ldr	r3, [r7, #28]
 80188d2:	6819      	ldr	r1, [r3, #0]
 80188d4:	463b      	mov	r3, r7
 80188d6:	f04f 32ff 	mov.w	r2, #4294967295
 80188da:	4618      	mov	r0, r3
 80188dc:	f7f0 f8e6 	bl	8008aac <osMessageGet>
 80188e0:	f107 0320 	add.w	r3, r7, #32
 80188e4:	463a      	mov	r2, r7
 80188e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80188e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80188ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188ee:	461a      	mov	r2, r3
 80188f0:	69bb      	ldr	r3, [r7, #24]
 80188f2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80188f4:	f7ef feae 	bl	8008654 <osKernelSysTick>
 80188f8:	4602      	mov	r2, r0
 80188fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188fc:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80188fe:	4618      	mov	r0, r3
 8018900:	3730      	adds	r7, #48	; 0x30
 8018902:	46bd      	mov	sp, r7
 8018904:	bd80      	pop	{r7, pc}

08018906 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018906:	b580      	push	{r7, lr}
 8018908:	b086      	sub	sp, #24
 801890a:	af00      	add	r7, sp, #0
 801890c:	6078      	str	r0, [r7, #4]
 801890e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	6819      	ldr	r1, [r3, #0]
 8018914:	f107 030c 	add.w	r3, r7, #12
 8018918:	2200      	movs	r2, #0
 801891a:	4618      	mov	r0, r3
 801891c:	f7f0 f8c6 	bl	8008aac <osMessageGet>

  if(event.status == osEventMessage)
 8018920:	68fb      	ldr	r3, [r7, #12]
 8018922:	2b10      	cmp	r3, #16
 8018924:	d105      	bne.n	8018932 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8018926:	693b      	ldr	r3, [r7, #16]
 8018928:	461a      	mov	r2, r3
 801892a:	683b      	ldr	r3, [r7, #0]
 801892c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801892e:	2300      	movs	r3, #0
 8018930:	e001      	b.n	8018936 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018932:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8018936:	4618      	mov	r0, r3
 8018938:	3718      	adds	r7, #24
 801893a:	46bd      	mov	sp, r7
 801893c:	bd80      	pop	{r7, pc}

0801893e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801893e:	b480      	push	{r7}
 8018940:	b083      	sub	sp, #12
 8018942:	af00      	add	r7, sp, #0
 8018944:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	2b00      	cmp	r3, #0
 801894c:	d101      	bne.n	8018952 <sys_mbox_valid+0x14>
    return 0;
 801894e:	2300      	movs	r3, #0
 8018950:	e000      	b.n	8018954 <sys_mbox_valid+0x16>
  else
    return 1;
 8018952:	2301      	movs	r3, #1
}
 8018954:	4618      	mov	r0, r3
 8018956:	370c      	adds	r7, #12
 8018958:	46bd      	mov	sp, r7
 801895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801895e:	4770      	bx	lr

08018960 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018960:	b480      	push	{r7}
 8018962:	b083      	sub	sp, #12
 8018964:	af00      	add	r7, sp, #0
 8018966:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	2200      	movs	r2, #0
 801896c:	601a      	str	r2, [r3, #0]
}
 801896e:	bf00      	nop
 8018970:	370c      	adds	r7, #12
 8018972:	46bd      	mov	sp, r7
 8018974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018978:	4770      	bx	lr

0801897a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801897a:	b580      	push	{r7, lr}
 801897c:	b084      	sub	sp, #16
 801897e:	af00      	add	r7, sp, #0
 8018980:	6078      	str	r0, [r7, #4]
 8018982:	460b      	mov	r3, r1
 8018984:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8018986:	2300      	movs	r3, #0
 8018988:	60bb      	str	r3, [r7, #8]
 801898a:	2300      	movs	r3, #0
 801898c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801898e:	f107 0308 	add.w	r3, r7, #8
 8018992:	2101      	movs	r1, #1
 8018994:	4618      	mov	r0, r3
 8018996:	f7ef ff55 	bl	8008844 <osSemaphoreCreate>
 801899a:	4602      	mov	r2, r0
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d102      	bne.n	80189ae <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80189a8:	f04f 33ff 	mov.w	r3, #4294967295
 80189ac:	e009      	b.n	80189c2 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80189ae:	78fb      	ldrb	r3, [r7, #3]
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d105      	bne.n	80189c0 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	2100      	movs	r1, #0
 80189ba:	4618      	mov	r0, r3
 80189bc:	f7ef ff76 	bl	80088ac <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80189c0:	2300      	movs	r3, #0
}
 80189c2:	4618      	mov	r0, r3
 80189c4:	3710      	adds	r7, #16
 80189c6:	46bd      	mov	sp, r7
 80189c8:	bd80      	pop	{r7, pc}

080189ca <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80189ca:	b580      	push	{r7, lr}
 80189cc:	b084      	sub	sp, #16
 80189ce:	af00      	add	r7, sp, #0
 80189d0:	6078      	str	r0, [r7, #4]
 80189d2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80189d4:	f7ef fe3e 	bl	8008654 <osKernelSysTick>
 80189d8:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80189da:	683b      	ldr	r3, [r7, #0]
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d011      	beq.n	8018a04 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	6839      	ldr	r1, [r7, #0]
 80189e6:	4618      	mov	r0, r3
 80189e8:	f7ef ff60 	bl	80088ac <osSemaphoreWait>
 80189ec:	4603      	mov	r3, r0
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d105      	bne.n	80189fe <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80189f2:	f7ef fe2f 	bl	8008654 <osKernelSysTick>
 80189f6:	4602      	mov	r2, r0
 80189f8:	68fb      	ldr	r3, [r7, #12]
 80189fa:	1ad3      	subs	r3, r2, r3
 80189fc:	e012      	b.n	8018a24 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80189fe:	f04f 33ff 	mov.w	r3, #4294967295
 8018a02:	e00f      	b.n	8018a24 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8018a04:	bf00      	nop
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	f04f 31ff 	mov.w	r1, #4294967295
 8018a0e:	4618      	mov	r0, r3
 8018a10:	f7ef ff4c 	bl	80088ac <osSemaphoreWait>
 8018a14:	4603      	mov	r3, r0
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d1f5      	bne.n	8018a06 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8018a1a:	f7ef fe1b 	bl	8008654 <osKernelSysTick>
 8018a1e:	4602      	mov	r2, r0
 8018a20:	68fb      	ldr	r3, [r7, #12]
 8018a22:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018a24:	4618      	mov	r0, r3
 8018a26:	3710      	adds	r7, #16
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	bd80      	pop	{r7, pc}

08018a2c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018a2c:	b580      	push	{r7, lr}
 8018a2e:	b082      	sub	sp, #8
 8018a30:	af00      	add	r7, sp, #0
 8018a32:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	4618      	mov	r0, r3
 8018a3a:	f7ef ff85 	bl	8008948 <osSemaphoreRelease>
}
 8018a3e:	bf00      	nop
 8018a40:	3708      	adds	r7, #8
 8018a42:	46bd      	mov	sp, r7
 8018a44:	bd80      	pop	{r7, pc}

08018a46 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018a46:	b580      	push	{r7, lr}
 8018a48:	b082      	sub	sp, #8
 8018a4a:	af00      	add	r7, sp, #0
 8018a4c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	4618      	mov	r0, r3
 8018a54:	f7ef ffae 	bl	80089b4 <osSemaphoreDelete>
}
 8018a58:	bf00      	nop
 8018a5a:	3708      	adds	r7, #8
 8018a5c:	46bd      	mov	sp, r7
 8018a5e:	bd80      	pop	{r7, pc}

08018a60 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018a60:	b480      	push	{r7}
 8018a62:	b083      	sub	sp, #12
 8018a64:	af00      	add	r7, sp, #0
 8018a66:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d101      	bne.n	8018a74 <sys_sem_valid+0x14>
    return 0;
 8018a70:	2300      	movs	r3, #0
 8018a72:	e000      	b.n	8018a76 <sys_sem_valid+0x16>
  else
    return 1;
 8018a74:	2301      	movs	r3, #1
}
 8018a76:	4618      	mov	r0, r3
 8018a78:	370c      	adds	r7, #12
 8018a7a:	46bd      	mov	sp, r7
 8018a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a80:	4770      	bx	lr

08018a82 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018a82:	b480      	push	{r7}
 8018a84:	b083      	sub	sp, #12
 8018a86:	af00      	add	r7, sp, #0
 8018a88:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	2200      	movs	r2, #0
 8018a8e:	601a      	str	r2, [r3, #0]
}
 8018a90:	bf00      	nop
 8018a92:	370c      	adds	r7, #12
 8018a94:	46bd      	mov	sp, r7
 8018a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a9a:	4770      	bx	lr

08018a9c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018a9c:	b580      	push	{r7, lr}
 8018a9e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8018aa0:	4803      	ldr	r0, [pc, #12]	; (8018ab0 <sys_init+0x14>)
 8018aa2:	f7ef fe33 	bl	800870c <osMutexCreate>
 8018aa6:	4602      	mov	r2, r0
 8018aa8:	4b02      	ldr	r3, [pc, #8]	; (8018ab4 <sys_init+0x18>)
 8018aaa:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018aac:	bf00      	nop
 8018aae:	bd80      	pop	{r7, pc}
 8018ab0:	08020b4c 	.word	0x08020b4c
 8018ab4:	2000fd14 	.word	0x2000fd14

08018ab8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018ab8:	b580      	push	{r7, lr}
 8018aba:	b084      	sub	sp, #16
 8018abc:	af00      	add	r7, sp, #0
 8018abe:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018ac0:	2300      	movs	r3, #0
 8018ac2:	60bb      	str	r3, [r7, #8]
 8018ac4:	2300      	movs	r3, #0
 8018ac6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018ac8:	f107 0308 	add.w	r3, r7, #8
 8018acc:	4618      	mov	r0, r3
 8018ace:	f7ef fe1d 	bl	800870c <osMutexCreate>
 8018ad2:	4602      	mov	r2, r0
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d102      	bne.n	8018ae6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8018ae4:	e000      	b.n	8018ae8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018ae6:	2300      	movs	r3, #0
}
 8018ae8:	4618      	mov	r0, r3
 8018aea:	3710      	adds	r7, #16
 8018aec:	46bd      	mov	sp, r7
 8018aee:	bd80      	pop	{r7, pc}

08018af0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018af0:	b580      	push	{r7, lr}
 8018af2:	b082      	sub	sp, #8
 8018af4:	af00      	add	r7, sp, #0
 8018af6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	681b      	ldr	r3, [r3, #0]
 8018afc:	f04f 31ff 	mov.w	r1, #4294967295
 8018b00:	4618      	mov	r0, r3
 8018b02:	f7ef fe1b 	bl	800873c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018b06:	bf00      	nop
 8018b08:	3708      	adds	r7, #8
 8018b0a:	46bd      	mov	sp, r7
 8018b0c:	bd80      	pop	{r7, pc}

08018b0e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018b0e:	b580      	push	{r7, lr}
 8018b10:	b082      	sub	sp, #8
 8018b12:	af00      	add	r7, sp, #0
 8018b14:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	681b      	ldr	r3, [r3, #0]
 8018b1a:	4618      	mov	r0, r3
 8018b1c:	f7ef fe5c 	bl	80087d8 <osMutexRelease>
}
 8018b20:	bf00      	nop
 8018b22:	3708      	adds	r7, #8
 8018b24:	46bd      	mov	sp, r7
 8018b26:	bd80      	pop	{r7, pc}

08018b28 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018b28:	b580      	push	{r7, lr}
 8018b2a:	b08c      	sub	sp, #48	; 0x30
 8018b2c:	af00      	add	r7, sp, #0
 8018b2e:	60f8      	str	r0, [r7, #12]
 8018b30:	60b9      	str	r1, [r7, #8]
 8018b32:	607a      	str	r2, [r7, #4]
 8018b34:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018b36:	f107 0314 	add.w	r3, r7, #20
 8018b3a:	2200      	movs	r2, #0
 8018b3c:	601a      	str	r2, [r3, #0]
 8018b3e:	605a      	str	r2, [r3, #4]
 8018b40:	609a      	str	r2, [r3, #8]
 8018b42:	60da      	str	r2, [r3, #12]
 8018b44:	611a      	str	r2, [r3, #16]
 8018b46:	615a      	str	r2, [r3, #20]
 8018b48:	619a      	str	r2, [r3, #24]
 8018b4a:	68fb      	ldr	r3, [r7, #12]
 8018b4c:	617b      	str	r3, [r7, #20]
 8018b4e:	68bb      	ldr	r3, [r7, #8]
 8018b50:	61bb      	str	r3, [r7, #24]
 8018b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b54:	b21b      	sxth	r3, r3
 8018b56:	83bb      	strh	r3, [r7, #28]
 8018b58:	683b      	ldr	r3, [r7, #0]
 8018b5a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018b5c:	f107 0314 	add.w	r3, r7, #20
 8018b60:	6879      	ldr	r1, [r7, #4]
 8018b62:	4618      	mov	r0, r3
 8018b64:	f7ef fd86 	bl	8008674 <osThreadCreate>
 8018b68:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018b6a:	4618      	mov	r0, r3
 8018b6c:	3730      	adds	r7, #48	; 0x30
 8018b6e:	46bd      	mov	sp, r7
 8018b70:	bd80      	pop	{r7, pc}
	...

08018b74 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018b74:	b580      	push	{r7, lr}
 8018b76:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018b78:	4b04      	ldr	r3, [pc, #16]	; (8018b8c <sys_arch_protect+0x18>)
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8018b80:	4618      	mov	r0, r3
 8018b82:	f7ef fddb 	bl	800873c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018b86:	2301      	movs	r3, #1
}
 8018b88:	4618      	mov	r0, r3
 8018b8a:	bd80      	pop	{r7, pc}
 8018b8c:	2000fd14 	.word	0x2000fd14

08018b90 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018b90:	b580      	push	{r7, lr}
 8018b92:	b082      	sub	sp, #8
 8018b94:	af00      	add	r7, sp, #0
 8018b96:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018b98:	4b04      	ldr	r3, [pc, #16]	; (8018bac <sys_arch_unprotect+0x1c>)
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	4618      	mov	r0, r3
 8018b9e:	f7ef fe1b 	bl	80087d8 <osMutexRelease>
}
 8018ba2:	bf00      	nop
 8018ba4:	3708      	adds	r7, #8
 8018ba6:	46bd      	mov	sp, r7
 8018ba8:	bd80      	pop	{r7, pc}
 8018baa:	bf00      	nop
 8018bac:	2000fd14 	.word	0x2000fd14

08018bb0 <__libc_init_array>:
 8018bb0:	b570      	push	{r4, r5, r6, lr}
 8018bb2:	4e0d      	ldr	r6, [pc, #52]	; (8018be8 <__libc_init_array+0x38>)
 8018bb4:	4c0d      	ldr	r4, [pc, #52]	; (8018bec <__libc_init_array+0x3c>)
 8018bb6:	1ba4      	subs	r4, r4, r6
 8018bb8:	10a4      	asrs	r4, r4, #2
 8018bba:	2500      	movs	r5, #0
 8018bbc:	42a5      	cmp	r5, r4
 8018bbe:	d109      	bne.n	8018bd4 <__libc_init_array+0x24>
 8018bc0:	4e0b      	ldr	r6, [pc, #44]	; (8018bf0 <__libc_init_array+0x40>)
 8018bc2:	4c0c      	ldr	r4, [pc, #48]	; (8018bf4 <__libc_init_array+0x44>)
 8018bc4:	f004 f9f4 	bl	801cfb0 <_init>
 8018bc8:	1ba4      	subs	r4, r4, r6
 8018bca:	10a4      	asrs	r4, r4, #2
 8018bcc:	2500      	movs	r5, #0
 8018bce:	42a5      	cmp	r5, r4
 8018bd0:	d105      	bne.n	8018bde <__libc_init_array+0x2e>
 8018bd2:	bd70      	pop	{r4, r5, r6, pc}
 8018bd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018bd8:	4798      	blx	r3
 8018bda:	3501      	adds	r5, #1
 8018bdc:	e7ee      	b.n	8018bbc <__libc_init_array+0xc>
 8018bde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018be2:	4798      	blx	r3
 8018be4:	3501      	adds	r5, #1
 8018be6:	e7f2      	b.n	8018bce <__libc_init_array+0x1e>
 8018be8:	08020e78 	.word	0x08020e78
 8018bec:	08020e78 	.word	0x08020e78
 8018bf0:	08020e78 	.word	0x08020e78
 8018bf4:	08020e7c 	.word	0x08020e7c

08018bf8 <__locale_ctype_ptr_l>:
 8018bf8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018bfc:	4770      	bx	lr

08018bfe <__ascii_mbtowc>:
 8018bfe:	b082      	sub	sp, #8
 8018c00:	b901      	cbnz	r1, 8018c04 <__ascii_mbtowc+0x6>
 8018c02:	a901      	add	r1, sp, #4
 8018c04:	b142      	cbz	r2, 8018c18 <__ascii_mbtowc+0x1a>
 8018c06:	b14b      	cbz	r3, 8018c1c <__ascii_mbtowc+0x1e>
 8018c08:	7813      	ldrb	r3, [r2, #0]
 8018c0a:	600b      	str	r3, [r1, #0]
 8018c0c:	7812      	ldrb	r2, [r2, #0]
 8018c0e:	1c10      	adds	r0, r2, #0
 8018c10:	bf18      	it	ne
 8018c12:	2001      	movne	r0, #1
 8018c14:	b002      	add	sp, #8
 8018c16:	4770      	bx	lr
 8018c18:	4610      	mov	r0, r2
 8018c1a:	e7fb      	b.n	8018c14 <__ascii_mbtowc+0x16>
 8018c1c:	f06f 0001 	mvn.w	r0, #1
 8018c20:	e7f8      	b.n	8018c14 <__ascii_mbtowc+0x16>

08018c22 <memcmp>:
 8018c22:	b530      	push	{r4, r5, lr}
 8018c24:	2400      	movs	r4, #0
 8018c26:	42a2      	cmp	r2, r4
 8018c28:	d101      	bne.n	8018c2e <memcmp+0xc>
 8018c2a:	2000      	movs	r0, #0
 8018c2c:	e007      	b.n	8018c3e <memcmp+0x1c>
 8018c2e:	5d03      	ldrb	r3, [r0, r4]
 8018c30:	3401      	adds	r4, #1
 8018c32:	190d      	adds	r5, r1, r4
 8018c34:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8018c38:	42ab      	cmp	r3, r5
 8018c3a:	d0f4      	beq.n	8018c26 <memcmp+0x4>
 8018c3c:	1b58      	subs	r0, r3, r5
 8018c3e:	bd30      	pop	{r4, r5, pc}

08018c40 <memcpy>:
 8018c40:	b510      	push	{r4, lr}
 8018c42:	1e43      	subs	r3, r0, #1
 8018c44:	440a      	add	r2, r1
 8018c46:	4291      	cmp	r1, r2
 8018c48:	d100      	bne.n	8018c4c <memcpy+0xc>
 8018c4a:	bd10      	pop	{r4, pc}
 8018c4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018c50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018c54:	e7f7      	b.n	8018c46 <memcpy+0x6>

08018c56 <memmove>:
 8018c56:	4288      	cmp	r0, r1
 8018c58:	b510      	push	{r4, lr}
 8018c5a:	eb01 0302 	add.w	r3, r1, r2
 8018c5e:	d807      	bhi.n	8018c70 <memmove+0x1a>
 8018c60:	1e42      	subs	r2, r0, #1
 8018c62:	4299      	cmp	r1, r3
 8018c64:	d00a      	beq.n	8018c7c <memmove+0x26>
 8018c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018c6a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018c6e:	e7f8      	b.n	8018c62 <memmove+0xc>
 8018c70:	4283      	cmp	r3, r0
 8018c72:	d9f5      	bls.n	8018c60 <memmove+0xa>
 8018c74:	1881      	adds	r1, r0, r2
 8018c76:	1ad2      	subs	r2, r2, r3
 8018c78:	42d3      	cmn	r3, r2
 8018c7a:	d100      	bne.n	8018c7e <memmove+0x28>
 8018c7c:	bd10      	pop	{r4, pc}
 8018c7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018c82:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8018c86:	e7f7      	b.n	8018c78 <memmove+0x22>

08018c88 <memset>:
 8018c88:	4402      	add	r2, r0
 8018c8a:	4603      	mov	r3, r0
 8018c8c:	4293      	cmp	r3, r2
 8018c8e:	d100      	bne.n	8018c92 <memset+0xa>
 8018c90:	4770      	bx	lr
 8018c92:	f803 1b01 	strb.w	r1, [r3], #1
 8018c96:	e7f9      	b.n	8018c8c <memset+0x4>

08018c98 <__cvt>:
 8018c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c9a:	ed2d 8b02 	vpush	{d8}
 8018c9e:	eeb0 8b40 	vmov.f64	d8, d0
 8018ca2:	b085      	sub	sp, #20
 8018ca4:	4617      	mov	r7, r2
 8018ca6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8018ca8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018caa:	ee18 2a90 	vmov	r2, s17
 8018cae:	f025 0520 	bic.w	r5, r5, #32
 8018cb2:	2a00      	cmp	r2, #0
 8018cb4:	bfb6      	itet	lt
 8018cb6:	222d      	movlt	r2, #45	; 0x2d
 8018cb8:	2200      	movge	r2, #0
 8018cba:	eeb1 8b40 	vneglt.f64	d8, d0
 8018cbe:	2d46      	cmp	r5, #70	; 0x46
 8018cc0:	460c      	mov	r4, r1
 8018cc2:	701a      	strb	r2, [r3, #0]
 8018cc4:	d004      	beq.n	8018cd0 <__cvt+0x38>
 8018cc6:	2d45      	cmp	r5, #69	; 0x45
 8018cc8:	d100      	bne.n	8018ccc <__cvt+0x34>
 8018cca:	3401      	adds	r4, #1
 8018ccc:	2102      	movs	r1, #2
 8018cce:	e000      	b.n	8018cd2 <__cvt+0x3a>
 8018cd0:	2103      	movs	r1, #3
 8018cd2:	ab03      	add	r3, sp, #12
 8018cd4:	9301      	str	r3, [sp, #4]
 8018cd6:	ab02      	add	r3, sp, #8
 8018cd8:	9300      	str	r3, [sp, #0]
 8018cda:	4622      	mov	r2, r4
 8018cdc:	4633      	mov	r3, r6
 8018cde:	eeb0 0b48 	vmov.f64	d0, d8
 8018ce2:	f001 fec9 	bl	801aa78 <_dtoa_r>
 8018ce6:	2d47      	cmp	r5, #71	; 0x47
 8018ce8:	d101      	bne.n	8018cee <__cvt+0x56>
 8018cea:	07fb      	lsls	r3, r7, #31
 8018cec:	d51e      	bpl.n	8018d2c <__cvt+0x94>
 8018cee:	2d46      	cmp	r5, #70	; 0x46
 8018cf0:	eb00 0304 	add.w	r3, r0, r4
 8018cf4:	d10c      	bne.n	8018d10 <__cvt+0x78>
 8018cf6:	7802      	ldrb	r2, [r0, #0]
 8018cf8:	2a30      	cmp	r2, #48	; 0x30
 8018cfa:	d107      	bne.n	8018d0c <__cvt+0x74>
 8018cfc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d04:	bf1c      	itt	ne
 8018d06:	f1c4 0401 	rsbne	r4, r4, #1
 8018d0a:	6034      	strne	r4, [r6, #0]
 8018d0c:	6832      	ldr	r2, [r6, #0]
 8018d0e:	4413      	add	r3, r2
 8018d10:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d18:	d007      	beq.n	8018d2a <__cvt+0x92>
 8018d1a:	2130      	movs	r1, #48	; 0x30
 8018d1c:	9a03      	ldr	r2, [sp, #12]
 8018d1e:	429a      	cmp	r2, r3
 8018d20:	d204      	bcs.n	8018d2c <__cvt+0x94>
 8018d22:	1c54      	adds	r4, r2, #1
 8018d24:	9403      	str	r4, [sp, #12]
 8018d26:	7011      	strb	r1, [r2, #0]
 8018d28:	e7f8      	b.n	8018d1c <__cvt+0x84>
 8018d2a:	9303      	str	r3, [sp, #12]
 8018d2c:	9b03      	ldr	r3, [sp, #12]
 8018d2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018d30:	1a1b      	subs	r3, r3, r0
 8018d32:	6013      	str	r3, [r2, #0]
 8018d34:	b005      	add	sp, #20
 8018d36:	ecbd 8b02 	vpop	{d8}
 8018d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018d3c <__exponent>:
 8018d3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018d3e:	2900      	cmp	r1, #0
 8018d40:	4604      	mov	r4, r0
 8018d42:	bfba      	itte	lt
 8018d44:	4249      	neglt	r1, r1
 8018d46:	232d      	movlt	r3, #45	; 0x2d
 8018d48:	232b      	movge	r3, #43	; 0x2b
 8018d4a:	2909      	cmp	r1, #9
 8018d4c:	f804 2b02 	strb.w	r2, [r4], #2
 8018d50:	7043      	strb	r3, [r0, #1]
 8018d52:	dd20      	ble.n	8018d96 <__exponent+0x5a>
 8018d54:	f10d 0307 	add.w	r3, sp, #7
 8018d58:	461f      	mov	r7, r3
 8018d5a:	260a      	movs	r6, #10
 8018d5c:	fb91 f5f6 	sdiv	r5, r1, r6
 8018d60:	fb06 1115 	mls	r1, r6, r5, r1
 8018d64:	3130      	adds	r1, #48	; 0x30
 8018d66:	2d09      	cmp	r5, #9
 8018d68:	f803 1c01 	strb.w	r1, [r3, #-1]
 8018d6c:	f103 32ff 	add.w	r2, r3, #4294967295
 8018d70:	4629      	mov	r1, r5
 8018d72:	dc09      	bgt.n	8018d88 <__exponent+0x4c>
 8018d74:	3130      	adds	r1, #48	; 0x30
 8018d76:	3b02      	subs	r3, #2
 8018d78:	f802 1c01 	strb.w	r1, [r2, #-1]
 8018d7c:	42bb      	cmp	r3, r7
 8018d7e:	4622      	mov	r2, r4
 8018d80:	d304      	bcc.n	8018d8c <__exponent+0x50>
 8018d82:	1a10      	subs	r0, r2, r0
 8018d84:	b003      	add	sp, #12
 8018d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d88:	4613      	mov	r3, r2
 8018d8a:	e7e7      	b.n	8018d5c <__exponent+0x20>
 8018d8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018d90:	f804 2b01 	strb.w	r2, [r4], #1
 8018d94:	e7f2      	b.n	8018d7c <__exponent+0x40>
 8018d96:	2330      	movs	r3, #48	; 0x30
 8018d98:	4419      	add	r1, r3
 8018d9a:	7083      	strb	r3, [r0, #2]
 8018d9c:	1d02      	adds	r2, r0, #4
 8018d9e:	70c1      	strb	r1, [r0, #3]
 8018da0:	e7ef      	b.n	8018d82 <__exponent+0x46>
 8018da2:	0000      	movs	r0, r0
 8018da4:	0000      	movs	r0, r0
	...

08018da8 <_printf_float>:
 8018da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dac:	b08d      	sub	sp, #52	; 0x34
 8018dae:	460c      	mov	r4, r1
 8018db0:	4616      	mov	r6, r2
 8018db2:	461f      	mov	r7, r3
 8018db4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8018db8:	4605      	mov	r5, r0
 8018dba:	f003 f84b 	bl	801be54 <_localeconv_r>
 8018dbe:	f8d0 b000 	ldr.w	fp, [r0]
 8018dc2:	4658      	mov	r0, fp
 8018dc4:	f7e7 fa3c 	bl	8000240 <strlen>
 8018dc8:	2300      	movs	r3, #0
 8018dca:	930a      	str	r3, [sp, #40]	; 0x28
 8018dcc:	f8d8 3000 	ldr.w	r3, [r8]
 8018dd0:	9005      	str	r0, [sp, #20]
 8018dd2:	3307      	adds	r3, #7
 8018dd4:	f023 0307 	bic.w	r3, r3, #7
 8018dd8:	f103 0108 	add.w	r1, r3, #8
 8018ddc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8018de0:	6822      	ldr	r2, [r4, #0]
 8018de2:	f8c8 1000 	str.w	r1, [r8]
 8018de6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018dea:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8018dee:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8019078 <_printf_float+0x2d0>
 8018df2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8018df6:	eeb0 6bc0 	vabs.f64	d6, d0
 8018dfa:	eeb4 6b47 	vcmp.f64	d6, d7
 8018dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e02:	dd24      	ble.n	8018e4e <_printf_float+0xa6>
 8018e04:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e0c:	d502      	bpl.n	8018e14 <_printf_float+0x6c>
 8018e0e:	232d      	movs	r3, #45	; 0x2d
 8018e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018e14:	499a      	ldr	r1, [pc, #616]	; (8019080 <_printf_float+0x2d8>)
 8018e16:	4b9b      	ldr	r3, [pc, #620]	; (8019084 <_printf_float+0x2dc>)
 8018e18:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8018e1c:	bf8c      	ite	hi
 8018e1e:	4688      	movhi	r8, r1
 8018e20:	4698      	movls	r8, r3
 8018e22:	f022 0204 	bic.w	r2, r2, #4
 8018e26:	2303      	movs	r3, #3
 8018e28:	6123      	str	r3, [r4, #16]
 8018e2a:	6022      	str	r2, [r4, #0]
 8018e2c:	f04f 0a00 	mov.w	sl, #0
 8018e30:	9700      	str	r7, [sp, #0]
 8018e32:	4633      	mov	r3, r6
 8018e34:	aa0b      	add	r2, sp, #44	; 0x2c
 8018e36:	4621      	mov	r1, r4
 8018e38:	4628      	mov	r0, r5
 8018e3a:	f000 f9e1 	bl	8019200 <_printf_common>
 8018e3e:	3001      	adds	r0, #1
 8018e40:	f040 8089 	bne.w	8018f56 <_printf_float+0x1ae>
 8018e44:	f04f 30ff 	mov.w	r0, #4294967295
 8018e48:	b00d      	add	sp, #52	; 0x34
 8018e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e4e:	eeb4 0b40 	vcmp.f64	d0, d0
 8018e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e56:	d702      	bvc.n	8018e5e <_printf_float+0xb6>
 8018e58:	498b      	ldr	r1, [pc, #556]	; (8019088 <_printf_float+0x2e0>)
 8018e5a:	4b8c      	ldr	r3, [pc, #560]	; (801908c <_printf_float+0x2e4>)
 8018e5c:	e7dc      	b.n	8018e18 <_printf_float+0x70>
 8018e5e:	6861      	ldr	r1, [r4, #4]
 8018e60:	1c4b      	adds	r3, r1, #1
 8018e62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018e66:	ab0a      	add	r3, sp, #40	; 0x28
 8018e68:	a809      	add	r0, sp, #36	; 0x24
 8018e6a:	d13b      	bne.n	8018ee4 <_printf_float+0x13c>
 8018e6c:	2106      	movs	r1, #6
 8018e6e:	6061      	str	r1, [r4, #4]
 8018e70:	f04f 0c00 	mov.w	ip, #0
 8018e74:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8018e78:	e9cd 0900 	strd	r0, r9, [sp]
 8018e7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8018e80:	6022      	str	r2, [r4, #0]
 8018e82:	6861      	ldr	r1, [r4, #4]
 8018e84:	4628      	mov	r0, r5
 8018e86:	f7ff ff07 	bl	8018c98 <__cvt>
 8018e8a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8018e8e:	2b47      	cmp	r3, #71	; 0x47
 8018e90:	4680      	mov	r8, r0
 8018e92:	d109      	bne.n	8018ea8 <_printf_float+0x100>
 8018e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e96:	1cd8      	adds	r0, r3, #3
 8018e98:	db02      	blt.n	8018ea0 <_printf_float+0xf8>
 8018e9a:	6862      	ldr	r2, [r4, #4]
 8018e9c:	4293      	cmp	r3, r2
 8018e9e:	dd47      	ble.n	8018f30 <_printf_float+0x188>
 8018ea0:	f1a9 0902 	sub.w	r9, r9, #2
 8018ea4:	fa5f f989 	uxtb.w	r9, r9
 8018ea8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8018eac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018eae:	d824      	bhi.n	8018efa <_printf_float+0x152>
 8018eb0:	3901      	subs	r1, #1
 8018eb2:	464a      	mov	r2, r9
 8018eb4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8018eb8:	9109      	str	r1, [sp, #36]	; 0x24
 8018eba:	f7ff ff3f 	bl	8018d3c <__exponent>
 8018ebe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018ec0:	1813      	adds	r3, r2, r0
 8018ec2:	2a01      	cmp	r2, #1
 8018ec4:	4682      	mov	sl, r0
 8018ec6:	6123      	str	r3, [r4, #16]
 8018ec8:	dc02      	bgt.n	8018ed0 <_printf_float+0x128>
 8018eca:	6822      	ldr	r2, [r4, #0]
 8018ecc:	07d1      	lsls	r1, r2, #31
 8018ece:	d501      	bpl.n	8018ed4 <_printf_float+0x12c>
 8018ed0:	3301      	adds	r3, #1
 8018ed2:	6123      	str	r3, [r4, #16]
 8018ed4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d0a9      	beq.n	8018e30 <_printf_float+0x88>
 8018edc:	232d      	movs	r3, #45	; 0x2d
 8018ede:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018ee2:	e7a5      	b.n	8018e30 <_printf_float+0x88>
 8018ee4:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8018ee8:	f000 8178 	beq.w	80191dc <_printf_float+0x434>
 8018eec:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8018ef0:	d1be      	bne.n	8018e70 <_printf_float+0xc8>
 8018ef2:	2900      	cmp	r1, #0
 8018ef4:	d1bc      	bne.n	8018e70 <_printf_float+0xc8>
 8018ef6:	2101      	movs	r1, #1
 8018ef8:	e7b9      	b.n	8018e6e <_printf_float+0xc6>
 8018efa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8018efe:	d119      	bne.n	8018f34 <_printf_float+0x18c>
 8018f00:	2900      	cmp	r1, #0
 8018f02:	6863      	ldr	r3, [r4, #4]
 8018f04:	dd0c      	ble.n	8018f20 <_printf_float+0x178>
 8018f06:	6121      	str	r1, [r4, #16]
 8018f08:	b913      	cbnz	r3, 8018f10 <_printf_float+0x168>
 8018f0a:	6822      	ldr	r2, [r4, #0]
 8018f0c:	07d2      	lsls	r2, r2, #31
 8018f0e:	d502      	bpl.n	8018f16 <_printf_float+0x16e>
 8018f10:	3301      	adds	r3, #1
 8018f12:	440b      	add	r3, r1
 8018f14:	6123      	str	r3, [r4, #16]
 8018f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f18:	65a3      	str	r3, [r4, #88]	; 0x58
 8018f1a:	f04f 0a00 	mov.w	sl, #0
 8018f1e:	e7d9      	b.n	8018ed4 <_printf_float+0x12c>
 8018f20:	b913      	cbnz	r3, 8018f28 <_printf_float+0x180>
 8018f22:	6822      	ldr	r2, [r4, #0]
 8018f24:	07d0      	lsls	r0, r2, #31
 8018f26:	d501      	bpl.n	8018f2c <_printf_float+0x184>
 8018f28:	3302      	adds	r3, #2
 8018f2a:	e7f3      	b.n	8018f14 <_printf_float+0x16c>
 8018f2c:	2301      	movs	r3, #1
 8018f2e:	e7f1      	b.n	8018f14 <_printf_float+0x16c>
 8018f30:	f04f 0967 	mov.w	r9, #103	; 0x67
 8018f34:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8018f38:	4293      	cmp	r3, r2
 8018f3a:	db05      	blt.n	8018f48 <_printf_float+0x1a0>
 8018f3c:	6822      	ldr	r2, [r4, #0]
 8018f3e:	6123      	str	r3, [r4, #16]
 8018f40:	07d1      	lsls	r1, r2, #31
 8018f42:	d5e8      	bpl.n	8018f16 <_printf_float+0x16e>
 8018f44:	3301      	adds	r3, #1
 8018f46:	e7e5      	b.n	8018f14 <_printf_float+0x16c>
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	bfd4      	ite	le
 8018f4c:	f1c3 0302 	rsble	r3, r3, #2
 8018f50:	2301      	movgt	r3, #1
 8018f52:	4413      	add	r3, r2
 8018f54:	e7de      	b.n	8018f14 <_printf_float+0x16c>
 8018f56:	6823      	ldr	r3, [r4, #0]
 8018f58:	055a      	lsls	r2, r3, #21
 8018f5a:	d407      	bmi.n	8018f6c <_printf_float+0x1c4>
 8018f5c:	6923      	ldr	r3, [r4, #16]
 8018f5e:	4642      	mov	r2, r8
 8018f60:	4631      	mov	r1, r6
 8018f62:	4628      	mov	r0, r5
 8018f64:	47b8      	blx	r7
 8018f66:	3001      	adds	r0, #1
 8018f68:	d12a      	bne.n	8018fc0 <_printf_float+0x218>
 8018f6a:	e76b      	b.n	8018e44 <_printf_float+0x9c>
 8018f6c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8018f70:	f240 80de 	bls.w	8019130 <_printf_float+0x388>
 8018f74:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8018f78:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f80:	d133      	bne.n	8018fea <_printf_float+0x242>
 8018f82:	2301      	movs	r3, #1
 8018f84:	4a42      	ldr	r2, [pc, #264]	; (8019090 <_printf_float+0x2e8>)
 8018f86:	4631      	mov	r1, r6
 8018f88:	4628      	mov	r0, r5
 8018f8a:	47b8      	blx	r7
 8018f8c:	3001      	adds	r0, #1
 8018f8e:	f43f af59 	beq.w	8018e44 <_printf_float+0x9c>
 8018f92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018f96:	429a      	cmp	r2, r3
 8018f98:	db02      	blt.n	8018fa0 <_printf_float+0x1f8>
 8018f9a:	6823      	ldr	r3, [r4, #0]
 8018f9c:	07d8      	lsls	r0, r3, #31
 8018f9e:	d50f      	bpl.n	8018fc0 <_printf_float+0x218>
 8018fa0:	9b05      	ldr	r3, [sp, #20]
 8018fa2:	465a      	mov	r2, fp
 8018fa4:	4631      	mov	r1, r6
 8018fa6:	4628      	mov	r0, r5
 8018fa8:	47b8      	blx	r7
 8018faa:	3001      	adds	r0, #1
 8018fac:	f43f af4a 	beq.w	8018e44 <_printf_float+0x9c>
 8018fb0:	f04f 0800 	mov.w	r8, #0
 8018fb4:	f104 091a 	add.w	r9, r4, #26
 8018fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018fba:	3b01      	subs	r3, #1
 8018fbc:	4543      	cmp	r3, r8
 8018fbe:	dc09      	bgt.n	8018fd4 <_printf_float+0x22c>
 8018fc0:	6823      	ldr	r3, [r4, #0]
 8018fc2:	079b      	lsls	r3, r3, #30
 8018fc4:	f100 8105 	bmi.w	80191d2 <_printf_float+0x42a>
 8018fc8:	68e0      	ldr	r0, [r4, #12]
 8018fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018fcc:	4298      	cmp	r0, r3
 8018fce:	bfb8      	it	lt
 8018fd0:	4618      	movlt	r0, r3
 8018fd2:	e739      	b.n	8018e48 <_printf_float+0xa0>
 8018fd4:	2301      	movs	r3, #1
 8018fd6:	464a      	mov	r2, r9
 8018fd8:	4631      	mov	r1, r6
 8018fda:	4628      	mov	r0, r5
 8018fdc:	47b8      	blx	r7
 8018fde:	3001      	adds	r0, #1
 8018fe0:	f43f af30 	beq.w	8018e44 <_printf_float+0x9c>
 8018fe4:	f108 0801 	add.w	r8, r8, #1
 8018fe8:	e7e6      	b.n	8018fb8 <_printf_float+0x210>
 8018fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	dc2b      	bgt.n	8019048 <_printf_float+0x2a0>
 8018ff0:	2301      	movs	r3, #1
 8018ff2:	4a27      	ldr	r2, [pc, #156]	; (8019090 <_printf_float+0x2e8>)
 8018ff4:	4631      	mov	r1, r6
 8018ff6:	4628      	mov	r0, r5
 8018ff8:	47b8      	blx	r7
 8018ffa:	3001      	adds	r0, #1
 8018ffc:	f43f af22 	beq.w	8018e44 <_printf_float+0x9c>
 8019000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019002:	b923      	cbnz	r3, 801900e <_printf_float+0x266>
 8019004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019006:	b913      	cbnz	r3, 801900e <_printf_float+0x266>
 8019008:	6823      	ldr	r3, [r4, #0]
 801900a:	07d9      	lsls	r1, r3, #31
 801900c:	d5d8      	bpl.n	8018fc0 <_printf_float+0x218>
 801900e:	9b05      	ldr	r3, [sp, #20]
 8019010:	465a      	mov	r2, fp
 8019012:	4631      	mov	r1, r6
 8019014:	4628      	mov	r0, r5
 8019016:	47b8      	blx	r7
 8019018:	3001      	adds	r0, #1
 801901a:	f43f af13 	beq.w	8018e44 <_printf_float+0x9c>
 801901e:	f04f 0900 	mov.w	r9, #0
 8019022:	f104 0a1a 	add.w	sl, r4, #26
 8019026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019028:	425b      	negs	r3, r3
 801902a:	454b      	cmp	r3, r9
 801902c:	dc01      	bgt.n	8019032 <_printf_float+0x28a>
 801902e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019030:	e795      	b.n	8018f5e <_printf_float+0x1b6>
 8019032:	2301      	movs	r3, #1
 8019034:	4652      	mov	r2, sl
 8019036:	4631      	mov	r1, r6
 8019038:	4628      	mov	r0, r5
 801903a:	47b8      	blx	r7
 801903c:	3001      	adds	r0, #1
 801903e:	f43f af01 	beq.w	8018e44 <_printf_float+0x9c>
 8019042:	f109 0901 	add.w	r9, r9, #1
 8019046:	e7ee      	b.n	8019026 <_printf_float+0x27e>
 8019048:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801904a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801904c:	429a      	cmp	r2, r3
 801904e:	bfa8      	it	ge
 8019050:	461a      	movge	r2, r3
 8019052:	2a00      	cmp	r2, #0
 8019054:	4691      	mov	r9, r2
 8019056:	dd07      	ble.n	8019068 <_printf_float+0x2c0>
 8019058:	4613      	mov	r3, r2
 801905a:	4631      	mov	r1, r6
 801905c:	4642      	mov	r2, r8
 801905e:	4628      	mov	r0, r5
 8019060:	47b8      	blx	r7
 8019062:	3001      	adds	r0, #1
 8019064:	f43f aeee 	beq.w	8018e44 <_printf_float+0x9c>
 8019068:	f104 031a 	add.w	r3, r4, #26
 801906c:	f04f 0a00 	mov.w	sl, #0
 8019070:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019074:	9307      	str	r3, [sp, #28]
 8019076:	e017      	b.n	80190a8 <_printf_float+0x300>
 8019078:	ffffffff 	.word	0xffffffff
 801907c:	7fefffff 	.word	0x7fefffff
 8019080:	08020b66 	.word	0x08020b66
 8019084:	08020b62 	.word	0x08020b62
 8019088:	08020b6e 	.word	0x08020b6e
 801908c:	08020b6a 	.word	0x08020b6a
 8019090:	08020b72 	.word	0x08020b72
 8019094:	2301      	movs	r3, #1
 8019096:	9a07      	ldr	r2, [sp, #28]
 8019098:	4631      	mov	r1, r6
 801909a:	4628      	mov	r0, r5
 801909c:	47b8      	blx	r7
 801909e:	3001      	adds	r0, #1
 80190a0:	f43f aed0 	beq.w	8018e44 <_printf_float+0x9c>
 80190a4:	f10a 0a01 	add.w	sl, sl, #1
 80190a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80190aa:	9306      	str	r3, [sp, #24]
 80190ac:	eba3 0309 	sub.w	r3, r3, r9
 80190b0:	4553      	cmp	r3, sl
 80190b2:	dcef      	bgt.n	8019094 <_printf_float+0x2ec>
 80190b4:	9b06      	ldr	r3, [sp, #24]
 80190b6:	4498      	add	r8, r3
 80190b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80190bc:	429a      	cmp	r2, r3
 80190be:	db15      	blt.n	80190ec <_printf_float+0x344>
 80190c0:	6823      	ldr	r3, [r4, #0]
 80190c2:	07da      	lsls	r2, r3, #31
 80190c4:	d412      	bmi.n	80190ec <_printf_float+0x344>
 80190c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80190c8:	9a06      	ldr	r2, [sp, #24]
 80190ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80190cc:	1a9a      	subs	r2, r3, r2
 80190ce:	eba3 0a01 	sub.w	sl, r3, r1
 80190d2:	4592      	cmp	sl, r2
 80190d4:	bfa8      	it	ge
 80190d6:	4692      	movge	sl, r2
 80190d8:	f1ba 0f00 	cmp.w	sl, #0
 80190dc:	dc0e      	bgt.n	80190fc <_printf_float+0x354>
 80190de:	f04f 0800 	mov.w	r8, #0
 80190e2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80190e6:	f104 091a 	add.w	r9, r4, #26
 80190ea:	e019      	b.n	8019120 <_printf_float+0x378>
 80190ec:	9b05      	ldr	r3, [sp, #20]
 80190ee:	465a      	mov	r2, fp
 80190f0:	4631      	mov	r1, r6
 80190f2:	4628      	mov	r0, r5
 80190f4:	47b8      	blx	r7
 80190f6:	3001      	adds	r0, #1
 80190f8:	d1e5      	bne.n	80190c6 <_printf_float+0x31e>
 80190fa:	e6a3      	b.n	8018e44 <_printf_float+0x9c>
 80190fc:	4653      	mov	r3, sl
 80190fe:	4642      	mov	r2, r8
 8019100:	4631      	mov	r1, r6
 8019102:	4628      	mov	r0, r5
 8019104:	47b8      	blx	r7
 8019106:	3001      	adds	r0, #1
 8019108:	d1e9      	bne.n	80190de <_printf_float+0x336>
 801910a:	e69b      	b.n	8018e44 <_printf_float+0x9c>
 801910c:	2301      	movs	r3, #1
 801910e:	464a      	mov	r2, r9
 8019110:	4631      	mov	r1, r6
 8019112:	4628      	mov	r0, r5
 8019114:	47b8      	blx	r7
 8019116:	3001      	adds	r0, #1
 8019118:	f43f ae94 	beq.w	8018e44 <_printf_float+0x9c>
 801911c:	f108 0801 	add.w	r8, r8, #1
 8019120:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019124:	1a9b      	subs	r3, r3, r2
 8019126:	eba3 030a 	sub.w	r3, r3, sl
 801912a:	4543      	cmp	r3, r8
 801912c:	dcee      	bgt.n	801910c <_printf_float+0x364>
 801912e:	e747      	b.n	8018fc0 <_printf_float+0x218>
 8019130:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019132:	2a01      	cmp	r2, #1
 8019134:	dc01      	bgt.n	801913a <_printf_float+0x392>
 8019136:	07db      	lsls	r3, r3, #31
 8019138:	d539      	bpl.n	80191ae <_printf_float+0x406>
 801913a:	2301      	movs	r3, #1
 801913c:	4642      	mov	r2, r8
 801913e:	4631      	mov	r1, r6
 8019140:	4628      	mov	r0, r5
 8019142:	47b8      	blx	r7
 8019144:	3001      	adds	r0, #1
 8019146:	f43f ae7d 	beq.w	8018e44 <_printf_float+0x9c>
 801914a:	9b05      	ldr	r3, [sp, #20]
 801914c:	465a      	mov	r2, fp
 801914e:	4631      	mov	r1, r6
 8019150:	4628      	mov	r0, r5
 8019152:	47b8      	blx	r7
 8019154:	3001      	adds	r0, #1
 8019156:	f108 0801 	add.w	r8, r8, #1
 801915a:	f43f ae73 	beq.w	8018e44 <_printf_float+0x9c>
 801915e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8019162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019164:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801916c:	f103 33ff 	add.w	r3, r3, #4294967295
 8019170:	d018      	beq.n	80191a4 <_printf_float+0x3fc>
 8019172:	4642      	mov	r2, r8
 8019174:	4631      	mov	r1, r6
 8019176:	4628      	mov	r0, r5
 8019178:	47b8      	blx	r7
 801917a:	3001      	adds	r0, #1
 801917c:	d10e      	bne.n	801919c <_printf_float+0x3f4>
 801917e:	e661      	b.n	8018e44 <_printf_float+0x9c>
 8019180:	2301      	movs	r3, #1
 8019182:	464a      	mov	r2, r9
 8019184:	4631      	mov	r1, r6
 8019186:	4628      	mov	r0, r5
 8019188:	47b8      	blx	r7
 801918a:	3001      	adds	r0, #1
 801918c:	f43f ae5a 	beq.w	8018e44 <_printf_float+0x9c>
 8019190:	f108 0801 	add.w	r8, r8, #1
 8019194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019196:	3b01      	subs	r3, #1
 8019198:	4543      	cmp	r3, r8
 801919a:	dcf1      	bgt.n	8019180 <_printf_float+0x3d8>
 801919c:	4653      	mov	r3, sl
 801919e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80191a2:	e6dd      	b.n	8018f60 <_printf_float+0x1b8>
 80191a4:	f04f 0800 	mov.w	r8, #0
 80191a8:	f104 091a 	add.w	r9, r4, #26
 80191ac:	e7f2      	b.n	8019194 <_printf_float+0x3ec>
 80191ae:	2301      	movs	r3, #1
 80191b0:	e7df      	b.n	8019172 <_printf_float+0x3ca>
 80191b2:	2301      	movs	r3, #1
 80191b4:	464a      	mov	r2, r9
 80191b6:	4631      	mov	r1, r6
 80191b8:	4628      	mov	r0, r5
 80191ba:	47b8      	blx	r7
 80191bc:	3001      	adds	r0, #1
 80191be:	f43f ae41 	beq.w	8018e44 <_printf_float+0x9c>
 80191c2:	f108 0801 	add.w	r8, r8, #1
 80191c6:	68e3      	ldr	r3, [r4, #12]
 80191c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80191ca:	1a9b      	subs	r3, r3, r2
 80191cc:	4543      	cmp	r3, r8
 80191ce:	dcf0      	bgt.n	80191b2 <_printf_float+0x40a>
 80191d0:	e6fa      	b.n	8018fc8 <_printf_float+0x220>
 80191d2:	f04f 0800 	mov.w	r8, #0
 80191d6:	f104 0919 	add.w	r9, r4, #25
 80191da:	e7f4      	b.n	80191c6 <_printf_float+0x41e>
 80191dc:	2900      	cmp	r1, #0
 80191de:	f43f ae8a 	beq.w	8018ef6 <_printf_float+0x14e>
 80191e2:	f04f 0c00 	mov.w	ip, #0
 80191e6:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80191ea:	e9cd 0900 	strd	r0, r9, [sp]
 80191ee:	6022      	str	r2, [r4, #0]
 80191f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80191f4:	4628      	mov	r0, r5
 80191f6:	f7ff fd4f 	bl	8018c98 <__cvt>
 80191fa:	4680      	mov	r8, r0
 80191fc:	e64a      	b.n	8018e94 <_printf_float+0xec>
 80191fe:	bf00      	nop

08019200 <_printf_common>:
 8019200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019204:	4691      	mov	r9, r2
 8019206:	461f      	mov	r7, r3
 8019208:	688a      	ldr	r2, [r1, #8]
 801920a:	690b      	ldr	r3, [r1, #16]
 801920c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019210:	4293      	cmp	r3, r2
 8019212:	bfb8      	it	lt
 8019214:	4613      	movlt	r3, r2
 8019216:	f8c9 3000 	str.w	r3, [r9]
 801921a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801921e:	4606      	mov	r6, r0
 8019220:	460c      	mov	r4, r1
 8019222:	b112      	cbz	r2, 801922a <_printf_common+0x2a>
 8019224:	3301      	adds	r3, #1
 8019226:	f8c9 3000 	str.w	r3, [r9]
 801922a:	6823      	ldr	r3, [r4, #0]
 801922c:	0699      	lsls	r1, r3, #26
 801922e:	bf42      	ittt	mi
 8019230:	f8d9 3000 	ldrmi.w	r3, [r9]
 8019234:	3302      	addmi	r3, #2
 8019236:	f8c9 3000 	strmi.w	r3, [r9]
 801923a:	6825      	ldr	r5, [r4, #0]
 801923c:	f015 0506 	ands.w	r5, r5, #6
 8019240:	d107      	bne.n	8019252 <_printf_common+0x52>
 8019242:	f104 0a19 	add.w	sl, r4, #25
 8019246:	68e3      	ldr	r3, [r4, #12]
 8019248:	f8d9 2000 	ldr.w	r2, [r9]
 801924c:	1a9b      	subs	r3, r3, r2
 801924e:	42ab      	cmp	r3, r5
 8019250:	dc28      	bgt.n	80192a4 <_printf_common+0xa4>
 8019252:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8019256:	6822      	ldr	r2, [r4, #0]
 8019258:	3300      	adds	r3, #0
 801925a:	bf18      	it	ne
 801925c:	2301      	movne	r3, #1
 801925e:	0692      	lsls	r2, r2, #26
 8019260:	d42d      	bmi.n	80192be <_printf_common+0xbe>
 8019262:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019266:	4639      	mov	r1, r7
 8019268:	4630      	mov	r0, r6
 801926a:	47c0      	blx	r8
 801926c:	3001      	adds	r0, #1
 801926e:	d020      	beq.n	80192b2 <_printf_common+0xb2>
 8019270:	6823      	ldr	r3, [r4, #0]
 8019272:	68e5      	ldr	r5, [r4, #12]
 8019274:	f8d9 2000 	ldr.w	r2, [r9]
 8019278:	f003 0306 	and.w	r3, r3, #6
 801927c:	2b04      	cmp	r3, #4
 801927e:	bf08      	it	eq
 8019280:	1aad      	subeq	r5, r5, r2
 8019282:	68a3      	ldr	r3, [r4, #8]
 8019284:	6922      	ldr	r2, [r4, #16]
 8019286:	bf0c      	ite	eq
 8019288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801928c:	2500      	movne	r5, #0
 801928e:	4293      	cmp	r3, r2
 8019290:	bfc4      	itt	gt
 8019292:	1a9b      	subgt	r3, r3, r2
 8019294:	18ed      	addgt	r5, r5, r3
 8019296:	f04f 0900 	mov.w	r9, #0
 801929a:	341a      	adds	r4, #26
 801929c:	454d      	cmp	r5, r9
 801929e:	d11a      	bne.n	80192d6 <_printf_common+0xd6>
 80192a0:	2000      	movs	r0, #0
 80192a2:	e008      	b.n	80192b6 <_printf_common+0xb6>
 80192a4:	2301      	movs	r3, #1
 80192a6:	4652      	mov	r2, sl
 80192a8:	4639      	mov	r1, r7
 80192aa:	4630      	mov	r0, r6
 80192ac:	47c0      	blx	r8
 80192ae:	3001      	adds	r0, #1
 80192b0:	d103      	bne.n	80192ba <_printf_common+0xba>
 80192b2:	f04f 30ff 	mov.w	r0, #4294967295
 80192b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192ba:	3501      	adds	r5, #1
 80192bc:	e7c3      	b.n	8019246 <_printf_common+0x46>
 80192be:	18e1      	adds	r1, r4, r3
 80192c0:	1c5a      	adds	r2, r3, #1
 80192c2:	2030      	movs	r0, #48	; 0x30
 80192c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80192c8:	4422      	add	r2, r4
 80192ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80192ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80192d2:	3302      	adds	r3, #2
 80192d4:	e7c5      	b.n	8019262 <_printf_common+0x62>
 80192d6:	2301      	movs	r3, #1
 80192d8:	4622      	mov	r2, r4
 80192da:	4639      	mov	r1, r7
 80192dc:	4630      	mov	r0, r6
 80192de:	47c0      	blx	r8
 80192e0:	3001      	adds	r0, #1
 80192e2:	d0e6      	beq.n	80192b2 <_printf_common+0xb2>
 80192e4:	f109 0901 	add.w	r9, r9, #1
 80192e8:	e7d8      	b.n	801929c <_printf_common+0x9c>
	...

080192ec <_printf_i>:
 80192ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80192f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80192f4:	460c      	mov	r4, r1
 80192f6:	7e09      	ldrb	r1, [r1, #24]
 80192f8:	b085      	sub	sp, #20
 80192fa:	296e      	cmp	r1, #110	; 0x6e
 80192fc:	4617      	mov	r7, r2
 80192fe:	4606      	mov	r6, r0
 8019300:	4698      	mov	r8, r3
 8019302:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019304:	f000 80b3 	beq.w	801946e <_printf_i+0x182>
 8019308:	d822      	bhi.n	8019350 <_printf_i+0x64>
 801930a:	2963      	cmp	r1, #99	; 0x63
 801930c:	d036      	beq.n	801937c <_printf_i+0x90>
 801930e:	d80a      	bhi.n	8019326 <_printf_i+0x3a>
 8019310:	2900      	cmp	r1, #0
 8019312:	f000 80b9 	beq.w	8019488 <_printf_i+0x19c>
 8019316:	2958      	cmp	r1, #88	; 0x58
 8019318:	f000 8083 	beq.w	8019422 <_printf_i+0x136>
 801931c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019320:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8019324:	e032      	b.n	801938c <_printf_i+0xa0>
 8019326:	2964      	cmp	r1, #100	; 0x64
 8019328:	d001      	beq.n	801932e <_printf_i+0x42>
 801932a:	2969      	cmp	r1, #105	; 0x69
 801932c:	d1f6      	bne.n	801931c <_printf_i+0x30>
 801932e:	6820      	ldr	r0, [r4, #0]
 8019330:	6813      	ldr	r3, [r2, #0]
 8019332:	0605      	lsls	r5, r0, #24
 8019334:	f103 0104 	add.w	r1, r3, #4
 8019338:	d52a      	bpl.n	8019390 <_printf_i+0xa4>
 801933a:	681b      	ldr	r3, [r3, #0]
 801933c:	6011      	str	r1, [r2, #0]
 801933e:	2b00      	cmp	r3, #0
 8019340:	da03      	bge.n	801934a <_printf_i+0x5e>
 8019342:	222d      	movs	r2, #45	; 0x2d
 8019344:	425b      	negs	r3, r3
 8019346:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801934a:	486f      	ldr	r0, [pc, #444]	; (8019508 <_printf_i+0x21c>)
 801934c:	220a      	movs	r2, #10
 801934e:	e039      	b.n	80193c4 <_printf_i+0xd8>
 8019350:	2973      	cmp	r1, #115	; 0x73
 8019352:	f000 809d 	beq.w	8019490 <_printf_i+0x1a4>
 8019356:	d808      	bhi.n	801936a <_printf_i+0x7e>
 8019358:	296f      	cmp	r1, #111	; 0x6f
 801935a:	d020      	beq.n	801939e <_printf_i+0xb2>
 801935c:	2970      	cmp	r1, #112	; 0x70
 801935e:	d1dd      	bne.n	801931c <_printf_i+0x30>
 8019360:	6823      	ldr	r3, [r4, #0]
 8019362:	f043 0320 	orr.w	r3, r3, #32
 8019366:	6023      	str	r3, [r4, #0]
 8019368:	e003      	b.n	8019372 <_printf_i+0x86>
 801936a:	2975      	cmp	r1, #117	; 0x75
 801936c:	d017      	beq.n	801939e <_printf_i+0xb2>
 801936e:	2978      	cmp	r1, #120	; 0x78
 8019370:	d1d4      	bne.n	801931c <_printf_i+0x30>
 8019372:	2378      	movs	r3, #120	; 0x78
 8019374:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019378:	4864      	ldr	r0, [pc, #400]	; (801950c <_printf_i+0x220>)
 801937a:	e055      	b.n	8019428 <_printf_i+0x13c>
 801937c:	6813      	ldr	r3, [r2, #0]
 801937e:	1d19      	adds	r1, r3, #4
 8019380:	681b      	ldr	r3, [r3, #0]
 8019382:	6011      	str	r1, [r2, #0]
 8019384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801938c:	2301      	movs	r3, #1
 801938e:	e08c      	b.n	80194aa <_printf_i+0x1be>
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	6011      	str	r1, [r2, #0]
 8019394:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019398:	bf18      	it	ne
 801939a:	b21b      	sxthne	r3, r3
 801939c:	e7cf      	b.n	801933e <_printf_i+0x52>
 801939e:	6813      	ldr	r3, [r2, #0]
 80193a0:	6825      	ldr	r5, [r4, #0]
 80193a2:	1d18      	adds	r0, r3, #4
 80193a4:	6010      	str	r0, [r2, #0]
 80193a6:	0628      	lsls	r0, r5, #24
 80193a8:	d501      	bpl.n	80193ae <_printf_i+0xc2>
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	e002      	b.n	80193b4 <_printf_i+0xc8>
 80193ae:	0668      	lsls	r0, r5, #25
 80193b0:	d5fb      	bpl.n	80193aa <_printf_i+0xbe>
 80193b2:	881b      	ldrh	r3, [r3, #0]
 80193b4:	4854      	ldr	r0, [pc, #336]	; (8019508 <_printf_i+0x21c>)
 80193b6:	296f      	cmp	r1, #111	; 0x6f
 80193b8:	bf14      	ite	ne
 80193ba:	220a      	movne	r2, #10
 80193bc:	2208      	moveq	r2, #8
 80193be:	2100      	movs	r1, #0
 80193c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80193c4:	6865      	ldr	r5, [r4, #4]
 80193c6:	60a5      	str	r5, [r4, #8]
 80193c8:	2d00      	cmp	r5, #0
 80193ca:	f2c0 8095 	blt.w	80194f8 <_printf_i+0x20c>
 80193ce:	6821      	ldr	r1, [r4, #0]
 80193d0:	f021 0104 	bic.w	r1, r1, #4
 80193d4:	6021      	str	r1, [r4, #0]
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d13d      	bne.n	8019456 <_printf_i+0x16a>
 80193da:	2d00      	cmp	r5, #0
 80193dc:	f040 808e 	bne.w	80194fc <_printf_i+0x210>
 80193e0:	4665      	mov	r5, ip
 80193e2:	2a08      	cmp	r2, #8
 80193e4:	d10b      	bne.n	80193fe <_printf_i+0x112>
 80193e6:	6823      	ldr	r3, [r4, #0]
 80193e8:	07db      	lsls	r3, r3, #31
 80193ea:	d508      	bpl.n	80193fe <_printf_i+0x112>
 80193ec:	6923      	ldr	r3, [r4, #16]
 80193ee:	6862      	ldr	r2, [r4, #4]
 80193f0:	429a      	cmp	r2, r3
 80193f2:	bfde      	ittt	le
 80193f4:	2330      	movle	r3, #48	; 0x30
 80193f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80193fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80193fe:	ebac 0305 	sub.w	r3, ip, r5
 8019402:	6123      	str	r3, [r4, #16]
 8019404:	f8cd 8000 	str.w	r8, [sp]
 8019408:	463b      	mov	r3, r7
 801940a:	aa03      	add	r2, sp, #12
 801940c:	4621      	mov	r1, r4
 801940e:	4630      	mov	r0, r6
 8019410:	f7ff fef6 	bl	8019200 <_printf_common>
 8019414:	3001      	adds	r0, #1
 8019416:	d14d      	bne.n	80194b4 <_printf_i+0x1c8>
 8019418:	f04f 30ff 	mov.w	r0, #4294967295
 801941c:	b005      	add	sp, #20
 801941e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019422:	4839      	ldr	r0, [pc, #228]	; (8019508 <_printf_i+0x21c>)
 8019424:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8019428:	6813      	ldr	r3, [r2, #0]
 801942a:	6821      	ldr	r1, [r4, #0]
 801942c:	1d1d      	adds	r5, r3, #4
 801942e:	681b      	ldr	r3, [r3, #0]
 8019430:	6015      	str	r5, [r2, #0]
 8019432:	060a      	lsls	r2, r1, #24
 8019434:	d50b      	bpl.n	801944e <_printf_i+0x162>
 8019436:	07ca      	lsls	r2, r1, #31
 8019438:	bf44      	itt	mi
 801943a:	f041 0120 	orrmi.w	r1, r1, #32
 801943e:	6021      	strmi	r1, [r4, #0]
 8019440:	b91b      	cbnz	r3, 801944a <_printf_i+0x15e>
 8019442:	6822      	ldr	r2, [r4, #0]
 8019444:	f022 0220 	bic.w	r2, r2, #32
 8019448:	6022      	str	r2, [r4, #0]
 801944a:	2210      	movs	r2, #16
 801944c:	e7b7      	b.n	80193be <_printf_i+0xd2>
 801944e:	064d      	lsls	r5, r1, #25
 8019450:	bf48      	it	mi
 8019452:	b29b      	uxthmi	r3, r3
 8019454:	e7ef      	b.n	8019436 <_printf_i+0x14a>
 8019456:	4665      	mov	r5, ip
 8019458:	fbb3 f1f2 	udiv	r1, r3, r2
 801945c:	fb02 3311 	mls	r3, r2, r1, r3
 8019460:	5cc3      	ldrb	r3, [r0, r3]
 8019462:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8019466:	460b      	mov	r3, r1
 8019468:	2900      	cmp	r1, #0
 801946a:	d1f5      	bne.n	8019458 <_printf_i+0x16c>
 801946c:	e7b9      	b.n	80193e2 <_printf_i+0xf6>
 801946e:	6813      	ldr	r3, [r2, #0]
 8019470:	6825      	ldr	r5, [r4, #0]
 8019472:	6961      	ldr	r1, [r4, #20]
 8019474:	1d18      	adds	r0, r3, #4
 8019476:	6010      	str	r0, [r2, #0]
 8019478:	0628      	lsls	r0, r5, #24
 801947a:	681b      	ldr	r3, [r3, #0]
 801947c:	d501      	bpl.n	8019482 <_printf_i+0x196>
 801947e:	6019      	str	r1, [r3, #0]
 8019480:	e002      	b.n	8019488 <_printf_i+0x19c>
 8019482:	066a      	lsls	r2, r5, #25
 8019484:	d5fb      	bpl.n	801947e <_printf_i+0x192>
 8019486:	8019      	strh	r1, [r3, #0]
 8019488:	2300      	movs	r3, #0
 801948a:	6123      	str	r3, [r4, #16]
 801948c:	4665      	mov	r5, ip
 801948e:	e7b9      	b.n	8019404 <_printf_i+0x118>
 8019490:	6813      	ldr	r3, [r2, #0]
 8019492:	1d19      	adds	r1, r3, #4
 8019494:	6011      	str	r1, [r2, #0]
 8019496:	681d      	ldr	r5, [r3, #0]
 8019498:	6862      	ldr	r2, [r4, #4]
 801949a:	2100      	movs	r1, #0
 801949c:	4628      	mov	r0, r5
 801949e:	f7e6 fed7 	bl	8000250 <memchr>
 80194a2:	b108      	cbz	r0, 80194a8 <_printf_i+0x1bc>
 80194a4:	1b40      	subs	r0, r0, r5
 80194a6:	6060      	str	r0, [r4, #4]
 80194a8:	6863      	ldr	r3, [r4, #4]
 80194aa:	6123      	str	r3, [r4, #16]
 80194ac:	2300      	movs	r3, #0
 80194ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80194b2:	e7a7      	b.n	8019404 <_printf_i+0x118>
 80194b4:	6923      	ldr	r3, [r4, #16]
 80194b6:	462a      	mov	r2, r5
 80194b8:	4639      	mov	r1, r7
 80194ba:	4630      	mov	r0, r6
 80194bc:	47c0      	blx	r8
 80194be:	3001      	adds	r0, #1
 80194c0:	d0aa      	beq.n	8019418 <_printf_i+0x12c>
 80194c2:	6823      	ldr	r3, [r4, #0]
 80194c4:	079b      	lsls	r3, r3, #30
 80194c6:	d413      	bmi.n	80194f0 <_printf_i+0x204>
 80194c8:	68e0      	ldr	r0, [r4, #12]
 80194ca:	9b03      	ldr	r3, [sp, #12]
 80194cc:	4298      	cmp	r0, r3
 80194ce:	bfb8      	it	lt
 80194d0:	4618      	movlt	r0, r3
 80194d2:	e7a3      	b.n	801941c <_printf_i+0x130>
 80194d4:	2301      	movs	r3, #1
 80194d6:	464a      	mov	r2, r9
 80194d8:	4639      	mov	r1, r7
 80194da:	4630      	mov	r0, r6
 80194dc:	47c0      	blx	r8
 80194de:	3001      	adds	r0, #1
 80194e0:	d09a      	beq.n	8019418 <_printf_i+0x12c>
 80194e2:	3501      	adds	r5, #1
 80194e4:	68e3      	ldr	r3, [r4, #12]
 80194e6:	9a03      	ldr	r2, [sp, #12]
 80194e8:	1a9b      	subs	r3, r3, r2
 80194ea:	42ab      	cmp	r3, r5
 80194ec:	dcf2      	bgt.n	80194d4 <_printf_i+0x1e8>
 80194ee:	e7eb      	b.n	80194c8 <_printf_i+0x1dc>
 80194f0:	2500      	movs	r5, #0
 80194f2:	f104 0919 	add.w	r9, r4, #25
 80194f6:	e7f5      	b.n	80194e4 <_printf_i+0x1f8>
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d1ac      	bne.n	8019456 <_printf_i+0x16a>
 80194fc:	7803      	ldrb	r3, [r0, #0]
 80194fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019502:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019506:	e76c      	b.n	80193e2 <_printf_i+0xf6>
 8019508:	08020b74 	.word	0x08020b74
 801950c:	08020b85 	.word	0x08020b85

08019510 <_scanf_float>:
 8019510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019514:	469a      	mov	sl, r3
 8019516:	688b      	ldr	r3, [r1, #8]
 8019518:	4616      	mov	r6, r2
 801951a:	1e5a      	subs	r2, r3, #1
 801951c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8019520:	b087      	sub	sp, #28
 8019522:	bf83      	ittte	hi
 8019524:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8019528:	189b      	addhi	r3, r3, r2
 801952a:	9301      	strhi	r3, [sp, #4]
 801952c:	2300      	movls	r3, #0
 801952e:	bf86      	itte	hi
 8019530:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019534:	608b      	strhi	r3, [r1, #8]
 8019536:	9301      	strls	r3, [sp, #4]
 8019538:	680b      	ldr	r3, [r1, #0]
 801953a:	4688      	mov	r8, r1
 801953c:	f04f 0b00 	mov.w	fp, #0
 8019540:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8019544:	f848 3b1c 	str.w	r3, [r8], #28
 8019548:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801954c:	4607      	mov	r7, r0
 801954e:	460c      	mov	r4, r1
 8019550:	4645      	mov	r5, r8
 8019552:	465a      	mov	r2, fp
 8019554:	46d9      	mov	r9, fp
 8019556:	f8cd b008 	str.w	fp, [sp, #8]
 801955a:	68a1      	ldr	r1, [r4, #8]
 801955c:	b181      	cbz	r1, 8019580 <_scanf_float+0x70>
 801955e:	6833      	ldr	r3, [r6, #0]
 8019560:	781b      	ldrb	r3, [r3, #0]
 8019562:	2b49      	cmp	r3, #73	; 0x49
 8019564:	d071      	beq.n	801964a <_scanf_float+0x13a>
 8019566:	d84d      	bhi.n	8019604 <_scanf_float+0xf4>
 8019568:	2b39      	cmp	r3, #57	; 0x39
 801956a:	d840      	bhi.n	80195ee <_scanf_float+0xde>
 801956c:	2b31      	cmp	r3, #49	; 0x31
 801956e:	f080 8088 	bcs.w	8019682 <_scanf_float+0x172>
 8019572:	2b2d      	cmp	r3, #45	; 0x2d
 8019574:	f000 8090 	beq.w	8019698 <_scanf_float+0x188>
 8019578:	d815      	bhi.n	80195a6 <_scanf_float+0x96>
 801957a:	2b2b      	cmp	r3, #43	; 0x2b
 801957c:	f000 808c 	beq.w	8019698 <_scanf_float+0x188>
 8019580:	f1b9 0f00 	cmp.w	r9, #0
 8019584:	d003      	beq.n	801958e <_scanf_float+0x7e>
 8019586:	6823      	ldr	r3, [r4, #0]
 8019588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801958c:	6023      	str	r3, [r4, #0]
 801958e:	3a01      	subs	r2, #1
 8019590:	2a01      	cmp	r2, #1
 8019592:	f200 80ea 	bhi.w	801976a <_scanf_float+0x25a>
 8019596:	4545      	cmp	r5, r8
 8019598:	f200 80dc 	bhi.w	8019754 <_scanf_float+0x244>
 801959c:	2601      	movs	r6, #1
 801959e:	4630      	mov	r0, r6
 80195a0:	b007      	add	sp, #28
 80195a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195a6:	2b2e      	cmp	r3, #46	; 0x2e
 80195a8:	f000 809f 	beq.w	80196ea <_scanf_float+0x1da>
 80195ac:	2b30      	cmp	r3, #48	; 0x30
 80195ae:	d1e7      	bne.n	8019580 <_scanf_float+0x70>
 80195b0:	6820      	ldr	r0, [r4, #0]
 80195b2:	f410 7f80 	tst.w	r0, #256	; 0x100
 80195b6:	d064      	beq.n	8019682 <_scanf_float+0x172>
 80195b8:	9b01      	ldr	r3, [sp, #4]
 80195ba:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80195be:	6020      	str	r0, [r4, #0]
 80195c0:	f109 0901 	add.w	r9, r9, #1
 80195c4:	b11b      	cbz	r3, 80195ce <_scanf_float+0xbe>
 80195c6:	3b01      	subs	r3, #1
 80195c8:	3101      	adds	r1, #1
 80195ca:	9301      	str	r3, [sp, #4]
 80195cc:	60a1      	str	r1, [r4, #8]
 80195ce:	68a3      	ldr	r3, [r4, #8]
 80195d0:	3b01      	subs	r3, #1
 80195d2:	60a3      	str	r3, [r4, #8]
 80195d4:	6923      	ldr	r3, [r4, #16]
 80195d6:	3301      	adds	r3, #1
 80195d8:	6123      	str	r3, [r4, #16]
 80195da:	6873      	ldr	r3, [r6, #4]
 80195dc:	3b01      	subs	r3, #1
 80195de:	2b00      	cmp	r3, #0
 80195e0:	6073      	str	r3, [r6, #4]
 80195e2:	f340 80ac 	ble.w	801973e <_scanf_float+0x22e>
 80195e6:	6833      	ldr	r3, [r6, #0]
 80195e8:	3301      	adds	r3, #1
 80195ea:	6033      	str	r3, [r6, #0]
 80195ec:	e7b5      	b.n	801955a <_scanf_float+0x4a>
 80195ee:	2b45      	cmp	r3, #69	; 0x45
 80195f0:	f000 8085 	beq.w	80196fe <_scanf_float+0x1ee>
 80195f4:	2b46      	cmp	r3, #70	; 0x46
 80195f6:	d06a      	beq.n	80196ce <_scanf_float+0x1be>
 80195f8:	2b41      	cmp	r3, #65	; 0x41
 80195fa:	d1c1      	bne.n	8019580 <_scanf_float+0x70>
 80195fc:	2a01      	cmp	r2, #1
 80195fe:	d1bf      	bne.n	8019580 <_scanf_float+0x70>
 8019600:	2202      	movs	r2, #2
 8019602:	e046      	b.n	8019692 <_scanf_float+0x182>
 8019604:	2b65      	cmp	r3, #101	; 0x65
 8019606:	d07a      	beq.n	80196fe <_scanf_float+0x1ee>
 8019608:	d818      	bhi.n	801963c <_scanf_float+0x12c>
 801960a:	2b54      	cmp	r3, #84	; 0x54
 801960c:	d066      	beq.n	80196dc <_scanf_float+0x1cc>
 801960e:	d811      	bhi.n	8019634 <_scanf_float+0x124>
 8019610:	2b4e      	cmp	r3, #78	; 0x4e
 8019612:	d1b5      	bne.n	8019580 <_scanf_float+0x70>
 8019614:	2a00      	cmp	r2, #0
 8019616:	d146      	bne.n	80196a6 <_scanf_float+0x196>
 8019618:	f1b9 0f00 	cmp.w	r9, #0
 801961c:	d145      	bne.n	80196aa <_scanf_float+0x19a>
 801961e:	6821      	ldr	r1, [r4, #0]
 8019620:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8019624:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8019628:	d13f      	bne.n	80196aa <_scanf_float+0x19a>
 801962a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801962e:	6021      	str	r1, [r4, #0]
 8019630:	2201      	movs	r2, #1
 8019632:	e02e      	b.n	8019692 <_scanf_float+0x182>
 8019634:	2b59      	cmp	r3, #89	; 0x59
 8019636:	d01e      	beq.n	8019676 <_scanf_float+0x166>
 8019638:	2b61      	cmp	r3, #97	; 0x61
 801963a:	e7de      	b.n	80195fa <_scanf_float+0xea>
 801963c:	2b6e      	cmp	r3, #110	; 0x6e
 801963e:	d0e9      	beq.n	8019614 <_scanf_float+0x104>
 8019640:	d815      	bhi.n	801966e <_scanf_float+0x15e>
 8019642:	2b66      	cmp	r3, #102	; 0x66
 8019644:	d043      	beq.n	80196ce <_scanf_float+0x1be>
 8019646:	2b69      	cmp	r3, #105	; 0x69
 8019648:	d19a      	bne.n	8019580 <_scanf_float+0x70>
 801964a:	f1bb 0f00 	cmp.w	fp, #0
 801964e:	d138      	bne.n	80196c2 <_scanf_float+0x1b2>
 8019650:	f1b9 0f00 	cmp.w	r9, #0
 8019654:	d197      	bne.n	8019586 <_scanf_float+0x76>
 8019656:	6821      	ldr	r1, [r4, #0]
 8019658:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801965c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8019660:	d195      	bne.n	801958e <_scanf_float+0x7e>
 8019662:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8019666:	6021      	str	r1, [r4, #0]
 8019668:	f04f 0b01 	mov.w	fp, #1
 801966c:	e011      	b.n	8019692 <_scanf_float+0x182>
 801966e:	2b74      	cmp	r3, #116	; 0x74
 8019670:	d034      	beq.n	80196dc <_scanf_float+0x1cc>
 8019672:	2b79      	cmp	r3, #121	; 0x79
 8019674:	d184      	bne.n	8019580 <_scanf_float+0x70>
 8019676:	f1bb 0f07 	cmp.w	fp, #7
 801967a:	d181      	bne.n	8019580 <_scanf_float+0x70>
 801967c:	f04f 0b08 	mov.w	fp, #8
 8019680:	e007      	b.n	8019692 <_scanf_float+0x182>
 8019682:	eb12 0f0b 	cmn.w	r2, fp
 8019686:	f47f af7b 	bne.w	8019580 <_scanf_float+0x70>
 801968a:	6821      	ldr	r1, [r4, #0]
 801968c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8019690:	6021      	str	r1, [r4, #0]
 8019692:	702b      	strb	r3, [r5, #0]
 8019694:	3501      	adds	r5, #1
 8019696:	e79a      	b.n	80195ce <_scanf_float+0xbe>
 8019698:	6821      	ldr	r1, [r4, #0]
 801969a:	0608      	lsls	r0, r1, #24
 801969c:	f57f af70 	bpl.w	8019580 <_scanf_float+0x70>
 80196a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80196a4:	e7f4      	b.n	8019690 <_scanf_float+0x180>
 80196a6:	2a02      	cmp	r2, #2
 80196a8:	d047      	beq.n	801973a <_scanf_float+0x22a>
 80196aa:	f1bb 0f01 	cmp.w	fp, #1
 80196ae:	d003      	beq.n	80196b8 <_scanf_float+0x1a8>
 80196b0:	f1bb 0f04 	cmp.w	fp, #4
 80196b4:	f47f af64 	bne.w	8019580 <_scanf_float+0x70>
 80196b8:	f10b 0b01 	add.w	fp, fp, #1
 80196bc:	fa5f fb8b 	uxtb.w	fp, fp
 80196c0:	e7e7      	b.n	8019692 <_scanf_float+0x182>
 80196c2:	f1bb 0f03 	cmp.w	fp, #3
 80196c6:	d0f7      	beq.n	80196b8 <_scanf_float+0x1a8>
 80196c8:	f1bb 0f05 	cmp.w	fp, #5
 80196cc:	e7f2      	b.n	80196b4 <_scanf_float+0x1a4>
 80196ce:	f1bb 0f02 	cmp.w	fp, #2
 80196d2:	f47f af55 	bne.w	8019580 <_scanf_float+0x70>
 80196d6:	f04f 0b03 	mov.w	fp, #3
 80196da:	e7da      	b.n	8019692 <_scanf_float+0x182>
 80196dc:	f1bb 0f06 	cmp.w	fp, #6
 80196e0:	f47f af4e 	bne.w	8019580 <_scanf_float+0x70>
 80196e4:	f04f 0b07 	mov.w	fp, #7
 80196e8:	e7d3      	b.n	8019692 <_scanf_float+0x182>
 80196ea:	6821      	ldr	r1, [r4, #0]
 80196ec:	0588      	lsls	r0, r1, #22
 80196ee:	f57f af47 	bpl.w	8019580 <_scanf_float+0x70>
 80196f2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80196f6:	6021      	str	r1, [r4, #0]
 80196f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80196fc:	e7c9      	b.n	8019692 <_scanf_float+0x182>
 80196fe:	6821      	ldr	r1, [r4, #0]
 8019700:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8019704:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8019708:	d006      	beq.n	8019718 <_scanf_float+0x208>
 801970a:	0548      	lsls	r0, r1, #21
 801970c:	f57f af38 	bpl.w	8019580 <_scanf_float+0x70>
 8019710:	f1b9 0f00 	cmp.w	r9, #0
 8019714:	f43f af3b 	beq.w	801958e <_scanf_float+0x7e>
 8019718:	0588      	lsls	r0, r1, #22
 801971a:	bf58      	it	pl
 801971c:	9802      	ldrpl	r0, [sp, #8]
 801971e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8019722:	bf58      	it	pl
 8019724:	eba9 0000 	subpl.w	r0, r9, r0
 8019728:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801972c:	bf58      	it	pl
 801972e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8019732:	6021      	str	r1, [r4, #0]
 8019734:	f04f 0900 	mov.w	r9, #0
 8019738:	e7ab      	b.n	8019692 <_scanf_float+0x182>
 801973a:	2203      	movs	r2, #3
 801973c:	e7a9      	b.n	8019692 <_scanf_float+0x182>
 801973e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019742:	9205      	str	r2, [sp, #20]
 8019744:	4631      	mov	r1, r6
 8019746:	4638      	mov	r0, r7
 8019748:	4798      	blx	r3
 801974a:	9a05      	ldr	r2, [sp, #20]
 801974c:	2800      	cmp	r0, #0
 801974e:	f43f af04 	beq.w	801955a <_scanf_float+0x4a>
 8019752:	e715      	b.n	8019580 <_scanf_float+0x70>
 8019754:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019758:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801975c:	4632      	mov	r2, r6
 801975e:	4638      	mov	r0, r7
 8019760:	4798      	blx	r3
 8019762:	6923      	ldr	r3, [r4, #16]
 8019764:	3b01      	subs	r3, #1
 8019766:	6123      	str	r3, [r4, #16]
 8019768:	e715      	b.n	8019596 <_scanf_float+0x86>
 801976a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801976e:	2b06      	cmp	r3, #6
 8019770:	d80a      	bhi.n	8019788 <_scanf_float+0x278>
 8019772:	f1bb 0f02 	cmp.w	fp, #2
 8019776:	d966      	bls.n	8019846 <_scanf_float+0x336>
 8019778:	f1ab 0b03 	sub.w	fp, fp, #3
 801977c:	fa5f fb8b 	uxtb.w	fp, fp
 8019780:	eba5 0b0b 	sub.w	fp, r5, fp
 8019784:	455d      	cmp	r5, fp
 8019786:	d149      	bne.n	801981c <_scanf_float+0x30c>
 8019788:	6823      	ldr	r3, [r4, #0]
 801978a:	05da      	lsls	r2, r3, #23
 801978c:	d51f      	bpl.n	80197ce <_scanf_float+0x2be>
 801978e:	055b      	lsls	r3, r3, #21
 8019790:	d466      	bmi.n	8019860 <_scanf_float+0x350>
 8019792:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019796:	6923      	ldr	r3, [r4, #16]
 8019798:	2965      	cmp	r1, #101	; 0x65
 801979a:	f103 33ff 	add.w	r3, r3, #4294967295
 801979e:	f105 3bff 	add.w	fp, r5, #4294967295
 80197a2:	6123      	str	r3, [r4, #16]
 80197a4:	d00d      	beq.n	80197c2 <_scanf_float+0x2b2>
 80197a6:	2945      	cmp	r1, #69	; 0x45
 80197a8:	d00b      	beq.n	80197c2 <_scanf_float+0x2b2>
 80197aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80197ae:	4632      	mov	r2, r6
 80197b0:	4638      	mov	r0, r7
 80197b2:	4798      	blx	r3
 80197b4:	6923      	ldr	r3, [r4, #16]
 80197b6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80197ba:	3b01      	subs	r3, #1
 80197bc:	f1a5 0b02 	sub.w	fp, r5, #2
 80197c0:	6123      	str	r3, [r4, #16]
 80197c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80197c6:	4632      	mov	r2, r6
 80197c8:	4638      	mov	r0, r7
 80197ca:	4798      	blx	r3
 80197cc:	465d      	mov	r5, fp
 80197ce:	6826      	ldr	r6, [r4, #0]
 80197d0:	f016 0610 	ands.w	r6, r6, #16
 80197d4:	d170      	bne.n	80198b8 <_scanf_float+0x3a8>
 80197d6:	702e      	strb	r6, [r5, #0]
 80197d8:	6823      	ldr	r3, [r4, #0]
 80197da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80197de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80197e2:	d140      	bne.n	8019866 <_scanf_float+0x356>
 80197e4:	9b02      	ldr	r3, [sp, #8]
 80197e6:	eba9 0303 	sub.w	r3, r9, r3
 80197ea:	425a      	negs	r2, r3
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	d147      	bne.n	8019880 <_scanf_float+0x370>
 80197f0:	2200      	movs	r2, #0
 80197f2:	4638      	mov	r0, r7
 80197f4:	4641      	mov	r1, r8
 80197f6:	f000 ff47 	bl	801a688 <_strtod_r>
 80197fa:	6820      	ldr	r0, [r4, #0]
 80197fc:	f8da 3000 	ldr.w	r3, [sl]
 8019800:	f010 0f02 	tst.w	r0, #2
 8019804:	f103 0204 	add.w	r2, r3, #4
 8019808:	f8ca 2000 	str.w	r2, [sl]
 801980c:	d043      	beq.n	8019896 <_scanf_float+0x386>
 801980e:	681b      	ldr	r3, [r3, #0]
 8019810:	ed83 0b00 	vstr	d0, [r3]
 8019814:	68e3      	ldr	r3, [r4, #12]
 8019816:	3301      	adds	r3, #1
 8019818:	60e3      	str	r3, [r4, #12]
 801981a:	e6c0      	b.n	801959e <_scanf_float+0x8e>
 801981c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019820:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8019824:	4632      	mov	r2, r6
 8019826:	4638      	mov	r0, r7
 8019828:	4798      	blx	r3
 801982a:	6923      	ldr	r3, [r4, #16]
 801982c:	3b01      	subs	r3, #1
 801982e:	6123      	str	r3, [r4, #16]
 8019830:	e7a8      	b.n	8019784 <_scanf_float+0x274>
 8019832:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019836:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801983a:	4632      	mov	r2, r6
 801983c:	4638      	mov	r0, r7
 801983e:	4798      	blx	r3
 8019840:	6923      	ldr	r3, [r4, #16]
 8019842:	3b01      	subs	r3, #1
 8019844:	6123      	str	r3, [r4, #16]
 8019846:	4545      	cmp	r5, r8
 8019848:	d8f3      	bhi.n	8019832 <_scanf_float+0x322>
 801984a:	e6a7      	b.n	801959c <_scanf_float+0x8c>
 801984c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019850:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8019854:	4632      	mov	r2, r6
 8019856:	4638      	mov	r0, r7
 8019858:	4798      	blx	r3
 801985a:	6923      	ldr	r3, [r4, #16]
 801985c:	3b01      	subs	r3, #1
 801985e:	6123      	str	r3, [r4, #16]
 8019860:	4545      	cmp	r5, r8
 8019862:	d8f3      	bhi.n	801984c <_scanf_float+0x33c>
 8019864:	e69a      	b.n	801959c <_scanf_float+0x8c>
 8019866:	9b03      	ldr	r3, [sp, #12]
 8019868:	2b00      	cmp	r3, #0
 801986a:	d0c1      	beq.n	80197f0 <_scanf_float+0x2e0>
 801986c:	9904      	ldr	r1, [sp, #16]
 801986e:	230a      	movs	r3, #10
 8019870:	4632      	mov	r2, r6
 8019872:	3101      	adds	r1, #1
 8019874:	4638      	mov	r0, r7
 8019876:	f000 ff93 	bl	801a7a0 <_strtol_r>
 801987a:	9b03      	ldr	r3, [sp, #12]
 801987c:	9d04      	ldr	r5, [sp, #16]
 801987e:	1ac2      	subs	r2, r0, r3
 8019880:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8019884:	429d      	cmp	r5, r3
 8019886:	bf28      	it	cs
 8019888:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 801988c:	490b      	ldr	r1, [pc, #44]	; (80198bc <_scanf_float+0x3ac>)
 801988e:	4628      	mov	r0, r5
 8019890:	f000 f8cc 	bl	8019a2c <siprintf>
 8019894:	e7ac      	b.n	80197f0 <_scanf_float+0x2e0>
 8019896:	f010 0004 	ands.w	r0, r0, #4
 801989a:	d1b8      	bne.n	801980e <_scanf_float+0x2fe>
 801989c:	eeb4 0b40 	vcmp.f64	d0, d0
 80198a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198a4:	681d      	ldr	r5, [r3, #0]
 80198a6:	d704      	bvc.n	80198b2 <_scanf_float+0x3a2>
 80198a8:	f000 f8ba 	bl	8019a20 <nanf>
 80198ac:	ed85 0a00 	vstr	s0, [r5]
 80198b0:	e7b0      	b.n	8019814 <_scanf_float+0x304>
 80198b2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80198b6:	e7f9      	b.n	80198ac <_scanf_float+0x39c>
 80198b8:	2600      	movs	r6, #0
 80198ba:	e670      	b.n	801959e <_scanf_float+0x8e>
 80198bc:	08020b96 	.word	0x08020b96

080198c0 <iprintf>:
 80198c0:	b40f      	push	{r0, r1, r2, r3}
 80198c2:	4b0a      	ldr	r3, [pc, #40]	; (80198ec <iprintf+0x2c>)
 80198c4:	b513      	push	{r0, r1, r4, lr}
 80198c6:	681c      	ldr	r4, [r3, #0]
 80198c8:	b124      	cbz	r4, 80198d4 <iprintf+0x14>
 80198ca:	69a3      	ldr	r3, [r4, #24]
 80198cc:	b913      	cbnz	r3, 80198d4 <iprintf+0x14>
 80198ce:	4620      	mov	r0, r4
 80198d0:	f001 ff0e 	bl	801b6f0 <__sinit>
 80198d4:	ab05      	add	r3, sp, #20
 80198d6:	9a04      	ldr	r2, [sp, #16]
 80198d8:	68a1      	ldr	r1, [r4, #8]
 80198da:	9301      	str	r3, [sp, #4]
 80198dc:	4620      	mov	r0, r4
 80198de:	f003 f965 	bl	801cbac <_vfiprintf_r>
 80198e2:	b002      	add	sp, #8
 80198e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80198e8:	b004      	add	sp, #16
 80198ea:	4770      	bx	lr
 80198ec:	2000001c 	.word	0x2000001c

080198f0 <_puts_r>:
 80198f0:	b570      	push	{r4, r5, r6, lr}
 80198f2:	460e      	mov	r6, r1
 80198f4:	4605      	mov	r5, r0
 80198f6:	b118      	cbz	r0, 8019900 <_puts_r+0x10>
 80198f8:	6983      	ldr	r3, [r0, #24]
 80198fa:	b90b      	cbnz	r3, 8019900 <_puts_r+0x10>
 80198fc:	f001 fef8 	bl	801b6f0 <__sinit>
 8019900:	69ab      	ldr	r3, [r5, #24]
 8019902:	68ac      	ldr	r4, [r5, #8]
 8019904:	b913      	cbnz	r3, 801990c <_puts_r+0x1c>
 8019906:	4628      	mov	r0, r5
 8019908:	f001 fef2 	bl	801b6f0 <__sinit>
 801990c:	4b23      	ldr	r3, [pc, #140]	; (801999c <_puts_r+0xac>)
 801990e:	429c      	cmp	r4, r3
 8019910:	d117      	bne.n	8019942 <_puts_r+0x52>
 8019912:	686c      	ldr	r4, [r5, #4]
 8019914:	89a3      	ldrh	r3, [r4, #12]
 8019916:	071b      	lsls	r3, r3, #28
 8019918:	d51d      	bpl.n	8019956 <_puts_r+0x66>
 801991a:	6923      	ldr	r3, [r4, #16]
 801991c:	b1db      	cbz	r3, 8019956 <_puts_r+0x66>
 801991e:	3e01      	subs	r6, #1
 8019920:	68a3      	ldr	r3, [r4, #8]
 8019922:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019926:	3b01      	subs	r3, #1
 8019928:	60a3      	str	r3, [r4, #8]
 801992a:	b9e9      	cbnz	r1, 8019968 <_puts_r+0x78>
 801992c:	2b00      	cmp	r3, #0
 801992e:	da2e      	bge.n	801998e <_puts_r+0x9e>
 8019930:	4622      	mov	r2, r4
 8019932:	210a      	movs	r1, #10
 8019934:	4628      	mov	r0, r5
 8019936:	f000 ff45 	bl	801a7c4 <__swbuf_r>
 801993a:	3001      	adds	r0, #1
 801993c:	d011      	beq.n	8019962 <_puts_r+0x72>
 801993e:	200a      	movs	r0, #10
 8019940:	e011      	b.n	8019966 <_puts_r+0x76>
 8019942:	4b17      	ldr	r3, [pc, #92]	; (80199a0 <_puts_r+0xb0>)
 8019944:	429c      	cmp	r4, r3
 8019946:	d101      	bne.n	801994c <_puts_r+0x5c>
 8019948:	68ac      	ldr	r4, [r5, #8]
 801994a:	e7e3      	b.n	8019914 <_puts_r+0x24>
 801994c:	4b15      	ldr	r3, [pc, #84]	; (80199a4 <_puts_r+0xb4>)
 801994e:	429c      	cmp	r4, r3
 8019950:	bf08      	it	eq
 8019952:	68ec      	ldreq	r4, [r5, #12]
 8019954:	e7de      	b.n	8019914 <_puts_r+0x24>
 8019956:	4621      	mov	r1, r4
 8019958:	4628      	mov	r0, r5
 801995a:	f000 ff93 	bl	801a884 <__swsetup_r>
 801995e:	2800      	cmp	r0, #0
 8019960:	d0dd      	beq.n	801991e <_puts_r+0x2e>
 8019962:	f04f 30ff 	mov.w	r0, #4294967295
 8019966:	bd70      	pop	{r4, r5, r6, pc}
 8019968:	2b00      	cmp	r3, #0
 801996a:	da04      	bge.n	8019976 <_puts_r+0x86>
 801996c:	69a2      	ldr	r2, [r4, #24]
 801996e:	429a      	cmp	r2, r3
 8019970:	dc06      	bgt.n	8019980 <_puts_r+0x90>
 8019972:	290a      	cmp	r1, #10
 8019974:	d004      	beq.n	8019980 <_puts_r+0x90>
 8019976:	6823      	ldr	r3, [r4, #0]
 8019978:	1c5a      	adds	r2, r3, #1
 801997a:	6022      	str	r2, [r4, #0]
 801997c:	7019      	strb	r1, [r3, #0]
 801997e:	e7cf      	b.n	8019920 <_puts_r+0x30>
 8019980:	4622      	mov	r2, r4
 8019982:	4628      	mov	r0, r5
 8019984:	f000 ff1e 	bl	801a7c4 <__swbuf_r>
 8019988:	3001      	adds	r0, #1
 801998a:	d1c9      	bne.n	8019920 <_puts_r+0x30>
 801998c:	e7e9      	b.n	8019962 <_puts_r+0x72>
 801998e:	6823      	ldr	r3, [r4, #0]
 8019990:	200a      	movs	r0, #10
 8019992:	1c5a      	adds	r2, r3, #1
 8019994:	6022      	str	r2, [r4, #0]
 8019996:	7018      	strb	r0, [r3, #0]
 8019998:	e7e5      	b.n	8019966 <_puts_r+0x76>
 801999a:	bf00      	nop
 801999c:	08020d20 	.word	0x08020d20
 80199a0:	08020d40 	.word	0x08020d40
 80199a4:	08020d00 	.word	0x08020d00

080199a8 <puts>:
 80199a8:	4b02      	ldr	r3, [pc, #8]	; (80199b4 <puts+0xc>)
 80199aa:	4601      	mov	r1, r0
 80199ac:	6818      	ldr	r0, [r3, #0]
 80199ae:	f7ff bf9f 	b.w	80198f0 <_puts_r>
 80199b2:	bf00      	nop
 80199b4:	2000001c 	.word	0x2000001c

080199b8 <rand>:
 80199b8:	b538      	push	{r3, r4, r5, lr}
 80199ba:	4b13      	ldr	r3, [pc, #76]	; (8019a08 <rand+0x50>)
 80199bc:	681c      	ldr	r4, [r3, #0]
 80199be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80199c0:	b97b      	cbnz	r3, 80199e2 <rand+0x2a>
 80199c2:	2018      	movs	r0, #24
 80199c4:	f002 fab8 	bl	801bf38 <malloc>
 80199c8:	4a10      	ldr	r2, [pc, #64]	; (8019a0c <rand+0x54>)
 80199ca:	4b11      	ldr	r3, [pc, #68]	; (8019a10 <rand+0x58>)
 80199cc:	63a0      	str	r0, [r4, #56]	; 0x38
 80199ce:	e9c0 2300 	strd	r2, r3, [r0]
 80199d2:	4b10      	ldr	r3, [pc, #64]	; (8019a14 <rand+0x5c>)
 80199d4:	6083      	str	r3, [r0, #8]
 80199d6:	230b      	movs	r3, #11
 80199d8:	8183      	strh	r3, [r0, #12]
 80199da:	2201      	movs	r2, #1
 80199dc:	2300      	movs	r3, #0
 80199de:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80199e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80199e4:	480c      	ldr	r0, [pc, #48]	; (8019a18 <rand+0x60>)
 80199e6:	690a      	ldr	r2, [r1, #16]
 80199e8:	694b      	ldr	r3, [r1, #20]
 80199ea:	4c0c      	ldr	r4, [pc, #48]	; (8019a1c <rand+0x64>)
 80199ec:	4350      	muls	r0, r2
 80199ee:	fb04 0003 	mla	r0, r4, r3, r0
 80199f2:	fba2 2304 	umull	r2, r3, r2, r4
 80199f6:	4403      	add	r3, r0
 80199f8:	1c54      	adds	r4, r2, #1
 80199fa:	f143 0500 	adc.w	r5, r3, #0
 80199fe:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8019a02:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8019a06:	bd38      	pop	{r3, r4, r5, pc}
 8019a08:	2000001c 	.word	0x2000001c
 8019a0c:	abcd330e 	.word	0xabcd330e
 8019a10:	e66d1234 	.word	0xe66d1234
 8019a14:	0005deec 	.word	0x0005deec
 8019a18:	5851f42d 	.word	0x5851f42d
 8019a1c:	4c957f2d 	.word	0x4c957f2d

08019a20 <nanf>:
 8019a20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019a28 <nanf+0x8>
 8019a24:	4770      	bx	lr
 8019a26:	bf00      	nop
 8019a28:	7fc00000 	.word	0x7fc00000

08019a2c <siprintf>:
 8019a2c:	b40e      	push	{r1, r2, r3}
 8019a2e:	b500      	push	{lr}
 8019a30:	b09c      	sub	sp, #112	; 0x70
 8019a32:	ab1d      	add	r3, sp, #116	; 0x74
 8019a34:	9002      	str	r0, [sp, #8]
 8019a36:	9006      	str	r0, [sp, #24]
 8019a38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019a3c:	4809      	ldr	r0, [pc, #36]	; (8019a64 <siprintf+0x38>)
 8019a3e:	9107      	str	r1, [sp, #28]
 8019a40:	9104      	str	r1, [sp, #16]
 8019a42:	4909      	ldr	r1, [pc, #36]	; (8019a68 <siprintf+0x3c>)
 8019a44:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a48:	9105      	str	r1, [sp, #20]
 8019a4a:	6800      	ldr	r0, [r0, #0]
 8019a4c:	9301      	str	r3, [sp, #4]
 8019a4e:	a902      	add	r1, sp, #8
 8019a50:	f002 ff8a 	bl	801c968 <_svfiprintf_r>
 8019a54:	9b02      	ldr	r3, [sp, #8]
 8019a56:	2200      	movs	r2, #0
 8019a58:	701a      	strb	r2, [r3, #0]
 8019a5a:	b01c      	add	sp, #112	; 0x70
 8019a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019a60:	b003      	add	sp, #12
 8019a62:	4770      	bx	lr
 8019a64:	2000001c 	.word	0x2000001c
 8019a68:	ffff0208 	.word	0xffff0208

08019a6c <strncmp>:
 8019a6c:	b510      	push	{r4, lr}
 8019a6e:	b16a      	cbz	r2, 8019a8c <strncmp+0x20>
 8019a70:	3901      	subs	r1, #1
 8019a72:	1884      	adds	r4, r0, r2
 8019a74:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019a78:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019a7c:	4293      	cmp	r3, r2
 8019a7e:	d103      	bne.n	8019a88 <strncmp+0x1c>
 8019a80:	42a0      	cmp	r0, r4
 8019a82:	d001      	beq.n	8019a88 <strncmp+0x1c>
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d1f5      	bne.n	8019a74 <strncmp+0x8>
 8019a88:	1a98      	subs	r0, r3, r2
 8019a8a:	bd10      	pop	{r4, pc}
 8019a8c:	4610      	mov	r0, r2
 8019a8e:	e7fc      	b.n	8019a8a <strncmp+0x1e>

08019a90 <strstr>:
 8019a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a92:	7803      	ldrb	r3, [r0, #0]
 8019a94:	b17b      	cbz	r3, 8019ab6 <strstr+0x26>
 8019a96:	4604      	mov	r4, r0
 8019a98:	7823      	ldrb	r3, [r4, #0]
 8019a9a:	4620      	mov	r0, r4
 8019a9c:	1c66      	adds	r6, r4, #1
 8019a9e:	b17b      	cbz	r3, 8019ac0 <strstr+0x30>
 8019aa0:	1e4a      	subs	r2, r1, #1
 8019aa2:	1e63      	subs	r3, r4, #1
 8019aa4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8019aa8:	b14d      	cbz	r5, 8019abe <strstr+0x2e>
 8019aaa:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8019aae:	42af      	cmp	r7, r5
 8019ab0:	4634      	mov	r4, r6
 8019ab2:	d0f7      	beq.n	8019aa4 <strstr+0x14>
 8019ab4:	e7f0      	b.n	8019a98 <strstr+0x8>
 8019ab6:	780b      	ldrb	r3, [r1, #0]
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	bf18      	it	ne
 8019abc:	2000      	movne	r0, #0
 8019abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ac0:	4618      	mov	r0, r3
 8019ac2:	e7fc      	b.n	8019abe <strstr+0x2e>

08019ac4 <sulp>:
 8019ac4:	b570      	push	{r4, r5, r6, lr}
 8019ac6:	4604      	mov	r4, r0
 8019ac8:	460d      	mov	r5, r1
 8019aca:	4616      	mov	r6, r2
 8019acc:	ec45 4b10 	vmov	d0, r4, r5
 8019ad0:	f002 fd06 	bl	801c4e0 <__ulp>
 8019ad4:	b17e      	cbz	r6, 8019af6 <sulp+0x32>
 8019ad6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8019ada:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	dd09      	ble.n	8019af6 <sulp+0x32>
 8019ae2:	051b      	lsls	r3, r3, #20
 8019ae4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8019ae8:	2000      	movs	r0, #0
 8019aea:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8019aee:	ec41 0b17 	vmov	d7, r0, r1
 8019af2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019af6:	bd70      	pop	{r4, r5, r6, pc}

08019af8 <_strtod_l>:
 8019af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019afc:	ed2d 8b0c 	vpush	{d8-d13}
 8019b00:	4698      	mov	r8, r3
 8019b02:	b09d      	sub	sp, #116	; 0x74
 8019b04:	2300      	movs	r3, #0
 8019b06:	4604      	mov	r4, r0
 8019b08:	4640      	mov	r0, r8
 8019b0a:	460e      	mov	r6, r1
 8019b0c:	9214      	str	r2, [sp, #80]	; 0x50
 8019b0e:	9318      	str	r3, [sp, #96]	; 0x60
 8019b10:	f002 f99e 	bl	801be50 <__localeconv_l>
 8019b14:	4681      	mov	r9, r0
 8019b16:	6800      	ldr	r0, [r0, #0]
 8019b18:	f7e6 fb92 	bl	8000240 <strlen>
 8019b1c:	f04f 0a00 	mov.w	sl, #0
 8019b20:	4607      	mov	r7, r0
 8019b22:	f04f 0b00 	mov.w	fp, #0
 8019b26:	9617      	str	r6, [sp, #92]	; 0x5c
 8019b28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019b2a:	781a      	ldrb	r2, [r3, #0]
 8019b2c:	2a0d      	cmp	r2, #13
 8019b2e:	d834      	bhi.n	8019b9a <_strtod_l+0xa2>
 8019b30:	2a09      	cmp	r2, #9
 8019b32:	d238      	bcs.n	8019ba6 <_strtod_l+0xae>
 8019b34:	2a00      	cmp	r2, #0
 8019b36:	d040      	beq.n	8019bba <_strtod_l+0xc2>
 8019b38:	2300      	movs	r3, #0
 8019b3a:	930d      	str	r3, [sp, #52]	; 0x34
 8019b3c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8019b3e:	782b      	ldrb	r3, [r5, #0]
 8019b40:	2b30      	cmp	r3, #48	; 0x30
 8019b42:	f040 80b3 	bne.w	8019cac <_strtod_l+0x1b4>
 8019b46:	786b      	ldrb	r3, [r5, #1]
 8019b48:	2b58      	cmp	r3, #88	; 0x58
 8019b4a:	d001      	beq.n	8019b50 <_strtod_l+0x58>
 8019b4c:	2b78      	cmp	r3, #120	; 0x78
 8019b4e:	d169      	bne.n	8019c24 <_strtod_l+0x12c>
 8019b50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019b52:	9301      	str	r3, [sp, #4]
 8019b54:	ab18      	add	r3, sp, #96	; 0x60
 8019b56:	9300      	str	r3, [sp, #0]
 8019b58:	f8cd 8008 	str.w	r8, [sp, #8]
 8019b5c:	ab19      	add	r3, sp, #100	; 0x64
 8019b5e:	4a8f      	ldr	r2, [pc, #572]	; (8019d9c <_strtod_l+0x2a4>)
 8019b60:	a917      	add	r1, sp, #92	; 0x5c
 8019b62:	4620      	mov	r0, r4
 8019b64:	f001 fe9d 	bl	801b8a2 <__gethex>
 8019b68:	f010 0607 	ands.w	r6, r0, #7
 8019b6c:	4607      	mov	r7, r0
 8019b6e:	d005      	beq.n	8019b7c <_strtod_l+0x84>
 8019b70:	2e06      	cmp	r6, #6
 8019b72:	d12c      	bne.n	8019bce <_strtod_l+0xd6>
 8019b74:	3501      	adds	r5, #1
 8019b76:	2300      	movs	r3, #0
 8019b78:	9517      	str	r5, [sp, #92]	; 0x5c
 8019b7a:	930d      	str	r3, [sp, #52]	; 0x34
 8019b7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	f040 855e 	bne.w	801a640 <_strtod_l+0xb48>
 8019b84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019b86:	b1eb      	cbz	r3, 8019bc4 <_strtod_l+0xcc>
 8019b88:	ec4b ab17 	vmov	d7, sl, fp
 8019b8c:	eeb1 0b47 	vneg.f64	d0, d7
 8019b90:	b01d      	add	sp, #116	; 0x74
 8019b92:	ecbd 8b0c 	vpop	{d8-d13}
 8019b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b9a:	2a2b      	cmp	r2, #43	; 0x2b
 8019b9c:	d015      	beq.n	8019bca <_strtod_l+0xd2>
 8019b9e:	2a2d      	cmp	r2, #45	; 0x2d
 8019ba0:	d004      	beq.n	8019bac <_strtod_l+0xb4>
 8019ba2:	2a20      	cmp	r2, #32
 8019ba4:	d1c8      	bne.n	8019b38 <_strtod_l+0x40>
 8019ba6:	3301      	adds	r3, #1
 8019ba8:	9317      	str	r3, [sp, #92]	; 0x5c
 8019baa:	e7bd      	b.n	8019b28 <_strtod_l+0x30>
 8019bac:	2201      	movs	r2, #1
 8019bae:	920d      	str	r2, [sp, #52]	; 0x34
 8019bb0:	1c5a      	adds	r2, r3, #1
 8019bb2:	9217      	str	r2, [sp, #92]	; 0x5c
 8019bb4:	785b      	ldrb	r3, [r3, #1]
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d1c0      	bne.n	8019b3c <_strtod_l+0x44>
 8019bba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019bbc:	9617      	str	r6, [sp, #92]	; 0x5c
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	f040 853c 	bne.w	801a63c <_strtod_l+0xb44>
 8019bc4:	ec4b ab10 	vmov	d0, sl, fp
 8019bc8:	e7e2      	b.n	8019b90 <_strtod_l+0x98>
 8019bca:	2200      	movs	r2, #0
 8019bcc:	e7ef      	b.n	8019bae <_strtod_l+0xb6>
 8019bce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019bd0:	b13a      	cbz	r2, 8019be2 <_strtod_l+0xea>
 8019bd2:	2135      	movs	r1, #53	; 0x35
 8019bd4:	a81a      	add	r0, sp, #104	; 0x68
 8019bd6:	f002 fd7c 	bl	801c6d2 <__copybits>
 8019bda:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019bdc:	4620      	mov	r0, r4
 8019bde:	f002 f9e7 	bl	801bfb0 <_Bfree>
 8019be2:	3e01      	subs	r6, #1
 8019be4:	2e04      	cmp	r6, #4
 8019be6:	d806      	bhi.n	8019bf6 <_strtod_l+0xfe>
 8019be8:	e8df f006 	tbb	[pc, r6]
 8019bec:	1714030a 	.word	0x1714030a
 8019bf0:	0a          	.byte	0x0a
 8019bf1:	00          	.byte	0x00
 8019bf2:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8019bf6:	073b      	lsls	r3, r7, #28
 8019bf8:	d5c0      	bpl.n	8019b7c <_strtod_l+0x84>
 8019bfa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8019bfe:	e7bd      	b.n	8019b7c <_strtod_l+0x84>
 8019c00:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8019c04:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8019c06:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8019c0a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8019c0e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8019c12:	e7f0      	b.n	8019bf6 <_strtod_l+0xfe>
 8019c14:	f8df b188 	ldr.w	fp, [pc, #392]	; 8019da0 <_strtod_l+0x2a8>
 8019c18:	e7ed      	b.n	8019bf6 <_strtod_l+0xfe>
 8019c1a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8019c1e:	f04f 3aff 	mov.w	sl, #4294967295
 8019c22:	e7e8      	b.n	8019bf6 <_strtod_l+0xfe>
 8019c24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019c26:	1c5a      	adds	r2, r3, #1
 8019c28:	9217      	str	r2, [sp, #92]	; 0x5c
 8019c2a:	785b      	ldrb	r3, [r3, #1]
 8019c2c:	2b30      	cmp	r3, #48	; 0x30
 8019c2e:	d0f9      	beq.n	8019c24 <_strtod_l+0x12c>
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d0a3      	beq.n	8019b7c <_strtod_l+0x84>
 8019c34:	2301      	movs	r3, #1
 8019c36:	930a      	str	r3, [sp, #40]	; 0x28
 8019c38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019c3a:	930c      	str	r3, [sp, #48]	; 0x30
 8019c3c:	2300      	movs	r3, #0
 8019c3e:	9306      	str	r3, [sp, #24]
 8019c40:	9308      	str	r3, [sp, #32]
 8019c42:	461d      	mov	r5, r3
 8019c44:	220a      	movs	r2, #10
 8019c46:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8019c48:	f890 8000 	ldrb.w	r8, [r0]
 8019c4c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8019c50:	b2d9      	uxtb	r1, r3
 8019c52:	2909      	cmp	r1, #9
 8019c54:	d92c      	bls.n	8019cb0 <_strtod_l+0x1b8>
 8019c56:	463a      	mov	r2, r7
 8019c58:	f8d9 1000 	ldr.w	r1, [r9]
 8019c5c:	f7ff ff06 	bl	8019a6c <strncmp>
 8019c60:	2800      	cmp	r0, #0
 8019c62:	d035      	beq.n	8019cd0 <_strtod_l+0x1d8>
 8019c64:	2000      	movs	r0, #0
 8019c66:	4642      	mov	r2, r8
 8019c68:	462b      	mov	r3, r5
 8019c6a:	4601      	mov	r1, r0
 8019c6c:	9004      	str	r0, [sp, #16]
 8019c6e:	2a65      	cmp	r2, #101	; 0x65
 8019c70:	d001      	beq.n	8019c76 <_strtod_l+0x17e>
 8019c72:	2a45      	cmp	r2, #69	; 0x45
 8019c74:	d117      	bne.n	8019ca6 <_strtod_l+0x1ae>
 8019c76:	b923      	cbnz	r3, 8019c82 <_strtod_l+0x18a>
 8019c78:	b910      	cbnz	r0, 8019c80 <_strtod_l+0x188>
 8019c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d09c      	beq.n	8019bba <_strtod_l+0xc2>
 8019c80:	2300      	movs	r3, #0
 8019c82:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8019c84:	1c72      	adds	r2, r6, #1
 8019c86:	9217      	str	r2, [sp, #92]	; 0x5c
 8019c88:	7872      	ldrb	r2, [r6, #1]
 8019c8a:	2a2b      	cmp	r2, #43	; 0x2b
 8019c8c:	f000 8082 	beq.w	8019d94 <_strtod_l+0x29c>
 8019c90:	2a2d      	cmp	r2, #45	; 0x2d
 8019c92:	d079      	beq.n	8019d88 <_strtod_l+0x290>
 8019c94:	f04f 0e00 	mov.w	lr, #0
 8019c98:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8019c9c:	f1bc 0f09 	cmp.w	ip, #9
 8019ca0:	f240 8086 	bls.w	8019db0 <_strtod_l+0x2b8>
 8019ca4:	9617      	str	r6, [sp, #92]	; 0x5c
 8019ca6:	f04f 0800 	mov.w	r8, #0
 8019caa:	e0a8      	b.n	8019dfe <_strtod_l+0x306>
 8019cac:	2300      	movs	r3, #0
 8019cae:	e7c2      	b.n	8019c36 <_strtod_l+0x13e>
 8019cb0:	2d08      	cmp	r5, #8
 8019cb2:	bfd5      	itete	le
 8019cb4:	9908      	ldrle	r1, [sp, #32]
 8019cb6:	9906      	ldrgt	r1, [sp, #24]
 8019cb8:	fb02 3301 	mlale	r3, r2, r1, r3
 8019cbc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8019cc0:	f100 0001 	add.w	r0, r0, #1
 8019cc4:	bfd4      	ite	le
 8019cc6:	9308      	strle	r3, [sp, #32]
 8019cc8:	9306      	strgt	r3, [sp, #24]
 8019cca:	3501      	adds	r5, #1
 8019ccc:	9017      	str	r0, [sp, #92]	; 0x5c
 8019cce:	e7ba      	b.n	8019c46 <_strtod_l+0x14e>
 8019cd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019cd2:	19da      	adds	r2, r3, r7
 8019cd4:	9217      	str	r2, [sp, #92]	; 0x5c
 8019cd6:	5dda      	ldrb	r2, [r3, r7]
 8019cd8:	2d00      	cmp	r5, #0
 8019cda:	d038      	beq.n	8019d4e <_strtod_l+0x256>
 8019cdc:	4601      	mov	r1, r0
 8019cde:	462b      	mov	r3, r5
 8019ce0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8019ce4:	2f09      	cmp	r7, #9
 8019ce6:	d913      	bls.n	8019d10 <_strtod_l+0x218>
 8019ce8:	2701      	movs	r7, #1
 8019cea:	9704      	str	r7, [sp, #16]
 8019cec:	e7bf      	b.n	8019c6e <_strtod_l+0x176>
 8019cee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019cf0:	1c5a      	adds	r2, r3, #1
 8019cf2:	9217      	str	r2, [sp, #92]	; 0x5c
 8019cf4:	785a      	ldrb	r2, [r3, #1]
 8019cf6:	3001      	adds	r0, #1
 8019cf8:	2a30      	cmp	r2, #48	; 0x30
 8019cfa:	d0f8      	beq.n	8019cee <_strtod_l+0x1f6>
 8019cfc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8019d00:	2b08      	cmp	r3, #8
 8019d02:	f200 84a2 	bhi.w	801a64a <_strtod_l+0xb52>
 8019d06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019d08:	930c      	str	r3, [sp, #48]	; 0x30
 8019d0a:	4601      	mov	r1, r0
 8019d0c:	2000      	movs	r0, #0
 8019d0e:	4603      	mov	r3, r0
 8019d10:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 8019d14:	f100 0701 	add.w	r7, r0, #1
 8019d18:	d013      	beq.n	8019d42 <_strtod_l+0x24a>
 8019d1a:	4439      	add	r1, r7
 8019d1c:	eb00 0e03 	add.w	lr, r0, r3
 8019d20:	461f      	mov	r7, r3
 8019d22:	f04f 0c0a 	mov.w	ip, #10
 8019d26:	45be      	cmp	lr, r7
 8019d28:	d113      	bne.n	8019d52 <_strtod_l+0x25a>
 8019d2a:	181f      	adds	r7, r3, r0
 8019d2c:	2f08      	cmp	r7, #8
 8019d2e:	f103 0301 	add.w	r3, r3, #1
 8019d32:	4403      	add	r3, r0
 8019d34:	dc1d      	bgt.n	8019d72 <_strtod_l+0x27a>
 8019d36:	9a08      	ldr	r2, [sp, #32]
 8019d38:	200a      	movs	r0, #10
 8019d3a:	fb00 8202 	mla	r2, r0, r2, r8
 8019d3e:	9208      	str	r2, [sp, #32]
 8019d40:	2700      	movs	r7, #0
 8019d42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019d44:	1c50      	adds	r0, r2, #1
 8019d46:	9017      	str	r0, [sp, #92]	; 0x5c
 8019d48:	7852      	ldrb	r2, [r2, #1]
 8019d4a:	4638      	mov	r0, r7
 8019d4c:	e7c8      	b.n	8019ce0 <_strtod_l+0x1e8>
 8019d4e:	4628      	mov	r0, r5
 8019d50:	e7d2      	b.n	8019cf8 <_strtod_l+0x200>
 8019d52:	2f08      	cmp	r7, #8
 8019d54:	f107 0701 	add.w	r7, r7, #1
 8019d58:	dc04      	bgt.n	8019d64 <_strtod_l+0x26c>
 8019d5a:	9a08      	ldr	r2, [sp, #32]
 8019d5c:	fb0c f202 	mul.w	r2, ip, r2
 8019d60:	9208      	str	r2, [sp, #32]
 8019d62:	e7e0      	b.n	8019d26 <_strtod_l+0x22e>
 8019d64:	2f10      	cmp	r7, #16
 8019d66:	bfde      	ittt	le
 8019d68:	9a06      	ldrle	r2, [sp, #24]
 8019d6a:	fb0c f202 	mulle.w	r2, ip, r2
 8019d6e:	9206      	strle	r2, [sp, #24]
 8019d70:	e7d9      	b.n	8019d26 <_strtod_l+0x22e>
 8019d72:	2b10      	cmp	r3, #16
 8019d74:	bfdf      	itttt	le
 8019d76:	9a06      	ldrle	r2, [sp, #24]
 8019d78:	200a      	movle	r0, #10
 8019d7a:	fb00 8202 	mlale	r2, r0, r2, r8
 8019d7e:	9206      	strle	r2, [sp, #24]
 8019d80:	e7de      	b.n	8019d40 <_strtod_l+0x248>
 8019d82:	2301      	movs	r3, #1
 8019d84:	9304      	str	r3, [sp, #16]
 8019d86:	e777      	b.n	8019c78 <_strtod_l+0x180>
 8019d88:	f04f 0e01 	mov.w	lr, #1
 8019d8c:	1cb2      	adds	r2, r6, #2
 8019d8e:	9217      	str	r2, [sp, #92]	; 0x5c
 8019d90:	78b2      	ldrb	r2, [r6, #2]
 8019d92:	e781      	b.n	8019c98 <_strtod_l+0x1a0>
 8019d94:	f04f 0e00 	mov.w	lr, #0
 8019d98:	e7f8      	b.n	8019d8c <_strtod_l+0x294>
 8019d9a:	bf00      	nop
 8019d9c:	08020b9c 	.word	0x08020b9c
 8019da0:	7ff00000 	.word	0x7ff00000
 8019da4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019da6:	f102 0c01 	add.w	ip, r2, #1
 8019daa:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8019dae:	7852      	ldrb	r2, [r2, #1]
 8019db0:	2a30      	cmp	r2, #48	; 0x30
 8019db2:	d0f7      	beq.n	8019da4 <_strtod_l+0x2ac>
 8019db4:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 8019db8:	f1bc 0f08 	cmp.w	ip, #8
 8019dbc:	f63f af73 	bhi.w	8019ca6 <_strtod_l+0x1ae>
 8019dc0:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 8019dc4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019dc6:	920e      	str	r2, [sp, #56]	; 0x38
 8019dc8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019dca:	f102 0c01 	add.w	ip, r2, #1
 8019dce:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8019dd2:	7852      	ldrb	r2, [r2, #1]
 8019dd4:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8019dd8:	f1b9 0f09 	cmp.w	r9, #9
 8019ddc:	d939      	bls.n	8019e52 <_strtod_l+0x35a>
 8019dde:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8019de0:	ebac 0c07 	sub.w	ip, ip, r7
 8019de4:	f1bc 0f08 	cmp.w	ip, #8
 8019de8:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 8019dec:	dc37      	bgt.n	8019e5e <_strtod_l+0x366>
 8019dee:	45e0      	cmp	r8, ip
 8019df0:	bfa8      	it	ge
 8019df2:	46e0      	movge	r8, ip
 8019df4:	f1be 0f00 	cmp.w	lr, #0
 8019df8:	d001      	beq.n	8019dfe <_strtod_l+0x306>
 8019dfa:	f1c8 0800 	rsb	r8, r8, #0
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	d151      	bne.n	8019ea6 <_strtod_l+0x3ae>
 8019e02:	2800      	cmp	r0, #0
 8019e04:	f47f aeba 	bne.w	8019b7c <_strtod_l+0x84>
 8019e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	f47f aeb6 	bne.w	8019b7c <_strtod_l+0x84>
 8019e10:	9b04      	ldr	r3, [sp, #16]
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	f47f aed1 	bne.w	8019bba <_strtod_l+0xc2>
 8019e18:	2a4e      	cmp	r2, #78	; 0x4e
 8019e1a:	d027      	beq.n	8019e6c <_strtod_l+0x374>
 8019e1c:	dc21      	bgt.n	8019e62 <_strtod_l+0x36a>
 8019e1e:	2a49      	cmp	r2, #73	; 0x49
 8019e20:	f47f aecb 	bne.w	8019bba <_strtod_l+0xc2>
 8019e24:	499a      	ldr	r1, [pc, #616]	; (801a090 <_strtod_l+0x598>)
 8019e26:	a817      	add	r0, sp, #92	; 0x5c
 8019e28:	f001 ff6e 	bl	801bd08 <__match>
 8019e2c:	2800      	cmp	r0, #0
 8019e2e:	f43f aec4 	beq.w	8019bba <_strtod_l+0xc2>
 8019e32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019e34:	4997      	ldr	r1, [pc, #604]	; (801a094 <_strtod_l+0x59c>)
 8019e36:	3b01      	subs	r3, #1
 8019e38:	a817      	add	r0, sp, #92	; 0x5c
 8019e3a:	9317      	str	r3, [sp, #92]	; 0x5c
 8019e3c:	f001 ff64 	bl	801bd08 <__match>
 8019e40:	b910      	cbnz	r0, 8019e48 <_strtod_l+0x350>
 8019e42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019e44:	3301      	adds	r3, #1
 8019e46:	9317      	str	r3, [sp, #92]	; 0x5c
 8019e48:	f8df b260 	ldr.w	fp, [pc, #608]	; 801a0ac <_strtod_l+0x5b4>
 8019e4c:	f04f 0a00 	mov.w	sl, #0
 8019e50:	e694      	b.n	8019b7c <_strtod_l+0x84>
 8019e52:	270a      	movs	r7, #10
 8019e54:	fb07 2808 	mla	r8, r7, r8, r2
 8019e58:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8019e5c:	e7b4      	b.n	8019dc8 <_strtod_l+0x2d0>
 8019e5e:	46e0      	mov	r8, ip
 8019e60:	e7c8      	b.n	8019df4 <_strtod_l+0x2fc>
 8019e62:	2a69      	cmp	r2, #105	; 0x69
 8019e64:	d0de      	beq.n	8019e24 <_strtod_l+0x32c>
 8019e66:	2a6e      	cmp	r2, #110	; 0x6e
 8019e68:	f47f aea7 	bne.w	8019bba <_strtod_l+0xc2>
 8019e6c:	498a      	ldr	r1, [pc, #552]	; (801a098 <_strtod_l+0x5a0>)
 8019e6e:	a817      	add	r0, sp, #92	; 0x5c
 8019e70:	f001 ff4a 	bl	801bd08 <__match>
 8019e74:	2800      	cmp	r0, #0
 8019e76:	f43f aea0 	beq.w	8019bba <_strtod_l+0xc2>
 8019e7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019e7c:	781b      	ldrb	r3, [r3, #0]
 8019e7e:	2b28      	cmp	r3, #40	; 0x28
 8019e80:	d10e      	bne.n	8019ea0 <_strtod_l+0x3a8>
 8019e82:	aa1a      	add	r2, sp, #104	; 0x68
 8019e84:	4985      	ldr	r1, [pc, #532]	; (801a09c <_strtod_l+0x5a4>)
 8019e86:	a817      	add	r0, sp, #92	; 0x5c
 8019e88:	f001 ff52 	bl	801bd30 <__hexnan>
 8019e8c:	2805      	cmp	r0, #5
 8019e8e:	d107      	bne.n	8019ea0 <_strtod_l+0x3a8>
 8019e90:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019e92:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8019e96:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8019e9a:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8019e9e:	e66d      	b.n	8019b7c <_strtod_l+0x84>
 8019ea0:	f8df b20c 	ldr.w	fp, [pc, #524]	; 801a0b0 <_strtod_l+0x5b8>
 8019ea4:	e7d2      	b.n	8019e4c <_strtod_l+0x354>
 8019ea6:	eddd 7a08 	vldr	s15, [sp, #32]
 8019eaa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019eae:	eba8 0201 	sub.w	r2, r8, r1
 8019eb2:	2d00      	cmp	r5, #0
 8019eb4:	bf08      	it	eq
 8019eb6:	461d      	moveq	r5, r3
 8019eb8:	2b10      	cmp	r3, #16
 8019eba:	9204      	str	r2, [sp, #16]
 8019ebc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8019ec0:	461a      	mov	r2, r3
 8019ec2:	bfa8      	it	ge
 8019ec4:	2210      	movge	r2, #16
 8019ec6:	2b09      	cmp	r3, #9
 8019ec8:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8019ecc:	dc14      	bgt.n	8019ef8 <_strtod_l+0x400>
 8019ece:	9904      	ldr	r1, [sp, #16]
 8019ed0:	2900      	cmp	r1, #0
 8019ed2:	f43f ae53 	beq.w	8019b7c <_strtod_l+0x84>
 8019ed6:	9904      	ldr	r1, [sp, #16]
 8019ed8:	dd72      	ble.n	8019fc0 <_strtod_l+0x4c8>
 8019eda:	2916      	cmp	r1, #22
 8019edc:	dc5a      	bgt.n	8019f94 <_strtod_l+0x49c>
 8019ede:	4970      	ldr	r1, [pc, #448]	; (801a0a0 <_strtod_l+0x5a8>)
 8019ee0:	9b04      	ldr	r3, [sp, #16]
 8019ee2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019ee6:	ed91 7b00 	vldr	d7, [r1]
 8019eea:	ec4b ab16 	vmov	d6, sl, fp
 8019eee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019ef2:	ec5b ab17 	vmov	sl, fp, d7
 8019ef6:	e641      	b.n	8019b7c <_strtod_l+0x84>
 8019ef8:	4969      	ldr	r1, [pc, #420]	; (801a0a0 <_strtod_l+0x5a8>)
 8019efa:	eddd 7a06 	vldr	s15, [sp, #24]
 8019efe:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8019f02:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8019f06:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8019f0a:	2b0f      	cmp	r3, #15
 8019f0c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019f10:	eea5 7b06 	vfma.f64	d7, d5, d6
 8019f14:	ec5b ab17 	vmov	sl, fp, d7
 8019f18:	ddd9      	ble.n	8019ece <_strtod_l+0x3d6>
 8019f1a:	9904      	ldr	r1, [sp, #16]
 8019f1c:	1a9a      	subs	r2, r3, r2
 8019f1e:	440a      	add	r2, r1
 8019f20:	2a00      	cmp	r2, #0
 8019f22:	f340 8096 	ble.w	801a052 <_strtod_l+0x55a>
 8019f26:	f012 000f 	ands.w	r0, r2, #15
 8019f2a:	d00a      	beq.n	8019f42 <_strtod_l+0x44a>
 8019f2c:	495c      	ldr	r1, [pc, #368]	; (801a0a0 <_strtod_l+0x5a8>)
 8019f2e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8019f32:	ed91 7b00 	vldr	d7, [r1]
 8019f36:	ec4b ab16 	vmov	d6, sl, fp
 8019f3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019f3e:	ec5b ab17 	vmov	sl, fp, d7
 8019f42:	f032 020f 	bics.w	r2, r2, #15
 8019f46:	d072      	beq.n	801a02e <_strtod_l+0x536>
 8019f48:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8019f4c:	dd45      	ble.n	8019fda <_strtod_l+0x4e2>
 8019f4e:	2500      	movs	r5, #0
 8019f50:	46a8      	mov	r8, r5
 8019f52:	9506      	str	r5, [sp, #24]
 8019f54:	46a9      	mov	r9, r5
 8019f56:	2322      	movs	r3, #34	; 0x22
 8019f58:	f8df b150 	ldr.w	fp, [pc, #336]	; 801a0ac <_strtod_l+0x5b4>
 8019f5c:	6023      	str	r3, [r4, #0]
 8019f5e:	f04f 0a00 	mov.w	sl, #0
 8019f62:	9b06      	ldr	r3, [sp, #24]
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	f43f ae09 	beq.w	8019b7c <_strtod_l+0x84>
 8019f6a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019f6c:	4620      	mov	r0, r4
 8019f6e:	f002 f81f 	bl	801bfb0 <_Bfree>
 8019f72:	4649      	mov	r1, r9
 8019f74:	4620      	mov	r0, r4
 8019f76:	f002 f81b 	bl	801bfb0 <_Bfree>
 8019f7a:	4641      	mov	r1, r8
 8019f7c:	4620      	mov	r0, r4
 8019f7e:	f002 f817 	bl	801bfb0 <_Bfree>
 8019f82:	9906      	ldr	r1, [sp, #24]
 8019f84:	4620      	mov	r0, r4
 8019f86:	f002 f813 	bl	801bfb0 <_Bfree>
 8019f8a:	4629      	mov	r1, r5
 8019f8c:	4620      	mov	r0, r4
 8019f8e:	f002 f80f 	bl	801bfb0 <_Bfree>
 8019f92:	e5f3      	b.n	8019b7c <_strtod_l+0x84>
 8019f94:	9804      	ldr	r0, [sp, #16]
 8019f96:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8019f9a:	4281      	cmp	r1, r0
 8019f9c:	dbbd      	blt.n	8019f1a <_strtod_l+0x422>
 8019f9e:	4a40      	ldr	r2, [pc, #256]	; (801a0a0 <_strtod_l+0x5a8>)
 8019fa0:	f1c3 030f 	rsb	r3, r3, #15
 8019fa4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8019fa8:	ed91 7b00 	vldr	d7, [r1]
 8019fac:	ec4b ab16 	vmov	d6, sl, fp
 8019fb0:	1ac3      	subs	r3, r0, r3
 8019fb2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8019fb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019fba:	ed92 6b00 	vldr	d6, [r2]
 8019fbe:	e796      	b.n	8019eee <_strtod_l+0x3f6>
 8019fc0:	3116      	adds	r1, #22
 8019fc2:	dbaa      	blt.n	8019f1a <_strtod_l+0x422>
 8019fc4:	4936      	ldr	r1, [pc, #216]	; (801a0a0 <_strtod_l+0x5a8>)
 8019fc6:	9b04      	ldr	r3, [sp, #16]
 8019fc8:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8019fcc:	ed91 7b00 	vldr	d7, [r1]
 8019fd0:	ec4b ab16 	vmov	d6, sl, fp
 8019fd4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019fd8:	e78b      	b.n	8019ef2 <_strtod_l+0x3fa>
 8019fda:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8019fde:	2000      	movs	r0, #0
 8019fe0:	4e30      	ldr	r6, [pc, #192]	; (801a0a4 <_strtod_l+0x5ac>)
 8019fe2:	1112      	asrs	r2, r2, #4
 8019fe4:	4601      	mov	r1, r0
 8019fe6:	2a01      	cmp	r2, #1
 8019fe8:	dc23      	bgt.n	801a032 <_strtod_l+0x53a>
 8019fea:	b108      	cbz	r0, 8019ff0 <_strtod_l+0x4f8>
 8019fec:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8019ff0:	4a2c      	ldr	r2, [pc, #176]	; (801a0a4 <_strtod_l+0x5ac>)
 8019ff2:	482d      	ldr	r0, [pc, #180]	; (801a0a8 <_strtod_l+0x5b0>)
 8019ff4:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8019ff8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8019ffc:	ed91 7b00 	vldr	d7, [r1]
 801a000:	ec4b ab16 	vmov	d6, sl, fp
 801a004:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a008:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a00c:	9907      	ldr	r1, [sp, #28]
 801a00e:	4a27      	ldr	r2, [pc, #156]	; (801a0ac <_strtod_l+0x5b4>)
 801a010:	400a      	ands	r2, r1
 801a012:	4282      	cmp	r2, r0
 801a014:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 801a018:	d899      	bhi.n	8019f4e <_strtod_l+0x456>
 801a01a:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801a01e:	4282      	cmp	r2, r0
 801a020:	bf86      	itte	hi
 801a022:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 801a0b4 <_strtod_l+0x5bc>
 801a026:	f04f 3aff 	movhi.w	sl, #4294967295
 801a02a:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 801a02e:	2700      	movs	r7, #0
 801a030:	e070      	b.n	801a114 <_strtod_l+0x61c>
 801a032:	07d7      	lsls	r7, r2, #31
 801a034:	d50a      	bpl.n	801a04c <_strtod_l+0x554>
 801a036:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 801a03a:	ed90 7b00 	vldr	d7, [r0]
 801a03e:	ed9d 6b06 	vldr	d6, [sp, #24]
 801a042:	ee26 7b07 	vmul.f64	d7, d6, d7
 801a046:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a04a:	2001      	movs	r0, #1
 801a04c:	3101      	adds	r1, #1
 801a04e:	1052      	asrs	r2, r2, #1
 801a050:	e7c9      	b.n	8019fe6 <_strtod_l+0x4ee>
 801a052:	d0ec      	beq.n	801a02e <_strtod_l+0x536>
 801a054:	4252      	negs	r2, r2
 801a056:	f012 000f 	ands.w	r0, r2, #15
 801a05a:	d00a      	beq.n	801a072 <_strtod_l+0x57a>
 801a05c:	4910      	ldr	r1, [pc, #64]	; (801a0a0 <_strtod_l+0x5a8>)
 801a05e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801a062:	ed91 7b00 	vldr	d7, [r1]
 801a066:	ec4b ab16 	vmov	d6, sl, fp
 801a06a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a06e:	ec5b ab17 	vmov	sl, fp, d7
 801a072:	1112      	asrs	r2, r2, #4
 801a074:	d0db      	beq.n	801a02e <_strtod_l+0x536>
 801a076:	2a1f      	cmp	r2, #31
 801a078:	dd1e      	ble.n	801a0b8 <_strtod_l+0x5c0>
 801a07a:	2500      	movs	r5, #0
 801a07c:	46a8      	mov	r8, r5
 801a07e:	9506      	str	r5, [sp, #24]
 801a080:	46a9      	mov	r9, r5
 801a082:	2322      	movs	r3, #34	; 0x22
 801a084:	f04f 0a00 	mov.w	sl, #0
 801a088:	f04f 0b00 	mov.w	fp, #0
 801a08c:	6023      	str	r3, [r4, #0]
 801a08e:	e768      	b.n	8019f62 <_strtod_l+0x46a>
 801a090:	08020b67 	.word	0x08020b67
 801a094:	08020cf4 	.word	0x08020cf4
 801a098:	08020b6f 	.word	0x08020b6f
 801a09c:	08020bb0 	.word	0x08020bb0
 801a0a0:	08020d88 	.word	0x08020d88
 801a0a4:	08020d60 	.word	0x08020d60
 801a0a8:	7ca00000 	.word	0x7ca00000
 801a0ac:	7ff00000 	.word	0x7ff00000
 801a0b0:	fff80000 	.word	0xfff80000
 801a0b4:	7fefffff 	.word	0x7fefffff
 801a0b8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 801a0bc:	f012 0710 	ands.w	r7, r2, #16
 801a0c0:	49ab      	ldr	r1, [pc, #684]	; (801a370 <_strtod_l+0x878>)
 801a0c2:	bf18      	it	ne
 801a0c4:	276a      	movne	r7, #106	; 0x6a
 801a0c6:	2000      	movs	r0, #0
 801a0c8:	2a00      	cmp	r2, #0
 801a0ca:	f300 8113 	bgt.w	801a2f4 <_strtod_l+0x7fc>
 801a0ce:	b108      	cbz	r0, 801a0d4 <_strtod_l+0x5dc>
 801a0d0:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 801a0d4:	b1bf      	cbz	r7, 801a106 <_strtod_l+0x60e>
 801a0d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801a0da:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 801a0de:	2a00      	cmp	r2, #0
 801a0e0:	4659      	mov	r1, fp
 801a0e2:	dd10      	ble.n	801a106 <_strtod_l+0x60e>
 801a0e4:	2a1f      	cmp	r2, #31
 801a0e6:	f340 8113 	ble.w	801a310 <_strtod_l+0x818>
 801a0ea:	2a34      	cmp	r2, #52	; 0x34
 801a0ec:	bfde      	ittt	le
 801a0ee:	3a20      	suble	r2, #32
 801a0f0:	f04f 30ff 	movle.w	r0, #4294967295
 801a0f4:	fa00 f202 	lslle.w	r2, r0, r2
 801a0f8:	f04f 0a00 	mov.w	sl, #0
 801a0fc:	bfcc      	ite	gt
 801a0fe:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801a102:	ea02 0b01 	andle.w	fp, r2, r1
 801a106:	ec4b ab17 	vmov	d7, sl, fp
 801a10a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a112:	d0b2      	beq.n	801a07a <_strtod_l+0x582>
 801a114:	9a08      	ldr	r2, [sp, #32]
 801a116:	9200      	str	r2, [sp, #0]
 801a118:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a11a:	462a      	mov	r2, r5
 801a11c:	4620      	mov	r0, r4
 801a11e:	f001 ff99 	bl	801c054 <__s2b>
 801a122:	9006      	str	r0, [sp, #24]
 801a124:	2800      	cmp	r0, #0
 801a126:	f43f af12 	beq.w	8019f4e <_strtod_l+0x456>
 801a12a:	9a04      	ldr	r2, [sp, #16]
 801a12c:	9b04      	ldr	r3, [sp, #16]
 801a12e:	2a00      	cmp	r2, #0
 801a130:	f1c3 0300 	rsb	r3, r3, #0
 801a134:	ed9f 9b88 	vldr	d9, [pc, #544]	; 801a358 <_strtod_l+0x860>
 801a138:	bfa8      	it	ge
 801a13a:	2300      	movge	r3, #0
 801a13c:	ed9f ab88 	vldr	d10, [pc, #544]	; 801a360 <_strtod_l+0x868>
 801a140:	ed9f bb89 	vldr	d11, [pc, #548]	; 801a368 <_strtod_l+0x870>
 801a144:	930e      	str	r3, [sp, #56]	; 0x38
 801a146:	2500      	movs	r5, #0
 801a148:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801a14c:	9310      	str	r3, [sp, #64]	; 0x40
 801a14e:	46a8      	mov	r8, r5
 801a150:	9b06      	ldr	r3, [sp, #24]
 801a152:	4620      	mov	r0, r4
 801a154:	6859      	ldr	r1, [r3, #4]
 801a156:	f001 fef7 	bl	801bf48 <_Balloc>
 801a15a:	4681      	mov	r9, r0
 801a15c:	2800      	cmp	r0, #0
 801a15e:	f43f aefa 	beq.w	8019f56 <_strtod_l+0x45e>
 801a162:	9b06      	ldr	r3, [sp, #24]
 801a164:	691a      	ldr	r2, [r3, #16]
 801a166:	3202      	adds	r2, #2
 801a168:	f103 010c 	add.w	r1, r3, #12
 801a16c:	0092      	lsls	r2, r2, #2
 801a16e:	300c      	adds	r0, #12
 801a170:	f7fe fd66 	bl	8018c40 <memcpy>
 801a174:	aa1a      	add	r2, sp, #104	; 0x68
 801a176:	a919      	add	r1, sp, #100	; 0x64
 801a178:	ec4b ab10 	vmov	d0, sl, fp
 801a17c:	4620      	mov	r0, r4
 801a17e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801a182:	f002 fa23 	bl	801c5cc <__d2b>
 801a186:	9018      	str	r0, [sp, #96]	; 0x60
 801a188:	2800      	cmp	r0, #0
 801a18a:	f43f aee4 	beq.w	8019f56 <_strtod_l+0x45e>
 801a18e:	2101      	movs	r1, #1
 801a190:	4620      	mov	r0, r4
 801a192:	f001 ffeb 	bl	801c16c <__i2b>
 801a196:	4680      	mov	r8, r0
 801a198:	2800      	cmp	r0, #0
 801a19a:	f43f aedc 	beq.w	8019f56 <_strtod_l+0x45e>
 801a19e:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801a1a0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801a1a2:	2e00      	cmp	r6, #0
 801a1a4:	bfb1      	iteee	lt
 801a1a6:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 801a1a8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801a1aa:	9810      	ldrge	r0, [sp, #64]	; 0x40
 801a1ac:	18f3      	addge	r3, r6, r3
 801a1ae:	bfba      	itte	lt
 801a1b0:	1b98      	sublt	r0, r3, r6
 801a1b2:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801a1b4:	9308      	strge	r3, [sp, #32]
 801a1b6:	eba6 0607 	sub.w	r6, r6, r7
 801a1ba:	bfb8      	it	lt
 801a1bc:	9308      	strlt	r3, [sp, #32]
 801a1be:	4416      	add	r6, r2
 801a1c0:	4b6c      	ldr	r3, [pc, #432]	; (801a374 <_strtod_l+0x87c>)
 801a1c2:	3e01      	subs	r6, #1
 801a1c4:	429e      	cmp	r6, r3
 801a1c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a1ca:	f280 80b4 	bge.w	801a336 <_strtod_l+0x83e>
 801a1ce:	1b9b      	subs	r3, r3, r6
 801a1d0:	2b1f      	cmp	r3, #31
 801a1d2:	eba2 0203 	sub.w	r2, r2, r3
 801a1d6:	f04f 0101 	mov.w	r1, #1
 801a1da:	f300 80a0 	bgt.w	801a31e <_strtod_l+0x826>
 801a1de:	fa01 f303 	lsl.w	r3, r1, r3
 801a1e2:	9311      	str	r3, [sp, #68]	; 0x44
 801a1e4:	2300      	movs	r3, #0
 801a1e6:	930f      	str	r3, [sp, #60]	; 0x3c
 801a1e8:	9b08      	ldr	r3, [sp, #32]
 801a1ea:	4413      	add	r3, r2
 801a1ec:	4402      	add	r2, r0
 801a1ee:	18be      	adds	r6, r7, r2
 801a1f0:	9a08      	ldr	r2, [sp, #32]
 801a1f2:	429a      	cmp	r2, r3
 801a1f4:	bfa8      	it	ge
 801a1f6:	461a      	movge	r2, r3
 801a1f8:	42b2      	cmp	r2, r6
 801a1fa:	bfa8      	it	ge
 801a1fc:	4632      	movge	r2, r6
 801a1fe:	2a00      	cmp	r2, #0
 801a200:	dd04      	ble.n	801a20c <_strtod_l+0x714>
 801a202:	9908      	ldr	r1, [sp, #32]
 801a204:	1a9b      	subs	r3, r3, r2
 801a206:	1ab6      	subs	r6, r6, r2
 801a208:	1a8a      	subs	r2, r1, r2
 801a20a:	9208      	str	r2, [sp, #32]
 801a20c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a20e:	b1c2      	cbz	r2, 801a242 <_strtod_l+0x74a>
 801a210:	4641      	mov	r1, r8
 801a212:	4620      	mov	r0, r4
 801a214:	9315      	str	r3, [sp, #84]	; 0x54
 801a216:	f002 f849 	bl	801c2ac <__pow5mult>
 801a21a:	4680      	mov	r8, r0
 801a21c:	2800      	cmp	r0, #0
 801a21e:	f43f ae9a 	beq.w	8019f56 <_strtod_l+0x45e>
 801a222:	4601      	mov	r1, r0
 801a224:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a226:	4620      	mov	r0, r4
 801a228:	f001 ffa9 	bl	801c17e <__multiply>
 801a22c:	900c      	str	r0, [sp, #48]	; 0x30
 801a22e:	2800      	cmp	r0, #0
 801a230:	f43f ae91 	beq.w	8019f56 <_strtod_l+0x45e>
 801a234:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a236:	4620      	mov	r0, r4
 801a238:	f001 feba 	bl	801bfb0 <_Bfree>
 801a23c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a23e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a240:	9218      	str	r2, [sp, #96]	; 0x60
 801a242:	2b00      	cmp	r3, #0
 801a244:	dc7c      	bgt.n	801a340 <_strtod_l+0x848>
 801a246:	9b04      	ldr	r3, [sp, #16]
 801a248:	2b00      	cmp	r3, #0
 801a24a:	dd08      	ble.n	801a25e <_strtod_l+0x766>
 801a24c:	4649      	mov	r1, r9
 801a24e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a250:	4620      	mov	r0, r4
 801a252:	f002 f82b 	bl	801c2ac <__pow5mult>
 801a256:	4681      	mov	r9, r0
 801a258:	2800      	cmp	r0, #0
 801a25a:	f43f ae7c 	beq.w	8019f56 <_strtod_l+0x45e>
 801a25e:	2e00      	cmp	r6, #0
 801a260:	dd08      	ble.n	801a274 <_strtod_l+0x77c>
 801a262:	4649      	mov	r1, r9
 801a264:	4632      	mov	r2, r6
 801a266:	4620      	mov	r0, r4
 801a268:	f002 f86e 	bl	801c348 <__lshift>
 801a26c:	4681      	mov	r9, r0
 801a26e:	2800      	cmp	r0, #0
 801a270:	f43f ae71 	beq.w	8019f56 <_strtod_l+0x45e>
 801a274:	9b08      	ldr	r3, [sp, #32]
 801a276:	2b00      	cmp	r3, #0
 801a278:	dd08      	ble.n	801a28c <_strtod_l+0x794>
 801a27a:	4641      	mov	r1, r8
 801a27c:	461a      	mov	r2, r3
 801a27e:	4620      	mov	r0, r4
 801a280:	f002 f862 	bl	801c348 <__lshift>
 801a284:	4680      	mov	r8, r0
 801a286:	2800      	cmp	r0, #0
 801a288:	f43f ae65 	beq.w	8019f56 <_strtod_l+0x45e>
 801a28c:	464a      	mov	r2, r9
 801a28e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a290:	4620      	mov	r0, r4
 801a292:	f002 f8c7 	bl	801c424 <__mdiff>
 801a296:	4605      	mov	r5, r0
 801a298:	2800      	cmp	r0, #0
 801a29a:	f43f ae5c 	beq.w	8019f56 <_strtod_l+0x45e>
 801a29e:	68c3      	ldr	r3, [r0, #12]
 801a2a0:	930c      	str	r3, [sp, #48]	; 0x30
 801a2a2:	2300      	movs	r3, #0
 801a2a4:	60c3      	str	r3, [r0, #12]
 801a2a6:	4641      	mov	r1, r8
 801a2a8:	f002 f8a2 	bl	801c3f0 <__mcmp>
 801a2ac:	2800      	cmp	r0, #0
 801a2ae:	da63      	bge.n	801a378 <_strtod_l+0x880>
 801a2b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a2b2:	b9e3      	cbnz	r3, 801a2ee <_strtod_l+0x7f6>
 801a2b4:	f1ba 0f00 	cmp.w	sl, #0
 801a2b8:	d119      	bne.n	801a2ee <_strtod_l+0x7f6>
 801a2ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a2be:	b9b3      	cbnz	r3, 801a2ee <_strtod_l+0x7f6>
 801a2c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a2c4:	0d1b      	lsrs	r3, r3, #20
 801a2c6:	051b      	lsls	r3, r3, #20
 801a2c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801a2cc:	d90f      	bls.n	801a2ee <_strtod_l+0x7f6>
 801a2ce:	696b      	ldr	r3, [r5, #20]
 801a2d0:	b913      	cbnz	r3, 801a2d8 <_strtod_l+0x7e0>
 801a2d2:	692b      	ldr	r3, [r5, #16]
 801a2d4:	2b01      	cmp	r3, #1
 801a2d6:	dd0a      	ble.n	801a2ee <_strtod_l+0x7f6>
 801a2d8:	4629      	mov	r1, r5
 801a2da:	2201      	movs	r2, #1
 801a2dc:	4620      	mov	r0, r4
 801a2de:	f002 f833 	bl	801c348 <__lshift>
 801a2e2:	4641      	mov	r1, r8
 801a2e4:	4605      	mov	r5, r0
 801a2e6:	f002 f883 	bl	801c3f0 <__mcmp>
 801a2ea:	2800      	cmp	r0, #0
 801a2ec:	dc75      	bgt.n	801a3da <_strtod_l+0x8e2>
 801a2ee:	2f00      	cmp	r7, #0
 801a2f0:	d17f      	bne.n	801a3f2 <_strtod_l+0x8fa>
 801a2f2:	e63a      	b.n	8019f6a <_strtod_l+0x472>
 801a2f4:	07d6      	lsls	r6, r2, #31
 801a2f6:	d508      	bpl.n	801a30a <_strtod_l+0x812>
 801a2f8:	ed9d 6b06 	vldr	d6, [sp, #24]
 801a2fc:	ed91 7b00 	vldr	d7, [r1]
 801a300:	ee26 7b07 	vmul.f64	d7, d6, d7
 801a304:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a308:	2001      	movs	r0, #1
 801a30a:	1052      	asrs	r2, r2, #1
 801a30c:	3108      	adds	r1, #8
 801a30e:	e6db      	b.n	801a0c8 <_strtod_l+0x5d0>
 801a310:	f04f 31ff 	mov.w	r1, #4294967295
 801a314:	fa01 f202 	lsl.w	r2, r1, r2
 801a318:	ea02 0a0a 	and.w	sl, r2, sl
 801a31c:	e6f3      	b.n	801a106 <_strtod_l+0x60e>
 801a31e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801a322:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801a326:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801a32a:	36e2      	adds	r6, #226	; 0xe2
 801a32c:	fa01 f306 	lsl.w	r3, r1, r6
 801a330:	930f      	str	r3, [sp, #60]	; 0x3c
 801a332:	9111      	str	r1, [sp, #68]	; 0x44
 801a334:	e758      	b.n	801a1e8 <_strtod_l+0x6f0>
 801a336:	2300      	movs	r3, #0
 801a338:	930f      	str	r3, [sp, #60]	; 0x3c
 801a33a:	2301      	movs	r3, #1
 801a33c:	9311      	str	r3, [sp, #68]	; 0x44
 801a33e:	e753      	b.n	801a1e8 <_strtod_l+0x6f0>
 801a340:	461a      	mov	r2, r3
 801a342:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a344:	4620      	mov	r0, r4
 801a346:	f001 ffff 	bl	801c348 <__lshift>
 801a34a:	9018      	str	r0, [sp, #96]	; 0x60
 801a34c:	2800      	cmp	r0, #0
 801a34e:	f47f af7a 	bne.w	801a246 <_strtod_l+0x74e>
 801a352:	e600      	b.n	8019f56 <_strtod_l+0x45e>
 801a354:	f3af 8000 	nop.w
 801a358:	94a03595 	.word	0x94a03595
 801a35c:	3fdfffff 	.word	0x3fdfffff
 801a360:	35afe535 	.word	0x35afe535
 801a364:	3fe00000 	.word	0x3fe00000
 801a368:	94a03595 	.word	0x94a03595
 801a36c:	3fcfffff 	.word	0x3fcfffff
 801a370:	08020bc8 	.word	0x08020bc8
 801a374:	fffffc02 	.word	0xfffffc02
 801a378:	f8cd b020 	str.w	fp, [sp, #32]
 801a37c:	f040 8085 	bne.w	801a48a <_strtod_l+0x992>
 801a380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a382:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a386:	b322      	cbz	r2, 801a3d2 <_strtod_l+0x8da>
 801a388:	4ab7      	ldr	r2, [pc, #732]	; (801a668 <_strtod_l+0xb70>)
 801a38a:	4293      	cmp	r3, r2
 801a38c:	d154      	bne.n	801a438 <_strtod_l+0x940>
 801a38e:	4651      	mov	r1, sl
 801a390:	b1e7      	cbz	r7, 801a3cc <_strtod_l+0x8d4>
 801a392:	4bb6      	ldr	r3, [pc, #728]	; (801a66c <_strtod_l+0xb74>)
 801a394:	465a      	mov	r2, fp
 801a396:	4013      	ands	r3, r2
 801a398:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801a39c:	f04f 32ff 	mov.w	r2, #4294967295
 801a3a0:	d803      	bhi.n	801a3aa <_strtod_l+0x8b2>
 801a3a2:	0d1b      	lsrs	r3, r3, #20
 801a3a4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a3a8:	409a      	lsls	r2, r3
 801a3aa:	4291      	cmp	r1, r2
 801a3ac:	d144      	bne.n	801a438 <_strtod_l+0x940>
 801a3ae:	4bb0      	ldr	r3, [pc, #704]	; (801a670 <_strtod_l+0xb78>)
 801a3b0:	9a08      	ldr	r2, [sp, #32]
 801a3b2:	429a      	cmp	r2, r3
 801a3b4:	d102      	bne.n	801a3bc <_strtod_l+0x8c4>
 801a3b6:	3101      	adds	r1, #1
 801a3b8:	f43f adcd 	beq.w	8019f56 <_strtod_l+0x45e>
 801a3bc:	4bab      	ldr	r3, [pc, #684]	; (801a66c <_strtod_l+0xb74>)
 801a3be:	9a08      	ldr	r2, [sp, #32]
 801a3c0:	401a      	ands	r2, r3
 801a3c2:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 801a3c6:	f04f 0a00 	mov.w	sl, #0
 801a3ca:	e790      	b.n	801a2ee <_strtod_l+0x7f6>
 801a3cc:	f04f 32ff 	mov.w	r2, #4294967295
 801a3d0:	e7eb      	b.n	801a3aa <_strtod_l+0x8b2>
 801a3d2:	bb8b      	cbnz	r3, 801a438 <_strtod_l+0x940>
 801a3d4:	f1ba 0f00 	cmp.w	sl, #0
 801a3d8:	d12e      	bne.n	801a438 <_strtod_l+0x940>
 801a3da:	465b      	mov	r3, fp
 801a3dc:	4aa3      	ldr	r2, [pc, #652]	; (801a66c <_strtod_l+0xb74>)
 801a3de:	b30f      	cbz	r7, 801a424 <_strtod_l+0x92c>
 801a3e0:	ea02 010b 	and.w	r1, r2, fp
 801a3e4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801a3e8:	dc1c      	bgt.n	801a424 <_strtod_l+0x92c>
 801a3ea:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801a3ee:	f77f ae48 	ble.w	801a082 <_strtod_l+0x58a>
 801a3f2:	4aa0      	ldr	r2, [pc, #640]	; (801a674 <_strtod_l+0xb7c>)
 801a3f4:	2300      	movs	r3, #0
 801a3f6:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 801a3fa:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 801a3fe:	ec4b ab17 	vmov	d7, sl, fp
 801a402:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a406:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a40a:	9b05      	ldr	r3, [sp, #20]
 801a40c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801a410:	2b00      	cmp	r3, #0
 801a412:	f47f adaa 	bne.w	8019f6a <_strtod_l+0x472>
 801a416:	9b04      	ldr	r3, [sp, #16]
 801a418:	2b00      	cmp	r3, #0
 801a41a:	f47f ada6 	bne.w	8019f6a <_strtod_l+0x472>
 801a41e:	2322      	movs	r3, #34	; 0x22
 801a420:	6023      	str	r3, [r4, #0]
 801a422:	e5a2      	b.n	8019f6a <_strtod_l+0x472>
 801a424:	4013      	ands	r3, r2
 801a426:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801a42a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801a42e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801a432:	f04f 3aff 	mov.w	sl, #4294967295
 801a436:	e75a      	b.n	801a2ee <_strtod_l+0x7f6>
 801a438:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a43a:	b18b      	cbz	r3, 801a460 <_strtod_l+0x968>
 801a43c:	9a08      	ldr	r2, [sp, #32]
 801a43e:	4213      	tst	r3, r2
 801a440:	f43f af55 	beq.w	801a2ee <_strtod_l+0x7f6>
 801a444:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a446:	463a      	mov	r2, r7
 801a448:	4650      	mov	r0, sl
 801a44a:	4659      	mov	r1, fp
 801a44c:	b163      	cbz	r3, 801a468 <_strtod_l+0x970>
 801a44e:	f7ff fb39 	bl	8019ac4 <sulp>
 801a452:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 801a456:	ee37 7b00 	vadd.f64	d7, d7, d0
 801a45a:	ec5b ab17 	vmov	sl, fp, d7
 801a45e:	e746      	b.n	801a2ee <_strtod_l+0x7f6>
 801a460:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a462:	ea13 0f0a 	tst.w	r3, sl
 801a466:	e7eb      	b.n	801a440 <_strtod_l+0x948>
 801a468:	f7ff fb2c 	bl	8019ac4 <sulp>
 801a46c:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 801a470:	ee37 7b40 	vsub.f64	d7, d7, d0
 801a474:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a478:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a480:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801a484:	f43f adfd 	beq.w	801a082 <_strtod_l+0x58a>
 801a488:	e731      	b.n	801a2ee <_strtod_l+0x7f6>
 801a48a:	4641      	mov	r1, r8
 801a48c:	4628      	mov	r0, r5
 801a48e:	f002 f8ec 	bl	801c66a <__ratio>
 801a492:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801a496:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801a49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a49e:	d869      	bhi.n	801a574 <_strtod_l+0xa7c>
 801a4a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a4a2:	2b00      	cmp	r3, #0
 801a4a4:	d045      	beq.n	801a532 <_strtod_l+0xa3a>
 801a4a6:	4b74      	ldr	r3, [pc, #464]	; (801a678 <_strtod_l+0xb80>)
 801a4a8:	2200      	movs	r2, #0
 801a4aa:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 801a4ae:	9808      	ldr	r0, [sp, #32]
 801a4b0:	496e      	ldr	r1, [pc, #440]	; (801a66c <_strtod_l+0xb74>)
 801a4b2:	ea00 0601 	and.w	r6, r0, r1
 801a4b6:	4871      	ldr	r0, [pc, #452]	; (801a67c <_strtod_l+0xb84>)
 801a4b8:	4286      	cmp	r6, r0
 801a4ba:	f040 8089 	bne.w	801a5d0 <_strtod_l+0xad8>
 801a4be:	910f      	str	r1, [sp, #60]	; 0x3c
 801a4c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a4c4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 801a4c8:	9908      	ldr	r1, [sp, #32]
 801a4ca:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 801a4ce:	ec4b ab10 	vmov	d0, sl, fp
 801a4d2:	ec43 2b1c 	vmov	d12, r2, r3
 801a4d6:	f002 f803 	bl	801c4e0 <__ulp>
 801a4da:	ec4b ab1d 	vmov	d13, sl, fp
 801a4de:	eeac db00 	vfma.f64	d13, d12, d0
 801a4e2:	ed8d db08 	vstr	d13, [sp, #32]
 801a4e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a4e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801a4ea:	4a65      	ldr	r2, [pc, #404]	; (801a680 <_strtod_l+0xb88>)
 801a4ec:	4019      	ands	r1, r3
 801a4ee:	4291      	cmp	r1, r2
 801a4f0:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 801a4f4:	d948      	bls.n	801a588 <_strtod_l+0xa90>
 801a4f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a4f8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801a4fc:	4293      	cmp	r3, r2
 801a4fe:	d103      	bne.n	801a508 <_strtod_l+0xa10>
 801a500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a502:	3301      	adds	r3, #1
 801a504:	f43f ad27 	beq.w	8019f56 <_strtod_l+0x45e>
 801a508:	f8df b164 	ldr.w	fp, [pc, #356]	; 801a670 <_strtod_l+0xb78>
 801a50c:	f04f 3aff 	mov.w	sl, #4294967295
 801a510:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a512:	4620      	mov	r0, r4
 801a514:	f001 fd4c 	bl	801bfb0 <_Bfree>
 801a518:	4649      	mov	r1, r9
 801a51a:	4620      	mov	r0, r4
 801a51c:	f001 fd48 	bl	801bfb0 <_Bfree>
 801a520:	4641      	mov	r1, r8
 801a522:	4620      	mov	r0, r4
 801a524:	f001 fd44 	bl	801bfb0 <_Bfree>
 801a528:	4629      	mov	r1, r5
 801a52a:	4620      	mov	r0, r4
 801a52c:	f001 fd40 	bl	801bfb0 <_Bfree>
 801a530:	e60e      	b.n	801a150 <_strtod_l+0x658>
 801a532:	f1ba 0f00 	cmp.w	sl, #0
 801a536:	d113      	bne.n	801a560 <_strtod_l+0xa68>
 801a538:	9b08      	ldr	r3, [sp, #32]
 801a53a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a53e:	b9b3      	cbnz	r3, 801a56e <_strtod_l+0xa76>
 801a540:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801a544:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801a548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a54c:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801a550:	d401      	bmi.n	801a556 <_strtod_l+0xa5e>
 801a552:	ee20 8b08 	vmul.f64	d8, d0, d8
 801a556:	eeb1 7b48 	vneg.f64	d7, d8
 801a55a:	ec53 2b17 	vmov	r2, r3, d7
 801a55e:	e7a6      	b.n	801a4ae <_strtod_l+0x9b6>
 801a560:	f1ba 0f01 	cmp.w	sl, #1
 801a564:	d103      	bne.n	801a56e <_strtod_l+0xa76>
 801a566:	9b08      	ldr	r3, [sp, #32]
 801a568:	2b00      	cmp	r3, #0
 801a56a:	f43f ad8a 	beq.w	801a082 <_strtod_l+0x58a>
 801a56e:	2200      	movs	r2, #0
 801a570:	4b44      	ldr	r3, [pc, #272]	; (801a684 <_strtod_l+0xb8c>)
 801a572:	e79a      	b.n	801a4aa <_strtod_l+0x9b2>
 801a574:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a576:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801a57a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801a57e:	2b00      	cmp	r3, #0
 801a580:	d0e9      	beq.n	801a556 <_strtod_l+0xa5e>
 801a582:	ec53 2b18 	vmov	r2, r3, d8
 801a586:	e792      	b.n	801a4ae <_strtod_l+0x9b6>
 801a588:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801a58c:	2f00      	cmp	r7, #0
 801a58e:	d1bf      	bne.n	801a510 <_strtod_l+0xa18>
 801a590:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a594:	0d1b      	lsrs	r3, r3, #20
 801a596:	051b      	lsls	r3, r3, #20
 801a598:	429e      	cmp	r6, r3
 801a59a:	d1b9      	bne.n	801a510 <_strtod_l+0xa18>
 801a59c:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 801a5a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a5a2:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 801a5a6:	ee38 8b40 	vsub.f64	d8, d8, d0
 801a5aa:	b92b      	cbnz	r3, 801a5b8 <_strtod_l+0xac0>
 801a5ac:	f1ba 0f00 	cmp.w	sl, #0
 801a5b0:	d102      	bne.n	801a5b8 <_strtod_l+0xac0>
 801a5b2:	f3cb 0213 	ubfx	r2, fp, #0, #20
 801a5b6:	b3d2      	cbz	r2, 801a62e <_strtod_l+0xb36>
 801a5b8:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801a5bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5c0:	f53f acd3 	bmi.w	8019f6a <_strtod_l+0x472>
 801a5c4:	eeb4 8bca 	vcmpe.f64	d8, d10
 801a5c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5cc:	dda0      	ble.n	801a510 <_strtod_l+0xa18>
 801a5ce:	e4cc      	b.n	8019f6a <_strtod_l+0x472>
 801a5d0:	b1ef      	cbz	r7, 801a60e <_strtod_l+0xb16>
 801a5d2:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 801a5d6:	d81a      	bhi.n	801a60e <_strtod_l+0xb16>
 801a5d8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801a660 <_strtod_l+0xb68>
 801a5dc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a5e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5e4:	d810      	bhi.n	801a608 <_strtod_l+0xb10>
 801a5e6:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 801a5ea:	ee17 3a90 	vmov	r3, s15
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	bf08      	it	eq
 801a5f2:	2301      	moveq	r3, #1
 801a5f4:	ee07 3a90 	vmov	s15, r3
 801a5f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a5fa:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 801a5fe:	b99b      	cbnz	r3, 801a628 <_strtod_l+0xb30>
 801a600:	eeb1 7b48 	vneg.f64	d7, d8
 801a604:	ec53 2b17 	vmov	r2, r3, d7
 801a608:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 801a60c:	1b8b      	subs	r3, r1, r6
 801a60e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801a612:	ec43 2b1c 	vmov	d12, r2, r3
 801a616:	f001 ff63 	bl	801c4e0 <__ulp>
 801a61a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 801a61e:	eeac 7b00 	vfma.f64	d7, d12, d0
 801a622:	ec5b ab17 	vmov	sl, fp, d7
 801a626:	e7b1      	b.n	801a58c <_strtod_l+0xa94>
 801a628:	ec53 2b18 	vmov	r2, r3, d8
 801a62c:	e7ec      	b.n	801a608 <_strtod_l+0xb10>
 801a62e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801a632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a636:	f57f af6b 	bpl.w	801a510 <_strtod_l+0xa18>
 801a63a:	e496      	b.n	8019f6a <_strtod_l+0x472>
 801a63c:	2300      	movs	r3, #0
 801a63e:	930d      	str	r3, [sp, #52]	; 0x34
 801a640:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a642:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a644:	6013      	str	r3, [r2, #0]
 801a646:	f7ff ba9d 	b.w	8019b84 <_strtod_l+0x8c>
 801a64a:	2a65      	cmp	r2, #101	; 0x65
 801a64c:	f04f 0100 	mov.w	r1, #0
 801a650:	f43f ab97 	beq.w	8019d82 <_strtod_l+0x28a>
 801a654:	2701      	movs	r7, #1
 801a656:	460b      	mov	r3, r1
 801a658:	9704      	str	r7, [sp, #16]
 801a65a:	f7ff bb0a 	b.w	8019c72 <_strtod_l+0x17a>
 801a65e:	bf00      	nop
 801a660:	ffc00000 	.word	0xffc00000
 801a664:	41dfffff 	.word	0x41dfffff
 801a668:	000fffff 	.word	0x000fffff
 801a66c:	7ff00000 	.word	0x7ff00000
 801a670:	7fefffff 	.word	0x7fefffff
 801a674:	39500000 	.word	0x39500000
 801a678:	3ff00000 	.word	0x3ff00000
 801a67c:	7fe00000 	.word	0x7fe00000
 801a680:	7c9fffff 	.word	0x7c9fffff
 801a684:	bff00000 	.word	0xbff00000

0801a688 <_strtod_r>:
 801a688:	4b05      	ldr	r3, [pc, #20]	; (801a6a0 <_strtod_r+0x18>)
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	b410      	push	{r4}
 801a68e:	6a1b      	ldr	r3, [r3, #32]
 801a690:	4c04      	ldr	r4, [pc, #16]	; (801a6a4 <_strtod_r+0x1c>)
 801a692:	2b00      	cmp	r3, #0
 801a694:	bf08      	it	eq
 801a696:	4623      	moveq	r3, r4
 801a698:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a69c:	f7ff ba2c 	b.w	8019af8 <_strtod_l>
 801a6a0:	2000001c 	.word	0x2000001c
 801a6a4:	20000080 	.word	0x20000080

0801a6a8 <_strtol_l.isra.0>:
 801a6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a6ac:	4680      	mov	r8, r0
 801a6ae:	4689      	mov	r9, r1
 801a6b0:	4692      	mov	sl, r2
 801a6b2:	461e      	mov	r6, r3
 801a6b4:	460f      	mov	r7, r1
 801a6b6:	463d      	mov	r5, r7
 801a6b8:	9808      	ldr	r0, [sp, #32]
 801a6ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a6be:	f7fe fa9b 	bl	8018bf8 <__locale_ctype_ptr_l>
 801a6c2:	4420      	add	r0, r4
 801a6c4:	7843      	ldrb	r3, [r0, #1]
 801a6c6:	f013 0308 	ands.w	r3, r3, #8
 801a6ca:	d132      	bne.n	801a732 <_strtol_l.isra.0+0x8a>
 801a6cc:	2c2d      	cmp	r4, #45	; 0x2d
 801a6ce:	d132      	bne.n	801a736 <_strtol_l.isra.0+0x8e>
 801a6d0:	787c      	ldrb	r4, [r7, #1]
 801a6d2:	1cbd      	adds	r5, r7, #2
 801a6d4:	2201      	movs	r2, #1
 801a6d6:	2e00      	cmp	r6, #0
 801a6d8:	d05d      	beq.n	801a796 <_strtol_l.isra.0+0xee>
 801a6da:	2e10      	cmp	r6, #16
 801a6dc:	d109      	bne.n	801a6f2 <_strtol_l.isra.0+0x4a>
 801a6de:	2c30      	cmp	r4, #48	; 0x30
 801a6e0:	d107      	bne.n	801a6f2 <_strtol_l.isra.0+0x4a>
 801a6e2:	782b      	ldrb	r3, [r5, #0]
 801a6e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a6e8:	2b58      	cmp	r3, #88	; 0x58
 801a6ea:	d14f      	bne.n	801a78c <_strtol_l.isra.0+0xe4>
 801a6ec:	786c      	ldrb	r4, [r5, #1]
 801a6ee:	2610      	movs	r6, #16
 801a6f0:	3502      	adds	r5, #2
 801a6f2:	2a00      	cmp	r2, #0
 801a6f4:	bf14      	ite	ne
 801a6f6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801a6fa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801a6fe:	2700      	movs	r7, #0
 801a700:	fbb1 fcf6 	udiv	ip, r1, r6
 801a704:	4638      	mov	r0, r7
 801a706:	fb06 1e1c 	mls	lr, r6, ip, r1
 801a70a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801a70e:	2b09      	cmp	r3, #9
 801a710:	d817      	bhi.n	801a742 <_strtol_l.isra.0+0x9a>
 801a712:	461c      	mov	r4, r3
 801a714:	42a6      	cmp	r6, r4
 801a716:	dd23      	ble.n	801a760 <_strtol_l.isra.0+0xb8>
 801a718:	1c7b      	adds	r3, r7, #1
 801a71a:	d007      	beq.n	801a72c <_strtol_l.isra.0+0x84>
 801a71c:	4584      	cmp	ip, r0
 801a71e:	d31c      	bcc.n	801a75a <_strtol_l.isra.0+0xb2>
 801a720:	d101      	bne.n	801a726 <_strtol_l.isra.0+0x7e>
 801a722:	45a6      	cmp	lr, r4
 801a724:	db19      	blt.n	801a75a <_strtol_l.isra.0+0xb2>
 801a726:	fb00 4006 	mla	r0, r0, r6, r4
 801a72a:	2701      	movs	r7, #1
 801a72c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a730:	e7eb      	b.n	801a70a <_strtol_l.isra.0+0x62>
 801a732:	462f      	mov	r7, r5
 801a734:	e7bf      	b.n	801a6b6 <_strtol_l.isra.0+0xe>
 801a736:	2c2b      	cmp	r4, #43	; 0x2b
 801a738:	bf04      	itt	eq
 801a73a:	1cbd      	addeq	r5, r7, #2
 801a73c:	787c      	ldrbeq	r4, [r7, #1]
 801a73e:	461a      	mov	r2, r3
 801a740:	e7c9      	b.n	801a6d6 <_strtol_l.isra.0+0x2e>
 801a742:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801a746:	2b19      	cmp	r3, #25
 801a748:	d801      	bhi.n	801a74e <_strtol_l.isra.0+0xa6>
 801a74a:	3c37      	subs	r4, #55	; 0x37
 801a74c:	e7e2      	b.n	801a714 <_strtol_l.isra.0+0x6c>
 801a74e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801a752:	2b19      	cmp	r3, #25
 801a754:	d804      	bhi.n	801a760 <_strtol_l.isra.0+0xb8>
 801a756:	3c57      	subs	r4, #87	; 0x57
 801a758:	e7dc      	b.n	801a714 <_strtol_l.isra.0+0x6c>
 801a75a:	f04f 37ff 	mov.w	r7, #4294967295
 801a75e:	e7e5      	b.n	801a72c <_strtol_l.isra.0+0x84>
 801a760:	1c7b      	adds	r3, r7, #1
 801a762:	d108      	bne.n	801a776 <_strtol_l.isra.0+0xce>
 801a764:	2322      	movs	r3, #34	; 0x22
 801a766:	f8c8 3000 	str.w	r3, [r8]
 801a76a:	4608      	mov	r0, r1
 801a76c:	f1ba 0f00 	cmp.w	sl, #0
 801a770:	d107      	bne.n	801a782 <_strtol_l.isra.0+0xda>
 801a772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a776:	b102      	cbz	r2, 801a77a <_strtol_l.isra.0+0xd2>
 801a778:	4240      	negs	r0, r0
 801a77a:	f1ba 0f00 	cmp.w	sl, #0
 801a77e:	d0f8      	beq.n	801a772 <_strtol_l.isra.0+0xca>
 801a780:	b10f      	cbz	r7, 801a786 <_strtol_l.isra.0+0xde>
 801a782:	f105 39ff 	add.w	r9, r5, #4294967295
 801a786:	f8ca 9000 	str.w	r9, [sl]
 801a78a:	e7f2      	b.n	801a772 <_strtol_l.isra.0+0xca>
 801a78c:	2430      	movs	r4, #48	; 0x30
 801a78e:	2e00      	cmp	r6, #0
 801a790:	d1af      	bne.n	801a6f2 <_strtol_l.isra.0+0x4a>
 801a792:	2608      	movs	r6, #8
 801a794:	e7ad      	b.n	801a6f2 <_strtol_l.isra.0+0x4a>
 801a796:	2c30      	cmp	r4, #48	; 0x30
 801a798:	d0a3      	beq.n	801a6e2 <_strtol_l.isra.0+0x3a>
 801a79a:	260a      	movs	r6, #10
 801a79c:	e7a9      	b.n	801a6f2 <_strtol_l.isra.0+0x4a>
	...

0801a7a0 <_strtol_r>:
 801a7a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a7a2:	4c06      	ldr	r4, [pc, #24]	; (801a7bc <_strtol_r+0x1c>)
 801a7a4:	4d06      	ldr	r5, [pc, #24]	; (801a7c0 <_strtol_r+0x20>)
 801a7a6:	6824      	ldr	r4, [r4, #0]
 801a7a8:	6a24      	ldr	r4, [r4, #32]
 801a7aa:	2c00      	cmp	r4, #0
 801a7ac:	bf08      	it	eq
 801a7ae:	462c      	moveq	r4, r5
 801a7b0:	9400      	str	r4, [sp, #0]
 801a7b2:	f7ff ff79 	bl	801a6a8 <_strtol_l.isra.0>
 801a7b6:	b003      	add	sp, #12
 801a7b8:	bd30      	pop	{r4, r5, pc}
 801a7ba:	bf00      	nop
 801a7bc:	2000001c 	.word	0x2000001c
 801a7c0:	20000080 	.word	0x20000080

0801a7c4 <__swbuf_r>:
 801a7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7c6:	460e      	mov	r6, r1
 801a7c8:	4614      	mov	r4, r2
 801a7ca:	4605      	mov	r5, r0
 801a7cc:	b118      	cbz	r0, 801a7d6 <__swbuf_r+0x12>
 801a7ce:	6983      	ldr	r3, [r0, #24]
 801a7d0:	b90b      	cbnz	r3, 801a7d6 <__swbuf_r+0x12>
 801a7d2:	f000 ff8d 	bl	801b6f0 <__sinit>
 801a7d6:	4b21      	ldr	r3, [pc, #132]	; (801a85c <__swbuf_r+0x98>)
 801a7d8:	429c      	cmp	r4, r3
 801a7da:	d12a      	bne.n	801a832 <__swbuf_r+0x6e>
 801a7dc:	686c      	ldr	r4, [r5, #4]
 801a7de:	69a3      	ldr	r3, [r4, #24]
 801a7e0:	60a3      	str	r3, [r4, #8]
 801a7e2:	89a3      	ldrh	r3, [r4, #12]
 801a7e4:	071a      	lsls	r2, r3, #28
 801a7e6:	d52e      	bpl.n	801a846 <__swbuf_r+0x82>
 801a7e8:	6923      	ldr	r3, [r4, #16]
 801a7ea:	b363      	cbz	r3, 801a846 <__swbuf_r+0x82>
 801a7ec:	6923      	ldr	r3, [r4, #16]
 801a7ee:	6820      	ldr	r0, [r4, #0]
 801a7f0:	1ac0      	subs	r0, r0, r3
 801a7f2:	6963      	ldr	r3, [r4, #20]
 801a7f4:	b2f6      	uxtb	r6, r6
 801a7f6:	4283      	cmp	r3, r0
 801a7f8:	4637      	mov	r7, r6
 801a7fa:	dc04      	bgt.n	801a806 <__swbuf_r+0x42>
 801a7fc:	4621      	mov	r1, r4
 801a7fe:	4628      	mov	r0, r5
 801a800:	f000 ff0c 	bl	801b61c <_fflush_r>
 801a804:	bb28      	cbnz	r0, 801a852 <__swbuf_r+0x8e>
 801a806:	68a3      	ldr	r3, [r4, #8]
 801a808:	3b01      	subs	r3, #1
 801a80a:	60a3      	str	r3, [r4, #8]
 801a80c:	6823      	ldr	r3, [r4, #0]
 801a80e:	1c5a      	adds	r2, r3, #1
 801a810:	6022      	str	r2, [r4, #0]
 801a812:	701e      	strb	r6, [r3, #0]
 801a814:	6963      	ldr	r3, [r4, #20]
 801a816:	3001      	adds	r0, #1
 801a818:	4283      	cmp	r3, r0
 801a81a:	d004      	beq.n	801a826 <__swbuf_r+0x62>
 801a81c:	89a3      	ldrh	r3, [r4, #12]
 801a81e:	07db      	lsls	r3, r3, #31
 801a820:	d519      	bpl.n	801a856 <__swbuf_r+0x92>
 801a822:	2e0a      	cmp	r6, #10
 801a824:	d117      	bne.n	801a856 <__swbuf_r+0x92>
 801a826:	4621      	mov	r1, r4
 801a828:	4628      	mov	r0, r5
 801a82a:	f000 fef7 	bl	801b61c <_fflush_r>
 801a82e:	b190      	cbz	r0, 801a856 <__swbuf_r+0x92>
 801a830:	e00f      	b.n	801a852 <__swbuf_r+0x8e>
 801a832:	4b0b      	ldr	r3, [pc, #44]	; (801a860 <__swbuf_r+0x9c>)
 801a834:	429c      	cmp	r4, r3
 801a836:	d101      	bne.n	801a83c <__swbuf_r+0x78>
 801a838:	68ac      	ldr	r4, [r5, #8]
 801a83a:	e7d0      	b.n	801a7de <__swbuf_r+0x1a>
 801a83c:	4b09      	ldr	r3, [pc, #36]	; (801a864 <__swbuf_r+0xa0>)
 801a83e:	429c      	cmp	r4, r3
 801a840:	bf08      	it	eq
 801a842:	68ec      	ldreq	r4, [r5, #12]
 801a844:	e7cb      	b.n	801a7de <__swbuf_r+0x1a>
 801a846:	4621      	mov	r1, r4
 801a848:	4628      	mov	r0, r5
 801a84a:	f000 f81b 	bl	801a884 <__swsetup_r>
 801a84e:	2800      	cmp	r0, #0
 801a850:	d0cc      	beq.n	801a7ec <__swbuf_r+0x28>
 801a852:	f04f 37ff 	mov.w	r7, #4294967295
 801a856:	4638      	mov	r0, r7
 801a858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a85a:	bf00      	nop
 801a85c:	08020d20 	.word	0x08020d20
 801a860:	08020d40 	.word	0x08020d40
 801a864:	08020d00 	.word	0x08020d00

0801a868 <__ascii_wctomb>:
 801a868:	b149      	cbz	r1, 801a87e <__ascii_wctomb+0x16>
 801a86a:	2aff      	cmp	r2, #255	; 0xff
 801a86c:	bf85      	ittet	hi
 801a86e:	238a      	movhi	r3, #138	; 0x8a
 801a870:	6003      	strhi	r3, [r0, #0]
 801a872:	700a      	strbls	r2, [r1, #0]
 801a874:	f04f 30ff 	movhi.w	r0, #4294967295
 801a878:	bf98      	it	ls
 801a87a:	2001      	movls	r0, #1
 801a87c:	4770      	bx	lr
 801a87e:	4608      	mov	r0, r1
 801a880:	4770      	bx	lr
	...

0801a884 <__swsetup_r>:
 801a884:	4b32      	ldr	r3, [pc, #200]	; (801a950 <__swsetup_r+0xcc>)
 801a886:	b570      	push	{r4, r5, r6, lr}
 801a888:	681d      	ldr	r5, [r3, #0]
 801a88a:	4606      	mov	r6, r0
 801a88c:	460c      	mov	r4, r1
 801a88e:	b125      	cbz	r5, 801a89a <__swsetup_r+0x16>
 801a890:	69ab      	ldr	r3, [r5, #24]
 801a892:	b913      	cbnz	r3, 801a89a <__swsetup_r+0x16>
 801a894:	4628      	mov	r0, r5
 801a896:	f000 ff2b 	bl	801b6f0 <__sinit>
 801a89a:	4b2e      	ldr	r3, [pc, #184]	; (801a954 <__swsetup_r+0xd0>)
 801a89c:	429c      	cmp	r4, r3
 801a89e:	d10f      	bne.n	801a8c0 <__swsetup_r+0x3c>
 801a8a0:	686c      	ldr	r4, [r5, #4]
 801a8a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a8a6:	b29a      	uxth	r2, r3
 801a8a8:	0715      	lsls	r5, r2, #28
 801a8aa:	d42c      	bmi.n	801a906 <__swsetup_r+0x82>
 801a8ac:	06d0      	lsls	r0, r2, #27
 801a8ae:	d411      	bmi.n	801a8d4 <__swsetup_r+0x50>
 801a8b0:	2209      	movs	r2, #9
 801a8b2:	6032      	str	r2, [r6, #0]
 801a8b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a8b8:	81a3      	strh	r3, [r4, #12]
 801a8ba:	f04f 30ff 	mov.w	r0, #4294967295
 801a8be:	e03e      	b.n	801a93e <__swsetup_r+0xba>
 801a8c0:	4b25      	ldr	r3, [pc, #148]	; (801a958 <__swsetup_r+0xd4>)
 801a8c2:	429c      	cmp	r4, r3
 801a8c4:	d101      	bne.n	801a8ca <__swsetup_r+0x46>
 801a8c6:	68ac      	ldr	r4, [r5, #8]
 801a8c8:	e7eb      	b.n	801a8a2 <__swsetup_r+0x1e>
 801a8ca:	4b24      	ldr	r3, [pc, #144]	; (801a95c <__swsetup_r+0xd8>)
 801a8cc:	429c      	cmp	r4, r3
 801a8ce:	bf08      	it	eq
 801a8d0:	68ec      	ldreq	r4, [r5, #12]
 801a8d2:	e7e6      	b.n	801a8a2 <__swsetup_r+0x1e>
 801a8d4:	0751      	lsls	r1, r2, #29
 801a8d6:	d512      	bpl.n	801a8fe <__swsetup_r+0x7a>
 801a8d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a8da:	b141      	cbz	r1, 801a8ee <__swsetup_r+0x6a>
 801a8dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a8e0:	4299      	cmp	r1, r3
 801a8e2:	d002      	beq.n	801a8ea <__swsetup_r+0x66>
 801a8e4:	4630      	mov	r0, r6
 801a8e6:	f001 ff3d 	bl	801c764 <_free_r>
 801a8ea:	2300      	movs	r3, #0
 801a8ec:	6363      	str	r3, [r4, #52]	; 0x34
 801a8ee:	89a3      	ldrh	r3, [r4, #12]
 801a8f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a8f4:	81a3      	strh	r3, [r4, #12]
 801a8f6:	2300      	movs	r3, #0
 801a8f8:	6063      	str	r3, [r4, #4]
 801a8fa:	6923      	ldr	r3, [r4, #16]
 801a8fc:	6023      	str	r3, [r4, #0]
 801a8fe:	89a3      	ldrh	r3, [r4, #12]
 801a900:	f043 0308 	orr.w	r3, r3, #8
 801a904:	81a3      	strh	r3, [r4, #12]
 801a906:	6923      	ldr	r3, [r4, #16]
 801a908:	b94b      	cbnz	r3, 801a91e <__swsetup_r+0x9a>
 801a90a:	89a3      	ldrh	r3, [r4, #12]
 801a90c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a914:	d003      	beq.n	801a91e <__swsetup_r+0x9a>
 801a916:	4621      	mov	r1, r4
 801a918:	4630      	mov	r0, r6
 801a91a:	f001 facd 	bl	801beb8 <__smakebuf_r>
 801a91e:	89a2      	ldrh	r2, [r4, #12]
 801a920:	f012 0301 	ands.w	r3, r2, #1
 801a924:	d00c      	beq.n	801a940 <__swsetup_r+0xbc>
 801a926:	2300      	movs	r3, #0
 801a928:	60a3      	str	r3, [r4, #8]
 801a92a:	6963      	ldr	r3, [r4, #20]
 801a92c:	425b      	negs	r3, r3
 801a92e:	61a3      	str	r3, [r4, #24]
 801a930:	6923      	ldr	r3, [r4, #16]
 801a932:	b953      	cbnz	r3, 801a94a <__swsetup_r+0xc6>
 801a934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a938:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801a93c:	d1ba      	bne.n	801a8b4 <__swsetup_r+0x30>
 801a93e:	bd70      	pop	{r4, r5, r6, pc}
 801a940:	0792      	lsls	r2, r2, #30
 801a942:	bf58      	it	pl
 801a944:	6963      	ldrpl	r3, [r4, #20]
 801a946:	60a3      	str	r3, [r4, #8]
 801a948:	e7f2      	b.n	801a930 <__swsetup_r+0xac>
 801a94a:	2000      	movs	r0, #0
 801a94c:	e7f7      	b.n	801a93e <__swsetup_r+0xba>
 801a94e:	bf00      	nop
 801a950:	2000001c 	.word	0x2000001c
 801a954:	08020d20 	.word	0x08020d20
 801a958:	08020d40 	.word	0x08020d40
 801a95c:	08020d00 	.word	0x08020d00

0801a960 <quorem>:
 801a960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a964:	6903      	ldr	r3, [r0, #16]
 801a966:	690c      	ldr	r4, [r1, #16]
 801a968:	42a3      	cmp	r3, r4
 801a96a:	4680      	mov	r8, r0
 801a96c:	f2c0 8082 	blt.w	801aa74 <quorem+0x114>
 801a970:	3c01      	subs	r4, #1
 801a972:	f101 0714 	add.w	r7, r1, #20
 801a976:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801a97a:	f100 0614 	add.w	r6, r0, #20
 801a97e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801a982:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801a986:	eb06 030c 	add.w	r3, r6, ip
 801a98a:	3501      	adds	r5, #1
 801a98c:	eb07 090c 	add.w	r9, r7, ip
 801a990:	9301      	str	r3, [sp, #4]
 801a992:	fbb0 f5f5 	udiv	r5, r0, r5
 801a996:	b395      	cbz	r5, 801a9fe <quorem+0x9e>
 801a998:	f04f 0a00 	mov.w	sl, #0
 801a99c:	4638      	mov	r0, r7
 801a99e:	46b6      	mov	lr, r6
 801a9a0:	46d3      	mov	fp, sl
 801a9a2:	f850 2b04 	ldr.w	r2, [r0], #4
 801a9a6:	b293      	uxth	r3, r2
 801a9a8:	fb05 a303 	mla	r3, r5, r3, sl
 801a9ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a9b0:	b29b      	uxth	r3, r3
 801a9b2:	ebab 0303 	sub.w	r3, fp, r3
 801a9b6:	0c12      	lsrs	r2, r2, #16
 801a9b8:	f8de b000 	ldr.w	fp, [lr]
 801a9bc:	fb05 a202 	mla	r2, r5, r2, sl
 801a9c0:	fa13 f38b 	uxtah	r3, r3, fp
 801a9c4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801a9c8:	fa1f fb82 	uxth.w	fp, r2
 801a9cc:	f8de 2000 	ldr.w	r2, [lr]
 801a9d0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801a9d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a9d8:	b29b      	uxth	r3, r3
 801a9da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a9de:	4581      	cmp	r9, r0
 801a9e0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801a9e4:	f84e 3b04 	str.w	r3, [lr], #4
 801a9e8:	d2db      	bcs.n	801a9a2 <quorem+0x42>
 801a9ea:	f856 300c 	ldr.w	r3, [r6, ip]
 801a9ee:	b933      	cbnz	r3, 801a9fe <quorem+0x9e>
 801a9f0:	9b01      	ldr	r3, [sp, #4]
 801a9f2:	3b04      	subs	r3, #4
 801a9f4:	429e      	cmp	r6, r3
 801a9f6:	461a      	mov	r2, r3
 801a9f8:	d330      	bcc.n	801aa5c <quorem+0xfc>
 801a9fa:	f8c8 4010 	str.w	r4, [r8, #16]
 801a9fe:	4640      	mov	r0, r8
 801aa00:	f001 fcf6 	bl	801c3f0 <__mcmp>
 801aa04:	2800      	cmp	r0, #0
 801aa06:	db25      	blt.n	801aa54 <quorem+0xf4>
 801aa08:	3501      	adds	r5, #1
 801aa0a:	4630      	mov	r0, r6
 801aa0c:	f04f 0c00 	mov.w	ip, #0
 801aa10:	f857 2b04 	ldr.w	r2, [r7], #4
 801aa14:	f8d0 e000 	ldr.w	lr, [r0]
 801aa18:	b293      	uxth	r3, r2
 801aa1a:	ebac 0303 	sub.w	r3, ip, r3
 801aa1e:	0c12      	lsrs	r2, r2, #16
 801aa20:	fa13 f38e 	uxtah	r3, r3, lr
 801aa24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801aa28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801aa2c:	b29b      	uxth	r3, r3
 801aa2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801aa32:	45b9      	cmp	r9, r7
 801aa34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801aa38:	f840 3b04 	str.w	r3, [r0], #4
 801aa3c:	d2e8      	bcs.n	801aa10 <quorem+0xb0>
 801aa3e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801aa42:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801aa46:	b92a      	cbnz	r2, 801aa54 <quorem+0xf4>
 801aa48:	3b04      	subs	r3, #4
 801aa4a:	429e      	cmp	r6, r3
 801aa4c:	461a      	mov	r2, r3
 801aa4e:	d30b      	bcc.n	801aa68 <quorem+0x108>
 801aa50:	f8c8 4010 	str.w	r4, [r8, #16]
 801aa54:	4628      	mov	r0, r5
 801aa56:	b003      	add	sp, #12
 801aa58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa5c:	6812      	ldr	r2, [r2, #0]
 801aa5e:	3b04      	subs	r3, #4
 801aa60:	2a00      	cmp	r2, #0
 801aa62:	d1ca      	bne.n	801a9fa <quorem+0x9a>
 801aa64:	3c01      	subs	r4, #1
 801aa66:	e7c5      	b.n	801a9f4 <quorem+0x94>
 801aa68:	6812      	ldr	r2, [r2, #0]
 801aa6a:	3b04      	subs	r3, #4
 801aa6c:	2a00      	cmp	r2, #0
 801aa6e:	d1ef      	bne.n	801aa50 <quorem+0xf0>
 801aa70:	3c01      	subs	r4, #1
 801aa72:	e7ea      	b.n	801aa4a <quorem+0xea>
 801aa74:	2000      	movs	r0, #0
 801aa76:	e7ee      	b.n	801aa56 <quorem+0xf6>

0801aa78 <_dtoa_r>:
 801aa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa7c:	ec57 6b10 	vmov	r6, r7, d0
 801aa80:	b095      	sub	sp, #84	; 0x54
 801aa82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801aa84:	9108      	str	r1, [sp, #32]
 801aa86:	4604      	mov	r4, r0
 801aa88:	920a      	str	r2, [sp, #40]	; 0x28
 801aa8a:	9311      	str	r3, [sp, #68]	; 0x44
 801aa8c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 801aa90:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801aa94:	b93d      	cbnz	r5, 801aaa6 <_dtoa_r+0x2e>
 801aa96:	2010      	movs	r0, #16
 801aa98:	f001 fa4e 	bl	801bf38 <malloc>
 801aa9c:	6260      	str	r0, [r4, #36]	; 0x24
 801aa9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801aaa2:	6005      	str	r5, [r0, #0]
 801aaa4:	60c5      	str	r5, [r0, #12]
 801aaa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801aaa8:	6819      	ldr	r1, [r3, #0]
 801aaaa:	b151      	cbz	r1, 801aac2 <_dtoa_r+0x4a>
 801aaac:	685a      	ldr	r2, [r3, #4]
 801aaae:	604a      	str	r2, [r1, #4]
 801aab0:	2301      	movs	r3, #1
 801aab2:	4093      	lsls	r3, r2
 801aab4:	608b      	str	r3, [r1, #8]
 801aab6:	4620      	mov	r0, r4
 801aab8:	f001 fa7a 	bl	801bfb0 <_Bfree>
 801aabc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801aabe:	2200      	movs	r2, #0
 801aac0:	601a      	str	r2, [r3, #0]
 801aac2:	1e3b      	subs	r3, r7, #0
 801aac4:	bfb9      	ittee	lt
 801aac6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801aaca:	9303      	strlt	r3, [sp, #12]
 801aacc:	2300      	movge	r3, #0
 801aace:	f8c8 3000 	strge.w	r3, [r8]
 801aad2:	9d03      	ldr	r5, [sp, #12]
 801aad4:	4bac      	ldr	r3, [pc, #688]	; (801ad88 <_dtoa_r+0x310>)
 801aad6:	bfbc      	itt	lt
 801aad8:	2201      	movlt	r2, #1
 801aada:	f8c8 2000 	strlt.w	r2, [r8]
 801aade:	43ab      	bics	r3, r5
 801aae0:	d11b      	bne.n	801ab1a <_dtoa_r+0xa2>
 801aae2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801aae4:	f242 730f 	movw	r3, #9999	; 0x270f
 801aae8:	6013      	str	r3, [r2, #0]
 801aaea:	9b02      	ldr	r3, [sp, #8]
 801aaec:	b923      	cbnz	r3, 801aaf8 <_dtoa_r+0x80>
 801aaee:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801aaf2:	2d00      	cmp	r5, #0
 801aaf4:	f000 84dd 	beq.w	801b4b2 <_dtoa_r+0xa3a>
 801aaf8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801aafa:	b953      	cbnz	r3, 801ab12 <_dtoa_r+0x9a>
 801aafc:	4ba3      	ldr	r3, [pc, #652]	; (801ad8c <_dtoa_r+0x314>)
 801aafe:	e020      	b.n	801ab42 <_dtoa_r+0xca>
 801ab00:	4ba3      	ldr	r3, [pc, #652]	; (801ad90 <_dtoa_r+0x318>)
 801ab02:	9304      	str	r3, [sp, #16]
 801ab04:	3308      	adds	r3, #8
 801ab06:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ab08:	6013      	str	r3, [r2, #0]
 801ab0a:	9804      	ldr	r0, [sp, #16]
 801ab0c:	b015      	add	sp, #84	; 0x54
 801ab0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab12:	4b9e      	ldr	r3, [pc, #632]	; (801ad8c <_dtoa_r+0x314>)
 801ab14:	9304      	str	r3, [sp, #16]
 801ab16:	3303      	adds	r3, #3
 801ab18:	e7f5      	b.n	801ab06 <_dtoa_r+0x8e>
 801ab1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ab1e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ab22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab26:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ab2a:	d10c      	bne.n	801ab46 <_dtoa_r+0xce>
 801ab2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ab2e:	2301      	movs	r3, #1
 801ab30:	6013      	str	r3, [r2, #0]
 801ab32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	f000 84b9 	beq.w	801b4ac <_dtoa_r+0xa34>
 801ab3a:	4b96      	ldr	r3, [pc, #600]	; (801ad94 <_dtoa_r+0x31c>)
 801ab3c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ab3e:	6013      	str	r3, [r2, #0]
 801ab40:	3b01      	subs	r3, #1
 801ab42:	9304      	str	r3, [sp, #16]
 801ab44:	e7e1      	b.n	801ab0a <_dtoa_r+0x92>
 801ab46:	a913      	add	r1, sp, #76	; 0x4c
 801ab48:	aa12      	add	r2, sp, #72	; 0x48
 801ab4a:	ed9d 0b04 	vldr	d0, [sp, #16]
 801ab4e:	4620      	mov	r0, r4
 801ab50:	f001 fd3c 	bl	801c5cc <__d2b>
 801ab54:	f3c5 560a 	ubfx	r6, r5, #20, #11
 801ab58:	9001      	str	r0, [sp, #4]
 801ab5a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ab5c:	2e00      	cmp	r6, #0
 801ab5e:	d046      	beq.n	801abee <_dtoa_r+0x176>
 801ab60:	9805      	ldr	r0, [sp, #20]
 801ab62:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801ab66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ab6a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 801ab6e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801ab72:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 801ab76:	2700      	movs	r7, #0
 801ab78:	ee07 aa90 	vmov	s15, sl
 801ab7c:	ec43 2b16 	vmov	d6, r2, r3
 801ab80:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801ab84:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 801ad70 <_dtoa_r+0x2f8>
 801ab88:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801ab8c:	ee36 7b47 	vsub.f64	d7, d6, d7
 801ab90:	ed9f 6b79 	vldr	d6, [pc, #484]	; 801ad78 <_dtoa_r+0x300>
 801ab94:	eea7 6b04 	vfma.f64	d6, d7, d4
 801ab98:	eeb0 7b46 	vmov.f64	d7, d6
 801ab9c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 801ad80 <_dtoa_r+0x308>
 801aba0:	eea5 7b06 	vfma.f64	d7, d5, d6
 801aba4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801aba8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801abac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801abb0:	ee16 ba90 	vmov	fp, s13
 801abb4:	d508      	bpl.n	801abc8 <_dtoa_r+0x150>
 801abb6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801abba:	eeb4 6b47 	vcmp.f64	d6, d7
 801abbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801abc2:	bf18      	it	ne
 801abc4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801abc8:	f1bb 0f16 	cmp.w	fp, #22
 801abcc:	d834      	bhi.n	801ac38 <_dtoa_r+0x1c0>
 801abce:	4b72      	ldr	r3, [pc, #456]	; (801ad98 <_dtoa_r+0x320>)
 801abd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801abd4:	ed93 7b00 	vldr	d7, [r3]
 801abd8:	ed9d 6b02 	vldr	d6, [sp, #8]
 801abdc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801abe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801abe4:	dd01      	ble.n	801abea <_dtoa_r+0x172>
 801abe6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801abea:	2300      	movs	r3, #0
 801abec:	e025      	b.n	801ac3a <_dtoa_r+0x1c2>
 801abee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801abf0:	eb01 0a03 	add.w	sl, r1, r3
 801abf4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 801abf8:	2b20      	cmp	r3, #32
 801abfa:	dd17      	ble.n	801ac2c <_dtoa_r+0x1b4>
 801abfc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801ac00:	9a02      	ldr	r2, [sp, #8]
 801ac02:	409d      	lsls	r5, r3
 801ac04:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 801ac08:	fa22 f303 	lsr.w	r3, r2, r3
 801ac0c:	432b      	orrs	r3, r5
 801ac0e:	ee07 3a90 	vmov	s15, r3
 801ac12:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801ac16:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ac1a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ac1e:	9805      	ldr	r0, [sp, #20]
 801ac20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ac24:	2701      	movs	r7, #1
 801ac26:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 801ac2a:	e7a5      	b.n	801ab78 <_dtoa_r+0x100>
 801ac2c:	9a02      	ldr	r2, [sp, #8]
 801ac2e:	f1c3 0320 	rsb	r3, r3, #32
 801ac32:	fa02 f303 	lsl.w	r3, r2, r3
 801ac36:	e7ea      	b.n	801ac0e <_dtoa_r+0x196>
 801ac38:	2301      	movs	r3, #1
 801ac3a:	eba1 0a0a 	sub.w	sl, r1, sl
 801ac3e:	9310      	str	r3, [sp, #64]	; 0x40
 801ac40:	f1ba 0301 	subs.w	r3, sl, #1
 801ac44:	9307      	str	r3, [sp, #28]
 801ac46:	bf43      	ittte	mi
 801ac48:	2300      	movmi	r3, #0
 801ac4a:	f1ca 0a01 	rsbmi	sl, sl, #1
 801ac4e:	9307      	strmi	r3, [sp, #28]
 801ac50:	f04f 0a00 	movpl.w	sl, #0
 801ac54:	f1bb 0f00 	cmp.w	fp, #0
 801ac58:	db19      	blt.n	801ac8e <_dtoa_r+0x216>
 801ac5a:	9b07      	ldr	r3, [sp, #28]
 801ac5c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801ac60:	445b      	add	r3, fp
 801ac62:	9307      	str	r3, [sp, #28]
 801ac64:	f04f 0800 	mov.w	r8, #0
 801ac68:	9b08      	ldr	r3, [sp, #32]
 801ac6a:	2b09      	cmp	r3, #9
 801ac6c:	d866      	bhi.n	801ad3c <_dtoa_r+0x2c4>
 801ac6e:	2b05      	cmp	r3, #5
 801ac70:	bfc4      	itt	gt
 801ac72:	3b04      	subgt	r3, #4
 801ac74:	9308      	strgt	r3, [sp, #32]
 801ac76:	9b08      	ldr	r3, [sp, #32]
 801ac78:	f1a3 0302 	sub.w	r3, r3, #2
 801ac7c:	bfcc      	ite	gt
 801ac7e:	2500      	movgt	r5, #0
 801ac80:	2501      	movle	r5, #1
 801ac82:	2b03      	cmp	r3, #3
 801ac84:	d866      	bhi.n	801ad54 <_dtoa_r+0x2dc>
 801ac86:	e8df f003 	tbb	[pc, r3]
 801ac8a:	5755      	.short	0x5755
 801ac8c:	4909      	.short	0x4909
 801ac8e:	2300      	movs	r3, #0
 801ac90:	ebaa 0a0b 	sub.w	sl, sl, fp
 801ac94:	f1cb 0800 	rsb	r8, fp, #0
 801ac98:	930b      	str	r3, [sp, #44]	; 0x2c
 801ac9a:	e7e5      	b.n	801ac68 <_dtoa_r+0x1f0>
 801ac9c:	2301      	movs	r3, #1
 801ac9e:	9309      	str	r3, [sp, #36]	; 0x24
 801aca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aca2:	2b00      	cmp	r3, #0
 801aca4:	dd59      	ble.n	801ad5a <_dtoa_r+0x2e2>
 801aca6:	9306      	str	r3, [sp, #24]
 801aca8:	4699      	mov	r9, r3
 801acaa:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801acac:	2200      	movs	r2, #0
 801acae:	6072      	str	r2, [r6, #4]
 801acb0:	2204      	movs	r2, #4
 801acb2:	f102 0014 	add.w	r0, r2, #20
 801acb6:	4298      	cmp	r0, r3
 801acb8:	6871      	ldr	r1, [r6, #4]
 801acba:	d953      	bls.n	801ad64 <_dtoa_r+0x2ec>
 801acbc:	4620      	mov	r0, r4
 801acbe:	f001 f943 	bl	801bf48 <_Balloc>
 801acc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801acc4:	6030      	str	r0, [r6, #0]
 801acc6:	681b      	ldr	r3, [r3, #0]
 801acc8:	9304      	str	r3, [sp, #16]
 801acca:	f1b9 0f0e 	cmp.w	r9, #14
 801acce:	f200 80c2 	bhi.w	801ae56 <_dtoa_r+0x3de>
 801acd2:	2d00      	cmp	r5, #0
 801acd4:	f000 80bf 	beq.w	801ae56 <_dtoa_r+0x3de>
 801acd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801acdc:	f1bb 0f00 	cmp.w	fp, #0
 801ace0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801ace4:	f340 80e6 	ble.w	801aeb4 <_dtoa_r+0x43c>
 801ace8:	4a2b      	ldr	r2, [pc, #172]	; (801ad98 <_dtoa_r+0x320>)
 801acea:	f00b 030f 	and.w	r3, fp, #15
 801acee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801acf2:	ed93 7b00 	vldr	d7, [r3]
 801acf6:	ea4f 132b 	mov.w	r3, fp, asr #4
 801acfa:	06da      	lsls	r2, r3, #27
 801acfc:	f140 80d8 	bpl.w	801aeb0 <_dtoa_r+0x438>
 801ad00:	4a26      	ldr	r2, [pc, #152]	; (801ad9c <_dtoa_r+0x324>)
 801ad02:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 801ad06:	ed92 6b08 	vldr	d6, [r2, #32]
 801ad0a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801ad0e:	ed8d 6b02 	vstr	d6, [sp, #8]
 801ad12:	f003 030f 	and.w	r3, r3, #15
 801ad16:	2203      	movs	r2, #3
 801ad18:	4920      	ldr	r1, [pc, #128]	; (801ad9c <_dtoa_r+0x324>)
 801ad1a:	e04a      	b.n	801adb2 <_dtoa_r+0x33a>
 801ad1c:	2301      	movs	r3, #1
 801ad1e:	9309      	str	r3, [sp, #36]	; 0x24
 801ad20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad22:	445b      	add	r3, fp
 801ad24:	f103 0901 	add.w	r9, r3, #1
 801ad28:	9306      	str	r3, [sp, #24]
 801ad2a:	464b      	mov	r3, r9
 801ad2c:	2b01      	cmp	r3, #1
 801ad2e:	bfb8      	it	lt
 801ad30:	2301      	movlt	r3, #1
 801ad32:	e7ba      	b.n	801acaa <_dtoa_r+0x232>
 801ad34:	2300      	movs	r3, #0
 801ad36:	e7b2      	b.n	801ac9e <_dtoa_r+0x226>
 801ad38:	2300      	movs	r3, #0
 801ad3a:	e7f0      	b.n	801ad1e <_dtoa_r+0x2a6>
 801ad3c:	2501      	movs	r5, #1
 801ad3e:	2300      	movs	r3, #0
 801ad40:	e9cd 3508 	strd	r3, r5, [sp, #32]
 801ad44:	f04f 33ff 	mov.w	r3, #4294967295
 801ad48:	9306      	str	r3, [sp, #24]
 801ad4a:	4699      	mov	r9, r3
 801ad4c:	2200      	movs	r2, #0
 801ad4e:	2312      	movs	r3, #18
 801ad50:	920a      	str	r2, [sp, #40]	; 0x28
 801ad52:	e7aa      	b.n	801acaa <_dtoa_r+0x232>
 801ad54:	2301      	movs	r3, #1
 801ad56:	9309      	str	r3, [sp, #36]	; 0x24
 801ad58:	e7f4      	b.n	801ad44 <_dtoa_r+0x2cc>
 801ad5a:	2301      	movs	r3, #1
 801ad5c:	9306      	str	r3, [sp, #24]
 801ad5e:	4699      	mov	r9, r3
 801ad60:	461a      	mov	r2, r3
 801ad62:	e7f5      	b.n	801ad50 <_dtoa_r+0x2d8>
 801ad64:	3101      	adds	r1, #1
 801ad66:	6071      	str	r1, [r6, #4]
 801ad68:	0052      	lsls	r2, r2, #1
 801ad6a:	e7a2      	b.n	801acb2 <_dtoa_r+0x23a>
 801ad6c:	f3af 8000 	nop.w
 801ad70:	636f4361 	.word	0x636f4361
 801ad74:	3fd287a7 	.word	0x3fd287a7
 801ad78:	8b60c8b3 	.word	0x8b60c8b3
 801ad7c:	3fc68a28 	.word	0x3fc68a28
 801ad80:	509f79fb 	.word	0x509f79fb
 801ad84:	3fd34413 	.word	0x3fd34413
 801ad88:	7ff00000 	.word	0x7ff00000
 801ad8c:	08020cfa 	.word	0x08020cfa
 801ad90:	08020cf1 	.word	0x08020cf1
 801ad94:	08020b73 	.word	0x08020b73
 801ad98:	08020d88 	.word	0x08020d88
 801ad9c:	08020d60 	.word	0x08020d60
 801ada0:	07de      	lsls	r6, r3, #31
 801ada2:	d504      	bpl.n	801adae <_dtoa_r+0x336>
 801ada4:	ed91 6b00 	vldr	d6, [r1]
 801ada8:	3201      	adds	r2, #1
 801adaa:	ee27 7b06 	vmul.f64	d7, d7, d6
 801adae:	105b      	asrs	r3, r3, #1
 801adb0:	3108      	adds	r1, #8
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d1f4      	bne.n	801ada0 <_dtoa_r+0x328>
 801adb6:	ed9d 6b02 	vldr	d6, [sp, #8]
 801adba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801adbe:	ed8d 7b02 	vstr	d7, [sp, #8]
 801adc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801adc4:	2b00      	cmp	r3, #0
 801adc6:	f000 80a7 	beq.w	801af18 <_dtoa_r+0x4a0>
 801adca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801adce:	ed9d 7b02 	vldr	d7, [sp, #8]
 801add2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801add6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adda:	f140 809d 	bpl.w	801af18 <_dtoa_r+0x4a0>
 801adde:	f1b9 0f00 	cmp.w	r9, #0
 801ade2:	f000 8099 	beq.w	801af18 <_dtoa_r+0x4a0>
 801ade6:	9b06      	ldr	r3, [sp, #24]
 801ade8:	2b00      	cmp	r3, #0
 801adea:	dd30      	ble.n	801ae4e <_dtoa_r+0x3d6>
 801adec:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801adf0:	ee27 7b06 	vmul.f64	d7, d7, d6
 801adf4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801adf8:	9d06      	ldr	r5, [sp, #24]
 801adfa:	f10b 33ff 	add.w	r3, fp, #4294967295
 801adfe:	3201      	adds	r2, #1
 801ae00:	ed9d 6b02 	vldr	d6, [sp, #8]
 801ae04:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801ae08:	ee07 2a90 	vmov	s15, r2
 801ae0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ae10:	eea7 5b06 	vfma.f64	d5, d7, d6
 801ae14:	ed8d 5b02 	vstr	d5, [sp, #8]
 801ae18:	9a03      	ldr	r2, [sp, #12]
 801ae1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ae1e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 801ae22:	2d00      	cmp	r5, #0
 801ae24:	d17b      	bne.n	801af1e <_dtoa_r+0x4a6>
 801ae26:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801ae2a:	ee36 6b47 	vsub.f64	d6, d6, d7
 801ae2e:	ec41 0b17 	vmov	d7, r0, r1
 801ae32:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ae36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae3a:	f300 8253 	bgt.w	801b2e4 <_dtoa_r+0x86c>
 801ae3e:	eeb1 7b47 	vneg.f64	d7, d7
 801ae42:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ae46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae4a:	f100 8249 	bmi.w	801b2e0 <_dtoa_r+0x868>
 801ae4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801ae52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ae56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	f2c0 8119 	blt.w	801b090 <_dtoa_r+0x618>
 801ae5e:	f1bb 0f0e 	cmp.w	fp, #14
 801ae62:	f300 8115 	bgt.w	801b090 <_dtoa_r+0x618>
 801ae66:	4bc3      	ldr	r3, [pc, #780]	; (801b174 <_dtoa_r+0x6fc>)
 801ae68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ae6c:	ed93 6b00 	vldr	d6, [r3]
 801ae70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	f280 80ba 	bge.w	801afec <_dtoa_r+0x574>
 801ae78:	f1b9 0f00 	cmp.w	r9, #0
 801ae7c:	f300 80b6 	bgt.w	801afec <_dtoa_r+0x574>
 801ae80:	f040 822d 	bne.w	801b2de <_dtoa_r+0x866>
 801ae84:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801ae88:	ee26 6b07 	vmul.f64	d6, d6, d7
 801ae8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ae90:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ae94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae98:	464d      	mov	r5, r9
 801ae9a:	464f      	mov	r7, r9
 801ae9c:	f280 8204 	bge.w	801b2a8 <_dtoa_r+0x830>
 801aea0:	9b04      	ldr	r3, [sp, #16]
 801aea2:	9a04      	ldr	r2, [sp, #16]
 801aea4:	1c5e      	adds	r6, r3, #1
 801aea6:	2331      	movs	r3, #49	; 0x31
 801aea8:	7013      	strb	r3, [r2, #0]
 801aeaa:	f10b 0b01 	add.w	fp, fp, #1
 801aeae:	e1ff      	b.n	801b2b0 <_dtoa_r+0x838>
 801aeb0:	2202      	movs	r2, #2
 801aeb2:	e731      	b.n	801ad18 <_dtoa_r+0x2a0>
 801aeb4:	d02e      	beq.n	801af14 <_dtoa_r+0x49c>
 801aeb6:	f1cb 0300 	rsb	r3, fp, #0
 801aeba:	4aae      	ldr	r2, [pc, #696]	; (801b174 <_dtoa_r+0x6fc>)
 801aebc:	f003 010f 	and.w	r1, r3, #15
 801aec0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801aec4:	ed92 7b00 	vldr	d7, [r2]
 801aec8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 801aecc:	ee26 7b07 	vmul.f64	d7, d6, d7
 801aed0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801aed4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801aed8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801aedc:	49a6      	ldr	r1, [pc, #664]	; (801b178 <_dtoa_r+0x700>)
 801aede:	111b      	asrs	r3, r3, #4
 801aee0:	2000      	movs	r0, #0
 801aee2:	2202      	movs	r2, #2
 801aee4:	b93b      	cbnz	r3, 801aef6 <_dtoa_r+0x47e>
 801aee6:	2800      	cmp	r0, #0
 801aee8:	f43f af6b 	beq.w	801adc2 <_dtoa_r+0x34a>
 801aeec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801aef0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801aef4:	e765      	b.n	801adc2 <_dtoa_r+0x34a>
 801aef6:	07dd      	lsls	r5, r3, #31
 801aef8:	d509      	bpl.n	801af0e <_dtoa_r+0x496>
 801aefa:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801aefe:	ed91 7b00 	vldr	d7, [r1]
 801af02:	ee26 7b07 	vmul.f64	d7, d6, d7
 801af06:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801af0a:	3201      	adds	r2, #1
 801af0c:	2001      	movs	r0, #1
 801af0e:	105b      	asrs	r3, r3, #1
 801af10:	3108      	adds	r1, #8
 801af12:	e7e7      	b.n	801aee4 <_dtoa_r+0x46c>
 801af14:	2202      	movs	r2, #2
 801af16:	e754      	b.n	801adc2 <_dtoa_r+0x34a>
 801af18:	465b      	mov	r3, fp
 801af1a:	464d      	mov	r5, r9
 801af1c:	e770      	b.n	801ae00 <_dtoa_r+0x388>
 801af1e:	4a95      	ldr	r2, [pc, #596]	; (801b174 <_dtoa_r+0x6fc>)
 801af20:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 801af24:	ed12 4b02 	vldr	d4, [r2, #-8]
 801af28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801af2a:	ec41 0b17 	vmov	d7, r0, r1
 801af2e:	b35a      	cbz	r2, 801af88 <_dtoa_r+0x510>
 801af30:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801af34:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801af38:	9e04      	ldr	r6, [sp, #16]
 801af3a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801af3e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801af42:	ee35 7b47 	vsub.f64	d7, d5, d7
 801af46:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801af4a:	ee14 2a90 	vmov	r2, s9
 801af4e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801af52:	3230      	adds	r2, #48	; 0x30
 801af54:	ee36 6b45 	vsub.f64	d6, d6, d5
 801af58:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801af5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af60:	f806 2b01 	strb.w	r2, [r6], #1
 801af64:	d43b      	bmi.n	801afde <_dtoa_r+0x566>
 801af66:	ee32 5b46 	vsub.f64	d5, d2, d6
 801af6a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801af6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af72:	d472      	bmi.n	801b05a <_dtoa_r+0x5e2>
 801af74:	9a04      	ldr	r2, [sp, #16]
 801af76:	1ab2      	subs	r2, r6, r2
 801af78:	4295      	cmp	r5, r2
 801af7a:	f77f af68 	ble.w	801ae4e <_dtoa_r+0x3d6>
 801af7e:	ee27 7b03 	vmul.f64	d7, d7, d3
 801af82:	ee26 6b03 	vmul.f64	d6, d6, d3
 801af86:	e7de      	b.n	801af46 <_dtoa_r+0x4ce>
 801af88:	9a04      	ldr	r2, [sp, #16]
 801af8a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801af8e:	1956      	adds	r6, r2, r5
 801af90:	4611      	mov	r1, r2
 801af92:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801af96:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801af9a:	ee14 2a90 	vmov	r2, s9
 801af9e:	3230      	adds	r2, #48	; 0x30
 801afa0:	f801 2b01 	strb.w	r2, [r1], #1
 801afa4:	42b1      	cmp	r1, r6
 801afa6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801afaa:	ee36 6b45 	vsub.f64	d6, d6, d5
 801afae:	d11a      	bne.n	801afe6 <_dtoa_r+0x56e>
 801afb0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801afb4:	ee37 4b05 	vadd.f64	d4, d7, d5
 801afb8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801afbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afc0:	dc4b      	bgt.n	801b05a <_dtoa_r+0x5e2>
 801afc2:	ee35 7b47 	vsub.f64	d7, d5, d7
 801afc6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801afca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afce:	f57f af3e 	bpl.w	801ae4e <_dtoa_r+0x3d6>
 801afd2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801afd6:	2a30      	cmp	r2, #48	; 0x30
 801afd8:	f106 31ff 	add.w	r1, r6, #4294967295
 801afdc:	d001      	beq.n	801afe2 <_dtoa_r+0x56a>
 801afde:	469b      	mov	fp, r3
 801afe0:	e02a      	b.n	801b038 <_dtoa_r+0x5c0>
 801afe2:	460e      	mov	r6, r1
 801afe4:	e7f5      	b.n	801afd2 <_dtoa_r+0x55a>
 801afe6:	ee26 6b03 	vmul.f64	d6, d6, d3
 801afea:	e7d4      	b.n	801af96 <_dtoa_r+0x51e>
 801afec:	ed9d 7b02 	vldr	d7, [sp, #8]
 801aff0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801aff4:	9e04      	ldr	r6, [sp, #16]
 801aff6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801affa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801affe:	ee15 3a10 	vmov	r3, s10
 801b002:	3330      	adds	r3, #48	; 0x30
 801b004:	f806 3b01 	strb.w	r3, [r6], #1
 801b008:	9b04      	ldr	r3, [sp, #16]
 801b00a:	1af3      	subs	r3, r6, r3
 801b00c:	4599      	cmp	r9, r3
 801b00e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801b012:	eea3 7b46 	vfms.f64	d7, d3, d6
 801b016:	d133      	bne.n	801b080 <_dtoa_r+0x608>
 801b018:	ee37 7b07 	vadd.f64	d7, d7, d7
 801b01c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b024:	dc18      	bgt.n	801b058 <_dtoa_r+0x5e0>
 801b026:	eeb4 7b46 	vcmp.f64	d7, d6
 801b02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b02e:	d103      	bne.n	801b038 <_dtoa_r+0x5c0>
 801b030:	ee15 3a10 	vmov	r3, s10
 801b034:	07db      	lsls	r3, r3, #31
 801b036:	d40f      	bmi.n	801b058 <_dtoa_r+0x5e0>
 801b038:	9901      	ldr	r1, [sp, #4]
 801b03a:	4620      	mov	r0, r4
 801b03c:	f000 ffb8 	bl	801bfb0 <_Bfree>
 801b040:	2300      	movs	r3, #0
 801b042:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b044:	7033      	strb	r3, [r6, #0]
 801b046:	f10b 0301 	add.w	r3, fp, #1
 801b04a:	6013      	str	r3, [r2, #0]
 801b04c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b04e:	2b00      	cmp	r3, #0
 801b050:	f43f ad5b 	beq.w	801ab0a <_dtoa_r+0x92>
 801b054:	601e      	str	r6, [r3, #0]
 801b056:	e558      	b.n	801ab0a <_dtoa_r+0x92>
 801b058:	465b      	mov	r3, fp
 801b05a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b05e:	2939      	cmp	r1, #57	; 0x39
 801b060:	f106 32ff 	add.w	r2, r6, #4294967295
 801b064:	d106      	bne.n	801b074 <_dtoa_r+0x5fc>
 801b066:	9904      	ldr	r1, [sp, #16]
 801b068:	4291      	cmp	r1, r2
 801b06a:	d107      	bne.n	801b07c <_dtoa_r+0x604>
 801b06c:	2230      	movs	r2, #48	; 0x30
 801b06e:	700a      	strb	r2, [r1, #0]
 801b070:	3301      	adds	r3, #1
 801b072:	460a      	mov	r2, r1
 801b074:	7811      	ldrb	r1, [r2, #0]
 801b076:	3101      	adds	r1, #1
 801b078:	7011      	strb	r1, [r2, #0]
 801b07a:	e7b0      	b.n	801afde <_dtoa_r+0x566>
 801b07c:	4616      	mov	r6, r2
 801b07e:	e7ec      	b.n	801b05a <_dtoa_r+0x5e2>
 801b080:	ee27 7b04 	vmul.f64	d7, d7, d4
 801b084:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b08c:	d1b3      	bne.n	801aff6 <_dtoa_r+0x57e>
 801b08e:	e7d3      	b.n	801b038 <_dtoa_r+0x5c0>
 801b090:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b092:	2a00      	cmp	r2, #0
 801b094:	f000 808d 	beq.w	801b1b2 <_dtoa_r+0x73a>
 801b098:	9a08      	ldr	r2, [sp, #32]
 801b09a:	2a01      	cmp	r2, #1
 801b09c:	dc72      	bgt.n	801b184 <_dtoa_r+0x70c>
 801b09e:	2f00      	cmp	r7, #0
 801b0a0:	d06c      	beq.n	801b17c <_dtoa_r+0x704>
 801b0a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801b0a6:	4645      	mov	r5, r8
 801b0a8:	4656      	mov	r6, sl
 801b0aa:	9a07      	ldr	r2, [sp, #28]
 801b0ac:	2101      	movs	r1, #1
 801b0ae:	441a      	add	r2, r3
 801b0b0:	4620      	mov	r0, r4
 801b0b2:	449a      	add	sl, r3
 801b0b4:	9207      	str	r2, [sp, #28]
 801b0b6:	f001 f859 	bl	801c16c <__i2b>
 801b0ba:	4607      	mov	r7, r0
 801b0bc:	2e00      	cmp	r6, #0
 801b0be:	dd0b      	ble.n	801b0d8 <_dtoa_r+0x660>
 801b0c0:	9b07      	ldr	r3, [sp, #28]
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	dd08      	ble.n	801b0d8 <_dtoa_r+0x660>
 801b0c6:	42b3      	cmp	r3, r6
 801b0c8:	9a07      	ldr	r2, [sp, #28]
 801b0ca:	bfa8      	it	ge
 801b0cc:	4633      	movge	r3, r6
 801b0ce:	ebaa 0a03 	sub.w	sl, sl, r3
 801b0d2:	1af6      	subs	r6, r6, r3
 801b0d4:	1ad3      	subs	r3, r2, r3
 801b0d6:	9307      	str	r3, [sp, #28]
 801b0d8:	f1b8 0f00 	cmp.w	r8, #0
 801b0dc:	d01d      	beq.n	801b11a <_dtoa_r+0x6a2>
 801b0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	d06a      	beq.n	801b1ba <_dtoa_r+0x742>
 801b0e4:	b18d      	cbz	r5, 801b10a <_dtoa_r+0x692>
 801b0e6:	4639      	mov	r1, r7
 801b0e8:	462a      	mov	r2, r5
 801b0ea:	4620      	mov	r0, r4
 801b0ec:	f001 f8de 	bl	801c2ac <__pow5mult>
 801b0f0:	9a01      	ldr	r2, [sp, #4]
 801b0f2:	4601      	mov	r1, r0
 801b0f4:	4607      	mov	r7, r0
 801b0f6:	4620      	mov	r0, r4
 801b0f8:	f001 f841 	bl	801c17e <__multiply>
 801b0fc:	9901      	ldr	r1, [sp, #4]
 801b0fe:	900c      	str	r0, [sp, #48]	; 0x30
 801b100:	4620      	mov	r0, r4
 801b102:	f000 ff55 	bl	801bfb0 <_Bfree>
 801b106:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b108:	9301      	str	r3, [sp, #4]
 801b10a:	ebb8 0205 	subs.w	r2, r8, r5
 801b10e:	d004      	beq.n	801b11a <_dtoa_r+0x6a2>
 801b110:	9901      	ldr	r1, [sp, #4]
 801b112:	4620      	mov	r0, r4
 801b114:	f001 f8ca 	bl	801c2ac <__pow5mult>
 801b118:	9001      	str	r0, [sp, #4]
 801b11a:	2101      	movs	r1, #1
 801b11c:	4620      	mov	r0, r4
 801b11e:	f001 f825 	bl	801c16c <__i2b>
 801b122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b124:	4605      	mov	r5, r0
 801b126:	2b00      	cmp	r3, #0
 801b128:	f000 81ca 	beq.w	801b4c0 <_dtoa_r+0xa48>
 801b12c:	461a      	mov	r2, r3
 801b12e:	4601      	mov	r1, r0
 801b130:	4620      	mov	r0, r4
 801b132:	f001 f8bb 	bl	801c2ac <__pow5mult>
 801b136:	9b08      	ldr	r3, [sp, #32]
 801b138:	2b01      	cmp	r3, #1
 801b13a:	4605      	mov	r5, r0
 801b13c:	dc44      	bgt.n	801b1c8 <_dtoa_r+0x750>
 801b13e:	9b02      	ldr	r3, [sp, #8]
 801b140:	2b00      	cmp	r3, #0
 801b142:	d13c      	bne.n	801b1be <_dtoa_r+0x746>
 801b144:	9b03      	ldr	r3, [sp, #12]
 801b146:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b14a:	2b00      	cmp	r3, #0
 801b14c:	d137      	bne.n	801b1be <_dtoa_r+0x746>
 801b14e:	9b03      	ldr	r3, [sp, #12]
 801b150:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b154:	0d1b      	lsrs	r3, r3, #20
 801b156:	051b      	lsls	r3, r3, #20
 801b158:	2b00      	cmp	r3, #0
 801b15a:	d033      	beq.n	801b1c4 <_dtoa_r+0x74c>
 801b15c:	9b07      	ldr	r3, [sp, #28]
 801b15e:	3301      	adds	r3, #1
 801b160:	f10a 0a01 	add.w	sl, sl, #1
 801b164:	9307      	str	r3, [sp, #28]
 801b166:	f04f 0801 	mov.w	r8, #1
 801b16a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b16c:	bb73      	cbnz	r3, 801b1cc <_dtoa_r+0x754>
 801b16e:	2001      	movs	r0, #1
 801b170:	e034      	b.n	801b1dc <_dtoa_r+0x764>
 801b172:	bf00      	nop
 801b174:	08020d88 	.word	0x08020d88
 801b178:	08020d60 	.word	0x08020d60
 801b17c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b17e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801b182:	e790      	b.n	801b0a6 <_dtoa_r+0x62e>
 801b184:	f109 35ff 	add.w	r5, r9, #4294967295
 801b188:	45a8      	cmp	r8, r5
 801b18a:	bfbf      	itttt	lt
 801b18c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801b18e:	eba5 0808 	sublt.w	r8, r5, r8
 801b192:	4443      	addlt	r3, r8
 801b194:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801b196:	bfb6      	itet	lt
 801b198:	46a8      	movlt	r8, r5
 801b19a:	eba8 0505 	subge.w	r5, r8, r5
 801b19e:	2500      	movlt	r5, #0
 801b1a0:	f1b9 0f00 	cmp.w	r9, #0
 801b1a4:	bfb9      	ittee	lt
 801b1a6:	ebaa 0609 	sublt.w	r6, sl, r9
 801b1aa:	2300      	movlt	r3, #0
 801b1ac:	4656      	movge	r6, sl
 801b1ae:	464b      	movge	r3, r9
 801b1b0:	e77b      	b.n	801b0aa <_dtoa_r+0x632>
 801b1b2:	4645      	mov	r5, r8
 801b1b4:	4656      	mov	r6, sl
 801b1b6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801b1b8:	e780      	b.n	801b0bc <_dtoa_r+0x644>
 801b1ba:	4642      	mov	r2, r8
 801b1bc:	e7a8      	b.n	801b110 <_dtoa_r+0x698>
 801b1be:	f04f 0800 	mov.w	r8, #0
 801b1c2:	e7d2      	b.n	801b16a <_dtoa_r+0x6f2>
 801b1c4:	4698      	mov	r8, r3
 801b1c6:	e7d0      	b.n	801b16a <_dtoa_r+0x6f2>
 801b1c8:	f04f 0800 	mov.w	r8, #0
 801b1cc:	692b      	ldr	r3, [r5, #16]
 801b1ce:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801b1d2:	6918      	ldr	r0, [r3, #16]
 801b1d4:	f000 ff7c 	bl	801c0d0 <__hi0bits>
 801b1d8:	f1c0 0020 	rsb	r0, r0, #32
 801b1dc:	9b07      	ldr	r3, [sp, #28]
 801b1de:	4418      	add	r0, r3
 801b1e0:	f010 001f 	ands.w	r0, r0, #31
 801b1e4:	d047      	beq.n	801b276 <_dtoa_r+0x7fe>
 801b1e6:	f1c0 0320 	rsb	r3, r0, #32
 801b1ea:	2b04      	cmp	r3, #4
 801b1ec:	dd3b      	ble.n	801b266 <_dtoa_r+0x7ee>
 801b1ee:	9b07      	ldr	r3, [sp, #28]
 801b1f0:	f1c0 001c 	rsb	r0, r0, #28
 801b1f4:	4482      	add	sl, r0
 801b1f6:	4406      	add	r6, r0
 801b1f8:	4403      	add	r3, r0
 801b1fa:	9307      	str	r3, [sp, #28]
 801b1fc:	f1ba 0f00 	cmp.w	sl, #0
 801b200:	dd05      	ble.n	801b20e <_dtoa_r+0x796>
 801b202:	4652      	mov	r2, sl
 801b204:	9901      	ldr	r1, [sp, #4]
 801b206:	4620      	mov	r0, r4
 801b208:	f001 f89e 	bl	801c348 <__lshift>
 801b20c:	9001      	str	r0, [sp, #4]
 801b20e:	9b07      	ldr	r3, [sp, #28]
 801b210:	2b00      	cmp	r3, #0
 801b212:	dd05      	ble.n	801b220 <_dtoa_r+0x7a8>
 801b214:	4629      	mov	r1, r5
 801b216:	461a      	mov	r2, r3
 801b218:	4620      	mov	r0, r4
 801b21a:	f001 f895 	bl	801c348 <__lshift>
 801b21e:	4605      	mov	r5, r0
 801b220:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b222:	b353      	cbz	r3, 801b27a <_dtoa_r+0x802>
 801b224:	4629      	mov	r1, r5
 801b226:	9801      	ldr	r0, [sp, #4]
 801b228:	f001 f8e2 	bl	801c3f0 <__mcmp>
 801b22c:	2800      	cmp	r0, #0
 801b22e:	da24      	bge.n	801b27a <_dtoa_r+0x802>
 801b230:	2300      	movs	r3, #0
 801b232:	220a      	movs	r2, #10
 801b234:	9901      	ldr	r1, [sp, #4]
 801b236:	4620      	mov	r0, r4
 801b238:	f000 fed1 	bl	801bfde <__multadd>
 801b23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b23e:	9001      	str	r0, [sp, #4]
 801b240:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b244:	2b00      	cmp	r3, #0
 801b246:	f000 8142 	beq.w	801b4ce <_dtoa_r+0xa56>
 801b24a:	2300      	movs	r3, #0
 801b24c:	4639      	mov	r1, r7
 801b24e:	220a      	movs	r2, #10
 801b250:	4620      	mov	r0, r4
 801b252:	f000 fec4 	bl	801bfde <__multadd>
 801b256:	9b06      	ldr	r3, [sp, #24]
 801b258:	2b00      	cmp	r3, #0
 801b25a:	4607      	mov	r7, r0
 801b25c:	dc4b      	bgt.n	801b2f6 <_dtoa_r+0x87e>
 801b25e:	9b08      	ldr	r3, [sp, #32]
 801b260:	2b02      	cmp	r3, #2
 801b262:	dd48      	ble.n	801b2f6 <_dtoa_r+0x87e>
 801b264:	e011      	b.n	801b28a <_dtoa_r+0x812>
 801b266:	d0c9      	beq.n	801b1fc <_dtoa_r+0x784>
 801b268:	9a07      	ldr	r2, [sp, #28]
 801b26a:	331c      	adds	r3, #28
 801b26c:	441a      	add	r2, r3
 801b26e:	449a      	add	sl, r3
 801b270:	441e      	add	r6, r3
 801b272:	4613      	mov	r3, r2
 801b274:	e7c1      	b.n	801b1fa <_dtoa_r+0x782>
 801b276:	4603      	mov	r3, r0
 801b278:	e7f6      	b.n	801b268 <_dtoa_r+0x7f0>
 801b27a:	f1b9 0f00 	cmp.w	r9, #0
 801b27e:	dc34      	bgt.n	801b2ea <_dtoa_r+0x872>
 801b280:	9b08      	ldr	r3, [sp, #32]
 801b282:	2b02      	cmp	r3, #2
 801b284:	dd31      	ble.n	801b2ea <_dtoa_r+0x872>
 801b286:	f8cd 9018 	str.w	r9, [sp, #24]
 801b28a:	9b06      	ldr	r3, [sp, #24]
 801b28c:	b963      	cbnz	r3, 801b2a8 <_dtoa_r+0x830>
 801b28e:	4629      	mov	r1, r5
 801b290:	2205      	movs	r2, #5
 801b292:	4620      	mov	r0, r4
 801b294:	f000 fea3 	bl	801bfde <__multadd>
 801b298:	4601      	mov	r1, r0
 801b29a:	4605      	mov	r5, r0
 801b29c:	9801      	ldr	r0, [sp, #4]
 801b29e:	f001 f8a7 	bl	801c3f0 <__mcmp>
 801b2a2:	2800      	cmp	r0, #0
 801b2a4:	f73f adfc 	bgt.w	801aea0 <_dtoa_r+0x428>
 801b2a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b2aa:	9e04      	ldr	r6, [sp, #16]
 801b2ac:	ea6f 0b03 	mvn.w	fp, r3
 801b2b0:	f04f 0900 	mov.w	r9, #0
 801b2b4:	4629      	mov	r1, r5
 801b2b6:	4620      	mov	r0, r4
 801b2b8:	f000 fe7a 	bl	801bfb0 <_Bfree>
 801b2bc:	2f00      	cmp	r7, #0
 801b2be:	f43f aebb 	beq.w	801b038 <_dtoa_r+0x5c0>
 801b2c2:	f1b9 0f00 	cmp.w	r9, #0
 801b2c6:	d005      	beq.n	801b2d4 <_dtoa_r+0x85c>
 801b2c8:	45b9      	cmp	r9, r7
 801b2ca:	d003      	beq.n	801b2d4 <_dtoa_r+0x85c>
 801b2cc:	4649      	mov	r1, r9
 801b2ce:	4620      	mov	r0, r4
 801b2d0:	f000 fe6e 	bl	801bfb0 <_Bfree>
 801b2d4:	4639      	mov	r1, r7
 801b2d6:	4620      	mov	r0, r4
 801b2d8:	f000 fe6a 	bl	801bfb0 <_Bfree>
 801b2dc:	e6ac      	b.n	801b038 <_dtoa_r+0x5c0>
 801b2de:	2500      	movs	r5, #0
 801b2e0:	462f      	mov	r7, r5
 801b2e2:	e7e1      	b.n	801b2a8 <_dtoa_r+0x830>
 801b2e4:	469b      	mov	fp, r3
 801b2e6:	462f      	mov	r7, r5
 801b2e8:	e5da      	b.n	801aea0 <_dtoa_r+0x428>
 801b2ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2ec:	f8cd 9018 	str.w	r9, [sp, #24]
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	f000 80f3 	beq.w	801b4dc <_dtoa_r+0xa64>
 801b2f6:	2e00      	cmp	r6, #0
 801b2f8:	dd05      	ble.n	801b306 <_dtoa_r+0x88e>
 801b2fa:	4639      	mov	r1, r7
 801b2fc:	4632      	mov	r2, r6
 801b2fe:	4620      	mov	r0, r4
 801b300:	f001 f822 	bl	801c348 <__lshift>
 801b304:	4607      	mov	r7, r0
 801b306:	f1b8 0f00 	cmp.w	r8, #0
 801b30a:	d04c      	beq.n	801b3a6 <_dtoa_r+0x92e>
 801b30c:	6879      	ldr	r1, [r7, #4]
 801b30e:	4620      	mov	r0, r4
 801b310:	f000 fe1a 	bl	801bf48 <_Balloc>
 801b314:	693a      	ldr	r2, [r7, #16]
 801b316:	3202      	adds	r2, #2
 801b318:	4606      	mov	r6, r0
 801b31a:	0092      	lsls	r2, r2, #2
 801b31c:	f107 010c 	add.w	r1, r7, #12
 801b320:	300c      	adds	r0, #12
 801b322:	f7fd fc8d 	bl	8018c40 <memcpy>
 801b326:	2201      	movs	r2, #1
 801b328:	4631      	mov	r1, r6
 801b32a:	4620      	mov	r0, r4
 801b32c:	f001 f80c 	bl	801c348 <__lshift>
 801b330:	9b02      	ldr	r3, [sp, #8]
 801b332:	f8dd a010 	ldr.w	sl, [sp, #16]
 801b336:	f003 0301 	and.w	r3, r3, #1
 801b33a:	46b9      	mov	r9, r7
 801b33c:	9307      	str	r3, [sp, #28]
 801b33e:	4607      	mov	r7, r0
 801b340:	4629      	mov	r1, r5
 801b342:	9801      	ldr	r0, [sp, #4]
 801b344:	f7ff fb0c 	bl	801a960 <quorem>
 801b348:	4649      	mov	r1, r9
 801b34a:	4606      	mov	r6, r0
 801b34c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801b350:	9801      	ldr	r0, [sp, #4]
 801b352:	f001 f84d 	bl	801c3f0 <__mcmp>
 801b356:	463a      	mov	r2, r7
 801b358:	9002      	str	r0, [sp, #8]
 801b35a:	4629      	mov	r1, r5
 801b35c:	4620      	mov	r0, r4
 801b35e:	f001 f861 	bl	801c424 <__mdiff>
 801b362:	68c3      	ldr	r3, [r0, #12]
 801b364:	4602      	mov	r2, r0
 801b366:	bb03      	cbnz	r3, 801b3aa <_dtoa_r+0x932>
 801b368:	4601      	mov	r1, r0
 801b36a:	9009      	str	r0, [sp, #36]	; 0x24
 801b36c:	9801      	ldr	r0, [sp, #4]
 801b36e:	f001 f83f 	bl	801c3f0 <__mcmp>
 801b372:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b374:	4603      	mov	r3, r0
 801b376:	4611      	mov	r1, r2
 801b378:	4620      	mov	r0, r4
 801b37a:	9309      	str	r3, [sp, #36]	; 0x24
 801b37c:	f000 fe18 	bl	801bfb0 <_Bfree>
 801b380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b382:	b9a3      	cbnz	r3, 801b3ae <_dtoa_r+0x936>
 801b384:	9a08      	ldr	r2, [sp, #32]
 801b386:	b992      	cbnz	r2, 801b3ae <_dtoa_r+0x936>
 801b388:	9a07      	ldr	r2, [sp, #28]
 801b38a:	b982      	cbnz	r2, 801b3ae <_dtoa_r+0x936>
 801b38c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801b390:	d029      	beq.n	801b3e6 <_dtoa_r+0x96e>
 801b392:	9b02      	ldr	r3, [sp, #8]
 801b394:	2b00      	cmp	r3, #0
 801b396:	dd01      	ble.n	801b39c <_dtoa_r+0x924>
 801b398:	f106 0831 	add.w	r8, r6, #49	; 0x31
 801b39c:	f10a 0601 	add.w	r6, sl, #1
 801b3a0:	f88a 8000 	strb.w	r8, [sl]
 801b3a4:	e786      	b.n	801b2b4 <_dtoa_r+0x83c>
 801b3a6:	4638      	mov	r0, r7
 801b3a8:	e7c2      	b.n	801b330 <_dtoa_r+0x8b8>
 801b3aa:	2301      	movs	r3, #1
 801b3ac:	e7e3      	b.n	801b376 <_dtoa_r+0x8fe>
 801b3ae:	9a02      	ldr	r2, [sp, #8]
 801b3b0:	2a00      	cmp	r2, #0
 801b3b2:	db04      	blt.n	801b3be <_dtoa_r+0x946>
 801b3b4:	d124      	bne.n	801b400 <_dtoa_r+0x988>
 801b3b6:	9a08      	ldr	r2, [sp, #32]
 801b3b8:	bb12      	cbnz	r2, 801b400 <_dtoa_r+0x988>
 801b3ba:	9a07      	ldr	r2, [sp, #28]
 801b3bc:	bb02      	cbnz	r2, 801b400 <_dtoa_r+0x988>
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	ddec      	ble.n	801b39c <_dtoa_r+0x924>
 801b3c2:	2201      	movs	r2, #1
 801b3c4:	9901      	ldr	r1, [sp, #4]
 801b3c6:	4620      	mov	r0, r4
 801b3c8:	f000 ffbe 	bl	801c348 <__lshift>
 801b3cc:	4629      	mov	r1, r5
 801b3ce:	9001      	str	r0, [sp, #4]
 801b3d0:	f001 f80e 	bl	801c3f0 <__mcmp>
 801b3d4:	2800      	cmp	r0, #0
 801b3d6:	dc03      	bgt.n	801b3e0 <_dtoa_r+0x968>
 801b3d8:	d1e0      	bne.n	801b39c <_dtoa_r+0x924>
 801b3da:	f018 0f01 	tst.w	r8, #1
 801b3de:	d0dd      	beq.n	801b39c <_dtoa_r+0x924>
 801b3e0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801b3e4:	d1d8      	bne.n	801b398 <_dtoa_r+0x920>
 801b3e6:	2339      	movs	r3, #57	; 0x39
 801b3e8:	f10a 0601 	add.w	r6, sl, #1
 801b3ec:	f88a 3000 	strb.w	r3, [sl]
 801b3f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801b3f4:	2b39      	cmp	r3, #57	; 0x39
 801b3f6:	f106 32ff 	add.w	r2, r6, #4294967295
 801b3fa:	d04c      	beq.n	801b496 <_dtoa_r+0xa1e>
 801b3fc:	3301      	adds	r3, #1
 801b3fe:	e051      	b.n	801b4a4 <_dtoa_r+0xa2c>
 801b400:	2b00      	cmp	r3, #0
 801b402:	f10a 0601 	add.w	r6, sl, #1
 801b406:	dd05      	ble.n	801b414 <_dtoa_r+0x99c>
 801b408:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801b40c:	d0eb      	beq.n	801b3e6 <_dtoa_r+0x96e>
 801b40e:	f108 0801 	add.w	r8, r8, #1
 801b412:	e7c5      	b.n	801b3a0 <_dtoa_r+0x928>
 801b414:	9b04      	ldr	r3, [sp, #16]
 801b416:	9a06      	ldr	r2, [sp, #24]
 801b418:	f806 8c01 	strb.w	r8, [r6, #-1]
 801b41c:	1af3      	subs	r3, r6, r3
 801b41e:	4293      	cmp	r3, r2
 801b420:	d021      	beq.n	801b466 <_dtoa_r+0x9ee>
 801b422:	2300      	movs	r3, #0
 801b424:	220a      	movs	r2, #10
 801b426:	9901      	ldr	r1, [sp, #4]
 801b428:	4620      	mov	r0, r4
 801b42a:	f000 fdd8 	bl	801bfde <__multadd>
 801b42e:	45b9      	cmp	r9, r7
 801b430:	9001      	str	r0, [sp, #4]
 801b432:	f04f 0300 	mov.w	r3, #0
 801b436:	f04f 020a 	mov.w	r2, #10
 801b43a:	4649      	mov	r1, r9
 801b43c:	4620      	mov	r0, r4
 801b43e:	d105      	bne.n	801b44c <_dtoa_r+0x9d4>
 801b440:	f000 fdcd 	bl	801bfde <__multadd>
 801b444:	4681      	mov	r9, r0
 801b446:	4607      	mov	r7, r0
 801b448:	46b2      	mov	sl, r6
 801b44a:	e779      	b.n	801b340 <_dtoa_r+0x8c8>
 801b44c:	f000 fdc7 	bl	801bfde <__multadd>
 801b450:	4639      	mov	r1, r7
 801b452:	4681      	mov	r9, r0
 801b454:	2300      	movs	r3, #0
 801b456:	220a      	movs	r2, #10
 801b458:	4620      	mov	r0, r4
 801b45a:	f000 fdc0 	bl	801bfde <__multadd>
 801b45e:	4607      	mov	r7, r0
 801b460:	e7f2      	b.n	801b448 <_dtoa_r+0x9d0>
 801b462:	f04f 0900 	mov.w	r9, #0
 801b466:	2201      	movs	r2, #1
 801b468:	9901      	ldr	r1, [sp, #4]
 801b46a:	4620      	mov	r0, r4
 801b46c:	f000 ff6c 	bl	801c348 <__lshift>
 801b470:	4629      	mov	r1, r5
 801b472:	9001      	str	r0, [sp, #4]
 801b474:	f000 ffbc 	bl	801c3f0 <__mcmp>
 801b478:	2800      	cmp	r0, #0
 801b47a:	dcb9      	bgt.n	801b3f0 <_dtoa_r+0x978>
 801b47c:	d102      	bne.n	801b484 <_dtoa_r+0xa0c>
 801b47e:	f018 0f01 	tst.w	r8, #1
 801b482:	d1b5      	bne.n	801b3f0 <_dtoa_r+0x978>
 801b484:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801b488:	2b30      	cmp	r3, #48	; 0x30
 801b48a:	f106 32ff 	add.w	r2, r6, #4294967295
 801b48e:	f47f af11 	bne.w	801b2b4 <_dtoa_r+0x83c>
 801b492:	4616      	mov	r6, r2
 801b494:	e7f6      	b.n	801b484 <_dtoa_r+0xa0c>
 801b496:	9b04      	ldr	r3, [sp, #16]
 801b498:	4293      	cmp	r3, r2
 801b49a:	d105      	bne.n	801b4a8 <_dtoa_r+0xa30>
 801b49c:	9a04      	ldr	r2, [sp, #16]
 801b49e:	f10b 0b01 	add.w	fp, fp, #1
 801b4a2:	2331      	movs	r3, #49	; 0x31
 801b4a4:	7013      	strb	r3, [r2, #0]
 801b4a6:	e705      	b.n	801b2b4 <_dtoa_r+0x83c>
 801b4a8:	4616      	mov	r6, r2
 801b4aa:	e7a1      	b.n	801b3f0 <_dtoa_r+0x978>
 801b4ac:	4b16      	ldr	r3, [pc, #88]	; (801b508 <_dtoa_r+0xa90>)
 801b4ae:	f7ff bb48 	b.w	801ab42 <_dtoa_r+0xca>
 801b4b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b4b4:	2b00      	cmp	r3, #0
 801b4b6:	f47f ab23 	bne.w	801ab00 <_dtoa_r+0x88>
 801b4ba:	4b14      	ldr	r3, [pc, #80]	; (801b50c <_dtoa_r+0xa94>)
 801b4bc:	f7ff bb41 	b.w	801ab42 <_dtoa_r+0xca>
 801b4c0:	9b08      	ldr	r3, [sp, #32]
 801b4c2:	2b01      	cmp	r3, #1
 801b4c4:	f77f ae3b 	ble.w	801b13e <_dtoa_r+0x6c6>
 801b4c8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801b4cc:	e64f      	b.n	801b16e <_dtoa_r+0x6f6>
 801b4ce:	9b06      	ldr	r3, [sp, #24]
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	dc03      	bgt.n	801b4dc <_dtoa_r+0xa64>
 801b4d4:	9b08      	ldr	r3, [sp, #32]
 801b4d6:	2b02      	cmp	r3, #2
 801b4d8:	f73f aed7 	bgt.w	801b28a <_dtoa_r+0x812>
 801b4dc:	9e04      	ldr	r6, [sp, #16]
 801b4de:	9801      	ldr	r0, [sp, #4]
 801b4e0:	4629      	mov	r1, r5
 801b4e2:	f7ff fa3d 	bl	801a960 <quorem>
 801b4e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801b4ea:	f806 8b01 	strb.w	r8, [r6], #1
 801b4ee:	9b04      	ldr	r3, [sp, #16]
 801b4f0:	9a06      	ldr	r2, [sp, #24]
 801b4f2:	1af3      	subs	r3, r6, r3
 801b4f4:	429a      	cmp	r2, r3
 801b4f6:	ddb4      	ble.n	801b462 <_dtoa_r+0x9ea>
 801b4f8:	2300      	movs	r3, #0
 801b4fa:	220a      	movs	r2, #10
 801b4fc:	9901      	ldr	r1, [sp, #4]
 801b4fe:	4620      	mov	r0, r4
 801b500:	f000 fd6d 	bl	801bfde <__multadd>
 801b504:	9001      	str	r0, [sp, #4]
 801b506:	e7ea      	b.n	801b4de <_dtoa_r+0xa66>
 801b508:	08020b72 	.word	0x08020b72
 801b50c:	08020cf1 	.word	0x08020cf1

0801b510 <__sflush_r>:
 801b510:	898a      	ldrh	r2, [r1, #12]
 801b512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b516:	4605      	mov	r5, r0
 801b518:	0710      	lsls	r0, r2, #28
 801b51a:	460c      	mov	r4, r1
 801b51c:	d458      	bmi.n	801b5d0 <__sflush_r+0xc0>
 801b51e:	684b      	ldr	r3, [r1, #4]
 801b520:	2b00      	cmp	r3, #0
 801b522:	dc05      	bgt.n	801b530 <__sflush_r+0x20>
 801b524:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b526:	2b00      	cmp	r3, #0
 801b528:	dc02      	bgt.n	801b530 <__sflush_r+0x20>
 801b52a:	2000      	movs	r0, #0
 801b52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b530:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b532:	2e00      	cmp	r6, #0
 801b534:	d0f9      	beq.n	801b52a <__sflush_r+0x1a>
 801b536:	2300      	movs	r3, #0
 801b538:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b53c:	682f      	ldr	r7, [r5, #0]
 801b53e:	6a21      	ldr	r1, [r4, #32]
 801b540:	602b      	str	r3, [r5, #0]
 801b542:	d032      	beq.n	801b5aa <__sflush_r+0x9a>
 801b544:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b546:	89a3      	ldrh	r3, [r4, #12]
 801b548:	075a      	lsls	r2, r3, #29
 801b54a:	d505      	bpl.n	801b558 <__sflush_r+0x48>
 801b54c:	6863      	ldr	r3, [r4, #4]
 801b54e:	1ac0      	subs	r0, r0, r3
 801b550:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b552:	b10b      	cbz	r3, 801b558 <__sflush_r+0x48>
 801b554:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b556:	1ac0      	subs	r0, r0, r3
 801b558:	2300      	movs	r3, #0
 801b55a:	4602      	mov	r2, r0
 801b55c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b55e:	6a21      	ldr	r1, [r4, #32]
 801b560:	4628      	mov	r0, r5
 801b562:	47b0      	blx	r6
 801b564:	1c43      	adds	r3, r0, #1
 801b566:	89a3      	ldrh	r3, [r4, #12]
 801b568:	d106      	bne.n	801b578 <__sflush_r+0x68>
 801b56a:	6829      	ldr	r1, [r5, #0]
 801b56c:	291d      	cmp	r1, #29
 801b56e:	d848      	bhi.n	801b602 <__sflush_r+0xf2>
 801b570:	4a29      	ldr	r2, [pc, #164]	; (801b618 <__sflush_r+0x108>)
 801b572:	40ca      	lsrs	r2, r1
 801b574:	07d6      	lsls	r6, r2, #31
 801b576:	d544      	bpl.n	801b602 <__sflush_r+0xf2>
 801b578:	2200      	movs	r2, #0
 801b57a:	6062      	str	r2, [r4, #4]
 801b57c:	04d9      	lsls	r1, r3, #19
 801b57e:	6922      	ldr	r2, [r4, #16]
 801b580:	6022      	str	r2, [r4, #0]
 801b582:	d504      	bpl.n	801b58e <__sflush_r+0x7e>
 801b584:	1c42      	adds	r2, r0, #1
 801b586:	d101      	bne.n	801b58c <__sflush_r+0x7c>
 801b588:	682b      	ldr	r3, [r5, #0]
 801b58a:	b903      	cbnz	r3, 801b58e <__sflush_r+0x7e>
 801b58c:	6560      	str	r0, [r4, #84]	; 0x54
 801b58e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b590:	602f      	str	r7, [r5, #0]
 801b592:	2900      	cmp	r1, #0
 801b594:	d0c9      	beq.n	801b52a <__sflush_r+0x1a>
 801b596:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b59a:	4299      	cmp	r1, r3
 801b59c:	d002      	beq.n	801b5a4 <__sflush_r+0x94>
 801b59e:	4628      	mov	r0, r5
 801b5a0:	f001 f8e0 	bl	801c764 <_free_r>
 801b5a4:	2000      	movs	r0, #0
 801b5a6:	6360      	str	r0, [r4, #52]	; 0x34
 801b5a8:	e7c0      	b.n	801b52c <__sflush_r+0x1c>
 801b5aa:	2301      	movs	r3, #1
 801b5ac:	4628      	mov	r0, r5
 801b5ae:	47b0      	blx	r6
 801b5b0:	1c41      	adds	r1, r0, #1
 801b5b2:	d1c8      	bne.n	801b546 <__sflush_r+0x36>
 801b5b4:	682b      	ldr	r3, [r5, #0]
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	d0c5      	beq.n	801b546 <__sflush_r+0x36>
 801b5ba:	2b1d      	cmp	r3, #29
 801b5bc:	d001      	beq.n	801b5c2 <__sflush_r+0xb2>
 801b5be:	2b16      	cmp	r3, #22
 801b5c0:	d101      	bne.n	801b5c6 <__sflush_r+0xb6>
 801b5c2:	602f      	str	r7, [r5, #0]
 801b5c4:	e7b1      	b.n	801b52a <__sflush_r+0x1a>
 801b5c6:	89a3      	ldrh	r3, [r4, #12]
 801b5c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b5cc:	81a3      	strh	r3, [r4, #12]
 801b5ce:	e7ad      	b.n	801b52c <__sflush_r+0x1c>
 801b5d0:	690f      	ldr	r7, [r1, #16]
 801b5d2:	2f00      	cmp	r7, #0
 801b5d4:	d0a9      	beq.n	801b52a <__sflush_r+0x1a>
 801b5d6:	0793      	lsls	r3, r2, #30
 801b5d8:	680e      	ldr	r6, [r1, #0]
 801b5da:	bf08      	it	eq
 801b5dc:	694b      	ldreq	r3, [r1, #20]
 801b5de:	600f      	str	r7, [r1, #0]
 801b5e0:	bf18      	it	ne
 801b5e2:	2300      	movne	r3, #0
 801b5e4:	eba6 0807 	sub.w	r8, r6, r7
 801b5e8:	608b      	str	r3, [r1, #8]
 801b5ea:	f1b8 0f00 	cmp.w	r8, #0
 801b5ee:	dd9c      	ble.n	801b52a <__sflush_r+0x1a>
 801b5f0:	4643      	mov	r3, r8
 801b5f2:	463a      	mov	r2, r7
 801b5f4:	6a21      	ldr	r1, [r4, #32]
 801b5f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b5f8:	4628      	mov	r0, r5
 801b5fa:	47b0      	blx	r6
 801b5fc:	2800      	cmp	r0, #0
 801b5fe:	dc06      	bgt.n	801b60e <__sflush_r+0xfe>
 801b600:	89a3      	ldrh	r3, [r4, #12]
 801b602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b606:	81a3      	strh	r3, [r4, #12]
 801b608:	f04f 30ff 	mov.w	r0, #4294967295
 801b60c:	e78e      	b.n	801b52c <__sflush_r+0x1c>
 801b60e:	4407      	add	r7, r0
 801b610:	eba8 0800 	sub.w	r8, r8, r0
 801b614:	e7e9      	b.n	801b5ea <__sflush_r+0xda>
 801b616:	bf00      	nop
 801b618:	20400001 	.word	0x20400001

0801b61c <_fflush_r>:
 801b61c:	b538      	push	{r3, r4, r5, lr}
 801b61e:	690b      	ldr	r3, [r1, #16]
 801b620:	4605      	mov	r5, r0
 801b622:	460c      	mov	r4, r1
 801b624:	b1db      	cbz	r3, 801b65e <_fflush_r+0x42>
 801b626:	b118      	cbz	r0, 801b630 <_fflush_r+0x14>
 801b628:	6983      	ldr	r3, [r0, #24]
 801b62a:	b90b      	cbnz	r3, 801b630 <_fflush_r+0x14>
 801b62c:	f000 f860 	bl	801b6f0 <__sinit>
 801b630:	4b0c      	ldr	r3, [pc, #48]	; (801b664 <_fflush_r+0x48>)
 801b632:	429c      	cmp	r4, r3
 801b634:	d109      	bne.n	801b64a <_fflush_r+0x2e>
 801b636:	686c      	ldr	r4, [r5, #4]
 801b638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b63c:	b17b      	cbz	r3, 801b65e <_fflush_r+0x42>
 801b63e:	4621      	mov	r1, r4
 801b640:	4628      	mov	r0, r5
 801b642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b646:	f7ff bf63 	b.w	801b510 <__sflush_r>
 801b64a:	4b07      	ldr	r3, [pc, #28]	; (801b668 <_fflush_r+0x4c>)
 801b64c:	429c      	cmp	r4, r3
 801b64e:	d101      	bne.n	801b654 <_fflush_r+0x38>
 801b650:	68ac      	ldr	r4, [r5, #8]
 801b652:	e7f1      	b.n	801b638 <_fflush_r+0x1c>
 801b654:	4b05      	ldr	r3, [pc, #20]	; (801b66c <_fflush_r+0x50>)
 801b656:	429c      	cmp	r4, r3
 801b658:	bf08      	it	eq
 801b65a:	68ec      	ldreq	r4, [r5, #12]
 801b65c:	e7ec      	b.n	801b638 <_fflush_r+0x1c>
 801b65e:	2000      	movs	r0, #0
 801b660:	bd38      	pop	{r3, r4, r5, pc}
 801b662:	bf00      	nop
 801b664:	08020d20 	.word	0x08020d20
 801b668:	08020d40 	.word	0x08020d40
 801b66c:	08020d00 	.word	0x08020d00

0801b670 <std>:
 801b670:	2300      	movs	r3, #0
 801b672:	b510      	push	{r4, lr}
 801b674:	4604      	mov	r4, r0
 801b676:	e9c0 3300 	strd	r3, r3, [r0]
 801b67a:	6083      	str	r3, [r0, #8]
 801b67c:	8181      	strh	r1, [r0, #12]
 801b67e:	6643      	str	r3, [r0, #100]	; 0x64
 801b680:	81c2      	strh	r2, [r0, #14]
 801b682:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b686:	6183      	str	r3, [r0, #24]
 801b688:	4619      	mov	r1, r3
 801b68a:	2208      	movs	r2, #8
 801b68c:	305c      	adds	r0, #92	; 0x5c
 801b68e:	f7fd fafb 	bl	8018c88 <memset>
 801b692:	4b05      	ldr	r3, [pc, #20]	; (801b6a8 <std+0x38>)
 801b694:	6263      	str	r3, [r4, #36]	; 0x24
 801b696:	4b05      	ldr	r3, [pc, #20]	; (801b6ac <std+0x3c>)
 801b698:	62a3      	str	r3, [r4, #40]	; 0x28
 801b69a:	4b05      	ldr	r3, [pc, #20]	; (801b6b0 <std+0x40>)
 801b69c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b69e:	4b05      	ldr	r3, [pc, #20]	; (801b6b4 <std+0x44>)
 801b6a0:	6224      	str	r4, [r4, #32]
 801b6a2:	6323      	str	r3, [r4, #48]	; 0x30
 801b6a4:	bd10      	pop	{r4, pc}
 801b6a6:	bf00      	nop
 801b6a8:	0801cdf9 	.word	0x0801cdf9
 801b6ac:	0801ce1b 	.word	0x0801ce1b
 801b6b0:	0801ce53 	.word	0x0801ce53
 801b6b4:	0801ce77 	.word	0x0801ce77

0801b6b8 <_cleanup_r>:
 801b6b8:	4901      	ldr	r1, [pc, #4]	; (801b6c0 <_cleanup_r+0x8>)
 801b6ba:	f000 b885 	b.w	801b7c8 <_fwalk_reent>
 801b6be:	bf00      	nop
 801b6c0:	0801b61d 	.word	0x0801b61d

0801b6c4 <__sfmoreglue>:
 801b6c4:	b570      	push	{r4, r5, r6, lr}
 801b6c6:	1e4a      	subs	r2, r1, #1
 801b6c8:	2568      	movs	r5, #104	; 0x68
 801b6ca:	4355      	muls	r5, r2
 801b6cc:	460e      	mov	r6, r1
 801b6ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b6d2:	f001 f895 	bl	801c800 <_malloc_r>
 801b6d6:	4604      	mov	r4, r0
 801b6d8:	b140      	cbz	r0, 801b6ec <__sfmoreglue+0x28>
 801b6da:	2100      	movs	r1, #0
 801b6dc:	e9c0 1600 	strd	r1, r6, [r0]
 801b6e0:	300c      	adds	r0, #12
 801b6e2:	60a0      	str	r0, [r4, #8]
 801b6e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b6e8:	f7fd face 	bl	8018c88 <memset>
 801b6ec:	4620      	mov	r0, r4
 801b6ee:	bd70      	pop	{r4, r5, r6, pc}

0801b6f0 <__sinit>:
 801b6f0:	6983      	ldr	r3, [r0, #24]
 801b6f2:	b510      	push	{r4, lr}
 801b6f4:	4604      	mov	r4, r0
 801b6f6:	bb33      	cbnz	r3, 801b746 <__sinit+0x56>
 801b6f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801b6fc:	6503      	str	r3, [r0, #80]	; 0x50
 801b6fe:	4b12      	ldr	r3, [pc, #72]	; (801b748 <__sinit+0x58>)
 801b700:	4a12      	ldr	r2, [pc, #72]	; (801b74c <__sinit+0x5c>)
 801b702:	681b      	ldr	r3, [r3, #0]
 801b704:	6282      	str	r2, [r0, #40]	; 0x28
 801b706:	4298      	cmp	r0, r3
 801b708:	bf04      	itt	eq
 801b70a:	2301      	moveq	r3, #1
 801b70c:	6183      	streq	r3, [r0, #24]
 801b70e:	f000 f81f 	bl	801b750 <__sfp>
 801b712:	6060      	str	r0, [r4, #4]
 801b714:	4620      	mov	r0, r4
 801b716:	f000 f81b 	bl	801b750 <__sfp>
 801b71a:	60a0      	str	r0, [r4, #8]
 801b71c:	4620      	mov	r0, r4
 801b71e:	f000 f817 	bl	801b750 <__sfp>
 801b722:	2200      	movs	r2, #0
 801b724:	60e0      	str	r0, [r4, #12]
 801b726:	2104      	movs	r1, #4
 801b728:	6860      	ldr	r0, [r4, #4]
 801b72a:	f7ff ffa1 	bl	801b670 <std>
 801b72e:	2201      	movs	r2, #1
 801b730:	2109      	movs	r1, #9
 801b732:	68a0      	ldr	r0, [r4, #8]
 801b734:	f7ff ff9c 	bl	801b670 <std>
 801b738:	2202      	movs	r2, #2
 801b73a:	2112      	movs	r1, #18
 801b73c:	68e0      	ldr	r0, [r4, #12]
 801b73e:	f7ff ff97 	bl	801b670 <std>
 801b742:	2301      	movs	r3, #1
 801b744:	61a3      	str	r3, [r4, #24]
 801b746:	bd10      	pop	{r4, pc}
 801b748:	08020b54 	.word	0x08020b54
 801b74c:	0801b6b9 	.word	0x0801b6b9

0801b750 <__sfp>:
 801b750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b752:	4b1b      	ldr	r3, [pc, #108]	; (801b7c0 <__sfp+0x70>)
 801b754:	681e      	ldr	r6, [r3, #0]
 801b756:	69b3      	ldr	r3, [r6, #24]
 801b758:	4607      	mov	r7, r0
 801b75a:	b913      	cbnz	r3, 801b762 <__sfp+0x12>
 801b75c:	4630      	mov	r0, r6
 801b75e:	f7ff ffc7 	bl	801b6f0 <__sinit>
 801b762:	3648      	adds	r6, #72	; 0x48
 801b764:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b768:	3b01      	subs	r3, #1
 801b76a:	d503      	bpl.n	801b774 <__sfp+0x24>
 801b76c:	6833      	ldr	r3, [r6, #0]
 801b76e:	b133      	cbz	r3, 801b77e <__sfp+0x2e>
 801b770:	6836      	ldr	r6, [r6, #0]
 801b772:	e7f7      	b.n	801b764 <__sfp+0x14>
 801b774:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b778:	b16d      	cbz	r5, 801b796 <__sfp+0x46>
 801b77a:	3468      	adds	r4, #104	; 0x68
 801b77c:	e7f4      	b.n	801b768 <__sfp+0x18>
 801b77e:	2104      	movs	r1, #4
 801b780:	4638      	mov	r0, r7
 801b782:	f7ff ff9f 	bl	801b6c4 <__sfmoreglue>
 801b786:	6030      	str	r0, [r6, #0]
 801b788:	2800      	cmp	r0, #0
 801b78a:	d1f1      	bne.n	801b770 <__sfp+0x20>
 801b78c:	230c      	movs	r3, #12
 801b78e:	603b      	str	r3, [r7, #0]
 801b790:	4604      	mov	r4, r0
 801b792:	4620      	mov	r0, r4
 801b794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b796:	4b0b      	ldr	r3, [pc, #44]	; (801b7c4 <__sfp+0x74>)
 801b798:	6665      	str	r5, [r4, #100]	; 0x64
 801b79a:	e9c4 5500 	strd	r5, r5, [r4]
 801b79e:	60a5      	str	r5, [r4, #8]
 801b7a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801b7a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801b7a8:	2208      	movs	r2, #8
 801b7aa:	4629      	mov	r1, r5
 801b7ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b7b0:	f7fd fa6a 	bl	8018c88 <memset>
 801b7b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b7b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b7bc:	e7e9      	b.n	801b792 <__sfp+0x42>
 801b7be:	bf00      	nop
 801b7c0:	08020b54 	.word	0x08020b54
 801b7c4:	ffff0001 	.word	0xffff0001

0801b7c8 <_fwalk_reent>:
 801b7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b7cc:	4680      	mov	r8, r0
 801b7ce:	4689      	mov	r9, r1
 801b7d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b7d4:	2600      	movs	r6, #0
 801b7d6:	b914      	cbnz	r4, 801b7de <_fwalk_reent+0x16>
 801b7d8:	4630      	mov	r0, r6
 801b7da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b7de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801b7e2:	3f01      	subs	r7, #1
 801b7e4:	d501      	bpl.n	801b7ea <_fwalk_reent+0x22>
 801b7e6:	6824      	ldr	r4, [r4, #0]
 801b7e8:	e7f5      	b.n	801b7d6 <_fwalk_reent+0xe>
 801b7ea:	89ab      	ldrh	r3, [r5, #12]
 801b7ec:	2b01      	cmp	r3, #1
 801b7ee:	d907      	bls.n	801b800 <_fwalk_reent+0x38>
 801b7f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b7f4:	3301      	adds	r3, #1
 801b7f6:	d003      	beq.n	801b800 <_fwalk_reent+0x38>
 801b7f8:	4629      	mov	r1, r5
 801b7fa:	4640      	mov	r0, r8
 801b7fc:	47c8      	blx	r9
 801b7fe:	4306      	orrs	r6, r0
 801b800:	3568      	adds	r5, #104	; 0x68
 801b802:	e7ee      	b.n	801b7e2 <_fwalk_reent+0x1a>

0801b804 <rshift>:
 801b804:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b806:	6906      	ldr	r6, [r0, #16]
 801b808:	114b      	asrs	r3, r1, #5
 801b80a:	429e      	cmp	r6, r3
 801b80c:	f100 0414 	add.w	r4, r0, #20
 801b810:	dd30      	ble.n	801b874 <rshift+0x70>
 801b812:	f011 011f 	ands.w	r1, r1, #31
 801b816:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801b81a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801b81e:	d108      	bne.n	801b832 <rshift+0x2e>
 801b820:	4621      	mov	r1, r4
 801b822:	42b2      	cmp	r2, r6
 801b824:	460b      	mov	r3, r1
 801b826:	d211      	bcs.n	801b84c <rshift+0x48>
 801b828:	f852 3b04 	ldr.w	r3, [r2], #4
 801b82c:	f841 3b04 	str.w	r3, [r1], #4
 801b830:	e7f7      	b.n	801b822 <rshift+0x1e>
 801b832:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801b836:	f1c1 0c20 	rsb	ip, r1, #32
 801b83a:	40cd      	lsrs	r5, r1
 801b83c:	3204      	adds	r2, #4
 801b83e:	4623      	mov	r3, r4
 801b840:	42b2      	cmp	r2, r6
 801b842:	4617      	mov	r7, r2
 801b844:	d30c      	bcc.n	801b860 <rshift+0x5c>
 801b846:	601d      	str	r5, [r3, #0]
 801b848:	b105      	cbz	r5, 801b84c <rshift+0x48>
 801b84a:	3304      	adds	r3, #4
 801b84c:	1b1a      	subs	r2, r3, r4
 801b84e:	42a3      	cmp	r3, r4
 801b850:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801b854:	bf08      	it	eq
 801b856:	2300      	moveq	r3, #0
 801b858:	6102      	str	r2, [r0, #16]
 801b85a:	bf08      	it	eq
 801b85c:	6143      	streq	r3, [r0, #20]
 801b85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b860:	683f      	ldr	r7, [r7, #0]
 801b862:	fa07 f70c 	lsl.w	r7, r7, ip
 801b866:	433d      	orrs	r5, r7
 801b868:	f843 5b04 	str.w	r5, [r3], #4
 801b86c:	f852 5b04 	ldr.w	r5, [r2], #4
 801b870:	40cd      	lsrs	r5, r1
 801b872:	e7e5      	b.n	801b840 <rshift+0x3c>
 801b874:	4623      	mov	r3, r4
 801b876:	e7e9      	b.n	801b84c <rshift+0x48>

0801b878 <__hexdig_fun>:
 801b878:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801b87c:	2b09      	cmp	r3, #9
 801b87e:	d802      	bhi.n	801b886 <__hexdig_fun+0xe>
 801b880:	3820      	subs	r0, #32
 801b882:	b2c0      	uxtb	r0, r0
 801b884:	4770      	bx	lr
 801b886:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801b88a:	2b05      	cmp	r3, #5
 801b88c:	d801      	bhi.n	801b892 <__hexdig_fun+0x1a>
 801b88e:	3847      	subs	r0, #71	; 0x47
 801b890:	e7f7      	b.n	801b882 <__hexdig_fun+0xa>
 801b892:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801b896:	2b05      	cmp	r3, #5
 801b898:	d801      	bhi.n	801b89e <__hexdig_fun+0x26>
 801b89a:	3827      	subs	r0, #39	; 0x27
 801b89c:	e7f1      	b.n	801b882 <__hexdig_fun+0xa>
 801b89e:	2000      	movs	r0, #0
 801b8a0:	4770      	bx	lr

0801b8a2 <__gethex>:
 801b8a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8a6:	b08b      	sub	sp, #44	; 0x2c
 801b8a8:	468a      	mov	sl, r1
 801b8aa:	9002      	str	r0, [sp, #8]
 801b8ac:	9816      	ldr	r0, [sp, #88]	; 0x58
 801b8ae:	9306      	str	r3, [sp, #24]
 801b8b0:	4690      	mov	r8, r2
 801b8b2:	f000 facd 	bl	801be50 <__localeconv_l>
 801b8b6:	6803      	ldr	r3, [r0, #0]
 801b8b8:	9303      	str	r3, [sp, #12]
 801b8ba:	4618      	mov	r0, r3
 801b8bc:	f7e4 fcc0 	bl	8000240 <strlen>
 801b8c0:	9b03      	ldr	r3, [sp, #12]
 801b8c2:	9001      	str	r0, [sp, #4]
 801b8c4:	4403      	add	r3, r0
 801b8c6:	f04f 0b00 	mov.w	fp, #0
 801b8ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801b8ce:	9307      	str	r3, [sp, #28]
 801b8d0:	f8da 3000 	ldr.w	r3, [sl]
 801b8d4:	3302      	adds	r3, #2
 801b8d6:	461f      	mov	r7, r3
 801b8d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 801b8dc:	2830      	cmp	r0, #48	; 0x30
 801b8de:	d06c      	beq.n	801b9ba <__gethex+0x118>
 801b8e0:	f7ff ffca 	bl	801b878 <__hexdig_fun>
 801b8e4:	4604      	mov	r4, r0
 801b8e6:	2800      	cmp	r0, #0
 801b8e8:	d16a      	bne.n	801b9c0 <__gethex+0x11e>
 801b8ea:	9a01      	ldr	r2, [sp, #4]
 801b8ec:	9903      	ldr	r1, [sp, #12]
 801b8ee:	4638      	mov	r0, r7
 801b8f0:	f7fe f8bc 	bl	8019a6c <strncmp>
 801b8f4:	2800      	cmp	r0, #0
 801b8f6:	d166      	bne.n	801b9c6 <__gethex+0x124>
 801b8f8:	9b01      	ldr	r3, [sp, #4]
 801b8fa:	5cf8      	ldrb	r0, [r7, r3]
 801b8fc:	18fe      	adds	r6, r7, r3
 801b8fe:	f7ff ffbb 	bl	801b878 <__hexdig_fun>
 801b902:	2800      	cmp	r0, #0
 801b904:	d062      	beq.n	801b9cc <__gethex+0x12a>
 801b906:	4633      	mov	r3, r6
 801b908:	7818      	ldrb	r0, [r3, #0]
 801b90a:	2830      	cmp	r0, #48	; 0x30
 801b90c:	461f      	mov	r7, r3
 801b90e:	f103 0301 	add.w	r3, r3, #1
 801b912:	d0f9      	beq.n	801b908 <__gethex+0x66>
 801b914:	f7ff ffb0 	bl	801b878 <__hexdig_fun>
 801b918:	fab0 f580 	clz	r5, r0
 801b91c:	096d      	lsrs	r5, r5, #5
 801b91e:	4634      	mov	r4, r6
 801b920:	f04f 0b01 	mov.w	fp, #1
 801b924:	463a      	mov	r2, r7
 801b926:	4616      	mov	r6, r2
 801b928:	3201      	adds	r2, #1
 801b92a:	7830      	ldrb	r0, [r6, #0]
 801b92c:	f7ff ffa4 	bl	801b878 <__hexdig_fun>
 801b930:	2800      	cmp	r0, #0
 801b932:	d1f8      	bne.n	801b926 <__gethex+0x84>
 801b934:	9a01      	ldr	r2, [sp, #4]
 801b936:	9903      	ldr	r1, [sp, #12]
 801b938:	4630      	mov	r0, r6
 801b93a:	f7fe f897 	bl	8019a6c <strncmp>
 801b93e:	b950      	cbnz	r0, 801b956 <__gethex+0xb4>
 801b940:	b954      	cbnz	r4, 801b958 <__gethex+0xb6>
 801b942:	9b01      	ldr	r3, [sp, #4]
 801b944:	18f4      	adds	r4, r6, r3
 801b946:	4622      	mov	r2, r4
 801b948:	4616      	mov	r6, r2
 801b94a:	3201      	adds	r2, #1
 801b94c:	7830      	ldrb	r0, [r6, #0]
 801b94e:	f7ff ff93 	bl	801b878 <__hexdig_fun>
 801b952:	2800      	cmp	r0, #0
 801b954:	d1f8      	bne.n	801b948 <__gethex+0xa6>
 801b956:	b10c      	cbz	r4, 801b95c <__gethex+0xba>
 801b958:	1ba4      	subs	r4, r4, r6
 801b95a:	00a4      	lsls	r4, r4, #2
 801b95c:	7833      	ldrb	r3, [r6, #0]
 801b95e:	2b50      	cmp	r3, #80	; 0x50
 801b960:	d001      	beq.n	801b966 <__gethex+0xc4>
 801b962:	2b70      	cmp	r3, #112	; 0x70
 801b964:	d140      	bne.n	801b9e8 <__gethex+0x146>
 801b966:	7873      	ldrb	r3, [r6, #1]
 801b968:	2b2b      	cmp	r3, #43	; 0x2b
 801b96a:	d031      	beq.n	801b9d0 <__gethex+0x12e>
 801b96c:	2b2d      	cmp	r3, #45	; 0x2d
 801b96e:	d033      	beq.n	801b9d8 <__gethex+0x136>
 801b970:	1c71      	adds	r1, r6, #1
 801b972:	f04f 0900 	mov.w	r9, #0
 801b976:	7808      	ldrb	r0, [r1, #0]
 801b978:	f7ff ff7e 	bl	801b878 <__hexdig_fun>
 801b97c:	1e43      	subs	r3, r0, #1
 801b97e:	b2db      	uxtb	r3, r3
 801b980:	2b18      	cmp	r3, #24
 801b982:	d831      	bhi.n	801b9e8 <__gethex+0x146>
 801b984:	f1a0 0210 	sub.w	r2, r0, #16
 801b988:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801b98c:	f7ff ff74 	bl	801b878 <__hexdig_fun>
 801b990:	1e43      	subs	r3, r0, #1
 801b992:	b2db      	uxtb	r3, r3
 801b994:	2b18      	cmp	r3, #24
 801b996:	d922      	bls.n	801b9de <__gethex+0x13c>
 801b998:	f1b9 0f00 	cmp.w	r9, #0
 801b99c:	d000      	beq.n	801b9a0 <__gethex+0xfe>
 801b99e:	4252      	negs	r2, r2
 801b9a0:	4414      	add	r4, r2
 801b9a2:	f8ca 1000 	str.w	r1, [sl]
 801b9a6:	b30d      	cbz	r5, 801b9ec <__gethex+0x14a>
 801b9a8:	f1bb 0f00 	cmp.w	fp, #0
 801b9ac:	bf0c      	ite	eq
 801b9ae:	2706      	moveq	r7, #6
 801b9b0:	2700      	movne	r7, #0
 801b9b2:	4638      	mov	r0, r7
 801b9b4:	b00b      	add	sp, #44	; 0x2c
 801b9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9ba:	f10b 0b01 	add.w	fp, fp, #1
 801b9be:	e78a      	b.n	801b8d6 <__gethex+0x34>
 801b9c0:	2500      	movs	r5, #0
 801b9c2:	462c      	mov	r4, r5
 801b9c4:	e7ae      	b.n	801b924 <__gethex+0x82>
 801b9c6:	463e      	mov	r6, r7
 801b9c8:	2501      	movs	r5, #1
 801b9ca:	e7c7      	b.n	801b95c <__gethex+0xba>
 801b9cc:	4604      	mov	r4, r0
 801b9ce:	e7fb      	b.n	801b9c8 <__gethex+0x126>
 801b9d0:	f04f 0900 	mov.w	r9, #0
 801b9d4:	1cb1      	adds	r1, r6, #2
 801b9d6:	e7ce      	b.n	801b976 <__gethex+0xd4>
 801b9d8:	f04f 0901 	mov.w	r9, #1
 801b9dc:	e7fa      	b.n	801b9d4 <__gethex+0x132>
 801b9de:	230a      	movs	r3, #10
 801b9e0:	fb03 0202 	mla	r2, r3, r2, r0
 801b9e4:	3a10      	subs	r2, #16
 801b9e6:	e7cf      	b.n	801b988 <__gethex+0xe6>
 801b9e8:	4631      	mov	r1, r6
 801b9ea:	e7da      	b.n	801b9a2 <__gethex+0x100>
 801b9ec:	1bf3      	subs	r3, r6, r7
 801b9ee:	3b01      	subs	r3, #1
 801b9f0:	4629      	mov	r1, r5
 801b9f2:	2b07      	cmp	r3, #7
 801b9f4:	dc49      	bgt.n	801ba8a <__gethex+0x1e8>
 801b9f6:	9802      	ldr	r0, [sp, #8]
 801b9f8:	f000 faa6 	bl	801bf48 <_Balloc>
 801b9fc:	9b01      	ldr	r3, [sp, #4]
 801b9fe:	f100 0914 	add.w	r9, r0, #20
 801ba02:	f04f 0b00 	mov.w	fp, #0
 801ba06:	f1c3 0301 	rsb	r3, r3, #1
 801ba0a:	4605      	mov	r5, r0
 801ba0c:	f8cd 9010 	str.w	r9, [sp, #16]
 801ba10:	46da      	mov	sl, fp
 801ba12:	9308      	str	r3, [sp, #32]
 801ba14:	42b7      	cmp	r7, r6
 801ba16:	d33b      	bcc.n	801ba90 <__gethex+0x1ee>
 801ba18:	9804      	ldr	r0, [sp, #16]
 801ba1a:	f840 ab04 	str.w	sl, [r0], #4
 801ba1e:	eba0 0009 	sub.w	r0, r0, r9
 801ba22:	1080      	asrs	r0, r0, #2
 801ba24:	6128      	str	r0, [r5, #16]
 801ba26:	0147      	lsls	r7, r0, #5
 801ba28:	4650      	mov	r0, sl
 801ba2a:	f000 fb51 	bl	801c0d0 <__hi0bits>
 801ba2e:	f8d8 6000 	ldr.w	r6, [r8]
 801ba32:	1a3f      	subs	r7, r7, r0
 801ba34:	42b7      	cmp	r7, r6
 801ba36:	dd64      	ble.n	801bb02 <__gethex+0x260>
 801ba38:	1bbf      	subs	r7, r7, r6
 801ba3a:	4639      	mov	r1, r7
 801ba3c:	4628      	mov	r0, r5
 801ba3e:	f000 fe62 	bl	801c706 <__any_on>
 801ba42:	4682      	mov	sl, r0
 801ba44:	b178      	cbz	r0, 801ba66 <__gethex+0x1c4>
 801ba46:	1e7b      	subs	r3, r7, #1
 801ba48:	1159      	asrs	r1, r3, #5
 801ba4a:	f003 021f 	and.w	r2, r3, #31
 801ba4e:	f04f 0a01 	mov.w	sl, #1
 801ba52:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801ba56:	fa0a f202 	lsl.w	r2, sl, r2
 801ba5a:	420a      	tst	r2, r1
 801ba5c:	d003      	beq.n	801ba66 <__gethex+0x1c4>
 801ba5e:	4553      	cmp	r3, sl
 801ba60:	dc46      	bgt.n	801baf0 <__gethex+0x24e>
 801ba62:	f04f 0a02 	mov.w	sl, #2
 801ba66:	4639      	mov	r1, r7
 801ba68:	4628      	mov	r0, r5
 801ba6a:	f7ff fecb 	bl	801b804 <rshift>
 801ba6e:	443c      	add	r4, r7
 801ba70:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ba74:	42a3      	cmp	r3, r4
 801ba76:	da52      	bge.n	801bb1e <__gethex+0x27c>
 801ba78:	4629      	mov	r1, r5
 801ba7a:	9802      	ldr	r0, [sp, #8]
 801ba7c:	f000 fa98 	bl	801bfb0 <_Bfree>
 801ba80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ba82:	2300      	movs	r3, #0
 801ba84:	6013      	str	r3, [r2, #0]
 801ba86:	27a3      	movs	r7, #163	; 0xa3
 801ba88:	e793      	b.n	801b9b2 <__gethex+0x110>
 801ba8a:	3101      	adds	r1, #1
 801ba8c:	105b      	asrs	r3, r3, #1
 801ba8e:	e7b0      	b.n	801b9f2 <__gethex+0x150>
 801ba90:	1e73      	subs	r3, r6, #1
 801ba92:	9305      	str	r3, [sp, #20]
 801ba94:	9a07      	ldr	r2, [sp, #28]
 801ba96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801ba9a:	4293      	cmp	r3, r2
 801ba9c:	d018      	beq.n	801bad0 <__gethex+0x22e>
 801ba9e:	f1bb 0f20 	cmp.w	fp, #32
 801baa2:	d107      	bne.n	801bab4 <__gethex+0x212>
 801baa4:	9b04      	ldr	r3, [sp, #16]
 801baa6:	f8c3 a000 	str.w	sl, [r3]
 801baaa:	3304      	adds	r3, #4
 801baac:	f04f 0a00 	mov.w	sl, #0
 801bab0:	9304      	str	r3, [sp, #16]
 801bab2:	46d3      	mov	fp, sl
 801bab4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801bab8:	f7ff fede 	bl	801b878 <__hexdig_fun>
 801babc:	f000 000f 	and.w	r0, r0, #15
 801bac0:	fa00 f00b 	lsl.w	r0, r0, fp
 801bac4:	ea4a 0a00 	orr.w	sl, sl, r0
 801bac8:	f10b 0b04 	add.w	fp, fp, #4
 801bacc:	9b05      	ldr	r3, [sp, #20]
 801bace:	e00d      	b.n	801baec <__gethex+0x24a>
 801bad0:	9b05      	ldr	r3, [sp, #20]
 801bad2:	9a08      	ldr	r2, [sp, #32]
 801bad4:	4413      	add	r3, r2
 801bad6:	42bb      	cmp	r3, r7
 801bad8:	d3e1      	bcc.n	801ba9e <__gethex+0x1fc>
 801bada:	4618      	mov	r0, r3
 801badc:	9a01      	ldr	r2, [sp, #4]
 801bade:	9903      	ldr	r1, [sp, #12]
 801bae0:	9309      	str	r3, [sp, #36]	; 0x24
 801bae2:	f7fd ffc3 	bl	8019a6c <strncmp>
 801bae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bae8:	2800      	cmp	r0, #0
 801baea:	d1d8      	bne.n	801ba9e <__gethex+0x1fc>
 801baec:	461e      	mov	r6, r3
 801baee:	e791      	b.n	801ba14 <__gethex+0x172>
 801baf0:	1eb9      	subs	r1, r7, #2
 801baf2:	4628      	mov	r0, r5
 801baf4:	f000 fe07 	bl	801c706 <__any_on>
 801baf8:	2800      	cmp	r0, #0
 801bafa:	d0b2      	beq.n	801ba62 <__gethex+0x1c0>
 801bafc:	f04f 0a03 	mov.w	sl, #3
 801bb00:	e7b1      	b.n	801ba66 <__gethex+0x1c4>
 801bb02:	da09      	bge.n	801bb18 <__gethex+0x276>
 801bb04:	1bf7      	subs	r7, r6, r7
 801bb06:	4629      	mov	r1, r5
 801bb08:	463a      	mov	r2, r7
 801bb0a:	9802      	ldr	r0, [sp, #8]
 801bb0c:	f000 fc1c 	bl	801c348 <__lshift>
 801bb10:	1be4      	subs	r4, r4, r7
 801bb12:	4605      	mov	r5, r0
 801bb14:	f100 0914 	add.w	r9, r0, #20
 801bb18:	f04f 0a00 	mov.w	sl, #0
 801bb1c:	e7a8      	b.n	801ba70 <__gethex+0x1ce>
 801bb1e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801bb22:	42a0      	cmp	r0, r4
 801bb24:	dd6a      	ble.n	801bbfc <__gethex+0x35a>
 801bb26:	1b04      	subs	r4, r0, r4
 801bb28:	42a6      	cmp	r6, r4
 801bb2a:	dc2e      	bgt.n	801bb8a <__gethex+0x2e8>
 801bb2c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801bb30:	2b02      	cmp	r3, #2
 801bb32:	d022      	beq.n	801bb7a <__gethex+0x2d8>
 801bb34:	2b03      	cmp	r3, #3
 801bb36:	d024      	beq.n	801bb82 <__gethex+0x2e0>
 801bb38:	2b01      	cmp	r3, #1
 801bb3a:	d115      	bne.n	801bb68 <__gethex+0x2c6>
 801bb3c:	42a6      	cmp	r6, r4
 801bb3e:	d113      	bne.n	801bb68 <__gethex+0x2c6>
 801bb40:	2e01      	cmp	r6, #1
 801bb42:	dc0b      	bgt.n	801bb5c <__gethex+0x2ba>
 801bb44:	9a06      	ldr	r2, [sp, #24]
 801bb46:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801bb4a:	6013      	str	r3, [r2, #0]
 801bb4c:	2301      	movs	r3, #1
 801bb4e:	612b      	str	r3, [r5, #16]
 801bb50:	f8c9 3000 	str.w	r3, [r9]
 801bb54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801bb56:	2762      	movs	r7, #98	; 0x62
 801bb58:	601d      	str	r5, [r3, #0]
 801bb5a:	e72a      	b.n	801b9b2 <__gethex+0x110>
 801bb5c:	1e71      	subs	r1, r6, #1
 801bb5e:	4628      	mov	r0, r5
 801bb60:	f000 fdd1 	bl	801c706 <__any_on>
 801bb64:	2800      	cmp	r0, #0
 801bb66:	d1ed      	bne.n	801bb44 <__gethex+0x2a2>
 801bb68:	4629      	mov	r1, r5
 801bb6a:	9802      	ldr	r0, [sp, #8]
 801bb6c:	f000 fa20 	bl	801bfb0 <_Bfree>
 801bb70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bb72:	2300      	movs	r3, #0
 801bb74:	6013      	str	r3, [r2, #0]
 801bb76:	2750      	movs	r7, #80	; 0x50
 801bb78:	e71b      	b.n	801b9b2 <__gethex+0x110>
 801bb7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bb7c:	2b00      	cmp	r3, #0
 801bb7e:	d0e1      	beq.n	801bb44 <__gethex+0x2a2>
 801bb80:	e7f2      	b.n	801bb68 <__gethex+0x2c6>
 801bb82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bb84:	2b00      	cmp	r3, #0
 801bb86:	d1dd      	bne.n	801bb44 <__gethex+0x2a2>
 801bb88:	e7ee      	b.n	801bb68 <__gethex+0x2c6>
 801bb8a:	1e67      	subs	r7, r4, #1
 801bb8c:	f1ba 0f00 	cmp.w	sl, #0
 801bb90:	d131      	bne.n	801bbf6 <__gethex+0x354>
 801bb92:	b127      	cbz	r7, 801bb9e <__gethex+0x2fc>
 801bb94:	4639      	mov	r1, r7
 801bb96:	4628      	mov	r0, r5
 801bb98:	f000 fdb5 	bl	801c706 <__any_on>
 801bb9c:	4682      	mov	sl, r0
 801bb9e:	117a      	asrs	r2, r7, #5
 801bba0:	2301      	movs	r3, #1
 801bba2:	f007 071f 	and.w	r7, r7, #31
 801bba6:	fa03 f707 	lsl.w	r7, r3, r7
 801bbaa:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801bbae:	4621      	mov	r1, r4
 801bbb0:	421f      	tst	r7, r3
 801bbb2:	4628      	mov	r0, r5
 801bbb4:	bf18      	it	ne
 801bbb6:	f04a 0a02 	orrne.w	sl, sl, #2
 801bbba:	1b36      	subs	r6, r6, r4
 801bbbc:	f7ff fe22 	bl	801b804 <rshift>
 801bbc0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801bbc4:	2702      	movs	r7, #2
 801bbc6:	f1ba 0f00 	cmp.w	sl, #0
 801bbca:	d048      	beq.n	801bc5e <__gethex+0x3bc>
 801bbcc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801bbd0:	2b02      	cmp	r3, #2
 801bbd2:	d015      	beq.n	801bc00 <__gethex+0x35e>
 801bbd4:	2b03      	cmp	r3, #3
 801bbd6:	d017      	beq.n	801bc08 <__gethex+0x366>
 801bbd8:	2b01      	cmp	r3, #1
 801bbda:	d109      	bne.n	801bbf0 <__gethex+0x34e>
 801bbdc:	f01a 0f02 	tst.w	sl, #2
 801bbe0:	d006      	beq.n	801bbf0 <__gethex+0x34e>
 801bbe2:	f8d9 3000 	ldr.w	r3, [r9]
 801bbe6:	ea4a 0a03 	orr.w	sl, sl, r3
 801bbea:	f01a 0f01 	tst.w	sl, #1
 801bbee:	d10e      	bne.n	801bc0e <__gethex+0x36c>
 801bbf0:	f047 0710 	orr.w	r7, r7, #16
 801bbf4:	e033      	b.n	801bc5e <__gethex+0x3bc>
 801bbf6:	f04f 0a01 	mov.w	sl, #1
 801bbfa:	e7d0      	b.n	801bb9e <__gethex+0x2fc>
 801bbfc:	2701      	movs	r7, #1
 801bbfe:	e7e2      	b.n	801bbc6 <__gethex+0x324>
 801bc00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bc02:	f1c3 0301 	rsb	r3, r3, #1
 801bc06:	9315      	str	r3, [sp, #84]	; 0x54
 801bc08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bc0a:	2b00      	cmp	r3, #0
 801bc0c:	d0f0      	beq.n	801bbf0 <__gethex+0x34e>
 801bc0e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801bc12:	f105 0314 	add.w	r3, r5, #20
 801bc16:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801bc1a:	eb03 010a 	add.w	r1, r3, sl
 801bc1e:	f04f 0c00 	mov.w	ip, #0
 801bc22:	4618      	mov	r0, r3
 801bc24:	f853 2b04 	ldr.w	r2, [r3], #4
 801bc28:	f1b2 3fff 	cmp.w	r2, #4294967295
 801bc2c:	d01c      	beq.n	801bc68 <__gethex+0x3c6>
 801bc2e:	3201      	adds	r2, #1
 801bc30:	6002      	str	r2, [r0, #0]
 801bc32:	2f02      	cmp	r7, #2
 801bc34:	f105 0314 	add.w	r3, r5, #20
 801bc38:	d138      	bne.n	801bcac <__gethex+0x40a>
 801bc3a:	f8d8 2000 	ldr.w	r2, [r8]
 801bc3e:	3a01      	subs	r2, #1
 801bc40:	42b2      	cmp	r2, r6
 801bc42:	d10a      	bne.n	801bc5a <__gethex+0x3b8>
 801bc44:	1171      	asrs	r1, r6, #5
 801bc46:	2201      	movs	r2, #1
 801bc48:	f006 061f 	and.w	r6, r6, #31
 801bc4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801bc50:	fa02 f606 	lsl.w	r6, r2, r6
 801bc54:	421e      	tst	r6, r3
 801bc56:	bf18      	it	ne
 801bc58:	4617      	movne	r7, r2
 801bc5a:	f047 0720 	orr.w	r7, r7, #32
 801bc5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801bc60:	601d      	str	r5, [r3, #0]
 801bc62:	9b06      	ldr	r3, [sp, #24]
 801bc64:	601c      	str	r4, [r3, #0]
 801bc66:	e6a4      	b.n	801b9b2 <__gethex+0x110>
 801bc68:	4299      	cmp	r1, r3
 801bc6a:	f843 cc04 	str.w	ip, [r3, #-4]
 801bc6e:	d8d8      	bhi.n	801bc22 <__gethex+0x380>
 801bc70:	68ab      	ldr	r3, [r5, #8]
 801bc72:	4599      	cmp	r9, r3
 801bc74:	db12      	blt.n	801bc9c <__gethex+0x3fa>
 801bc76:	6869      	ldr	r1, [r5, #4]
 801bc78:	9802      	ldr	r0, [sp, #8]
 801bc7a:	3101      	adds	r1, #1
 801bc7c:	f000 f964 	bl	801bf48 <_Balloc>
 801bc80:	692a      	ldr	r2, [r5, #16]
 801bc82:	3202      	adds	r2, #2
 801bc84:	f105 010c 	add.w	r1, r5, #12
 801bc88:	4683      	mov	fp, r0
 801bc8a:	0092      	lsls	r2, r2, #2
 801bc8c:	300c      	adds	r0, #12
 801bc8e:	f7fc ffd7 	bl	8018c40 <memcpy>
 801bc92:	4629      	mov	r1, r5
 801bc94:	9802      	ldr	r0, [sp, #8]
 801bc96:	f000 f98b 	bl	801bfb0 <_Bfree>
 801bc9a:	465d      	mov	r5, fp
 801bc9c:	692b      	ldr	r3, [r5, #16]
 801bc9e:	1c5a      	adds	r2, r3, #1
 801bca0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801bca4:	612a      	str	r2, [r5, #16]
 801bca6:	2201      	movs	r2, #1
 801bca8:	615a      	str	r2, [r3, #20]
 801bcaa:	e7c2      	b.n	801bc32 <__gethex+0x390>
 801bcac:	692a      	ldr	r2, [r5, #16]
 801bcae:	454a      	cmp	r2, r9
 801bcb0:	dd0b      	ble.n	801bcca <__gethex+0x428>
 801bcb2:	2101      	movs	r1, #1
 801bcb4:	4628      	mov	r0, r5
 801bcb6:	f7ff fda5 	bl	801b804 <rshift>
 801bcba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801bcbe:	3401      	adds	r4, #1
 801bcc0:	42a3      	cmp	r3, r4
 801bcc2:	f6ff aed9 	blt.w	801ba78 <__gethex+0x1d6>
 801bcc6:	2701      	movs	r7, #1
 801bcc8:	e7c7      	b.n	801bc5a <__gethex+0x3b8>
 801bcca:	f016 061f 	ands.w	r6, r6, #31
 801bcce:	d0fa      	beq.n	801bcc6 <__gethex+0x424>
 801bcd0:	449a      	add	sl, r3
 801bcd2:	f1c6 0620 	rsb	r6, r6, #32
 801bcd6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801bcda:	f000 f9f9 	bl	801c0d0 <__hi0bits>
 801bcde:	42b0      	cmp	r0, r6
 801bce0:	dbe7      	blt.n	801bcb2 <__gethex+0x410>
 801bce2:	e7f0      	b.n	801bcc6 <__gethex+0x424>

0801bce4 <L_shift>:
 801bce4:	f1c2 0208 	rsb	r2, r2, #8
 801bce8:	0092      	lsls	r2, r2, #2
 801bcea:	b570      	push	{r4, r5, r6, lr}
 801bcec:	f1c2 0620 	rsb	r6, r2, #32
 801bcf0:	6843      	ldr	r3, [r0, #4]
 801bcf2:	6804      	ldr	r4, [r0, #0]
 801bcf4:	fa03 f506 	lsl.w	r5, r3, r6
 801bcf8:	432c      	orrs	r4, r5
 801bcfa:	40d3      	lsrs	r3, r2
 801bcfc:	6004      	str	r4, [r0, #0]
 801bcfe:	f840 3f04 	str.w	r3, [r0, #4]!
 801bd02:	4288      	cmp	r0, r1
 801bd04:	d3f4      	bcc.n	801bcf0 <L_shift+0xc>
 801bd06:	bd70      	pop	{r4, r5, r6, pc}

0801bd08 <__match>:
 801bd08:	b530      	push	{r4, r5, lr}
 801bd0a:	6803      	ldr	r3, [r0, #0]
 801bd0c:	3301      	adds	r3, #1
 801bd0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bd12:	b914      	cbnz	r4, 801bd1a <__match+0x12>
 801bd14:	6003      	str	r3, [r0, #0]
 801bd16:	2001      	movs	r0, #1
 801bd18:	bd30      	pop	{r4, r5, pc}
 801bd1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bd1e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801bd22:	2d19      	cmp	r5, #25
 801bd24:	bf98      	it	ls
 801bd26:	3220      	addls	r2, #32
 801bd28:	42a2      	cmp	r2, r4
 801bd2a:	d0f0      	beq.n	801bd0e <__match+0x6>
 801bd2c:	2000      	movs	r0, #0
 801bd2e:	e7f3      	b.n	801bd18 <__match+0x10>

0801bd30 <__hexnan>:
 801bd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd34:	680b      	ldr	r3, [r1, #0]
 801bd36:	6801      	ldr	r1, [r0, #0]
 801bd38:	115f      	asrs	r7, r3, #5
 801bd3a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801bd3e:	f013 031f 	ands.w	r3, r3, #31
 801bd42:	b087      	sub	sp, #28
 801bd44:	bf18      	it	ne
 801bd46:	3704      	addne	r7, #4
 801bd48:	2500      	movs	r5, #0
 801bd4a:	1f3e      	subs	r6, r7, #4
 801bd4c:	4682      	mov	sl, r0
 801bd4e:	4690      	mov	r8, r2
 801bd50:	9301      	str	r3, [sp, #4]
 801bd52:	f847 5c04 	str.w	r5, [r7, #-4]
 801bd56:	46b1      	mov	r9, r6
 801bd58:	4634      	mov	r4, r6
 801bd5a:	9502      	str	r5, [sp, #8]
 801bd5c:	46ab      	mov	fp, r5
 801bd5e:	784a      	ldrb	r2, [r1, #1]
 801bd60:	1c4b      	adds	r3, r1, #1
 801bd62:	9303      	str	r3, [sp, #12]
 801bd64:	b342      	cbz	r2, 801bdb8 <__hexnan+0x88>
 801bd66:	4610      	mov	r0, r2
 801bd68:	9105      	str	r1, [sp, #20]
 801bd6a:	9204      	str	r2, [sp, #16]
 801bd6c:	f7ff fd84 	bl	801b878 <__hexdig_fun>
 801bd70:	2800      	cmp	r0, #0
 801bd72:	d143      	bne.n	801bdfc <__hexnan+0xcc>
 801bd74:	9a04      	ldr	r2, [sp, #16]
 801bd76:	9905      	ldr	r1, [sp, #20]
 801bd78:	2a20      	cmp	r2, #32
 801bd7a:	d818      	bhi.n	801bdae <__hexnan+0x7e>
 801bd7c:	9b02      	ldr	r3, [sp, #8]
 801bd7e:	459b      	cmp	fp, r3
 801bd80:	dd13      	ble.n	801bdaa <__hexnan+0x7a>
 801bd82:	454c      	cmp	r4, r9
 801bd84:	d206      	bcs.n	801bd94 <__hexnan+0x64>
 801bd86:	2d07      	cmp	r5, #7
 801bd88:	dc04      	bgt.n	801bd94 <__hexnan+0x64>
 801bd8a:	462a      	mov	r2, r5
 801bd8c:	4649      	mov	r1, r9
 801bd8e:	4620      	mov	r0, r4
 801bd90:	f7ff ffa8 	bl	801bce4 <L_shift>
 801bd94:	4544      	cmp	r4, r8
 801bd96:	d944      	bls.n	801be22 <__hexnan+0xf2>
 801bd98:	2300      	movs	r3, #0
 801bd9a:	f1a4 0904 	sub.w	r9, r4, #4
 801bd9e:	f844 3c04 	str.w	r3, [r4, #-4]
 801bda2:	f8cd b008 	str.w	fp, [sp, #8]
 801bda6:	464c      	mov	r4, r9
 801bda8:	461d      	mov	r5, r3
 801bdaa:	9903      	ldr	r1, [sp, #12]
 801bdac:	e7d7      	b.n	801bd5e <__hexnan+0x2e>
 801bdae:	2a29      	cmp	r2, #41	; 0x29
 801bdb0:	d14a      	bne.n	801be48 <__hexnan+0x118>
 801bdb2:	3102      	adds	r1, #2
 801bdb4:	f8ca 1000 	str.w	r1, [sl]
 801bdb8:	f1bb 0f00 	cmp.w	fp, #0
 801bdbc:	d044      	beq.n	801be48 <__hexnan+0x118>
 801bdbe:	454c      	cmp	r4, r9
 801bdc0:	d206      	bcs.n	801bdd0 <__hexnan+0xa0>
 801bdc2:	2d07      	cmp	r5, #7
 801bdc4:	dc04      	bgt.n	801bdd0 <__hexnan+0xa0>
 801bdc6:	462a      	mov	r2, r5
 801bdc8:	4649      	mov	r1, r9
 801bdca:	4620      	mov	r0, r4
 801bdcc:	f7ff ff8a 	bl	801bce4 <L_shift>
 801bdd0:	4544      	cmp	r4, r8
 801bdd2:	d928      	bls.n	801be26 <__hexnan+0xf6>
 801bdd4:	4643      	mov	r3, r8
 801bdd6:	f854 2b04 	ldr.w	r2, [r4], #4
 801bdda:	f843 2b04 	str.w	r2, [r3], #4
 801bdde:	42a6      	cmp	r6, r4
 801bde0:	d2f9      	bcs.n	801bdd6 <__hexnan+0xa6>
 801bde2:	2200      	movs	r2, #0
 801bde4:	f843 2b04 	str.w	r2, [r3], #4
 801bde8:	429e      	cmp	r6, r3
 801bdea:	d2fb      	bcs.n	801bde4 <__hexnan+0xb4>
 801bdec:	6833      	ldr	r3, [r6, #0]
 801bdee:	b91b      	cbnz	r3, 801bdf8 <__hexnan+0xc8>
 801bdf0:	4546      	cmp	r6, r8
 801bdf2:	d127      	bne.n	801be44 <__hexnan+0x114>
 801bdf4:	2301      	movs	r3, #1
 801bdf6:	6033      	str	r3, [r6, #0]
 801bdf8:	2005      	movs	r0, #5
 801bdfa:	e026      	b.n	801be4a <__hexnan+0x11a>
 801bdfc:	3501      	adds	r5, #1
 801bdfe:	2d08      	cmp	r5, #8
 801be00:	f10b 0b01 	add.w	fp, fp, #1
 801be04:	dd06      	ble.n	801be14 <__hexnan+0xe4>
 801be06:	4544      	cmp	r4, r8
 801be08:	d9cf      	bls.n	801bdaa <__hexnan+0x7a>
 801be0a:	2300      	movs	r3, #0
 801be0c:	f844 3c04 	str.w	r3, [r4, #-4]
 801be10:	2501      	movs	r5, #1
 801be12:	3c04      	subs	r4, #4
 801be14:	6822      	ldr	r2, [r4, #0]
 801be16:	f000 000f 	and.w	r0, r0, #15
 801be1a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801be1e:	6020      	str	r0, [r4, #0]
 801be20:	e7c3      	b.n	801bdaa <__hexnan+0x7a>
 801be22:	2508      	movs	r5, #8
 801be24:	e7c1      	b.n	801bdaa <__hexnan+0x7a>
 801be26:	9b01      	ldr	r3, [sp, #4]
 801be28:	2b00      	cmp	r3, #0
 801be2a:	d0df      	beq.n	801bdec <__hexnan+0xbc>
 801be2c:	f04f 32ff 	mov.w	r2, #4294967295
 801be30:	f1c3 0320 	rsb	r3, r3, #32
 801be34:	fa22 f303 	lsr.w	r3, r2, r3
 801be38:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801be3c:	401a      	ands	r2, r3
 801be3e:	f847 2c04 	str.w	r2, [r7, #-4]
 801be42:	e7d3      	b.n	801bdec <__hexnan+0xbc>
 801be44:	3e04      	subs	r6, #4
 801be46:	e7d1      	b.n	801bdec <__hexnan+0xbc>
 801be48:	2004      	movs	r0, #4
 801be4a:	b007      	add	sp, #28
 801be4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801be50 <__localeconv_l>:
 801be50:	30f0      	adds	r0, #240	; 0xf0
 801be52:	4770      	bx	lr

0801be54 <_localeconv_r>:
 801be54:	4b04      	ldr	r3, [pc, #16]	; (801be68 <_localeconv_r+0x14>)
 801be56:	681b      	ldr	r3, [r3, #0]
 801be58:	6a18      	ldr	r0, [r3, #32]
 801be5a:	4b04      	ldr	r3, [pc, #16]	; (801be6c <_localeconv_r+0x18>)
 801be5c:	2800      	cmp	r0, #0
 801be5e:	bf08      	it	eq
 801be60:	4618      	moveq	r0, r3
 801be62:	30f0      	adds	r0, #240	; 0xf0
 801be64:	4770      	bx	lr
 801be66:	bf00      	nop
 801be68:	2000001c 	.word	0x2000001c
 801be6c:	20000080 	.word	0x20000080

0801be70 <__swhatbuf_r>:
 801be70:	b570      	push	{r4, r5, r6, lr}
 801be72:	460e      	mov	r6, r1
 801be74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801be78:	2900      	cmp	r1, #0
 801be7a:	b096      	sub	sp, #88	; 0x58
 801be7c:	4614      	mov	r4, r2
 801be7e:	461d      	mov	r5, r3
 801be80:	da07      	bge.n	801be92 <__swhatbuf_r+0x22>
 801be82:	2300      	movs	r3, #0
 801be84:	602b      	str	r3, [r5, #0]
 801be86:	89b3      	ldrh	r3, [r6, #12]
 801be88:	061a      	lsls	r2, r3, #24
 801be8a:	d410      	bmi.n	801beae <__swhatbuf_r+0x3e>
 801be8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801be90:	e00e      	b.n	801beb0 <__swhatbuf_r+0x40>
 801be92:	466a      	mov	r2, sp
 801be94:	f001 f816 	bl	801cec4 <_fstat_r>
 801be98:	2800      	cmp	r0, #0
 801be9a:	dbf2      	blt.n	801be82 <__swhatbuf_r+0x12>
 801be9c:	9a01      	ldr	r2, [sp, #4]
 801be9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801bea2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801bea6:	425a      	negs	r2, r3
 801bea8:	415a      	adcs	r2, r3
 801beaa:	602a      	str	r2, [r5, #0]
 801beac:	e7ee      	b.n	801be8c <__swhatbuf_r+0x1c>
 801beae:	2340      	movs	r3, #64	; 0x40
 801beb0:	2000      	movs	r0, #0
 801beb2:	6023      	str	r3, [r4, #0]
 801beb4:	b016      	add	sp, #88	; 0x58
 801beb6:	bd70      	pop	{r4, r5, r6, pc}

0801beb8 <__smakebuf_r>:
 801beb8:	898b      	ldrh	r3, [r1, #12]
 801beba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bebc:	079d      	lsls	r5, r3, #30
 801bebe:	4606      	mov	r6, r0
 801bec0:	460c      	mov	r4, r1
 801bec2:	d507      	bpl.n	801bed4 <__smakebuf_r+0x1c>
 801bec4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bec8:	6023      	str	r3, [r4, #0]
 801beca:	6123      	str	r3, [r4, #16]
 801becc:	2301      	movs	r3, #1
 801bece:	6163      	str	r3, [r4, #20]
 801bed0:	b002      	add	sp, #8
 801bed2:	bd70      	pop	{r4, r5, r6, pc}
 801bed4:	ab01      	add	r3, sp, #4
 801bed6:	466a      	mov	r2, sp
 801bed8:	f7ff ffca 	bl	801be70 <__swhatbuf_r>
 801bedc:	9900      	ldr	r1, [sp, #0]
 801bede:	4605      	mov	r5, r0
 801bee0:	4630      	mov	r0, r6
 801bee2:	f000 fc8d 	bl	801c800 <_malloc_r>
 801bee6:	b948      	cbnz	r0, 801befc <__smakebuf_r+0x44>
 801bee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801beec:	059a      	lsls	r2, r3, #22
 801beee:	d4ef      	bmi.n	801bed0 <__smakebuf_r+0x18>
 801bef0:	f023 0303 	bic.w	r3, r3, #3
 801bef4:	f043 0302 	orr.w	r3, r3, #2
 801bef8:	81a3      	strh	r3, [r4, #12]
 801befa:	e7e3      	b.n	801bec4 <__smakebuf_r+0xc>
 801befc:	4b0d      	ldr	r3, [pc, #52]	; (801bf34 <__smakebuf_r+0x7c>)
 801befe:	62b3      	str	r3, [r6, #40]	; 0x28
 801bf00:	89a3      	ldrh	r3, [r4, #12]
 801bf02:	6020      	str	r0, [r4, #0]
 801bf04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bf08:	81a3      	strh	r3, [r4, #12]
 801bf0a:	9b00      	ldr	r3, [sp, #0]
 801bf0c:	6163      	str	r3, [r4, #20]
 801bf0e:	9b01      	ldr	r3, [sp, #4]
 801bf10:	6120      	str	r0, [r4, #16]
 801bf12:	b15b      	cbz	r3, 801bf2c <__smakebuf_r+0x74>
 801bf14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bf18:	4630      	mov	r0, r6
 801bf1a:	f000 ffe5 	bl	801cee8 <_isatty_r>
 801bf1e:	b128      	cbz	r0, 801bf2c <__smakebuf_r+0x74>
 801bf20:	89a3      	ldrh	r3, [r4, #12]
 801bf22:	f023 0303 	bic.w	r3, r3, #3
 801bf26:	f043 0301 	orr.w	r3, r3, #1
 801bf2a:	81a3      	strh	r3, [r4, #12]
 801bf2c:	89a3      	ldrh	r3, [r4, #12]
 801bf2e:	431d      	orrs	r5, r3
 801bf30:	81a5      	strh	r5, [r4, #12]
 801bf32:	e7cd      	b.n	801bed0 <__smakebuf_r+0x18>
 801bf34:	0801b6b9 	.word	0x0801b6b9

0801bf38 <malloc>:
 801bf38:	4b02      	ldr	r3, [pc, #8]	; (801bf44 <malloc+0xc>)
 801bf3a:	4601      	mov	r1, r0
 801bf3c:	6818      	ldr	r0, [r3, #0]
 801bf3e:	f000 bc5f 	b.w	801c800 <_malloc_r>
 801bf42:	bf00      	nop
 801bf44:	2000001c 	.word	0x2000001c

0801bf48 <_Balloc>:
 801bf48:	b570      	push	{r4, r5, r6, lr}
 801bf4a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801bf4c:	4604      	mov	r4, r0
 801bf4e:	460e      	mov	r6, r1
 801bf50:	b93d      	cbnz	r5, 801bf62 <_Balloc+0x1a>
 801bf52:	2010      	movs	r0, #16
 801bf54:	f7ff fff0 	bl	801bf38 <malloc>
 801bf58:	6260      	str	r0, [r4, #36]	; 0x24
 801bf5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801bf5e:	6005      	str	r5, [r0, #0]
 801bf60:	60c5      	str	r5, [r0, #12]
 801bf62:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801bf64:	68eb      	ldr	r3, [r5, #12]
 801bf66:	b183      	cbz	r3, 801bf8a <_Balloc+0x42>
 801bf68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bf6a:	68db      	ldr	r3, [r3, #12]
 801bf6c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801bf70:	b9b8      	cbnz	r0, 801bfa2 <_Balloc+0x5a>
 801bf72:	2101      	movs	r1, #1
 801bf74:	fa01 f506 	lsl.w	r5, r1, r6
 801bf78:	1d6a      	adds	r2, r5, #5
 801bf7a:	0092      	lsls	r2, r2, #2
 801bf7c:	4620      	mov	r0, r4
 801bf7e:	f000 fbe3 	bl	801c748 <_calloc_r>
 801bf82:	b160      	cbz	r0, 801bf9e <_Balloc+0x56>
 801bf84:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801bf88:	e00e      	b.n	801bfa8 <_Balloc+0x60>
 801bf8a:	2221      	movs	r2, #33	; 0x21
 801bf8c:	2104      	movs	r1, #4
 801bf8e:	4620      	mov	r0, r4
 801bf90:	f000 fbda 	bl	801c748 <_calloc_r>
 801bf94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bf96:	60e8      	str	r0, [r5, #12]
 801bf98:	68db      	ldr	r3, [r3, #12]
 801bf9a:	2b00      	cmp	r3, #0
 801bf9c:	d1e4      	bne.n	801bf68 <_Balloc+0x20>
 801bf9e:	2000      	movs	r0, #0
 801bfa0:	bd70      	pop	{r4, r5, r6, pc}
 801bfa2:	6802      	ldr	r2, [r0, #0]
 801bfa4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801bfa8:	2300      	movs	r3, #0
 801bfaa:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801bfae:	e7f7      	b.n	801bfa0 <_Balloc+0x58>

0801bfb0 <_Bfree>:
 801bfb0:	b570      	push	{r4, r5, r6, lr}
 801bfb2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801bfb4:	4606      	mov	r6, r0
 801bfb6:	460d      	mov	r5, r1
 801bfb8:	b93c      	cbnz	r4, 801bfca <_Bfree+0x1a>
 801bfba:	2010      	movs	r0, #16
 801bfbc:	f7ff ffbc 	bl	801bf38 <malloc>
 801bfc0:	6270      	str	r0, [r6, #36]	; 0x24
 801bfc2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801bfc6:	6004      	str	r4, [r0, #0]
 801bfc8:	60c4      	str	r4, [r0, #12]
 801bfca:	b13d      	cbz	r5, 801bfdc <_Bfree+0x2c>
 801bfcc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801bfce:	686a      	ldr	r2, [r5, #4]
 801bfd0:	68db      	ldr	r3, [r3, #12]
 801bfd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801bfd6:	6029      	str	r1, [r5, #0]
 801bfd8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801bfdc:	bd70      	pop	{r4, r5, r6, pc}

0801bfde <__multadd>:
 801bfde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bfe2:	690d      	ldr	r5, [r1, #16]
 801bfe4:	461f      	mov	r7, r3
 801bfe6:	4606      	mov	r6, r0
 801bfe8:	460c      	mov	r4, r1
 801bfea:	f101 0c14 	add.w	ip, r1, #20
 801bfee:	2300      	movs	r3, #0
 801bff0:	f8dc 0000 	ldr.w	r0, [ip]
 801bff4:	b281      	uxth	r1, r0
 801bff6:	fb02 7101 	mla	r1, r2, r1, r7
 801bffa:	0c0f      	lsrs	r7, r1, #16
 801bffc:	0c00      	lsrs	r0, r0, #16
 801bffe:	fb02 7000 	mla	r0, r2, r0, r7
 801c002:	b289      	uxth	r1, r1
 801c004:	3301      	adds	r3, #1
 801c006:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801c00a:	429d      	cmp	r5, r3
 801c00c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801c010:	f84c 1b04 	str.w	r1, [ip], #4
 801c014:	dcec      	bgt.n	801bff0 <__multadd+0x12>
 801c016:	b1d7      	cbz	r7, 801c04e <__multadd+0x70>
 801c018:	68a3      	ldr	r3, [r4, #8]
 801c01a:	42ab      	cmp	r3, r5
 801c01c:	dc12      	bgt.n	801c044 <__multadd+0x66>
 801c01e:	6861      	ldr	r1, [r4, #4]
 801c020:	4630      	mov	r0, r6
 801c022:	3101      	adds	r1, #1
 801c024:	f7ff ff90 	bl	801bf48 <_Balloc>
 801c028:	6922      	ldr	r2, [r4, #16]
 801c02a:	3202      	adds	r2, #2
 801c02c:	f104 010c 	add.w	r1, r4, #12
 801c030:	4680      	mov	r8, r0
 801c032:	0092      	lsls	r2, r2, #2
 801c034:	300c      	adds	r0, #12
 801c036:	f7fc fe03 	bl	8018c40 <memcpy>
 801c03a:	4621      	mov	r1, r4
 801c03c:	4630      	mov	r0, r6
 801c03e:	f7ff ffb7 	bl	801bfb0 <_Bfree>
 801c042:	4644      	mov	r4, r8
 801c044:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c048:	3501      	adds	r5, #1
 801c04a:	615f      	str	r7, [r3, #20]
 801c04c:	6125      	str	r5, [r4, #16]
 801c04e:	4620      	mov	r0, r4
 801c050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c054 <__s2b>:
 801c054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c058:	460c      	mov	r4, r1
 801c05a:	4615      	mov	r5, r2
 801c05c:	461f      	mov	r7, r3
 801c05e:	2209      	movs	r2, #9
 801c060:	3308      	adds	r3, #8
 801c062:	4606      	mov	r6, r0
 801c064:	fb93 f3f2 	sdiv	r3, r3, r2
 801c068:	2100      	movs	r1, #0
 801c06a:	2201      	movs	r2, #1
 801c06c:	429a      	cmp	r2, r3
 801c06e:	db20      	blt.n	801c0b2 <__s2b+0x5e>
 801c070:	4630      	mov	r0, r6
 801c072:	f7ff ff69 	bl	801bf48 <_Balloc>
 801c076:	9b08      	ldr	r3, [sp, #32]
 801c078:	6143      	str	r3, [r0, #20]
 801c07a:	2d09      	cmp	r5, #9
 801c07c:	f04f 0301 	mov.w	r3, #1
 801c080:	6103      	str	r3, [r0, #16]
 801c082:	dd19      	ble.n	801c0b8 <__s2b+0x64>
 801c084:	f104 0809 	add.w	r8, r4, #9
 801c088:	46c1      	mov	r9, r8
 801c08a:	442c      	add	r4, r5
 801c08c:	f819 3b01 	ldrb.w	r3, [r9], #1
 801c090:	4601      	mov	r1, r0
 801c092:	3b30      	subs	r3, #48	; 0x30
 801c094:	220a      	movs	r2, #10
 801c096:	4630      	mov	r0, r6
 801c098:	f7ff ffa1 	bl	801bfde <__multadd>
 801c09c:	45a1      	cmp	r9, r4
 801c09e:	d1f5      	bne.n	801c08c <__s2b+0x38>
 801c0a0:	eb08 0405 	add.w	r4, r8, r5
 801c0a4:	3c08      	subs	r4, #8
 801c0a6:	1b2d      	subs	r5, r5, r4
 801c0a8:	1963      	adds	r3, r4, r5
 801c0aa:	42bb      	cmp	r3, r7
 801c0ac:	db07      	blt.n	801c0be <__s2b+0x6a>
 801c0ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c0b2:	0052      	lsls	r2, r2, #1
 801c0b4:	3101      	adds	r1, #1
 801c0b6:	e7d9      	b.n	801c06c <__s2b+0x18>
 801c0b8:	340a      	adds	r4, #10
 801c0ba:	2509      	movs	r5, #9
 801c0bc:	e7f3      	b.n	801c0a6 <__s2b+0x52>
 801c0be:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c0c2:	4601      	mov	r1, r0
 801c0c4:	3b30      	subs	r3, #48	; 0x30
 801c0c6:	220a      	movs	r2, #10
 801c0c8:	4630      	mov	r0, r6
 801c0ca:	f7ff ff88 	bl	801bfde <__multadd>
 801c0ce:	e7eb      	b.n	801c0a8 <__s2b+0x54>

0801c0d0 <__hi0bits>:
 801c0d0:	0c02      	lsrs	r2, r0, #16
 801c0d2:	0412      	lsls	r2, r2, #16
 801c0d4:	4603      	mov	r3, r0
 801c0d6:	b9b2      	cbnz	r2, 801c106 <__hi0bits+0x36>
 801c0d8:	0403      	lsls	r3, r0, #16
 801c0da:	2010      	movs	r0, #16
 801c0dc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801c0e0:	bf04      	itt	eq
 801c0e2:	021b      	lsleq	r3, r3, #8
 801c0e4:	3008      	addeq	r0, #8
 801c0e6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801c0ea:	bf04      	itt	eq
 801c0ec:	011b      	lsleq	r3, r3, #4
 801c0ee:	3004      	addeq	r0, #4
 801c0f0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801c0f4:	bf04      	itt	eq
 801c0f6:	009b      	lsleq	r3, r3, #2
 801c0f8:	3002      	addeq	r0, #2
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	db06      	blt.n	801c10c <__hi0bits+0x3c>
 801c0fe:	005b      	lsls	r3, r3, #1
 801c100:	d503      	bpl.n	801c10a <__hi0bits+0x3a>
 801c102:	3001      	adds	r0, #1
 801c104:	4770      	bx	lr
 801c106:	2000      	movs	r0, #0
 801c108:	e7e8      	b.n	801c0dc <__hi0bits+0xc>
 801c10a:	2020      	movs	r0, #32
 801c10c:	4770      	bx	lr

0801c10e <__lo0bits>:
 801c10e:	6803      	ldr	r3, [r0, #0]
 801c110:	f013 0207 	ands.w	r2, r3, #7
 801c114:	4601      	mov	r1, r0
 801c116:	d00b      	beq.n	801c130 <__lo0bits+0x22>
 801c118:	07da      	lsls	r2, r3, #31
 801c11a:	d423      	bmi.n	801c164 <__lo0bits+0x56>
 801c11c:	0798      	lsls	r0, r3, #30
 801c11e:	bf49      	itett	mi
 801c120:	085b      	lsrmi	r3, r3, #1
 801c122:	089b      	lsrpl	r3, r3, #2
 801c124:	2001      	movmi	r0, #1
 801c126:	600b      	strmi	r3, [r1, #0]
 801c128:	bf5c      	itt	pl
 801c12a:	600b      	strpl	r3, [r1, #0]
 801c12c:	2002      	movpl	r0, #2
 801c12e:	4770      	bx	lr
 801c130:	b298      	uxth	r0, r3
 801c132:	b9a8      	cbnz	r0, 801c160 <__lo0bits+0x52>
 801c134:	0c1b      	lsrs	r3, r3, #16
 801c136:	2010      	movs	r0, #16
 801c138:	f013 0fff 	tst.w	r3, #255	; 0xff
 801c13c:	bf04      	itt	eq
 801c13e:	0a1b      	lsreq	r3, r3, #8
 801c140:	3008      	addeq	r0, #8
 801c142:	071a      	lsls	r2, r3, #28
 801c144:	bf04      	itt	eq
 801c146:	091b      	lsreq	r3, r3, #4
 801c148:	3004      	addeq	r0, #4
 801c14a:	079a      	lsls	r2, r3, #30
 801c14c:	bf04      	itt	eq
 801c14e:	089b      	lsreq	r3, r3, #2
 801c150:	3002      	addeq	r0, #2
 801c152:	07da      	lsls	r2, r3, #31
 801c154:	d402      	bmi.n	801c15c <__lo0bits+0x4e>
 801c156:	085b      	lsrs	r3, r3, #1
 801c158:	d006      	beq.n	801c168 <__lo0bits+0x5a>
 801c15a:	3001      	adds	r0, #1
 801c15c:	600b      	str	r3, [r1, #0]
 801c15e:	4770      	bx	lr
 801c160:	4610      	mov	r0, r2
 801c162:	e7e9      	b.n	801c138 <__lo0bits+0x2a>
 801c164:	2000      	movs	r0, #0
 801c166:	4770      	bx	lr
 801c168:	2020      	movs	r0, #32
 801c16a:	4770      	bx	lr

0801c16c <__i2b>:
 801c16c:	b510      	push	{r4, lr}
 801c16e:	460c      	mov	r4, r1
 801c170:	2101      	movs	r1, #1
 801c172:	f7ff fee9 	bl	801bf48 <_Balloc>
 801c176:	2201      	movs	r2, #1
 801c178:	6144      	str	r4, [r0, #20]
 801c17a:	6102      	str	r2, [r0, #16]
 801c17c:	bd10      	pop	{r4, pc}

0801c17e <__multiply>:
 801c17e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c182:	4614      	mov	r4, r2
 801c184:	690a      	ldr	r2, [r1, #16]
 801c186:	6923      	ldr	r3, [r4, #16]
 801c188:	429a      	cmp	r2, r3
 801c18a:	bfb8      	it	lt
 801c18c:	460b      	movlt	r3, r1
 801c18e:	4688      	mov	r8, r1
 801c190:	bfbc      	itt	lt
 801c192:	46a0      	movlt	r8, r4
 801c194:	461c      	movlt	r4, r3
 801c196:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801c19a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801c19e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c1a2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c1a6:	eb07 0609 	add.w	r6, r7, r9
 801c1aa:	42b3      	cmp	r3, r6
 801c1ac:	bfb8      	it	lt
 801c1ae:	3101      	addlt	r1, #1
 801c1b0:	f7ff feca 	bl	801bf48 <_Balloc>
 801c1b4:	f100 0514 	add.w	r5, r0, #20
 801c1b8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801c1bc:	462b      	mov	r3, r5
 801c1be:	2200      	movs	r2, #0
 801c1c0:	4573      	cmp	r3, lr
 801c1c2:	d316      	bcc.n	801c1f2 <__multiply+0x74>
 801c1c4:	f104 0214 	add.w	r2, r4, #20
 801c1c8:	f108 0114 	add.w	r1, r8, #20
 801c1cc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801c1d0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801c1d4:	9300      	str	r3, [sp, #0]
 801c1d6:	9b00      	ldr	r3, [sp, #0]
 801c1d8:	9201      	str	r2, [sp, #4]
 801c1da:	4293      	cmp	r3, r2
 801c1dc:	d80c      	bhi.n	801c1f8 <__multiply+0x7a>
 801c1de:	2e00      	cmp	r6, #0
 801c1e0:	dd03      	ble.n	801c1ea <__multiply+0x6c>
 801c1e2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801c1e6:	2b00      	cmp	r3, #0
 801c1e8:	d05d      	beq.n	801c2a6 <__multiply+0x128>
 801c1ea:	6106      	str	r6, [r0, #16]
 801c1ec:	b003      	add	sp, #12
 801c1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1f2:	f843 2b04 	str.w	r2, [r3], #4
 801c1f6:	e7e3      	b.n	801c1c0 <__multiply+0x42>
 801c1f8:	f8b2 b000 	ldrh.w	fp, [r2]
 801c1fc:	f1bb 0f00 	cmp.w	fp, #0
 801c200:	d023      	beq.n	801c24a <__multiply+0xcc>
 801c202:	4689      	mov	r9, r1
 801c204:	46ac      	mov	ip, r5
 801c206:	f04f 0800 	mov.w	r8, #0
 801c20a:	f859 4b04 	ldr.w	r4, [r9], #4
 801c20e:	f8dc a000 	ldr.w	sl, [ip]
 801c212:	b2a3      	uxth	r3, r4
 801c214:	fa1f fa8a 	uxth.w	sl, sl
 801c218:	fb0b a303 	mla	r3, fp, r3, sl
 801c21c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801c220:	f8dc 4000 	ldr.w	r4, [ip]
 801c224:	4443      	add	r3, r8
 801c226:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801c22a:	fb0b 840a 	mla	r4, fp, sl, r8
 801c22e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801c232:	46e2      	mov	sl, ip
 801c234:	b29b      	uxth	r3, r3
 801c236:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801c23a:	454f      	cmp	r7, r9
 801c23c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801c240:	f84a 3b04 	str.w	r3, [sl], #4
 801c244:	d82b      	bhi.n	801c29e <__multiply+0x120>
 801c246:	f8cc 8004 	str.w	r8, [ip, #4]
 801c24a:	9b01      	ldr	r3, [sp, #4]
 801c24c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801c250:	3204      	adds	r2, #4
 801c252:	f1ba 0f00 	cmp.w	sl, #0
 801c256:	d020      	beq.n	801c29a <__multiply+0x11c>
 801c258:	682b      	ldr	r3, [r5, #0]
 801c25a:	4689      	mov	r9, r1
 801c25c:	46a8      	mov	r8, r5
 801c25e:	f04f 0b00 	mov.w	fp, #0
 801c262:	f8b9 c000 	ldrh.w	ip, [r9]
 801c266:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801c26a:	fb0a 440c 	mla	r4, sl, ip, r4
 801c26e:	445c      	add	r4, fp
 801c270:	46c4      	mov	ip, r8
 801c272:	b29b      	uxth	r3, r3
 801c274:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801c278:	f84c 3b04 	str.w	r3, [ip], #4
 801c27c:	f859 3b04 	ldr.w	r3, [r9], #4
 801c280:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801c284:	0c1b      	lsrs	r3, r3, #16
 801c286:	fb0a b303 	mla	r3, sl, r3, fp
 801c28a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801c28e:	454f      	cmp	r7, r9
 801c290:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801c294:	d805      	bhi.n	801c2a2 <__multiply+0x124>
 801c296:	f8c8 3004 	str.w	r3, [r8, #4]
 801c29a:	3504      	adds	r5, #4
 801c29c:	e79b      	b.n	801c1d6 <__multiply+0x58>
 801c29e:	46d4      	mov	ip, sl
 801c2a0:	e7b3      	b.n	801c20a <__multiply+0x8c>
 801c2a2:	46e0      	mov	r8, ip
 801c2a4:	e7dd      	b.n	801c262 <__multiply+0xe4>
 801c2a6:	3e01      	subs	r6, #1
 801c2a8:	e799      	b.n	801c1de <__multiply+0x60>
	...

0801c2ac <__pow5mult>:
 801c2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c2b0:	4615      	mov	r5, r2
 801c2b2:	f012 0203 	ands.w	r2, r2, #3
 801c2b6:	4606      	mov	r6, r0
 801c2b8:	460f      	mov	r7, r1
 801c2ba:	d007      	beq.n	801c2cc <__pow5mult+0x20>
 801c2bc:	3a01      	subs	r2, #1
 801c2be:	4c21      	ldr	r4, [pc, #132]	; (801c344 <__pow5mult+0x98>)
 801c2c0:	2300      	movs	r3, #0
 801c2c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c2c6:	f7ff fe8a 	bl	801bfde <__multadd>
 801c2ca:	4607      	mov	r7, r0
 801c2cc:	10ad      	asrs	r5, r5, #2
 801c2ce:	d035      	beq.n	801c33c <__pow5mult+0x90>
 801c2d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801c2d2:	b93c      	cbnz	r4, 801c2e4 <__pow5mult+0x38>
 801c2d4:	2010      	movs	r0, #16
 801c2d6:	f7ff fe2f 	bl	801bf38 <malloc>
 801c2da:	6270      	str	r0, [r6, #36]	; 0x24
 801c2dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c2e0:	6004      	str	r4, [r0, #0]
 801c2e2:	60c4      	str	r4, [r0, #12]
 801c2e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801c2e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c2ec:	b94c      	cbnz	r4, 801c302 <__pow5mult+0x56>
 801c2ee:	f240 2171 	movw	r1, #625	; 0x271
 801c2f2:	4630      	mov	r0, r6
 801c2f4:	f7ff ff3a 	bl	801c16c <__i2b>
 801c2f8:	2300      	movs	r3, #0
 801c2fa:	f8c8 0008 	str.w	r0, [r8, #8]
 801c2fe:	4604      	mov	r4, r0
 801c300:	6003      	str	r3, [r0, #0]
 801c302:	f04f 0800 	mov.w	r8, #0
 801c306:	07eb      	lsls	r3, r5, #31
 801c308:	d50a      	bpl.n	801c320 <__pow5mult+0x74>
 801c30a:	4639      	mov	r1, r7
 801c30c:	4622      	mov	r2, r4
 801c30e:	4630      	mov	r0, r6
 801c310:	f7ff ff35 	bl	801c17e <__multiply>
 801c314:	4639      	mov	r1, r7
 801c316:	4681      	mov	r9, r0
 801c318:	4630      	mov	r0, r6
 801c31a:	f7ff fe49 	bl	801bfb0 <_Bfree>
 801c31e:	464f      	mov	r7, r9
 801c320:	106d      	asrs	r5, r5, #1
 801c322:	d00b      	beq.n	801c33c <__pow5mult+0x90>
 801c324:	6820      	ldr	r0, [r4, #0]
 801c326:	b938      	cbnz	r0, 801c338 <__pow5mult+0x8c>
 801c328:	4622      	mov	r2, r4
 801c32a:	4621      	mov	r1, r4
 801c32c:	4630      	mov	r0, r6
 801c32e:	f7ff ff26 	bl	801c17e <__multiply>
 801c332:	6020      	str	r0, [r4, #0]
 801c334:	f8c0 8000 	str.w	r8, [r0]
 801c338:	4604      	mov	r4, r0
 801c33a:	e7e4      	b.n	801c306 <__pow5mult+0x5a>
 801c33c:	4638      	mov	r0, r7
 801c33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c342:	bf00      	nop
 801c344:	08020e50 	.word	0x08020e50

0801c348 <__lshift>:
 801c348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c34c:	460c      	mov	r4, r1
 801c34e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c352:	6923      	ldr	r3, [r4, #16]
 801c354:	6849      	ldr	r1, [r1, #4]
 801c356:	eb0a 0903 	add.w	r9, sl, r3
 801c35a:	68a3      	ldr	r3, [r4, #8]
 801c35c:	4607      	mov	r7, r0
 801c35e:	4616      	mov	r6, r2
 801c360:	f109 0501 	add.w	r5, r9, #1
 801c364:	42ab      	cmp	r3, r5
 801c366:	db32      	blt.n	801c3ce <__lshift+0x86>
 801c368:	4638      	mov	r0, r7
 801c36a:	f7ff fded 	bl	801bf48 <_Balloc>
 801c36e:	2300      	movs	r3, #0
 801c370:	4680      	mov	r8, r0
 801c372:	f100 0114 	add.w	r1, r0, #20
 801c376:	461a      	mov	r2, r3
 801c378:	4553      	cmp	r3, sl
 801c37a:	db2b      	blt.n	801c3d4 <__lshift+0x8c>
 801c37c:	6920      	ldr	r0, [r4, #16]
 801c37e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c382:	f104 0314 	add.w	r3, r4, #20
 801c386:	f016 021f 	ands.w	r2, r6, #31
 801c38a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c38e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c392:	d025      	beq.n	801c3e0 <__lshift+0x98>
 801c394:	f1c2 0e20 	rsb	lr, r2, #32
 801c398:	2000      	movs	r0, #0
 801c39a:	681e      	ldr	r6, [r3, #0]
 801c39c:	468a      	mov	sl, r1
 801c39e:	4096      	lsls	r6, r2
 801c3a0:	4330      	orrs	r0, r6
 801c3a2:	f84a 0b04 	str.w	r0, [sl], #4
 801c3a6:	f853 0b04 	ldr.w	r0, [r3], #4
 801c3aa:	459c      	cmp	ip, r3
 801c3ac:	fa20 f00e 	lsr.w	r0, r0, lr
 801c3b0:	d814      	bhi.n	801c3dc <__lshift+0x94>
 801c3b2:	6048      	str	r0, [r1, #4]
 801c3b4:	b108      	cbz	r0, 801c3ba <__lshift+0x72>
 801c3b6:	f109 0502 	add.w	r5, r9, #2
 801c3ba:	3d01      	subs	r5, #1
 801c3bc:	4638      	mov	r0, r7
 801c3be:	f8c8 5010 	str.w	r5, [r8, #16]
 801c3c2:	4621      	mov	r1, r4
 801c3c4:	f7ff fdf4 	bl	801bfb0 <_Bfree>
 801c3c8:	4640      	mov	r0, r8
 801c3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c3ce:	3101      	adds	r1, #1
 801c3d0:	005b      	lsls	r3, r3, #1
 801c3d2:	e7c7      	b.n	801c364 <__lshift+0x1c>
 801c3d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801c3d8:	3301      	adds	r3, #1
 801c3da:	e7cd      	b.n	801c378 <__lshift+0x30>
 801c3dc:	4651      	mov	r1, sl
 801c3de:	e7dc      	b.n	801c39a <__lshift+0x52>
 801c3e0:	3904      	subs	r1, #4
 801c3e2:	f853 2b04 	ldr.w	r2, [r3], #4
 801c3e6:	f841 2f04 	str.w	r2, [r1, #4]!
 801c3ea:	459c      	cmp	ip, r3
 801c3ec:	d8f9      	bhi.n	801c3e2 <__lshift+0x9a>
 801c3ee:	e7e4      	b.n	801c3ba <__lshift+0x72>

0801c3f0 <__mcmp>:
 801c3f0:	6903      	ldr	r3, [r0, #16]
 801c3f2:	690a      	ldr	r2, [r1, #16]
 801c3f4:	1a9b      	subs	r3, r3, r2
 801c3f6:	b530      	push	{r4, r5, lr}
 801c3f8:	d10c      	bne.n	801c414 <__mcmp+0x24>
 801c3fa:	0092      	lsls	r2, r2, #2
 801c3fc:	3014      	adds	r0, #20
 801c3fe:	3114      	adds	r1, #20
 801c400:	1884      	adds	r4, r0, r2
 801c402:	4411      	add	r1, r2
 801c404:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801c408:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801c40c:	4295      	cmp	r5, r2
 801c40e:	d003      	beq.n	801c418 <__mcmp+0x28>
 801c410:	d305      	bcc.n	801c41e <__mcmp+0x2e>
 801c412:	2301      	movs	r3, #1
 801c414:	4618      	mov	r0, r3
 801c416:	bd30      	pop	{r4, r5, pc}
 801c418:	42a0      	cmp	r0, r4
 801c41a:	d3f3      	bcc.n	801c404 <__mcmp+0x14>
 801c41c:	e7fa      	b.n	801c414 <__mcmp+0x24>
 801c41e:	f04f 33ff 	mov.w	r3, #4294967295
 801c422:	e7f7      	b.n	801c414 <__mcmp+0x24>

0801c424 <__mdiff>:
 801c424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c428:	460d      	mov	r5, r1
 801c42a:	4607      	mov	r7, r0
 801c42c:	4611      	mov	r1, r2
 801c42e:	4628      	mov	r0, r5
 801c430:	4614      	mov	r4, r2
 801c432:	f7ff ffdd 	bl	801c3f0 <__mcmp>
 801c436:	1e06      	subs	r6, r0, #0
 801c438:	d108      	bne.n	801c44c <__mdiff+0x28>
 801c43a:	4631      	mov	r1, r6
 801c43c:	4638      	mov	r0, r7
 801c43e:	f7ff fd83 	bl	801bf48 <_Balloc>
 801c442:	2301      	movs	r3, #1
 801c444:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801c448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c44c:	bfa4      	itt	ge
 801c44e:	4623      	movge	r3, r4
 801c450:	462c      	movge	r4, r5
 801c452:	4638      	mov	r0, r7
 801c454:	6861      	ldr	r1, [r4, #4]
 801c456:	bfa6      	itte	ge
 801c458:	461d      	movge	r5, r3
 801c45a:	2600      	movge	r6, #0
 801c45c:	2601      	movlt	r6, #1
 801c45e:	f7ff fd73 	bl	801bf48 <_Balloc>
 801c462:	692b      	ldr	r3, [r5, #16]
 801c464:	60c6      	str	r6, [r0, #12]
 801c466:	6926      	ldr	r6, [r4, #16]
 801c468:	f105 0914 	add.w	r9, r5, #20
 801c46c:	f104 0214 	add.w	r2, r4, #20
 801c470:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801c474:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801c478:	f100 0514 	add.w	r5, r0, #20
 801c47c:	f04f 0e00 	mov.w	lr, #0
 801c480:	f852 ab04 	ldr.w	sl, [r2], #4
 801c484:	f859 4b04 	ldr.w	r4, [r9], #4
 801c488:	fa1e f18a 	uxtah	r1, lr, sl
 801c48c:	b2a3      	uxth	r3, r4
 801c48e:	1ac9      	subs	r1, r1, r3
 801c490:	0c23      	lsrs	r3, r4, #16
 801c492:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801c496:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801c49a:	b289      	uxth	r1, r1
 801c49c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801c4a0:	45c8      	cmp	r8, r9
 801c4a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801c4a6:	4694      	mov	ip, r2
 801c4a8:	f845 3b04 	str.w	r3, [r5], #4
 801c4ac:	d8e8      	bhi.n	801c480 <__mdiff+0x5c>
 801c4ae:	45bc      	cmp	ip, r7
 801c4b0:	d304      	bcc.n	801c4bc <__mdiff+0x98>
 801c4b2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801c4b6:	b183      	cbz	r3, 801c4da <__mdiff+0xb6>
 801c4b8:	6106      	str	r6, [r0, #16]
 801c4ba:	e7c5      	b.n	801c448 <__mdiff+0x24>
 801c4bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 801c4c0:	fa1e f381 	uxtah	r3, lr, r1
 801c4c4:	141a      	asrs	r2, r3, #16
 801c4c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801c4ca:	b29b      	uxth	r3, r3
 801c4cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c4d0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801c4d4:	f845 3b04 	str.w	r3, [r5], #4
 801c4d8:	e7e9      	b.n	801c4ae <__mdiff+0x8a>
 801c4da:	3e01      	subs	r6, #1
 801c4dc:	e7e9      	b.n	801c4b2 <__mdiff+0x8e>
	...

0801c4e0 <__ulp>:
 801c4e0:	4b12      	ldr	r3, [pc, #72]	; (801c52c <__ulp+0x4c>)
 801c4e2:	ee10 2a90 	vmov	r2, s1
 801c4e6:	401a      	ands	r2, r3
 801c4e8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	dd04      	ble.n	801c4fa <__ulp+0x1a>
 801c4f0:	2000      	movs	r0, #0
 801c4f2:	4619      	mov	r1, r3
 801c4f4:	ec41 0b10 	vmov	d0, r0, r1
 801c4f8:	4770      	bx	lr
 801c4fa:	425b      	negs	r3, r3
 801c4fc:	151b      	asrs	r3, r3, #20
 801c4fe:	2b13      	cmp	r3, #19
 801c500:	f04f 0000 	mov.w	r0, #0
 801c504:	f04f 0100 	mov.w	r1, #0
 801c508:	dc04      	bgt.n	801c514 <__ulp+0x34>
 801c50a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801c50e:	fa42 f103 	asr.w	r1, r2, r3
 801c512:	e7ef      	b.n	801c4f4 <__ulp+0x14>
 801c514:	3b14      	subs	r3, #20
 801c516:	2b1e      	cmp	r3, #30
 801c518:	f04f 0201 	mov.w	r2, #1
 801c51c:	bfda      	itte	le
 801c51e:	f1c3 031f 	rsble	r3, r3, #31
 801c522:	fa02 f303 	lslle.w	r3, r2, r3
 801c526:	4613      	movgt	r3, r2
 801c528:	4618      	mov	r0, r3
 801c52a:	e7e3      	b.n	801c4f4 <__ulp+0x14>
 801c52c:	7ff00000 	.word	0x7ff00000

0801c530 <__b2d>:
 801c530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c532:	6905      	ldr	r5, [r0, #16]
 801c534:	f100 0714 	add.w	r7, r0, #20
 801c538:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801c53c:	1f2e      	subs	r6, r5, #4
 801c53e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801c542:	4620      	mov	r0, r4
 801c544:	f7ff fdc4 	bl	801c0d0 <__hi0bits>
 801c548:	f1c0 0320 	rsb	r3, r0, #32
 801c54c:	280a      	cmp	r0, #10
 801c54e:	600b      	str	r3, [r1, #0]
 801c550:	f8df c074 	ldr.w	ip, [pc, #116]	; 801c5c8 <__b2d+0x98>
 801c554:	dc14      	bgt.n	801c580 <__b2d+0x50>
 801c556:	f1c0 0e0b 	rsb	lr, r0, #11
 801c55a:	fa24 f10e 	lsr.w	r1, r4, lr
 801c55e:	42b7      	cmp	r7, r6
 801c560:	ea41 030c 	orr.w	r3, r1, ip
 801c564:	bf34      	ite	cc
 801c566:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801c56a:	2100      	movcs	r1, #0
 801c56c:	3015      	adds	r0, #21
 801c56e:	fa04 f000 	lsl.w	r0, r4, r0
 801c572:	fa21 f10e 	lsr.w	r1, r1, lr
 801c576:	ea40 0201 	orr.w	r2, r0, r1
 801c57a:	ec43 2b10 	vmov	d0, r2, r3
 801c57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c580:	42b7      	cmp	r7, r6
 801c582:	bf3a      	itte	cc
 801c584:	f1a5 0608 	subcc.w	r6, r5, #8
 801c588:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801c58c:	2100      	movcs	r1, #0
 801c58e:	380b      	subs	r0, #11
 801c590:	d015      	beq.n	801c5be <__b2d+0x8e>
 801c592:	4084      	lsls	r4, r0
 801c594:	f1c0 0520 	rsb	r5, r0, #32
 801c598:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801c59c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801c5a0:	42be      	cmp	r6, r7
 801c5a2:	fa21 fc05 	lsr.w	ip, r1, r5
 801c5a6:	ea44 030c 	orr.w	r3, r4, ip
 801c5aa:	bf8c      	ite	hi
 801c5ac:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801c5b0:	2400      	movls	r4, #0
 801c5b2:	fa01 f000 	lsl.w	r0, r1, r0
 801c5b6:	40ec      	lsrs	r4, r5
 801c5b8:	ea40 0204 	orr.w	r2, r0, r4
 801c5bc:	e7dd      	b.n	801c57a <__b2d+0x4a>
 801c5be:	ea44 030c 	orr.w	r3, r4, ip
 801c5c2:	460a      	mov	r2, r1
 801c5c4:	e7d9      	b.n	801c57a <__b2d+0x4a>
 801c5c6:	bf00      	nop
 801c5c8:	3ff00000 	.word	0x3ff00000

0801c5cc <__d2b>:
 801c5cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c5d0:	460e      	mov	r6, r1
 801c5d2:	2101      	movs	r1, #1
 801c5d4:	ec59 8b10 	vmov	r8, r9, d0
 801c5d8:	4615      	mov	r5, r2
 801c5da:	f7ff fcb5 	bl	801bf48 <_Balloc>
 801c5de:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801c5e2:	4607      	mov	r7, r0
 801c5e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c5e8:	bb34      	cbnz	r4, 801c638 <__d2b+0x6c>
 801c5ea:	9301      	str	r3, [sp, #4]
 801c5ec:	f1b8 0300 	subs.w	r3, r8, #0
 801c5f0:	d027      	beq.n	801c642 <__d2b+0x76>
 801c5f2:	a802      	add	r0, sp, #8
 801c5f4:	f840 3d08 	str.w	r3, [r0, #-8]!
 801c5f8:	f7ff fd89 	bl	801c10e <__lo0bits>
 801c5fc:	9900      	ldr	r1, [sp, #0]
 801c5fe:	b1f0      	cbz	r0, 801c63e <__d2b+0x72>
 801c600:	9a01      	ldr	r2, [sp, #4]
 801c602:	f1c0 0320 	rsb	r3, r0, #32
 801c606:	fa02 f303 	lsl.w	r3, r2, r3
 801c60a:	430b      	orrs	r3, r1
 801c60c:	40c2      	lsrs	r2, r0
 801c60e:	617b      	str	r3, [r7, #20]
 801c610:	9201      	str	r2, [sp, #4]
 801c612:	9b01      	ldr	r3, [sp, #4]
 801c614:	61bb      	str	r3, [r7, #24]
 801c616:	2b00      	cmp	r3, #0
 801c618:	bf14      	ite	ne
 801c61a:	2102      	movne	r1, #2
 801c61c:	2101      	moveq	r1, #1
 801c61e:	6139      	str	r1, [r7, #16]
 801c620:	b1c4      	cbz	r4, 801c654 <__d2b+0x88>
 801c622:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801c626:	4404      	add	r4, r0
 801c628:	6034      	str	r4, [r6, #0]
 801c62a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801c62e:	6028      	str	r0, [r5, #0]
 801c630:	4638      	mov	r0, r7
 801c632:	b003      	add	sp, #12
 801c634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c638:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c63c:	e7d5      	b.n	801c5ea <__d2b+0x1e>
 801c63e:	6179      	str	r1, [r7, #20]
 801c640:	e7e7      	b.n	801c612 <__d2b+0x46>
 801c642:	a801      	add	r0, sp, #4
 801c644:	f7ff fd63 	bl	801c10e <__lo0bits>
 801c648:	9b01      	ldr	r3, [sp, #4]
 801c64a:	617b      	str	r3, [r7, #20]
 801c64c:	2101      	movs	r1, #1
 801c64e:	6139      	str	r1, [r7, #16]
 801c650:	3020      	adds	r0, #32
 801c652:	e7e5      	b.n	801c620 <__d2b+0x54>
 801c654:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801c658:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801c65c:	6030      	str	r0, [r6, #0]
 801c65e:	6918      	ldr	r0, [r3, #16]
 801c660:	f7ff fd36 	bl	801c0d0 <__hi0bits>
 801c664:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801c668:	e7e1      	b.n	801c62e <__d2b+0x62>

0801c66a <__ratio>:
 801c66a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c66e:	4688      	mov	r8, r1
 801c670:	4669      	mov	r1, sp
 801c672:	4681      	mov	r9, r0
 801c674:	f7ff ff5c 	bl	801c530 <__b2d>
 801c678:	a901      	add	r1, sp, #4
 801c67a:	4640      	mov	r0, r8
 801c67c:	ec57 6b10 	vmov	r6, r7, d0
 801c680:	ee10 4a10 	vmov	r4, s0
 801c684:	f7ff ff54 	bl	801c530 <__b2d>
 801c688:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c68c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801c690:	eba3 0c02 	sub.w	ip, r3, r2
 801c694:	e9dd 3200 	ldrd	r3, r2, [sp]
 801c698:	1a9b      	subs	r3, r3, r2
 801c69a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801c69e:	ec51 0b10 	vmov	r0, r1, d0
 801c6a2:	2b00      	cmp	r3, #0
 801c6a4:	ee10 aa10 	vmov	sl, s0
 801c6a8:	bfce      	itee	gt
 801c6aa:	463a      	movgt	r2, r7
 801c6ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801c6b0:	460a      	movle	r2, r1
 801c6b2:	463d      	mov	r5, r7
 801c6b4:	468b      	mov	fp, r1
 801c6b6:	bfcc      	ite	gt
 801c6b8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801c6bc:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801c6c0:	ec45 4b17 	vmov	d7, r4, r5
 801c6c4:	ec4b ab16 	vmov	d6, sl, fp
 801c6c8:	ee87 0b06 	vdiv.f64	d0, d7, d6
 801c6cc:	b003      	add	sp, #12
 801c6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c6d2 <__copybits>:
 801c6d2:	3901      	subs	r1, #1
 801c6d4:	b510      	push	{r4, lr}
 801c6d6:	1149      	asrs	r1, r1, #5
 801c6d8:	6914      	ldr	r4, [r2, #16]
 801c6da:	3101      	adds	r1, #1
 801c6dc:	f102 0314 	add.w	r3, r2, #20
 801c6e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801c6e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801c6e8:	42a3      	cmp	r3, r4
 801c6ea:	4602      	mov	r2, r0
 801c6ec:	d303      	bcc.n	801c6f6 <__copybits+0x24>
 801c6ee:	2300      	movs	r3, #0
 801c6f0:	428a      	cmp	r2, r1
 801c6f2:	d305      	bcc.n	801c700 <__copybits+0x2e>
 801c6f4:	bd10      	pop	{r4, pc}
 801c6f6:	f853 2b04 	ldr.w	r2, [r3], #4
 801c6fa:	f840 2b04 	str.w	r2, [r0], #4
 801c6fe:	e7f3      	b.n	801c6e8 <__copybits+0x16>
 801c700:	f842 3b04 	str.w	r3, [r2], #4
 801c704:	e7f4      	b.n	801c6f0 <__copybits+0x1e>

0801c706 <__any_on>:
 801c706:	f100 0214 	add.w	r2, r0, #20
 801c70a:	6900      	ldr	r0, [r0, #16]
 801c70c:	114b      	asrs	r3, r1, #5
 801c70e:	4298      	cmp	r0, r3
 801c710:	b510      	push	{r4, lr}
 801c712:	db11      	blt.n	801c738 <__any_on+0x32>
 801c714:	dd0a      	ble.n	801c72c <__any_on+0x26>
 801c716:	f011 011f 	ands.w	r1, r1, #31
 801c71a:	d007      	beq.n	801c72c <__any_on+0x26>
 801c71c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801c720:	fa24 f001 	lsr.w	r0, r4, r1
 801c724:	fa00 f101 	lsl.w	r1, r0, r1
 801c728:	428c      	cmp	r4, r1
 801c72a:	d10b      	bne.n	801c744 <__any_on+0x3e>
 801c72c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c730:	4293      	cmp	r3, r2
 801c732:	d803      	bhi.n	801c73c <__any_on+0x36>
 801c734:	2000      	movs	r0, #0
 801c736:	bd10      	pop	{r4, pc}
 801c738:	4603      	mov	r3, r0
 801c73a:	e7f7      	b.n	801c72c <__any_on+0x26>
 801c73c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c740:	2900      	cmp	r1, #0
 801c742:	d0f5      	beq.n	801c730 <__any_on+0x2a>
 801c744:	2001      	movs	r0, #1
 801c746:	e7f6      	b.n	801c736 <__any_on+0x30>

0801c748 <_calloc_r>:
 801c748:	b538      	push	{r3, r4, r5, lr}
 801c74a:	fb02 f401 	mul.w	r4, r2, r1
 801c74e:	4621      	mov	r1, r4
 801c750:	f000 f856 	bl	801c800 <_malloc_r>
 801c754:	4605      	mov	r5, r0
 801c756:	b118      	cbz	r0, 801c760 <_calloc_r+0x18>
 801c758:	4622      	mov	r2, r4
 801c75a:	2100      	movs	r1, #0
 801c75c:	f7fc fa94 	bl	8018c88 <memset>
 801c760:	4628      	mov	r0, r5
 801c762:	bd38      	pop	{r3, r4, r5, pc}

0801c764 <_free_r>:
 801c764:	b538      	push	{r3, r4, r5, lr}
 801c766:	4605      	mov	r5, r0
 801c768:	2900      	cmp	r1, #0
 801c76a:	d045      	beq.n	801c7f8 <_free_r+0x94>
 801c76c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c770:	1f0c      	subs	r4, r1, #4
 801c772:	2b00      	cmp	r3, #0
 801c774:	bfb8      	it	lt
 801c776:	18e4      	addlt	r4, r4, r3
 801c778:	f000 fbd8 	bl	801cf2c <__malloc_lock>
 801c77c:	4a1f      	ldr	r2, [pc, #124]	; (801c7fc <_free_r+0x98>)
 801c77e:	6813      	ldr	r3, [r2, #0]
 801c780:	4610      	mov	r0, r2
 801c782:	b933      	cbnz	r3, 801c792 <_free_r+0x2e>
 801c784:	6063      	str	r3, [r4, #4]
 801c786:	6014      	str	r4, [r2, #0]
 801c788:	4628      	mov	r0, r5
 801c78a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c78e:	f000 bbce 	b.w	801cf2e <__malloc_unlock>
 801c792:	42a3      	cmp	r3, r4
 801c794:	d90c      	bls.n	801c7b0 <_free_r+0x4c>
 801c796:	6821      	ldr	r1, [r4, #0]
 801c798:	1862      	adds	r2, r4, r1
 801c79a:	4293      	cmp	r3, r2
 801c79c:	bf04      	itt	eq
 801c79e:	681a      	ldreq	r2, [r3, #0]
 801c7a0:	685b      	ldreq	r3, [r3, #4]
 801c7a2:	6063      	str	r3, [r4, #4]
 801c7a4:	bf04      	itt	eq
 801c7a6:	1852      	addeq	r2, r2, r1
 801c7a8:	6022      	streq	r2, [r4, #0]
 801c7aa:	6004      	str	r4, [r0, #0]
 801c7ac:	e7ec      	b.n	801c788 <_free_r+0x24>
 801c7ae:	4613      	mov	r3, r2
 801c7b0:	685a      	ldr	r2, [r3, #4]
 801c7b2:	b10a      	cbz	r2, 801c7b8 <_free_r+0x54>
 801c7b4:	42a2      	cmp	r2, r4
 801c7b6:	d9fa      	bls.n	801c7ae <_free_r+0x4a>
 801c7b8:	6819      	ldr	r1, [r3, #0]
 801c7ba:	1858      	adds	r0, r3, r1
 801c7bc:	42a0      	cmp	r0, r4
 801c7be:	d10b      	bne.n	801c7d8 <_free_r+0x74>
 801c7c0:	6820      	ldr	r0, [r4, #0]
 801c7c2:	4401      	add	r1, r0
 801c7c4:	1858      	adds	r0, r3, r1
 801c7c6:	4282      	cmp	r2, r0
 801c7c8:	6019      	str	r1, [r3, #0]
 801c7ca:	d1dd      	bne.n	801c788 <_free_r+0x24>
 801c7cc:	6810      	ldr	r0, [r2, #0]
 801c7ce:	6852      	ldr	r2, [r2, #4]
 801c7d0:	605a      	str	r2, [r3, #4]
 801c7d2:	4401      	add	r1, r0
 801c7d4:	6019      	str	r1, [r3, #0]
 801c7d6:	e7d7      	b.n	801c788 <_free_r+0x24>
 801c7d8:	d902      	bls.n	801c7e0 <_free_r+0x7c>
 801c7da:	230c      	movs	r3, #12
 801c7dc:	602b      	str	r3, [r5, #0]
 801c7de:	e7d3      	b.n	801c788 <_free_r+0x24>
 801c7e0:	6820      	ldr	r0, [r4, #0]
 801c7e2:	1821      	adds	r1, r4, r0
 801c7e4:	428a      	cmp	r2, r1
 801c7e6:	bf04      	itt	eq
 801c7e8:	6811      	ldreq	r1, [r2, #0]
 801c7ea:	6852      	ldreq	r2, [r2, #4]
 801c7ec:	6062      	str	r2, [r4, #4]
 801c7ee:	bf04      	itt	eq
 801c7f0:	1809      	addeq	r1, r1, r0
 801c7f2:	6021      	streq	r1, [r4, #0]
 801c7f4:	605c      	str	r4, [r3, #4]
 801c7f6:	e7c7      	b.n	801c788 <_free_r+0x24>
 801c7f8:	bd38      	pop	{r3, r4, r5, pc}
 801c7fa:	bf00      	nop
 801c7fc:	20008940 	.word	0x20008940

0801c800 <_malloc_r>:
 801c800:	b570      	push	{r4, r5, r6, lr}
 801c802:	1ccd      	adds	r5, r1, #3
 801c804:	f025 0503 	bic.w	r5, r5, #3
 801c808:	3508      	adds	r5, #8
 801c80a:	2d0c      	cmp	r5, #12
 801c80c:	bf38      	it	cc
 801c80e:	250c      	movcc	r5, #12
 801c810:	2d00      	cmp	r5, #0
 801c812:	4606      	mov	r6, r0
 801c814:	db01      	blt.n	801c81a <_malloc_r+0x1a>
 801c816:	42a9      	cmp	r1, r5
 801c818:	d903      	bls.n	801c822 <_malloc_r+0x22>
 801c81a:	230c      	movs	r3, #12
 801c81c:	6033      	str	r3, [r6, #0]
 801c81e:	2000      	movs	r0, #0
 801c820:	bd70      	pop	{r4, r5, r6, pc}
 801c822:	f000 fb83 	bl	801cf2c <__malloc_lock>
 801c826:	4a21      	ldr	r2, [pc, #132]	; (801c8ac <_malloc_r+0xac>)
 801c828:	6814      	ldr	r4, [r2, #0]
 801c82a:	4621      	mov	r1, r4
 801c82c:	b991      	cbnz	r1, 801c854 <_malloc_r+0x54>
 801c82e:	4c20      	ldr	r4, [pc, #128]	; (801c8b0 <_malloc_r+0xb0>)
 801c830:	6823      	ldr	r3, [r4, #0]
 801c832:	b91b      	cbnz	r3, 801c83c <_malloc_r+0x3c>
 801c834:	4630      	mov	r0, r6
 801c836:	f000 facf 	bl	801cdd8 <_sbrk_r>
 801c83a:	6020      	str	r0, [r4, #0]
 801c83c:	4629      	mov	r1, r5
 801c83e:	4630      	mov	r0, r6
 801c840:	f000 faca 	bl	801cdd8 <_sbrk_r>
 801c844:	1c43      	adds	r3, r0, #1
 801c846:	d124      	bne.n	801c892 <_malloc_r+0x92>
 801c848:	230c      	movs	r3, #12
 801c84a:	6033      	str	r3, [r6, #0]
 801c84c:	4630      	mov	r0, r6
 801c84e:	f000 fb6e 	bl	801cf2e <__malloc_unlock>
 801c852:	e7e4      	b.n	801c81e <_malloc_r+0x1e>
 801c854:	680b      	ldr	r3, [r1, #0]
 801c856:	1b5b      	subs	r3, r3, r5
 801c858:	d418      	bmi.n	801c88c <_malloc_r+0x8c>
 801c85a:	2b0b      	cmp	r3, #11
 801c85c:	d90f      	bls.n	801c87e <_malloc_r+0x7e>
 801c85e:	600b      	str	r3, [r1, #0]
 801c860:	50cd      	str	r5, [r1, r3]
 801c862:	18cc      	adds	r4, r1, r3
 801c864:	4630      	mov	r0, r6
 801c866:	f000 fb62 	bl	801cf2e <__malloc_unlock>
 801c86a:	f104 000b 	add.w	r0, r4, #11
 801c86e:	1d23      	adds	r3, r4, #4
 801c870:	f020 0007 	bic.w	r0, r0, #7
 801c874:	1ac3      	subs	r3, r0, r3
 801c876:	d0d3      	beq.n	801c820 <_malloc_r+0x20>
 801c878:	425a      	negs	r2, r3
 801c87a:	50e2      	str	r2, [r4, r3]
 801c87c:	e7d0      	b.n	801c820 <_malloc_r+0x20>
 801c87e:	428c      	cmp	r4, r1
 801c880:	684b      	ldr	r3, [r1, #4]
 801c882:	bf16      	itet	ne
 801c884:	6063      	strne	r3, [r4, #4]
 801c886:	6013      	streq	r3, [r2, #0]
 801c888:	460c      	movne	r4, r1
 801c88a:	e7eb      	b.n	801c864 <_malloc_r+0x64>
 801c88c:	460c      	mov	r4, r1
 801c88e:	6849      	ldr	r1, [r1, #4]
 801c890:	e7cc      	b.n	801c82c <_malloc_r+0x2c>
 801c892:	1cc4      	adds	r4, r0, #3
 801c894:	f024 0403 	bic.w	r4, r4, #3
 801c898:	42a0      	cmp	r0, r4
 801c89a:	d005      	beq.n	801c8a8 <_malloc_r+0xa8>
 801c89c:	1a21      	subs	r1, r4, r0
 801c89e:	4630      	mov	r0, r6
 801c8a0:	f000 fa9a 	bl	801cdd8 <_sbrk_r>
 801c8a4:	3001      	adds	r0, #1
 801c8a6:	d0cf      	beq.n	801c848 <_malloc_r+0x48>
 801c8a8:	6025      	str	r5, [r4, #0]
 801c8aa:	e7db      	b.n	801c864 <_malloc_r+0x64>
 801c8ac:	20008940 	.word	0x20008940
 801c8b0:	20008944 	.word	0x20008944

0801c8b4 <__ssputs_r>:
 801c8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c8b8:	688e      	ldr	r6, [r1, #8]
 801c8ba:	429e      	cmp	r6, r3
 801c8bc:	4682      	mov	sl, r0
 801c8be:	460c      	mov	r4, r1
 801c8c0:	4690      	mov	r8, r2
 801c8c2:	4699      	mov	r9, r3
 801c8c4:	d837      	bhi.n	801c936 <__ssputs_r+0x82>
 801c8c6:	898a      	ldrh	r2, [r1, #12]
 801c8c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801c8cc:	d031      	beq.n	801c932 <__ssputs_r+0x7e>
 801c8ce:	6825      	ldr	r5, [r4, #0]
 801c8d0:	6909      	ldr	r1, [r1, #16]
 801c8d2:	1a6f      	subs	r7, r5, r1
 801c8d4:	6965      	ldr	r5, [r4, #20]
 801c8d6:	2302      	movs	r3, #2
 801c8d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c8dc:	fb95 f5f3 	sdiv	r5, r5, r3
 801c8e0:	f109 0301 	add.w	r3, r9, #1
 801c8e4:	443b      	add	r3, r7
 801c8e6:	429d      	cmp	r5, r3
 801c8e8:	bf38      	it	cc
 801c8ea:	461d      	movcc	r5, r3
 801c8ec:	0553      	lsls	r3, r2, #21
 801c8ee:	d530      	bpl.n	801c952 <__ssputs_r+0x9e>
 801c8f0:	4629      	mov	r1, r5
 801c8f2:	f7ff ff85 	bl	801c800 <_malloc_r>
 801c8f6:	4606      	mov	r6, r0
 801c8f8:	b950      	cbnz	r0, 801c910 <__ssputs_r+0x5c>
 801c8fa:	230c      	movs	r3, #12
 801c8fc:	f8ca 3000 	str.w	r3, [sl]
 801c900:	89a3      	ldrh	r3, [r4, #12]
 801c902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c906:	81a3      	strh	r3, [r4, #12]
 801c908:	f04f 30ff 	mov.w	r0, #4294967295
 801c90c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c910:	463a      	mov	r2, r7
 801c912:	6921      	ldr	r1, [r4, #16]
 801c914:	f7fc f994 	bl	8018c40 <memcpy>
 801c918:	89a3      	ldrh	r3, [r4, #12]
 801c91a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801c91e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c922:	81a3      	strh	r3, [r4, #12]
 801c924:	6126      	str	r6, [r4, #16]
 801c926:	6165      	str	r5, [r4, #20]
 801c928:	443e      	add	r6, r7
 801c92a:	1bed      	subs	r5, r5, r7
 801c92c:	6026      	str	r6, [r4, #0]
 801c92e:	60a5      	str	r5, [r4, #8]
 801c930:	464e      	mov	r6, r9
 801c932:	454e      	cmp	r6, r9
 801c934:	d900      	bls.n	801c938 <__ssputs_r+0x84>
 801c936:	464e      	mov	r6, r9
 801c938:	4632      	mov	r2, r6
 801c93a:	4641      	mov	r1, r8
 801c93c:	6820      	ldr	r0, [r4, #0]
 801c93e:	f7fc f98a 	bl	8018c56 <memmove>
 801c942:	68a3      	ldr	r3, [r4, #8]
 801c944:	1b9b      	subs	r3, r3, r6
 801c946:	60a3      	str	r3, [r4, #8]
 801c948:	6823      	ldr	r3, [r4, #0]
 801c94a:	441e      	add	r6, r3
 801c94c:	6026      	str	r6, [r4, #0]
 801c94e:	2000      	movs	r0, #0
 801c950:	e7dc      	b.n	801c90c <__ssputs_r+0x58>
 801c952:	462a      	mov	r2, r5
 801c954:	f000 faec 	bl	801cf30 <_realloc_r>
 801c958:	4606      	mov	r6, r0
 801c95a:	2800      	cmp	r0, #0
 801c95c:	d1e2      	bne.n	801c924 <__ssputs_r+0x70>
 801c95e:	6921      	ldr	r1, [r4, #16]
 801c960:	4650      	mov	r0, sl
 801c962:	f7ff feff 	bl	801c764 <_free_r>
 801c966:	e7c8      	b.n	801c8fa <__ssputs_r+0x46>

0801c968 <_svfiprintf_r>:
 801c968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c96c:	461d      	mov	r5, r3
 801c96e:	898b      	ldrh	r3, [r1, #12]
 801c970:	061f      	lsls	r7, r3, #24
 801c972:	b09d      	sub	sp, #116	; 0x74
 801c974:	4680      	mov	r8, r0
 801c976:	460c      	mov	r4, r1
 801c978:	4616      	mov	r6, r2
 801c97a:	d50f      	bpl.n	801c99c <_svfiprintf_r+0x34>
 801c97c:	690b      	ldr	r3, [r1, #16]
 801c97e:	b96b      	cbnz	r3, 801c99c <_svfiprintf_r+0x34>
 801c980:	2140      	movs	r1, #64	; 0x40
 801c982:	f7ff ff3d 	bl	801c800 <_malloc_r>
 801c986:	6020      	str	r0, [r4, #0]
 801c988:	6120      	str	r0, [r4, #16]
 801c98a:	b928      	cbnz	r0, 801c998 <_svfiprintf_r+0x30>
 801c98c:	230c      	movs	r3, #12
 801c98e:	f8c8 3000 	str.w	r3, [r8]
 801c992:	f04f 30ff 	mov.w	r0, #4294967295
 801c996:	e0c8      	b.n	801cb2a <_svfiprintf_r+0x1c2>
 801c998:	2340      	movs	r3, #64	; 0x40
 801c99a:	6163      	str	r3, [r4, #20]
 801c99c:	2300      	movs	r3, #0
 801c99e:	9309      	str	r3, [sp, #36]	; 0x24
 801c9a0:	2320      	movs	r3, #32
 801c9a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c9a6:	2330      	movs	r3, #48	; 0x30
 801c9a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c9ac:	9503      	str	r5, [sp, #12]
 801c9ae:	f04f 0b01 	mov.w	fp, #1
 801c9b2:	4637      	mov	r7, r6
 801c9b4:	463d      	mov	r5, r7
 801c9b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 801c9ba:	b10b      	cbz	r3, 801c9c0 <_svfiprintf_r+0x58>
 801c9bc:	2b25      	cmp	r3, #37	; 0x25
 801c9be:	d13e      	bne.n	801ca3e <_svfiprintf_r+0xd6>
 801c9c0:	ebb7 0a06 	subs.w	sl, r7, r6
 801c9c4:	d00b      	beq.n	801c9de <_svfiprintf_r+0x76>
 801c9c6:	4653      	mov	r3, sl
 801c9c8:	4632      	mov	r2, r6
 801c9ca:	4621      	mov	r1, r4
 801c9cc:	4640      	mov	r0, r8
 801c9ce:	f7ff ff71 	bl	801c8b4 <__ssputs_r>
 801c9d2:	3001      	adds	r0, #1
 801c9d4:	f000 80a4 	beq.w	801cb20 <_svfiprintf_r+0x1b8>
 801c9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c9da:	4453      	add	r3, sl
 801c9dc:	9309      	str	r3, [sp, #36]	; 0x24
 801c9de:	783b      	ldrb	r3, [r7, #0]
 801c9e0:	2b00      	cmp	r3, #0
 801c9e2:	f000 809d 	beq.w	801cb20 <_svfiprintf_r+0x1b8>
 801c9e6:	2300      	movs	r3, #0
 801c9e8:	f04f 32ff 	mov.w	r2, #4294967295
 801c9ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c9f0:	9304      	str	r3, [sp, #16]
 801c9f2:	9307      	str	r3, [sp, #28]
 801c9f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c9f8:	931a      	str	r3, [sp, #104]	; 0x68
 801c9fa:	462f      	mov	r7, r5
 801c9fc:	2205      	movs	r2, #5
 801c9fe:	f817 1b01 	ldrb.w	r1, [r7], #1
 801ca02:	4850      	ldr	r0, [pc, #320]	; (801cb44 <_svfiprintf_r+0x1dc>)
 801ca04:	f7e3 fc24 	bl	8000250 <memchr>
 801ca08:	9b04      	ldr	r3, [sp, #16]
 801ca0a:	b9d0      	cbnz	r0, 801ca42 <_svfiprintf_r+0xda>
 801ca0c:	06d9      	lsls	r1, r3, #27
 801ca0e:	bf44      	itt	mi
 801ca10:	2220      	movmi	r2, #32
 801ca12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ca16:	071a      	lsls	r2, r3, #28
 801ca18:	bf44      	itt	mi
 801ca1a:	222b      	movmi	r2, #43	; 0x2b
 801ca1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ca20:	782a      	ldrb	r2, [r5, #0]
 801ca22:	2a2a      	cmp	r2, #42	; 0x2a
 801ca24:	d015      	beq.n	801ca52 <_svfiprintf_r+0xea>
 801ca26:	9a07      	ldr	r2, [sp, #28]
 801ca28:	462f      	mov	r7, r5
 801ca2a:	2000      	movs	r0, #0
 801ca2c:	250a      	movs	r5, #10
 801ca2e:	4639      	mov	r1, r7
 801ca30:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ca34:	3b30      	subs	r3, #48	; 0x30
 801ca36:	2b09      	cmp	r3, #9
 801ca38:	d94d      	bls.n	801cad6 <_svfiprintf_r+0x16e>
 801ca3a:	b1b8      	cbz	r0, 801ca6c <_svfiprintf_r+0x104>
 801ca3c:	e00f      	b.n	801ca5e <_svfiprintf_r+0xf6>
 801ca3e:	462f      	mov	r7, r5
 801ca40:	e7b8      	b.n	801c9b4 <_svfiprintf_r+0x4c>
 801ca42:	4a40      	ldr	r2, [pc, #256]	; (801cb44 <_svfiprintf_r+0x1dc>)
 801ca44:	1a80      	subs	r0, r0, r2
 801ca46:	fa0b f000 	lsl.w	r0, fp, r0
 801ca4a:	4318      	orrs	r0, r3
 801ca4c:	9004      	str	r0, [sp, #16]
 801ca4e:	463d      	mov	r5, r7
 801ca50:	e7d3      	b.n	801c9fa <_svfiprintf_r+0x92>
 801ca52:	9a03      	ldr	r2, [sp, #12]
 801ca54:	1d11      	adds	r1, r2, #4
 801ca56:	6812      	ldr	r2, [r2, #0]
 801ca58:	9103      	str	r1, [sp, #12]
 801ca5a:	2a00      	cmp	r2, #0
 801ca5c:	db01      	blt.n	801ca62 <_svfiprintf_r+0xfa>
 801ca5e:	9207      	str	r2, [sp, #28]
 801ca60:	e004      	b.n	801ca6c <_svfiprintf_r+0x104>
 801ca62:	4252      	negs	r2, r2
 801ca64:	f043 0302 	orr.w	r3, r3, #2
 801ca68:	9207      	str	r2, [sp, #28]
 801ca6a:	9304      	str	r3, [sp, #16]
 801ca6c:	783b      	ldrb	r3, [r7, #0]
 801ca6e:	2b2e      	cmp	r3, #46	; 0x2e
 801ca70:	d10c      	bne.n	801ca8c <_svfiprintf_r+0x124>
 801ca72:	787b      	ldrb	r3, [r7, #1]
 801ca74:	2b2a      	cmp	r3, #42	; 0x2a
 801ca76:	d133      	bne.n	801cae0 <_svfiprintf_r+0x178>
 801ca78:	9b03      	ldr	r3, [sp, #12]
 801ca7a:	1d1a      	adds	r2, r3, #4
 801ca7c:	681b      	ldr	r3, [r3, #0]
 801ca7e:	9203      	str	r2, [sp, #12]
 801ca80:	2b00      	cmp	r3, #0
 801ca82:	bfb8      	it	lt
 801ca84:	f04f 33ff 	movlt.w	r3, #4294967295
 801ca88:	3702      	adds	r7, #2
 801ca8a:	9305      	str	r3, [sp, #20]
 801ca8c:	4d2e      	ldr	r5, [pc, #184]	; (801cb48 <_svfiprintf_r+0x1e0>)
 801ca8e:	7839      	ldrb	r1, [r7, #0]
 801ca90:	2203      	movs	r2, #3
 801ca92:	4628      	mov	r0, r5
 801ca94:	f7e3 fbdc 	bl	8000250 <memchr>
 801ca98:	b138      	cbz	r0, 801caaa <_svfiprintf_r+0x142>
 801ca9a:	2340      	movs	r3, #64	; 0x40
 801ca9c:	1b40      	subs	r0, r0, r5
 801ca9e:	fa03 f000 	lsl.w	r0, r3, r0
 801caa2:	9b04      	ldr	r3, [sp, #16]
 801caa4:	4303      	orrs	r3, r0
 801caa6:	3701      	adds	r7, #1
 801caa8:	9304      	str	r3, [sp, #16]
 801caaa:	7839      	ldrb	r1, [r7, #0]
 801caac:	4827      	ldr	r0, [pc, #156]	; (801cb4c <_svfiprintf_r+0x1e4>)
 801caae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cab2:	2206      	movs	r2, #6
 801cab4:	1c7e      	adds	r6, r7, #1
 801cab6:	f7e3 fbcb 	bl	8000250 <memchr>
 801caba:	2800      	cmp	r0, #0
 801cabc:	d038      	beq.n	801cb30 <_svfiprintf_r+0x1c8>
 801cabe:	4b24      	ldr	r3, [pc, #144]	; (801cb50 <_svfiprintf_r+0x1e8>)
 801cac0:	bb13      	cbnz	r3, 801cb08 <_svfiprintf_r+0x1a0>
 801cac2:	9b03      	ldr	r3, [sp, #12]
 801cac4:	3307      	adds	r3, #7
 801cac6:	f023 0307 	bic.w	r3, r3, #7
 801caca:	3308      	adds	r3, #8
 801cacc:	9303      	str	r3, [sp, #12]
 801cace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cad0:	444b      	add	r3, r9
 801cad2:	9309      	str	r3, [sp, #36]	; 0x24
 801cad4:	e76d      	b.n	801c9b2 <_svfiprintf_r+0x4a>
 801cad6:	fb05 3202 	mla	r2, r5, r2, r3
 801cada:	2001      	movs	r0, #1
 801cadc:	460f      	mov	r7, r1
 801cade:	e7a6      	b.n	801ca2e <_svfiprintf_r+0xc6>
 801cae0:	2300      	movs	r3, #0
 801cae2:	3701      	adds	r7, #1
 801cae4:	9305      	str	r3, [sp, #20]
 801cae6:	4619      	mov	r1, r3
 801cae8:	250a      	movs	r5, #10
 801caea:	4638      	mov	r0, r7
 801caec:	f810 2b01 	ldrb.w	r2, [r0], #1
 801caf0:	3a30      	subs	r2, #48	; 0x30
 801caf2:	2a09      	cmp	r2, #9
 801caf4:	d903      	bls.n	801cafe <_svfiprintf_r+0x196>
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	d0c8      	beq.n	801ca8c <_svfiprintf_r+0x124>
 801cafa:	9105      	str	r1, [sp, #20]
 801cafc:	e7c6      	b.n	801ca8c <_svfiprintf_r+0x124>
 801cafe:	fb05 2101 	mla	r1, r5, r1, r2
 801cb02:	2301      	movs	r3, #1
 801cb04:	4607      	mov	r7, r0
 801cb06:	e7f0      	b.n	801caea <_svfiprintf_r+0x182>
 801cb08:	ab03      	add	r3, sp, #12
 801cb0a:	9300      	str	r3, [sp, #0]
 801cb0c:	4622      	mov	r2, r4
 801cb0e:	4b11      	ldr	r3, [pc, #68]	; (801cb54 <_svfiprintf_r+0x1ec>)
 801cb10:	a904      	add	r1, sp, #16
 801cb12:	4640      	mov	r0, r8
 801cb14:	f7fc f948 	bl	8018da8 <_printf_float>
 801cb18:	f1b0 3fff 	cmp.w	r0, #4294967295
 801cb1c:	4681      	mov	r9, r0
 801cb1e:	d1d6      	bne.n	801cace <_svfiprintf_r+0x166>
 801cb20:	89a3      	ldrh	r3, [r4, #12]
 801cb22:	065b      	lsls	r3, r3, #25
 801cb24:	f53f af35 	bmi.w	801c992 <_svfiprintf_r+0x2a>
 801cb28:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cb2a:	b01d      	add	sp, #116	; 0x74
 801cb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb30:	ab03      	add	r3, sp, #12
 801cb32:	9300      	str	r3, [sp, #0]
 801cb34:	4622      	mov	r2, r4
 801cb36:	4b07      	ldr	r3, [pc, #28]	; (801cb54 <_svfiprintf_r+0x1ec>)
 801cb38:	a904      	add	r1, sp, #16
 801cb3a:	4640      	mov	r0, r8
 801cb3c:	f7fc fbd6 	bl	80192ec <_printf_i>
 801cb40:	e7ea      	b.n	801cb18 <_svfiprintf_r+0x1b0>
 801cb42:	bf00      	nop
 801cb44:	08020e5c 	.word	0x08020e5c
 801cb48:	08020e62 	.word	0x08020e62
 801cb4c:	08020e66 	.word	0x08020e66
 801cb50:	08018da9 	.word	0x08018da9
 801cb54:	0801c8b5 	.word	0x0801c8b5

0801cb58 <__sfputc_r>:
 801cb58:	6893      	ldr	r3, [r2, #8]
 801cb5a:	3b01      	subs	r3, #1
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	b410      	push	{r4}
 801cb60:	6093      	str	r3, [r2, #8]
 801cb62:	da08      	bge.n	801cb76 <__sfputc_r+0x1e>
 801cb64:	6994      	ldr	r4, [r2, #24]
 801cb66:	42a3      	cmp	r3, r4
 801cb68:	db01      	blt.n	801cb6e <__sfputc_r+0x16>
 801cb6a:	290a      	cmp	r1, #10
 801cb6c:	d103      	bne.n	801cb76 <__sfputc_r+0x1e>
 801cb6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cb72:	f7fd be27 	b.w	801a7c4 <__swbuf_r>
 801cb76:	6813      	ldr	r3, [r2, #0]
 801cb78:	1c58      	adds	r0, r3, #1
 801cb7a:	6010      	str	r0, [r2, #0]
 801cb7c:	7019      	strb	r1, [r3, #0]
 801cb7e:	4608      	mov	r0, r1
 801cb80:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cb84:	4770      	bx	lr

0801cb86 <__sfputs_r>:
 801cb86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb88:	4606      	mov	r6, r0
 801cb8a:	460f      	mov	r7, r1
 801cb8c:	4614      	mov	r4, r2
 801cb8e:	18d5      	adds	r5, r2, r3
 801cb90:	42ac      	cmp	r4, r5
 801cb92:	d101      	bne.n	801cb98 <__sfputs_r+0x12>
 801cb94:	2000      	movs	r0, #0
 801cb96:	e007      	b.n	801cba8 <__sfputs_r+0x22>
 801cb98:	463a      	mov	r2, r7
 801cb9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cb9e:	4630      	mov	r0, r6
 801cba0:	f7ff ffda 	bl	801cb58 <__sfputc_r>
 801cba4:	1c43      	adds	r3, r0, #1
 801cba6:	d1f3      	bne.n	801cb90 <__sfputs_r+0xa>
 801cba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cbac <_vfiprintf_r>:
 801cbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbb0:	460c      	mov	r4, r1
 801cbb2:	b09d      	sub	sp, #116	; 0x74
 801cbb4:	4617      	mov	r7, r2
 801cbb6:	461d      	mov	r5, r3
 801cbb8:	4606      	mov	r6, r0
 801cbba:	b118      	cbz	r0, 801cbc4 <_vfiprintf_r+0x18>
 801cbbc:	6983      	ldr	r3, [r0, #24]
 801cbbe:	b90b      	cbnz	r3, 801cbc4 <_vfiprintf_r+0x18>
 801cbc0:	f7fe fd96 	bl	801b6f0 <__sinit>
 801cbc4:	4b7c      	ldr	r3, [pc, #496]	; (801cdb8 <_vfiprintf_r+0x20c>)
 801cbc6:	429c      	cmp	r4, r3
 801cbc8:	d158      	bne.n	801cc7c <_vfiprintf_r+0xd0>
 801cbca:	6874      	ldr	r4, [r6, #4]
 801cbcc:	89a3      	ldrh	r3, [r4, #12]
 801cbce:	0718      	lsls	r0, r3, #28
 801cbd0:	d55e      	bpl.n	801cc90 <_vfiprintf_r+0xe4>
 801cbd2:	6923      	ldr	r3, [r4, #16]
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	d05b      	beq.n	801cc90 <_vfiprintf_r+0xe4>
 801cbd8:	2300      	movs	r3, #0
 801cbda:	9309      	str	r3, [sp, #36]	; 0x24
 801cbdc:	2320      	movs	r3, #32
 801cbde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cbe2:	2330      	movs	r3, #48	; 0x30
 801cbe4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cbe8:	9503      	str	r5, [sp, #12]
 801cbea:	f04f 0b01 	mov.w	fp, #1
 801cbee:	46b8      	mov	r8, r7
 801cbf0:	4645      	mov	r5, r8
 801cbf2:	f815 3b01 	ldrb.w	r3, [r5], #1
 801cbf6:	b10b      	cbz	r3, 801cbfc <_vfiprintf_r+0x50>
 801cbf8:	2b25      	cmp	r3, #37	; 0x25
 801cbfa:	d154      	bne.n	801cca6 <_vfiprintf_r+0xfa>
 801cbfc:	ebb8 0a07 	subs.w	sl, r8, r7
 801cc00:	d00b      	beq.n	801cc1a <_vfiprintf_r+0x6e>
 801cc02:	4653      	mov	r3, sl
 801cc04:	463a      	mov	r2, r7
 801cc06:	4621      	mov	r1, r4
 801cc08:	4630      	mov	r0, r6
 801cc0a:	f7ff ffbc 	bl	801cb86 <__sfputs_r>
 801cc0e:	3001      	adds	r0, #1
 801cc10:	f000 80c2 	beq.w	801cd98 <_vfiprintf_r+0x1ec>
 801cc14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc16:	4453      	add	r3, sl
 801cc18:	9309      	str	r3, [sp, #36]	; 0x24
 801cc1a:	f898 3000 	ldrb.w	r3, [r8]
 801cc1e:	2b00      	cmp	r3, #0
 801cc20:	f000 80ba 	beq.w	801cd98 <_vfiprintf_r+0x1ec>
 801cc24:	2300      	movs	r3, #0
 801cc26:	f04f 32ff 	mov.w	r2, #4294967295
 801cc2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cc2e:	9304      	str	r3, [sp, #16]
 801cc30:	9307      	str	r3, [sp, #28]
 801cc32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cc36:	931a      	str	r3, [sp, #104]	; 0x68
 801cc38:	46a8      	mov	r8, r5
 801cc3a:	2205      	movs	r2, #5
 801cc3c:	f818 1b01 	ldrb.w	r1, [r8], #1
 801cc40:	485e      	ldr	r0, [pc, #376]	; (801cdbc <_vfiprintf_r+0x210>)
 801cc42:	f7e3 fb05 	bl	8000250 <memchr>
 801cc46:	9b04      	ldr	r3, [sp, #16]
 801cc48:	bb78      	cbnz	r0, 801ccaa <_vfiprintf_r+0xfe>
 801cc4a:	06d9      	lsls	r1, r3, #27
 801cc4c:	bf44      	itt	mi
 801cc4e:	2220      	movmi	r2, #32
 801cc50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801cc54:	071a      	lsls	r2, r3, #28
 801cc56:	bf44      	itt	mi
 801cc58:	222b      	movmi	r2, #43	; 0x2b
 801cc5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801cc5e:	782a      	ldrb	r2, [r5, #0]
 801cc60:	2a2a      	cmp	r2, #42	; 0x2a
 801cc62:	d02a      	beq.n	801ccba <_vfiprintf_r+0x10e>
 801cc64:	9a07      	ldr	r2, [sp, #28]
 801cc66:	46a8      	mov	r8, r5
 801cc68:	2000      	movs	r0, #0
 801cc6a:	250a      	movs	r5, #10
 801cc6c:	4641      	mov	r1, r8
 801cc6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cc72:	3b30      	subs	r3, #48	; 0x30
 801cc74:	2b09      	cmp	r3, #9
 801cc76:	d969      	bls.n	801cd4c <_vfiprintf_r+0x1a0>
 801cc78:	b360      	cbz	r0, 801ccd4 <_vfiprintf_r+0x128>
 801cc7a:	e024      	b.n	801ccc6 <_vfiprintf_r+0x11a>
 801cc7c:	4b50      	ldr	r3, [pc, #320]	; (801cdc0 <_vfiprintf_r+0x214>)
 801cc7e:	429c      	cmp	r4, r3
 801cc80:	d101      	bne.n	801cc86 <_vfiprintf_r+0xda>
 801cc82:	68b4      	ldr	r4, [r6, #8]
 801cc84:	e7a2      	b.n	801cbcc <_vfiprintf_r+0x20>
 801cc86:	4b4f      	ldr	r3, [pc, #316]	; (801cdc4 <_vfiprintf_r+0x218>)
 801cc88:	429c      	cmp	r4, r3
 801cc8a:	bf08      	it	eq
 801cc8c:	68f4      	ldreq	r4, [r6, #12]
 801cc8e:	e79d      	b.n	801cbcc <_vfiprintf_r+0x20>
 801cc90:	4621      	mov	r1, r4
 801cc92:	4630      	mov	r0, r6
 801cc94:	f7fd fdf6 	bl	801a884 <__swsetup_r>
 801cc98:	2800      	cmp	r0, #0
 801cc9a:	d09d      	beq.n	801cbd8 <_vfiprintf_r+0x2c>
 801cc9c:	f04f 30ff 	mov.w	r0, #4294967295
 801cca0:	b01d      	add	sp, #116	; 0x74
 801cca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cca6:	46a8      	mov	r8, r5
 801cca8:	e7a2      	b.n	801cbf0 <_vfiprintf_r+0x44>
 801ccaa:	4a44      	ldr	r2, [pc, #272]	; (801cdbc <_vfiprintf_r+0x210>)
 801ccac:	1a80      	subs	r0, r0, r2
 801ccae:	fa0b f000 	lsl.w	r0, fp, r0
 801ccb2:	4318      	orrs	r0, r3
 801ccb4:	9004      	str	r0, [sp, #16]
 801ccb6:	4645      	mov	r5, r8
 801ccb8:	e7be      	b.n	801cc38 <_vfiprintf_r+0x8c>
 801ccba:	9a03      	ldr	r2, [sp, #12]
 801ccbc:	1d11      	adds	r1, r2, #4
 801ccbe:	6812      	ldr	r2, [r2, #0]
 801ccc0:	9103      	str	r1, [sp, #12]
 801ccc2:	2a00      	cmp	r2, #0
 801ccc4:	db01      	blt.n	801ccca <_vfiprintf_r+0x11e>
 801ccc6:	9207      	str	r2, [sp, #28]
 801ccc8:	e004      	b.n	801ccd4 <_vfiprintf_r+0x128>
 801ccca:	4252      	negs	r2, r2
 801cccc:	f043 0302 	orr.w	r3, r3, #2
 801ccd0:	9207      	str	r2, [sp, #28]
 801ccd2:	9304      	str	r3, [sp, #16]
 801ccd4:	f898 3000 	ldrb.w	r3, [r8]
 801ccd8:	2b2e      	cmp	r3, #46	; 0x2e
 801ccda:	d10e      	bne.n	801ccfa <_vfiprintf_r+0x14e>
 801ccdc:	f898 3001 	ldrb.w	r3, [r8, #1]
 801cce0:	2b2a      	cmp	r3, #42	; 0x2a
 801cce2:	d138      	bne.n	801cd56 <_vfiprintf_r+0x1aa>
 801cce4:	9b03      	ldr	r3, [sp, #12]
 801cce6:	1d1a      	adds	r2, r3, #4
 801cce8:	681b      	ldr	r3, [r3, #0]
 801ccea:	9203      	str	r2, [sp, #12]
 801ccec:	2b00      	cmp	r3, #0
 801ccee:	bfb8      	it	lt
 801ccf0:	f04f 33ff 	movlt.w	r3, #4294967295
 801ccf4:	f108 0802 	add.w	r8, r8, #2
 801ccf8:	9305      	str	r3, [sp, #20]
 801ccfa:	4d33      	ldr	r5, [pc, #204]	; (801cdc8 <_vfiprintf_r+0x21c>)
 801ccfc:	f898 1000 	ldrb.w	r1, [r8]
 801cd00:	2203      	movs	r2, #3
 801cd02:	4628      	mov	r0, r5
 801cd04:	f7e3 faa4 	bl	8000250 <memchr>
 801cd08:	b140      	cbz	r0, 801cd1c <_vfiprintf_r+0x170>
 801cd0a:	2340      	movs	r3, #64	; 0x40
 801cd0c:	1b40      	subs	r0, r0, r5
 801cd0e:	fa03 f000 	lsl.w	r0, r3, r0
 801cd12:	9b04      	ldr	r3, [sp, #16]
 801cd14:	4303      	orrs	r3, r0
 801cd16:	f108 0801 	add.w	r8, r8, #1
 801cd1a:	9304      	str	r3, [sp, #16]
 801cd1c:	f898 1000 	ldrb.w	r1, [r8]
 801cd20:	482a      	ldr	r0, [pc, #168]	; (801cdcc <_vfiprintf_r+0x220>)
 801cd22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cd26:	2206      	movs	r2, #6
 801cd28:	f108 0701 	add.w	r7, r8, #1
 801cd2c:	f7e3 fa90 	bl	8000250 <memchr>
 801cd30:	2800      	cmp	r0, #0
 801cd32:	d037      	beq.n	801cda4 <_vfiprintf_r+0x1f8>
 801cd34:	4b26      	ldr	r3, [pc, #152]	; (801cdd0 <_vfiprintf_r+0x224>)
 801cd36:	bb1b      	cbnz	r3, 801cd80 <_vfiprintf_r+0x1d4>
 801cd38:	9b03      	ldr	r3, [sp, #12]
 801cd3a:	3307      	adds	r3, #7
 801cd3c:	f023 0307 	bic.w	r3, r3, #7
 801cd40:	3308      	adds	r3, #8
 801cd42:	9303      	str	r3, [sp, #12]
 801cd44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd46:	444b      	add	r3, r9
 801cd48:	9309      	str	r3, [sp, #36]	; 0x24
 801cd4a:	e750      	b.n	801cbee <_vfiprintf_r+0x42>
 801cd4c:	fb05 3202 	mla	r2, r5, r2, r3
 801cd50:	2001      	movs	r0, #1
 801cd52:	4688      	mov	r8, r1
 801cd54:	e78a      	b.n	801cc6c <_vfiprintf_r+0xc0>
 801cd56:	2300      	movs	r3, #0
 801cd58:	f108 0801 	add.w	r8, r8, #1
 801cd5c:	9305      	str	r3, [sp, #20]
 801cd5e:	4619      	mov	r1, r3
 801cd60:	250a      	movs	r5, #10
 801cd62:	4640      	mov	r0, r8
 801cd64:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cd68:	3a30      	subs	r2, #48	; 0x30
 801cd6a:	2a09      	cmp	r2, #9
 801cd6c:	d903      	bls.n	801cd76 <_vfiprintf_r+0x1ca>
 801cd6e:	2b00      	cmp	r3, #0
 801cd70:	d0c3      	beq.n	801ccfa <_vfiprintf_r+0x14e>
 801cd72:	9105      	str	r1, [sp, #20]
 801cd74:	e7c1      	b.n	801ccfa <_vfiprintf_r+0x14e>
 801cd76:	fb05 2101 	mla	r1, r5, r1, r2
 801cd7a:	2301      	movs	r3, #1
 801cd7c:	4680      	mov	r8, r0
 801cd7e:	e7f0      	b.n	801cd62 <_vfiprintf_r+0x1b6>
 801cd80:	ab03      	add	r3, sp, #12
 801cd82:	9300      	str	r3, [sp, #0]
 801cd84:	4622      	mov	r2, r4
 801cd86:	4b13      	ldr	r3, [pc, #76]	; (801cdd4 <_vfiprintf_r+0x228>)
 801cd88:	a904      	add	r1, sp, #16
 801cd8a:	4630      	mov	r0, r6
 801cd8c:	f7fc f80c 	bl	8018da8 <_printf_float>
 801cd90:	f1b0 3fff 	cmp.w	r0, #4294967295
 801cd94:	4681      	mov	r9, r0
 801cd96:	d1d5      	bne.n	801cd44 <_vfiprintf_r+0x198>
 801cd98:	89a3      	ldrh	r3, [r4, #12]
 801cd9a:	065b      	lsls	r3, r3, #25
 801cd9c:	f53f af7e 	bmi.w	801cc9c <_vfiprintf_r+0xf0>
 801cda0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cda2:	e77d      	b.n	801cca0 <_vfiprintf_r+0xf4>
 801cda4:	ab03      	add	r3, sp, #12
 801cda6:	9300      	str	r3, [sp, #0]
 801cda8:	4622      	mov	r2, r4
 801cdaa:	4b0a      	ldr	r3, [pc, #40]	; (801cdd4 <_vfiprintf_r+0x228>)
 801cdac:	a904      	add	r1, sp, #16
 801cdae:	4630      	mov	r0, r6
 801cdb0:	f7fc fa9c 	bl	80192ec <_printf_i>
 801cdb4:	e7ec      	b.n	801cd90 <_vfiprintf_r+0x1e4>
 801cdb6:	bf00      	nop
 801cdb8:	08020d20 	.word	0x08020d20
 801cdbc:	08020e5c 	.word	0x08020e5c
 801cdc0:	08020d40 	.word	0x08020d40
 801cdc4:	08020d00 	.word	0x08020d00
 801cdc8:	08020e62 	.word	0x08020e62
 801cdcc:	08020e66 	.word	0x08020e66
 801cdd0:	08018da9 	.word	0x08018da9
 801cdd4:	0801cb87 	.word	0x0801cb87

0801cdd8 <_sbrk_r>:
 801cdd8:	b538      	push	{r3, r4, r5, lr}
 801cdda:	4c06      	ldr	r4, [pc, #24]	; (801cdf4 <_sbrk_r+0x1c>)
 801cddc:	2300      	movs	r3, #0
 801cdde:	4605      	mov	r5, r0
 801cde0:	4608      	mov	r0, r1
 801cde2:	6023      	str	r3, [r4, #0]
 801cde4:	f7e4 fe44 	bl	8001a70 <_sbrk>
 801cde8:	1c43      	adds	r3, r0, #1
 801cdea:	d102      	bne.n	801cdf2 <_sbrk_r+0x1a>
 801cdec:	6823      	ldr	r3, [r4, #0]
 801cdee:	b103      	cbz	r3, 801cdf2 <_sbrk_r+0x1a>
 801cdf0:	602b      	str	r3, [r5, #0]
 801cdf2:	bd38      	pop	{r3, r4, r5, pc}
 801cdf4:	2000fd10 	.word	0x2000fd10

0801cdf8 <__sread>:
 801cdf8:	b510      	push	{r4, lr}
 801cdfa:	460c      	mov	r4, r1
 801cdfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce00:	f000 f8bc 	bl	801cf7c <_read_r>
 801ce04:	2800      	cmp	r0, #0
 801ce06:	bfab      	itete	ge
 801ce08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ce0a:	89a3      	ldrhlt	r3, [r4, #12]
 801ce0c:	181b      	addge	r3, r3, r0
 801ce0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ce12:	bfac      	ite	ge
 801ce14:	6563      	strge	r3, [r4, #84]	; 0x54
 801ce16:	81a3      	strhlt	r3, [r4, #12]
 801ce18:	bd10      	pop	{r4, pc}

0801ce1a <__swrite>:
 801ce1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce1e:	461f      	mov	r7, r3
 801ce20:	898b      	ldrh	r3, [r1, #12]
 801ce22:	05db      	lsls	r3, r3, #23
 801ce24:	4605      	mov	r5, r0
 801ce26:	460c      	mov	r4, r1
 801ce28:	4616      	mov	r6, r2
 801ce2a:	d505      	bpl.n	801ce38 <__swrite+0x1e>
 801ce2c:	2302      	movs	r3, #2
 801ce2e:	2200      	movs	r2, #0
 801ce30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce34:	f000 f868 	bl	801cf08 <_lseek_r>
 801ce38:	89a3      	ldrh	r3, [r4, #12]
 801ce3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ce3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ce42:	81a3      	strh	r3, [r4, #12]
 801ce44:	4632      	mov	r2, r6
 801ce46:	463b      	mov	r3, r7
 801ce48:	4628      	mov	r0, r5
 801ce4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ce4e:	f000 b817 	b.w	801ce80 <_write_r>

0801ce52 <__sseek>:
 801ce52:	b510      	push	{r4, lr}
 801ce54:	460c      	mov	r4, r1
 801ce56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce5a:	f000 f855 	bl	801cf08 <_lseek_r>
 801ce5e:	1c43      	adds	r3, r0, #1
 801ce60:	89a3      	ldrh	r3, [r4, #12]
 801ce62:	bf15      	itete	ne
 801ce64:	6560      	strne	r0, [r4, #84]	; 0x54
 801ce66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ce6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ce6e:	81a3      	strheq	r3, [r4, #12]
 801ce70:	bf18      	it	ne
 801ce72:	81a3      	strhne	r3, [r4, #12]
 801ce74:	bd10      	pop	{r4, pc}

0801ce76 <__sclose>:
 801ce76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce7a:	f000 b813 	b.w	801cea4 <_close_r>
	...

0801ce80 <_write_r>:
 801ce80:	b538      	push	{r3, r4, r5, lr}
 801ce82:	4c07      	ldr	r4, [pc, #28]	; (801cea0 <_write_r+0x20>)
 801ce84:	4605      	mov	r5, r0
 801ce86:	4608      	mov	r0, r1
 801ce88:	4611      	mov	r1, r2
 801ce8a:	2200      	movs	r2, #0
 801ce8c:	6022      	str	r2, [r4, #0]
 801ce8e:	461a      	mov	r2, r3
 801ce90:	f7e4 fd9d 	bl	80019ce <_write>
 801ce94:	1c43      	adds	r3, r0, #1
 801ce96:	d102      	bne.n	801ce9e <_write_r+0x1e>
 801ce98:	6823      	ldr	r3, [r4, #0]
 801ce9a:	b103      	cbz	r3, 801ce9e <_write_r+0x1e>
 801ce9c:	602b      	str	r3, [r5, #0]
 801ce9e:	bd38      	pop	{r3, r4, r5, pc}
 801cea0:	2000fd10 	.word	0x2000fd10

0801cea4 <_close_r>:
 801cea4:	b538      	push	{r3, r4, r5, lr}
 801cea6:	4c06      	ldr	r4, [pc, #24]	; (801cec0 <_close_r+0x1c>)
 801cea8:	2300      	movs	r3, #0
 801ceaa:	4605      	mov	r5, r0
 801ceac:	4608      	mov	r0, r1
 801ceae:	6023      	str	r3, [r4, #0]
 801ceb0:	f7e4 fda9 	bl	8001a06 <_close>
 801ceb4:	1c43      	adds	r3, r0, #1
 801ceb6:	d102      	bne.n	801cebe <_close_r+0x1a>
 801ceb8:	6823      	ldr	r3, [r4, #0]
 801ceba:	b103      	cbz	r3, 801cebe <_close_r+0x1a>
 801cebc:	602b      	str	r3, [r5, #0]
 801cebe:	bd38      	pop	{r3, r4, r5, pc}
 801cec0:	2000fd10 	.word	0x2000fd10

0801cec4 <_fstat_r>:
 801cec4:	b538      	push	{r3, r4, r5, lr}
 801cec6:	4c07      	ldr	r4, [pc, #28]	; (801cee4 <_fstat_r+0x20>)
 801cec8:	2300      	movs	r3, #0
 801ceca:	4605      	mov	r5, r0
 801cecc:	4608      	mov	r0, r1
 801cece:	4611      	mov	r1, r2
 801ced0:	6023      	str	r3, [r4, #0]
 801ced2:	f7e4 fda4 	bl	8001a1e <_fstat>
 801ced6:	1c43      	adds	r3, r0, #1
 801ced8:	d102      	bne.n	801cee0 <_fstat_r+0x1c>
 801ceda:	6823      	ldr	r3, [r4, #0]
 801cedc:	b103      	cbz	r3, 801cee0 <_fstat_r+0x1c>
 801cede:	602b      	str	r3, [r5, #0]
 801cee0:	bd38      	pop	{r3, r4, r5, pc}
 801cee2:	bf00      	nop
 801cee4:	2000fd10 	.word	0x2000fd10

0801cee8 <_isatty_r>:
 801cee8:	b538      	push	{r3, r4, r5, lr}
 801ceea:	4c06      	ldr	r4, [pc, #24]	; (801cf04 <_isatty_r+0x1c>)
 801ceec:	2300      	movs	r3, #0
 801ceee:	4605      	mov	r5, r0
 801cef0:	4608      	mov	r0, r1
 801cef2:	6023      	str	r3, [r4, #0]
 801cef4:	f7e4 fda3 	bl	8001a3e <_isatty>
 801cef8:	1c43      	adds	r3, r0, #1
 801cefa:	d102      	bne.n	801cf02 <_isatty_r+0x1a>
 801cefc:	6823      	ldr	r3, [r4, #0]
 801cefe:	b103      	cbz	r3, 801cf02 <_isatty_r+0x1a>
 801cf00:	602b      	str	r3, [r5, #0]
 801cf02:	bd38      	pop	{r3, r4, r5, pc}
 801cf04:	2000fd10 	.word	0x2000fd10

0801cf08 <_lseek_r>:
 801cf08:	b538      	push	{r3, r4, r5, lr}
 801cf0a:	4c07      	ldr	r4, [pc, #28]	; (801cf28 <_lseek_r+0x20>)
 801cf0c:	4605      	mov	r5, r0
 801cf0e:	4608      	mov	r0, r1
 801cf10:	4611      	mov	r1, r2
 801cf12:	2200      	movs	r2, #0
 801cf14:	6022      	str	r2, [r4, #0]
 801cf16:	461a      	mov	r2, r3
 801cf18:	f7e4 fd9c 	bl	8001a54 <_lseek>
 801cf1c:	1c43      	adds	r3, r0, #1
 801cf1e:	d102      	bne.n	801cf26 <_lseek_r+0x1e>
 801cf20:	6823      	ldr	r3, [r4, #0]
 801cf22:	b103      	cbz	r3, 801cf26 <_lseek_r+0x1e>
 801cf24:	602b      	str	r3, [r5, #0]
 801cf26:	bd38      	pop	{r3, r4, r5, pc}
 801cf28:	2000fd10 	.word	0x2000fd10

0801cf2c <__malloc_lock>:
 801cf2c:	4770      	bx	lr

0801cf2e <__malloc_unlock>:
 801cf2e:	4770      	bx	lr

0801cf30 <_realloc_r>:
 801cf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf32:	4607      	mov	r7, r0
 801cf34:	4614      	mov	r4, r2
 801cf36:	460e      	mov	r6, r1
 801cf38:	b921      	cbnz	r1, 801cf44 <_realloc_r+0x14>
 801cf3a:	4611      	mov	r1, r2
 801cf3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801cf40:	f7ff bc5e 	b.w	801c800 <_malloc_r>
 801cf44:	b922      	cbnz	r2, 801cf50 <_realloc_r+0x20>
 801cf46:	f7ff fc0d 	bl	801c764 <_free_r>
 801cf4a:	4625      	mov	r5, r4
 801cf4c:	4628      	mov	r0, r5
 801cf4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf50:	f000 f826 	bl	801cfa0 <_malloc_usable_size_r>
 801cf54:	42a0      	cmp	r0, r4
 801cf56:	d20f      	bcs.n	801cf78 <_realloc_r+0x48>
 801cf58:	4621      	mov	r1, r4
 801cf5a:	4638      	mov	r0, r7
 801cf5c:	f7ff fc50 	bl	801c800 <_malloc_r>
 801cf60:	4605      	mov	r5, r0
 801cf62:	2800      	cmp	r0, #0
 801cf64:	d0f2      	beq.n	801cf4c <_realloc_r+0x1c>
 801cf66:	4631      	mov	r1, r6
 801cf68:	4622      	mov	r2, r4
 801cf6a:	f7fb fe69 	bl	8018c40 <memcpy>
 801cf6e:	4631      	mov	r1, r6
 801cf70:	4638      	mov	r0, r7
 801cf72:	f7ff fbf7 	bl	801c764 <_free_r>
 801cf76:	e7e9      	b.n	801cf4c <_realloc_r+0x1c>
 801cf78:	4635      	mov	r5, r6
 801cf7a:	e7e7      	b.n	801cf4c <_realloc_r+0x1c>

0801cf7c <_read_r>:
 801cf7c:	b538      	push	{r3, r4, r5, lr}
 801cf7e:	4c07      	ldr	r4, [pc, #28]	; (801cf9c <_read_r+0x20>)
 801cf80:	4605      	mov	r5, r0
 801cf82:	4608      	mov	r0, r1
 801cf84:	4611      	mov	r1, r2
 801cf86:	2200      	movs	r2, #0
 801cf88:	6022      	str	r2, [r4, #0]
 801cf8a:	461a      	mov	r2, r3
 801cf8c:	f7e4 fd02 	bl	8001994 <_read>
 801cf90:	1c43      	adds	r3, r0, #1
 801cf92:	d102      	bne.n	801cf9a <_read_r+0x1e>
 801cf94:	6823      	ldr	r3, [r4, #0]
 801cf96:	b103      	cbz	r3, 801cf9a <_read_r+0x1e>
 801cf98:	602b      	str	r3, [r5, #0]
 801cf9a:	bd38      	pop	{r3, r4, r5, pc}
 801cf9c:	2000fd10 	.word	0x2000fd10

0801cfa0 <_malloc_usable_size_r>:
 801cfa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cfa4:	1f18      	subs	r0, r3, #4
 801cfa6:	2b00      	cmp	r3, #0
 801cfa8:	bfbc      	itt	lt
 801cfaa:	580b      	ldrlt	r3, [r1, r0]
 801cfac:	18c0      	addlt	r0, r0, r3
 801cfae:	4770      	bx	lr

0801cfb0 <_init>:
 801cfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cfb2:	bf00      	nop
 801cfb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cfb6:	bc08      	pop	{r3}
 801cfb8:	469e      	mov	lr, r3
 801cfba:	4770      	bx	lr

0801cfbc <_fini>:
 801cfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cfbe:	bf00      	nop
 801cfc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cfc2:	bc08      	pop	{r3}
 801cfc4:	469e      	mov	lr, r3
 801cfc6:	4770      	bx	lr
