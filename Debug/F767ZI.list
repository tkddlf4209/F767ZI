
F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001eda8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005ad0  0801efa8  0801efa8  0002efa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024a78  08024a78  000401f4  2**0
                  CONTENTS
  4 .ARM          00000008  08024a78  08024a78  00034a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024a80  08024a80  000401f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024a80  08024a80  00034a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024a84  08024a84  00034a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08024a88  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007acc  200001f4  08024c7c  000401f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007cc0  08024c7c  00047cc0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000401f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00057ef4  00000000  00000000  00040222  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008b1b  00000000  00000000  00098116  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002cd0  00000000  00000000  000a0c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002ac8  00000000  00000000  000a3908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003b474  00000000  00000000  000a63d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000322ea  00000000  00000000  000e1844  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012bffd  00000000  00000000  00113b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0023fb2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cd18  00000000  00000000  0023fba8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f4 	.word	0x200001f4
 800021c:	00000000 	.word	0x00000000
 8000220:	0801ef90 	.word	0x0801ef90

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f8 	.word	0x200001f8
 800023c:	0801ef90 	.word	0x0801ef90

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <bma4_init>:
 *  Call this API before using all other APIs.
 *  This API reads the chip-id of the sensor which is the first step to
 *  verify the sensor and also it configures the read mechanism of SPI and
 *  I2C interface.
 */
int8_t bma4_init(struct bma4_dev *dev) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t data = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73bb      	strb	r3, [r7, #14]
	uint8_t dummy_read = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	737b      	strb	r3, [r7, #13]

	/* NULL pointer check */
	rslt = null_pointer_check(dev);
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f000 ff01 	bl	8001408 <null_pointer_check>
 8000606:	4603      	mov	r3, r0
 8000608:	73fb      	strb	r3, [r7, #15]

	if (rslt == BMA4_OK) {
 800060a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d127      	bne.n	8000662 <bma4_init+0x72>
		if (dev->intf == BMA4_SPI_INTF) {
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	7a1b      	ldrb	r3, [r3, #8]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d10c      	bne.n	8000634 <bma4_init+0x44>
			dev->dummy_byte = 1;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2201      	movs	r2, #1
 800061e:	72da      	strb	r2, [r3, #11]
			rslt = bma4_read_regs(BMA4_CHIP_ID_ADDR, &dummy_read, 1, dev);
 8000620:	f107 010d 	add.w	r1, r7, #13
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2201      	movs	r2, #1
 8000628:	2000      	movs	r0, #0
 800062a:	f000 faa4 	bl	8000b76 <bma4_read_regs>
 800062e:	4603      	mov	r3, r0
 8000630:	73fb      	strb	r3, [r7, #15]
 8000632:	e002      	b.n	800063a <bma4_init+0x4a>
		} else {
			dev->dummy_byte = 0;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2200      	movs	r2, #0
 8000638:	72da      	strb	r2, [r3, #11]
		}

		if (rslt == BMA4_OK) {
 800063a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d10f      	bne.n	8000662 <bma4_init+0x72>
			rslt = bma4_read_regs(BMA4_CHIP_ID_ADDR, &data, 1, dev);
 8000642:	f107 010e 	add.w	r1, r7, #14
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2201      	movs	r2, #1
 800064a:	2000      	movs	r0, #0
 800064c:	f000 fa93 	bl	8000b76 <bma4_read_regs>
 8000650:	4603      	mov	r3, r0
 8000652:	73fb      	strb	r3, [r7, #15]
			if (rslt == BMA4_OK) {
 8000654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d102      	bne.n	8000662 <bma4_init+0x72>
				/* Assign Chip Id */
				dev->chip_id = data;
 800065c:	7bba      	ldrb	r2, [r7, #14]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	return rslt;
 8000662:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <bma4_write_config_file>:

/*!
 *  @brief This API is used to write the binary configuration in the sensor
 */
int8_t bma4_write_config_file(struct bma4_dev *dev) {
 800066e:	b580      	push	{r7, lr}
 8000670:	b084      	sub	sp, #16
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Config loading disable*/
	uint8_t config_load = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	72fb      	strb	r3, [r7, #11]
	uint16_t index = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	81bb      	strh	r3, [r7, #12]
	uint8_t config_stream_status = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	72bb      	strb	r3, [r7, #10]

	/* Disable advanced power save */
	rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
 8000682:	6879      	ldr	r1, [r7, #4]
 8000684:	2000      	movs	r0, #0
 8000686:	f000 fd16 	bl	80010b6 <bma4_set_advance_power_save>
 800068a:	4603      	mov	r3, r0
 800068c:	73fb      	strb	r3, [r7, #15]

	/* Wait for sensor time synchronization. Refer the data-sheet for
	 * more information
	 */
	dev->delay_us(450, dev->intf_ptr);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	6852      	ldr	r2, [r2, #4]
 8000696:	4611      	mov	r1, r2
 8000698:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 800069c:	4798      	blx	r3
	if (rslt == BMA4_OK) {
 800069e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d161      	bne.n	800076a <bma4_write_config_file+0xfc>
		/* Disable config loading*/
		rslt = bma4_write_regs(BMA4_INIT_CTRL_ADDR, &config_load, 1, dev);
 80006a6:	f107 010b 	add.w	r1, r7, #11
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2201      	movs	r2, #1
 80006ae:	2059      	movs	r0, #89	; 0x59
 80006b0:	f000 f861 	bl	8000776 <bma4_write_regs>
 80006b4:	4603      	mov	r3, r0
 80006b6:	73fb      	strb	r3, [r7, #15]

		if (rslt == BMA4_OK) {
 80006b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d154      	bne.n	800076a <bma4_write_config_file+0xfc>
			/* Write the config stream */
			//printf("TEST devconfig size %d read_write_len %d \r\n", dev->config_size, dev->read_write_len);
			for (index = 0; index < dev->config_size;
 80006c0:	2300      	movs	r3, #0
 80006c2:	81bb      	strh	r3, [r7, #12]
 80006c4:	e00f      	b.n	80006e6 <bma4_write_config_file+0x78>
					index += dev->read_write_len) {
				rslt = stream_transfer_write((dev->config_file_ptr + index),
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	691a      	ldr	r2, [r3, #16]
 80006ca:	89bb      	ldrh	r3, [r7, #12]
 80006cc:	4413      	add	r3, r2
 80006ce:	89b9      	ldrh	r1, [r7, #12]
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 fe47 	bl	8001366 <stream_transfer_write>
 80006d8:	4603      	mov	r3, r0
 80006da:	73fb      	strb	r3, [r7, #15]
					index += dev->read_write_len) {
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	8a9a      	ldrh	r2, [r3, #20]
 80006e0:	89bb      	ldrh	r3, [r7, #12]
 80006e2:	4413      	add	r3, r2
 80006e4:	81bb      	strh	r3, [r7, #12]
			for (index = 0; index < dev->config_size;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80006ea:	89ba      	ldrh	r2, [r7, #12]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d3ea      	bcc.n	80006c6 <bma4_write_config_file+0x58>
						index, dev);
			}

			if (rslt == BMA4_OK) {
 80006f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d138      	bne.n	800076a <bma4_write_config_file+0xfc>
				/* Enable config loading and FIFO mode */
				config_load = 0x01;
 80006f8:	2301      	movs	r3, #1
 80006fa:	72fb      	strb	r3, [r7, #11]
				rslt = bma4_write_regs(BMA4_INIT_CTRL_ADDR, &config_load, 1,
 80006fc:	f107 010b 	add.w	r1, r7, #11
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2201      	movs	r2, #1
 8000704:	2059      	movs	r0, #89	; 0x59
 8000706:	f000 f836 	bl	8000776 <bma4_write_regs>
 800070a:	4603      	mov	r3, r0
 800070c:	73fb      	strb	r3, [r7, #15]
						dev);

				if (rslt == BMA4_OK) {
 800070e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d129      	bne.n	800076a <bma4_write_config_file+0xfc>
					/* Wait till ASIC is initialized. Refer the data-sheet for
					 * more information
					 */
					//dev->delay_us(BMA4_MS_TO_US(150), dev->intf_ptr);
					osDelay(140);
 8000716:	208c      	movs	r0, #140	; 0x8c
 8000718:	f009 f936 	bl	8009988 <osDelay>
					/* Read the status of config stream operation */
					rslt = bma4_read_regs(BMA4_INTERNAL_STAT,
 800071c:	f107 010a 	add.w	r1, r7, #10
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2201      	movs	r2, #1
 8000724:	202a      	movs	r0, #42	; 0x2a
 8000726:	f000 fa26 	bl	8000b76 <bma4_read_regs>
 800072a:	4603      	mov	r3, r0
 800072c:	73fb      	strb	r3, [r7, #15]
							&config_stream_status, 1, dev);
					config_stream_status = config_stream_status
							& BMA4_CONFIG_STREAM_MESSAGE_MSK;
 800072e:	7abb      	ldrb	r3, [r7, #10]
 8000730:	f003 030f 	and.w	r3, r3, #15
 8000734:	b2db      	uxtb	r3, r3
					config_stream_status = config_stream_status
 8000736:	72bb      	strb	r3, [r7, #10]

					if (rslt == BMA4_OK) {
 8000738:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d114      	bne.n	800076a <bma4_write_config_file+0xfc>
						if (config_stream_status != BMA4_ASIC_INITIALIZED) {
 8000740:	7abb      	ldrb	r3, [r7, #10]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d002      	beq.n	800074c <bma4_write_config_file+0xde>
							rslt = BMA4_E_CONFIG_STREAM_ERROR;
 8000746:	23fb      	movs	r3, #251	; 0xfb
 8000748:	73fb      	strb	r3, [r7, #15]
 800074a:	e00e      	b.n	800076a <bma4_write_config_file+0xfc>
						} else {
							/* Enable advanced power save */
							rslt = bma4_set_advance_power_save(BMA4_ENABLE,
 800074c:	6879      	ldr	r1, [r7, #4]
 800074e:	2001      	movs	r0, #1
 8000750:	f000 fcb1 	bl	80010b6 <bma4_set_advance_power_save>
 8000754:	4603      	mov	r3, r0
 8000756:	73fb      	strb	r3, [r7, #15]
									dev);
							if (rslt == BMA4_OK) {
 8000758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d104      	bne.n	800076a <bma4_write_config_file+0xfc>
								rslt = get_feature_config_start_addr(dev);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f939 	bl	80009d8 <get_feature_config_start_addr>
 8000766:	4603      	mov	r3, r0
 8000768:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 800076a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800076e:	4618      	mov	r0, r3
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <bma4_write_regs>:
/*!
 *  @brief This API checks whether the write operation requested is for feature
 *  config or register write and accordingly writes the data in the sensor.
 */
int8_t bma4_write_regs(uint8_t addr, const uint8_t *data, uint32_t len,
		struct bma4_dev *dev) {
 8000776:	b580      	push	{r7, lr}
 8000778:	b088      	sub	sp, #32
 800077a:	af00      	add	r7, sp, #0
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	4603      	mov	r3, r0
 8000784:	73fb      	strb	r3, [r7, #15]
	uint8_t i;
	uint32_t loop_count;
	uint16_t overflow;
	uint16_t index;
	int8_t rslt;
	uint8_t adv_pwr_save = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	747b      	strb	r3, [r7, #17]

	/* Check the dev structure as NULL */
	rslt = null_pointer_check(dev);
 800078a:	6838      	ldr	r0, [r7, #0]
 800078c:	f000 fe3c 	bl	8001408 <null_pointer_check>
 8000790:	4603      	mov	r3, r0
 8000792:	76fb      	strb	r3, [r7, #27]

	if ((rslt == BMA4_OK) && (data != NULL)) {
 8000794:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000798:	2b00      	cmp	r3, #0
 800079a:	f040 80c5 	bne.w	8000928 <bma4_write_regs+0x1b2>
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	f000 80c1 	beq.w	8000928 <bma4_write_regs+0x1b2>
		if (addr == BMA4_FEATURE_CONFIG_ADDR) {
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	2b5e      	cmp	r3, #94	; 0x5e
 80007aa:	f040 80b4 	bne.w	8000916 <bma4_write_regs+0x1a0>
			/* Disable APS if enabled before writing the feature
			 * config register
			 */
			rslt = bma4_get_advance_power_save(&adv_pwr_save, dev);
 80007ae:	f107 0311 	add.w	r3, r7, #17
 80007b2:	6839      	ldr	r1, [r7, #0]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 fcb9 	bl	800112c <bma4_get_advance_power_save>
 80007ba:	4603      	mov	r3, r0
 80007bc:	76fb      	strb	r3, [r7, #27]
			if ((adv_pwr_save == BMA4_ENABLE) && (rslt == BMA4_OK)) {
 80007be:	7c7b      	ldrb	r3, [r7, #17]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d111      	bne.n	80007e8 <bma4_write_regs+0x72>
 80007c4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d10d      	bne.n	80007e8 <bma4_write_regs+0x72>
				rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
 80007cc:	6839      	ldr	r1, [r7, #0]
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 fc71 	bl	80010b6 <bma4_set_advance_power_save>
 80007d4:	4603      	mov	r3, r0
 80007d6:	76fb      	strb	r3, [r7, #27]

				/* Wait for sensor time synchronization. Refer
				 * the data-sheet for more information
				 */
				dev->delay_us(450, dev->intf_ptr);
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007dc:	683a      	ldr	r2, [r7, #0]
 80007de:	6852      	ldr	r2, [r2, #4]
 80007e0:	4611      	mov	r1, r2
 80007e2:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80007e6:	4798      	blx	r3
			}

			if (((len % 2) == 0) && (len <= dev->feature_len)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d177      	bne.n	80008e2 <bma4_write_regs+0x16c>
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	7d9b      	ldrb	r3, [r3, #22]
 80007f6:	461a      	mov	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d871      	bhi.n	80008e2 <bma4_write_regs+0x16c>
					&& (rslt == BMA4_OK)) {
 80007fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d16d      	bne.n	80008e2 <bma4_write_regs+0x16c>
				if (dev->read_write_len < len) {
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	8a9b      	ldrh	r3, [r3, #20]
 800080a:	461a      	mov	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4293      	cmp	r3, r2
 8000810:	d95e      	bls.n	80008d0 <bma4_write_regs+0x15a>
					/* Calculate the no of writes to be
					 * performed according to the read/write
					 * length
					 */
					loop_count = len / dev->read_write_len;
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	8a9b      	ldrh	r3, [r3, #20]
 8000816:	461a      	mov	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	fbb3 f3f2 	udiv	r3, r3, r2
 800081e:	617b      	str	r3, [r7, #20]
					overflow = len % dev->read_write_len;
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	8a9b      	ldrh	r3, [r3, #20]
 8000824:	461a      	mov	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	fbb3 f1f2 	udiv	r1, r3, r2
 800082c:	fb02 f201 	mul.w	r2, r2, r1
 8000830:	1a9b      	subs	r3, r3, r2
 8000832:	827b      	strh	r3, [r7, #18]
					index = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	83bb      	strh	r3, [r7, #28]
					rslt = set_feature_config_start_addr(dev);
 8000838:	6838      	ldr	r0, [r7, #0]
 800083a:	f000 f907 	bl	8000a4c <set_feature_config_start_addr>
 800083e:	4603      	mov	r3, r0
 8000840:	76fb      	strb	r3, [r7, #27]
					if (rslt == BMA4_OK) {
 8000842:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d14e      	bne.n	80008e8 <bma4_write_regs+0x172>
						for (i = 0; i < loop_count; i++) {
 800084a:	2300      	movs	r3, #0
 800084c:	77fb      	strb	r3, [r7, #31]
 800084e:	e020      	b.n	8000892 <bma4_write_regs+0x11c>
							rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR,
 8000850:	8bbb      	ldrh	r3, [r7, #28]
 8000852:	68ba      	ldr	r2, [r7, #8]
 8000854:	18d1      	adds	r1, r2, r3
									data + index, dev->read_write_len, dev);
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	8a9b      	ldrh	r3, [r3, #20]
							rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR,
 800085a:	461a      	mov	r2, r3
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	205e      	movs	r0, #94	; 0x5e
 8000860:	f000 f86c 	bl	800093c <write_regs>
 8000864:	4603      	mov	r3, r0
 8000866:	76fb      	strb	r3, [r7, #27]
							if (rslt == BMA4_OK) {
 8000868:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d10d      	bne.n	800088c <bma4_write_regs+0x116>
								rslt = increment_feature_config_addr(dev);
 8000870:	6838      	ldr	r0, [r7, #0]
 8000872:	f000 f916 	bl	8000aa2 <increment_feature_config_addr>
 8000876:	4603      	mov	r3, r0
 8000878:	76fb      	strb	r3, [r7, #27]
								if (rslt == BMA4_OK) {
 800087a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d104      	bne.n	800088c <bma4_write_regs+0x116>
									index = index + dev->read_write_len;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	8a9a      	ldrh	r2, [r3, #20]
 8000886:	8bbb      	ldrh	r3, [r7, #28]
 8000888:	4413      	add	r3, r2
 800088a:	83bb      	strh	r3, [r7, #28]
						for (i = 0; i < loop_count; i++) {
 800088c:	7ffb      	ldrb	r3, [r7, #31]
 800088e:	3301      	adds	r3, #1
 8000890:	77fb      	strb	r3, [r7, #31]
 8000892:	7ffb      	ldrb	r3, [r7, #31]
 8000894:	697a      	ldr	r2, [r7, #20]
 8000896:	429a      	cmp	r2, r3
 8000898:	d8da      	bhi.n	8000850 <bma4_write_regs+0xda>
								}
							}
						}

						if ((overflow) && (rslt == BMA4_OK)) {
 800089a:	8a7b      	ldrh	r3, [r7, #18]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d00d      	beq.n	80008bc <bma4_write_regs+0x146>
 80008a0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d109      	bne.n	80008bc <bma4_write_regs+0x146>
							rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR,
 80008a8:	8bbb      	ldrh	r3, [r7, #28]
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	18d1      	adds	r1, r2, r3
 80008ae:	8a7a      	ldrh	r2, [r7, #18]
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	205e      	movs	r0, #94	; 0x5e
 80008b4:	f000 f842 	bl	800093c <write_regs>
 80008b8:	4603      	mov	r3, r0
 80008ba:	76fb      	strb	r3, [r7, #27]
									data + index, overflow, dev);
						}

						if (rslt == BMA4_OK) {
 80008bc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d111      	bne.n	80008e8 <bma4_write_regs+0x172>
							rslt = set_feature_config_start_addr(dev);
 80008c4:	6838      	ldr	r0, [r7, #0]
 80008c6:	f000 f8c1 	bl	8000a4c <set_feature_config_start_addr>
 80008ca:	4603      	mov	r3, r0
 80008cc:	76fb      	strb	r3, [r7, #27]
				if (dev->read_write_len < len) {
 80008ce:	e00b      	b.n	80008e8 <bma4_write_regs+0x172>
						}
					}
				} else {
					rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, data, len, dev);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	68b9      	ldr	r1, [r7, #8]
 80008d6:	205e      	movs	r0, #94	; 0x5e
 80008d8:	f000 f830 	bl	800093c <write_regs>
 80008dc:	4603      	mov	r3, r0
 80008de:	76fb      	strb	r3, [r7, #27]
				if (dev->read_write_len < len) {
 80008e0:	e002      	b.n	80008e8 <bma4_write_regs+0x172>
				}
			} else {
				rslt = BMA4_E_RD_WR_LENGTH_INVALID;
 80008e2:	23f6      	movs	r3, #246	; 0xf6
 80008e4:	76fb      	strb	r3, [r7, #27]
 80008e6:	e000      	b.n	80008ea <bma4_write_regs+0x174>
				if (dev->read_write_len < len) {
 80008e8:	bf00      	nop
			}

			if (rslt == BMA4_OK) {
 80008ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d11d      	bne.n	800092e <bma4_write_regs+0x1b8>
				/* Enable APS if previously enabled */
				if (adv_pwr_save == BMA4_ENABLE) {
 80008f2:	7c7b      	ldrb	r3, [r7, #17]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d11a      	bne.n	800092e <bma4_write_regs+0x1b8>
					rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
 80008f8:	6839      	ldr	r1, [r7, #0]
 80008fa:	2001      	movs	r0, #1
 80008fc:	f000 fbdb 	bl	80010b6 <bma4_set_advance_power_save>
 8000900:	4603      	mov	r3, r0
 8000902:	76fb      	strb	r3, [r7, #27]

					/* Wait for sensor time synchronization.
					 * Refer the data-sheet for more
					 * information
					 */
					dev->delay_us(450, dev->intf_ptr);
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000908:	683a      	ldr	r2, [r7, #0]
 800090a:	6852      	ldr	r2, [r2, #4]
 800090c:	4611      	mov	r1, r2
 800090e:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000912:	4798      	blx	r3
		if (addr == BMA4_FEATURE_CONFIG_ADDR) {
 8000914:	e00b      	b.n	800092e <bma4_write_regs+0x1b8>
				}
			}
		} else {
			rslt = write_regs(addr, data, len, dev);
 8000916:	7bf8      	ldrb	r0, [r7, #15]
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	68b9      	ldr	r1, [r7, #8]
 800091e:	f000 f80d 	bl	800093c <write_regs>
 8000922:	4603      	mov	r3, r0
 8000924:	76fb      	strb	r3, [r7, #27]
		if (addr == BMA4_FEATURE_CONFIG_ADDR) {
 8000926:	e002      	b.n	800092e <bma4_write_regs+0x1b8>
		}
	} else {
		rslt = BMA4_E_NULL_PTR;
 8000928:	23ff      	movs	r3, #255	; 0xff
 800092a:	76fb      	strb	r3, [r7, #27]
 800092c:	e000      	b.n	8000930 <bma4_write_regs+0x1ba>
		if (addr == BMA4_FEATURE_CONFIG_ADDR) {
 800092e:	bf00      	nop
	}

	return rslt;
 8000930:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3720      	adds	r7, #32
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <write_regs>:
/*!
 *  @brief This API writes the 8-bit data to the given register
 *  in the sensor.
 */
static int8_t write_regs(uint8_t addr, const uint8_t *data, uint32_t len,
		struct bma4_dev *dev) {
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b087      	sub	sp, #28
 8000940:	af00      	add	r7, sp, #0
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	4603      	mov	r3, r0
 800094a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;

	/* NULL pointer check */
	rslt = null_pointer_check(dev);
 800094c:	6838      	ldr	r0, [r7, #0]
 800094e:	f000 fd5b 	bl	8001408 <null_pointer_check>
 8000952:	4603      	mov	r3, r0
 8000954:	75fb      	strb	r3, [r7, #23]

	if ((rslt == BMA4_OK) && (data != NULL)) {
 8000956:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d134      	bne.n	80009c8 <write_regs+0x8c>
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d031      	beq.n	80009c8 <write_regs+0x8c>
		if (dev->intf == BMA4_SPI_INTF) {
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	7a1b      	ldrb	r3, [r3, #8]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d103      	bne.n	8000974 <write_regs+0x38>
			addr = addr & BMA4_SPI_WR_MASK;
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000972:	73fb      	strb	r3, [r7, #15]
		}

		/* write data in the register*/
		dev->intf_rslt = dev->bus_write(addr, data, len, dev->intf_ptr);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	7bf8      	ldrb	r0, [r7, #15]
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	68b9      	ldr	r1, [r7, #8]
 8000982:	47a0      	blx	r4
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	725a      	strb	r2, [r3, #9]

		if (dev->intf_rslt == BMA4_INTF_RET_SUCCESS) {
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d115      	bne.n	80009c2 <write_regs+0x86>
			/* After write operation 2us delay is required when device operates in performance mode whereas 450us
			 * is required when the device operates in suspend and low power mode.
			 * NOTE: For more information refer datasheet section 6.6 */
			if (dev->perf_mode_status == BMA4_ENABLE) {
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800099c:	2b01      	cmp	r3, #1
 800099e:	d107      	bne.n	80009b0 <write_regs+0x74>
				dev->delay_us(2, dev->intf_ptr);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a4:	683a      	ldr	r2, [r7, #0]
 80009a6:	6852      	ldr	r2, [r2, #4]
 80009a8:	4611      	mov	r1, r2
 80009aa:	2002      	movs	r0, #2
 80009ac:	4798      	blx	r3
		if (dev->intf_rslt == BMA4_INTF_RET_SUCCESS) {
 80009ae:	e00d      	b.n	80009cc <write_regs+0x90>
			} else {
				dev->delay_us(450, dev->intf_ptr);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b4:	683a      	ldr	r2, [r7, #0]
 80009b6:	6852      	ldr	r2, [r2, #4]
 80009b8:	4611      	mov	r1, r2
 80009ba:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80009be:	4798      	blx	r3
		if (dev->intf_rslt == BMA4_INTF_RET_SUCCESS) {
 80009c0:	e004      	b.n	80009cc <write_regs+0x90>
			}
		} else {
			rslt = BMA4_E_COM_FAIL;
 80009c2:	23fe      	movs	r3, #254	; 0xfe
 80009c4:	75fb      	strb	r3, [r7, #23]
		if (dev->intf_rslt == BMA4_INTF_RET_SUCCESS) {
 80009c6:	e001      	b.n	80009cc <write_regs+0x90>
		}
	} else {
		rslt = BMA4_E_NULL_PTR;
 80009c8:	23ff      	movs	r3, #255	; 0xff
 80009ca:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80009cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	371c      	adds	r7, #28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd90      	pop	{r4, r7, pc}

080009d8 <get_feature_config_start_addr>:

/*!
 *  @brief This API sets the feature config. data start address in the sensor.
 */
static int8_t get_feature_config_start_addr(struct bma4_dev *dev) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t asic_lsb = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	73bb      	strb	r3, [r7, #14]
	uint8_t asic_msb = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	737b      	strb	r3, [r7, #13]

	/* NULL pointer check */
	rslt = null_pointer_check(dev);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f000 fd0d 	bl	8001408 <null_pointer_check>
 80009ee:	4603      	mov	r3, r0
 80009f0:	73fb      	strb	r3, [r7, #15]

	if (rslt == BMA4_OK) {
 80009f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d122      	bne.n	8000a40 <get_feature_config_start_addr+0x68>
		rslt = read_regs(BMA4_RESERVED_REG_5B_ADDR, &asic_lsb, 1, dev);
 80009fa:	f107 010e 	add.w	r1, r7, #14
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2201      	movs	r2, #1
 8000a02:	205b      	movs	r0, #91	; 0x5b
 8000a04:	f000 f992 	bl	8000d2c <read_regs>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	73fb      	strb	r3, [r7, #15]
		if (rslt == BMA4_OK) {
 8000a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d108      	bne.n	8000a26 <get_feature_config_start_addr+0x4e>
			rslt = read_regs(BMA4_RESERVED_REG_5C_ADDR, &asic_msb, 1, dev);
 8000a14:	f107 010d 	add.w	r1, r7, #13
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	205c      	movs	r0, #92	; 0x5c
 8000a1e:	f000 f985 	bl	8000d2c <read_regs>
 8000a22:	4603      	mov	r3, r0
 8000a24:	73fb      	strb	r3, [r7, #15]
		}

		if (rslt == BMA4_OK) {
 8000a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d108      	bne.n	8000a40 <get_feature_config_start_addr+0x68>
			/* Store asic info in dev structure */
			dev->asic_data.asic_lsb = asic_lsb & 0x0F;
 8000a2e:	7bbb      	ldrb	r3, [r7, #14]
 8000a30:	f003 030f 	and.w	r3, r3, #15
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	75da      	strb	r2, [r3, #23]
			dev->asic_data.asic_msb = asic_msb;
 8000a3a:	7b7a      	ldrb	r2, [r7, #13]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	761a      	strb	r2, [r3, #24]
		}
	}

	return rslt;
 8000a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <set_feature_config_start_addr>:

/*!
 *  @brief This API sets the feature config. data start address in the sensor.
 */
static int8_t set_feature_config_start_addr(struct bma4_dev *dev) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* NULL pointer check */
	rslt = null_pointer_check(dev);
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f000 fcd7 	bl	8001408 <null_pointer_check>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	73fb      	strb	r3, [r7, #15]

	if (rslt == BMA4_OK) {
 8000a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d117      	bne.n	8000a96 <set_feature_config_start_addr+0x4a>
		rslt = write_regs(BMA4_RESERVED_REG_5B_ADDR, &dev->asic_data.asic_lsb,
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f103 0117 	add.w	r1, r3, #23
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2201      	movs	r2, #1
 8000a70:	205b      	movs	r0, #91	; 0x5b
 8000a72:	f7ff ff63 	bl	800093c <write_regs>
 8000a76:	4603      	mov	r3, r0
 8000a78:	73fb      	strb	r3, [r7, #15]
				1, dev);
		if (rslt == BMA4_OK) {
 8000a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d109      	bne.n	8000a96 <set_feature_config_start_addr+0x4a>
			rslt = write_regs(BMA4_RESERVED_REG_5C_ADDR,
					&dev->asic_data.asic_msb, 1, dev);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f103 0118 	add.w	r1, r3, #24
			rslt = write_regs(BMA4_RESERVED_REG_5C_ADDR,
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	205c      	movs	r0, #92	; 0x5c
 8000a8e:	f7ff ff55 	bl	800093c <write_regs>
 8000a92:	4603      	mov	r3, r0
 8000a94:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8000a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <increment_feature_config_addr>:

/*!
 *  @brief This API increments the feature config. data address according to the user
 *  provided read/write length in the dev structure.
 */
static int8_t increment_feature_config_addr(struct bma4_dev *dev) {
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b084      	sub	sp, #16
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint16_t asic_addr;
	uint8_t asic_lsb = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	72fb      	strb	r3, [r7, #11]
	uint8_t asic_msb = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	72bb      	strb	r3, [r7, #10]

	/* NULL pointer check */
	rslt = null_pointer_check(dev);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f000 fca8 	bl	8001408 <null_pointer_check>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	73fb      	strb	r3, [r7, #15]

	if (rslt == BMA4_OK) {
 8000abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d152      	bne.n	8000b6a <increment_feature_config_addr+0xc8>
		/* Read the asic address from the sensor */
		rslt = read_regs(BMA4_RESERVED_REG_5B_ADDR, &asic_lsb, 1, dev);
 8000ac4:	f107 010b 	add.w	r1, r7, #11
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2201      	movs	r2, #1
 8000acc:	205b      	movs	r0, #91	; 0x5b
 8000ace:	f000 f92d 	bl	8000d2c <read_regs>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	73fb      	strb	r3, [r7, #15]
		if (rslt == BMA4_OK) {
 8000ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d109      	bne.n	8000af2 <increment_feature_config_addr+0x50>
			rslt = read_regs(BMA4_RESERVED_REG_5C_ADDR, &asic_msb, 1, dev);
 8000ade:	f107 010a 	add.w	r1, r7, #10
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	205c      	movs	r0, #92	; 0x5c
 8000ae8:	f000 f920 	bl	8000d2c <read_regs>
 8000aec:	4603      	mov	r3, r0
 8000aee:	73fb      	strb	r3, [r7, #15]
 8000af0:	e001      	b.n	8000af6 <increment_feature_config_addr+0x54>
		} else {
			rslt = BMA4_E_COM_FAIL;
 8000af2:	23fe      	movs	r3, #254	; 0xfe
 8000af4:	73fb      	strb	r3, [r7, #15]
		}

		if (rslt == BMA4_OK) {
 8000af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d133      	bne.n	8000b66 <increment_feature_config_addr+0xc4>
			/* Get the asic address */
			asic_addr = (asic_msb << 4) | (asic_lsb & 0x0F);
 8000afe:	7abb      	ldrb	r3, [r7, #10]
 8000b00:	011b      	lsls	r3, r3, #4
 8000b02:	b21a      	sxth	r2, r3
 8000b04:	7afb      	ldrb	r3, [r7, #11]
 8000b06:	b21b      	sxth	r3, r3
 8000b08:	f003 030f 	and.w	r3, r3, #15
 8000b0c:	b21b      	sxth	r3, r3
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	b21b      	sxth	r3, r3
 8000b12:	81bb      	strh	r3, [r7, #12]

			/* Sum the asic address with read/write length after converting from
			 * byte to word
			 */
			asic_addr = asic_addr + (dev->read_write_len / 2);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	8a9b      	ldrh	r3, [r3, #20]
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	89bb      	ldrh	r3, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	81bb      	strh	r3, [r7, #12]

			/* Split the asic address */
			asic_lsb = asic_addr & 0x0F;
 8000b22:	89bb      	ldrh	r3, [r7, #12]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	f003 030f 	and.w	r3, r3, #15
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	72fb      	strb	r3, [r7, #11]
			asic_msb = (uint8_t) (asic_addr >> 4);
 8000b2e:	89bb      	ldrh	r3, [r7, #12]
 8000b30:	091b      	lsrs	r3, r3, #4
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	72bb      	strb	r3, [r7, #10]

			/* Write the asic address in the sensor */
			rslt = write_regs(BMA4_RESERVED_REG_5B_ADDR, &asic_lsb, 1, dev);
 8000b38:	f107 010b 	add.w	r1, r7, #11
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	205b      	movs	r0, #91	; 0x5b
 8000b42:	f7ff fefb 	bl	800093c <write_regs>
 8000b46:	4603      	mov	r3, r0
 8000b48:	73fb      	strb	r3, [r7, #15]
			if (rslt == BMA4_OK) {
 8000b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d10b      	bne.n	8000b6a <increment_feature_config_addr+0xc8>
				rslt = write_regs(BMA4_RESERVED_REG_5C_ADDR, &asic_msb, 1, dev);
 8000b52:	f107 010a 	add.w	r1, r7, #10
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2201      	movs	r2, #1
 8000b5a:	205c      	movs	r0, #92	; 0x5c
 8000b5c:	f7ff feee 	bl	800093c <write_regs>
 8000b60:	4603      	mov	r3, r0
 8000b62:	73fb      	strb	r3, [r7, #15]
 8000b64:	e001      	b.n	8000b6a <increment_feature_config_addr+0xc8>
			}
		} else {
			rslt = BMA4_E_COM_FAIL;
 8000b66:	23fe      	movs	r3, #254	; 0xfe
 8000b68:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8000b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <bma4_read_regs>:
/*!
 *  @brief This API checks whether the read operation requested is for feature
 *  or register read and accordingly reads the data from the sensor.
 */
int8_t bma4_read_regs(uint8_t addr, uint8_t *data, uint32_t len,
		struct bma4_dev *dev) {
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b088      	sub	sp, #32
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	4603      	mov	r3, r0
 8000b84:	73fb      	strb	r3, [r7, #15]
	uint8_t idx;
	uint32_t loop_count;
	uint16_t overflow;
	uint16_t index;
	int8_t rslt;
	uint8_t adv_pwr_save = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	747b      	strb	r3, [r7, #17]

	//printf("bma4_read_regs : %x\r\n", addr);
	/* Check the dev structure as NULL */
	rslt = null_pointer_check(dev);
 8000b8a:	6838      	ldr	r0, [r7, #0]
 8000b8c:	f000 fc3c 	bl	8001408 <null_pointer_check>
 8000b90:	4603      	mov	r3, r0
 8000b92:	76fb      	strb	r3, [r7, #27]

	if ((rslt == BMA4_OK) && (data != NULL)) {
 8000b94:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f040 80bd 	bne.w	8000d18 <bma4_read_regs+0x1a2>
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	f000 80b9 	beq.w	8000d18 <bma4_read_regs+0x1a2>
		if (addr == BMA4_FEATURE_CONFIG_ADDR) {
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	2b5e      	cmp	r3, #94	; 0x5e
 8000baa:	f040 80ac 	bne.w	8000d06 <bma4_read_regs+0x190>
			/* Disable APS if enabled before reading the feature
			 * config register
			 */
			rslt = bma4_get_advance_power_save(&adv_pwr_save, dev);
 8000bae:	f107 0311 	add.w	r3, r7, #17
 8000bb2:	6839      	ldr	r1, [r7, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 fab9 	bl	800112c <bma4_get_advance_power_save>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	76fb      	strb	r3, [r7, #27]
			if (adv_pwr_save == BMA4_ENABLE) {
 8000bbe:	7c7b      	ldrb	r3, [r7, #17]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d10d      	bne.n	8000be0 <bma4_read_regs+0x6a>
				rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
 8000bc4:	6839      	ldr	r1, [r7, #0]
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f000 fa75 	bl	80010b6 <bma4_set_advance_power_save>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	76fb      	strb	r3, [r7, #27]

				/* Wait for sensor time synchronization. Refer
				 * the data-sheet for more information
				 */
				dev->delay_us(450, dev->intf_ptr);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	6852      	ldr	r2, [r2, #4]
 8000bd8:	4611      	mov	r1, r2
 8000bda:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000bde:	4798      	blx	r3
			}

			if (((len % 2) == 0) && (len <= dev->feature_len)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d173      	bne.n	8000cd2 <bma4_read_regs+0x15c>
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	7d9b      	ldrb	r3, [r3, #22]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d86d      	bhi.n	8000cd2 <bma4_read_regs+0x15c>
					&& (rslt == BMA4_OK)) {
 8000bf6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d169      	bne.n	8000cd2 <bma4_read_regs+0x15c>
				if (dev->read_write_len < len) {
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	8a9b      	ldrh	r3, [r3, #20]
 8000c02:	461a      	mov	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d95a      	bls.n	8000cc0 <bma4_read_regs+0x14a>
					/* Calculate the no of writes to be
					 * performed according to the read/write
					 * length
					 */
					loop_count = len / dev->read_write_len;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	8a9b      	ldrh	r3, [r3, #20]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c16:	617b      	str	r3, [r7, #20]
					overflow = len % dev->read_write_len;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	8a9b      	ldrh	r3, [r3, #20]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c24:	fb02 f201 	mul.w	r2, r2, r1
 8000c28:	1a9b      	subs	r3, r3, r2
 8000c2a:	827b      	strh	r3, [r7, #18]
					index = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	83bb      	strh	r3, [r7, #28]
					rslt = set_feature_config_start_addr(dev);
 8000c30:	6838      	ldr	r0, [r7, #0]
 8000c32:	f7ff ff0b 	bl	8000a4c <set_feature_config_start_addr>
 8000c36:	4603      	mov	r3, r0
 8000c38:	76fb      	strb	r3, [r7, #27]
					for (idx = 0; idx < loop_count; idx++) {
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	77fb      	strb	r3, [r7, #31]
 8000c3e:	e020      	b.n	8000c82 <bma4_read_regs+0x10c>
						rslt = read_regs(BMA4_FEATURE_CONFIG_ADDR, data + index,
 8000c40:	8bbb      	ldrh	r3, [r7, #28]
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	18d1      	adds	r1, r2, r3
								dev->read_write_len, dev);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	8a9b      	ldrh	r3, [r3, #20]
						rslt = read_regs(BMA4_FEATURE_CONFIG_ADDR, data + index,
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	205e      	movs	r0, #94	; 0x5e
 8000c50:	f000 f86c 	bl	8000d2c <read_regs>
 8000c54:	4603      	mov	r3, r0
 8000c56:	76fb      	strb	r3, [r7, #27]

						if (rslt == BMA4_OK) {
 8000c58:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d10d      	bne.n	8000c7c <bma4_read_regs+0x106>
							rslt = increment_feature_config_addr(dev);
 8000c60:	6838      	ldr	r0, [r7, #0]
 8000c62:	f7ff ff1e 	bl	8000aa2 <increment_feature_config_addr>
 8000c66:	4603      	mov	r3, r0
 8000c68:	76fb      	strb	r3, [r7, #27]

							if (rslt == BMA4_OK) {
 8000c6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d104      	bne.n	8000c7c <bma4_read_regs+0x106>
								index = index + dev->read_write_len;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	8a9a      	ldrh	r2, [r3, #20]
 8000c76:	8bbb      	ldrh	r3, [r7, #28]
 8000c78:	4413      	add	r3, r2
 8000c7a:	83bb      	strh	r3, [r7, #28]
					for (idx = 0; idx < loop_count; idx++) {
 8000c7c:	7ffb      	ldrb	r3, [r7, #31]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	77fb      	strb	r3, [r7, #31]
 8000c82:	7ffb      	ldrb	r3, [r7, #31]
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d8da      	bhi.n	8000c40 <bma4_read_regs+0xca>
							}
						}
					}

					if ((overflow) && (rslt == BMA4_OK)) {
 8000c8a:	8a7b      	ldrh	r3, [r7, #18]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d00d      	beq.n	8000cac <bma4_read_regs+0x136>
 8000c90:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d109      	bne.n	8000cac <bma4_read_regs+0x136>
						rslt = read_regs(BMA4_FEATURE_CONFIG_ADDR, data + index,
 8000c98:	8bbb      	ldrh	r3, [r7, #28]
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	18d1      	adds	r1, r2, r3
 8000c9e:	8a7a      	ldrh	r2, [r7, #18]
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	205e      	movs	r0, #94	; 0x5e
 8000ca4:	f000 f842 	bl	8000d2c <read_regs>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	76fb      	strb	r3, [r7, #27]
								overflow, dev);
					}

					if (rslt == BMA4_OK) {
 8000cac:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d111      	bne.n	8000cd8 <bma4_read_regs+0x162>
						rslt = set_feature_config_start_addr(dev);
 8000cb4:	6838      	ldr	r0, [r7, #0]
 8000cb6:	f7ff fec9 	bl	8000a4c <set_feature_config_start_addr>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	76fb      	strb	r3, [r7, #27]
				if (dev->read_write_len < len) {
 8000cbe:	e00b      	b.n	8000cd8 <bma4_read_regs+0x162>
					}
				} else {
					rslt = read_regs(BMA4_FEATURE_CONFIG_ADDR, data, len, dev);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	205e      	movs	r0, #94	; 0x5e
 8000cc8:	f000 f830 	bl	8000d2c <read_regs>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	76fb      	strb	r3, [r7, #27]
				if (dev->read_write_len < len) {
 8000cd0:	e002      	b.n	8000cd8 <bma4_read_regs+0x162>
				}
			} else {
				rslt = BMA4_E_RD_WR_LENGTH_INVALID;
 8000cd2:	23f6      	movs	r3, #246	; 0xf6
 8000cd4:	76fb      	strb	r3, [r7, #27]
 8000cd6:	e000      	b.n	8000cda <bma4_read_regs+0x164>
				if (dev->read_write_len < len) {
 8000cd8:	bf00      	nop
			}

			if (rslt == BMA4_OK) {
 8000cda:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d11d      	bne.n	8000d1e <bma4_read_regs+0x1a8>
				/* Enable APS if previously enabled */
				if (adv_pwr_save == BMA4_ENABLE) {
 8000ce2:	7c7b      	ldrb	r3, [r7, #17]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d11a      	bne.n	8000d1e <bma4_read_regs+0x1a8>
					rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
 8000ce8:	6839      	ldr	r1, [r7, #0]
 8000cea:	2001      	movs	r0, #1
 8000cec:	f000 f9e3 	bl	80010b6 <bma4_set_advance_power_save>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	76fb      	strb	r3, [r7, #27]

					/* Wait for sensor time synchronization.
					 * Refer the data-sheet for more
					 * information
					 */
					dev->delay_us(450, dev->intf_ptr);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf8:	683a      	ldr	r2, [r7, #0]
 8000cfa:	6852      	ldr	r2, [r2, #4]
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000d02:	4798      	blx	r3
		if (addr == BMA4_FEATURE_CONFIG_ADDR) {
 8000d04:	e00b      	b.n	8000d1e <bma4_read_regs+0x1a8>
				}
			}
		} else {
			rslt = read_regs(addr, data, len, dev);
 8000d06:	7bf8      	ldrb	r0, [r7, #15]
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	f000 f80d 	bl	8000d2c <read_regs>
 8000d12:	4603      	mov	r3, r0
 8000d14:	76fb      	strb	r3, [r7, #27]
		if (addr == BMA4_FEATURE_CONFIG_ADDR) {
 8000d16:	e002      	b.n	8000d1e <bma4_read_regs+0x1a8>
		}
	} else {
		rslt = BMA4_E_NULL_PTR;
 8000d18:	23ff      	movs	r3, #255	; 0xff
 8000d1a:	76fb      	strb	r3, [r7, #27]
 8000d1c:	e000      	b.n	8000d20 <bma4_read_regs+0x1aa>
		if (addr == BMA4_FEATURE_CONFIG_ADDR) {
 8000d1e:	bf00      	nop
	}

	return rslt;
 8000d20:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <read_regs>:
/*!
 *  @brief This API reads the 8-bit data from the given register
 *  in the sensor.
 */
static int8_t read_regs(uint8_t addr, uint8_t *data, uint32_t len,
		struct bma4_dev *dev) {
 8000d2c:	b5b0      	push	{r4, r5, r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	4603      	mov	r3, r0
 8000d3a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;

	/* Check the dev structure as NULL */
	rslt = null_pointer_check(dev);
 8000d3c:	6838      	ldr	r0, [r7, #0]
 8000d3e:	f000 fb63 	bl	8001408 <null_pointer_check>
 8000d42:	4603      	mov	r3, r0
 8000d44:	77fb      	strb	r3, [r7, #31]

	if ((rslt == BMA4_OK) && (data != NULL)) {
 8000d46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d15e      	bne.n	8000e0c <read_regs+0xe0>
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d05b      	beq.n	8000e0c <read_regs+0xe0>
 8000d54:	466b      	mov	r3, sp
 8000d56:	461d      	mov	r5, r3
		/* variable used to return the status of communication result*/
		uint32_t temp_len = len + dev->dummy_byte;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	7adb      	ldrb	r3, [r3, #11]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
		uint16_t indx;
		uint8_t temp_buff[temp_len];
 8000d64:	69b8      	ldr	r0, [r7, #24]
 8000d66:	4603      	mov	r3, r0
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	4601      	mov	r1, r0
 8000d6e:	f04f 0200 	mov.w	r2, #0
 8000d72:	f04f 0300 	mov.w	r3, #0
 8000d76:	f04f 0400 	mov.w	r4, #0
 8000d7a:	00d4      	lsls	r4, r2, #3
 8000d7c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000d80:	00cb      	lsls	r3, r1, #3
 8000d82:	4601      	mov	r1, r0
 8000d84:	f04f 0200 	mov.w	r2, #0
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	f04f 0400 	mov.w	r4, #0
 8000d90:	00d4      	lsls	r4, r2, #3
 8000d92:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000d96:	00cb      	lsls	r3, r1, #3
 8000d98:	1dc3      	adds	r3, r0, #7
 8000d9a:	08db      	lsrs	r3, r3, #3
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	ebad 0d03 	sub.w	sp, sp, r3
 8000da2:	466b      	mov	r3, sp
 8000da4:	3300      	adds	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]

		if (dev->intf == BMA4_SPI_INTF) {
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	7a1b      	ldrb	r3, [r3, #8]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d103      	bne.n	8000db8 <read_regs+0x8c>
			/* SPI mask added */
			addr = addr | BMA4_SPI_RD_MASK;
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000db6:	73fb      	strb	r3, [r7, #15]
		}

		/* Read the data from the register */
		dev->intf_rslt = dev->bus_read(addr, temp_buff, temp_len,
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	6a1c      	ldr	r4, [r3, #32]
 8000dbc:	6939      	ldr	r1, [r7, #16]
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	7bf8      	ldrb	r0, [r7, #15]
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	47a0      	blx	r4
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	725a      	strb	r2, [r3, #9]
				dev->intf_ptr);

		if (dev->intf_rslt == BMA4_INTF_RET_SUCCESS) {
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d114      	bne.n	8000e04 <read_regs+0xd8>
			for (indx = 0; indx < len; indx++) {
 8000dda:	2300      	movs	r3, #0
 8000ddc:	83bb      	strh	r3, [r7, #28]
 8000dde:	e00c      	b.n	8000dfa <read_regs+0xce>
				/* Parsing and storing the valid data */
				data[indx] = temp_buff[indx + dev->dummy_byte];
 8000de0:	8bbb      	ldrh	r3, [r7, #28]
 8000de2:	683a      	ldr	r2, [r7, #0]
 8000de4:	7ad2      	ldrb	r2, [r2, #11]
 8000de6:	441a      	add	r2, r3
 8000de8:	8bbb      	ldrh	r3, [r7, #28]
 8000dea:	68b9      	ldr	r1, [r7, #8]
 8000dec:	440b      	add	r3, r1
 8000dee:	6939      	ldr	r1, [r7, #16]
 8000df0:	5c8a      	ldrb	r2, [r1, r2]
 8000df2:	701a      	strb	r2, [r3, #0]
			for (indx = 0; indx < len; indx++) {
 8000df4:	8bbb      	ldrh	r3, [r7, #28]
 8000df6:	3301      	adds	r3, #1
 8000df8:	83bb      	strh	r3, [r7, #28]
 8000dfa:	8bbb      	ldrh	r3, [r7, #28]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d8ee      	bhi.n	8000de0 <read_regs+0xb4>
 8000e02:	e001      	b.n	8000e08 <read_regs+0xdc>
			}
		} else {
			rslt = BMA4_E_COM_FAIL;
 8000e04:	23fe      	movs	r3, #254	; 0xfe
 8000e06:	77fb      	strb	r3, [r7, #31]
 8000e08:	46ad      	mov	sp, r5
	if ((rslt == BMA4_OK) && (data != NULL)) {
 8000e0a:	e001      	b.n	8000e10 <read_regs+0xe4>
		}
	} else {
		rslt = BMA4_E_NULL_PTR;
 8000e0c:	23ff      	movs	r3, #255	; 0xff
 8000e0e:	77fb      	strb	r3, [r7, #31]
	}

	return rslt;
 8000e10:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3720      	adds	r7, #32
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bdb0      	pop	{r4, r5, r7, pc}

08000e1c <bma4_read_accel_xyz>:

/*!
 *  @brief This API reads the Accel data for x,y and z axis from the sensor.
 *  The data units is in LSB format.
 */
int8_t bma4_read_accel_xyz(struct bma4_accel *accel, struct bma4_dev *dev) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint16_t lsb = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	82bb      	strh	r3, [r7, #20]
	uint16_t msb = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	827b      	strh	r3, [r7, #18]
	uint8_t data[BMA4_ACCEL_DATA_LENGTH] = { 0 };
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	809a      	strh	r2, [r3, #4]

	/* Check the dev structure as NULL */
	rslt = null_pointer_check(dev);
 8000e38:	6838      	ldr	r0, [r7, #0]
 8000e3a:	f000 fae5 	bl	8001408 <null_pointer_check>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	75fb      	strb	r3, [r7, #23]

	if ((rslt == BMA4_OK) && (accel != NULL)) {
 8000e42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d17c      	bne.n	8000f44 <bma4_read_accel_xyz+0x128>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d079      	beq.n	8000f44 <bma4_read_accel_xyz+0x128>
		rslt = bma4_read_regs(BMA4_DATA_8_ADDR, data, BMA4_ACCEL_DATA_LENGTH,
 8000e50:	f107 010c 	add.w	r1, r7, #12
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	2206      	movs	r2, #6
 8000e58:	2012      	movs	r0, #18
 8000e5a:	f7ff fe8c 	bl	8000b76 <bma4_read_regs>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	75fb      	strb	r3, [r7, #23]
				dev);
		if (rslt == BMA4_OK) {
 8000e62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d16f      	bne.n	8000f4a <bma4_read_accel_xyz+0x12e>
			msb = data[1];
 8000e6a:	7b7b      	ldrb	r3, [r7, #13]
 8000e6c:	827b      	strh	r3, [r7, #18]
			lsb = data[0];
 8000e6e:	7b3b      	ldrb	r3, [r7, #12]
 8000e70:	82bb      	strh	r3, [r7, #20]

			/* Accel data x axis */
			accel->x = (int16_t) ((msb << 8) | lsb);
 8000e72:	8a7b      	ldrh	r3, [r7, #18]
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	b21a      	sxth	r2, r3
 8000e78:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	b21a      	sxth	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	801a      	strh	r2, [r3, #0]
			msb = data[3];
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	827b      	strh	r3, [r7, #18]
			lsb = data[2];
 8000e88:	7bbb      	ldrb	r3, [r7, #14]
 8000e8a:	82bb      	strh	r3, [r7, #20]

			/* Accel data y axis */
			accel->y = (int16_t) ((msb << 8) | lsb);
 8000e8c:	8a7b      	ldrh	r3, [r7, #18]
 8000e8e:	021b      	lsls	r3, r3, #8
 8000e90:	b21a      	sxth	r2, r3
 8000e92:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	b21a      	sxth	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	805a      	strh	r2, [r3, #2]
			msb = data[5];
 8000e9e:	7c7b      	ldrb	r3, [r7, #17]
 8000ea0:	827b      	strh	r3, [r7, #18]
			lsb = data[4];
 8000ea2:	7c3b      	ldrb	r3, [r7, #16]
 8000ea4:	82bb      	strh	r3, [r7, #20]

			/* Accel data z axis */
			accel->z = (int16_t) ((msb << 8) | lsb);
 8000ea6:	8a7b      	ldrh	r3, [r7, #18]
 8000ea8:	021b      	lsls	r3, r3, #8
 8000eaa:	b21a      	sxth	r2, r3
 8000eac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	b21a      	sxth	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	809a      	strh	r2, [r3, #4]
			if (dev->resolution == BMA4_12_BIT_RESOLUTION) {
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	7b1b      	ldrb	r3, [r3, #12]
 8000ebc:	2b0c      	cmp	r3, #12
 8000ebe:	d11e      	bne.n	8000efe <bma4_read_accel_xyz+0xe2>
				accel->x = (accel->x / 0x10);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	da00      	bge.n	8000ecc <bma4_read_accel_xyz+0xb0>
 8000eca:	330f      	adds	r3, #15
 8000ecc:	111b      	asrs	r3, r3, #4
 8000ece:	b21a      	sxth	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	801a      	strh	r2, [r3, #0]
				accel->y = (accel->y / 0x10);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	da00      	bge.n	8000ee0 <bma4_read_accel_xyz+0xc4>
 8000ede:	330f      	adds	r3, #15
 8000ee0:	111b      	asrs	r3, r3, #4
 8000ee2:	b21a      	sxth	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	805a      	strh	r2, [r3, #2]
				accel->z = (accel->z / 0x10);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	da00      	bge.n	8000ef4 <bma4_read_accel_xyz+0xd8>
 8000ef2:	330f      	adds	r3, #15
 8000ef4:	111b      	asrs	r3, r3, #4
 8000ef6:	b21a      	sxth	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	809a      	strh	r2, [r3, #4]
		if (rslt == BMA4_OK) {
 8000efc:	e025      	b.n	8000f4a <bma4_read_accel_xyz+0x12e>
			} else if (dev->resolution == BMA4_14_BIT_RESOLUTION) {
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	7b1b      	ldrb	r3, [r3, #12]
 8000f02:	2b0e      	cmp	r3, #14
 8000f04:	d121      	bne.n	8000f4a <bma4_read_accel_xyz+0x12e>
				accel->x = (accel->x / 0x04);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	da00      	bge.n	8000f12 <bma4_read_accel_xyz+0xf6>
 8000f10:	3303      	adds	r3, #3
 8000f12:	109b      	asrs	r3, r3, #2
 8000f14:	b21a      	sxth	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	801a      	strh	r2, [r3, #0]
				accel->y = (accel->y / 0x04);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	da00      	bge.n	8000f26 <bma4_read_accel_xyz+0x10a>
 8000f24:	3303      	adds	r3, #3
 8000f26:	109b      	asrs	r3, r3, #2
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	805a      	strh	r2, [r3, #2]
				accel->z = (accel->z / 0x04);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	da00      	bge.n	8000f3a <bma4_read_accel_xyz+0x11e>
 8000f38:	3303      	adds	r3, #3
 8000f3a:	109b      	asrs	r3, r3, #2
 8000f3c:	b21a      	sxth	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	809a      	strh	r2, [r3, #4]
		if (rslt == BMA4_OK) {
 8000f42:	e002      	b.n	8000f4a <bma4_read_accel_xyz+0x12e>
			}
		}
	} else {
		rslt = BMA4_E_NULL_PTR;
 8000f44:	23ff      	movs	r3, #255	; 0xff
 8000f46:	75fb      	strb	r3, [r7, #23]
 8000f48:	e000      	b.n	8000f4c <bma4_read_accel_xyz+0x130>
		if (rslt == BMA4_OK) {
 8000f4a:	bf00      	nop
	}

	return rslt;
 8000f4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <bma4_set_accel_config>:
/*!
 *  @brief This API sets the output_data_rate, bandwidth, perf_mode
 *  and range of Accel.
 */
int8_t bma4_set_accel_config(const struct bma4_accel_config *accel,
		struct bma4_dev *dev) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t accel_config_data[2] = { 0, 0 };
 8000f62:	2300      	movs	r3, #0
 8000f64:	733b      	strb	r3, [r7, #12]
 8000f66:	2300      	movs	r3, #0
 8000f68:	737b      	strb	r3, [r7, #13]

	/* Check the dev structure as NULL */
	rslt = null_pointer_check(dev);
 8000f6a:	6838      	ldr	r0, [r7, #0]
 8000f6c:	f000 fa4c 	bl	8001408 <null_pointer_check>
 8000f70:	4603      	mov	r3, r0
 8000f72:	73fb      	strb	r3, [r7, #15]

	if ((rslt == BMA4_OK) && (accel != NULL)) {
 8000f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d155      	bne.n	8001028 <bma4_set_accel_config+0xd0>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d052      	beq.n	8001028 <bma4_set_accel_config+0xd0>
		/* check whether the bandwidth and perfmode
		 * settings are valid
		 */
		rslt = validate_bandwidth_perfmode(accel->bandwidth, accel->perf_mode);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	785a      	ldrb	r2, [r3, #1]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	789b      	ldrb	r3, [r3, #2]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	f000 f855 	bl	800103c <validate_bandwidth_perfmode>
 8000f92:	4603      	mov	r3, r0
 8000f94:	73fb      	strb	r3, [r7, #15]
		if (rslt == BMA4_OK) {
 8000f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d147      	bne.n	800102e <bma4_set_accel_config+0xd6>
			/* check ODR is valid */
			rslt = validate_odr(accel->odr);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f870 	bl	8001088 <validate_odr>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	73fb      	strb	r3, [r7, #15]
			if (rslt == BMA4_OK) {
 8000fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d13c      	bne.n	800102e <bma4_set_accel_config+0xd6>
				accel_config_data[0] = accel->odr & BMA4_ACCEL_ODR_MSK;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	f003 030f 	and.w	r3, r3, #15
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	733b      	strb	r3, [r7, #12]
				accel_config_data[0] |= (uint8_t) (accel->bandwidth
 8000fc0:	7b3a      	ldrb	r2, [r7, #12]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	785b      	ldrb	r3, [r3, #1]
 8000fc6:	011b      	lsls	r3, r3, #4
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	733b      	strb	r3, [r7, #12]
						<< BMA4_ACCEL_BW_POS);
				accel_config_data[0] |= (uint8_t) (accel->perf_mode
 8000fd0:	7b3a      	ldrb	r2, [r7, #12]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	789b      	ldrb	r3, [r3, #2]
 8000fd6:	01db      	lsls	r3, r3, #7
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	733b      	strb	r3, [r7, #12]
						<< BMA4_ACCEL_PERFMODE_POS);
				accel_config_data[1] = accel->range & BMA4_ACCEL_RANGE_MSK;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	78db      	ldrb	r3, [r3, #3]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	737b      	strb	r3, [r7, #13]

				/* Flag bit to store the performance mode status */
				dev->perf_mode_status = ((accel_config_data[0]
 8000fec:	7b3b      	ldrb	r3, [r7, #12]
						& BMA4_ACCEL_PERFMODE_MSK) >> BMA4_ACCEL_PERFMODE_POS);
 8000fee:	09db      	lsrs	r3, r3, #7
 8000ff0:	b2da      	uxtb	r2, r3
				dev->perf_mode_status = ((accel_config_data[0]
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

				rslt = bma4_write_regs(BMA4_ACCEL_CONFIG_ADDR,
 8000ff8:	f107 010c 	add.w	r1, r7, #12
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	2201      	movs	r2, #1
 8001000:	2040      	movs	r0, #64	; 0x40
 8001002:	f7ff fbb8 	bl	8000776 <bma4_write_regs>
 8001006:	4603      	mov	r3, r0
 8001008:	73fb      	strb	r3, [r7, #15]
						&accel_config_data[0], 1, dev);
				if (rslt == BMA4_OK) {
 800100a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10d      	bne.n	800102e <bma4_set_accel_config+0xd6>
					rslt = bma4_write_regs((BMA4_ACCEL_CONFIG_ADDR + 1),
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	1c59      	adds	r1, r3, #1
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	2201      	movs	r2, #1
 800101c:	2041      	movs	r0, #65	; 0x41
 800101e:	f7ff fbaa 	bl	8000776 <bma4_write_regs>
 8001022:	4603      	mov	r3, r0
 8001024:	73fb      	strb	r3, [r7, #15]
		if (rslt == BMA4_OK) {
 8001026:	e002      	b.n	800102e <bma4_set_accel_config+0xd6>
							&accel_config_data[1], 1, dev);
				}
			}
		}
	} else {
		rslt = BMA4_E_NULL_PTR;
 8001028:	23ff      	movs	r3, #255	; 0xff
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	e000      	b.n	8001030 <bma4_set_accel_config+0xd8>
		if (rslt == BMA4_OK) {
 800102e:	bf00      	nop
	}

	return rslt;
 8001030:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <validate_bandwidth_perfmode>:

/*!
 *  @brief This API validates the bandwidth and perf_mode
 *  value set by the user.
 */
static int8_t validate_bandwidth_perfmode(uint8_t bandwidth, uint8_t perf_mode) {
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	460a      	mov	r2, r1
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	4613      	mov	r3, r2
 800104a:	71bb      	strb	r3, [r7, #6]
	int8_t rslt = BMA4_OK;
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]

	if (perf_mode == BMA4_CONTINUOUS_MODE) {
 8001050:	79bb      	ldrb	r3, [r7, #6]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d105      	bne.n	8001062 <validate_bandwidth_perfmode+0x26>
		if (bandwidth > BMA4_ACCEL_NORMAL_AVG4) {
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d90d      	bls.n	8001078 <validate_bandwidth_perfmode+0x3c>
			/* Invalid bandwidth error for continuous mode */
			rslt = BMA4_E_OUT_OF_RANGE;
 800105c:	23f8      	movs	r3, #248	; 0xf8
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e00a      	b.n	8001078 <validate_bandwidth_perfmode+0x3c>
		}
	} else if (perf_mode == BMA4_CIC_AVG_MODE) {
 8001062:	79bb      	ldrb	r3, [r7, #6]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d105      	bne.n	8001074 <validate_bandwidth_perfmode+0x38>
		if (bandwidth > BMA4_ACCEL_RES_AVG128) {
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	2b07      	cmp	r3, #7
 800106c:	d904      	bls.n	8001078 <validate_bandwidth_perfmode+0x3c>
			/* Invalid bandwidth error for CIC avg. mode */
			rslt = BMA4_E_OUT_OF_RANGE;
 800106e:	23f8      	movs	r3, #248	; 0xf8
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	e001      	b.n	8001078 <validate_bandwidth_perfmode+0x3c>
		}
	} else {
		rslt = BMA4_E_OUT_OF_RANGE;
 8001074:	23f8      	movs	r3, #248	; 0xf8
 8001076:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001078:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <validate_odr>:

/*!
 *  @brief This API validates the ODR value set by the user.
 */
static int8_t validate_odr(uint8_t odr) {
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	int8_t rslt = BMA4_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	73fb      	strb	r3, [r7, #15]

	if ((odr < BMA4_OUTPUT_DATA_RATE_0_78HZ)
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d002      	beq.n	80010a2 <validate_odr+0x1a>
			|| (odr > BMA4_OUTPUT_DATA_RATE_1600HZ)) {
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2b0c      	cmp	r3, #12
 80010a0:	d901      	bls.n	80010a6 <validate_odr+0x1e>
		/* If odr is not valid return error */
		rslt = BMA4_E_OUT_OF_RANGE;
 80010a2:	23f8      	movs	r3, #248	; 0xf8
 80010a4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80010a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <bma4_set_advance_power_save>:
/*! @endcond */

/*!
 *  @brief This API sets the advance power save mode in the sensor.
 */
int8_t bma4_set_advance_power_save(uint8_t adv_pwr_save, struct bma4_dev *dev) {
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b084      	sub	sp, #16
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	6039      	str	r1, [r7, #0]
 80010c0:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t data = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	73bb      	strb	r3, [r7, #14]

	//printf("TEST Func bma4_set_advance_power_save \r\n");
	/* Check the dev structure as NULL */
	rslt = null_pointer_check(dev);
 80010c6:	6838      	ldr	r0, [r7, #0]
 80010c8:	f000 f99e 	bl	8001408 <null_pointer_check>
 80010cc:	4603      	mov	r3, r0
 80010ce:	73fb      	strb	r3, [r7, #15]

	if (rslt == BMA4_OK) {
 80010d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d123      	bne.n	8001120 <bma4_set_advance_power_save+0x6a>
		rslt = bma4_read_regs(BMA4_POWER_CONF_ADDR, &data, 1, dev);
 80010d8:	f107 010e 	add.w	r1, r7, #14
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	2201      	movs	r2, #1
 80010e0:	207c      	movs	r0, #124	; 0x7c
 80010e2:	f7ff fd48 	bl	8000b76 <bma4_read_regs>
 80010e6:	4603      	mov	r3, r0
 80010e8:	73fb      	strb	r3, [r7, #15]

		if (rslt == BMA4_OK) {
 80010ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d116      	bne.n	8001120 <bma4_set_advance_power_save+0x6a>
			data = BMA4_SET_BITS_POS_0(data, BMA4_ADVANCE_POWER_SAVE,
 80010f2:	7bbb      	ldrb	r3, [r7, #14]
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	f023 0301 	bic.w	r3, r3, #1
 80010fa:	b25a      	sxtb	r2, r3
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	b25b      	sxtb	r3, r3
 8001106:	4313      	orrs	r3, r2
 8001108:	b25b      	sxtb	r3, r3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	73bb      	strb	r3, [r7, #14]
					adv_pwr_save);
			rslt = bma4_write_regs(BMA4_POWER_CONF_ADDR, &data, 1, dev);
 800110e:	f107 010e 	add.w	r1, r7, #14
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	2201      	movs	r2, #1
 8001116:	207c      	movs	r0, #124	; 0x7c
 8001118:	f7ff fb2d 	bl	8000776 <bma4_write_regs>
 800111c:	4603      	mov	r3, r0
 800111e:	73fb      	strb	r3, [r7, #15]

		}
	}

	return rslt;
 8001120:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <bma4_get_advance_power_save>:

/*!
 *  @brief This API reads the status of advance power save mode
 *  from the sensor.
 */
int8_t bma4_get_advance_power_save(uint8_t *adv_pwr_save, struct bma4_dev *dev) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t data = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	73bb      	strb	r3, [r7, #14]

	/* Check the dev structure as NULL */
	rslt = null_pointer_check(dev);
 800113a:	6838      	ldr	r0, [r7, #0]
 800113c:	f000 f964 	bl	8001408 <null_pointer_check>
 8001140:	4603      	mov	r3, r0
 8001142:	73fb      	strb	r3, [r7, #15]

	if ((rslt == BMA4_OK) && (adv_pwr_save != NULL)) {
 8001144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d116      	bne.n	800117a <bma4_get_advance_power_save+0x4e>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d013      	beq.n	800117a <bma4_get_advance_power_save+0x4e>
		rslt = bma4_read_regs(BMA4_POWER_CONF_ADDR, &data, 1, dev);
 8001152:	f107 010e 	add.w	r1, r7, #14
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	2201      	movs	r2, #1
 800115a:	207c      	movs	r0, #124	; 0x7c
 800115c:	f7ff fd0b 	bl	8000b76 <bma4_read_regs>
 8001160:	4603      	mov	r3, r0
 8001162:	73fb      	strb	r3, [r7, #15]
		if (rslt == BMA4_OK) {
 8001164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d108      	bne.n	800117e <bma4_get_advance_power_save+0x52>
			*adv_pwr_save = BMA4_GET_BITS_POS_0(data, BMA4_ADVANCE_POWER_SAVE);
 800116c:	7bbb      	ldrb	r3, [r7, #14]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	b2da      	uxtb	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	701a      	strb	r2, [r3, #0]
		if (rslt == BMA4_OK) {
 8001178:	e001      	b.n	800117e <bma4_get_advance_power_save+0x52>
		}
	} else {
		rslt = BMA4_E_NULL_PTR;
 800117a:	23ff      	movs	r3, #255	; 0xff
 800117c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800117e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <bma4_set_accel_enable>:
}

/*!
 *  @brief This API enables or disables the Accel in the sensor.
 */
int8_t bma4_set_accel_enable(uint8_t accel_en, struct bma4_dev *dev) {
 800118a:	b580      	push	{r7, lr}
 800118c:	b084      	sub	sp, #16
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	6039      	str	r1, [r7, #0]
 8001194:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t data = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	73bb      	strb	r3, [r7, #14]

	/* Check the dev structure as NULL */
	rslt = null_pointer_check(dev);
 800119a:	6838      	ldr	r0, [r7, #0]
 800119c:	f000 f934 	bl	8001408 <null_pointer_check>
 80011a0:	4603      	mov	r3, r0
 80011a2:	73fb      	strb	r3, [r7, #15]

	if (rslt == BMA4_OK) {
 80011a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d124      	bne.n	80011f6 <bma4_set_accel_enable+0x6c>
		rslt = bma4_read_regs(BMA4_POWER_CTRL_ADDR, &data, 1, dev);
 80011ac:	f107 010e 	add.w	r1, r7, #14
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	2201      	movs	r2, #1
 80011b4:	207d      	movs	r0, #125	; 0x7d
 80011b6:	f7ff fcde 	bl	8000b76 <bma4_read_regs>
 80011ba:	4603      	mov	r3, r0
 80011bc:	73fb      	strb	r3, [r7, #15]
		if (rslt == BMA4_OK) {
 80011be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d117      	bne.n	80011f6 <bma4_set_accel_enable+0x6c>
			data = BMA4_SET_BITSLICE(data, BMA4_ACCEL_ENABLE, accel_en);
 80011c6:	7bbb      	ldrb	r3, [r7, #14]
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	f023 0304 	bic.w	r3, r3, #4
 80011ce:	b25a      	sxtb	r2, r3
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	4313      	orrs	r3, r2
 80011de:	b25b      	sxtb	r3, r3
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	73bb      	strb	r3, [r7, #14]
			rslt = bma4_write_regs(BMA4_POWER_CTRL_ADDR, &data, 1, dev);
 80011e4:	f107 010e 	add.w	r1, r7, #14
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	2201      	movs	r2, #1
 80011ec:	207d      	movs	r0, #125	; 0x7d
 80011ee:	f7ff fac2 	bl	8000776 <bma4_write_regs>
 80011f2:	4603      	mov	r3, r0
 80011f4:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 80011f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <bma4_map_interrupt>:
/*!
 *  @brief API sets the interrupt to either interrupt1 or
 *  interrupt2 pin in the sensor.
 */
int8_t bma4_map_interrupt(uint8_t int_line, uint16_t int_map, uint8_t enable,
		struct bma4_dev *dev) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	4603      	mov	r3, r0
 800120e:	71fb      	strb	r3, [r7, #7]
 8001210:	460b      	mov	r3, r1
 8001212:	80bb      	strh	r3, [r7, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	71bb      	strb	r3, [r7, #6]
	int8_t rslt;
	uint8_t data[3] = { 0, 0, 0 };
 8001218:	2300      	movs	r3, #0
 800121a:	733b      	strb	r3, [r7, #12]
 800121c:	2300      	movs	r3, #0
 800121e:	737b      	strb	r3, [r7, #13]
 8001220:	2300      	movs	r3, #0
 8001222:	73bb      	strb	r3, [r7, #14]
	uint8_t index[2] = { BMA4_INT_MAP_1_ADDR, BMA4_INT_MAP_2_ADDR };
 8001224:	4b36      	ldr	r3, [pc, #216]	; (8001300 <bma4_map_interrupt+0xfc>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	813b      	strh	r3, [r7, #8]

	/* Check the dev structure as NULL */
	rslt = null_pointer_check(dev);
 800122a:	6838      	ldr	r0, [r7, #0]
 800122c:	f000 f8ec 	bl	8001408 <null_pointer_check>
 8001230:	4603      	mov	r3, r0
 8001232:	73fb      	strb	r3, [r7, #15]

	if (rslt == BMA4_OK) {
 8001234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d15b      	bne.n	80012f4 <bma4_map_interrupt+0xf0>
		rslt = bma4_read_regs(BMA4_INT_MAP_1_ADDR, data, 3, dev);
 800123c:	f107 010c 	add.w	r1, r7, #12
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	2203      	movs	r2, #3
 8001244:	2056      	movs	r0, #86	; 0x56
 8001246:	f7ff fc96 	bl	8000b76 <bma4_read_regs>
 800124a:	4603      	mov	r3, r0
 800124c:	73fb      	strb	r3, [r7, #15]
		if (rslt == BMA4_OK) {
 800124e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d14e      	bne.n	80012f4 <bma4_map_interrupt+0xf0>
			if (enable == TRUE) {
 8001256:	79bb      	ldrb	r3, [r7, #6]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d10d      	bne.n	8001278 <bma4_map_interrupt+0x74>
				/* Feature interrupt mapping */
				data[int_line] = (uint8_t) (int_map & (0x00FF));
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	88ba      	ldrh	r2, [r7, #4]
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	f107 0110 	add.w	r1, r7, #16
 8001266:	440b      	add	r3, r1
 8001268:	f803 2c04 	strb.w	r2, [r3, #-4]

				/* Hardware interrupt mapping */
				data[2] = (uint8_t) ((int_map & (0xFF00)) >> 8);
 800126c:	88bb      	ldrh	r3, [r7, #4]
 800126e:	0a1b      	lsrs	r3, r3, #8
 8001270:	b29b      	uxth	r3, r3
 8001272:	b2db      	uxtb	r3, r3
 8001274:	73bb      	strb	r3, [r7, #14]
 8001276:	e01f      	b.n	80012b8 <bma4_map_interrupt+0xb4>
			} else {
				/* Feature interrupt un-mapping */
				data[int_line] &= (~(uint8_t) (int_map & (0x00FF)));
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f107 0210 	add.w	r2, r7, #16
 800127e:	4413      	add	r3, r2
 8001280:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8001284:	b25a      	sxtb	r2, r3
 8001286:	88bb      	ldrh	r3, [r7, #4]
 8001288:	b25b      	sxtb	r3, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	b25b      	sxtb	r3, r3
 800128e:	4013      	ands	r3, r2
 8001290:	b25a      	sxtb	r2, r3
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	f107 0110 	add.w	r1, r7, #16
 800129a:	440b      	add	r3, r1
 800129c:	f803 2c04 	strb.w	r2, [r3, #-4]

				/* Hardware interrupt un-mapping */
				data[2] &= (~(uint8_t) ((int_map & (0xFF00)) >> 8));
 80012a0:	7bbb      	ldrb	r3, [r7, #14]
 80012a2:	b25a      	sxtb	r2, r3
 80012a4:	88bb      	ldrh	r3, [r7, #4]
 80012a6:	0a1b      	lsrs	r3, r3, #8
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	b25b      	sxtb	r3, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	4013      	ands	r3, r2
 80012b2:	b25b      	sxtb	r3, r3
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	73bb      	strb	r3, [r7, #14]
			}

			rslt = bma4_write_regs(index[int_line], &data[int_line], 1, dev);
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f107 0210 	add.w	r2, r7, #16
 80012be:	4413      	add	r3, r2
 80012c0:	f813 0c08 	ldrb.w	r0, [r3, #-8]
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	f107 020c 	add.w	r2, r7, #12
 80012ca:	18d1      	adds	r1, r2, r3
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	2201      	movs	r2, #1
 80012d0:	f7ff fa51 	bl	8000776 <bma4_write_regs>
 80012d4:	4603      	mov	r3, r0
 80012d6:	73fb      	strb	r3, [r7, #15]
			if (rslt == BMA4_OK) {
 80012d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d109      	bne.n	80012f4 <bma4_map_interrupt+0xf0>
				rslt = bma4_write_regs(BMA4_INT_MAP_DATA_ADDR, &data[2], 1,
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	1c99      	adds	r1, r3, #2
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	2201      	movs	r2, #1
 80012ea:	2058      	movs	r0, #88	; 0x58
 80012ec:	f7ff fa43 	bl	8000776 <bma4_write_regs>
 80012f0:	4603      	mov	r3, r0
 80012f2:	73fb      	strb	r3, [r7, #15]
						dev);
			}
		}
	}

	return rslt;
 80012f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	0801efa8 	.word	0x0801efa8

08001304 <bma4_read_int_status>:
}

/*!
 *  @brief This API reads the Feature and Hardware interrupt status from the sensor.
 */
int8_t bma4_read_int_status(uint16_t *int_status, struct bma4_dev *dev) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t data[2] = { 0 };
 800130e:	2300      	movs	r3, #0
 8001310:	81bb      	strh	r3, [r7, #12]

	/* Check the dev structure as NULL */
	rslt = null_pointer_check(dev);
 8001312:	6838      	ldr	r0, [r7, #0]
 8001314:	f000 f878 	bl	8001408 <null_pointer_check>
 8001318:	4603      	mov	r3, r0
 800131a:	73fb      	strb	r3, [r7, #15]

	if ((rslt == BMA4_OK) && (int_status != NULL)) {
 800131c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d118      	bne.n	8001356 <bma4_read_int_status+0x52>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d015      	beq.n	8001356 <bma4_read_int_status+0x52>
		rslt = bma4_read_regs(BMA4_INT_STAT_0_ADDR, data, 2, dev);
 800132a:	f107 010c 	add.w	r1, r7, #12
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	2202      	movs	r2, #2
 8001332:	201c      	movs	r0, #28
 8001334:	f7ff fc1f 	bl	8000b76 <bma4_read_regs>
 8001338:	4603      	mov	r3, r0
 800133a:	73fb      	strb	r3, [r7, #15]
		if (rslt == BMA4_OK) {
 800133c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d10a      	bne.n	800135a <bma4_read_int_status+0x56>
			*int_status = data[0];
 8001344:	7b3b      	ldrb	r3, [r7, #12]
 8001346:	b29a      	uxth	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	801a      	strh	r2, [r3, #0]
			*((uint8_t*) int_status + 1) = data[1];
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3301      	adds	r3, #1
 8001350:	7b7a      	ldrb	r2, [r7, #13]
 8001352:	701a      	strb	r2, [r3, #0]
		if (rslt == BMA4_OK) {
 8001354:	e001      	b.n	800135a <bma4_read_int_status+0x56>
		}
	} else {
		rslt = BMA4_E_NULL_PTR;
 8001356:	23ff      	movs	r3, #255	; 0xff
 8001358:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800135a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <stream_transfer_write>:
/*!
 *  @brief This API writes the config stream data in memory using burst mode
 *  @note index value should be even number.
 */
static int8_t stream_transfer_write(const uint8_t *stream_data, uint16_t index,
		struct bma4_dev *dev) {
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	60f8      	str	r0, [r7, #12]
 800136e:	460b      	mov	r3, r1
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	817b      	strh	r3, [r7, #10]
	int8_t rslt;
	uint8_t asic_msb = (uint8_t) ((index / 2) >> 4);
 8001374:	897b      	ldrh	r3, [r7, #10]
 8001376:	085b      	lsrs	r3, r3, #1
 8001378:	b29b      	uxth	r3, r3
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	b29b      	uxth	r3, r3
 800137e:	b2db      	uxtb	r3, r3
 8001380:	75bb      	strb	r3, [r7, #22]
	uint8_t asic_lsb = ((index / 2) & 0x0F);
 8001382:	897b      	ldrh	r3, [r7, #10]
 8001384:	085b      	lsrs	r3, r3, #1
 8001386:	b29b      	uxth	r3, r3
 8001388:	b2db      	uxtb	r3, r3
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	b2db      	uxtb	r3, r3
 8001390:	757b      	strb	r3, [r7, #21]

	/* Check the dev structure as NULL */
	rslt = null_pointer_check(dev);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f838 	bl	8001408 <null_pointer_check>
 8001398:	4603      	mov	r3, r0
 800139a:	75fb      	strb	r3, [r7, #23]

	if ((rslt == BMA4_OK) && (stream_data != NULL)) {
 800139c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d127      	bne.n	80013f4 <stream_transfer_write+0x8e>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d024      	beq.n	80013f4 <stream_transfer_write+0x8e>
		rslt = bma4_write_regs(BMA4_RESERVED_REG_5B_ADDR, &asic_lsb, 1, dev);
 80013aa:	f107 0115 	add.w	r1, r7, #21
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2201      	movs	r2, #1
 80013b2:	205b      	movs	r0, #91	; 0x5b
 80013b4:	f7ff f9df 	bl	8000776 <bma4_write_regs>
 80013b8:	4603      	mov	r3, r0
 80013ba:	75fb      	strb	r3, [r7, #23]
		if (rslt == BMA4_OK) {
 80013bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d11a      	bne.n	80013fa <stream_transfer_write+0x94>
			rslt = bma4_write_regs(BMA4_RESERVED_REG_5C_ADDR, &asic_msb, 1,
 80013c4:	f107 0116 	add.w	r1, r7, #22
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2201      	movs	r2, #1
 80013cc:	205c      	movs	r0, #92	; 0x5c
 80013ce:	f7ff f9d2 	bl	8000776 <bma4_write_regs>
 80013d2:	4603      	mov	r3, r0
 80013d4:	75fb      	strb	r3, [r7, #23]
					dev);
			if (rslt == BMA4_OK) {
 80013d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10d      	bne.n	80013fa <stream_transfer_write+0x94>
				rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR,
						(uint8_t*) stream_data, dev->read_write_len, dev);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	8a9b      	ldrh	r3, [r3, #20]
				rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR,
 80013e2:	461a      	mov	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68f9      	ldr	r1, [r7, #12]
 80013e8:	205e      	movs	r0, #94	; 0x5e
 80013ea:	f7ff faa7 	bl	800093c <write_regs>
 80013ee:	4603      	mov	r3, r0
 80013f0:	75fb      	strb	r3, [r7, #23]
		if (rslt == BMA4_OK) {
 80013f2:	e002      	b.n	80013fa <stream_transfer_write+0x94>
			}
		}
	} else {
		rslt = BMA4_E_NULL_PTR;
 80013f4:	23ff      	movs	r3, #255	; 0xff
 80013f6:	75fb      	strb	r3, [r7, #23]
 80013f8:	e000      	b.n	80013fc <stream_transfer_write+0x96>
		if (rslt == BMA4_OK) {
 80013fa:	bf00      	nop
	}

	return rslt;
 80013fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <null_pointer_check>:
}

/*!
 * @brief This internal API checks null pointer error
 */
static int8_t null_pointer_check(const struct bma4_dev *dev) {
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	int8_t rslt = BMA4_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	73fb      	strb	r3, [r7, #15]

	if ((dev == NULL) || (dev->bus_read == NULL) || (dev->bus_write == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00b      	beq.n	8001432 <null_pointer_check+0x2a>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d007      	beq.n	8001432 <null_pointer_check+0x2a>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <null_pointer_check+0x2a>
			|| (dev->intf_ptr == NULL)) {
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <null_pointer_check+0x30>
		rslt = BMA4_E_NULL_PTR;
 8001432:	23ff      	movs	r3, #255	; 0xff
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	e001      	b.n	800143c <null_pointer_check+0x34>
	} else {
		rslt = BMA4_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800143c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <bma456_init>:
 * @brief This API is the entry point.
 * Call this API before using all other APIs.
 * This API reads the chip-id of the sensor and sets the resolution.
 */
int8_t bma456_init(struct bma4_dev *dev)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bma4_init(dev);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff f8cb 	bl	80005f0 <bma4_init>
 800145a:	4603      	mov	r3, r0
 800145c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMA4_OK)
 800145e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d113      	bne.n	800148e <bma456_init+0x42>
    {
//printf("%x CHIPID\r\n",dev->chip_id);
        if (dev->chip_id == BMA456_CHIP_ID)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b16      	cmp	r3, #22
 800146c:	d10d      	bne.n	800148a <bma456_init+0x3e>
        {
            /* Resolution of BMA456 sensor is 16 bit */
            dev->resolution = 16;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2210      	movs	r2, #16
 8001472:	731a      	strb	r2, [r3, #12]
            dev->feature_len = BMA456_FEATURE_SIZE;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2246      	movs	r2, #70	; 0x46
 8001478:	759a      	strb	r2, [r3, #22]
            dev->variant = BMA45X_VARIANT;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2202      	movs	r2, #2
 800147e:	735a      	strb	r2, [r3, #13]
            //printf("config size %d \r\n", sizeof(bma456_config_file));
            dev->config_size = sizeof(bma456_config_file);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001486:	859a      	strh	r2, [r3, #44]	; 0x2c
 8001488:	e001      	b.n	800148e <bma456_init+0x42>
        }
        else
        {
            rslt = BMA4_E_INVALID_SENSOR;
 800148a:	23fc      	movs	r3, #252	; 0xfc
 800148c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800148e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <bma456_write_config_file>:
/*!
 * @brief This API is used to upload the configuration file to enable the
 * features of the sensor.
 */
int8_t bma456_write_config_file(struct bma4_dev *dev)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMA4_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d028      	beq.n	8001500 <bma456_write_config_file+0x64>
    {
        if (dev->chip_id == BMA456_CHIP_ID)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b16      	cmp	r3, #22
 80014b4:	d121      	bne.n	80014fa <bma456_write_config_file+0x5e>
        {
            /* Configuration stream read/write length boundary
             * check
             */
            if ((dev->read_write_len >= BMA456_RD_WR_MIN_LEN) && (dev->read_write_len <= BMA456_RD_WR_MAX_LEN))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	8a9b      	ldrh	r3, [r3, #20]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d91a      	bls.n	80014f4 <bma456_write_config_file+0x58>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	8a9b      	ldrh	r3, [r3, #20]
 80014c2:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80014c6:	d815      	bhi.n	80014f4 <bma456_write_config_file+0x58>
            {

                /* Even or odd check */
                if ((dev->read_write_len % 2) != 0)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	8a9b      	ldrh	r3, [r3, #20]
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d005      	beq.n	80014e2 <bma456_write_config_file+0x46>
                {
                    dev->read_write_len = dev->read_write_len - 1;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	8a9b      	ldrh	r3, [r3, #20]
 80014da:	3b01      	subs	r3, #1
 80014dc:	b29a      	uxth	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	829a      	strh	r2, [r3, #20]
                }

                /* Assign stream data */
                dev->config_file_ptr = bma456_config_file;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <bma456_write_config_file+0x74>)
 80014e6:	611a      	str	r2, [r3, #16]

                rslt = bma4_write_config_file(dev);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff f8c0 	bl	800066e <bma4_write_config_file>
 80014ee:	4603      	mov	r3, r0
 80014f0:	73fb      	strb	r3, [r7, #15]
 80014f2:	e007      	b.n	8001504 <bma456_write_config_file+0x68>

            }
            else
            {

                rslt = BMA4_E_RD_WR_LENGTH_INVALID;
 80014f4:	23f6      	movs	r3, #246	; 0xf6
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	e004      	b.n	8001504 <bma456_write_config_file+0x68>
            }
        }
        else
        {
            rslt = BMA4_E_INVALID_SENSOR;
 80014fa:	23fc      	movs	r3, #252	; 0xfc
 80014fc:	73fb      	strb	r3, [r7, #15]
 80014fe:	e001      	b.n	8001504 <bma456_write_config_file+0x68>
        }
    }
    else
    {
        rslt = BMA4_E_NULL_PTR;
 8001500:	23ff      	movs	r3, #255	; 0xff
 8001502:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001504:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	08022dd0 	.word	0x08022dd0

08001514 <bma456_map_interrupt>:
/*!
 * @brief This API sets/un-sets the user provided interrupt to either interrupt
 * pin1 or pin2 in the sensor.
 */
int8_t bma456_map_interrupt(uint8_t int_line, uint16_t int_map, uint8_t enable, struct bma4_dev *dev)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	4603      	mov	r3, r0
 800151e:	71fb      	strb	r3, [r7, #7]
 8001520:	460b      	mov	r3, r1
 8001522:	80bb      	strh	r3, [r7, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	71bb      	strb	r3, [r7, #6]
    int8_t rslt = BMA4_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d015      	beq.n	800155e <bma456_map_interrupt+0x4a>
    {
        if (dev->chip_id == BMA456_CHIP_ID)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b16      	cmp	r3, #22
 8001538:	d10e      	bne.n	8001558 <bma456_map_interrupt+0x44>
        {
            if (int_line <= 1)
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d808      	bhi.n	8001552 <bma456_map_interrupt+0x3e>
            {
                /* Map/Unmap the interrupt */
                rslt = bma4_map_interrupt(int_line, int_map, enable, dev);
 8001540:	79ba      	ldrb	r2, [r7, #6]
 8001542:	88b9      	ldrh	r1, [r7, #4]
 8001544:	79f8      	ldrb	r0, [r7, #7]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	f7ff fe5c 	bl	8001204 <bma4_map_interrupt>
 800154c:	4603      	mov	r3, r0
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e007      	b.n	8001562 <bma456_map_interrupt+0x4e>
            }
            else
            {
                rslt = BMA4_E_INT_LINE_INVALID;
 8001552:	23f7      	movs	r3, #247	; 0xf7
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	e004      	b.n	8001562 <bma456_map_interrupt+0x4e>
            }
        }
        else
        {
            rslt = BMA4_E_INVALID_SENSOR;
 8001558:	23fc      	movs	r3, #252	; 0xfc
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e001      	b.n	8001562 <bma456_map_interrupt+0x4e>
        }
    }
    else
    {
        rslt = BMA4_E_NULL_PTR;
 800155e:	23ff      	movs	r3, #255	; 0xff
 8001560:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001562:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <bma456_read_int_status>:

/*!
 * @brief This API reads the bma456 interrupt status from the sensor.
 */
int8_t bma456_read_int_status(uint16_t *int_status, struct bma4_dev *dev)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMA4_OK;
 8001578:	2300      	movs	r3, #0
 800157a:	73fb      	strb	r3, [r7, #15]

    if ((dev != NULL) && (int_status != NULL))
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d010      	beq.n	80015a4 <bma456_read_int_status+0x36>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00d      	beq.n	80015a4 <bma456_read_int_status+0x36>
    {
        if (dev->chip_id == BMA456_CHIP_ID)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b16      	cmp	r3, #22
 800158e:	d106      	bne.n	800159e <bma456_read_int_status+0x30>
        {
            /* Read the interrupt status */
            rslt = bma4_read_int_status(int_status, dev);
 8001590:	6839      	ldr	r1, [r7, #0]
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff feb6 	bl	8001304 <bma4_read_int_status>
 8001598:	4603      	mov	r3, r0
 800159a:	73fb      	strb	r3, [r7, #15]
        if (dev->chip_id == BMA456_CHIP_ID)
 800159c:	e004      	b.n	80015a8 <bma456_read_int_status+0x3a>
        }
        else
        {
            rslt = BMA4_E_INVALID_SENSOR;
 800159e:	23fc      	movs	r3, #252	; 0xfc
 80015a0:	73fb      	strb	r3, [r7, #15]
        if (dev->chip_id == BMA456_CHIP_ID)
 80015a2:	e001      	b.n	80015a8 <bma456_read_int_status+0x3a>
        }
    }
    else
    {
        rslt = BMA4_E_NULL_PTR;
 80015a4:	23ff      	movs	r3, #255	; 0xff
 80015a6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80015a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <user_i2c_init>:
/*!                User interface functions                                   */

/*!
 * @brief Function for initialization of I2C bus.
 */
int8_t user_i2c_init(void) {
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

	/* Implement I2C bus initialization according to the target machine. */
	return 0;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <user_spi_init>:

/*!
 * @brief Function for initialization of SPI bus.
 */
int8_t user_spi_init(void) {
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

	/* Implement SPI bus initialization according to the target machine. */
	return 0;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <user_spi_read>:

/*!
 * @brief Function for reading the sensor's registers through SPI bus.
 */
int8_t user_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length,
		void *intf_ptr) {
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	4603      	mov	r3, r0
 80015e2:	73fb      	strb	r3, [r7, #15]

	/* Implement the SPI read routine according to the target machine. */
	return 0;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <user_i2c_read>:

/*!
 * @brief Function for reading the sensor's registers through I2C bus.
 */
int8_t user_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length,
		void *intf_ptr) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	4603      	mov	r3, r0
 8001602:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_buf[1] = { reg_addr };
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, 0x30, reg_buf,
 8001608:	f107 0214 	add.w	r2, r7, #20
 800160c:	f04f 33ff 	mov.w	r3, #4294967295
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	2301      	movs	r3, #1
 8001614:	2130      	movs	r1, #48	; 0x30
 8001616:	480b      	ldr	r0, [pc, #44]	; (8001644 <user_i2c_read+0x50>)
 8001618:	f004 faec 	bl	8005bf4 <HAL_I2C_Master_Transmit>
 800161c:	4603      	mov	r3, r0
 800161e:	75fb      	strb	r3, [r7, #23]

//	if (ret != HAL_OK) {
//		printf("#################### HAL_TRANSMIT_FAIL @@\r\n");
//	}

	ret = HAL_I2C_Master_Receive(&hi2c1, 0x30, reg_data, length, HAL_MAX_DELAY);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	b29a      	uxth	r2, r3
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	4613      	mov	r3, r2
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	2130      	movs	r1, #48	; 0x30
 8001630:	4804      	ldr	r0, [pc, #16]	; (8001644 <user_i2c_read+0x50>)
 8001632:	f004 fbd3 	bl	8005ddc <HAL_I2C_Master_Receive>
 8001636:	4603      	mov	r3, r0
 8001638:	75fb      	strb	r3, [r7, #23]

//	if (ret != HAL_OK) {
//		printf("#################### HAL_RECEIVE_FAIL @@\r\n");
//	}
	/* Implement the I2C read routine according to the target machine. */
	return BMA4_INTF_RET_SUCCESS;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000acc 	.word	0x20000acc

08001648 <user_spi_write>:

/*!
 * @brief Function for writing the sensor's registers through SPI bus.
 */
int8_t user_spi_write(uint8_t reg_addr, const uint8_t *reg_data,
		uint32_t length, void *intf_ptr) {
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	4603      	mov	r3, r0
 8001656:	73fb      	strb	r3, [r7, #15]

	/* Implement the SPI write routine according to the target machine. */
	return 0;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <user_i2c_write>:

/*!
 * @brief Function for writing the sensor's registers through I2C bus.
 */
int8_t user_i2c_write(uint8_t reg_addr, const uint8_t *reg_data,
		uint32_t length, void *intf_ptr) {
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af02      	add	r7, sp, #8
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	4603      	mov	r3, r0
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	466b      	mov	r3, sp
 800167a:	461d      	mov	r5, r3

	uint8_t buffer[length + 1];
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	1c58      	adds	r0, r3, #1
 8001680:	4603      	mov	r3, r0
 8001682:	3b01      	subs	r3, #1
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	4601      	mov	r1, r0
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	f04f 0400 	mov.w	r4, #0
 8001694:	00d4      	lsls	r4, r2, #3
 8001696:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800169a:	00cb      	lsls	r3, r1, #3
 800169c:	4601      	mov	r1, r0
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	f04f 0300 	mov.w	r3, #0
 80016a6:	f04f 0400 	mov.w	r4, #0
 80016aa:	00d4      	lsls	r4, r2, #3
 80016ac:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80016b0:	00cb      	lsls	r3, r1, #3
 80016b2:	1dc3      	adds	r3, r0, #7
 80016b4:	08db      	lsrs	r3, r3, #3
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	ebad 0d03 	sub.w	sp, sp, r3
 80016bc:	ab02      	add	r3, sp, #8
 80016be:	3300      	adds	r3, #0
 80016c0:	61bb      	str	r3, [r7, #24]

	buffer[0] = reg_addr;
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	7bfa      	ldrb	r2, [r7, #15]
 80016c6:	701a      	strb	r2, [r3, #0]
	memcpy(&buffer[1], reg_data, length);
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	3301      	adds	r3, #1
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	68b9      	ldr	r1, [r7, #8]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f018 fca0 	bl	801a016 <memcpy>

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, 0x30, buffer,
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	3301      	adds	r3, #1
 80016de:	b299      	uxth	r1, r3
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	460b      	mov	r3, r1
 80016e8:	2130      	movs	r1, #48	; 0x30
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <user_i2c_write+0x98>)
 80016ec:	f004 fa82 	bl	8005bf4 <HAL_I2C_Master_Transmit>
 80016f0:	4603      	mov	r3, r0
 80016f2:	75fb      	strb	r3, [r7, #23]
						length+1, HAL_MAX_DELAY);

	return BMA4_INTF_RET_SUCCESS;
 80016f4:	2300      	movs	r3, #0
 80016f6:	46ad      	mov	sp, r5
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001700:	20000acc 	.word	0x20000acc

08001704 <user_delay>:

/*!
 * @brief This function provides the delay for required time (Microseconds) as per the input provided in some of the
 * APIs.
 */
void user_delay(uint32_t period_us, void *intf_ptr) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
	/* Implement the delay routine according to the target machine. */
	osDelay(1);
 800170e:	2001      	movs	r0, #1
 8001710:	f008 f93a 	bl	8009988 <osDelay>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <bma4_interface_selection>:

/*!
 *  @brief Function to select the interface between SPI and I2C.
 */
int8_t bma4_interface_selection(struct bma4_dev *bma) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	int8_t rslt = BMA4_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	73fb      	strb	r3, [r7, #15]

	if (bma != NULL) {
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d02e      	beq.n	800178c <bma4_interface_selection+0x70>
		/* Select the interface for execution
		 * For I2C : BMA4_I2C_INTF
		 * For SPI : BMA4_SPI_INTF
		 */
		bma->intf = BMA4_I2C_INTF;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	721a      	strb	r2, [r3, #8]

		/* Bus configuration : I2C */
		if (bma->intf == BMA4_I2C_INTF) {
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7a1b      	ldrb	r3, [r3, #8]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d10b      	bne.n	8001754 <bma4_interface_selection+0x38>
			//printf("I2C Interface \r\n");

			/* To initialize the user I2C function */
			user_i2c_init();
 800173c:	f7ff ff3a 	bl	80015b4 <user_i2c_init>
			dev_addr = 0x30; //BMA4_I2C_ADDR_PRIMARY
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <bma4_interface_selection+0x80>)
 8001742:	2230      	movs	r2, #48	; 0x30
 8001744:	701a      	strb	r2, [r3, #0]
			bma->bus_read = user_i2c_read;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a15      	ldr	r2, [pc, #84]	; (80017a0 <bma4_interface_selection+0x84>)
 800174a:	621a      	str	r2, [r3, #32]
			bma->bus_write = user_i2c_write;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a15      	ldr	r2, [pc, #84]	; (80017a4 <bma4_interface_selection+0x88>)
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
 8001752:	e011      	b.n	8001778 <bma4_interface_selection+0x5c>
		}

		/* Bus configuration : SPI */
		else if (bma->intf == BMA4_SPI_INTF) {
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7a1b      	ldrb	r3, [r3, #8]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10d      	bne.n	8001778 <bma4_interface_selection+0x5c>
			printf("SPI Interface \r\n");
 800175c:	4812      	ldr	r0, [pc, #72]	; (80017a8 <bma4_interface_selection+0x8c>)
 800175e:	f019 fbb7 	bl	801aed0 <puts>

			/* To initialize the user SPI function */
			user_spi_init();
 8001762:	f7ff ff2f 	bl	80015c4 <user_spi_init>
			dev_addr = 0;
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <bma4_interface_selection+0x80>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
			bma->bus_read = user_spi_read;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <bma4_interface_selection+0x90>)
 8001770:	621a      	str	r2, [r3, #32]
			bma->bus_write = user_spi_write;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a0e      	ldr	r2, [pc, #56]	; (80017b0 <bma4_interface_selection+0x94>)
 8001776:	625a      	str	r2, [r3, #36]	; 0x24
		}

		/* Assign device address to interface pointer */
		bma->intf_ptr = &dev_addr;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a08      	ldr	r2, [pc, #32]	; (800179c <bma4_interface_selection+0x80>)
 800177c:	605a      	str	r2, [r3, #4]

		/* Configure delay in microseconds */
		bma->delay_us = user_delay;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a0c      	ldr	r2, [pc, #48]	; (80017b4 <bma4_interface_selection+0x98>)
 8001782:	629a      	str	r2, [r3, #40]	; 0x28

		/* Configure max read/write length (in bytes) ( Supported length depends on target machine) */
		bma->read_write_len = 8;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2208      	movs	r2, #8
 8001788:	829a      	strh	r2, [r3, #20]
 800178a:	e001      	b.n	8001790 <bma4_interface_selection+0x74>
	} else {
		rslt = BMA4_E_NULL_PTR;
 800178c:	23ff      	movs	r3, #255	; 0xff
 800178e:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001790:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000210 	.word	0x20000210
 80017a0:	080015f5 	.word	0x080015f5
 80017a4:	08001669 	.word	0x08001669
 80017a8:	0801efb0 	.word	0x0801efb0
 80017ac:	080015d5 	.word	0x080015d5
 80017b0:	08001649 	.word	0x08001649
 80017b4:	08001705 	.word	0x08001705

080017b8 <bma4_error_codes_print_result>:

/*!
 *  @brief Prints the execution status of the APIs.
 */
void bma4_error_codes_print_result(const char api_name[], uint16_t rslt) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	807b      	strh	r3, [r7, #2]
	if (rslt != BMA4_OK) {
 80017c4:	887b      	ldrh	r3, [r7, #2]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d032      	beq.n	8001830 <bma4_error_codes_print_result+0x78>
		printf("%s\r\n", api_name);
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	481a      	ldr	r0, [pc, #104]	; (8001838 <bma4_error_codes_print_result+0x80>)
 80017ce:	f019 fb0b 	bl	801ade8 <iprintf>
		if (rslt & BMA4_E_NULL_PTR) {
 80017d2:	887b      	ldrh	r3, [r7, #2]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <bma4_error_codes_print_result+0x2c>
			printf("Error [%d] : Null pointer\r\n", rslt);
 80017d8:	887b      	ldrh	r3, [r7, #2]
 80017da:	4619      	mov	r1, r3
 80017dc:	4817      	ldr	r0, [pc, #92]	; (800183c <bma4_error_codes_print_result+0x84>)
 80017de:	f019 fb03 	bl	801ade8 <iprintf>
		} else {
			/* For more error codes refer "*_defs.h" */
			printf("Error [%d] : Unknown error code\r\n", rslt);
		}
	}
}
 80017e2:	e025      	b.n	8001830 <bma4_error_codes_print_result+0x78>
		} else if (rslt & BMA4_E_CONFIG_STREAM_ERROR) {
 80017e4:	887b      	ldrh	r3, [r7, #2]
 80017e6:	f023 0304 	bic.w	r3, r3, #4
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <bma4_error_codes_print_result+0x42>
			printf("Error [%d] : Invalid configuration stream\r\n", rslt);
 80017ee:	887b      	ldrh	r3, [r7, #2]
 80017f0:	4619      	mov	r1, r3
 80017f2:	4813      	ldr	r0, [pc, #76]	; (8001840 <bma4_error_codes_print_result+0x88>)
 80017f4:	f019 faf8 	bl	801ade8 <iprintf>
}
 80017f8:	e01a      	b.n	8001830 <bma4_error_codes_print_result+0x78>
		} else if (rslt & BMA4_E_SELF_TEST_FAIL) {
 80017fa:	887b      	ldrh	r3, [r7, #2]
 80017fc:	f023 0305 	bic.w	r3, r3, #5
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <bma4_error_codes_print_result+0x58>
			printf("Error [%d] : Self test failed\r\n", rslt);
 8001804:	887b      	ldrh	r3, [r7, #2]
 8001806:	4619      	mov	r1, r3
 8001808:	480e      	ldr	r0, [pc, #56]	; (8001844 <bma4_error_codes_print_result+0x8c>)
 800180a:	f019 faed 	bl	801ade8 <iprintf>
}
 800180e:	e00f      	b.n	8001830 <bma4_error_codes_print_result+0x78>
		} else if (rslt & BMA4_E_INVALID_SENSOR) {
 8001810:	887b      	ldrh	r3, [r7, #2]
 8001812:	f023 0303 	bic.w	r3, r3, #3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d005      	beq.n	8001826 <bma4_error_codes_print_result+0x6e>
			printf("Error [%d] : Device not found\r\n", rslt);
 800181a:	887b      	ldrh	r3, [r7, #2]
 800181c:	4619      	mov	r1, r3
 800181e:	480a      	ldr	r0, [pc, #40]	; (8001848 <bma4_error_codes_print_result+0x90>)
 8001820:	f019 fae2 	bl	801ade8 <iprintf>
}
 8001824:	e004      	b.n	8001830 <bma4_error_codes_print_result+0x78>
			printf("Error [%d] : Unknown error code\r\n", rslt);
 8001826:	887b      	ldrh	r3, [r7, #2]
 8001828:	4619      	mov	r1, r3
 800182a:	4808      	ldr	r0, [pc, #32]	; (800184c <bma4_error_codes_print_result+0x94>)
 800182c:	f019 fadc 	bl	801ade8 <iprintf>
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	0801efc0 	.word	0x0801efc0
 800183c:	0801efc8 	.word	0x0801efc8
 8001840:	0801efe4 	.word	0x0801efe4
 8001844:	0801f010 	.word	0x0801f010
 8001848:	0801f030 	.word	0x0801f030
 800184c:	0801f050 	.word	0x0801f050

08001850 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4a07      	ldr	r2, [pc, #28]	; (8001894 <vApplicationGetIdleTaskMemory+0x2c>)
 8001878:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	4a06      	ldr	r2, [pc, #24]	; (8001898 <vApplicationGetIdleTaskMemory+0x30>)
 800187e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001886:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	20000214 	.word	0x20000214
 8001898:	200002c8 	.word	0x200002c8

0800189c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	uint8_t ch8 = ch;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch8, 1, HAL_MAX_DELAY);
 80018aa:	f107 010f 	add.w	r1, r7, #15
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
 80018b2:	2201      	movs	r2, #1
 80018b4:	4803      	ldr	r0, [pc, #12]	; (80018c4 <__io_putchar+0x28>)
 80018b6:	f006 fa11 	bl	8007cdc <HAL_UART_Transmit>
	return ch;
 80018ba:	687b      	ldr	r3, [r7, #4]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200009fc 	.word	0x200009fc

080018c8 <__io_getchar>:

int __io_getchar() {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
	uint8_t ch8;
	HAL_UART_Receive(&huart3, &ch8, 1, HAL_MAX_DELAY);
 80018ce:	1df9      	adds	r1, r7, #7
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295
 80018d4:	2201      	movs	r2, #1
 80018d6:	4804      	ldr	r0, [pc, #16]	; (80018e8 <__io_getchar+0x20>)
 80018d8:	f006 fa91 	bl	8007dfe <HAL_UART_Receive>
	return 0;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200009fc 	.word	0x200009fc

080018ec <print_ip>:

void print_ip(unsigned int ip, unsigned int netmask, unsigned int gw_ip) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af02      	add	r7, sp, #8
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
	unsigned char bytes[4];
	bytes[0] = ip & 0xFF;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	753b      	strb	r3, [r7, #20]
	bytes[1] = (ip >> 8) & 0xFF;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	b2db      	uxtb	r3, r3
 8001904:	757b      	strb	r3, [r7, #21]
	bytes[2] = (ip >> 16) & 0xFF;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	0c1b      	lsrs	r3, r3, #16
 800190a:	b2db      	uxtb	r3, r3
 800190c:	75bb      	strb	r3, [r7, #22]
	bytes[3] = (ip >> 24) & 0xFF;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	0e1b      	lsrs	r3, r3, #24
 8001912:	b2db      	uxtb	r3, r3
 8001914:	75fb      	strb	r3, [r7, #23]
	printf("ip %d.%d.%d.%d\r\n", bytes[3], bytes[2], bytes[1], bytes[0]);
 8001916:	7dfb      	ldrb	r3, [r7, #23]
 8001918:	4619      	mov	r1, r3
 800191a:	7dbb      	ldrb	r3, [r7, #22]
 800191c:	461a      	mov	r2, r3
 800191e:	7d7b      	ldrb	r3, [r7, #21]
 8001920:	4618      	mov	r0, r3
 8001922:	7d3b      	ldrb	r3, [r7, #20]
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	4603      	mov	r3, r0
 8001928:	481e      	ldr	r0, [pc, #120]	; (80019a4 <print_ip+0xb8>)
 800192a:	f019 fa5d 	bl	801ade8 <iprintf>

	bytes[0] = netmask & 0xFF;
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	753b      	strb	r3, [r7, #20]
	bytes[1] = (netmask >> 8) & 0xFF;
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	0a1b      	lsrs	r3, r3, #8
 8001938:	b2db      	uxtb	r3, r3
 800193a:	757b      	strb	r3, [r7, #21]
	bytes[2] = (netmask >> 16) & 0xFF;
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	0c1b      	lsrs	r3, r3, #16
 8001940:	b2db      	uxtb	r3, r3
 8001942:	75bb      	strb	r3, [r7, #22]
	bytes[3] = (netmask >> 24) & 0xFF;
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	0e1b      	lsrs	r3, r3, #24
 8001948:	b2db      	uxtb	r3, r3
 800194a:	75fb      	strb	r3, [r7, #23]
	printf("netmask %d.%d.%d.%d\r\n", bytes[3], bytes[2], bytes[1], bytes[0]);
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	4619      	mov	r1, r3
 8001950:	7dbb      	ldrb	r3, [r7, #22]
 8001952:	461a      	mov	r2, r3
 8001954:	7d7b      	ldrb	r3, [r7, #21]
 8001956:	4618      	mov	r0, r3
 8001958:	7d3b      	ldrb	r3, [r7, #20]
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	4603      	mov	r3, r0
 800195e:	4812      	ldr	r0, [pc, #72]	; (80019a8 <print_ip+0xbc>)
 8001960:	f019 fa42 	bl	801ade8 <iprintf>

	bytes[0] = gw_ip & 0xFF;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	753b      	strb	r3, [r7, #20]
	bytes[1] = (gw_ip >> 8) & 0xFF;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	b2db      	uxtb	r3, r3
 8001970:	757b      	strb	r3, [r7, #21]
	bytes[2] = (gw_ip >> 16) & 0xFF;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	0c1b      	lsrs	r3, r3, #16
 8001976:	b2db      	uxtb	r3, r3
 8001978:	75bb      	strb	r3, [r7, #22]
	bytes[3] = (gw_ip >> 24) & 0xFF;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	0e1b      	lsrs	r3, r3, #24
 800197e:	b2db      	uxtb	r3, r3
 8001980:	75fb      	strb	r3, [r7, #23]
	printf("gw_ip %d.%d.%d.%d\r\n", bytes[3], bytes[2], bytes[1], bytes[0]);
 8001982:	7dfb      	ldrb	r3, [r7, #23]
 8001984:	4619      	mov	r1, r3
 8001986:	7dbb      	ldrb	r3, [r7, #22]
 8001988:	461a      	mov	r2, r3
 800198a:	7d7b      	ldrb	r3, [r7, #21]
 800198c:	4618      	mov	r0, r3
 800198e:	7d3b      	ldrb	r3, [r7, #20]
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	4603      	mov	r3, r0
 8001994:	4805      	ldr	r0, [pc, #20]	; (80019ac <print_ip+0xc0>)
 8001996:	f019 fa27 	bl	801ade8 <iprintf>
}
 800199a:	bf00      	nop
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	0801f074 	.word	0x0801f074
 80019a8:	0801f088 	.word	0x0801f088
 80019ac:	0801f0a0 	.word	0x0801f0a0

080019b0 <lsb_to_ms2>:

static float lsb_to_ms2(int16_t val, float g_range, uint8_t bit_width) {
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	ed87 0a00 	vstr	s0, [r7]
 80019bc:	460a      	mov	r2, r1
 80019be:	80fb      	strh	r3, [r7, #6]
 80019c0:	4613      	mov	r3, r2
 80019c2:	717b      	strb	r3, [r7, #5]
	float half_scale = (1 << bit_width) / 2.0f;
 80019c4:	797b      	ldrb	r3, [r7, #5]
 80019c6:	2201      	movs	r2, #1
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80019d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019dc:	edc7 7a03 	vstr	s15, [r7, #12]
	return ((float) (GRAVITY_EARTH * val * g_range)) / half_scale;
 80019e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ec:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001a18 <lsb_to_ms2+0x68>
 80019f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019f4:	edd7 7a00 	vldr	s15, [r7]
 80019f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a00:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a04:	eef0 7a66 	vmov.f32	s15, s13
}
 8001a08:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	411ce80a 	.word	0x411ce80a
 8001a1c:	00000000 	.word	0x00000000

08001a20 <collectionTask>:

const float LM75A_DEGREES_RESOLUTION = 0.125;
void collectionTask(void const *argument) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	ed2d 8b02 	vpush	{d8}
 8001a26:	b08e      	sub	sp, #56	; 0x38
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	6078      	str	r0, [r7, #4]
	printf("----- StartCollectionTask ------\r\n");
 8001a2c:	485c      	ldr	r0, [pc, #368]	; (8001ba0 <collectionTask+0x180>)
 8001a2e:	f019 fa4f 	bl	801aed0 <puts>
	uint32_t adc;
	float co_tmp;
	float V;

	//gpio
	uint8_t fext_no = HAL_GPIO_ReadPin(GPIOG, FEXT_NO_Pin); // FEXT EMPTY
 8001a32:	2108      	movs	r1, #8
 8001a34:	485b      	ldr	r0, [pc, #364]	; (8001ba4 <collectionTask+0x184>)
 8001a36:	f003 ffe9 	bl	8005a0c <HAL_GPIO_ReadPin>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t fext_nc = HAL_GPIO_ReadPin(GPIOG, FEXT_NC_Pin); // FEXT NOT CONNECTED
 8001a40:	2110      	movs	r1, #16
 8001a42:	4858      	ldr	r0, [pc, #352]	; (8001ba4 <collectionTask+0x184>)
 8001a44:	f003 ffe2 	bl	8005a0c <HAL_GPIO_ReadPin>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	uint8_t fire0 = HAL_GPIO_ReadPin(GPIOD, FIRE0_Pin); // temp up
 8001a4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a52:	4855      	ldr	r0, [pc, #340]	; (8001ba8 <collectionTask+0x188>)
 8001a54:	f003 ffda 	bl	8005a0c <HAL_GPIO_ReadPin>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t fire1 = HAL_GPIO_ReadPin(GPIOD, FIRE1_Pin); // fire up
 8001a5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a62:	4851      	ldr	r0, [pc, #324]	; (8001ba8 <collectionTask+0x188>)
 8001a64:	f003 ffd2 	bl	8005a0c <HAL_GPIO_ReadPin>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	fext_stat = fext_no << 1 | fext_nc;
 8001a6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	b25a      	sxtb	r2, r3
 8001a76:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	b25b      	sxtb	r3, r3
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b4a      	ldr	r3, [pc, #296]	; (8001bac <collectionTask+0x18c>)
 8001a82:	701a      	strb	r2, [r3, #0]
	fire = fire0 << 1 | fire1;
 8001a84:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	b25a      	sxtb	r2, r3
 8001a8c:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001a90:	4313      	orrs	r3, r2
 8001a92:	b25b      	sxtb	r3, r3
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4b46      	ldr	r3, [pc, #280]	; (8001bb0 <collectionTask+0x190>)
 8001a98:	701a      	strb	r2, [r3, #0]
	//i2c
	HAL_StatusTypeDef ret;
	int8_t rslt;

	int16_t refactored_value;
	uint8_t *ptr = (uint8_t*) &refactored_value;
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t send_buf[1] = { 0x00 };
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	743b      	strb	r3, [r7, #16]
	uint8_t i2c_rx_buf[2] = { 0 };
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	81bb      	strh	r3, [r7, #12]

	float real_value;

	while (1) {
		// ---------------------- START ADC ----------------------
		osDelay(1000);
 8001aa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aac:	f007 ff6c 	bl	8009988 <osDelay>

		printf("========== ADC ==========\r\n");
 8001ab0:	4840      	ldr	r0, [pc, #256]	; (8001bb4 <collectionTask+0x194>)
 8001ab2:	f019 fa0d 	bl	801aed0 <puts>
		printf("       ADC    V         Value\r\n");
 8001ab6:	4840      	ldr	r0, [pc, #256]	; (8001bb8 <collectionTask+0x198>)
 8001ab8:	f019 fa0a 	bl	801aed0 <puts>
//		V = adc * (3.3f / 4096.0f);
//		temp = 0x10;
//		printf("TEMP : %d , %f, %f\r\n", adc, temp);

		// co , PC2 , SMOKE_A
		HAL_ADC_Start(&hadc2);
 8001abc:	483f      	ldr	r0, [pc, #252]	; (8001bbc <collectionTask+0x19c>)
 8001abe:	f002 f96f 	bl	8003da0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001ac2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac6:	483d      	ldr	r0, [pc, #244]	; (8001bbc <collectionTask+0x19c>)
 8001ac8:	f002 fa2a 	bl	8003f20 <HAL_ADC_PollForConversion>
		adc = HAL_ADC_GetValue(&hadc2);
 8001acc:	483b      	ldr	r0, [pc, #236]	; (8001bbc <collectionTask+0x19c>)
 8001ace:	f002 faab 	bl	8004028 <HAL_ADC_GetValue>
 8001ad2:	6238      	str	r0, [r7, #32]
		V = adc * (3.3f / 4096.0f);
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	ee07 3a90 	vmov	s15, r3
 8001ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ade:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001bc0 <collectionTask+0x1a0>
 8001ae2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae6:	edc7 7a07 	vstr	s15, [r7, #28]
		V = V * 5 / 3.3f;
 8001aea:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aee:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001af2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001af6:	eddf 6a33 	vldr	s13, [pc, #204]	; 8001bc4 <collectionTask+0x1a4>
 8001afa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001afe:	edc7 7a07 	vstr	s15, [r7, #28]

		co_tmp = 113.26042 - (271.01187 * V) + (148.17739 * pow(V, 2)); // * 5/3.3
 8001b02:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b0a:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001b88 <collectionTask+0x168>
 8001b0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b12:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001b90 <collectionTask+0x170>
 8001b16:	ee36 8b47 	vsub.f64	d8, d6, d7
 8001b1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b22:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b26:	eeb0 0b47 	vmov.f64	d0, d7
 8001b2a:	f01c fbf1 	bl	801e310 <pow>
 8001b2e:	eeb0 6b40 	vmov.f64	d6, d0
 8001b32:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8001b98 <collectionTask+0x178>
 8001b36:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001b3a:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001b3e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b42:	edc7 7a06 	vstr	s15, [r7, #24]

		if (V > 1.0 && co_tmp > 0) {
 8001b46:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b56:	dd3d      	ble.n	8001bd4 <collectionTask+0x1b4>
 8001b58:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b64:	dd36      	ble.n	8001bd4 <collectionTask+0x1b4>
			if (co_tmp > 1000) {
 8001b66:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b6a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001bc8 <collectionTask+0x1a8>
 8001b6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b76:	dd03      	ble.n	8001b80 <collectionTask+0x160>
				co = 1000;
 8001b78:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <collectionTask+0x1ac>)
 8001b7a:	4a15      	ldr	r2, [pc, #84]	; (8001bd0 <collectionTask+0x1b0>)
 8001b7c:	601a      	str	r2, [r3, #0]
			if (co_tmp > 1000) {
 8001b7e:	e02d      	b.n	8001bdc <collectionTask+0x1bc>
			} else {
				co = co_tmp;
 8001b80:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <collectionTask+0x1ac>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	6013      	str	r3, [r2, #0]
			if (co_tmp > 1000) {
 8001b86:	e029      	b.n	8001bdc <collectionTask+0x1bc>
 8001b88:	9e98dcdb 	.word	0x9e98dcdb
 8001b8c:	4070f030 	.word	0x4070f030
 8001b90:	b8a5ce5b 	.word	0xb8a5ce5b
 8001b94:	405c50aa 	.word	0x405c50aa
 8001b98:	2dcb1466 	.word	0x2dcb1466
 8001b9c:	406285ad 	.word	0x406285ad
 8001ba0:	0801f0b4 	.word	0x0801f0b4
 8001ba4:	40021800 	.word	0x40021800
 8001ba8:	40020c00 	.word	0x40020c00
 8001bac:	20000a7c 	.word	0x20000a7c
 8001bb0:	20001390 	.word	0x20001390
 8001bb4:	0801f0d8 	.word	0x0801f0d8
 8001bb8:	0801f0f4 	.word	0x0801f0f4
 8001bbc:	20000a80 	.word	0x20000a80
 8001bc0:	3a533333 	.word	0x3a533333
 8001bc4:	40533333 	.word	0x40533333
 8001bc8:	447a0000 	.word	0x447a0000
 8001bcc:	20001174 	.word	0x20001174
 8001bd0:	447a0000 	.word	0x447a0000
			}
		} else {
			co = 0;
 8001bd4:	4bc8      	ldr	r3, [pc, #800]	; (8001ef8 <collectionTask+0x4d8>)
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
		}

		printf("CO  : %d , %f, %f PPM\r\n", adc, V, co);
 8001bdc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001be0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001be4:	4bc4      	ldr	r3, [pc, #784]	; (8001ef8 <collectionTask+0x4d8>)
 8001be6:	edd3 7a00 	vldr	s15, [r3]
 8001bea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bee:	ed8d 7b00 	vstr	d7, [sp]
 8001bf2:	ec53 2b16 	vmov	r2, r3, d6
 8001bf6:	6a39      	ldr	r1, [r7, #32]
 8001bf8:	48c0      	ldr	r0, [pc, #768]	; (8001efc <collectionTask+0x4dc>)
 8001bfa:	f019 f8f5 	bl	801ade8 <iprintf>

		// voc , PF4 , VOC_A
		HAL_ADC_Start(&hadc3);
 8001bfe:	48c0      	ldr	r0, [pc, #768]	; (8001f00 <collectionTask+0x4e0>)
 8001c00:	f002 f8ce 	bl	8003da0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295
 8001c08:	48bd      	ldr	r0, [pc, #756]	; (8001f00 <collectionTask+0x4e0>)
 8001c0a:	f002 f989 	bl	8003f20 <HAL_ADC_PollForConversion>
		adc = HAL_ADC_GetValue(&hadc3);
 8001c0e:	48bc      	ldr	r0, [pc, #752]	; (8001f00 <collectionTask+0x4e0>)
 8001c10:	f002 fa0a 	bl	8004028 <HAL_ADC_GetValue>
 8001c14:	6238      	str	r0, [r7, #32]
		V = adc * (3.3f / 4096.0f);
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	ee07 3a90 	vmov	s15, r3
 8001c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c20:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8001f04 <collectionTask+0x4e4>
 8001c24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c28:	edc7 7a07 	vstr	s15, [r7, #28]
		V = V * 5 / 3.3;
 8001c2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c30:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001c34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c38:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001c3c:	ed9f 5ba0 	vldr	d5, [pc, #640]	; 8001ec0 <collectionTask+0x4a0>
 8001c40:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001c44:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c48:	edc7 7a07 	vstr	s15, [r7, #28]

		toluene = pow(10, (-5.237f) + 4.848f * (V) + (-0.857f) * pow(V, 2));
 8001c4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c50:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8001f08 <collectionTask+0x4e8>
 8001c54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c58:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8001f0c <collectionTask+0x4ec>
 8001c5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c60:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001c64:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c6c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c70:	eeb0 0b47 	vmov.f64	d0, d7
 8001c74:	f01c fb4c 	bl	801e310 <pow>
 8001c78:	eeb0 6b40 	vmov.f64	d6, d0
 8001c7c:	ed9f 7b92 	vldr	d7, [pc, #584]	; 8001ec8 <collectionTask+0x4a8>
 8001c80:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c84:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001c88:	eeb0 1b47 	vmov.f64	d1, d7
 8001c8c:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8001c90:	f01c fb3e 	bl	801e310 <pow>
 8001c94:	eeb0 7b40 	vmov.f64	d7, d0
 8001c98:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c9c:	4b9c      	ldr	r3, [pc, #624]	; (8001f10 <collectionTask+0x4f0>)
 8001c9e:	edc3 7a00 	vstr	s15, [r3]
		formaldehyde = pow(10,
				(-5.905f) + 6.996f * (V) + (-1.327f) * pow(V, 2));
 8001ca2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ca6:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8001f14 <collectionTask+0x4f4>
 8001caa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cae:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8001f18 <collectionTask+0x4f8>
 8001cb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cb6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001cba:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cc2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001cc6:	eeb0 0b47 	vmov.f64	d0, d7
 8001cca:	f01c fb21 	bl	801e310 <pow>
 8001cce:	eeb0 6b40 	vmov.f64	d6, d0
 8001cd2:	ed9f 7b7f 	vldr	d7, [pc, #508]	; 8001ed0 <collectionTask+0x4b0>
 8001cd6:	ee26 7b07 	vmul.f64	d7, d6, d7
		formaldehyde = pow(10,
 8001cda:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001cde:	eeb0 1b47 	vmov.f64	d1, d7
 8001ce2:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8001ce6:	f01c fb13 	bl	801e310 <pow>
 8001cea:	eeb0 7b40 	vmov.f64	d7, d0
 8001cee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cf2:	4b8a      	ldr	r3, [pc, #552]	; (8001f1c <collectionTask+0x4fc>)
 8001cf4:	edc3 7a00 	vstr	s15, [r3]
		benzene = pow(10, (-11.207f) + 14.718f * (V) + (-3.829f) * pow(V, 2));
 8001cf8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cfc:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001f20 <collectionTask+0x500>
 8001d00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d04:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001f24 <collectionTask+0x504>
 8001d08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d0c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001d10:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d18:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001d1c:	eeb0 0b47 	vmov.f64	d0, d7
 8001d20:	f01c faf6 	bl	801e310 <pow>
 8001d24:	eeb0 6b40 	vmov.f64	d6, d0
 8001d28:	ed9f 7b6b 	vldr	d7, [pc, #428]	; 8001ed8 <collectionTask+0x4b8>
 8001d2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001d30:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001d34:	eeb0 1b47 	vmov.f64	d1, d7
 8001d38:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8001d3c:	f01c fae8 	bl	801e310 <pow>
 8001d40:	eeb0 7b40 	vmov.f64	d7, d0
 8001d44:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d48:	4b77      	ldr	r3, [pc, #476]	; (8001f28 <collectionTask+0x508>)
 8001d4a:	edc3 7a00 	vstr	s15, [r3]

		if (V > 2.62) {
 8001d4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d56:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8001ee0 <collectionTask+0x4c0>
 8001d5a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	dd02      	ble.n	8001d6a <collectionTask+0x34a>
			toluene = 750;
 8001d64:	4b6a      	ldr	r3, [pc, #424]	; (8001f10 <collectionTask+0x4f0>)
 8001d66:	4a71      	ldr	r2, [pc, #452]	; (8001f2c <collectionTask+0x50c>)
 8001d68:	601a      	str	r2, [r3, #0]
		}

		if (V > 2.08) {
 8001d6a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d6e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d72:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8001ee8 <collectionTask+0x4c8>
 8001d76:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7e:	dd02      	ble.n	8001d86 <collectionTask+0x366>
			formaldehyde = 750;
 8001d80:	4b66      	ldr	r3, [pc, #408]	; (8001f1c <collectionTask+0x4fc>)
 8001d82:	4a6a      	ldr	r2, [pc, #424]	; (8001f2c <collectionTask+0x50c>)
 8001d84:	601a      	str	r2, [r3, #0]
		}

		if (V > 1.39) {
 8001d86:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d8e:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8001ef0 <collectionTask+0x4d0>
 8001d92:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9a:	dd02      	ble.n	8001da2 <collectionTask+0x382>
			benzene = 70;
 8001d9c:	4b62      	ldr	r3, [pc, #392]	; (8001f28 <collectionTask+0x508>)
 8001d9e:	4a64      	ldr	r2, [pc, #400]	; (8001f30 <collectionTask+0x510>)
 8001da0:	601a      	str	r2, [r3, #0]

		//formaldehyde = (-3.665) + (3.009 * V ) + ((-0.362) * pow(V, 2));
		//toluene = (-9.234) + (5.249 * V) + ((-0.557)* pow(V, 2));

		//printf("VOCS  : %d , %fV\r\n", adc, V);
		printf("TOL  : %d , %f, %fppm \r\n", adc, V, toluene);
 8001da2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001da6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001daa:	4b59      	ldr	r3, [pc, #356]	; (8001f10 <collectionTask+0x4f0>)
 8001dac:	edd3 7a00 	vldr	s15, [r3]
 8001db0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001db4:	ed8d 7b00 	vstr	d7, [sp]
 8001db8:	ec53 2b16 	vmov	r2, r3, d6
 8001dbc:	6a39      	ldr	r1, [r7, #32]
 8001dbe:	485d      	ldr	r0, [pc, #372]	; (8001f34 <collectionTask+0x514>)
 8001dc0:	f019 f812 	bl	801ade8 <iprintf>
		printf("FOR  : %d , %f, %fppm \r\n", adc, V, formaldehyde);
 8001dc4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dc8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001dcc:	4b53      	ldr	r3, [pc, #332]	; (8001f1c <collectionTask+0x4fc>)
 8001dce:	edd3 7a00 	vldr	s15, [r3]
 8001dd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001dd6:	ed8d 7b00 	vstr	d7, [sp]
 8001dda:	ec53 2b16 	vmov	r2, r3, d6
 8001dde:	6a39      	ldr	r1, [r7, #32]
 8001de0:	4855      	ldr	r0, [pc, #340]	; (8001f38 <collectionTask+0x518>)
 8001de2:	f019 f801 	bl	801ade8 <iprintf>
		printf("BEZ  : %d , %f, %fppm \r\n", adc, V, benzene);
 8001de6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dea:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001dee:	4b4e      	ldr	r3, [pc, #312]	; (8001f28 <collectionTask+0x508>)
 8001df0:	edd3 7a00 	vldr	s15, [r3]
 8001df4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001df8:	ed8d 7b00 	vstr	d7, [sp]
 8001dfc:	ec53 2b16 	vmov	r2, r3, d6
 8001e00:	6a39      	ldr	r1, [r7, #32]
 8001e02:	484e      	ldr	r0, [pc, #312]	; (8001f3c <collectionTask+0x51c>)
 8001e04:	f018 fff0 	bl	801ade8 <iprintf>

		vocs = formaldehyde;
 8001e08:	4b44      	ldr	r3, [pc, #272]	; (8001f1c <collectionTask+0x4fc>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a4c      	ldr	r2, [pc, #304]	; (8001f40 <collectionTask+0x520>)
 8001e0e:	6013      	str	r3, [r2, #0]
		// ---------------------- END ADC ----------------------

		// ---------------------- START I2C ----------------------
		printf("========== I2C ==========\r\n");
 8001e10:	484c      	ldr	r0, [pc, #304]	; (8001f44 <collectionTask+0x524>)
 8001e12:	f019 f85d 	bl	801aed0 <puts>

		ret = HAL_I2C_Master_Transmit(&hi2c1, 0x90, send_buf, 1, HAL_MAX_DELAY);
 8001e16:	f107 0210 	add.w	r2, r7, #16
 8001e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2301      	movs	r3, #1
 8001e22:	2190      	movs	r1, #144	; 0x90
 8001e24:	4848      	ldr	r0, [pc, #288]	; (8001f48 <collectionTask+0x528>)
 8001e26:	f003 fee5 	bl	8005bf4 <HAL_I2C_Master_Transmit>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	75fb      	strb	r3, [r7, #23]
		if (ret != HAL_OK) {
 8001e2e:	7dfb      	ldrb	r3, [r7, #23]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <collectionTask+0x41c>
			printf("LM75AD i2s send error\r\n");
 8001e34:	4845      	ldr	r0, [pc, #276]	; (8001f4c <collectionTask+0x52c>)
 8001e36:	f019 f84b 	bl	801aed0 <puts>
 8001e3a:	e0a6      	b.n	8001f8a <collectionTask+0x56a>
		} else {
			ret = HAL_I2C_Master_Receive(&hi2c1, 0x90, i2c_rx_buf, 2,
 8001e3c:	f107 020c 	add.w	r2, r7, #12
 8001e40:	f04f 33ff 	mov.w	r3, #4294967295
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	2302      	movs	r3, #2
 8001e48:	2190      	movs	r1, #144	; 0x90
 8001e4a:	483f      	ldr	r0, [pc, #252]	; (8001f48 <collectionTask+0x528>)
 8001e4c:	f003 ffc6 	bl	8005ddc <HAL_I2C_Master_Receive>
 8001e50:	4603      	mov	r3, r0
 8001e52:	75fb      	strb	r3, [r7, #23]
			HAL_MAX_DELAY);

			if (ret != HAL_OK) {
 8001e54:	7dfb      	ldrb	r3, [r7, #23]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <collectionTask+0x442>
				printf("LM75AD i2s receive error\r\n");
 8001e5a:	483d      	ldr	r0, [pc, #244]	; (8001f50 <collectionTask+0x530>)
 8001e5c:	f019 f838 	bl	801aed0 <puts>
 8001e60:	e093      	b.n	8001f8a <collectionTask+0x56a>
			} else {

				// Swap bytes
				*ptr = *((uint8_t*) &i2c_rx_buf + 1);
 8001e62:	7b7a      	ldrb	r2, [r7, #13]
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	701a      	strb	r2, [r3, #0]
				*(ptr + 1) = *(uint8_t*) &i2c_rx_buf;
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	7b3a      	ldrb	r2, [r7, #12]
 8001e6e:	701a      	strb	r2, [r3, #0]

				// Shift data (left-aligned)
				refactored_value >>= 5;
 8001e70:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e74:	115b      	asrs	r3, r3, #5
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	82bb      	strh	r3, [r7, #20]

				if (refactored_value & 0x0400) {
 8001e7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d067      	beq.n	8001f58 <collectionTask+0x538>
					// When sign bit is set, set upper unused bits, then 2's complement
					refactored_value |= 0xf800;
 8001e88:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001e8c:	4b31      	ldr	r3, [pc, #196]	; (8001f54 <collectionTask+0x534>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	82bb      	strh	r3, [r7, #20]
					refactored_value = ~refactored_value + 1;
 8001e94:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	425b      	negs	r3, r3
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	b21b      	sxth	r3, r3
 8001ea0:	82bb      	strh	r3, [r7, #20]
					real_value = (float) refactored_value * (-1)
 8001ea2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ea6:	ee07 3a90 	vmov	s15, r3
 8001eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eae:	eef1 7a67 	vneg.f32	s15, s15
							* LM75A_DEGREES_RESOLUTION;
 8001eb2:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
					real_value = (float) refactored_value * (-1)
 8001eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eba:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8001ebe:	e057      	b.n	8001f70 <collectionTask+0x550>
 8001ec0:	66666666 	.word	0x66666666
 8001ec4:	400a6666 	.word	0x400a6666
 8001ec8:	40000000 	.word	0x40000000
 8001ecc:	bfeb6c8b 	.word	0xbfeb6c8b
 8001ed0:	60000000 	.word	0x60000000
 8001ed4:	bff53b64 	.word	0xbff53b64
 8001ed8:	c0000000 	.word	0xc0000000
 8001edc:	c00ea1ca 	.word	0xc00ea1ca
 8001ee0:	8f5c28f6 	.word	0x8f5c28f6
 8001ee4:	4004f5c2 	.word	0x4004f5c2
 8001ee8:	0a3d70a4 	.word	0x0a3d70a4
 8001eec:	4000a3d7 	.word	0x4000a3d7
 8001ef0:	a3d70a3d 	.word	0xa3d70a3d
 8001ef4:	3ff63d70 	.word	0x3ff63d70
 8001ef8:	20001174 	.word	0x20001174
 8001efc:	0801f114 	.word	0x0801f114
 8001f00:	20000c8c 	.word	0x20000c8c
 8001f04:	3a533333 	.word	0x3a533333
 8001f08:	409b22d1 	.word	0x409b22d1
 8001f0c:	40a79581 	.word	0x40a79581
 8001f10:	200009e8 	.word	0x200009e8
 8001f14:	40dfdf3b 	.word	0x40dfdf3b
 8001f18:	40bcf5c3 	.word	0x40bcf5c3
 8001f1c:	20000d60 	.word	0x20000d60
 8001f20:	416b7cee 	.word	0x416b7cee
 8001f24:	41334fdf 	.word	0x41334fdf
 8001f28:	20000b24 	.word	0x20000b24
 8001f2c:	443b8000 	.word	0x443b8000
 8001f30:	428c0000 	.word	0x428c0000
 8001f34:	0801f12c 	.word	0x0801f12c
 8001f38:	0801f148 	.word	0x0801f148
 8001f3c:	0801f164 	.word	0x0801f164
 8001f40:	20000d6c 	.word	0x20000d6c
 8001f44:	0801f180 	.word	0x0801f180
 8001f48:	20000acc 	.word	0x20000acc
 8001f4c:	0801f19c 	.word	0x0801f19c
 8001f50:	0801f1b4 	.word	0x0801f1b4
 8001f54:	fffff800 	.word	0xfffff800
				} else {
					real_value = (float) refactored_value
 8001f58:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f5c:	ee07 3a90 	vmov	s15, r3
 8001f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							* LM75A_DEGREES_RESOLUTION;
 8001f64:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
					real_value = (float) refactored_value
 8001f68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f6c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				}

				temp = real_value;
 8001f70:	4a43      	ldr	r2, [pc, #268]	; (8002080 <collectionTask+0x660>)
 8001f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f74:	6013      	str	r3, [r2, #0]
				printf("temp : %f\r\n", temp);
 8001f76:	4b42      	ldr	r3, [pc, #264]	; (8002080 <collectionTask+0x660>)
 8001f78:	edd3 7a00 	vldr	s15, [r3]
 8001f7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f80:	ec53 2b17 	vmov	r2, r3, d7
 8001f84:	483f      	ldr	r0, [pc, #252]	; (8002084 <collectionTask+0x664>)
 8001f86:	f018 ff2f 	bl	801ade8 <iprintf>
			}
		}

		// ---------------------- START GPIO ----------------------
		printf("========== GPIO ==========\r\n");
 8001f8a:	483f      	ldr	r0, [pc, #252]	; (8002088 <collectionTask+0x668>)
 8001f8c:	f018 ffa0 	bl	801aed0 <puts>

		// get Fire extinguisher status
		// 0 ->1 : GAS EMPTY , 1 -> 0 : WORKING or NOT CONNECT

		fext_no = HAL_GPIO_ReadPin(GPIOG, FEXT_NO_Pin); // FEXT EMPTY
 8001f90:	2108      	movs	r1, #8
 8001f92:	483e      	ldr	r0, [pc, #248]	; (800208c <collectionTask+0x66c>)
 8001f94:	f003 fd3a 	bl	8005a0c <HAL_GPIO_ReadPin>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		fext_nc = HAL_GPIO_ReadPin(GPIOG, FEXT_NC_Pin); // FEXT NOT CONNECTED
 8001f9e:	2110      	movs	r1, #16
 8001fa0:	483a      	ldr	r0, [pc, #232]	; (800208c <collectionTask+0x66c>)
 8001fa2:	f003 fd33 	bl	8005a0c <HAL_GPIO_ReadPin>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		fire0 = HAL_GPIO_ReadPin(GPIOD, FIRE0_Pin); // temp up
 8001fac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fb0:	4837      	ldr	r0, [pc, #220]	; (8002090 <collectionTask+0x670>)
 8001fb2:	f003 fd2b 	bl	8005a0c <HAL_GPIO_ReadPin>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		fire1 = HAL_GPIO_ReadPin(GPIOD, FIRE1_Pin); // fire up
 8001fbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fc0:	4833      	ldr	r0, [pc, #204]	; (8002090 <collectionTask+0x670>)
 8001fc2:	f003 fd23 	bl	8005a0c <HAL_GPIO_ReadPin>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

		fext_stat = fext_no << 1 | fext_nc;
 8001fcc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	b25a      	sxtb	r2, r3
 8001fd4:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	b25b      	sxtb	r3, r3
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	4b2d      	ldr	r3, [pc, #180]	; (8002094 <collectionTask+0x674>)
 8001fe0:	701a      	strb	r2, [r3, #0]
		fire = fire0 << 1 | fire1;
 8001fe2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	b25a      	sxtb	r2, r3
 8001fea:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	b25b      	sxtb	r3, r3
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	4b28      	ldr	r3, [pc, #160]	; (8002098 <collectionTask+0x678>)
 8001ff6:	701a      	strb	r2, [r3, #0]

		printf("fext_stat : %d \r\n", fext_stat);
 8001ff8:	4b26      	ldr	r3, [pc, #152]	; (8002094 <collectionTask+0x674>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4827      	ldr	r0, [pc, #156]	; (800209c <collectionTask+0x67c>)
 8002000:	f018 fef2 	bl	801ade8 <iprintf>
		printf("fire : %d \r\n", fire);
 8002004:	4b24      	ldr	r3, [pc, #144]	; (8002098 <collectionTask+0x678>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	4825      	ldr	r0, [pc, #148]	; (80020a0 <collectionTask+0x680>)
 800200c:	f018 feec 	bl	801ade8 <iprintf>

		fan_stat = HAL_GPIO_ReadPin(GPIOG, FAN_Pin);
 8002010:	2104      	movs	r1, #4
 8002012:	481e      	ldr	r0, [pc, #120]	; (800208c <collectionTask+0x66c>)
 8002014:	f003 fcfa 	bl	8005a0c <HAL_GPIO_ReadPin>
 8002018:	4603      	mov	r3, r0
 800201a:	461a      	mov	r2, r3
 800201c:	4b21      	ldr	r3, [pc, #132]	; (80020a4 <collectionTask+0x684>)
 800201e:	701a      	strb	r2, [r3, #0]
		printf("fan_stat : %d\r\n", fan_stat);
 8002020:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <collectionTask+0x684>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	4619      	mov	r1, r3
 8002026:	4820      	ldr	r0, [pc, #128]	; (80020a8 <collectionTask+0x688>)
 8002028:	f018 fede 	bl	801ade8 <iprintf>


		// control fan
		if(temp >= FAN_ON_TEMP && fan_stat == 0){
 800202c:	4b14      	ldr	r3, [pc, #80]	; (8002080 <collectionTask+0x660>)
 800202e:	edd3 7a00 	vldr	s15, [r3]
 8002032:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80020ac <collectionTask+0x68c>
 8002036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800203a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203e:	db09      	blt.n	8002054 <collectionTask+0x634>
 8002040:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <collectionTask+0x684>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d105      	bne.n	8002054 <collectionTask+0x634>
			HAL_GPIO_WritePin(GPIOG, FAN_Pin ,GPIO_PIN_SET);
 8002048:	2201      	movs	r2, #1
 800204a:	2104      	movs	r1, #4
 800204c:	480f      	ldr	r0, [pc, #60]	; (800208c <collectionTask+0x66c>)
 800204e:	f003 fcf5 	bl	8005a3c <HAL_GPIO_WritePin>
 8002052:	e013      	b.n	800207c <collectionTask+0x65c>
		}else if(temp < FAN_ON_TEMP && fan_stat == 1){
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <collectionTask+0x660>)
 8002056:	edd3 7a00 	vldr	s15, [r3]
 800205a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80020ac <collectionTask+0x68c>
 800205e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002066:	d509      	bpl.n	800207c <collectionTask+0x65c>
 8002068:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <collectionTask+0x684>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b01      	cmp	r3, #1
 800206e:	f47f ad1b 	bne.w	8001aa8 <collectionTask+0x88>
			HAL_GPIO_WritePin(GPIOG, FAN_Pin ,GPIO_PIN_RESET);
 8002072:	2200      	movs	r2, #0
 8002074:	2104      	movs	r1, #4
 8002076:	4805      	ldr	r0, [pc, #20]	; (800208c <collectionTask+0x66c>)
 8002078:	f003 fce0 	bl	8005a3c <HAL_GPIO_WritePin>
		osDelay(1000);
 800207c:	e514      	b.n	8001aa8 <collectionTask+0x88>
 800207e:	bf00      	nop
 8002080:	20000c30 	.word	0x20000c30
 8002084:	0801f1d0 	.word	0x0801f1d0
 8002088:	0801f1dc 	.word	0x0801f1dc
 800208c:	40021800 	.word	0x40021800
 8002090:	40020c00 	.word	0x40020c00
 8002094:	20000a7c 	.word	0x20000a7c
 8002098:	20001390 	.word	0x20001390
 800209c:	0801f1f8 	.word	0x0801f1f8
 80020a0:	0801f20c 	.word	0x0801f20c
 80020a4:	20001188 	.word	0x20001188
 80020a8:	0801f21c 	.word	0x0801f21c
 80020ac:	420c0000 	.word	0x420c0000

080020b0 <HAL_UART_RxCpltCallback>:

// lora uart data
uint8_t lora_rv_data;
uint8_t lora_rv_buf[1024];
uint32_t lora_rv_buf_pos;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *uartHandle) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

	if (uartHandle->Instance == huart3.Instance) {
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <HAL_UART_RxCpltCallback+0x54>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d01b      	beq.n	80020fc <HAL_UART_RxCpltCallback+0x4c>
//			printf("%s\r\n", buf);
//			pos = 0;
//		}
//
//		HAL_UART_Receive_IT(&huart3, &lora_rv_data, 1);
	} else if (uartHandle->Instance == huart1.Instance) {
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <HAL_UART_RxCpltCallback+0x58>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d115      	bne.n	80020fc <HAL_UART_RxCpltCallback+0x4c>

		lora_rv_buf[lora_rv_buf_pos++] = lora_rv_data;
 80020d0:	4b0e      	ldr	r3, [pc, #56]	; (800210c <HAL_UART_RxCpltCallback+0x5c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	490d      	ldr	r1, [pc, #52]	; (800210c <HAL_UART_RxCpltCallback+0x5c>)
 80020d8:	600a      	str	r2, [r1, #0]
 80020da:	4a0d      	ldr	r2, [pc, #52]	; (8002110 <HAL_UART_RxCpltCallback+0x60>)
 80020dc:	7811      	ldrb	r1, [r2, #0]
 80020de:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <HAL_UART_RxCpltCallback+0x64>)
 80020e0:	54d1      	strb	r1, [r2, r3]

		if (lora_rv_buf_pos == sizeof(lora_rv_buf)) {
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <HAL_UART_RxCpltCallback+0x5c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ea:	d102      	bne.n	80020f2 <HAL_UART_RxCpltCallback+0x42>
			//printf("%s", lora_rv_buf);
			lora_rv_buf_pos = 0;
 80020ec:	4b07      	ldr	r3, [pc, #28]	; (800210c <HAL_UART_RxCpltCallback+0x5c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart1, &lora_rv_data, 1);
 80020f2:	2201      	movs	r2, #1
 80020f4:	4906      	ldr	r1, [pc, #24]	; (8002110 <HAL_UART_RxCpltCallback+0x60>)
 80020f6:	4804      	ldr	r0, [pc, #16]	; (8002108 <HAL_UART_RxCpltCallback+0x58>)
 80020f8:	f005 ffaa 	bl	8008050 <HAL_UART_Receive_IT>
	}
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	200009fc 	.word	0x200009fc
 8002108:	20000ce0 	.word	0x20000ce0
 800210c:	2000138c 	.word	0x2000138c
 8002110:	20000b20 	.word	0x20000b20
 8002114:	20000d74 	.word	0x20000d74

08002118 <Lora_Buf_Clear>:

void Lora_Buf_Clear() {
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
	memset(lora_rv_buf, 0x0, sizeof(lora_rv_buf));
 800211c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002120:	2100      	movs	r1, #0
 8002122:	4808      	ldr	r0, [pc, #32]	; (8002144 <Lora_Buf_Clear+0x2c>)
 8002124:	f017 ff9b 	bl	801a05e <memset>
	lora_rv_buf_pos = 0;
 8002128:	4b07      	ldr	r3, [pc, #28]	; (8002148 <Lora_Buf_Clear+0x30>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
	osDelay(500);
 800212e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002132:	f007 fc29 	bl	8009988 <osDelay>
	HAL_UART_Receive_IT(&huart1, &lora_rv_data, 1);
 8002136:	2201      	movs	r2, #1
 8002138:	4904      	ldr	r1, [pc, #16]	; (800214c <Lora_Buf_Clear+0x34>)
 800213a:	4805      	ldr	r0, [pc, #20]	; (8002150 <Lora_Buf_Clear+0x38>)
 800213c:	f005 ff88 	bl	8008050 <HAL_UART_Receive_IT>

}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000d74 	.word	0x20000d74
 8002148:	2000138c 	.word	0x2000138c
 800214c:	20000b20 	.word	0x20000b20
 8002150:	20000ce0 	.word	0x20000ce0

08002154 <Lora_Cmd_Send>:

void Lora_Cmd_Send(UART_HandleTypeDef *huart, char *cmd) {
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(huart, cmd, strlen(cmd));
 800215e:	6838      	ldr	r0, [r7, #0]
 8002160:	f7fe f86e 	bl	8000240 <strlen>
 8002164:	4603      	mov	r3, r0
 8002166:	b29b      	uxth	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	6839      	ldr	r1, [r7, #0]
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f005 ff13 	bl	8007f98 <HAL_UART_Transmit_IT>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <Lora_Str_Find>:

bool Lora_Str_Find(char *str) {
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
	return strstr((char*) lora_rv_buf, str) != NULL;
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4806      	ldr	r0, [pc, #24]	; (80021a0 <Lora_Str_Find+0x24>)
 8002188:	f018 ffc3 	bl	801b112 <strstr>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	bf14      	ite	ne
 8002192:	2301      	movne	r3, #1
 8002194:	2300      	moveq	r3, #0
 8002196:	b2db      	uxtb	r3, r3
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000d74 	.word	0x20000d74

080021a4 <Print_Lora_Buf>:

void Print_Lora_Buf() {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
	printf("%s\r\n", lora_rv_buf);
 80021a8:	4902      	ldr	r1, [pc, #8]	; (80021b4 <Print_Lora_Buf+0x10>)
 80021aa:	4803      	ldr	r0, [pc, #12]	; (80021b8 <Print_Lora_Buf+0x14>)
 80021ac:	f018 fe1c 	bl	801ade8 <iprintf>
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000d74 	.word	0x20000d74
 80021b8:	0801f22c 	.word	0x0801f22c

080021bc <Lora_INIT>:

bool Lora_INIT(UART_HandleTypeDef *huart, char *cmd) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
	Lora_Buf_Clear();
 80021c6:	f7ff ffa7 	bl	8002118 <Lora_Buf_Clear>
	Lora_Cmd_Send(huart, cmd);
 80021ca:	6839      	ldr	r1, [r7, #0]
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ffc1 	bl	8002154 <Lora_Cmd_Send>
	osDelay(2000);
 80021d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021d6:	f007 fbd7 	bl	8009988 <osDelay>

	//check uart response
	//Print_Lora_Buf();
	if (Lora_Str_Find("OK")) {
 80021da:	4806      	ldr	r0, [pc, #24]	; (80021f4 <Lora_INIT+0x38>)
 80021dc:	f7ff ffce 	bl	800217c <Lora_Str_Find>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <Lora_INIT+0x2e>
		return true;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <Lora_INIT+0x30>
	} else {
		return false;
 80021ea:	2300      	movs	r3, #0
	}

}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	0801f234 	.word	0x0801f234

080021f8 <Lora_Config>:
bool c1, c2, c3, c4, c5, c6;
bool Lora_Config(UART_HandleTypeDef *huart) {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b0a4      	sub	sp, #144	; 0x90
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

	char cmd[128];
	bool flag = true;
 8002200:	2301      	movs	r3, #1
 8002202:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	while (flag) {
 8002206:	e0c8      	b.n	800239a <Lora_Config+0x1a2>
		// set KR920
		if (!c1) {
 8002208:	4b6a      	ldr	r3, [pc, #424]	; (80023b4 <Lora_Config+0x1bc>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	f083 0301 	eor.w	r3, r3, #1
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d020      	beq.n	8002258 <Lora_Config+0x60>
			sprintf(cmd, "at+set_config=lora:region:%s\r\n", REGION);
 8002216:	f107 030c 	add.w	r3, r7, #12
 800221a:	4a67      	ldr	r2, [pc, #412]	; (80023b8 <Lora_Config+0x1c0>)
 800221c:	4967      	ldr	r1, [pc, #412]	; (80023bc <Lora_Config+0x1c4>)
 800221e:	4618      	mov	r0, r3
 8002220:	f018 ff02 	bl	801b028 <siprintf>
			if (Lora_INIT(huart, cmd)) {
 8002224:	f107 030c 	add.w	r3, r7, #12
 8002228:	4619      	mov	r1, r3
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff ffc6 	bl	80021bc <Lora_INIT>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d009      	beq.n	800224a <Lora_Config+0x52>
				printf("Lora_INIT OK : %s", cmd);
 8002236:	f107 030c 	add.w	r3, r7, #12
 800223a:	4619      	mov	r1, r3
 800223c:	4860      	ldr	r0, [pc, #384]	; (80023c0 <Lora_Config+0x1c8>)
 800223e:	f018 fdd3 	bl	801ade8 <iprintf>
				c1 = true;
 8002242:	4b5c      	ldr	r3, [pc, #368]	; (80023b4 <Lora_Config+0x1bc>)
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
 8002248:	e006      	b.n	8002258 <Lora_Config+0x60>
			} else {
				printf("Lora_INIT FAIL : %s", cmd);
 800224a:	f107 030c 	add.w	r3, r7, #12
 800224e:	4619      	mov	r1, r3
 8002250:	485c      	ldr	r0, [pc, #368]	; (80023c4 <Lora_Config+0x1cc>)
 8002252:	f018 fdc9 	bl	801ade8 <iprintf>
				continue;
 8002256:	e0a0      	b.n	800239a <Lora_Config+0x1a2>
//			}
//		}

		// set app_eui device_eui

		if (!c3) {
 8002258:	4b5b      	ldr	r3, [pc, #364]	; (80023c8 <Lora_Config+0x1d0>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	f083 0301 	eor.w	r3, r3, #1
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d020      	beq.n	80022a8 <Lora_Config+0xb0>
			sprintf(cmd, "at+set_config=lora:app_eui:%s\r\n", APP_EUI);
 8002266:	f107 030c 	add.w	r3, r7, #12
 800226a:	4a58      	ldr	r2, [pc, #352]	; (80023cc <Lora_Config+0x1d4>)
 800226c:	4958      	ldr	r1, [pc, #352]	; (80023d0 <Lora_Config+0x1d8>)
 800226e:	4618      	mov	r0, r3
 8002270:	f018 feda 	bl	801b028 <siprintf>
			if (Lora_INIT(huart, cmd)) {
 8002274:	f107 030c 	add.w	r3, r7, #12
 8002278:	4619      	mov	r1, r3
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ff9e 	bl	80021bc <Lora_INIT>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d009      	beq.n	800229a <Lora_Config+0xa2>
				printf("Lora_INIT OK : %s", cmd);
 8002286:	f107 030c 	add.w	r3, r7, #12
 800228a:	4619      	mov	r1, r3
 800228c:	484c      	ldr	r0, [pc, #304]	; (80023c0 <Lora_Config+0x1c8>)
 800228e:	f018 fdab 	bl	801ade8 <iprintf>
				c3 = true;
 8002292:	4b4d      	ldr	r3, [pc, #308]	; (80023c8 <Lora_Config+0x1d0>)
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]
 8002298:	e006      	b.n	80022a8 <Lora_Config+0xb0>
			} else {
				printf("Lora_INIT FAIL : %s", cmd);
 800229a:	f107 030c 	add.w	r3, r7, #12
 800229e:	4619      	mov	r1, r3
 80022a0:	4848      	ldr	r0, [pc, #288]	; (80023c4 <Lora_Config+0x1cc>)
 80022a2:	f018 fda1 	bl	801ade8 <iprintf>
				continue;
 80022a6:	e078      	b.n	800239a <Lora_Config+0x1a2>
			}
		}
		// set dev_eui

		if (!c4) {
 80022a8:	4b4a      	ldr	r3, [pc, #296]	; (80023d4 <Lora_Config+0x1dc>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	f083 0301 	eor.w	r3, r3, #1
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d021      	beq.n	80022fa <Lora_Config+0x102>
			//sprintf(cmd, "at+set_config=lora:dev_eui:%s\r\n", DEV_EUI);
			sprintf(cmd, "at+set_config=lora:dev_eui:%s\r\n", device_eui);
 80022b6:	4b48      	ldr	r3, [pc, #288]	; (80023d8 <Lora_Config+0x1e0>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	f107 030c 	add.w	r3, r7, #12
 80022be:	4947      	ldr	r1, [pc, #284]	; (80023dc <Lora_Config+0x1e4>)
 80022c0:	4618      	mov	r0, r3
 80022c2:	f018 feb1 	bl	801b028 <siprintf>
			if (Lora_INIT(huart, cmd)) {
 80022c6:	f107 030c 	add.w	r3, r7, #12
 80022ca:	4619      	mov	r1, r3
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff75 	bl	80021bc <Lora_INIT>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d009      	beq.n	80022ec <Lora_Config+0xf4>
				printf("Lora_INIT OK : %s", cmd);
 80022d8:	f107 030c 	add.w	r3, r7, #12
 80022dc:	4619      	mov	r1, r3
 80022de:	4838      	ldr	r0, [pc, #224]	; (80023c0 <Lora_Config+0x1c8>)
 80022e0:	f018 fd82 	bl	801ade8 <iprintf>
				c4 = true;
 80022e4:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <Lora_Config+0x1dc>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]
 80022ea:	e006      	b.n	80022fa <Lora_Config+0x102>
			} else {
				printf("Lora_INIT FAIL : %s", cmd);
 80022ec:	f107 030c 	add.w	r3, r7, #12
 80022f0:	4619      	mov	r1, r3
 80022f2:	4834      	ldr	r0, [pc, #208]	; (80023c4 <Lora_Config+0x1cc>)
 80022f4:	f018 fd78 	bl	801ade8 <iprintf>
				continue;
 80022f8:	e04f      	b.n	800239a <Lora_Config+0x1a2>
			}
		}

		if (!c5) {
 80022fa:	4b39      	ldr	r3, [pc, #228]	; (80023e0 <Lora_Config+0x1e8>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	f083 0301 	eor.w	r3, r3, #1
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d020      	beq.n	800234a <Lora_Config+0x152>
			// set app_key
			sprintf(cmd, "at+set_config=lora:app_key:%s\r\n", APP_KEY);
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	4a35      	ldr	r2, [pc, #212]	; (80023e4 <Lora_Config+0x1ec>)
 800230e:	4936      	ldr	r1, [pc, #216]	; (80023e8 <Lora_Config+0x1f0>)
 8002310:	4618      	mov	r0, r3
 8002312:	f018 fe89 	bl	801b028 <siprintf>
			if (Lora_INIT(huart, cmd)) {
 8002316:	f107 030c 	add.w	r3, r7, #12
 800231a:	4619      	mov	r1, r3
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ff4d 	bl	80021bc <Lora_INIT>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d009      	beq.n	800233c <Lora_Config+0x144>
				printf("Lora_INIT OK : %s", cmd);
 8002328:	f107 030c 	add.w	r3, r7, #12
 800232c:	4619      	mov	r1, r3
 800232e:	4824      	ldr	r0, [pc, #144]	; (80023c0 <Lora_Config+0x1c8>)
 8002330:	f018 fd5a 	bl	801ade8 <iprintf>
				c5 = true;
 8002334:	4b2a      	ldr	r3, [pc, #168]	; (80023e0 <Lora_Config+0x1e8>)
 8002336:	2201      	movs	r2, #1
 8002338:	701a      	strb	r2, [r3, #0]
 800233a:	e006      	b.n	800234a <Lora_Config+0x152>
			} else {
				printf("Lora_INIT FAIL : %s", cmd);
 800233c:	f107 030c 	add.w	r3, r7, #12
 8002340:	4619      	mov	r1, r3
 8002342:	4820      	ldr	r0, [pc, #128]	; (80023c4 <Lora_Config+0x1cc>)
 8002344:	f018 fd50 	bl	801ade8 <iprintf>
				continue;
 8002348:	e027      	b.n	800239a <Lora_Config+0x1a2>
			}
		}

		if (!c6) {
 800234a:	4b28      	ldr	r3, [pc, #160]	; (80023ec <Lora_Config+0x1f4>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	f083 0301 	eor.w	r3, r3, #1
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d026      	beq.n	80023a6 <Lora_Config+0x1ae>
			// set app_key
			sprintf(cmd, "at+set_config=lora:confirm:%s\r\n", CONFIRM);
 8002358:	f107 030c 	add.w	r3, r7, #12
 800235c:	4a24      	ldr	r2, [pc, #144]	; (80023f0 <Lora_Config+0x1f8>)
 800235e:	4925      	ldr	r1, [pc, #148]	; (80023f4 <Lora_Config+0x1fc>)
 8002360:	4618      	mov	r0, r3
 8002362:	f018 fe61 	bl	801b028 <siprintf>
			if (Lora_INIT(huart, cmd)) {
 8002366:	f107 030c 	add.w	r3, r7, #12
 800236a:	4619      	mov	r1, r3
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff ff25 	bl	80021bc <Lora_INIT>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d009      	beq.n	800238c <Lora_Config+0x194>
				printf("Lora_INIT OK : %s", cmd);
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	4619      	mov	r1, r3
 800237e:	4810      	ldr	r0, [pc, #64]	; (80023c0 <Lora_Config+0x1c8>)
 8002380:	f018 fd32 	bl	801ade8 <iprintf>
				c6 = true;
 8002384:	4b19      	ldr	r3, [pc, #100]	; (80023ec <Lora_Config+0x1f4>)
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]
			} else {
				printf("Lora_INIT FAIL : %s", cmd);
				continue;
			}
		}
		break;
 800238a:	e00c      	b.n	80023a6 <Lora_Config+0x1ae>
				printf("Lora_INIT FAIL : %s", cmd);
 800238c:	f107 030c 	add.w	r3, r7, #12
 8002390:	4619      	mov	r1, r3
 8002392:	480c      	ldr	r0, [pc, #48]	; (80023c4 <Lora_Config+0x1cc>)
 8002394:	f018 fd28 	bl	801ade8 <iprintf>
				continue;
 8002398:	bf00      	nop
	while (flag) {
 800239a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f47f af32 	bne.w	8002208 <Lora_Config+0x10>
 80023a4:	e000      	b.n	80023a8 <Lora_Config+0x1b0>
		break;
 80023a6:	bf00      	nop

	}

}
 80023a8:	bf00      	nop
 80023aa:	4618      	mov	r0, r3
 80023ac:	3790      	adds	r7, #144	; 0x90
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000d64 	.word	0x20000d64
 80023b8:	0801f238 	.word	0x0801f238
 80023bc:	0801f240 	.word	0x0801f240
 80023c0:	0801f260 	.word	0x0801f260
 80023c4:	0801f274 	.word	0x0801f274
 80023c8:	20001180 	.word	0x20001180
 80023cc:	0801f288 	.word	0x0801f288
 80023d0:	0801f29c 	.word	0x0801f29c
 80023d4:	20000ac8 	.word	0x20000ac8
 80023d8:	200009f8 	.word	0x200009f8
 80023dc:	0801f2bc 	.word	0x0801f2bc
 80023e0:	20000c36 	.word	0x20000c36
 80023e4:	0801f2dc 	.word	0x0801f2dc
 80023e8:	0801f300 	.word	0x0801f300
 80023ec:	200009f0 	.word	0x200009f0
 80023f0:	0801f320 	.word	0x0801f320
 80023f4:	0801f324 	.word	0x0801f324

080023f8 <Lora_Status>:

bool Lora_Status(UART_HandleTypeDef *huart) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	Lora_Buf_Clear();
 8002400:	f7ff fe8a 	bl	8002118 <Lora_Buf_Clear>
	Lora_Cmd_Send(huart, "at+get_config=lora:status\r\n");
 8002404:	490a      	ldr	r1, [pc, #40]	; (8002430 <Lora_Status+0x38>)
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff fea4 	bl	8002154 <Lora_Cmd_Send>
	osDelay(2000);
 800240c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002410:	f007 faba 	bl	8009988 <osDelay>
	//Print_Lora_Buf();
	if (Lora_Str_Find("Joined Network:true")) {
 8002414:	4807      	ldr	r0, [pc, #28]	; (8002434 <Lora_Status+0x3c>)
 8002416:	f7ff feb1 	bl	800217c <Lora_Str_Find>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <Lora_Status+0x2c>
		//printf("LoRa Joined Network\r\n");
		return true;
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <Lora_Status+0x2e>
	} else {
		//printf("LoRa Not Joined Network\r\n");
		return false;
 8002424:	2300      	movs	r3, #0
	}
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	0801f344 	.word	0x0801f344
 8002434:	0801f360 	.word	0x0801f360

08002438 <Lora_Join>:

bool Lora_Join(UART_HandleTypeDef *huart) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
	Lora_Buf_Clear();
 8002440:	f7ff fe6a 	bl	8002118 <Lora_Buf_Clear>
	Lora_Cmd_Send(huart, "at+join\r\n");
 8002444:	490a      	ldr	r1, [pc, #40]	; (8002470 <Lora_Join+0x38>)
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff fe84 	bl	8002154 <Lora_Cmd_Send>
	osDelay(5000);
 800244c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002450:	f007 fa9a 	bl	8009988 <osDelay>
	//Print_Lora_Buf();
	if (Lora_Str_Find("Join Success")) {
 8002454:	4807      	ldr	r0, [pc, #28]	; (8002474 <Lora_Join+0x3c>)
 8002456:	f7ff fe91 	bl	800217c <Lora_Str_Find>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <Lora_Join+0x2c>
		return true;
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <Lora_Join+0x2e>
	} else {
		return false;
 8002464:	2300      	movs	r3, #0
	}
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	0801f374 	.word	0x0801f374
 8002474:	0801f380 	.word	0x0801f380

08002478 <Lora_Send>:

char lora_send_msg[128];
char lora_send_payload[128];
uint32_t len;
struct lora_packet_t lora_packet_t;
void Lora_Send(UART_HandleTypeDef *huart) {
 8002478:	b5b0      	push	{r4, r5, r7, lr}
 800247a:	b094      	sub	sp, #80	; 0x50
 800247c:	af10      	add	r7, sp, #64	; 0x40
 800247e:	6078      	str	r0, [r7, #4]

	len = sprintf((char*) lora_send_msg, "at+send=lora:10:");
 8002480:	4a72      	ldr	r2, [pc, #456]	; (800264c <Lora_Send+0x1d4>)
 8002482:	4b73      	ldr	r3, [pc, #460]	; (8002650 <Lora_Send+0x1d8>)
 8002484:	4615      	mov	r5, r2
 8002486:	461c      	mov	r4, r3
 8002488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800248a:	6028      	str	r0, [r5, #0]
 800248c:	6069      	str	r1, [r5, #4]
 800248e:	60aa      	str	r2, [r5, #8]
 8002490:	60eb      	str	r3, [r5, #12]
 8002492:	7823      	ldrb	r3, [r4, #0]
 8002494:	742b      	strb	r3, [r5, #16]
 8002496:	2310      	movs	r3, #16
 8002498:	461a      	mov	r2, r3
 800249a:	4b6e      	ldr	r3, [pc, #440]	; (8002654 <Lora_Send+0x1dc>)
 800249c:	601a      	str	r2, [r3, #0]
//	uint8_t debug;
//	uint8_t fext_stat;
//	uint8_t fan_stat;
//	uint8_t i;

	lora_packet_t.device_id = device_id;
 800249e:	4b6e      	ldr	r3, [pc, #440]	; (8002658 <Lora_Send+0x1e0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a6e      	ldr	r2, [pc, #440]	; (800265c <Lora_Send+0x1e4>)
 80024a4:	6013      	str	r3, [r2, #0]
	lora_packet_t.temp = (uint8_t) temp;
 80024a6:	4b6e      	ldr	r3, [pc, #440]	; (8002660 <Lora_Send+0x1e8>)
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024b0:	edc7 7a00 	vstr	s15, [r7]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	4b68      	ldr	r3, [pc, #416]	; (800265c <Lora_Send+0x1e4>)
 80024ba:	711a      	strb	r2, [r3, #4]
	lora_packet_t.vocs = vocs;
 80024bc:	4b69      	ldr	r3, [pc, #420]	; (8002664 <Lora_Send+0x1ec>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b66      	ldr	r3, [pc, #408]	; (800265c <Lora_Send+0x1e4>)
 80024c2:	3305      	adds	r3, #5
 80024c4:	601a      	str	r2, [r3, #0]
	lora_packet_t.smoke = co;
 80024c6:	4b68      	ldr	r3, [pc, #416]	; (8002668 <Lora_Send+0x1f0>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4b64      	ldr	r3, [pc, #400]	; (800265c <Lora_Send+0x1e4>)
 80024cc:	3309      	adds	r3, #9
 80024ce:	601a      	str	r2, [r3, #0]
	lora_packet_t.vibr_x = vibr_x;
 80024d0:	4b66      	ldr	r3, [pc, #408]	; (800266c <Lora_Send+0x1f4>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b61      	ldr	r3, [pc, #388]	; (800265c <Lora_Send+0x1e4>)
 80024d6:	330d      	adds	r3, #13
 80024d8:	601a      	str	r2, [r3, #0]
	lora_packet_t.vibr_y = vibr_y;
 80024da:	4b65      	ldr	r3, [pc, #404]	; (8002670 <Lora_Send+0x1f8>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	4b5f      	ldr	r3, [pc, #380]	; (800265c <Lora_Send+0x1e4>)
 80024e0:	3311      	adds	r3, #17
 80024e2:	601a      	str	r2, [r3, #0]
	lora_packet_t.vibr_z = vibr_z;
 80024e4:	4b63      	ldr	r3, [pc, #396]	; (8002674 <Lora_Send+0x1fc>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b5c      	ldr	r3, [pc, #368]	; (800265c <Lora_Send+0x1e4>)
 80024ea:	3315      	adds	r3, #21
 80024ec:	601a      	str	r2, [r3, #0]
	lora_packet_t.vibr = vibr;
 80024ee:	4b62      	ldr	r3, [pc, #392]	; (8002678 <Lora_Send+0x200>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	4b5a      	ldr	r3, [pc, #360]	; (800265c <Lora_Send+0x1e4>)
 80024f4:	3319      	adds	r3, #25
 80024f6:	601a      	str	r2, [r3, #0]
	lora_packet_t.fire = fire;
 80024f8:	4b60      	ldr	r3, [pc, #384]	; (800267c <Lora_Send+0x204>)
 80024fa:	781a      	ldrb	r2, [r3, #0]
 80024fc:	4b57      	ldr	r3, [pc, #348]	; (800265c <Lora_Send+0x1e4>)
 80024fe:	775a      	strb	r2, [r3, #29]
	lora_packet_t.fan_stat = fan_stat;
 8002500:	4b5f      	ldr	r3, [pc, #380]	; (8002680 <Lora_Send+0x208>)
 8002502:	781a      	ldrb	r2, [r3, #0]
 8002504:	4b55      	ldr	r3, [pc, #340]	; (800265c <Lora_Send+0x1e4>)
 8002506:	779a      	strb	r2, [r3, #30]
	lora_packet_t.fext_stat = fext_stat;
 8002508:	4b5e      	ldr	r3, [pc, #376]	; (8002684 <Lora_Send+0x20c>)
 800250a:	781a      	ldrb	r2, [r3, #0]
 800250c:	4b53      	ldr	r3, [pc, #332]	; (800265c <Lora_Send+0x1e4>)
 800250e:	77da      	strb	r2, [r3, #31]

	printf(
 8002510:	4b52      	ldr	r3, [pc, #328]	; (800265c <Lora_Send+0x1e4>)
 8002512:	6819      	ldr	r1, [r3, #0]
			"#### SEND LoRa Msg : {\"device_id\":%d,\"temp\":%f,\"vocs\":%f,\"smoke\":%f,\"vibr_x\":%f,\"vibr_y\":%f,\"vibr_z\":%f,\"vibr\":%f,\"fire\":%x,\"fan\":%x,\"fext_stat\":%x}\r\n",
			lora_packet_t.device_id,
			lora_packet_t.temp, //
 8002514:	4b51      	ldr	r3, [pc, #324]	; (800265c <Lora_Send+0x1e4>)
 8002516:	791b      	ldrb	r3, [r3, #4]
	printf(
 8002518:	461c      	mov	r4, r3
			lora_packet_t.vocs, //
 800251a:	4b50      	ldr	r3, [pc, #320]	; (800265c <Lora_Send+0x1e4>)
 800251c:	f8d3 3005 	ldr.w	r3, [r3, #5]
	printf(
 8002520:	ee07 3a90 	vmov	s15, r3
 8002524:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			lora_packet_t.smoke, lora_packet_t.vibr_x, lora_packet_t.vibr_y,
 8002528:	4b4c      	ldr	r3, [pc, #304]	; (800265c <Lora_Send+0x1e4>)
 800252a:	f8d3 3009 	ldr.w	r3, [r3, #9]
	printf(
 800252e:	ee06 3a90 	vmov	s13, r3
 8002532:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			lora_packet_t.smoke, lora_packet_t.vibr_x, lora_packet_t.vibr_y,
 8002536:	4b49      	ldr	r3, [pc, #292]	; (800265c <Lora_Send+0x1e4>)
 8002538:	f8d3 300d 	ldr.w	r3, [r3, #13]
	printf(
 800253c:	ee05 3a90 	vmov	s11, r3
 8002540:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
			lora_packet_t.smoke, lora_packet_t.vibr_x, lora_packet_t.vibr_y,
 8002544:	4b45      	ldr	r3, [pc, #276]	; (800265c <Lora_Send+0x1e4>)
 8002546:	f8d3 3011 	ldr.w	r3, [r3, #17]
	printf(
 800254a:	ee04 3a90 	vmov	s9, r3
 800254e:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
			lora_packet_t.vibr_z, lora_packet_t.vibr, lora_packet_t.fire,
 8002552:	4b42      	ldr	r3, [pc, #264]	; (800265c <Lora_Send+0x1e4>)
 8002554:	f8d3 3015 	ldr.w	r3, [r3, #21]
	printf(
 8002558:	ee03 3a90 	vmov	s7, r3
 800255c:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
			lora_packet_t.vibr_z, lora_packet_t.vibr, lora_packet_t.fire,
 8002560:	4b3e      	ldr	r3, [pc, #248]	; (800265c <Lora_Send+0x1e4>)
 8002562:	f8d3 3019 	ldr.w	r3, [r3, #25]
	printf(
 8002566:	ee02 3a90 	vmov	s5, r3
 800256a:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
			lora_packet_t.vibr_z, lora_packet_t.vibr, lora_packet_t.fire,
 800256e:	4b3b      	ldr	r3, [pc, #236]	; (800265c <Lora_Send+0x1e4>)
 8002570:	7f5b      	ldrb	r3, [r3, #29]
	printf(
 8002572:	461a      	mov	r2, r3
			lora_packet_t.fan_stat, lora_packet_t.fext_stat);
 8002574:	4b39      	ldr	r3, [pc, #228]	; (800265c <Lora_Send+0x1e4>)
 8002576:	7f9b      	ldrb	r3, [r3, #30]
	printf(
 8002578:	4618      	mov	r0, r3
			lora_packet_t.fan_stat, lora_packet_t.fext_stat);
 800257a:	4b38      	ldr	r3, [pc, #224]	; (800265c <Lora_Send+0x1e4>)
 800257c:	7fdb      	ldrb	r3, [r3, #31]
	printf(
 800257e:	930e      	str	r3, [sp, #56]	; 0x38
 8002580:	900d      	str	r0, [sp, #52]	; 0x34
 8002582:	920c      	str	r2, [sp, #48]	; 0x30
 8002584:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 8002588:	ed8d 3b08 	vstr	d3, [sp, #32]
 800258c:	ed8d 4b06 	vstr	d4, [sp, #24]
 8002590:	ed8d 5b04 	vstr	d5, [sp, #16]
 8002594:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002598:	ed8d 7b00 	vstr	d7, [sp]
 800259c:	4622      	mov	r2, r4
 800259e:	483a      	ldr	r0, [pc, #232]	; (8002688 <Lora_Send+0x210>)
 80025a0:	f018 fc22 	bl	801ade8 <iprintf>

	for (uint8_t i = 0; i < sizeof(struct lora_packet_t); i++) {
 80025a4:	2300      	movs	r3, #0
 80025a6:	73fb      	strb	r3, [r7, #15]
 80025a8:	e012      	b.n	80025d0 <Lora_Send+0x158>
		sprintf((char*) &lora_send_msg[len + (i * 2)], "%02X",
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	461a      	mov	r2, r3
 80025b0:	4b28      	ldr	r3, [pc, #160]	; (8002654 <Lora_Send+0x1dc>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4413      	add	r3, r2
 80025b6:	4a25      	ldr	r2, [pc, #148]	; (800264c <Lora_Send+0x1d4>)
 80025b8:	1898      	adds	r0, r3, r2
				((char*) &lora_packet_t)[i]);
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	4a27      	ldr	r2, [pc, #156]	; (800265c <Lora_Send+0x1e4>)
 80025be:	4413      	add	r3, r2
 80025c0:	781b      	ldrb	r3, [r3, #0]
		sprintf((char*) &lora_send_msg[len + (i * 2)], "%02X",
 80025c2:	461a      	mov	r2, r3
 80025c4:	4931      	ldr	r1, [pc, #196]	; (800268c <Lora_Send+0x214>)
 80025c6:	f018 fd2f 	bl	801b028 <siprintf>
	for (uint8_t i = 0; i < sizeof(struct lora_packet_t); i++) {
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	3301      	adds	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	2b1f      	cmp	r3, #31
 80025d4:	d9e9      	bls.n	80025aa <Lora_Send+0x132>
	}

	len += sizeof(struct lora_packet_t) * 2;
 80025d6:	4b1f      	ldr	r3, [pc, #124]	; (8002654 <Lora_Send+0x1dc>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	3340      	adds	r3, #64	; 0x40
 80025dc:	4a1d      	ldr	r2, [pc, #116]	; (8002654 <Lora_Send+0x1dc>)
 80025de:	6013      	str	r3, [r2, #0]

	lora_send_msg[len++] = '\r';
 80025e0:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <Lora_Send+0x1dc>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	491b      	ldr	r1, [pc, #108]	; (8002654 <Lora_Send+0x1dc>)
 80025e8:	600a      	str	r2, [r1, #0]
 80025ea:	4a18      	ldr	r2, [pc, #96]	; (800264c <Lora_Send+0x1d4>)
 80025ec:	210d      	movs	r1, #13
 80025ee:	54d1      	strb	r1, [r2, r3]
	lora_send_msg[len++] = '\n';
 80025f0:	4b18      	ldr	r3, [pc, #96]	; (8002654 <Lora_Send+0x1dc>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	4917      	ldr	r1, [pc, #92]	; (8002654 <Lora_Send+0x1dc>)
 80025f8:	600a      	str	r2, [r1, #0]
 80025fa:	4a14      	ldr	r2, [pc, #80]	; (800264c <Lora_Send+0x1d4>)
 80025fc:	210a      	movs	r1, #10
 80025fe:	54d1      	strb	r1, [r2, r3]

//printf("%s",lora_send_msg, sizeof(struct lora_packet_t));
	Lora_Buf_Clear();
 8002600:	f7ff fd8a 	bl	8002118 <Lora_Buf_Clear>
	Lora_Cmd_Send(huart, lora_send_msg);
 8002604:	4911      	ldr	r1, [pc, #68]	; (800264c <Lora_Send+0x1d4>)
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff fda4 	bl	8002154 <Lora_Cmd_Send>
	//osDelay(500);
	for (uint8_t wait_cnt = 0; wait_cnt < 60; wait_cnt++) { // wait 1 minute
 800260c:	2300      	movs	r3, #0
 800260e:	73bb      	strb	r3, [r7, #14]
 8002610:	e014      	b.n	800263c <Lora_Send+0x1c4>
		osDelay(1000);
 8002612:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002616:	f007 f9b7 	bl	8009988 <osDelay>
		Print_Lora_Buf();
 800261a:	f7ff fdc3 	bl	80021a4 <Print_Lora_Buf>
		if (Lora_Str_Find("OK") || Lora_Str_Find("ERROR")) {
 800261e:	481c      	ldr	r0, [pc, #112]	; (8002690 <Lora_Send+0x218>)
 8002620:	f7ff fdac 	bl	800217c <Lora_Str_Find>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10b      	bne.n	8002642 <Lora_Send+0x1ca>
 800262a:	481a      	ldr	r0, [pc, #104]	; (8002694 <Lora_Send+0x21c>)
 800262c:	f7ff fda6 	bl	800217c <Lora_Str_Find>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d105      	bne.n	8002642 <Lora_Send+0x1ca>
	for (uint8_t wait_cnt = 0; wait_cnt < 60; wait_cnt++) { // wait 1 minute
 8002636:	7bbb      	ldrb	r3, [r7, #14]
 8002638:	3301      	adds	r3, #1
 800263a:	73bb      	strb	r3, [r7, #14]
 800263c:	7bbb      	ldrb	r3, [r7, #14]
 800263e:	2b3b      	cmp	r3, #59	; 0x3b
 8002640:	d9e7      	bls.n	8002612 <Lora_Send+0x19a>
			break;
		}

	}
}
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bdb0      	pop	{r4, r5, r7, pc}
 800264a:	bf00      	nop
 800264c:	20000bac 	.word	0x20000bac
 8002650:	0801f390 	.word	0x0801f390
 8002654:	200013b4 	.word	0x200013b4
 8002658:	20000c2c 	.word	0x20000c2c
 800265c:	20001394 	.word	0x20001394
 8002660:	20000c30 	.word	0x20000c30
 8002664:	20000d6c 	.word	0x20000d6c
 8002668:	20001174 	.word	0x20001174
 800266c:	20000c84 	.word	0x20000c84
 8002670:	20001178 	.word	0x20001178
 8002674:	200009e0 	.word	0x200009e0
 8002678:	20000cdc 	.word	0x20000cdc
 800267c:	20001390 	.word	0x20001390
 8002680:	20001188 	.word	0x20001188
 8002684:	20000a7c 	.word	0x20000a7c
 8002688:	0801f3a4 	.word	0x0801f3a4
 800268c:	0801f43c 	.word	0x0801f43c
 8002690:	0801f234 	.word	0x0801f234
 8002694:	0801f444 	.word	0x0801f444

08002698 <initLoRa>:
//		} else {
//
//		}
//	}

void initLoRa() {
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
	osDelay(10);
 800269c:	200a      	movs	r0, #10
 800269e:	f007 f973 	bl	8009988 <osDelay>
	HAL_UART_Receive_IT(&huart1, &lora_rv_data, 1);
 80026a2:	2201      	movs	r2, #1
 80026a4:	491a      	ldr	r1, [pc, #104]	; (8002710 <initLoRa+0x78>)
 80026a6:	481b      	ldr	r0, [pc, #108]	; (8002714 <initLoRa+0x7c>)
 80026a8:	f005 fcd2 	bl	8008050 <HAL_UART_Receive_IT>

// init lora config (region , tx power , app eui, dev eui, app key )
	Lora_Config(&huart1);
 80026ac:	4819      	ldr	r0, [pc, #100]	; (8002714 <initLoRa+0x7c>)
 80026ae:	f7ff fda3 	bl	80021f8 <Lora_Config>

	printf("LORA RAK JOIN CHECK START!\r\n");
 80026b2:	4819      	ldr	r0, [pc, #100]	; (8002718 <initLoRa+0x80>)
 80026b4:	f018 fc0c 	bl	801aed0 <puts>

	state = Lora_Status(&huart1);
 80026b8:	4816      	ldr	r0, [pc, #88]	; (8002714 <initLoRa+0x7c>)
 80026ba:	f7ff fe9d 	bl	80023f8 <Lora_Status>
 80026be:	4603      	mov	r3, r0
 80026c0:	461a      	mov	r2, r3
 80026c2:	4b16      	ldr	r3, [pc, #88]	; (800271c <initLoRa+0x84>)
 80026c4:	701a      	strb	r2, [r3, #0]
	while (1) {
		printf("LORA RAK STATUS!\r\n");
 80026c6:	4816      	ldr	r0, [pc, #88]	; (8002720 <initLoRa+0x88>)
 80026c8:	f018 fc02 	bl	801aed0 <puts>
		state = Lora_Status(&huart1);
 80026cc:	4811      	ldr	r0, [pc, #68]	; (8002714 <initLoRa+0x7c>)
 80026ce:	f7ff fe93 	bl	80023f8 <Lora_Status>
 80026d2:	4603      	mov	r3, r0
 80026d4:	461a      	mov	r2, r3
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <initLoRa+0x84>)
 80026d8:	701a      	strb	r2, [r3, #0]
		if (state) {
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <initLoRa+0x84>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <initLoRa+0x52>
			lora_init = true;
 80026e2:	4b10      	ldr	r3, [pc, #64]	; (8002724 <initLoRa+0x8c>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]
			break;
 80026e8:	e00d      	b.n	8002706 <initLoRa+0x6e>
		} else {
			state = Lora_Join(&huart1);
 80026ea:	480a      	ldr	r0, [pc, #40]	; (8002714 <initLoRa+0x7c>)
 80026ec:	f7ff fea4 	bl	8002438 <Lora_Join>
 80026f0:	4603      	mov	r3, r0
 80026f2:	461a      	mov	r2, r3
 80026f4:	4b09      	ldr	r3, [pc, #36]	; (800271c <initLoRa+0x84>)
 80026f6:	701a      	strb	r2, [r3, #0]
			if (state == true) {
 80026f8:	4b08      	ldr	r3, [pc, #32]	; (800271c <initLoRa+0x84>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0e2      	beq.n	80026c6 <initLoRa+0x2e>
				lora_init = true;
 8002700:	4b08      	ldr	r3, [pc, #32]	; (8002724 <initLoRa+0x8c>)
 8002702:	2201      	movs	r2, #1
 8002704:	701a      	strb	r2, [r3, #0]
				break;
			}
		}
	}
	printf("LORA RAK JOIN CHECK Finish!\r\n");
 8002706:	4808      	ldr	r0, [pc, #32]	; (8002728 <initLoRa+0x90>)
 8002708:	f018 fbe2 	bl	801aed0 <puts>
}
 800270c:	bf00      	nop
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000b20 	.word	0x20000b20
 8002714:	20000ce0 	.word	0x20000ce0
 8002718:	0801f48c 	.word	0x0801f48c
 800271c:	20000c35 	.word	0x20000c35
 8002720:	0801f4a8 	.word	0x0801f4a8
 8002724:	200013b8 	.word	0x200013b8
 8002728:	0801f4bc 	.word	0x0801f4bc

0800272c <StartClientTask>:

void StartClientTask(void const *argument) {
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]

	osDelay(1000);
 8002734:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002738:	f007 f926 	bl	8009988 <osDelay>
	printf("----- StartClientTask ------\r\n");
 800273c:	4847      	ldr	r0, [pc, #284]	; (800285c <StartClientTask+0x130>)
 800273e:	f018 fbc7 	bl	801aed0 <puts>
	u16_t nWritten; //write buffer index
	LWIP_UNUSED_ARG(argument);

	while (1) {

		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0
 8002742:	4b47      	ldr	r3, [pc, #284]	; (8002860 <StartClientTask+0x134>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d007      	beq.n	800275a <StartClientTask+0x2e>
 800274a:	4b45      	ldr	r3, [pc, #276]	; (8002860 <StartClientTask+0x134>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <StartClientTask+0x2e>
				|| gnetif.gw.addr == 0) {
 8002752:	4b43      	ldr	r3, [pc, #268]	; (8002860 <StartClientTask+0x134>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d107      	bne.n	800276a <StartClientTask+0x3e>
			printf("no valid ip \r\n");
 800275a:	4842      	ldr	r0, [pc, #264]	; (8002864 <StartClientTask+0x138>)
 800275c:	f018 fbb8 	bl	801aed0 <puts>
			osDelay(1000);
 8002760:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002764:	f007 f910 	bl	8009988 <osDelay>
			continue;
 8002768:	e076      	b.n	8002858 <StartClientTask+0x12c>
		}
		print_ip(gnetif.ip_addr.addr, gnetif.netmask.addr, gnetif.gw.addr);
 800276a:	4b3d      	ldr	r3, [pc, #244]	; (8002860 <StartClientTask+0x134>)
 800276c:	6858      	ldr	r0, [r3, #4]
 800276e:	4b3c      	ldr	r3, [pc, #240]	; (8002860 <StartClientTask+0x134>)
 8002770:	6899      	ldr	r1, [r3, #8]
 8002772:	4b3b      	ldr	r3, [pc, #236]	; (8002860 <StartClientTask+0x134>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	461a      	mov	r2, r3
 8002778:	f7ff f8b8 	bl	80018ec <print_ip>
		//printf("%"PRIu32"\r\n", gnetif.ip_addr.addr); //print time information

		nRead = 0;			//clear indexes
 800277c:	2300      	movs	r3, #0
 800277e:	83fb      	strh	r3, [r7, #30]
		nWritten = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	83bb      	strh	r3, [r7, #28]

		//conn = netconn_new(NETCONN_TCP); //new tcp netconn
		conn = netconn_new(NETCONN_UDP);			//new udp netconn
 8002784:	2200      	movs	r2, #0
 8002786:	2100      	movs	r1, #0
 8002788:	2020      	movs	r0, #32
 800278a:	f00a f835 	bl	800c7f8 <netconn_new_with_proto_and_callback>
 800278e:	4602      	mov	r2, r0
 8002790:	4b35      	ldr	r3, [pc, #212]	; (8002868 <StartClientTask+0x13c>)
 8002792:	601a      	str	r2, [r3, #0]

		if (conn != NULL) {
 8002794:	4b34      	ldr	r3, [pc, #208]	; (8002868 <StartClientTask+0x13c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0d2      	beq.n	8002742 <StartClientTask+0x16>

			printf("start Socket connect\r\n");
 800279c:	4833      	ldr	r0, [pc, #204]	; (800286c <StartClientTask+0x140>)
 800279e:	f018 fb97 	bl	801aed0 <puts>

			IP4_ADDR(&server_addr, SERVER_IP1, SERVER_IP2, SERVER_IP3,
 80027a2:	4b33      	ldr	r3, [pc, #204]	; (8002870 <StartClientTask+0x144>)
 80027a4:	4a33      	ldr	r2, [pc, #204]	; (8002874 <StartClientTask+0x148>)
 80027a6:	601a      	str	r2, [r3, #0]
					SERVER_IP4);	//server ip
			err = netconn_connect(conn, &server_addr, SERVER_PORT);	//connect to the server
 80027a8:	4b2f      	ldr	r3, [pc, #188]	; (8002868 <StartClientTask+0x13c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80027b0:	492f      	ldr	r1, [pc, #188]	; (8002870 <StartClientTask+0x144>)
 80027b2:	4618      	mov	r0, r3
 80027b4:	f00a f8da 	bl	800c96c <netconn_connect>
 80027b8:	4603      	mov	r3, r0
 80027ba:	76fb      	strb	r3, [r7, #27]

			if (err != ERR_OK) {
 80027bc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00f      	beq.n	80027e4 <StartClientTask+0xb8>
				printf("connect ERR %d\r\n", err);
 80027c4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80027c8:	4619      	mov	r1, r3
 80027ca:	482b      	ldr	r0, [pc, #172]	; (8002878 <StartClientTask+0x14c>)
 80027cc:	f018 fb0c 	bl	801ade8 <iprintf>
				netconn_delete(conn); //free memory
 80027d0:	4b25      	ldr	r3, [pc, #148]	; (8002868 <StartClientTask+0x13c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f00a f8ad 	bl	800c934 <netconn_delete>
				osDelay(1000);
 80027da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027de:	f007 f8d3 	bl	8009988 <osDelay>
				continue;
 80027e2:	e039      	b.n	8002858 <StartClientTask+0x12c>
			}
			printf("connected %d\r\n", conn->state);
 80027e4:	4b20      	ldr	r3, [pc, #128]	; (8002868 <StartClientTask+0x13c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	785b      	ldrb	r3, [r3, #1]
 80027ea:	4619      	mov	r1, r3
 80027ec:	4823      	ldr	r0, [pc, #140]	; (800287c <StartClientTask+0x150>)
 80027ee:	f018 fafb 	bl	801ade8 <iprintf>
//				} else {
//					nWritten += len;
//				}
//			} while (nWritten < sizeof(struct time_packet)); //send request

			while (netconn_recv(conn, &buf) == ERR_OK)	//receive the response
 80027f2:	e016      	b.n	8002822 <StartClientTask+0xf6>
			{
				do {

					netbuf_data(buf, &data, &len); //receive lora_rv_data pointer & length
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f107 020e 	add.w	r2, r7, #14
 80027fa:	f107 0110 	add.w	r1, r7, #16
 80027fe:	4618      	mov	r0, r3
 8002800:	f00b ff36 	bl	800e670 <netbuf_data>

					//memcpy(&packet + nRead, lora_rv_data, len);
					//printf("receive@@ %d \r\n", len);
					nRead += len;
 8002804:	89fa      	ldrh	r2, [r7, #14]
 8002806:	8bfb      	ldrh	r3, [r7, #30]
 8002808:	4413      	add	r3, r2
 800280a:	83fb      	strh	r3, [r7, #30]
				} while (netbuf_next(buf) >= 0); //check buffer empty
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	4618      	mov	r0, r3
 8002810:	f00b ff78 	bl	800e704 <netbuf_next>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	daec      	bge.n	80027f4 <StartClientTask+0xc8>
				netbuf_delete(buf); //clear buffer
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	4618      	mov	r0, r3
 800281e:	f00b febd 	bl	800e59c <netbuf_delete>
			while (netconn_recv(conn, &buf) == ERR_OK)	//receive the response
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <StartClientTask+0x13c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f107 0214 	add.w	r2, r7, #20
 800282a:	4611      	mov	r1, r2
 800282c:	4618      	mov	r0, r3
 800282e:	f00a fa51 	bl	800ccd4 <netconn_recv>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0dd      	beq.n	80027f4 <StartClientTask+0xc8>
			}

			printf("end \r\n");
 8002838:	4811      	ldr	r0, [pc, #68]	; (8002880 <StartClientTask+0x154>)
 800283a:	f018 fb49 	bl	801aed0 <puts>
			netconn_close(conn); //close session
 800283e:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <StartClientTask+0x13c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f00a fb1e 	bl	800ce84 <netconn_close>
			netconn_delete(conn); //free memory
 8002848:	4b07      	ldr	r3, [pc, #28]	; (8002868 <StartClientTask+0x13c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f00a f871 	bl	800c934 <netconn_delete>
			conn = NULL;
 8002852:	4b05      	ldr	r3, [pc, #20]	; (8002868 <StartClientTask+0x13c>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0
 8002858:	e773      	b.n	8002742 <StartClientTask+0x16>
 800285a:	bf00      	nop
 800285c:	0801f4dc 	.word	0x0801f4dc
 8002860:	2000140c 	.word	0x2000140c
 8002864:	0801f4fc 	.word	0x0801f4fc
 8002868:	200009dc 	.word	0x200009dc
 800286c:	0801f50c 	.word	0x0801f50c
 8002870:	200009e4 	.word	0x200009e4
 8002874:	8901a8c0 	.word	0x8901a8c0
 8002878:	0801f524 	.word	0x0801f524
 800287c:	0801f538 	.word	0x0801f538
 8002880:	0801f548 	.word	0x0801f548

08002884 <startUdpSendTask>:
		}
	}
}

uint8_t send_buf[512];
void startUdpSendTask(void const *argument) {
 8002884:	b580      	push	{r7, lr}
 8002886:	b096      	sub	sp, #88	; 0x58
 8002888:	af12      	add	r7, sp, #72	; 0x48
 800288a:	6078      	str	r0, [r7, #4]

	printf("----- startUdpSendTask ------\r\n");
 800288c:	4839      	ldr	r0, [pc, #228]	; (8002974 <startUdpSendTask+0xf0>)
 800288e:	f018 fb1f 	bl	801aed0 <puts>

	struct netbuf *netbuf;
	netbuf = netbuf_new();
 8002892:	f00b fe6f 	bl	800e574 <netbuf_new>
 8002896:	60f8      	str	r0, [r7, #12]
	while (1) {
		if (conn != NULL && conn->state == NETCONN_NONE) {
 8002898:	4b37      	ldr	r3, [pc, #220]	; (8002978 <startUdpSendTask+0xf4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d064      	beq.n	800296a <startUdpSendTask+0xe6>
 80028a0:	4b35      	ldr	r3, [pc, #212]	; (8002978 <startUdpSendTask+0xf4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	785b      	ldrb	r3, [r3, #1]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d15f      	bne.n	800296a <startUdpSendTask+0xe6>

			memset(send_buf, 0, sizeof(send_buf));
 80028aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ae:	2100      	movs	r1, #0
 80028b0:	4832      	ldr	r0, [pc, #200]	; (800297c <startUdpSendTask+0xf8>)
 80028b2:	f017 fbd4 	bl	801a05e <memset>
			sprintf((char*) send_buf,
 80028b6:	4b32      	ldr	r3, [pc, #200]	; (8002980 <startUdpSendTask+0xfc>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4b32      	ldr	r3, [pc, #200]	; (8002984 <startUdpSendTask+0x100>)
 80028bc:	edd3 7a00 	vldr	s15, [r3]
 80028c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028c4:	4b30      	ldr	r3, [pc, #192]	; (8002988 <startUdpSendTask+0x104>)
 80028c6:	edd3 6a00 	vldr	s13, [r3]
 80028ca:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80028ce:	4b2f      	ldr	r3, [pc, #188]	; (800298c <startUdpSendTask+0x108>)
 80028d0:	edd3 5a00 	vldr	s11, [r3]
 80028d4:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80028d8:	4b2d      	ldr	r3, [pc, #180]	; (8002990 <startUdpSendTask+0x10c>)
 80028da:	edd3 4a00 	vldr	s9, [r3]
 80028de:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 80028e2:	4b2c      	ldr	r3, [pc, #176]	; (8002994 <startUdpSendTask+0x110>)
 80028e4:	edd3 3a00 	vldr	s7, [r3]
 80028e8:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 80028ec:	4b2a      	ldr	r3, [pc, #168]	; (8002998 <startUdpSendTask+0x114>)
 80028ee:	edd3 2a00 	vldr	s5, [r3]
 80028f2:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 80028f6:	4b29      	ldr	r3, [pc, #164]	; (800299c <startUdpSendTask+0x118>)
 80028f8:	edd3 1a00 	vldr	s3, [r3]
 80028fc:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 8002900:	4b27      	ldr	r3, [pc, #156]	; (80029a0 <startUdpSendTask+0x11c>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	4619      	mov	r1, r3
 8002906:	4b27      	ldr	r3, [pc, #156]	; (80029a4 <startUdpSendTask+0x120>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	4b26      	ldr	r3, [pc, #152]	; (80029a8 <startUdpSendTask+0x124>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	9310      	str	r3, [sp, #64]	; 0x40
 8002912:	900f      	str	r0, [sp, #60]	; 0x3c
 8002914:	910e      	str	r1, [sp, #56]	; 0x38
 8002916:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 800291a:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 800291e:	ed8d 3b08 	vstr	d3, [sp, #32]
 8002922:	ed8d 4b06 	vstr	d4, [sp, #24]
 8002926:	ed8d 5b04 	vstr	d5, [sp, #16]
 800292a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800292e:	ed8d 7b00 	vstr	d7, [sp]
 8002932:	491e      	ldr	r1, [pc, #120]	; (80029ac <startUdpSendTask+0x128>)
 8002934:	4811      	ldr	r0, [pc, #68]	; (800297c <startUdpSendTask+0xf8>)
 8002936:	f018 fb77 	bl	801b028 <siprintf>
					device_id,
					temp, // 0
					vocs, // 0
					co, vibr_x, vibr_y, vibr_z, vibr, fire, fan_stat,
					fext_stat);
			printf("Send UDP Msg : %s\r\n", send_buf);
 800293a:	4910      	ldr	r1, [pc, #64]	; (800297c <startUdpSendTask+0xf8>)
 800293c:	481c      	ldr	r0, [pc, #112]	; (80029b0 <startUdpSendTask+0x12c>)
 800293e:	f018 fa53 	bl	801ade8 <iprintf>

			//HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_13); //toggle running led

			//UDP
			netbuf_ref(netbuf, send_buf, strlen(send_buf));
 8002942:	480e      	ldr	r0, [pc, #56]	; (800297c <startUdpSendTask+0xf8>)
 8002944:	f7fd fc7c 	bl	8000240 <strlen>
 8002948:	4603      	mov	r3, r0
 800294a:	b29b      	uxth	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	490b      	ldr	r1, [pc, #44]	; (800297c <startUdpSendTask+0xf8>)
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f00b fe43 	bl	800e5dc <netbuf_ref>
			netconn_send(conn, netbuf);
 8002956:	4b08      	ldr	r3, [pc, #32]	; (8002978 <startUdpSendTask+0xf4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68f9      	ldr	r1, [r7, #12]
 800295c:	4618      	mov	r0, r3
 800295e:	f00a fa33 	bl	800cdc8 <netconn_send>

			vibr = 0;
 8002962:	4b0e      	ldr	r3, [pc, #56]	; (800299c <startUdpSendTask+0x118>)
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	601a      	str	r2, [r3, #0]

			//TCP
			//netconn_write(conn, send_buf, sizeof(send_buf), NETCONN_NOFLAG);

		}
		osDelay(5000);
 800296a:	f241 3088 	movw	r0, #5000	; 0x1388
 800296e:	f007 f80b 	bl	8009988 <osDelay>
		if (conn != NULL && conn->state == NETCONN_NONE) {
 8002972:	e791      	b.n	8002898 <startUdpSendTask+0x14>
 8002974:	0801f550 	.word	0x0801f550
 8002978:	200009dc 	.word	0x200009dc
 800297c:	2000118c 	.word	0x2000118c
 8002980:	20000c2c 	.word	0x20000c2c
 8002984:	20000c30 	.word	0x20000c30
 8002988:	20000d6c 	.word	0x20000d6c
 800298c:	20001174 	.word	0x20001174
 8002990:	20000c84 	.word	0x20000c84
 8002994:	20001178 	.word	0x20001178
 8002998:	200009e0 	.word	0x200009e0
 800299c:	20000cdc 	.word	0x20000cdc
 80029a0:	20001390 	.word	0x20001390
 80029a4:	20001188 	.word	0x20001188
 80029a8:	20000a7c 	.word	0x20000a7c
 80029ac:	0801f570 	.word	0x0801f570
 80029b0:	0801f5f0 	.word	0x0801f5f0

080029b4 <startLoRaSendTask>:

	}
}

void startLoRaSendTask(void const *argument) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

	printf("----- startLoRaSendTask ------\r\n");
 80029bc:	4814      	ldr	r0, [pc, #80]	; (8002a10 <startLoRaSendTask+0x5c>)
 80029be:	f018 fa87 	bl	801aed0 <puts>
	while (1) {
		// send LoRa message
		if (lora_init) { // lora_init
 80029c2:	4b14      	ldr	r3, [pc, #80]	; (8002a14 <startLoRaSendTask+0x60>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d01c      	beq.n	8002a04 <startLoRaSendTask+0x50>
			state = Lora_Status(&huart1);
 80029ca:	4813      	ldr	r0, [pc, #76]	; (8002a18 <startLoRaSendTask+0x64>)
 80029cc:	f7ff fd14 	bl	80023f8 <Lora_Status>
 80029d0:	4603      	mov	r3, r0
 80029d2:	461a      	mov	r2, r3
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <startLoRaSendTask+0x68>)
 80029d6:	701a      	strb	r2, [r3, #0]
			if (state) {
 80029d8:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <startLoRaSendTask+0x68>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <startLoRaSendTask+0x34>
				Lora_Send(&huart1);
 80029e0:	480d      	ldr	r0, [pc, #52]	; (8002a18 <startLoRaSendTask+0x64>)
 80029e2:	f7ff fd49 	bl	8002478 <Lora_Send>
 80029e6:	e00d      	b.n	8002a04 <startLoRaSendTask+0x50>
			} else { // JOIN
				state = Lora_Join(&huart1);
 80029e8:	480b      	ldr	r0, [pc, #44]	; (8002a18 <startLoRaSendTask+0x64>)
 80029ea:	f7ff fd25 	bl	8002438 <Lora_Join>
 80029ee:	4603      	mov	r3, r0
 80029f0:	461a      	mov	r2, r3
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <startLoRaSendTask+0x68>)
 80029f4:	701a      	strb	r2, [r3, #0]
				if (state == true)
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <startLoRaSendTask+0x68>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d002      	beq.n	8002a04 <startLoRaSendTask+0x50>
					printf("Lora JOIN Success!!\r\n");
 80029fe:	4808      	ldr	r0, [pc, #32]	; (8002a20 <startLoRaSendTask+0x6c>)
 8002a00:	f018 fa66 	bl	801aed0 <puts>
			}
		}
		osDelay(1000);
 8002a04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a08:	f006 ffbe 	bl	8009988 <osDelay>
		if (lora_init) { // lora_init
 8002a0c:	e7d9      	b.n	80029c2 <startLoRaSendTask+0xe>
 8002a0e:	bf00      	nop
 8002a10:	0801f604 	.word	0x0801f604
 8002a14:	200013b8 	.word	0x200013b8
 8002a18:	20000ce0 	.word	0x20000ce0
 8002a1c:	20000c35 	.word	0x20000c35
 8002a20:	0801f624 	.word	0x0801f624

08002a24 <startLedBlinkTask>:
	}
}

void startLedBlinkTask(void const *argument) {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

	printf("----- startLedBlinkTask ------\r\n");
 8002a2c:	4805      	ldr	r0, [pc, #20]	; (8002a44 <startLedBlinkTask+0x20>)
 8002a2e:	f018 fa4f 	bl	801aed0 <puts>
	while (1) {
		HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8002a32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a36:	4804      	ldr	r0, [pc, #16]	; (8002a48 <startLedBlinkTask+0x24>)
 8002a38:	f003 f819 	bl	8005a6e <HAL_GPIO_TogglePin>
		osDelay(200);
 8002a3c:	20c8      	movs	r0, #200	; 0xc8
 8002a3e:	f006 ffa3 	bl	8009988 <osDelay>
		HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8002a42:	e7f6      	b.n	8002a32 <startLedBlinkTask+0xe>
 8002a44:	0801f63c 	.word	0x0801f63c
 8002a48:	40020400 	.word	0x40020400

08002a4c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002a4c:	b5b0      	push	{r4, r5, r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002a52:	f001 f912 	bl	8003c7a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002a56:	f000 f82d 	bl	8002ab4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002a5a:	f000 fa57 	bl	8002f0c <MX_GPIO_Init>
	MX_ADC1_Init();
 8002a5e:	f000 f8bf 	bl	8002be0 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8002a62:	f000 f9f3 	bl	8002e4c <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 8002a66:	f000 fa21 	bl	8002eac <MX_USART3_UART_Init>
	MX_ADC3_Init();
 8002a6a:	f000 f95d 	bl	8002d28 <MX_ADC3_Init>
	MX_ADC2_Init();
 8002a6e:	f000 f909 	bl	8002c84 <MX_ADC2_Init>
	MX_I2C1_Init();
 8002a72:	f000 f9ab 	bl	8002dcc <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	// power led
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8002a76:	2201      	movs	r2, #1
 8002a78:	2180      	movs	r1, #128	; 0x80
 8002a7a:	480b      	ldr	r0, [pc, #44]	; (8002aa8 <main+0x5c>)
 8002a7c:	f002 ffde 	bl	8005a3c <HAL_GPIO_WritePin>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8002a80:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <main+0x60>)
 8002a82:	1d3c      	adds	r4, r7, #4
 8002a84:	461d      	mov	r5, r3
 8002a86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002a92:	1d3b      	adds	r3, r7, #4
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f006 ff1e 	bl	80098d8 <osThreadCreate>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <main+0x64>)
 8002aa0:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8002aa2:	f006 ff02 	bl	80098aa <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8002aa6:	e7fe      	b.n	8002aa6 <main+0x5a>
 8002aa8:	40020400 	.word	0x40020400
 8002aac:	0801f668 	.word	0x0801f668
 8002ab0:	200009ec 	.word	0x200009ec

08002ab4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b0b8      	sub	sp, #224	; 0xe0
 8002ab8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002aba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002abe:	2234      	movs	r2, #52	; 0x34
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f017 facb 	bl	801a05e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002ac8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8002ad8:	f107 0308 	add.w	r3, r7, #8
 8002adc:	2290      	movs	r2, #144	; 0x90
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f017 fabc 	bl	801a05e <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8002ae6:	f003 fce7 	bl	80064b8 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002aea:	4b3b      	ldr	r3, [pc, #236]	; (8002bd8 <SystemClock_Config+0x124>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	4a3a      	ldr	r2, [pc, #232]	; (8002bd8 <SystemClock_Config+0x124>)
 8002af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af4:	6413      	str	r3, [r2, #64]	; 0x40
 8002af6:	4b38      	ldr	r3, [pc, #224]	; (8002bd8 <SystemClock_Config+0x124>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afe:	607b      	str	r3, [r7, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002b02:	4b36      	ldr	r3, [pc, #216]	; (8002bdc <SystemClock_Config+0x128>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002b0a:	4a34      	ldr	r2, [pc, #208]	; (8002bdc <SystemClock_Config+0x128>)
 8002b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	4b32      	ldr	r3, [pc, #200]	; (8002bdc <SystemClock_Config+0x128>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b1a:	603b      	str	r3, [r7, #0]
 8002b1c:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002b24:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002b28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 96;
 8002b40:	2360      	movs	r3, #96	; 0x60
 8002b42:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b46:	2302      	movs	r3, #2
 8002b48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b4c:	2304      	movs	r3, #4
 8002b4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002b52:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002b56:	4618      	mov	r0, r3
 8002b58:	f003 fd0e 	bl	8006578 <HAL_RCC_OscConfig>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <SystemClock_Config+0xb2>
		Error_Handler();
 8002b62:	f000 fd89 	bl	8003678 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8002b66:	f003 fcb7 	bl	80064d8 <HAL_PWREx_EnableOverDrive>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <SystemClock_Config+0xc0>
		Error_Handler();
 8002b70:	f000 fd82 	bl	8003678 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002b74:	230f      	movs	r3, #15
 8002b76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8002b94:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002b98:	2103      	movs	r1, #3
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f003 ff9a 	bl	8006ad4 <HAL_RCC_ClockConfig>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <SystemClock_Config+0xf6>
		Error_Handler();
 8002ba6:	f000 fd67 	bl	8003678 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8002baa:	f244 1340 	movw	r3, #16704	; 0x4140
 8002bae:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_I2C1;
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8002bbc:	f107 0308 	add.w	r3, r7, #8
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f004 f9b1 	bl	8006f28 <HAL_RCCEx_PeriphCLKConfig>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <SystemClock_Config+0x11c>
		Error_Handler();
 8002bcc:	f000 fd54 	bl	8003678 <Error_Handler>
	}
}
 8002bd0:	bf00      	nop
 8002bd2:	37e0      	adds	r7, #224	; 0xe0
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40007000 	.word	0x40007000

08002be0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002be6:	463b      	mov	r3, r7
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8002bf2:	4b21      	ldr	r3, [pc, #132]	; (8002c78 <MX_ADC1_Init+0x98>)
 8002bf4:	4a21      	ldr	r2, [pc, #132]	; (8002c7c <MX_ADC1_Init+0x9c>)
 8002bf6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002bf8:	4b1f      	ldr	r3, [pc, #124]	; (8002c78 <MX_ADC1_Init+0x98>)
 8002bfa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bfe:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c00:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <MX_ADC1_Init+0x98>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002c06:	4b1c      	ldr	r3, [pc, #112]	; (8002c78 <MX_ADC1_Init+0x98>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <MX_ADC1_Init+0x98>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c12:	4b19      	ldr	r3, [pc, #100]	; (8002c78 <MX_ADC1_Init+0x98>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c1a:	4b17      	ldr	r3, [pc, #92]	; (8002c78 <MX_ADC1_Init+0x98>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c20:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <MX_ADC1_Init+0x98>)
 8002c22:	4a17      	ldr	r2, [pc, #92]	; (8002c80 <MX_ADC1_Init+0xa0>)
 8002c24:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c26:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <MX_ADC1_Init+0x98>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8002c2c:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <MX_ADC1_Init+0x98>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8002c32:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <MX_ADC1_Init+0x98>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c3a:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <MX_ADC1_Init+0x98>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002c40:	480d      	ldr	r0, [pc, #52]	; (8002c78 <MX_ADC1_Init+0x98>)
 8002c42:	f001 f869 	bl	8003d18 <HAL_ADC_Init>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <MX_ADC1_Init+0x70>
		Error_Handler();
 8002c4c:	f000 fd14 	bl	8003678 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8002c50:	2309      	movs	r3, #9
 8002c52:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c54:	2301      	movs	r3, #1
 8002c56:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002c5c:	463b      	mov	r3, r7
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4805      	ldr	r0, [pc, #20]	; (8002c78 <MX_ADC1_Init+0x98>)
 8002c62:	f001 f9ef 	bl	8004044 <HAL_ADC_ConfigChannel>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_ADC1_Init+0x90>
		Error_Handler();
 8002c6c:	f000 fd04 	bl	8003678 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002c70:	bf00      	nop
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	20000c38 	.word	0x20000c38
 8002c7c:	40012000 	.word	0x40012000
 8002c80:	0f000001 	.word	0x0f000001

08002c84 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002c8a:	463b      	mov	r3, r7
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 8002c96:	4b21      	ldr	r3, [pc, #132]	; (8002d1c <MX_ADC2_Init+0x98>)
 8002c98:	4a21      	ldr	r2, [pc, #132]	; (8002d20 <MX_ADC2_Init+0x9c>)
 8002c9a:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c9c:	4b1f      	ldr	r3, [pc, #124]	; (8002d1c <MX_ADC2_Init+0x98>)
 8002c9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ca2:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002ca4:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <MX_ADC2_Init+0x98>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002caa:	4b1c      	ldr	r3, [pc, #112]	; (8002d1c <MX_ADC2_Init+0x98>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8002cb0:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <MX_ADC2_Init+0x98>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	619a      	str	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002cb6:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <MX_ADC2_Init+0x98>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002cbe:	4b17      	ldr	r3, [pc, #92]	; (8002d1c <MX_ADC2_Init+0x98>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cc4:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <MX_ADC2_Init+0x98>)
 8002cc6:	4a17      	ldr	r2, [pc, #92]	; (8002d24 <MX_ADC2_Init+0xa0>)
 8002cc8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cca:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <MX_ADC2_Init+0x98>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8002cd0:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <MX_ADC2_Init+0x98>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8002cd6:	4b11      	ldr	r3, [pc, #68]	; (8002d1c <MX_ADC2_Init+0x98>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002cde:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <MX_ADC2_Init+0x98>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8002ce4:	480d      	ldr	r0, [pc, #52]	; (8002d1c <MX_ADC2_Init+0x98>)
 8002ce6:	f001 f817 	bl	8003d18 <HAL_ADC_Init>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_ADC2_Init+0x70>
		Error_Handler();
 8002cf0:	f000 fcc2 	bl	8003678 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 8002cf4:	230c      	movs	r3, #12
 8002cf6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8002d00:	463b      	mov	r3, r7
 8002d02:	4619      	mov	r1, r3
 8002d04:	4805      	ldr	r0, [pc, #20]	; (8002d1c <MX_ADC2_Init+0x98>)
 8002d06:	f001 f99d 	bl	8004044 <HAL_ADC_ConfigChannel>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_ADC2_Init+0x90>
		Error_Handler();
 8002d10:	f000 fcb2 	bl	8003678 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20000a80 	.word	0x20000a80
 8002d20:	40012100 	.word	0x40012100
 8002d24:	0f000001 	.word	0x0f000001

08002d28 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002d2e:	463b      	mov	r3, r7
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8002d3a:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <MX_ADC3_Init+0x98>)
 8002d3c:	4a21      	ldr	r2, [pc, #132]	; (8002dc4 <MX_ADC3_Init+0x9c>)
 8002d3e:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002d40:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <MX_ADC3_Init+0x98>)
 8002d42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d46:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002d48:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <MX_ADC3_Init+0x98>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002d4e:	4b1c      	ldr	r3, [pc, #112]	; (8002dc0 <MX_ADC3_Init+0x98>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8002d54:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <MX_ADC3_Init+0x98>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002d5a:	4b19      	ldr	r3, [pc, #100]	; (8002dc0 <MX_ADC3_Init+0x98>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d62:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <MX_ADC3_Init+0x98>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d68:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <MX_ADC3_Init+0x98>)
 8002d6a:	4a17      	ldr	r2, [pc, #92]	; (8002dc8 <MX_ADC3_Init+0xa0>)
 8002d6c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d6e:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <MX_ADC3_Init+0x98>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8002d74:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <MX_ADC3_Init+0x98>)
 8002d76:	2201      	movs	r2, #1
 8002d78:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8002d7a:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <MX_ADC3_Init+0x98>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d82:	4b0f      	ldr	r3, [pc, #60]	; (8002dc0 <MX_ADC3_Init+0x98>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8002d88:	480d      	ldr	r0, [pc, #52]	; (8002dc0 <MX_ADC3_Init+0x98>)
 8002d8a:	f000 ffc5 	bl	8003d18 <HAL_ADC_Init>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_ADC3_Init+0x70>
		Error_Handler();
 8002d94:	f000 fc70 	bl	8003678 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8002d98:	230e      	movs	r3, #14
 8002d9a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8002da4:	463b      	mov	r3, r7
 8002da6:	4619      	mov	r1, r3
 8002da8:	4805      	ldr	r0, [pc, #20]	; (8002dc0 <MX_ADC3_Init+0x98>)
 8002daa:	f001 f94b 	bl	8004044 <HAL_ADC_ConfigChannel>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <MX_ADC3_Init+0x90>
		Error_Handler();
 8002db4:	f000 fc60 	bl	8003678 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8002db8:	bf00      	nop
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	20000c8c 	.word	0x20000c8c
 8002dc4:	40012200 	.word	0x40012200
 8002dc8:	0f000001 	.word	0x0f000001

08002dcc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <MX_I2C1_Init+0x74>)
 8002dd2:	4a1c      	ldr	r2, [pc, #112]	; (8002e44 <MX_I2C1_Init+0x78>)
 8002dd4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x20303E5D;
 8002dd6:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <MX_I2C1_Init+0x74>)
 8002dd8:	4a1b      	ldr	r2, [pc, #108]	; (8002e48 <MX_I2C1_Init+0x7c>)
 8002dda:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8002ddc:	4b18      	ldr	r3, [pc, #96]	; (8002e40 <MX_I2C1_Init+0x74>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002de2:	4b17      	ldr	r3, [pc, #92]	; (8002e40 <MX_I2C1_Init+0x74>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002de8:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <MX_I2C1_Init+0x74>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8002dee:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <MX_I2C1_Init+0x74>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002df4:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <MX_I2C1_Init+0x74>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002dfa:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <MX_I2C1_Init+0x74>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e00:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <MX_I2C1_Init+0x74>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002e06:	480e      	ldr	r0, [pc, #56]	; (8002e40 <MX_I2C1_Init+0x74>)
 8002e08:	f002 fe64 	bl	8005ad4 <HAL_I2C_Init>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8002e12:	f000 fc31 	bl	8003678 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8002e16:	2100      	movs	r1, #0
 8002e18:	4809      	ldr	r0, [pc, #36]	; (8002e40 <MX_I2C1_Init+0x74>)
 8002e1a:	f003 fab5 	bl	8006388 <HAL_I2CEx_ConfigAnalogFilter>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8002e24:	f000 fc28 	bl	8003678 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8002e28:	2100      	movs	r1, #0
 8002e2a:	4805      	ldr	r0, [pc, #20]	; (8002e40 <MX_I2C1_Init+0x74>)
 8002e2c:	f003 faf7 	bl	800641e <HAL_I2CEx_ConfigDigitalFilter>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_I2C1_Init+0x6e>
		Error_Handler();
 8002e36:	f000 fc1f 	bl	8003678 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000acc 	.word	0x20000acc
 8002e44:	40005400 	.word	0x40005400
 8002e48:	20303e5d 	.word	0x20303e5d

08002e4c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002e50:	4b14      	ldr	r3, [pc, #80]	; (8002ea4 <MX_USART1_UART_Init+0x58>)
 8002e52:	4a15      	ldr	r2, [pc, #84]	; (8002ea8 <MX_USART1_UART_Init+0x5c>)
 8002e54:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002e56:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <MX_USART1_UART_Init+0x58>)
 8002e58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e5c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e5e:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <MX_USART1_UART_Init+0x58>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002e64:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <MX_USART1_UART_Init+0x58>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002e6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <MX_USART1_UART_Init+0x58>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002e70:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <MX_USART1_UART_Init+0x58>)
 8002e72:	220c      	movs	r2, #12
 8002e74:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e76:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <MX_USART1_UART_Init+0x58>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e7c:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <MX_USART1_UART_Init+0x58>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e82:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <MX_USART1_UART_Init+0x58>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <MX_USART1_UART_Init+0x58>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002e8e:	4805      	ldr	r0, [pc, #20]	; (8002ea4 <MX_USART1_UART_Init+0x58>)
 8002e90:	f004 fed6 	bl	8007c40 <HAL_UART_Init>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8002e9a:	f000 fbed 	bl	8003678 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000ce0 	.word	0x20000ce0
 8002ea8:	40011000 	.word	0x40011000

08002eac <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8002eb0:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <MX_USART3_UART_Init+0x58>)
 8002eb2:	4a15      	ldr	r2, [pc, #84]	; (8002f08 <MX_USART3_UART_Init+0x5c>)
 8002eb4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8002eb6:	4b13      	ldr	r3, [pc, #76]	; (8002f04 <MX_USART3_UART_Init+0x58>)
 8002eb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ebc:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ebe:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <MX_USART3_UART_Init+0x58>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8002ec4:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <MX_USART3_UART_Init+0x58>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8002eca:	4b0e      	ldr	r3, [pc, #56]	; (8002f04 <MX_USART3_UART_Init+0x58>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <MX_USART3_UART_Init+0x58>)
 8002ed2:	220c      	movs	r2, #12
 8002ed4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ed6:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <MX_USART3_UART_Init+0x58>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002edc:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <MX_USART3_UART_Init+0x58>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ee2:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <MX_USART3_UART_Init+0x58>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <MX_USART3_UART_Init+0x58>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8002eee:	4805      	ldr	r0, [pc, #20]	; (8002f04 <MX_USART3_UART_Init+0x58>)
 8002ef0:	f004 fea6 	bl	8007c40 <HAL_UART_Init>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8002efa:	f000 fbbd 	bl	8003678 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8002efe:	bf00      	nop
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	200009fc 	.word	0x200009fc
 8002f08:	40004800 	.word	0x40004800

08002f0c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08e      	sub	sp, #56	; 0x38
 8002f10:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	605a      	str	r2, [r3, #4]
 8002f1c:	609a      	str	r2, [r3, #8]
 8002f1e:	60da      	str	r2, [r3, #12]
 8002f20:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002f22:	4b83      	ldr	r3, [pc, #524]	; (8003130 <MX_GPIO_Init+0x224>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	4a82      	ldr	r2, [pc, #520]	; (8003130 <MX_GPIO_Init+0x224>)
 8002f28:	f043 0304 	orr.w	r3, r3, #4
 8002f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2e:	4b80      	ldr	r3, [pc, #512]	; (8003130 <MX_GPIO_Init+0x224>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	623b      	str	r3, [r7, #32]
 8002f38:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002f3a:	4b7d      	ldr	r3, [pc, #500]	; (8003130 <MX_GPIO_Init+0x224>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	4a7c      	ldr	r2, [pc, #496]	; (8003130 <MX_GPIO_Init+0x224>)
 8002f40:	f043 0320 	orr.w	r3, r3, #32
 8002f44:	6313      	str	r3, [r2, #48]	; 0x30
 8002f46:	4b7a      	ldr	r3, [pc, #488]	; (8003130 <MX_GPIO_Init+0x224>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f003 0320 	and.w	r3, r3, #32
 8002f4e:	61fb      	str	r3, [r7, #28]
 8002f50:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002f52:	4b77      	ldr	r3, [pc, #476]	; (8003130 <MX_GPIO_Init+0x224>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	4a76      	ldr	r2, [pc, #472]	; (8003130 <MX_GPIO_Init+0x224>)
 8002f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5e:	4b74      	ldr	r3, [pc, #464]	; (8003130 <MX_GPIO_Init+0x224>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f66:	61bb      	str	r3, [r7, #24]
 8002f68:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6a:	4b71      	ldr	r3, [pc, #452]	; (8003130 <MX_GPIO_Init+0x224>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	4a70      	ldr	r2, [pc, #448]	; (8003130 <MX_GPIO_Init+0x224>)
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	6313      	str	r3, [r2, #48]	; 0x30
 8002f76:	4b6e      	ldr	r3, [pc, #440]	; (8003130 <MX_GPIO_Init+0x224>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002f82:	4b6b      	ldr	r3, [pc, #428]	; (8003130 <MX_GPIO_Init+0x224>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	4a6a      	ldr	r2, [pc, #424]	; (8003130 <MX_GPIO_Init+0x224>)
 8002f88:	f043 0302 	orr.w	r3, r3, #2
 8002f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8e:	4b68      	ldr	r3, [pc, #416]	; (8003130 <MX_GPIO_Init+0x224>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002f9a:	4b65      	ldr	r3, [pc, #404]	; (8003130 <MX_GPIO_Init+0x224>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	4a64      	ldr	r2, [pc, #400]	; (8003130 <MX_GPIO_Init+0x224>)
 8002fa0:	f043 0310 	orr.w	r3, r3, #16
 8002fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa6:	4b62      	ldr	r3, [pc, #392]	; (8003130 <MX_GPIO_Init+0x224>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002fb2:	4b5f      	ldr	r3, [pc, #380]	; (8003130 <MX_GPIO_Init+0x224>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	4a5e      	ldr	r2, [pc, #376]	; (8003130 <MX_GPIO_Init+0x224>)
 8002fb8:	f043 0308 	orr.w	r3, r3, #8
 8002fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fbe:	4b5c      	ldr	r3, [pc, #368]	; (8003130 <MX_GPIO_Init+0x224>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002fca:	4b59      	ldr	r3, [pc, #356]	; (8003130 <MX_GPIO_Init+0x224>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	4a58      	ldr	r2, [pc, #352]	; (8003130 <MX_GPIO_Init+0x224>)
 8002fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd6:	4b56      	ldr	r3, [pc, #344]	; (8003130 <MX_GPIO_Init+0x224>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | LED2_Pin | LED1_Pin, GPIO_PIN_RESET);
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f244 0181 	movw	r1, #16513	; 0x4081
 8002fe8:	4852      	ldr	r0, [pc, #328]	; (8003134 <MX_GPIO_Init+0x228>)
 8002fea:	f002 fd27 	bl	8005a3c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, FAN_Pin | GPIO_PIN_6, GPIO_PIN_RESET);
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2144      	movs	r1, #68	; 0x44
 8002ff2:	4851      	ldr	r0, [pc, #324]	; (8003138 <MX_GPIO_Init+0x22c>)
 8002ff4:	f002 fd22 	bl	8005a3c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002ff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ffe:	4b4f      	ldr	r3, [pc, #316]	; (800313c <MX_GPIO_Init+0x230>)
 8003000:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003002:	2300      	movs	r3, #0
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800300a:	4619      	mov	r1, r3
 800300c:	484c      	ldr	r0, [pc, #304]	; (8003140 <MX_GPIO_Init+0x234>)
 800300e:	f002 fb53 	bl	80056b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 LED2_Pin LED1_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | LED2_Pin | LED1_Pin;
 8003012:	f244 0381 	movw	r3, #16513	; 0x4081
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003018:	2301      	movs	r3, #1
 800301a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	2300      	movs	r3, #0
 800301e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003020:	2300      	movs	r3, #0
 8003022:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003028:	4619      	mov	r1, r3
 800302a:	4842      	ldr	r0, [pc, #264]	; (8003134 <MX_GPIO_Init+0x228>)
 800302c:	f002 fb44 	bl	80056b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : SW3_1_Pin SW3_2_Pin SW3_3_Pin SW3_4_Pin */
	GPIO_InitStruct.Pin = SW3_1_Pin | SW3_2_Pin | SW3_3_Pin | SW3_4_Pin;
 8003030:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003036:	2300      	movs	r3, #0
 8003038:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800303e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003042:	4619      	mov	r1, r3
 8003044:	483f      	ldr	r0, [pc, #252]	; (8003144 <MX_GPIO_Init+0x238>)
 8003046:	f002 fb37 	bl	80056b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : FIRE0_Pin FIRE1_Pin */
	GPIO_InitStruct.Pin = FIRE0_Pin | FIRE1_Pin;
 800304a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003050:	2300      	movs	r3, #0
 8003052:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003054:	2300      	movs	r3, #0
 8003056:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800305c:	4619      	mov	r1, r3
 800305e:	483a      	ldr	r0, [pc, #232]	; (8003148 <MX_GPIO_Init+0x23c>)
 8003060:	f002 fb2a 	bl	80056b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : FAN_Pin PG6 */
	GPIO_InitStruct.Pin = FAN_Pin | GPIO_PIN_6;
 8003064:	2344      	movs	r3, #68	; 0x44
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003068:	2301      	movs	r3, #1
 800306a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306c:	2300      	movs	r3, #0
 800306e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003070:	2300      	movs	r3, #0
 8003072:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003078:	4619      	mov	r1, r3
 800307a:	482f      	ldr	r0, [pc, #188]	; (8003138 <MX_GPIO_Init+0x22c>)
 800307c:	f002 fb1c 	bl	80056b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : FEXT_NO_Pin FEXT_NC_Pin PG7 */
	GPIO_InitStruct.Pin = FEXT_NO_Pin | FEXT_NC_Pin | GPIO_PIN_7;
 8003080:	2398      	movs	r3, #152	; 0x98
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003084:	2300      	movs	r3, #0
 8003086:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800308c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003090:	4619      	mov	r1, r3
 8003092:	4829      	ldr	r0, [pc, #164]	; (8003138 <MX_GPIO_Init+0x22c>)
 8003094:	f002 fb10 	bl	80056b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA8 PA10 PA11 PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8003098:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309e:	2302      	movs	r3, #2
 80030a0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a6:	2303      	movs	r3, #3
 80030a8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80030aa:	230a      	movs	r3, #10
 80030ac:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b2:	4619      	mov	r1, r3
 80030b4:	4825      	ldr	r0, [pc, #148]	; (800314c <MX_GPIO_Init+0x240>)
 80030b6:	f002 faff 	bl	80056b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030c0:	2300      	movs	r3, #0
 80030c2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030cc:	4619      	mov	r1, r3
 80030ce:	481f      	ldr	r0, [pc, #124]	; (800314c <MX_GPIO_Init+0x240>)
 80030d0:	f002 faf2 	bl	80056b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD5 PD6 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80030d4:	2360      	movs	r3, #96	; 0x60
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d8:	2302      	movs	r3, #2
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e0:	2303      	movs	r3, #3
 80030e2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030e4:	2307      	movs	r3, #7
 80030e6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ec:	4619      	mov	r1, r3
 80030ee:	4816      	ldr	r0, [pc, #88]	; (8003148 <MX_GPIO_Init+0x23c>)
 80030f0:	f002 fae2 	bl	80056b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG9 PG14 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_14;
 80030f4:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fa:	2302      	movs	r3, #2
 80030fc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fe:	2300      	movs	r3, #0
 8003100:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003102:	2303      	movs	r3, #3
 8003104:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003106:	2308      	movs	r3, #8
 8003108:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800310a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800310e:	4619      	mov	r1, r3
 8003110:	4809      	ldr	r0, [pc, #36]	; (8003138 <MX_GPIO_Init+0x22c>)
 8003112:	f002 fad1 	bl	80056b8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003116:	2200      	movs	r2, #0
 8003118:	2105      	movs	r1, #5
 800311a:	2028      	movs	r0, #40	; 0x28
 800311c:	f001 fa8e 	bl	800463c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003120:	2028      	movs	r0, #40	; 0x28
 8003122:	f001 faa7 	bl	8004674 <HAL_NVIC_EnableIRQ>

}
 8003126:	bf00      	nop
 8003128:	3738      	adds	r7, #56	; 0x38
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800
 8003134:	40020400 	.word	0x40020400
 8003138:	40021800 	.word	0x40021800
 800313c:	10210000 	.word	0x10210000
 8003140:	40020800 	.word	0x40020800
 8003144:	40021000 	.word	0x40021000
 8003148:	40020c00 	.word	0x40020c00
 800314c:	40020000 	.word	0x40020000

08003150 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	80fb      	strh	r3, [r7, #6]

		//uint8_t init_sw = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
		//HAL_GPIO_TogglePin(GPIOB, RED_LED_Pin);
		//printf("PREESED\r\n");
	}
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
	...

08003168 <initTxType>:

void initTxType(void) {
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0

	uint8_t sw3_1 = HAL_GPIO_ReadPin(GPIOE, SW3_1_Pin);
 800316e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003172:	4812      	ldr	r0, [pc, #72]	; (80031bc <initTxType+0x54>)
 8003174:	f002 fc4a 	bl	8005a0c <HAL_GPIO_ReadPin>
 8003178:	4603      	mov	r3, r0
 800317a:	71fb      	strb	r3, [r7, #7]
	uint8_t sw3_2 = HAL_GPIO_ReadPin(GPIOE, SW3_2_Pin);
 800317c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003180:	480e      	ldr	r0, [pc, #56]	; (80031bc <initTxType+0x54>)
 8003182:	f002 fc43 	bl	8005a0c <HAL_GPIO_ReadPin>
 8003186:	4603      	mov	r3, r0
 8003188:	71bb      	strb	r3, [r7, #6]
	uint8_t sw3_3 = HAL_GPIO_ReadPin(GPIOE, SW3_3_Pin);
 800318a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800318e:	480b      	ldr	r0, [pc, #44]	; (80031bc <initTxType+0x54>)
 8003190:	f002 fc3c 	bl	8005a0c <HAL_GPIO_ReadPin>
 8003194:	4603      	mov	r3, r0
 8003196:	717b      	strb	r3, [r7, #5]
	uint8_t sw3_4 = HAL_GPIO_ReadPin(GPIOE, SW3_4_Pin);
 8003198:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800319c:	4807      	ldr	r0, [pc, #28]	; (80031bc <initTxType+0x54>)
 800319e:	f002 fc35 	bl	8005a0c <HAL_GPIO_ReadPin>
 80031a2:	4603      	mov	r3, r0
 80031a4:	713b      	strb	r3, [r7, #4]

	UDP = sw3_1;
 80031a6:	4a06      	ldr	r2, [pc, #24]	; (80031c0 <initTxType+0x58>)
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	7013      	strb	r3, [r2, #0]
	LORA = sw3_2;
 80031ac:	4a05      	ldr	r2, [pc, #20]	; (80031c4 <initTxType+0x5c>)
 80031ae:	79bb      	ldrb	r3, [r7, #6]
 80031b0:	7013      	strb	r3, [r2, #0]

}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000
 80031c0:	20000cd9 	.word	0x20000cd9
 80031c4:	20000c80 	.word	0x20000c80

080031c8 <initDeviceEui>:
	device_id = DEVICEID
	;
	printf("DEVICE_ID : %d\r\n", device_id);
}

void initDeviceEui(void) {
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0

	unsigned char a[] = { 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, (device_id
 80031ce:	23ff      	movs	r3, #255	; 0xff
 80031d0:	703b      	strb	r3, [r7, #0]
 80031d2:	23ff      	movs	r3, #255	; 0xff
 80031d4:	707b      	strb	r3, [r7, #1]
 80031d6:	23ff      	movs	r3, #255	; 0xff
 80031d8:	70bb      	strb	r3, [r7, #2]
 80031da:	23ff      	movs	r3, #255	; 0xff
 80031dc:	70fb      	strb	r3, [r7, #3]
 80031de:	2300      	movs	r3, #0
 80031e0:	713b      	strb	r3, [r7, #4]
 80031e2:	2300      	movs	r3, #0
 80031e4:	717b      	strb	r3, [r7, #5]
 80031e6:	2300      	movs	r3, #0
 80031e8:	71bb      	strb	r3, [r7, #6]
 80031ea:	4b14      	ldr	r3, [pc, #80]	; (800323c <initDeviceEui+0x74>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	71fb      	strb	r3, [r7, #7]
			& 0xff) };

	char *s = malloc(sizeof a * 2 + 1);
 80031f2:	2011      	movs	r0, #17
 80031f4:	f016 fede 	bl	8019fb4 <malloc>
 80031f8:	4603      	mov	r3, r0
 80031fa:	60bb      	str	r3, [r7, #8]
	for (size_t i = 0; i < sizeof a; i++)
 80031fc:	2300      	movs	r3, #0
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	e00e      	b.n	8003220 <initDeviceEui+0x58>
		sprintf(s + i * 2, "%02x", a[i]);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	18d0      	adds	r0, r2, r3
 800320a:	463a      	mov	r2, r7
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4413      	add	r3, r2
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	490a      	ldr	r1, [pc, #40]	; (8003240 <initDeviceEui+0x78>)
 8003216:	f017 ff07 	bl	801b028 <siprintf>
	for (size_t i = 0; i < sizeof a; i++)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	3301      	adds	r3, #1
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b07      	cmp	r3, #7
 8003224:	d9ed      	bls.n	8003202 <initDeviceEui+0x3a>

	printf("deviceEUI : %s\r\n", s);
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	4806      	ldr	r0, [pc, #24]	; (8003244 <initDeviceEui+0x7c>)
 800322a:	f017 fddd 	bl	801ade8 <iprintf>

	device_eui = s;
 800322e:	4a06      	ldr	r2, [pc, #24]	; (8003248 <initDeviceEui+0x80>)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	6013      	str	r3, [r2, #0]
	//free(s);

}
 8003234:	bf00      	nop
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	20000c2c 	.word	0x20000c2c
 8003240:	0801f698 	.word	0x0801f698
 8003244:	0801f6a0 	.word	0x0801f6a0
 8003248:	200009f8 	.word	0x200009f8

0800324c <initBma456>:

uint16_t initBma456(void) {
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
	int8_t rslt;

	/* Sensor initialization configuration */

	/* Variable to store accel data ready interrupt status */
	uint16_t int_status = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	80bb      	strh	r3, [r7, #4]

	/* Variable that holds the accelerometer sample count */
	uint8_t n_data = 100;
 8003256:	2364      	movs	r3, #100	; 0x64
 8003258:	71fb      	strb	r3, [r7, #7]

	struct bma4_accel_config accel_conf = { 0 };
 800325a:	2300      	movs	r3, #0
 800325c:	603b      	str	r3, [r7, #0]

	/* Function to select interface between SPI and I2C, according to that the device structure gets updated */
	rslt = bma4_interface_selection(&bma);
 800325e:	4834      	ldr	r0, [pc, #208]	; (8003330 <initBma456+0xe4>)
 8003260:	f7fe fa5c 	bl	800171c <bma4_interface_selection>
 8003264:	4603      	mov	r3, r0
 8003266:	71bb      	strb	r3, [r7, #6]

	bma4_error_codes_print_result("bma4_interface_selection", rslt);
 8003268:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800326c:	b29b      	uxth	r3, r3
 800326e:	4619      	mov	r1, r3
 8003270:	4830      	ldr	r0, [pc, #192]	; (8003334 <initBma456+0xe8>)
 8003272:	f7fe faa1 	bl	80017b8 <bma4_error_codes_print_result>
	//printf("bma4_interface_selection status\r\n");

	/* Sensor initialization */
	rslt = bma456_init(&bma);
 8003276:	482e      	ldr	r0, [pc, #184]	; (8003330 <initBma456+0xe4>)
 8003278:	f7fe f8e8 	bl	800144c <bma456_init>
 800327c:	4603      	mov	r3, r0
 800327e:	71bb      	strb	r3, [r7, #6]
	bma4_error_codes_print_result("bma456_init", rslt);
 8003280:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003284:	b29b      	uxth	r3, r3
 8003286:	4619      	mov	r1, r3
 8003288:	482b      	ldr	r0, [pc, #172]	; (8003338 <initBma456+0xec>)
 800328a:	f7fe fa95 	bl	80017b8 <bma4_error_codes_print_result>
	//printf("bma456_init status\r\n");

	/* Upload the configuration file to enable the features of the sensor. */

	rslt = bma456_write_config_file(&bma);
 800328e:	4828      	ldr	r0, [pc, #160]	; (8003330 <initBma456+0xe4>)
 8003290:	f7fe f904 	bl	800149c <bma456_write_config_file>
 8003294:	4603      	mov	r3, r0
 8003296:	71bb      	strb	r3, [r7, #6]
	bma4_error_codes_print_result("bma456_write_config_file", rslt);
 8003298:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800329c:	b29b      	uxth	r3, r3
 800329e:	4619      	mov	r1, r3
 80032a0:	4826      	ldr	r0, [pc, #152]	; (800333c <initBma456+0xf0>)
 80032a2:	f7fe fa89 	bl	80017b8 <bma4_error_codes_print_result>
	//printf("bma456_write_config status\r\n");

	/* Enable the accelerometer */
	rslt = bma4_set_accel_enable(BMA4_ENABLE, &bma);
 80032a6:	4922      	ldr	r1, [pc, #136]	; (8003330 <initBma456+0xe4>)
 80032a8:	2001      	movs	r0, #1
 80032aa:	f7fd ff6e 	bl	800118a <bma4_set_accel_enable>
 80032ae:	4603      	mov	r3, r0
 80032b0:	71bb      	strb	r3, [r7, #6]
	bma4_error_codes_print_result("bma4_set_accel_enable", rslt);
 80032b2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	4619      	mov	r1, r3
 80032ba:	4821      	ldr	r0, [pc, #132]	; (8003340 <initBma456+0xf4>)
 80032bc:	f7fe fa7c 	bl	80017b8 <bma4_error_codes_print_result>
	//printf("bma4_set_accel_enable status\r\n");

	/* Accelerometer configuration settings */
	/* Output data Rate */
	accel_conf.odr = BMA4_OUTPUT_DATA_RATE_50HZ;
 80032c0:	2307      	movs	r3, #7
 80032c2:	703b      	strb	r3, [r7, #0]

	/* Gravity range of the sensor (+/- 2G, 4G, 8G, 16G) */
	accel_conf.range = BMA4_ACCEL_RANGE_2G;
 80032c4:	2300      	movs	r3, #0
 80032c6:	70fb      	strb	r3, [r7, #3]
	 * are averaged, resulting in 4 averaged samples
	 * Note1 : For more information, refer the datasheet.
	 * Note2 : A higher number of averaged samples will result in a less noisier signal, but
	 * this has an adverse effect on the power consumed.
	 */
	accel_conf.bandwidth = BMA4_ACCEL_NORMAL_AVG4;
 80032c8:	2302      	movs	r3, #2
 80032ca:	707b      	strb	r3, [r7, #1]
	 *  1 -> No averaging
	 * For more info on No Averaging mode refer datasheet.
	 */
	//accel_conf.perf_mode = BMA4_CIC_AVG_MODE;
	/* Set the accel configurations */
	rslt = bma4_set_accel_config(&accel_conf, &bma);
 80032cc:	463b      	mov	r3, r7
 80032ce:	4918      	ldr	r1, [pc, #96]	; (8003330 <initBma456+0xe4>)
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fd fe41 	bl	8000f58 <bma4_set_accel_config>
 80032d6:	4603      	mov	r3, r0
 80032d8:	71bb      	strb	r3, [r7, #6]

	//printf("bma4_set_accel_config status\r\n");

	/* Mapping data ready interrupt with interrupt pin 1 to get interrupt status once getting new accel data */
	rslt = bma456_map_interrupt(BMA4_INTR1_MAP, BMA4_DATA_RDY_INT, BMA4_ENABLE,
 80032da:	4b15      	ldr	r3, [pc, #84]	; (8003330 <initBma456+0xe4>)
 80032dc:	2201      	movs	r2, #1
 80032de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032e2:	2000      	movs	r0, #0
 80032e4:	f7fe f916 	bl	8001514 <bma456_map_interrupt>
 80032e8:	4603      	mov	r3, r0
 80032ea:	71bb      	strb	r3, [r7, #6]

	//printf("Ax[m/s2], Ay[m/s2], Az[m/s2]\r\n");

	while (1) {
		/* Read interrupt status */
		rslt = bma456_read_int_status(&int_status, &bma);
 80032ec:	1d3b      	adds	r3, r7, #4
 80032ee:	4910      	ldr	r1, [pc, #64]	; (8003330 <initBma456+0xe4>)
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fe f93c 	bl	800156e <bma456_read_int_status>
 80032f6:	4603      	mov	r3, r0
 80032f8:	71bb      	strb	r3, [r7, #6]
		bma4_error_codes_print_result("bma456_read_int_status", rslt);
 80032fa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	4619      	mov	r1, r3
 8003302:	4810      	ldr	r0, [pc, #64]	; (8003344 <initBma456+0xf8>)
 8003304:	f7fe fa58 	bl	80017b8 <bma4_error_codes_print_result>

		/* Filtering only the accel data ready interrupt */
		if ((rslt == BMA4_OK) && (int_status & BMA4_ACCEL_DATA_RDY_INT)) {
 8003308:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1ed      	bne.n	80032ec <initBma456+0xa0>
 8003310:	88bb      	ldrh	r3, [r7, #4]
 8003312:	b21b      	sxth	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	dae9      	bge.n	80032ec <initBma456+0xa0>
			bma_init = true;
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <initBma456+0xfc>)
 800331a:	2201      	movs	r2, #1
 800331c:	701a      	strb	r2, [r3, #0]

			printf("BMA456 INIT Success\r\n");
 800331e:	480b      	ldr	r0, [pc, #44]	; (800334c <initBma456+0x100>)
 8003320:	f017 fdd6 	bl	801aed0 <puts>
//            if (n_data == 0)
//            {
//                printf("NData is 0 \r\n");
//            }

			return;
 8003324:	bf00      	nop
		}
	}

	return rslt;
}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	200006c8 	.word	0x200006c8
 8003334:	0801f6b4 	.word	0x0801f6b4
 8003338:	0801f6d0 	.word	0x0801f6d0
 800333c:	0801f6dc 	.word	0x0801f6dc
 8003340:	0801f6f8 	.word	0x0801f6f8
 8003344:	0801f710 	.word	0x0801f710
 8003348:	20000d70 	.word	0x20000d70
 800334c:	0801f728 	.word	0x0801f728

08003350 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8003350:	b5b0      	push	{r4, r5, r7, lr}
 8003352:	ed2d 8b02 	vpush	{d8}
 8003356:	b0a6      	sub	sp, #152	; 0x98
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
	/* init code for LWIP */
	MX_LWIP_Init();
 800335c:	f005 fdf6 	bl	8008f4c <MX_LWIP_Init>
	/* USER CODE BEGIN 5 */

	device_id = DEVICEID;
 8003360:	4ba1      	ldr	r3, [pc, #644]	; (80035e8 <StartDefaultTask+0x298>)
 8003362:	220b      	movs	r2, #11
 8003364:	601a      	str	r2, [r3, #0]

	printf("### DEVICE_ID : %d ### \r\n",device_id);
 8003366:	4ba0      	ldr	r3, [pc, #640]	; (80035e8 <StartDefaultTask+0x298>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4619      	mov	r1, r3
 800336c:	489f      	ldr	r0, [pc, #636]	; (80035ec <StartDefaultTask+0x29c>)
 800336e:	f017 fd3b 	bl	801ade8 <iprintf>


	// init status led blink start
	osThreadDef(led_blink_task, startLedBlinkTask, osPriorityNormal, 0,
 8003372:	4b9f      	ldr	r3, [pc, #636]	; (80035f0 <StartDefaultTask+0x2a0>)
 8003374:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8003378:	461d      	mov	r5, r3
 800337a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800337c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800337e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003382:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			configMINIMAL_STACK_SIZE);
	led_blink_task = osThreadCreate(osThread(led_blink_task), NULL);
 8003386:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800338a:	2100      	movs	r1, #0
 800338c:	4618      	mov	r0, r3
 800338e:	f006 faa3 	bl	80098d8 <osThreadCreate>
 8003392:	4602      	mov	r2, r0
 8003394:	4b97      	ldr	r3, [pc, #604]	; (80035f4 <StartDefaultTask+0x2a4>)
 8003396:	601a      	str	r2, [r3, #0]

	osDelay(1000);
 8003398:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800339c:	f006 faf4 	bl	8009988 <osDelay>

	initTxType();
 80033a0:	f7ff fee2 	bl	8003168 <initTxType>
	//initDeviceId();
	initBma456();
 80033a4:	f7ff ff52 	bl	800324c <initBma456>

	if (LORA) {
 80033a8:	4b93      	ldr	r3, [pc, #588]	; (80035f8 <StartDefaultTask+0x2a8>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d019      	beq.n	80033e4 <StartDefaultTask+0x94>
		printf("==== LORA start ==== \r\n");
 80033b0:	4892      	ldr	r0, [pc, #584]	; (80035fc <StartDefaultTask+0x2ac>)
 80033b2:	f017 fd8d 	bl	801aed0 <puts>
		initDeviceEui();
 80033b6:	f7ff ff07 	bl	80031c8 <initDeviceEui>
		initLoRa();
 80033ba:	f7ff f96d 	bl	8002698 <initLoRa>
		osThreadDef(lora_send_task, startLoRaSendTask, osPriorityNormal, 0,
 80033be:	4b90      	ldr	r3, [pc, #576]	; (8003600 <StartDefaultTask+0x2b0>)
 80033c0:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80033c4:	461d      	mov	r5, r3
 80033c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80033ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				configMINIMAL_STACK_SIZE);
		lora_send_task = osThreadCreate(osThread(lora_send_task), NULL);
 80033d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f006 fa7d 	bl	80098d8 <osThreadCreate>
 80033de:	4602      	mov	r2, r0
 80033e0:	4b88      	ldr	r3, [pc, #544]	; (8003604 <StartDefaultTask+0x2b4>)
 80033e2:	601a      	str	r2, [r3, #0]
	}

	if (UDP) {
 80033e4:	4b88      	ldr	r3, [pc, #544]	; (8003608 <StartDefaultTask+0x2b8>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d028      	beq.n	800343e <StartDefaultTask+0xee>
		printf("==== UDP start ==== \r\n");
 80033ec:	4887      	ldr	r0, [pc, #540]	; (800360c <StartDefaultTask+0x2bc>)
 80033ee:	f017 fd6f 	bl	801aed0 <puts>
		osThreadDef(tcp_task, StartClientTask, osPriorityNormal, 0,
 80033f2:	4b87      	ldr	r3, [pc, #540]	; (8003610 <StartDefaultTask+0x2c0>)
 80033f4:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80033f8:	461d      	mov	r5, r3
 80033fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003402:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				configMINIMAL_STACK_SIZE);
		tcp_task = osThreadCreate(osThread(tcp_task), NULL);
 8003406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800340a:	2100      	movs	r1, #0
 800340c:	4618      	mov	r0, r3
 800340e:	f006 fa63 	bl	80098d8 <osThreadCreate>
 8003412:	4602      	mov	r2, r0
 8003414:	4b7f      	ldr	r3, [pc, #508]	; (8003614 <StartDefaultTask+0x2c4>)
 8003416:	601a      	str	r2, [r3, #0]

		osThreadDef(udp_send_task, startUdpSendTask, osPriorityNormal, 0,
 8003418:	4b7f      	ldr	r3, [pc, #508]	; (8003618 <StartDefaultTask+0x2c8>)
 800341a:	f107 0408 	add.w	r4, r7, #8
 800341e:	461d      	mov	r5, r3
 8003420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003424:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003428:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				configMINIMAL_STACK_SIZE);
		udp_send_task = osThreadCreate(osThread(udp_send_task), NULL);
 800342c:	f107 0308 	add.w	r3, r7, #8
 8003430:	2100      	movs	r1, #0
 8003432:	4618      	mov	r0, r3
 8003434:	f006 fa50 	bl	80098d8 <osThreadCreate>
 8003438:	4602      	mov	r2, r0
 800343a:	4b78      	ldr	r3, [pc, #480]	; (800361c <StartDefaultTask+0x2cc>)
 800343c:	601a      	str	r2, [r3, #0]
	}

	// sensor data collection task.
	osThreadDef(collection_task, collectionTask, osPriorityNormal, 0,
 800343e:	4b78      	ldr	r3, [pc, #480]	; (8003620 <StartDefaultTask+0x2d0>)
 8003440:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8003444:	461d      	mov	r5, r3
 8003446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800344a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800344e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			configMINIMAL_STACK_SIZE);
	collection_task = osThreadCreate(osThread(collection_task), NULL);
 8003452:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003456:	2100      	movs	r1, #0
 8003458:	4618      	mov	r0, r3
 800345a:	f006 fa3d 	bl	80098d8 <osThreadCreate>
 800345e:	4602      	mov	r2, r0
 8003460:	4b70      	ldr	r3, [pc, #448]	; (8003624 <StartDefaultTask+0x2d4>)
 8003462:	601a      	str	r2, [r3, #0]
//	osThreadDef(i2c_task, StartI2CTask, osPriorityNormal, 0,
//			configMINIMAL_STACK_SIZE);
//	i2c_task = osThreadCreate(osThread(i2c_task), NULL);

	// init finish
	osThreadTerminate(led_blink_task);
 8003464:	4b63      	ldr	r3, [pc, #396]	; (80035f4 <StartDefaultTask+0x2a4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f006 fa81 	bl	8009970 <osThreadTerminate>
	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 800346e:	2201      	movs	r2, #1
 8003470:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003474:	486c      	ldr	r0, [pc, #432]	; (8003628 <StartDefaultTask+0x2d8>)
 8003476:	f002 fae1 	bl	8005a3c <HAL_GPIO_WritePin>

	HAL_StatusTypeDef ret;
	/* Infinite loop */
	for (;;) {
		if (bma_init) {
 800347a:	4b6c      	ldr	r3, [pc, #432]	; (800362c <StartDefaultTask+0x2dc>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0fb      	beq.n	800347a <StartDefaultTask+0x12a>
//				}
//				printf("\r\n");
//
//			}

			int8_t rslt = bma4_read_accel_xyz(&sens_data, &bma);
 8003482:	496b      	ldr	r1, [pc, #428]	; (8003630 <StartDefaultTask+0x2e0>)
 8003484:	486b      	ldr	r0, [pc, #428]	; (8003634 <StartDefaultTask+0x2e4>)
 8003486:	f7fd fcc9 	bl	8000e1c <bma4_read_accel_xyz>
 800348a:	4603      	mov	r3, r0
 800348c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			bma4_error_codes_print_result("bma4_read_accel_xyz status", rslt);
 8003490:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 8003494:	b29b      	uxth	r3, r3
 8003496:	4619      	mov	r1, r3
 8003498:	4867      	ldr	r0, [pc, #412]	; (8003638 <StartDefaultTask+0x2e8>)
 800349a:	f7fe f98d 	bl	80017b8 <bma4_error_codes_print_result>

			if (rslt == BMA4_OK) {
 800349e:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f040 809c 	bne.w	80035e0 <StartDefaultTask+0x290>

				/* Converting lsb to meter per second squared for 16 bit resolution at 2G range */
				vibr_x = lsb_to_ms2(sens_data.x, 2, bma.resolution);
 80034a8:	4b62      	ldr	r3, [pc, #392]	; (8003634 <StartDefaultTask+0x2e4>)
 80034aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80034ae:	4b60      	ldr	r3, [pc, #384]	; (8003630 <StartDefaultTask+0x2e0>)
 80034b0:	7b1b      	ldrb	r3, [r3, #12]
 80034b2:	4619      	mov	r1, r3
 80034b4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80034b8:	4610      	mov	r0, r2
 80034ba:	f7fe fa79 	bl	80019b0 <lsb_to_ms2>
 80034be:	eef0 7a40 	vmov.f32	s15, s0
 80034c2:	4b5e      	ldr	r3, [pc, #376]	; (800363c <StartDefaultTask+0x2ec>)
 80034c4:	edc3 7a00 	vstr	s15, [r3]
				vibr_y = lsb_to_ms2(sens_data.y, 2, bma.resolution);
 80034c8:	4b5a      	ldr	r3, [pc, #360]	; (8003634 <StartDefaultTask+0x2e4>)
 80034ca:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80034ce:	4b58      	ldr	r3, [pc, #352]	; (8003630 <StartDefaultTask+0x2e0>)
 80034d0:	7b1b      	ldrb	r3, [r3, #12]
 80034d2:	4619      	mov	r1, r3
 80034d4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80034d8:	4610      	mov	r0, r2
 80034da:	f7fe fa69 	bl	80019b0 <lsb_to_ms2>
 80034de:	eef0 7a40 	vmov.f32	s15, s0
 80034e2:	4b57      	ldr	r3, [pc, #348]	; (8003640 <StartDefaultTask+0x2f0>)
 80034e4:	edc3 7a00 	vstr	s15, [r3]
				vibr_z = lsb_to_ms2(sens_data.z, 2, bma.resolution);
 80034e8:	4b52      	ldr	r3, [pc, #328]	; (8003634 <StartDefaultTask+0x2e4>)
 80034ea:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80034ee:	4b50      	ldr	r3, [pc, #320]	; (8003630 <StartDefaultTask+0x2e0>)
 80034f0:	7b1b      	ldrb	r3, [r3, #12]
 80034f2:	4619      	mov	r1, r3
 80034f4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80034f8:	4610      	mov	r0, r2
 80034fa:	f7fe fa59 	bl	80019b0 <lsb_to_ms2>
 80034fe:	eef0 7a40 	vmov.f32	s15, s0
 8003502:	4b50      	ldr	r3, [pc, #320]	; (8003644 <StartDefaultTask+0x2f4>)
 8003504:	edc3 7a00 	vstr	s15, [r3]
				vibr_abs_new = sqrt(
						pow(vibr_x, 2.0) + pow(vibr_y, 2.0) + pow(vibr_z, 2.0));
 8003508:	4b4c      	ldr	r3, [pc, #304]	; (800363c <StartDefaultTask+0x2ec>)
 800350a:	edd3 7a00 	vldr	s15, [r3]
 800350e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003512:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003516:	eeb0 0b47 	vmov.f64	d0, d7
 800351a:	f01a fef9 	bl	801e310 <pow>
 800351e:	eeb0 8b40 	vmov.f64	d8, d0
 8003522:	4b47      	ldr	r3, [pc, #284]	; (8003640 <StartDefaultTask+0x2f0>)
 8003524:	edd3 7a00 	vldr	s15, [r3]
 8003528:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800352c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003530:	eeb0 0b47 	vmov.f64	d0, d7
 8003534:	f01a feec 	bl	801e310 <pow>
 8003538:	eeb0 7b40 	vmov.f64	d7, d0
 800353c:	ee38 8b07 	vadd.f64	d8, d8, d7
 8003540:	4b40      	ldr	r3, [pc, #256]	; (8003644 <StartDefaultTask+0x2f4>)
 8003542:	edd3 7a00 	vldr	s15, [r3]
 8003546:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800354a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800354e:	eeb0 0b47 	vmov.f64	d0, d7
 8003552:	f01a fedd 	bl	801e310 <pow>
 8003556:	eeb0 7b40 	vmov.f64	d7, d0
				vibr_abs_new = sqrt(
 800355a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800355e:	eeb0 0b47 	vmov.f64	d0, d7
 8003562:	f01b f805 	bl	801e570 <sqrt>
 8003566:	eeb0 7b40 	vmov.f64	d7, d0
 800356a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800356e:	4b36      	ldr	r3, [pc, #216]	; (8003648 <StartDefaultTask+0x2f8>)
 8003570:	edc3 7a00 	vstr	s15, [r3]

				if (vibr_abs_old != 0) {
 8003574:	4b35      	ldr	r3, [pc, #212]	; (800364c <StartDefaultTask+0x2fc>)
 8003576:	edd3 7a00 	vldr	s15, [r3]
 800357a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800357e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003582:	d029      	beq.n	80035d8 <StartDefaultTask+0x288>
					//printf("####### VIBR %f , %f , %f#######\r\n",vibr,DIFF_ABS(vibr_abs_new,vibr_abs_old), fmaxf(vibr,DIFF_ABS(vibr_abs_new,vibr_abs_old)));
					vibr = fmaxf(vibr, DIFF_ABS(vibr_abs_new, vibr_abs_old));
 8003584:	4b32      	ldr	r3, [pc, #200]	; (8003650 <StartDefaultTask+0x300>)
 8003586:	edd3 6a00 	vldr	s13, [r3]
 800358a:	4b2f      	ldr	r3, [pc, #188]	; (8003648 <StartDefaultTask+0x2f8>)
 800358c:	ed93 7a00 	vldr	s14, [r3]
 8003590:	4b2e      	ldr	r3, [pc, #184]	; (800364c <StartDefaultTask+0x2fc>)
 8003592:	edd3 7a00 	vldr	s15, [r3]
 8003596:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800359a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359e:	dd08      	ble.n	80035b2 <StartDefaultTask+0x262>
 80035a0:	4b29      	ldr	r3, [pc, #164]	; (8003648 <StartDefaultTask+0x2f8>)
 80035a2:	ed93 7a00 	vldr	s14, [r3]
 80035a6:	4b29      	ldr	r3, [pc, #164]	; (800364c <StartDefaultTask+0x2fc>)
 80035a8:	edd3 7a00 	vldr	s15, [r3]
 80035ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035b0:	e007      	b.n	80035c2 <StartDefaultTask+0x272>
 80035b2:	4b26      	ldr	r3, [pc, #152]	; (800364c <StartDefaultTask+0x2fc>)
 80035b4:	ed93 7a00 	vldr	s14, [r3]
 80035b8:	4b23      	ldr	r3, [pc, #140]	; (8003648 <StartDefaultTask+0x2f8>)
 80035ba:	edd3 7a00 	vldr	s15, [r3]
 80035be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035c2:	eef0 0a67 	vmov.f32	s1, s15
 80035c6:	eeb0 0a66 	vmov.f32	s0, s13
 80035ca:	f01a fe67 	bl	801e29c <fmaxf>
 80035ce:	eef0 7a40 	vmov.f32	s15, s0
 80035d2:	4b1f      	ldr	r3, [pc, #124]	; (8003650 <StartDefaultTask+0x300>)
 80035d4:	edc3 7a00 	vstr	s15, [r3]
//						!= 0 && DIFF_ABS(vibr_abs_temp,vibr_abs) > VIBR_LIMIT) {
//					printf("####### VIBR #######\r\n");
//					vibr = 0x01;
//				}

				vibr_abs_old = vibr_abs_new;
 80035d8:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <StartDefaultTask+0x2f8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a1b      	ldr	r2, [pc, #108]	; (800364c <StartDefaultTask+0x2fc>)
 80035de:	6013      	str	r3, [r2, #0]
				/* Print the data in m/s2 */
				//printf("ANGLE : x:%f, y:%f, z:%f , %f\r\n", vibr_x, vibr_y,vibr_z,vibr_abs);
			}
			osDelay(100);
 80035e0:	2064      	movs	r0, #100	; 0x64
 80035e2:	f006 f9d1 	bl	8009988 <osDelay>
		if (bma_init) {
 80035e6:	e748      	b.n	800347a <StartDefaultTask+0x12a>
 80035e8:	20000c2c 	.word	0x20000c2c
 80035ec:	0801f740 	.word	0x0801f740
 80035f0:	0801f7b8 	.word	0x0801f7b8
 80035f4:	20000d68 	.word	0x20000d68
 80035f8:	20000c80 	.word	0x20000c80
 80035fc:	0801f75c 	.word	0x0801f75c
 8003600:	0801f7e4 	.word	0x0801f7e4
 8003604:	20000c88 	.word	0x20000c88
 8003608:	20000cd9 	.word	0x20000cd9
 800360c:	0801f774 	.word	0x0801f774
 8003610:	0801f80c 	.word	0x0801f80c
 8003614:	20001184 	.word	0x20001184
 8003618:	0801f838 	.word	0x0801f838
 800361c:	200013bc 	.word	0x200013bc
 8003620:	0801f864 	.word	0x0801f864
 8003624:	20000cd4 	.word	0x20000cd4
 8003628:	40020400 	.word	0x40020400
 800362c:	20000d70 	.word	0x20000d70
 8003630:	200006c8 	.word	0x200006c8
 8003634:	200006f8 	.word	0x200006f8
 8003638:	0801f78c 	.word	0x0801f78c
 800363c:	20000c84 	.word	0x20000c84
 8003640:	20001178 	.word	0x20001178
 8003644:	200009e0 	.word	0x200009e0
 8003648:	200013c0 	.word	0x200013c0
 800364c:	20000b1c 	.word	0x20000b1c
 8003650:	20000cdc 	.word	0x20000cdc

08003654 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a04      	ldr	r2, [pc, #16]	; (8003674 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d101      	bne.n	800366a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8003666:	f000 fb15 	bl	8003c94 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800366a:	bf00      	nop
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40001000 	.word	0x40001000

08003678 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800367c:	bf00      	nop
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
	...

08003688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800368e:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <HAL_MspInit+0x4c>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	4a10      	ldr	r2, [pc, #64]	; (80036d4 <HAL_MspInit+0x4c>)
 8003694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003698:	6413      	str	r3, [r2, #64]	; 0x40
 800369a:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <HAL_MspInit+0x4c>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a2:	607b      	str	r3, [r7, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a6:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <HAL_MspInit+0x4c>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <HAL_MspInit+0x4c>)
 80036ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036b0:	6453      	str	r3, [r2, #68]	; 0x44
 80036b2:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <HAL_MspInit+0x4c>)
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80036be:	2200      	movs	r2, #0
 80036c0:	210f      	movs	r1, #15
 80036c2:	f06f 0001 	mvn.w	r0, #1
 80036c6:	f000 ffb9 	bl	800463c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40023800 	.word	0x40023800

080036d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08e      	sub	sp, #56	; 0x38
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a3f      	ldr	r2, [pc, #252]	; (80037f4 <HAL_ADC_MspInit+0x11c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d124      	bne.n	8003744 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80036fa:	4b3f      	ldr	r3, [pc, #252]	; (80037f8 <HAL_ADC_MspInit+0x120>)
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	4a3e      	ldr	r2, [pc, #248]	; (80037f8 <HAL_ADC_MspInit+0x120>)
 8003700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003704:	6453      	str	r3, [r2, #68]	; 0x44
 8003706:	4b3c      	ldr	r3, [pc, #240]	; (80037f8 <HAL_ADC_MspInit+0x120>)
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370e:	623b      	str	r3, [r7, #32]
 8003710:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003712:	4b39      	ldr	r3, [pc, #228]	; (80037f8 <HAL_ADC_MspInit+0x120>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	4a38      	ldr	r2, [pc, #224]	; (80037f8 <HAL_ADC_MspInit+0x120>)
 8003718:	f043 0302 	orr.w	r3, r3, #2
 800371c:	6313      	str	r3, [r2, #48]	; 0x30
 800371e:	4b36      	ldr	r3, [pc, #216]	; (80037f8 <HAL_ADC_MspInit+0x120>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	61fb      	str	r3, [r7, #28]
 8003728:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = TEMP_Pin;
 800372a:	2302      	movs	r3, #2
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800372e:	2303      	movs	r3, #3
 8003730:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003732:	2300      	movs	r3, #0
 8003734:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TEMP_GPIO_Port, &GPIO_InitStruct);
 8003736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800373a:	4619      	mov	r1, r3
 800373c:	482f      	ldr	r0, [pc, #188]	; (80037fc <HAL_ADC_MspInit+0x124>)
 800373e:	f001 ffbb 	bl	80056b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003742:	e052      	b.n	80037ea <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC2)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a2d      	ldr	r2, [pc, #180]	; (8003800 <HAL_ADC_MspInit+0x128>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d124      	bne.n	8003798 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800374e:	4b2a      	ldr	r3, [pc, #168]	; (80037f8 <HAL_ADC_MspInit+0x120>)
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	4a29      	ldr	r2, [pc, #164]	; (80037f8 <HAL_ADC_MspInit+0x120>)
 8003754:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003758:	6453      	str	r3, [r2, #68]	; 0x44
 800375a:	4b27      	ldr	r3, [pc, #156]	; (80037f8 <HAL_ADC_MspInit+0x120>)
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003762:	61bb      	str	r3, [r7, #24]
 8003764:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003766:	4b24      	ldr	r3, [pc, #144]	; (80037f8 <HAL_ADC_MspInit+0x120>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	4a23      	ldr	r2, [pc, #140]	; (80037f8 <HAL_ADC_MspInit+0x120>)
 800376c:	f043 0304 	orr.w	r3, r3, #4
 8003770:	6313      	str	r3, [r2, #48]	; 0x30
 8003772:	4b21      	ldr	r3, [pc, #132]	; (80037f8 <HAL_ADC_MspInit+0x120>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800377e:	2304      	movs	r3, #4
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003782:	2303      	movs	r3, #3
 8003784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003786:	2300      	movs	r3, #0
 8003788:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800378a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800378e:	4619      	mov	r1, r3
 8003790:	481c      	ldr	r0, [pc, #112]	; (8003804 <HAL_ADC_MspInit+0x12c>)
 8003792:	f001 ff91 	bl	80056b8 <HAL_GPIO_Init>
}
 8003796:	e028      	b.n	80037ea <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC3)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a1a      	ldr	r2, [pc, #104]	; (8003808 <HAL_ADC_MspInit+0x130>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d123      	bne.n	80037ea <HAL_ADC_MspInit+0x112>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80037a2:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <HAL_ADC_MspInit+0x120>)
 80037a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a6:	4a14      	ldr	r2, [pc, #80]	; (80037f8 <HAL_ADC_MspInit+0x120>)
 80037a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037ac:	6453      	str	r3, [r2, #68]	; 0x44
 80037ae:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <HAL_ADC_MspInit+0x120>)
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b6:	613b      	str	r3, [r7, #16]
 80037b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80037ba:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <HAL_ADC_MspInit+0x120>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	4a0e      	ldr	r2, [pc, #56]	; (80037f8 <HAL_ADC_MspInit+0x120>)
 80037c0:	f043 0320 	orr.w	r3, r3, #32
 80037c4:	6313      	str	r3, [r2, #48]	; 0x30
 80037c6:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <HAL_ADC_MspInit+0x120>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	f003 0320 	and.w	r3, r3, #32
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80037d2:	2310      	movs	r3, #16
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037d6:	2303      	movs	r3, #3
 80037d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037da:	2300      	movs	r3, #0
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80037de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037e2:	4619      	mov	r1, r3
 80037e4:	4809      	ldr	r0, [pc, #36]	; (800380c <HAL_ADC_MspInit+0x134>)
 80037e6:	f001 ff67 	bl	80056b8 <HAL_GPIO_Init>
}
 80037ea:	bf00      	nop
 80037ec:	3738      	adds	r7, #56	; 0x38
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40012000 	.word	0x40012000
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40020400 	.word	0x40020400
 8003800:	40012100 	.word	0x40012100
 8003804:	40020800 	.word	0x40020800
 8003808:	40012200 	.word	0x40012200
 800380c:	40021400 	.word	0x40021400

08003810 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	; 0x28
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003818:	f107 0314 	add.w	r3, r7, #20
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	60da      	str	r2, [r3, #12]
 8003826:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a17      	ldr	r2, [pc, #92]	; (800388c <HAL_I2C_MspInit+0x7c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d128      	bne.n	8003884 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003832:	4b17      	ldr	r3, [pc, #92]	; (8003890 <HAL_I2C_MspInit+0x80>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	4a16      	ldr	r2, [pc, #88]	; (8003890 <HAL_I2C_MspInit+0x80>)
 8003838:	f043 0302 	orr.w	r3, r3, #2
 800383c:	6313      	str	r3, [r2, #48]	; 0x30
 800383e:	4b14      	ldr	r3, [pc, #80]	; (8003890 <HAL_I2C_MspInit+0x80>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800384a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800384e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003850:	2312      	movs	r3, #18
 8003852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003854:	2301      	movs	r3, #1
 8003856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003858:	2303      	movs	r3, #3
 800385a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800385c:	2304      	movs	r3, #4
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003860:	f107 0314 	add.w	r3, r7, #20
 8003864:	4619      	mov	r1, r3
 8003866:	480b      	ldr	r0, [pc, #44]	; (8003894 <HAL_I2C_MspInit+0x84>)
 8003868:	f001 ff26 	bl	80056b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800386c:	4b08      	ldr	r3, [pc, #32]	; (8003890 <HAL_I2C_MspInit+0x80>)
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	4a07      	ldr	r2, [pc, #28]	; (8003890 <HAL_I2C_MspInit+0x80>)
 8003872:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003876:	6413      	str	r3, [r2, #64]	; 0x40
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <HAL_I2C_MspInit+0x80>)
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003884:	bf00      	nop
 8003886:	3728      	adds	r7, #40	; 0x28
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40005400 	.word	0x40005400
 8003890:	40023800 	.word	0x40023800
 8003894:	40020400 	.word	0x40020400

08003898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08c      	sub	sp, #48	; 0x30
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a0:	f107 031c 	add.w	r3, r7, #28
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	605a      	str	r2, [r3, #4]
 80038aa:	609a      	str	r2, [r3, #8]
 80038ac:	60da      	str	r2, [r3, #12]
 80038ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a49      	ldr	r2, [pc, #292]	; (80039dc <HAL_UART_MspInit+0x144>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d141      	bne.n	800393e <HAL_UART_MspInit+0xa6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038ba:	4b49      	ldr	r3, [pc, #292]	; (80039e0 <HAL_UART_MspInit+0x148>)
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	4a48      	ldr	r2, [pc, #288]	; (80039e0 <HAL_UART_MspInit+0x148>)
 80038c0:	f043 0310 	orr.w	r3, r3, #16
 80038c4:	6453      	str	r3, [r2, #68]	; 0x44
 80038c6:	4b46      	ldr	r3, [pc, #280]	; (80039e0 <HAL_UART_MspInit+0x148>)
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	f003 0310 	and.w	r3, r3, #16
 80038ce:	61bb      	str	r3, [r7, #24]
 80038d0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038d2:	4b43      	ldr	r3, [pc, #268]	; (80039e0 <HAL_UART_MspInit+0x148>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	4a42      	ldr	r2, [pc, #264]	; (80039e0 <HAL_UART_MspInit+0x148>)
 80038d8:	f043 0302 	orr.w	r3, r3, #2
 80038dc:	6313      	str	r3, [r2, #48]	; 0x30
 80038de:	4b40      	ldr	r3, [pc, #256]	; (80039e0 <HAL_UART_MspInit+0x148>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80038ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f0:	2302      	movs	r3, #2
 80038f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f8:	2303      	movs	r3, #3
 80038fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80038fc:	2304      	movs	r3, #4
 80038fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003900:	f107 031c 	add.w	r3, r7, #28
 8003904:	4619      	mov	r1, r3
 8003906:	4837      	ldr	r0, [pc, #220]	; (80039e4 <HAL_UART_MspInit+0x14c>)
 8003908:	f001 fed6 	bl	80056b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800390c:	2340      	movs	r3, #64	; 0x40
 800390e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003910:	2302      	movs	r3, #2
 8003912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003914:	2300      	movs	r3, #0
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003918:	2303      	movs	r3, #3
 800391a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800391c:	2307      	movs	r3, #7
 800391e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003920:	f107 031c 	add.w	r3, r7, #28
 8003924:	4619      	mov	r1, r3
 8003926:	482f      	ldr	r0, [pc, #188]	; (80039e4 <HAL_UART_MspInit+0x14c>)
 8003928:	f001 fec6 	bl	80056b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800392c:	2200      	movs	r2, #0
 800392e:	2105      	movs	r1, #5
 8003930:	2025      	movs	r0, #37	; 0x25
 8003932:	f000 fe83 	bl	800463c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003936:	2025      	movs	r0, #37	; 0x25
 8003938:	f000 fe9c 	bl	8004674 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800393c:	e04a      	b.n	80039d4 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a29      	ldr	r2, [pc, #164]	; (80039e8 <HAL_UART_MspInit+0x150>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d145      	bne.n	80039d4 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003948:	4b25      	ldr	r3, [pc, #148]	; (80039e0 <HAL_UART_MspInit+0x148>)
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	4a24      	ldr	r2, [pc, #144]	; (80039e0 <HAL_UART_MspInit+0x148>)
 800394e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003952:	6413      	str	r3, [r2, #64]	; 0x40
 8003954:	4b22      	ldr	r3, [pc, #136]	; (80039e0 <HAL_UART_MspInit+0x148>)
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003960:	4b1f      	ldr	r3, [pc, #124]	; (80039e0 <HAL_UART_MspInit+0x148>)
 8003962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003964:	4a1e      	ldr	r2, [pc, #120]	; (80039e0 <HAL_UART_MspInit+0x148>)
 8003966:	f043 0302 	orr.w	r3, r3, #2
 800396a:	6313      	str	r3, [r2, #48]	; 0x30
 800396c:	4b1c      	ldr	r3, [pc, #112]	; (80039e0 <HAL_UART_MspInit+0x148>)
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003978:	4b19      	ldr	r3, [pc, #100]	; (80039e0 <HAL_UART_MspInit+0x148>)
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	4a18      	ldr	r2, [pc, #96]	; (80039e0 <HAL_UART_MspInit+0x148>)
 800397e:	f043 0304 	orr.w	r3, r3, #4
 8003982:	6313      	str	r3, [r2, #48]	; 0x30
 8003984:	4b16      	ldr	r3, [pc, #88]	; (80039e0 <HAL_UART_MspInit+0x148>)
 8003986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	60bb      	str	r3, [r7, #8]
 800398e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003990:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003996:	2302      	movs	r3, #2
 8003998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399a:	2300      	movs	r3, #0
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800399e:	2303      	movs	r3, #3
 80039a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80039a2:	2307      	movs	r3, #7
 80039a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a6:	f107 031c 	add.w	r3, r7, #28
 80039aa:	4619      	mov	r1, r3
 80039ac:	480d      	ldr	r0, [pc, #52]	; (80039e4 <HAL_UART_MspInit+0x14c>)
 80039ae:	f001 fe83 	bl	80056b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80039b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b8:	2302      	movs	r3, #2
 80039ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c0:	2303      	movs	r3, #3
 80039c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80039c4:	2307      	movs	r3, #7
 80039c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039c8:	f107 031c 	add.w	r3, r7, #28
 80039cc:	4619      	mov	r1, r3
 80039ce:	4807      	ldr	r0, [pc, #28]	; (80039ec <HAL_UART_MspInit+0x154>)
 80039d0:	f001 fe72 	bl	80056b8 <HAL_GPIO_Init>
}
 80039d4:	bf00      	nop
 80039d6:	3730      	adds	r7, #48	; 0x30
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40011000 	.word	0x40011000
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40020400 	.word	0x40020400
 80039e8:	40004800 	.word	0x40004800
 80039ec:	40020800 	.word	0x40020800

080039f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08c      	sub	sp, #48	; 0x30
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80039f8:	2300      	movs	r3, #0
 80039fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8003a00:	2200      	movs	r2, #0
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	2036      	movs	r0, #54	; 0x36
 8003a06:	f000 fe19 	bl	800463c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8003a0a:	2036      	movs	r0, #54	; 0x36
 8003a0c:	f000 fe32 	bl	8004674 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003a10:	4b1f      	ldr	r3, [pc, #124]	; (8003a90 <HAL_InitTick+0xa0>)
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	4a1e      	ldr	r2, [pc, #120]	; (8003a90 <HAL_InitTick+0xa0>)
 8003a16:	f043 0310 	orr.w	r3, r3, #16
 8003a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8003a1c:	4b1c      	ldr	r3, [pc, #112]	; (8003a90 <HAL_InitTick+0xa0>)
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a28:	f107 0210 	add.w	r2, r7, #16
 8003a2c:	f107 0314 	add.w	r3, r7, #20
 8003a30:	4611      	mov	r1, r2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f003 fa46 	bl	8006ec4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003a38:	f003 fa1c 	bl	8006e74 <HAL_RCC_GetPCLK1Freq>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a44:	4a13      	ldr	r2, [pc, #76]	; (8003a94 <HAL_InitTick+0xa4>)
 8003a46:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4a:	0c9b      	lsrs	r3, r3, #18
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003a50:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <HAL_InitTick+0xa8>)
 8003a52:	4a12      	ldr	r2, [pc, #72]	; (8003a9c <HAL_InitTick+0xac>)
 8003a54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003a56:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <HAL_InitTick+0xa8>)
 8003a58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a5c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003a5e:	4a0e      	ldr	r2, [pc, #56]	; (8003a98 <HAL_InitTick+0xa8>)
 8003a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a62:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003a64:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <HAL_InitTick+0xa8>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <HAL_InitTick+0xa8>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003a70:	4809      	ldr	r0, [pc, #36]	; (8003a98 <HAL_InitTick+0xa8>)
 8003a72:	f003 fe7f 	bl	8007774 <HAL_TIM_Base_Init>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d104      	bne.n	8003a86 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003a7c:	4806      	ldr	r0, [pc, #24]	; (8003a98 <HAL_InitTick+0xa8>)
 8003a7e:	f003 feaf 	bl	80077e0 <HAL_TIM_Base_Start_IT>
 8003a82:	4603      	mov	r3, r0
 8003a84:	e000      	b.n	8003a88 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3730      	adds	r7, #48	; 0x30
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40023800 	.word	0x40023800
 8003a94:	431bde83 	.word	0x431bde83
 8003a98:	200013c4 	.word	0x200013c4
 8003a9c:	40001000 	.word	0x40001000

08003aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ab2:	e7fe      	b.n	8003ab2 <HardFault_Handler+0x4>

08003ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ab8:	e7fe      	b.n	8003ab8 <MemManage_Handler+0x4>

08003aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003aba:	b480      	push	{r7}
 8003abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003abe:	e7fe      	b.n	8003abe <BusFault_Handler+0x4>

08003ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ac4:	e7fe      	b.n	8003ac4 <UsageFault_Handler+0x4>

08003ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003aca:	bf00      	nop
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ad8:	4802      	ldr	r0, [pc, #8]	; (8003ae4 <USART1_IRQHandler+0x10>)
 8003ada:	f004 fb5b 	bl	8008194 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000ce0 	.word	0x20000ce0

08003ae8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003aec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003af0:	f001 ffd8 	bl	8005aa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003af4:	bf00      	nop
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003afc:	4802      	ldr	r0, [pc, #8]	; (8003b08 <TIM6_DAC_IRQHandler+0x10>)
 8003afe:	f003 fe99 	bl	8007834 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	200013c4 	.word	0x200013c4

08003b0c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003b10:	4802      	ldr	r0, [pc, #8]	; (8003b1c <ETH_IRQHandler+0x10>)
 8003b12:	f001 f9c3 	bl	8004e9c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20002d20 	.word	0x20002d20

08003b20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	e00a      	b.n	8003b48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b32:	f7fd fec9 	bl	80018c8 <__io_getchar>
 8003b36:	4601      	mov	r1, r0
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	60ba      	str	r2, [r7, #8]
 8003b3e:	b2ca      	uxtb	r2, r1
 8003b40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	3301      	adds	r3, #1
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	dbf0      	blt.n	8003b32 <_read+0x12>
	}

return len;
 8003b50:	687b      	ldr	r3, [r7, #4]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b086      	sub	sp, #24
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	e009      	b.n	8003b80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	60ba      	str	r2, [r7, #8]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fd fe91 	bl	800189c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	dbf1      	blt.n	8003b6c <_write+0x12>
	}
	return len;
 8003b88:	687b      	ldr	r3, [r7, #4]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <_close>:

int _close(int file)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
	return -1;
 8003b9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bba:	605a      	str	r2, [r3, #4]
	return 0;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <_isatty>:

int _isatty(int file)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
	return 1;
 8003bd2:	2301      	movs	r3, #1
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
	return 0;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
	...

08003bfc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c00:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <SystemInit+0x28>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c06:	4a07      	ldr	r2, [pc, #28]	; (8003c24 <SystemInit+0x28>)
 8003c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c10:	4b04      	ldr	r3, [pc, #16]	; (8003c24 <SystemInit+0x28>)
 8003c12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c16:	609a      	str	r2, [r3, #8]
#endif
}
 8003c18:	bf00      	nop
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	e000ed00 	.word	0xe000ed00

08003c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c2e:	e003      	b.n	8003c38 <LoopCopyDataInit>

08003c30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003c32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003c34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c36:	3104      	adds	r1, #4

08003c38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c38:	480b      	ldr	r0, [pc, #44]	; (8003c68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003c3a:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003c3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c40:	d3f6      	bcc.n	8003c30 <CopyDataInit>
  ldr  r2, =_sbss
 8003c42:	4a0b      	ldr	r2, [pc, #44]	; (8003c70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003c44:	e002      	b.n	8003c4c <LoopFillZerobss>

08003c46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c48:	f842 3b04 	str.w	r3, [r2], #4

08003c4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c4c:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c50:	d3f9      	bcc.n	8003c46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c52:	f7ff ffd3 	bl	8003bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c56:	f016 f985 	bl	8019f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c5a:	f7fe fef7 	bl	8002a4c <main>
  bx  lr    
 8003c5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c60:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003c64:	08024a88 	.word	0x08024a88
  ldr  r0, =_sdata
 8003c68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c6c:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8003c70:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8003c74:	20007cc0 	.word	0x20007cc0

08003c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c78:	e7fe      	b.n	8003c78 <ADC_IRQHandler>

08003c7a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c7e:	2003      	movs	r0, #3
 8003c80:	f000 fcd1 	bl	8004626 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c84:	2000      	movs	r0, #0
 8003c86:	f7ff feb3 	bl	80039f0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003c8a:	f7ff fcfd 	bl	8003688 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c98:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <HAL_IncTick+0x20>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <HAL_IncTick+0x24>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	4a04      	ldr	r2, [pc, #16]	; (8003cb8 <HAL_IncTick+0x24>)
 8003ca6:	6013      	str	r3, [r2, #0]
}
 8003ca8:	bf00      	nop
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	20000008 	.word	0x20000008
 8003cb8:	20001404 	.word	0x20001404

08003cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8003cc0:	4b03      	ldr	r3, [pc, #12]	; (8003cd0 <HAL_GetTick+0x14>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	20001404 	.word	0x20001404

08003cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cdc:	f7ff ffee 	bl	8003cbc <HAL_GetTick>
 8003ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cec:	d005      	beq.n	8003cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cee:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <HAL_Delay+0x40>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003cfa:	bf00      	nop
 8003cfc:	f7ff ffde 	bl	8003cbc <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d8f7      	bhi.n	8003cfc <HAL_Delay+0x28>
  {
  }
}
 8003d0c:	bf00      	nop
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20000008 	.word	0x20000008

08003d18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e031      	b.n	8003d92 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff fcce 	bl	80036d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f003 0310 	and.w	r3, r3, #16
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d116      	bne.n	8003d84 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d5a:	4b10      	ldr	r3, [pc, #64]	; (8003d9c <HAL_ADC_Init+0x84>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	f043 0202 	orr.w	r2, r3, #2
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fab6 	bl	80042d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	f023 0303 	bic.w	r3, r3, #3
 8003d7a:	f043 0201 	orr.w	r2, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	641a      	str	r2, [r3, #64]	; 0x40
 8003d82:	e001      	b.n	8003d88 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	ffffeefd 	.word	0xffffeefd

08003da0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003da8:	2300      	movs	r3, #0
 8003daa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <HAL_ADC_Start+0x1a>
 8003db6:	2302      	movs	r3, #2
 8003db8:	e0a0      	b.n	8003efc <HAL_ADC_Start+0x15c>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d018      	beq.n	8003e02 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0201 	orr.w	r2, r2, #1
 8003dde:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003de0:	4b49      	ldr	r3, [pc, #292]	; (8003f08 <HAL_ADC_Start+0x168>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a49      	ldr	r2, [pc, #292]	; (8003f0c <HAL_ADC_Start+0x16c>)
 8003de6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dea:	0c9a      	lsrs	r2, r3, #18
 8003dec:	4613      	mov	r3, r2
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	4413      	add	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003df4:	e002      	b.n	8003dfc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f9      	bne.n	8003df6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d174      	bne.n	8003efa <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e14:	4b3e      	ldr	r3, [pc, #248]	; (8003f10 <HAL_ADC_Start+0x170>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d007      	beq.n	8003e3e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e36:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4a:	d106      	bne.n	8003e5a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	f023 0206 	bic.w	r2, r3, #6
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	645a      	str	r2, [r3, #68]	; 0x44
 8003e58:	e002      	b.n	8003e60 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e70:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003e72:	4b28      	ldr	r3, [pc, #160]	; (8003f14 <HAL_ADC_Start+0x174>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f003 031f 	and.w	r3, r3, #31
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10f      	bne.n	8003e9e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d136      	bne.n	8003efa <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e9a:	609a      	str	r2, [r3, #8]
 8003e9c:	e02d      	b.n	8003efa <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a1d      	ldr	r2, [pc, #116]	; (8003f18 <HAL_ADC_Start+0x178>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d10e      	bne.n	8003ec6 <HAL_ADC_Start+0x126>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d107      	bne.n	8003ec6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ec4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003ec6:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <HAL_ADC_Start+0x174>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d113      	bne.n	8003efa <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a11      	ldr	r2, [pc, #68]	; (8003f1c <HAL_ADC_Start+0x17c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d10e      	bne.n	8003efa <HAL_ADC_Start+0x15a>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d107      	bne.n	8003efa <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ef8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	20000000 	.word	0x20000000
 8003f0c:	431bde83 	.word	0x431bde83
 8003f10:	fffff8fe 	.word	0xfffff8fe
 8003f14:	40012300 	.word	0x40012300
 8003f18:	40012000 	.word	0x40012000
 8003f1c:	40012200 	.word	0x40012200

08003f20 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f3c:	d113      	bne.n	8003f66 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4c:	d10b      	bne.n	8003f66 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f043 0220 	orr.w	r2, r3, #32
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e05c      	b.n	8004020 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003f66:	f7ff fea9 	bl	8003cbc <HAL_GetTick>
 8003f6a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f6c:	e01a      	b.n	8003fa4 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f74:	d016      	beq.n	8003fa4 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d007      	beq.n	8003f8c <HAL_ADC_PollForConversion+0x6c>
 8003f7c:	f7ff fe9e 	bl	8003cbc <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d20b      	bcs.n	8003fa4 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	f043 0204 	orr.w	r2, r3, #4
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e03d      	b.n	8004020 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d1dd      	bne.n	8003f6e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f06f 0212 	mvn.w	r2, #18
 8003fba:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d123      	bne.n	800401e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d11f      	bne.n	800401e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d006      	beq.n	8003ffa <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d111      	bne.n	800401e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d105      	bne.n	800401e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f043 0201 	orr.w	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004036:	4618      	mov	r0, r3
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
	...

08004044 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x1c>
 800405c:	2302      	movs	r3, #2
 800405e:	e12a      	b.n	80042b6 <HAL_ADC_ConfigChannel+0x272>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b09      	cmp	r3, #9
 800406e:	d93a      	bls.n	80040e6 <HAL_ADC_ConfigChannel+0xa2>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004078:	d035      	beq.n	80040e6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68d9      	ldr	r1, [r3, #12]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	b29b      	uxth	r3, r3
 8004086:	461a      	mov	r2, r3
 8004088:	4613      	mov	r3, r2
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	4413      	add	r3, r2
 800408e:	3b1e      	subs	r3, #30
 8004090:	2207      	movs	r2, #7
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	43da      	mvns	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	400a      	ands	r2, r1
 800409e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a87      	ldr	r2, [pc, #540]	; (80042c4 <HAL_ADC_ConfigChannel+0x280>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d10a      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68d9      	ldr	r1, [r3, #12]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	061a      	lsls	r2, r3, #24
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040be:	e035      	b.n	800412c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68d9      	ldr	r1, [r3, #12]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	4618      	mov	r0, r3
 80040d2:	4603      	mov	r3, r0
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	4403      	add	r3, r0
 80040d8:	3b1e      	subs	r3, #30
 80040da:	409a      	lsls	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040e4:	e022      	b.n	800412c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6919      	ldr	r1, [r3, #16]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	4613      	mov	r3, r2
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	4413      	add	r3, r2
 80040fa:	2207      	movs	r2, #7
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	43da      	mvns	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	400a      	ands	r2, r1
 8004108:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6919      	ldr	r1, [r3, #16]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	b29b      	uxth	r3, r3
 800411a:	4618      	mov	r0, r3
 800411c:	4603      	mov	r3, r0
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	4403      	add	r3, r0
 8004122:	409a      	lsls	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b06      	cmp	r3, #6
 8004132:	d824      	bhi.n	800417e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	4613      	mov	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	3b05      	subs	r3, #5
 8004146:	221f      	movs	r2, #31
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	43da      	mvns	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	400a      	ands	r2, r1
 8004154:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	b29b      	uxth	r3, r3
 8004162:	4618      	mov	r0, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	4613      	mov	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	3b05      	subs	r3, #5
 8004170:	fa00 f203 	lsl.w	r2, r0, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	635a      	str	r2, [r3, #52]	; 0x34
 800417c:	e04c      	b.n	8004218 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b0c      	cmp	r3, #12
 8004184:	d824      	bhi.n	80041d0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	4613      	mov	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	3b23      	subs	r3, #35	; 0x23
 8004198:	221f      	movs	r2, #31
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	43da      	mvns	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	400a      	ands	r2, r1
 80041a6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	4618      	mov	r0, r3
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	4613      	mov	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	3b23      	subs	r3, #35	; 0x23
 80041c2:	fa00 f203 	lsl.w	r2, r0, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	631a      	str	r2, [r3, #48]	; 0x30
 80041ce:	e023      	b.n	8004218 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	3b41      	subs	r3, #65	; 0x41
 80041e2:	221f      	movs	r2, #31
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	43da      	mvns	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	400a      	ands	r2, r1
 80041f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	4618      	mov	r0, r3
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	3b41      	subs	r3, #65	; 0x41
 800420c:	fa00 f203 	lsl.w	r2, r0, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a2a      	ldr	r2, [pc, #168]	; (80042c8 <HAL_ADC_ConfigChannel+0x284>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d10a      	bne.n	8004238 <HAL_ADC_ConfigChannel+0x1f4>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800422a:	d105      	bne.n	8004238 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800422c:	4b27      	ldr	r3, [pc, #156]	; (80042cc <HAL_ADC_ConfigChannel+0x288>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	4a26      	ldr	r2, [pc, #152]	; (80042cc <HAL_ADC_ConfigChannel+0x288>)
 8004232:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004236:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a22      	ldr	r2, [pc, #136]	; (80042c8 <HAL_ADC_ConfigChannel+0x284>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d109      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x212>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b12      	cmp	r3, #18
 8004248:	d105      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800424a:	4b20      	ldr	r3, [pc, #128]	; (80042cc <HAL_ADC_ConfigChannel+0x288>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	4a1f      	ldr	r2, [pc, #124]	; (80042cc <HAL_ADC_ConfigChannel+0x288>)
 8004250:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004254:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a1b      	ldr	r2, [pc, #108]	; (80042c8 <HAL_ADC_ConfigChannel+0x284>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d125      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x268>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a17      	ldr	r2, [pc, #92]	; (80042c4 <HAL_ADC_ConfigChannel+0x280>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d003      	beq.n	8004272 <HAL_ADC_ConfigChannel+0x22e>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b11      	cmp	r3, #17
 8004270:	d11c      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004272:	4b16      	ldr	r3, [pc, #88]	; (80042cc <HAL_ADC_ConfigChannel+0x288>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	4a15      	ldr	r2, [pc, #84]	; (80042cc <HAL_ADC_ConfigChannel+0x288>)
 8004278:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800427c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a10      	ldr	r2, [pc, #64]	; (80042c4 <HAL_ADC_ConfigChannel+0x280>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d111      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004288:	4b11      	ldr	r3, [pc, #68]	; (80042d0 <HAL_ADC_ConfigChannel+0x28c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a11      	ldr	r2, [pc, #68]	; (80042d4 <HAL_ADC_ConfigChannel+0x290>)
 800428e:	fba2 2303 	umull	r2, r3, r2, r3
 8004292:	0c9a      	lsrs	r2, r3, #18
 8004294:	4613      	mov	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800429e:	e002      	b.n	80042a6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f9      	bne.n	80042a0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	10000012 	.word	0x10000012
 80042c8:	40012000 	.word	0x40012000
 80042cc:	40012300 	.word	0x40012300
 80042d0:	20000000 	.word	0x20000000
 80042d4:	431bde83 	.word	0x431bde83

080042d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80042e0:	4b78      	ldr	r3, [pc, #480]	; (80044c4 <ADC_Init+0x1ec>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	4a77      	ldr	r2, [pc, #476]	; (80044c4 <ADC_Init+0x1ec>)
 80042e6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80042ea:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80042ec:	4b75      	ldr	r3, [pc, #468]	; (80044c4 <ADC_Init+0x1ec>)
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	4973      	ldr	r1, [pc, #460]	; (80044c4 <ADC_Init+0x1ec>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004308:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6859      	ldr	r1, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	021a      	lsls	r2, r3, #8
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800432c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6859      	ldr	r1, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689a      	ldr	r2, [r3, #8]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800434e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6899      	ldr	r1, [r3, #8]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004366:	4a58      	ldr	r2, [pc, #352]	; (80044c8 <ADC_Init+0x1f0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d022      	beq.n	80043b2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800437a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6899      	ldr	r1, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800439c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6899      	ldr	r1, [r3, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	609a      	str	r2, [r3, #8]
 80043b0:	e00f      	b.n	80043d2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0202 	bic.w	r2, r2, #2
 80043e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6899      	ldr	r1, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	005a      	lsls	r2, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01b      	beq.n	8004438 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800440e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800441e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6859      	ldr	r1, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	3b01      	subs	r3, #1
 800442c:	035a      	lsls	r2, r3, #13
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	605a      	str	r2, [r3, #4]
 8004436:	e007      	b.n	8004448 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004446:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004456:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	3b01      	subs	r3, #1
 8004464:	051a      	lsls	r2, r3, #20
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800447c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6899      	ldr	r1, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800448a:	025a      	lsls	r2, r3, #9
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6899      	ldr	r1, [r3, #8]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	029a      	lsls	r2, r3, #10
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	609a      	str	r2, [r3, #8]
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	40012300 	.word	0x40012300
 80044c8:	0f000001 	.word	0x0f000001

080044cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044dc:	4b0b      	ldr	r3, [pc, #44]	; (800450c <__NVIC_SetPriorityGrouping+0x40>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044e8:	4013      	ands	r3, r2
 80044ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80044f4:	4b06      	ldr	r3, [pc, #24]	; (8004510 <__NVIC_SetPriorityGrouping+0x44>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044fa:	4a04      	ldr	r2, [pc, #16]	; (800450c <__NVIC_SetPriorityGrouping+0x40>)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	60d3      	str	r3, [r2, #12]
}
 8004500:	bf00      	nop
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	e000ed00 	.word	0xe000ed00
 8004510:	05fa0000 	.word	0x05fa0000

08004514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004518:	4b04      	ldr	r3, [pc, #16]	; (800452c <__NVIC_GetPriorityGrouping+0x18>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	0a1b      	lsrs	r3, r3, #8
 800451e:	f003 0307 	and.w	r3, r3, #7
}
 8004522:	4618      	mov	r0, r3
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	e000ed00 	.word	0xe000ed00

08004530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	4603      	mov	r3, r0
 8004538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800453a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453e:	2b00      	cmp	r3, #0
 8004540:	db0b      	blt.n	800455a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004542:	79fb      	ldrb	r3, [r7, #7]
 8004544:	f003 021f 	and.w	r2, r3, #31
 8004548:	4907      	ldr	r1, [pc, #28]	; (8004568 <__NVIC_EnableIRQ+0x38>)
 800454a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	2001      	movs	r0, #1
 8004552:	fa00 f202 	lsl.w	r2, r0, r2
 8004556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	e000e100 	.word	0xe000e100

0800456c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	6039      	str	r1, [r7, #0]
 8004576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457c:	2b00      	cmp	r3, #0
 800457e:	db0a      	blt.n	8004596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	b2da      	uxtb	r2, r3
 8004584:	490c      	ldr	r1, [pc, #48]	; (80045b8 <__NVIC_SetPriority+0x4c>)
 8004586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458a:	0112      	lsls	r2, r2, #4
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	440b      	add	r3, r1
 8004590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004594:	e00a      	b.n	80045ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	b2da      	uxtb	r2, r3
 800459a:	4908      	ldr	r1, [pc, #32]	; (80045bc <__NVIC_SetPriority+0x50>)
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	3b04      	subs	r3, #4
 80045a4:	0112      	lsls	r2, r2, #4
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	440b      	add	r3, r1
 80045aa:	761a      	strb	r2, [r3, #24]
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	e000e100 	.word	0xe000e100
 80045bc:	e000ed00 	.word	0xe000ed00

080045c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b089      	sub	sp, #36	; 0x24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f1c3 0307 	rsb	r3, r3, #7
 80045da:	2b04      	cmp	r3, #4
 80045dc:	bf28      	it	cs
 80045de:	2304      	movcs	r3, #4
 80045e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	3304      	adds	r3, #4
 80045e6:	2b06      	cmp	r3, #6
 80045e8:	d902      	bls.n	80045f0 <NVIC_EncodePriority+0x30>
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	3b03      	subs	r3, #3
 80045ee:	e000      	b.n	80045f2 <NVIC_EncodePriority+0x32>
 80045f0:	2300      	movs	r3, #0
 80045f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f4:	f04f 32ff 	mov.w	r2, #4294967295
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43da      	mvns	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	401a      	ands	r2, r3
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004608:	f04f 31ff 	mov.w	r1, #4294967295
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	fa01 f303 	lsl.w	r3, r1, r3
 8004612:	43d9      	mvns	r1, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004618:	4313      	orrs	r3, r2
         );
}
 800461a:	4618      	mov	r0, r3
 800461c:	3724      	adds	r7, #36	; 0x24
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b082      	sub	sp, #8
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7ff ff4c 	bl	80044cc <__NVIC_SetPriorityGrouping>
}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800464a:	2300      	movs	r3, #0
 800464c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800464e:	f7ff ff61 	bl	8004514 <__NVIC_GetPriorityGrouping>
 8004652:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	68b9      	ldr	r1, [r7, #8]
 8004658:	6978      	ldr	r0, [r7, #20]
 800465a:	f7ff ffb1 	bl	80045c0 <NVIC_EncodePriority>
 800465e:	4602      	mov	r2, r0
 8004660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004664:	4611      	mov	r1, r2
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff ff80 	bl	800456c <__NVIC_SetPriority>
}
 800466c:	bf00      	nop
 800466e:	3718      	adds	r7, #24
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	4603      	mov	r3, r0
 800467c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800467e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff ff54 	bl	8004530 <__NVIC_EnableIRQ>
}
 8004688:	bf00      	nop
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d004      	beq.n	80046ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2280      	movs	r2, #128	; 0x80
 80046a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e00c      	b.n	80046c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2205      	movs	r2, #5
 80046b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0201 	bic.w	r2, r2, #1
 80046c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b088      	sub	sp, #32
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	61fb      	str	r3, [r7, #28]
 80046e0:	2300      	movs	r3, #0
 80046e2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80046e4:	4ba9      	ldr	r3, [pc, #676]	; (800498c <HAL_ETH_Init+0x2b8>)
 80046e6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80046e8:	2300      	movs	r3, #0
 80046ea:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80046ec:	2300      	movs	r3, #0
 80046ee:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e183      	b.n	8004a02 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f004 fd4a 	bl	80091a8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004714:	4b9e      	ldr	r3, [pc, #632]	; (8004990 <HAL_ETH_Init+0x2bc>)
 8004716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004718:	4a9d      	ldr	r2, [pc, #628]	; (8004990 <HAL_ETH_Init+0x2bc>)
 800471a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800471e:	6453      	str	r3, [r2, #68]	; 0x44
 8004720:	4b9b      	ldr	r3, [pc, #620]	; (8004990 <HAL_ETH_Init+0x2bc>)
 8004722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004728:	60bb      	str	r3, [r7, #8]
 800472a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800472c:	4b99      	ldr	r3, [pc, #612]	; (8004994 <HAL_ETH_Init+0x2c0>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	4a98      	ldr	r2, [pc, #608]	; (8004994 <HAL_ETH_Init+0x2c0>)
 8004732:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004736:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004738:	4b96      	ldr	r3, [pc, #600]	; (8004994 <HAL_ETH_Init+0x2c0>)
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	4994      	ldr	r1, [pc, #592]	; (8004994 <HAL_ETH_Init+0x2c0>)
 8004742:	4313      	orrs	r3, r2
 8004744:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0201 	orr.w	r2, r2, #1
 8004758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800475c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800475e:	f7ff faad 	bl	8003cbc <HAL_GetTick>
 8004762:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004764:	e011      	b.n	800478a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004766:	f7ff faa9 	bl	8003cbc <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004774:	d909      	bls.n	800478a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2203      	movs	r2, #3
 800477a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e13b      	b.n	8004a02 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e4      	bne.n	8004766 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	f023 031c 	bic.w	r3, r3, #28
 80047aa:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80047ac:	f002 fb56 	bl	8006e5c <HAL_RCC_GetHCLKFreq>
 80047b0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	4a78      	ldr	r2, [pc, #480]	; (8004998 <HAL_ETH_Init+0x2c4>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d908      	bls.n	80047cc <HAL_ETH_Init+0xf8>
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	4a77      	ldr	r2, [pc, #476]	; (800499c <HAL_ETH_Init+0x2c8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d804      	bhi.n	80047cc <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	f043 0308 	orr.w	r3, r3, #8
 80047c8:	61fb      	str	r3, [r7, #28]
 80047ca:	e027      	b.n	800481c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	4a73      	ldr	r2, [pc, #460]	; (800499c <HAL_ETH_Init+0x2c8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d908      	bls.n	80047e6 <HAL_ETH_Init+0x112>
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	4a72      	ldr	r2, [pc, #456]	; (80049a0 <HAL_ETH_Init+0x2cc>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d804      	bhi.n	80047e6 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f043 030c 	orr.w	r3, r3, #12
 80047e2:	61fb      	str	r3, [r7, #28]
 80047e4:	e01a      	b.n	800481c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	4a6d      	ldr	r2, [pc, #436]	; (80049a0 <HAL_ETH_Init+0x2cc>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d903      	bls.n	80047f6 <HAL_ETH_Init+0x122>
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	4a6c      	ldr	r2, [pc, #432]	; (80049a4 <HAL_ETH_Init+0x2d0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d911      	bls.n	800481a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	4a6a      	ldr	r2, [pc, #424]	; (80049a4 <HAL_ETH_Init+0x2d0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d908      	bls.n	8004810 <HAL_ETH_Init+0x13c>
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	4a69      	ldr	r2, [pc, #420]	; (80049a8 <HAL_ETH_Init+0x2d4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d804      	bhi.n	8004810 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	f043 0304 	orr.w	r3, r3, #4
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	e005      	b.n	800481c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	f043 0310 	orr.w	r3, r3, #16
 8004816:	61fb      	str	r3, [r7, #28]
 8004818:	e000      	b.n	800481c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800481a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	69fa      	ldr	r2, [r7, #28]
 8004822:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004824:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004828:	2100      	movs	r1, #0
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fc19 	bl	8005062 <HAL_ETH_WritePHYRegister>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00b      	beq.n	800484e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800483a:	6939      	ldr	r1, [r7, #16]
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fca5 	bl	800518c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e0d9      	b.n	8004a02 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800484e:	20ff      	movs	r0, #255	; 0xff
 8004850:	f7ff fa40 	bl	8003cd4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 80a7 	beq.w	80049ac <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800485e:	f7ff fa2d 	bl	8003cbc <HAL_GetTick>
 8004862:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004864:	f107 030c 	add.w	r3, r7, #12
 8004868:	461a      	mov	r2, r3
 800486a:	2101      	movs	r1, #1
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fb90 	bl	8004f92 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004872:	f7ff fa23 	bl	8003cbc <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004880:	4293      	cmp	r3, r2
 8004882:	d90f      	bls.n	80048a4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004888:	6939      	ldr	r1, [r7, #16]
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fc7e 	bl	800518c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e0ae      	b.n	8004a02 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0da      	beq.n	8004864 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80048ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80048b2:	2100      	movs	r1, #0
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fbd4 	bl	8005062 <HAL_ETH_WritePHYRegister>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00b      	beq.n	80048d8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80048c4:	6939      	ldr	r1, [r7, #16]
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 fc60 	bl	800518c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80048d4:	2301      	movs	r3, #1
 80048d6:	e094      	b.n	8004a02 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80048d8:	f7ff f9f0 	bl	8003cbc <HAL_GetTick>
 80048dc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80048de:	f107 030c 	add.w	r3, r7, #12
 80048e2:	461a      	mov	r2, r3
 80048e4:	2101      	movs	r1, #1
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fb53 	bl	8004f92 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80048ec:	f7ff f9e6 	bl	8003cbc <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d90f      	bls.n	800491e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004902:	6939      	ldr	r1, [r7, #16]
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 fc41 	bl	800518c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e071      	b.n	8004a02 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f003 0320 	and.w	r3, r3, #32
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0da      	beq.n	80048de <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8004928:	f107 030c 	add.w	r3, r7, #12
 800492c:	461a      	mov	r2, r3
 800492e:	211f      	movs	r1, #31
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fb2e 	bl	8004f92 <HAL_ETH_ReadPHYRegister>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00b      	beq.n	8004954 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004940:	6939      	ldr	r1, [r7, #16]
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fc22 	bl	800518c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004950:	2301      	movs	r3, #1
 8004952:	e056      	b.n	8004a02 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f003 0310 	and.w	r3, r3, #16
 800495a:	2b00      	cmp	r3, #0
 800495c:	d004      	beq.n	8004968 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004964:	60da      	str	r2, [r3, #12]
 8004966:	e002      	b.n	800496e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	609a      	str	r2, [r3, #8]
 800497e:	e037      	b.n	80049f0 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004986:	609a      	str	r2, [r3, #8]
 8004988:	e032      	b.n	80049f0 <HAL_ETH_Init+0x31c>
 800498a:	bf00      	nop
 800498c:	03938700 	.word	0x03938700
 8004990:	40023800 	.word	0x40023800
 8004994:	40013800 	.word	0x40013800
 8004998:	01312cff 	.word	0x01312cff
 800499c:	02160ebf 	.word	0x02160ebf
 80049a0:	039386ff 	.word	0x039386ff
 80049a4:	05f5e0ff 	.word	0x05f5e0ff
 80049a8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	08db      	lsrs	r3, r3, #3
 80049b2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	085b      	lsrs	r3, r3, #1
 80049ba:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80049bc:	4313      	orrs	r3, r2
 80049be:	b29b      	uxth	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	2100      	movs	r1, #0
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 fb4c 	bl	8005062 <HAL_ETH_WritePHYRegister>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00b      	beq.n	80049e8 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80049d4:	6939      	ldr	r1, [r7, #16]
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 fbd8 	bl	800518c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e00c      	b.n	8004a02 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80049e8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80049ec:	f7ff f972 	bl	8003cd4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80049f0:	6939      	ldr	r1, [r7, #16]
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fbca 	bl	800518c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3720      	adds	r7, #32
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop

08004a0c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_ETH_DMATxDescListInit+0x20>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e052      	b.n	8004ad2 <HAL_ETH_DMATxDescListInit+0xc6>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	e030      	b.n	8004aaa <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	015b      	lsls	r3, r3, #5
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	4413      	add	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a58:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	4413      	add	r3, r2
 8004a68:	461a      	mov	r2, r3
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d105      	bne.n	8004a82 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d208      	bcs.n	8004a9e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	015b      	lsls	r3, r3, #5
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	4413      	add	r3, r2
 8004a96:	461a      	mov	r2, r3
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	60da      	str	r2, [r3, #12]
 8004a9c:	e002      	b.n	8004aa4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	617b      	str	r3, [r7, #20]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d3ca      	bcc.n	8004a48 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6819      	ldr	r1, [r3, #0]
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	f241 0310 	movw	r3, #4112	; 0x1010
 8004abc:	440b      	add	r3, r1
 8004abe:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	371c      	adds	r7, #28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b087      	sub	sp, #28
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	607a      	str	r2, [r7, #4]
 8004aea:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <HAL_ETH_DMARxDescListInit+0x20>
 8004afa:	2302      	movs	r3, #2
 8004afc:	e056      	b.n	8004bac <HAL_ETH_DMARxDescListInit+0xce>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2202      	movs	r2, #2
 8004b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8004b14:	2300      	movs	r3, #0
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	e034      	b.n	8004b84 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	015b      	lsls	r3, r3, #5
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	4413      	add	r3, r2
 8004b22:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b2a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004b32:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004b3a:	fb02 f303 	mul.w	r3, r2, r3
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	4413      	add	r3, r2
 8004b42:	461a      	mov	r2, r3
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d105      	bne.n	8004b5c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d208      	bcs.n	8004b78 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	015b      	lsls	r3, r3, #5
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	4413      	add	r3, r2
 8004b70:	461a      	mov	r2, r3
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	60da      	str	r2, [r3, #12]
 8004b76:	e002      	b.n	8004b7e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	3301      	adds	r3, #1
 8004b82:	617b      	str	r3, [r7, #20]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d3c6      	bcc.n	8004b1a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6819      	ldr	r1, [r3, #0]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	f241 030c 	movw	r3, #4108	; 0x100c
 8004b96:	440b      	add	r3, r1
 8004b98:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	371c      	adds	r7, #28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	617b      	str	r3, [r7, #20]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d101      	bne.n	8004bdc <HAL_ETH_TransmitFrame+0x24>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e0cd      	b.n	8004d78 <HAL_ETH_TransmitFrame+0x1c0>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d109      	bne.n	8004c06 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8004c02:	2301      	movs	r3, #1
 8004c04:	e0b8      	b.n	8004d78 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	da09      	bge.n	8004c24 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2212      	movs	r2, #18
 8004c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e0a9      	b.n	8004d78 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d915      	bls.n	8004c5a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	4a54      	ldr	r2, [pc, #336]	; (8004d84 <HAL_ETH_TransmitFrame+0x1cc>)
 8004c32:	fba2 2303 	umull	r2, r3, r2, r3
 8004c36:	0a9b      	lsrs	r3, r3, #10
 8004c38:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	4b51      	ldr	r3, [pc, #324]	; (8004d84 <HAL_ETH_TransmitFrame+0x1cc>)
 8004c3e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c42:	0a9b      	lsrs	r3, r3, #10
 8004c44:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8004c48:	fb01 f303 	mul.w	r3, r1, r3
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d005      	beq.n	8004c5e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	3301      	adds	r3, #1
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	e001      	b.n	8004c5e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d11c      	bne.n	8004c9e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8004c72:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004c7e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004c8e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	461a      	mov	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c9c:	e04b      	b.n	8004d36 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	e044      	b.n	8004d2e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004cb2:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d107      	bne.n	8004cca <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004cc8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cce:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004cd2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d116      	bne.n	8004d0c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004cec:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	4a25      	ldr	r2, [pc, #148]	; (8004d88 <HAL_ETH_TransmitFrame+0x1d0>)
 8004cf2:	fb02 f203 	mul.w	r2, r2, r3
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004cfe:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004d0a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004d1a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	461a      	mov	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	613b      	str	r3, [r7, #16]
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d3b6      	bcc.n	8004ca4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	f241 0314 	movw	r3, #4116	; 0x1014
 8004d3e:	4413      	add	r3, r2
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00d      	beq.n	8004d66 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	f241 0314 	movw	r3, #4116	; 0x1014
 8004d52:	4413      	add	r3, r2
 8004d54:	2204      	movs	r2, #4
 8004d56:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	f241 0304 	movw	r3, #4100	; 0x1004
 8004d60:	4413      	add	r3, r2
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	371c      	adds	r7, #28
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	ac02b00b 	.word	0xac02b00b
 8004d88:	fffffa0c 	.word	0xfffffa0c

08004d8c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8004d94:	2300      	movs	r3, #0
 8004d96:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d101      	bne.n	8004da6 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8004da2:	2302      	movs	r3, #2
 8004da4:	e074      	b.n	8004e90 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2202      	movs	r2, #2
 8004db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004db6:	e05a      	b.n	8004e6e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dcc:	d10d      	bne.n	8004dea <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	461a      	mov	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	629a      	str	r2, [r3, #40]	; 0x28
 8004de8:	e041      	b.n	8004e6e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10b      	bne.n	8004e10 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	629a      	str	r2, [r3, #40]	; 0x28
 8004e0e:	e02e      	b.n	8004e6e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d103      	bne.n	8004e32 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	0c1b      	lsrs	r3, r3, #16
 8004e3a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004e3e:	1f1a      	subs	r2, r3, #4
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	461a      	mov	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	e010      	b.n	8004e90 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	db02      	blt.n	8004e7e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d99c      	bls.n	8004db8 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	f241 0314 	movw	r3, #4116	; 0x1014
 8004eac:	4413      	add	r3, r2
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb4:	2b40      	cmp	r3, #64	; 0x40
 8004eb6:	d112      	bne.n	8004ede <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f004 fa35 	bl	8009328 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	f241 0314 	movw	r3, #4116	; 0x1014
 8004ec6:	4413      	add	r3, r2
 8004ec8:	2240      	movs	r2, #64	; 0x40
 8004eca:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004edc:	e01b      	b.n	8004f16 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	f241 0314 	movw	r3, #4116	; 0x1014
 8004ee6:	4413      	add	r3, r2
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d111      	bne.n	8004f16 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f839 	bl	8004f6a <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	f241 0314 	movw	r3, #4116	; 0x1014
 8004f00:	4413      	add	r3, r2
 8004f02:	2201      	movs	r2, #1
 8004f04:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	f241 0314 	movw	r3, #4116	; 0x1014
 8004f1e:	4413      	add	r3, r2
 8004f20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004f24:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	f241 0314 	movw	r3, #4116	; 0x1014
 8004f2e:	4413      	add	r3, r2
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f3a:	d112      	bne.n	8004f62 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f81e 	bl	8004f7e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	f241 0314 	movw	r3, #4116	; 0x1014
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004f50:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8004f62:	bf00      	nop
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b083      	sub	sp, #12
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004f72:	bf00      	nop
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b086      	sub	sp, #24
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	607a      	str	r2, [r7, #4]
 8004f9e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b82      	cmp	r3, #130	; 0x82
 8004fb2:	d101      	bne.n	8004fb8 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e050      	b.n	800505a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2282      	movs	r2, #130	; 0x82
 8004fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f003 031c 	and.w	r3, r3, #28
 8004fce:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8a1b      	ldrh	r3, [r3, #16]
 8004fd4:	02db      	lsls	r3, r3, #11
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004fde:	897b      	ldrh	r3, [r7, #10]
 8004fe0:	019b      	lsls	r3, r3, #6
 8004fe2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f023 0302 	bic.w	r3, r3, #2
 8004ff2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f043 0301 	orr.w	r3, r3, #1
 8004ffa:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005004:	f7fe fe5a 	bl	8003cbc <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800500a:	e015      	b.n	8005038 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800500c:	f7fe fe56 	bl	8003cbc <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800501a:	d309      	bcc.n	8005030 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e014      	b.n	800505a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1e4      	bne.n	800500c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	b29b      	uxth	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b086      	sub	sp, #24
 8005066:	af00      	add	r7, sp, #0
 8005068:	60f8      	str	r0, [r7, #12]
 800506a:	460b      	mov	r3, r1
 800506c:	607a      	str	r2, [r7, #4]
 800506e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8005070:	2300      	movs	r3, #0
 8005072:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8005074:	2300      	movs	r3, #0
 8005076:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b42      	cmp	r3, #66	; 0x42
 8005082:	d101      	bne.n	8005088 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8005084:	2302      	movs	r3, #2
 8005086:	e04e      	b.n	8005126 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2242      	movs	r2, #66	; 0x42
 800508c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f003 031c 	and.w	r3, r3, #28
 800509e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8a1b      	ldrh	r3, [r3, #16]
 80050a4:	02db      	lsls	r3, r3, #11
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80050ae:	897b      	ldrh	r3, [r7, #10]
 80050b0:	019b      	lsls	r3, r3, #6
 80050b2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f043 0302 	orr.w	r3, r3, #2
 80050c2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f043 0301 	orr.w	r3, r3, #1
 80050ca:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80050de:	f7fe fded 	bl	8003cbc <HAL_GetTick>
 80050e2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80050e4:	e015      	b.n	8005112 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80050e6:	f7fe fde9 	bl	8003cbc <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f4:	d309      	bcc.n	800510a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e00d      	b.n	8005126 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e4      	bne.n	80050e6 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3718      	adds	r7, #24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800512e:	b580      	push	{r7, lr}
 8005130:	b082      	sub	sp, #8
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_ETH_Start+0x16>
 8005140:	2302      	movs	r3, #2
 8005142:	e01f      	b.n	8005184 <HAL_ETH_Start+0x56>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 fa1b 	bl	8005590 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fa35 	bl	80055ca <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fa7f 	bl	8005664 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fa4c 	bl	8005604 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 fa61 	bl	8005634 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b0b0      	sub	sp, #192	; 0xc0
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8005196:	2300      	movs	r3, #0
 8005198:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d007      	beq.n	80051b2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051a8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80051b2:	2300      	movs	r3, #0
 80051b4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80051b6:	2300      	movs	r3, #0
 80051b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80051ba:	2300      	movs	r3, #0
 80051bc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80051be:	2300      	movs	r3, #0
 80051c0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80051c2:	2300      	movs	r3, #0
 80051c4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80051c6:	2300      	movs	r3, #0
 80051c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d103      	bne.n	80051da <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80051d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051d6:	663b      	str	r3, [r7, #96]	; 0x60
 80051d8:	e001      	b.n	80051de <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80051da:	2300      	movs	r3, #0
 80051dc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80051de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051e2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80051e4:	2300      	movs	r3, #0
 80051e6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80051e8:	2300      	movs	r3, #0
 80051ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80051ec:	2300      	movs	r3, #0
 80051ee:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80051f0:	2300      	movs	r3, #0
 80051f2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80051f4:	2300      	movs	r3, #0
 80051f6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80051f8:	2340      	movs	r3, #64	; 0x40
 80051fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80051fc:	2300      	movs	r3, #0
 80051fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8005202:	2300      	movs	r3, #0
 8005204:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8005208:	2300      	movs	r3, #0
 800520a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800520e:	2300      	movs	r3, #0
 8005210:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8005214:	2300      	movs	r3, #0
 8005216:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800521a:	2300      	movs	r3, #0
 800521c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8005220:	2300      	movs	r3, #0
 8005222:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8005226:	2300      	movs	r3, #0
 8005228:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800522c:	2380      	movs	r3, #128	; 0x80
 800522e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005232:	2300      	movs	r3, #0
 8005234:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8005238:	2300      	movs	r3, #0
 800523a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800523e:	2300      	movs	r3, #0
 8005240:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8005244:	2300      	movs	r3, #0
 8005246:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800524a:	2300      	movs	r3, #0
 800524c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8005250:	2300      	movs	r3, #0
 8005252:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8005260:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005264:	4bab      	ldr	r3, [pc, #684]	; (8005514 <ETH_MACDMAConfig+0x388>)
 8005266:	4013      	ands	r3, r2
 8005268:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800526c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800526e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8005270:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8005272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8005274:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8005276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8005278:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800527e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8005280:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8005282:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8005284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8005286:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800528c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800528e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8005290:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8005292:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8005294:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8005296:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8005298:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800529a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800529c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800529e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80052a0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80052a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80052b4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80052c0:	2001      	movs	r0, #1
 80052c2:	f7fe fd07 	bl	8003cd4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80052ce:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80052d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80052d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80052d4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80052d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80052d8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80052da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80052de:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80052e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80052e4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80052e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80052ea:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80052ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80052f0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80052f4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80052fc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80052fe:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800530a:	2001      	movs	r0, #1
 800530c:	f7fe fce2 	bl	8003cd4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005318:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005322:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800532c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8005338:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800533c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005340:	4013      	ands	r3, r2
 8005342:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8005346:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800534a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800534c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8005350:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8005352:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8005356:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8005358:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800535c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800535e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8005362:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8005364:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8005368:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800536a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800537c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005388:	2001      	movs	r0, #1
 800538a:	f7fe fca3 	bl	8003cd4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005396:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005398:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800539c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80053b2:	2001      	movs	r0, #1
 80053b4:	f7fe fc8e 	bl	8003cd4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80053c0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80053c2:	2300      	movs	r3, #0
 80053c4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80053c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053ca:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80053cc:	2300      	movs	r3, #0
 80053ce:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80053d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80053d4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80053d6:	2300      	movs	r3, #0
 80053d8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80053da:	2300      	movs	r3, #0
 80053dc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80053de:	2300      	movs	r3, #0
 80053e0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80053e2:	2300      	movs	r3, #0
 80053e4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80053e6:	2304      	movs	r3, #4
 80053e8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80053ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80053f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053f4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80053f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80053fa:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80053fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005400:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8005402:	2380      	movs	r3, #128	; 0x80
 8005404:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8005406:	2300      	movs	r3, #0
 8005408:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800540a:	2300      	movs	r3, #0
 800540c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	f241 0318 	movw	r3, #4120	; 0x1018
 8005416:	4413      	add	r3, r2
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800541e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005422:	4b3d      	ldr	r3, [pc, #244]	; (8005518 <ETH_MACDMAConfig+0x38c>)
 8005424:	4013      	ands	r3, r2
 8005426:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800542a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800542c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800542e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8005430:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8005432:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8005434:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8005436:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8005438:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800543a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800543c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800543e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8005440:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8005442:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8005446:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8005448:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800544a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800544c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	f241 0318 	movw	r3, #4120	; 0x1018
 800545e:	4413      	add	r3, r2
 8005460:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005464:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	f241 0318 	movw	r3, #4120	; 0x1018
 800546e:	4413      	add	r3, r2
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005476:	2001      	movs	r0, #1
 8005478:	f7fe fc2c 	bl	8003cd4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	f241 0318 	movw	r3, #4120	; 0x1018
 8005484:	4413      	add	r3, r2
 8005486:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800548a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800548c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800548e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005490:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8005494:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8005496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005498:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800549a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800549c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800549e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054a0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80054a2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80054a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80054a6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80054b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054b4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80054c4:	2001      	movs	r0, #1
 80054c6:	f7fe fc05 	bl	8003cd4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80054d6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d10d      	bne.n	80054fc <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	f241 031c 	movw	r3, #4124	; 0x101c
 80054e8:	4413      	add	r3, r2
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6811      	ldr	r1, [r2, #0]
 80054f0:	4a0a      	ldr	r2, [pc, #40]	; (800551c <ETH_MACDMAConfig+0x390>)
 80054f2:	431a      	orrs	r2, r3
 80054f4:	f241 031c 	movw	r3, #4124	; 0x101c
 80054f8:	440b      	add	r3, r1
 80054fa:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	461a      	mov	r2, r3
 8005502:	2100      	movs	r1, #0
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f80b 	bl	8005520 <ETH_MACAddressConfig>
}
 800550a:	bf00      	nop
 800550c:	37c0      	adds	r7, #192	; 0xc0
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	ff20810f 	.word	0xff20810f
 8005518:	f8de3f23 	.word	0xf8de3f23
 800551c:	00010040 	.word	0x00010040

08005520 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3305      	adds	r3, #5
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	021b      	lsls	r3, r3, #8
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	3204      	adds	r2, #4
 8005538:	7812      	ldrb	r2, [r2, #0]
 800553a:	4313      	orrs	r3, r2
 800553c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	4b11      	ldr	r3, [pc, #68]	; (8005588 <ETH_MACAddressConfig+0x68>)
 8005542:	4413      	add	r3, r2
 8005544:	461a      	mov	r2, r3
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3303      	adds	r3, #3
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	061a      	lsls	r2, r3, #24
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3302      	adds	r3, #2
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	041b      	lsls	r3, r3, #16
 800555a:	431a      	orrs	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3301      	adds	r3, #1
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	021b      	lsls	r3, r3, #8
 8005564:	4313      	orrs	r3, r2
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	7812      	ldrb	r2, [r2, #0]
 800556a:	4313      	orrs	r3, r2
 800556c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	4b06      	ldr	r3, [pc, #24]	; (800558c <ETH_MACAddressConfig+0x6c>)
 8005572:	4413      	add	r3, r2
 8005574:	461a      	mov	r2, r3
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	6013      	str	r3, [r2, #0]
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	40028040 	.word	0x40028040
 800558c:	40028044 	.word	0x40028044

08005590 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005598:	2300      	movs	r3, #0
 800559a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 0208 	orr.w	r2, r2, #8
 80055aa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80055b4:	2001      	movs	r0, #1
 80055b6:	f7fe fb8d 	bl	8003cd4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	601a      	str	r2, [r3, #0]
}
 80055c2:	bf00      	nop
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b084      	sub	sp, #16
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f042 0204 	orr.w	r2, r2, #4
 80055e4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80055ee:	2001      	movs	r0, #1
 80055f0:	f7fe fb70 	bl	8003cd4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	601a      	str	r2, [r3, #0]
}
 80055fc:	bf00      	nop
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	f241 0318 	movw	r3, #4120	; 0x1018
 8005614:	4413      	add	r3, r2
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6811      	ldr	r1, [r2, #0]
 800561c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005620:	f241 0318 	movw	r3, #4120	; 0x1018
 8005624:	440b      	add	r3, r1
 8005626:	601a      	str	r2, [r3, #0]
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	f241 0318 	movw	r3, #4120	; 0x1018
 8005644:	4413      	add	r3, r2
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6811      	ldr	r1, [r2, #0]
 800564c:	f043 0202 	orr.w	r2, r3, #2
 8005650:	f241 0318 	movw	r3, #4120	; 0x1018
 8005654:	440b      	add	r3, r1
 8005656:	601a      	str	r2, [r3, #0]
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800566c:	2300      	movs	r3, #0
 800566e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	f241 0318 	movw	r3, #4120	; 0x1018
 8005678:	4413      	add	r3, r2
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6811      	ldr	r1, [r2, #0]
 8005680:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005684:	f241 0318 	movw	r3, #4120	; 0x1018
 8005688:	440b      	add	r3, r1
 800568a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	f241 0318 	movw	r3, #4120	; 0x1018
 8005694:	4413      	add	r3, r2
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800569a:	2001      	movs	r0, #1
 800569c:	f7fe fb1a 	bl	8003cd4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6819      	ldr	r1, [r3, #0]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	f241 0318 	movw	r3, #4120	; 0x1018
 80056aa:	440b      	add	r3, r1
 80056ac:	601a      	str	r2, [r3, #0]
}
 80056ae:	bf00      	nop
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b089      	sub	sp, #36	; 0x24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80056c2:	2300      	movs	r3, #0
 80056c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80056c6:	2300      	movs	r3, #0
 80056c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80056ca:	2300      	movs	r3, #0
 80056cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80056ce:	2300      	movs	r3, #0
 80056d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80056d2:	2300      	movs	r3, #0
 80056d4:	61fb      	str	r3, [r7, #28]
 80056d6:	e175      	b.n	80059c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80056d8:	2201      	movs	r2, #1
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	fa02 f303 	lsl.w	r3, r2, r3
 80056e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	4013      	ands	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	f040 8164 	bne.w	80059be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d00b      	beq.n	8005716 <HAL_GPIO_Init+0x5e>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b02      	cmp	r3, #2
 8005704:	d007      	beq.n	8005716 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800570a:	2b11      	cmp	r3, #17
 800570c:	d003      	beq.n	8005716 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	2b12      	cmp	r3, #18
 8005714:	d130      	bne.n	8005778 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	2203      	movs	r2, #3
 8005722:	fa02 f303 	lsl.w	r3, r2, r3
 8005726:	43db      	mvns	r3, r3
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	4013      	ands	r3, r2
 800572c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	fa02 f303 	lsl.w	r3, r2, r3
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	4313      	orrs	r3, r2
 800573e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800574c:	2201      	movs	r2, #1
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	fa02 f303 	lsl.w	r3, r2, r3
 8005754:	43db      	mvns	r3, r3
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	4013      	ands	r3, r2
 800575a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	091b      	lsrs	r3, r3, #4
 8005762:	f003 0201 	and.w	r2, r3, #1
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	fa02 f303 	lsl.w	r3, r2, r3
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	4313      	orrs	r3, r2
 8005770:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	2203      	movs	r2, #3
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	43db      	mvns	r3, r3
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	4013      	ands	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	4313      	orrs	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d003      	beq.n	80057b8 <HAL_GPIO_Init+0x100>
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	2b12      	cmp	r3, #18
 80057b6:	d123      	bne.n	8005800 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	08da      	lsrs	r2, r3, #3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3208      	adds	r2, #8
 80057c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	220f      	movs	r2, #15
 80057d0:	fa02 f303 	lsl.w	r3, r2, r3
 80057d4:	43db      	mvns	r3, r3
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	4013      	ands	r3, r2
 80057da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	691a      	ldr	r2, [r3, #16]
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	f003 0307 	and.w	r3, r3, #7
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	08da      	lsrs	r2, r3, #3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	3208      	adds	r2, #8
 80057fa:	69b9      	ldr	r1, [r7, #24]
 80057fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	2203      	movs	r2, #3
 800580c:	fa02 f303 	lsl.w	r3, r2, r3
 8005810:	43db      	mvns	r3, r3
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	4013      	ands	r3, r2
 8005816:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f003 0203 	and.w	r2, r3, #3
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	fa02 f303 	lsl.w	r3, r2, r3
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	4313      	orrs	r3, r2
 800582c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 80be 	beq.w	80059be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005842:	4b65      	ldr	r3, [pc, #404]	; (80059d8 <HAL_GPIO_Init+0x320>)
 8005844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005846:	4a64      	ldr	r2, [pc, #400]	; (80059d8 <HAL_GPIO_Init+0x320>)
 8005848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800584c:	6453      	str	r3, [r2, #68]	; 0x44
 800584e:	4b62      	ldr	r3, [pc, #392]	; (80059d8 <HAL_GPIO_Init+0x320>)
 8005850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800585a:	4a60      	ldr	r2, [pc, #384]	; (80059dc <HAL_GPIO_Init+0x324>)
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	089b      	lsrs	r3, r3, #2
 8005860:	3302      	adds	r3, #2
 8005862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005866:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	f003 0303 	and.w	r3, r3, #3
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	220f      	movs	r2, #15
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	43db      	mvns	r3, r3
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	4013      	ands	r3, r2
 800587c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a57      	ldr	r2, [pc, #348]	; (80059e0 <HAL_GPIO_Init+0x328>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d037      	beq.n	80058f6 <HAL_GPIO_Init+0x23e>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a56      	ldr	r2, [pc, #344]	; (80059e4 <HAL_GPIO_Init+0x32c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d031      	beq.n	80058f2 <HAL_GPIO_Init+0x23a>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a55      	ldr	r2, [pc, #340]	; (80059e8 <HAL_GPIO_Init+0x330>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d02b      	beq.n	80058ee <HAL_GPIO_Init+0x236>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a54      	ldr	r2, [pc, #336]	; (80059ec <HAL_GPIO_Init+0x334>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d025      	beq.n	80058ea <HAL_GPIO_Init+0x232>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a53      	ldr	r2, [pc, #332]	; (80059f0 <HAL_GPIO_Init+0x338>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d01f      	beq.n	80058e6 <HAL_GPIO_Init+0x22e>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a52      	ldr	r2, [pc, #328]	; (80059f4 <HAL_GPIO_Init+0x33c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d019      	beq.n	80058e2 <HAL_GPIO_Init+0x22a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a51      	ldr	r2, [pc, #324]	; (80059f8 <HAL_GPIO_Init+0x340>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d013      	beq.n	80058de <HAL_GPIO_Init+0x226>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a50      	ldr	r2, [pc, #320]	; (80059fc <HAL_GPIO_Init+0x344>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d00d      	beq.n	80058da <HAL_GPIO_Init+0x222>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a4f      	ldr	r2, [pc, #316]	; (8005a00 <HAL_GPIO_Init+0x348>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d007      	beq.n	80058d6 <HAL_GPIO_Init+0x21e>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a4e      	ldr	r2, [pc, #312]	; (8005a04 <HAL_GPIO_Init+0x34c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d101      	bne.n	80058d2 <HAL_GPIO_Init+0x21a>
 80058ce:	2309      	movs	r3, #9
 80058d0:	e012      	b.n	80058f8 <HAL_GPIO_Init+0x240>
 80058d2:	230a      	movs	r3, #10
 80058d4:	e010      	b.n	80058f8 <HAL_GPIO_Init+0x240>
 80058d6:	2308      	movs	r3, #8
 80058d8:	e00e      	b.n	80058f8 <HAL_GPIO_Init+0x240>
 80058da:	2307      	movs	r3, #7
 80058dc:	e00c      	b.n	80058f8 <HAL_GPIO_Init+0x240>
 80058de:	2306      	movs	r3, #6
 80058e0:	e00a      	b.n	80058f8 <HAL_GPIO_Init+0x240>
 80058e2:	2305      	movs	r3, #5
 80058e4:	e008      	b.n	80058f8 <HAL_GPIO_Init+0x240>
 80058e6:	2304      	movs	r3, #4
 80058e8:	e006      	b.n	80058f8 <HAL_GPIO_Init+0x240>
 80058ea:	2303      	movs	r3, #3
 80058ec:	e004      	b.n	80058f8 <HAL_GPIO_Init+0x240>
 80058ee:	2302      	movs	r3, #2
 80058f0:	e002      	b.n	80058f8 <HAL_GPIO_Init+0x240>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <HAL_GPIO_Init+0x240>
 80058f6:	2300      	movs	r3, #0
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	f002 0203 	and.w	r2, r2, #3
 80058fe:	0092      	lsls	r2, r2, #2
 8005900:	4093      	lsls	r3, r2
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	4313      	orrs	r3, r2
 8005906:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005908:	4934      	ldr	r1, [pc, #208]	; (80059dc <HAL_GPIO_Init+0x324>)
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	089b      	lsrs	r3, r3, #2
 800590e:	3302      	adds	r3, #2
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005916:	4b3c      	ldr	r3, [pc, #240]	; (8005a08 <HAL_GPIO_Init+0x350>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	43db      	mvns	r3, r3
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	4013      	ands	r3, r2
 8005924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800593a:	4a33      	ldr	r2, [pc, #204]	; (8005a08 <HAL_GPIO_Init+0x350>)
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005940:	4b31      	ldr	r3, [pc, #196]	; (8005a08 <HAL_GPIO_Init+0x350>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	43db      	mvns	r3, r3
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	4013      	ands	r3, r2
 800594e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	4313      	orrs	r3, r2
 8005962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005964:	4a28      	ldr	r2, [pc, #160]	; (8005a08 <HAL_GPIO_Init+0x350>)
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800596a:	4b27      	ldr	r3, [pc, #156]	; (8005a08 <HAL_GPIO_Init+0x350>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	43db      	mvns	r3, r3
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	4013      	ands	r3, r2
 8005978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	4313      	orrs	r3, r2
 800598c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800598e:	4a1e      	ldr	r2, [pc, #120]	; (8005a08 <HAL_GPIO_Init+0x350>)
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005994:	4b1c      	ldr	r3, [pc, #112]	; (8005a08 <HAL_GPIO_Init+0x350>)
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	43db      	mvns	r3, r3
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	4013      	ands	r3, r2
 80059a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059b8:	4a13      	ldr	r2, [pc, #76]	; (8005a08 <HAL_GPIO_Init+0x350>)
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	3301      	adds	r3, #1
 80059c2:	61fb      	str	r3, [r7, #28]
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	2b0f      	cmp	r3, #15
 80059c8:	f67f ae86 	bls.w	80056d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80059cc:	bf00      	nop
 80059ce:	3724      	adds	r7, #36	; 0x24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	40023800 	.word	0x40023800
 80059dc:	40013800 	.word	0x40013800
 80059e0:	40020000 	.word	0x40020000
 80059e4:	40020400 	.word	0x40020400
 80059e8:	40020800 	.word	0x40020800
 80059ec:	40020c00 	.word	0x40020c00
 80059f0:	40021000 	.word	0x40021000
 80059f4:	40021400 	.word	0x40021400
 80059f8:	40021800 	.word	0x40021800
 80059fc:	40021c00 	.word	0x40021c00
 8005a00:	40022000 	.word	0x40022000
 8005a04:	40022400 	.word	0x40022400
 8005a08:	40013c00 	.word	0x40013c00

08005a0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	691a      	ldr	r2, [r3, #16]
 8005a1c:	887b      	ldrh	r3, [r7, #2]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a24:	2301      	movs	r3, #1
 8005a26:	73fb      	strb	r3, [r7, #15]
 8005a28:	e001      	b.n	8005a2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	807b      	strh	r3, [r7, #2]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a4c:	787b      	ldrb	r3, [r7, #1]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a52:	887a      	ldrh	r2, [r7, #2]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005a58:	e003      	b.n	8005a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005a5a:	887b      	ldrh	r3, [r7, #2]
 8005a5c:	041a      	lsls	r2, r3, #16
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	619a      	str	r2, [r3, #24]
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	460b      	mov	r3, r1
 8005a78:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	695a      	ldr	r2, [r3, #20]
 8005a7e:	887b      	ldrh	r3, [r7, #2]
 8005a80:	4013      	ands	r3, r2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d004      	beq.n	8005a90 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005a86:	887b      	ldrh	r3, [r7, #2]
 8005a88:	041a      	lsls	r2, r3, #16
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005a8e:	e002      	b.n	8005a96 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a90:	887a      	ldrh	r2, [r7, #2]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	619a      	str	r2, [r3, #24]
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
	...

08005aa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005aae:	4b08      	ldr	r3, [pc, #32]	; (8005ad0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ab0:	695a      	ldr	r2, [r3, #20]
 8005ab2:	88fb      	ldrh	r3, [r7, #6]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d006      	beq.n	8005ac8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005aba:	4a05      	ldr	r2, [pc, #20]	; (8005ad0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005abc:	88fb      	ldrh	r3, [r7, #6]
 8005abe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ac0:	88fb      	ldrh	r3, [r7, #6]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fd fb44 	bl	8003150 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ac8:	bf00      	nop
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	40013c00 	.word	0x40013c00

08005ad4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e07f      	b.n	8005be6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d106      	bne.n	8005b00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7fd fe88 	bl	8003810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2224      	movs	r2, #36	; 0x24
 8005b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 0201 	bic.w	r2, r2, #1
 8005b16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d107      	bne.n	8005b4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689a      	ldr	r2, [r3, #8]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b4a:	609a      	str	r2, [r3, #8]
 8005b4c:	e006      	b.n	8005b5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005b5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d104      	bne.n	8005b6e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6859      	ldr	r1, [r3, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	4b1d      	ldr	r3, [pc, #116]	; (8005bf0 <HAL_I2C_Init+0x11c>)
 8005b7a:	430b      	orrs	r3, r1
 8005b7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691a      	ldr	r2, [r3, #16]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	ea42 0103 	orr.w	r1, r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	021a      	lsls	r2, r3, #8
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	69d9      	ldr	r1, [r3, #28]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a1a      	ldr	r2, [r3, #32]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0201 	orr.w	r2, r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	02008000 	.word	0x02008000

08005bf4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b088      	sub	sp, #32
 8005bf8:	af02      	add	r7, sp, #8
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	607a      	str	r2, [r7, #4]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	460b      	mov	r3, r1
 8005c02:	817b      	strh	r3, [r7, #10]
 8005c04:	4613      	mov	r3, r2
 8005c06:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b20      	cmp	r3, #32
 8005c12:	f040 80da 	bne.w	8005dca <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_I2C_Master_Transmit+0x30>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e0d3      	b.n	8005dcc <HAL_I2C_Master_Transmit+0x1d8>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c2c:	f7fe f846 	bl	8003cbc <HAL_GetTick>
 8005c30:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	2319      	movs	r3, #25
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 f9e6 	bl	8006010 <I2C_WaitOnFlagUntilTimeout>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e0be      	b.n	8005dcc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2221      	movs	r2, #33	; 0x21
 8005c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2210      	movs	r2, #16
 8005c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	893a      	ldrh	r2, [r7, #8]
 8005c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2bff      	cmp	r3, #255	; 0xff
 8005c7e:	d90e      	bls.n	8005c9e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	22ff      	movs	r2, #255	; 0xff
 8005c84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	8979      	ldrh	r1, [r7, #10]
 8005c8e:	4b51      	ldr	r3, [pc, #324]	; (8005dd4 <HAL_I2C_Master_Transmit+0x1e0>)
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f000 fb48 	bl	800632c <I2C_TransferConfig>
 8005c9c:	e06c      	b.n	8005d78 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	8979      	ldrh	r1, [r7, #10]
 8005cb0:	4b48      	ldr	r3, [pc, #288]	; (8005dd4 <HAL_I2C_Master_Transmit+0x1e0>)
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 fb37 	bl	800632c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005cbe:	e05b      	b.n	8005d78 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	6a39      	ldr	r1, [r7, #32]
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 f9e3 	bl	8006090 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e07b      	b.n	8005dcc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	781a      	ldrb	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d034      	beq.n	8005d78 <HAL_I2C_Master_Transmit+0x184>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d130      	bne.n	8005d78 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2180      	movs	r1, #128	; 0x80
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 f975 	bl	8006010 <I2C_WaitOnFlagUntilTimeout>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e04d      	b.n	8005dcc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	2bff      	cmp	r3, #255	; 0xff
 8005d38:	d90e      	bls.n	8005d58 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	22ff      	movs	r2, #255	; 0xff
 8005d3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	8979      	ldrh	r1, [r7, #10]
 8005d48:	2300      	movs	r3, #0
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 faeb 	bl	800632c <I2C_TransferConfig>
 8005d56:	e00f      	b.n	8005d78 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	8979      	ldrh	r1, [r7, #10]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 fada 	bl	800632c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d19e      	bne.n	8005cc0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	6a39      	ldr	r1, [r7, #32]
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f9c2 	bl	8006110 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e01a      	b.n	8005dcc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6859      	ldr	r1, [r3, #4]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	4b0b      	ldr	r3, [pc, #44]	; (8005dd8 <HAL_I2C_Master_Transmit+0x1e4>)
 8005daa:	400b      	ands	r3, r1
 8005dac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2220      	movs	r2, #32
 8005db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e000      	b.n	8005dcc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005dca:	2302      	movs	r3, #2
  }
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	80002000 	.word	0x80002000
 8005dd8:	fe00e800 	.word	0xfe00e800

08005ddc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b088      	sub	sp, #32
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	607a      	str	r2, [r7, #4]
 8005de6:	461a      	mov	r2, r3
 8005de8:	460b      	mov	r3, r1
 8005dea:	817b      	strh	r3, [r7, #10]
 8005dec:	4613      	mov	r3, r2
 8005dee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b20      	cmp	r3, #32
 8005dfa:	f040 80db 	bne.w	8005fb4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d101      	bne.n	8005e0c <HAL_I2C_Master_Receive+0x30>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	e0d4      	b.n	8005fb6 <HAL_I2C_Master_Receive+0x1da>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e14:	f7fd ff52 	bl	8003cbc <HAL_GetTick>
 8005e18:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	2319      	movs	r3, #25
 8005e20:	2201      	movs	r2, #1
 8005e22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 f8f2 	bl	8006010 <I2C_WaitOnFlagUntilTimeout>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e0bf      	b.n	8005fb6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2222      	movs	r2, #34	; 0x22
 8005e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2210      	movs	r2, #16
 8005e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	893a      	ldrh	r2, [r7, #8]
 8005e56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	2bff      	cmp	r3, #255	; 0xff
 8005e66:	d90e      	bls.n	8005e86 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	22ff      	movs	r2, #255	; 0xff
 8005e6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	8979      	ldrh	r1, [r7, #10]
 8005e76:	4b52      	ldr	r3, [pc, #328]	; (8005fc0 <HAL_I2C_Master_Receive+0x1e4>)
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 fa54 	bl	800632c <I2C_TransferConfig>
 8005e84:	e06d      	b.n	8005f62 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	8979      	ldrh	r1, [r7, #10]
 8005e98:	4b49      	ldr	r3, [pc, #292]	; (8005fc0 <HAL_I2C_Master_Receive+0x1e4>)
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 fa43 	bl	800632c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005ea6:	e05c      	b.n	8005f62 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	6a39      	ldr	r1, [r7, #32]
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 f96b 	bl	8006188 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e07c      	b.n	8005fb6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	b2d2      	uxtb	r2, r2
 8005ec8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d034      	beq.n	8005f62 <HAL_I2C_Master_Receive+0x186>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d130      	bne.n	8005f62 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	2200      	movs	r2, #0
 8005f08:	2180      	movs	r1, #128	; 0x80
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 f880 	bl	8006010 <I2C_WaitOnFlagUntilTimeout>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e04d      	b.n	8005fb6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2bff      	cmp	r3, #255	; 0xff
 8005f22:	d90e      	bls.n	8005f42 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	22ff      	movs	r2, #255	; 0xff
 8005f28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	8979      	ldrh	r1, [r7, #10]
 8005f32:	2300      	movs	r3, #0
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 f9f6 	bl	800632c <I2C_TransferConfig>
 8005f40:	e00f      	b.n	8005f62 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	8979      	ldrh	r1, [r7, #10]
 8005f54:	2300      	movs	r3, #0
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 f9e5 	bl	800632c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d19d      	bne.n	8005ea8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	6a39      	ldr	r1, [r7, #32]
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 f8cd 	bl	8006110 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e01a      	b.n	8005fb6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2220      	movs	r2, #32
 8005f86:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6859      	ldr	r1, [r3, #4]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	4b0c      	ldr	r3, [pc, #48]	; (8005fc4 <HAL_I2C_Master_Receive+0x1e8>)
 8005f94:	400b      	ands	r3, r1
 8005f96:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	e000      	b.n	8005fb6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005fb4:	2302      	movs	r3, #2
  }
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3718      	adds	r7, #24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	80002400 	.word	0x80002400
 8005fc4:	fe00e800 	.word	0xfe00e800

08005fc8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d103      	bne.n	8005fe6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d007      	beq.n	8006004 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	699a      	ldr	r2, [r3, #24]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f042 0201 	orr.w	r2, r2, #1
 8006002:	619a      	str	r2, [r3, #24]
  }
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	603b      	str	r3, [r7, #0]
 800601c:	4613      	mov	r3, r2
 800601e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006020:	e022      	b.n	8006068 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006028:	d01e      	beq.n	8006068 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800602a:	f7fd fe47 	bl	8003cbc <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	429a      	cmp	r2, r3
 8006038:	d302      	bcc.n	8006040 <I2C_WaitOnFlagUntilTimeout+0x30>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d113      	bne.n	8006068 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006044:	f043 0220 	orr.w	r2, r3, #32
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2220      	movs	r2, #32
 8006050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e00f      	b.n	8006088 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	699a      	ldr	r2, [r3, #24]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	4013      	ands	r3, r2
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	429a      	cmp	r2, r3
 8006076:	bf0c      	ite	eq
 8006078:	2301      	moveq	r3, #1
 800607a:	2300      	movne	r3, #0
 800607c:	b2db      	uxtb	r3, r3
 800607e:	461a      	mov	r2, r3
 8006080:	79fb      	ldrb	r3, [r7, #7]
 8006082:	429a      	cmp	r2, r3
 8006084:	d0cd      	beq.n	8006022 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800609c:	e02c      	b.n	80060f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	68b9      	ldr	r1, [r7, #8]
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 f8dc 	bl	8006260 <I2C_IsAcknowledgeFailed>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e02a      	b.n	8006108 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b8:	d01e      	beq.n	80060f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ba:	f7fd fdff 	bl	8003cbc <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d302      	bcc.n	80060d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d113      	bne.n	80060f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d4:	f043 0220 	orr.w	r2, r3, #32
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2220      	movs	r2, #32
 80060e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e007      	b.n	8006108 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b02      	cmp	r3, #2
 8006104:	d1cb      	bne.n	800609e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800611c:	e028      	b.n	8006170 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	68b9      	ldr	r1, [r7, #8]
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f000 f89c 	bl	8006260 <I2C_IsAcknowledgeFailed>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e026      	b.n	8006180 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006132:	f7fd fdc3 	bl	8003cbc <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	429a      	cmp	r2, r3
 8006140:	d302      	bcc.n	8006148 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d113      	bne.n	8006170 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800614c:	f043 0220 	orr.w	r2, r3, #32
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2220      	movs	r2, #32
 8006158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e007      	b.n	8006180 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b20      	cmp	r3, #32
 800617c:	d1cf      	bne.n	800611e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006194:	e055      	b.n	8006242 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	68b9      	ldr	r1, [r7, #8]
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 f860 	bl	8006260 <I2C_IsAcknowledgeFailed>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e053      	b.n	8006252 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	f003 0320 	and.w	r3, r3, #32
 80061b4:	2b20      	cmp	r3, #32
 80061b6:	d129      	bne.n	800620c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	f003 0304 	and.w	r3, r3, #4
 80061c2:	2b04      	cmp	r3, #4
 80061c4:	d105      	bne.n	80061d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	e03f      	b.n	8006252 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2220      	movs	r2, #32
 80061d8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6859      	ldr	r1, [r3, #4]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	4b1d      	ldr	r3, [pc, #116]	; (800625c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80061e6:	400b      	ands	r3, r1
 80061e8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2220      	movs	r2, #32
 80061f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e022      	b.n	8006252 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800620c:	f7fd fd56 	bl	8003cbc <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	429a      	cmp	r2, r3
 800621a:	d302      	bcc.n	8006222 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10f      	bne.n	8006242 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006226:	f043 0220 	orr.w	r2, r3, #32
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2220      	movs	r2, #32
 8006232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e007      	b.n	8006252 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b04      	cmp	r3, #4
 800624e:	d1a2      	bne.n	8006196 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	fe00e800 	.word	0xfe00e800

08006260 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	f003 0310 	and.w	r3, r3, #16
 8006276:	2b10      	cmp	r3, #16
 8006278:	d151      	bne.n	800631e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800627a:	e022      	b.n	80062c2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006282:	d01e      	beq.n	80062c2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006284:	f7fd fd1a 	bl	8003cbc <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	429a      	cmp	r2, r3
 8006292:	d302      	bcc.n	800629a <I2C_IsAcknowledgeFailed+0x3a>
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d113      	bne.n	80062c2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629e:	f043 0220 	orr.w	r2, r3, #32
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e02e      	b.n	8006320 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	f003 0320 	and.w	r3, r3, #32
 80062cc:	2b20      	cmp	r3, #32
 80062ce:	d1d5      	bne.n	800627c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2210      	movs	r2, #16
 80062d6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2220      	movs	r2, #32
 80062de:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f7ff fe71 	bl	8005fc8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6859      	ldr	r1, [r3, #4]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	4b0d      	ldr	r3, [pc, #52]	; (8006328 <I2C_IsAcknowledgeFailed+0xc8>)
 80062f2:	400b      	ands	r3, r1
 80062f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fa:	f043 0204 	orr.w	r2, r3, #4
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2220      	movs	r2, #32
 8006306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e000      	b.n	8006320 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	fe00e800 	.word	0xfe00e800

0800632c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	607b      	str	r3, [r7, #4]
 8006336:	460b      	mov	r3, r1
 8006338:	817b      	strh	r3, [r7, #10]
 800633a:	4613      	mov	r3, r2
 800633c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	0d5b      	lsrs	r3, r3, #21
 8006348:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800634c:	4b0d      	ldr	r3, [pc, #52]	; (8006384 <I2C_TransferConfig+0x58>)
 800634e:	430b      	orrs	r3, r1
 8006350:	43db      	mvns	r3, r3
 8006352:	ea02 0103 	and.w	r1, r2, r3
 8006356:	897b      	ldrh	r3, [r7, #10]
 8006358:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800635c:	7a7b      	ldrb	r3, [r7, #9]
 800635e:	041b      	lsls	r3, r3, #16
 8006360:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006364:	431a      	orrs	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	431a      	orrs	r2, r3
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	431a      	orrs	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006376:	bf00      	nop
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	03ff63ff 	.word	0x03ff63ff

08006388 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b20      	cmp	r3, #32
 800639c:	d138      	bne.n	8006410 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d101      	bne.n	80063ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80063a8:	2302      	movs	r3, #2
 80063aa:	e032      	b.n	8006412 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2224      	movs	r2, #36	; 0x24
 80063b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 0201 	bic.w	r2, r2, #1
 80063ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6819      	ldr	r1, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	430a      	orrs	r2, r1
 80063ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 0201 	orr.w	r2, r2, #1
 80063fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2220      	movs	r2, #32
 8006400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	e000      	b.n	8006412 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006410:	2302      	movs	r3, #2
  }
}
 8006412:	4618      	mov	r0, r3
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800641e:	b480      	push	{r7}
 8006420:	b085      	sub	sp, #20
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b20      	cmp	r3, #32
 8006432:	d139      	bne.n	80064a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800643a:	2b01      	cmp	r3, #1
 800643c:	d101      	bne.n	8006442 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800643e:	2302      	movs	r3, #2
 8006440:	e033      	b.n	80064aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2224      	movs	r2, #36	; 0x24
 800644e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 0201 	bic.w	r2, r2, #1
 8006460:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006470:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	021b      	lsls	r3, r3, #8
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	4313      	orrs	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0201 	orr.w	r2, r2, #1
 8006492:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2220      	movs	r2, #32
 8006498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	e000      	b.n	80064aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80064a8:	2302      	movs	r3, #2
  }
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
	...

080064b8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80064b8:	b480      	push	{r7}
 80064ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064bc:	4b05      	ldr	r3, [pc, #20]	; (80064d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a04      	ldr	r2, [pc, #16]	; (80064d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80064c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064c6:	6013      	str	r3, [r2, #0]
}
 80064c8:	bf00      	nop
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	40007000 	.word	0x40007000

080064d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80064e2:	4b23      	ldr	r3, [pc, #140]	; (8006570 <HAL_PWREx_EnableOverDrive+0x98>)
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	4a22      	ldr	r2, [pc, #136]	; (8006570 <HAL_PWREx_EnableOverDrive+0x98>)
 80064e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ec:	6413      	str	r3, [r2, #64]	; 0x40
 80064ee:	4b20      	ldr	r3, [pc, #128]	; (8006570 <HAL_PWREx_EnableOverDrive+0x98>)
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80064fa:	4b1e      	ldr	r3, [pc, #120]	; (8006574 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a1d      	ldr	r2, [pc, #116]	; (8006574 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006504:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006506:	f7fd fbd9 	bl	8003cbc <HAL_GetTick>
 800650a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800650c:	e009      	b.n	8006522 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800650e:	f7fd fbd5 	bl	8003cbc <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800651c:	d901      	bls.n	8006522 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e022      	b.n	8006568 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006522:	4b14      	ldr	r3, [pc, #80]	; (8006574 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800652a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800652e:	d1ee      	bne.n	800650e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006530:	4b10      	ldr	r3, [pc, #64]	; (8006574 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a0f      	ldr	r2, [pc, #60]	; (8006574 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800653a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800653c:	f7fd fbbe 	bl	8003cbc <HAL_GetTick>
 8006540:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006542:	e009      	b.n	8006558 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006544:	f7fd fbba 	bl	8003cbc <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006552:	d901      	bls.n	8006558 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e007      	b.n	8006568 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006558:	4b06      	ldr	r3, [pc, #24]	; (8006574 <HAL_PWREx_EnableOverDrive+0x9c>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006564:	d1ee      	bne.n	8006544 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	40023800 	.word	0x40023800
 8006574:	40007000 	.word	0x40007000

08006578 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006580:	2300      	movs	r3, #0
 8006582:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e29b      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 8087 	beq.w	80066aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800659c:	4b96      	ldr	r3, [pc, #600]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f003 030c 	and.w	r3, r3, #12
 80065a4:	2b04      	cmp	r3, #4
 80065a6:	d00c      	beq.n	80065c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065a8:	4b93      	ldr	r3, [pc, #588]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f003 030c 	and.w	r3, r3, #12
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d112      	bne.n	80065da <HAL_RCC_OscConfig+0x62>
 80065b4:	4b90      	ldr	r3, [pc, #576]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065c0:	d10b      	bne.n	80065da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065c2:	4b8d      	ldr	r3, [pc, #564]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d06c      	beq.n	80066a8 <HAL_RCC_OscConfig+0x130>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d168      	bne.n	80066a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e275      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e2:	d106      	bne.n	80065f2 <HAL_RCC_OscConfig+0x7a>
 80065e4:	4b84      	ldr	r3, [pc, #528]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a83      	ldr	r2, [pc, #524]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80065ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ee:	6013      	str	r3, [r2, #0]
 80065f0:	e02e      	b.n	8006650 <HAL_RCC_OscConfig+0xd8>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10c      	bne.n	8006614 <HAL_RCC_OscConfig+0x9c>
 80065fa:	4b7f      	ldr	r3, [pc, #508]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a7e      	ldr	r2, [pc, #504]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	4b7c      	ldr	r3, [pc, #496]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a7b      	ldr	r2, [pc, #492]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 800660c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006610:	6013      	str	r3, [r2, #0]
 8006612:	e01d      	b.n	8006650 <HAL_RCC_OscConfig+0xd8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800661c:	d10c      	bne.n	8006638 <HAL_RCC_OscConfig+0xc0>
 800661e:	4b76      	ldr	r3, [pc, #472]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a75      	ldr	r2, [pc, #468]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	4b73      	ldr	r3, [pc, #460]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a72      	ldr	r2, [pc, #456]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	e00b      	b.n	8006650 <HAL_RCC_OscConfig+0xd8>
 8006638:	4b6f      	ldr	r3, [pc, #444]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a6e      	ldr	r2, [pc, #440]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 800663e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006642:	6013      	str	r3, [r2, #0]
 8006644:	4b6c      	ldr	r3, [pc, #432]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a6b      	ldr	r2, [pc, #428]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 800664a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800664e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d013      	beq.n	8006680 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006658:	f7fd fb30 	bl	8003cbc <HAL_GetTick>
 800665c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800665e:	e008      	b.n	8006672 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006660:	f7fd fb2c 	bl	8003cbc <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b64      	cmp	r3, #100	; 0x64
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e229      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006672:	4b61      	ldr	r3, [pc, #388]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0f0      	beq.n	8006660 <HAL_RCC_OscConfig+0xe8>
 800667e:	e014      	b.n	80066aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006680:	f7fd fb1c 	bl	8003cbc <HAL_GetTick>
 8006684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006686:	e008      	b.n	800669a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006688:	f7fd fb18 	bl	8003cbc <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	2b64      	cmp	r3, #100	; 0x64
 8006694:	d901      	bls.n	800669a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e215      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800669a:	4b57      	ldr	r3, [pc, #348]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1f0      	bne.n	8006688 <HAL_RCC_OscConfig+0x110>
 80066a6:	e000      	b.n	80066aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d069      	beq.n	800678a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066b6:	4b50      	ldr	r3, [pc, #320]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 030c 	and.w	r3, r3, #12
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00b      	beq.n	80066da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066c2:	4b4d      	ldr	r3, [pc, #308]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f003 030c 	and.w	r3, r3, #12
 80066ca:	2b08      	cmp	r3, #8
 80066cc:	d11c      	bne.n	8006708 <HAL_RCC_OscConfig+0x190>
 80066ce:	4b4a      	ldr	r3, [pc, #296]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d116      	bne.n	8006708 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066da:	4b47      	ldr	r3, [pc, #284]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d005      	beq.n	80066f2 <HAL_RCC_OscConfig+0x17a>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d001      	beq.n	80066f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e1e9      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066f2:	4b41      	ldr	r3, [pc, #260]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	00db      	lsls	r3, r3, #3
 8006700:	493d      	ldr	r1, [pc, #244]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006702:	4313      	orrs	r3, r2
 8006704:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006706:	e040      	b.n	800678a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d023      	beq.n	8006758 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006710:	4b39      	ldr	r3, [pc, #228]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a38      	ldr	r2, [pc, #224]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006716:	f043 0301 	orr.w	r3, r3, #1
 800671a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671c:	f7fd face 	bl	8003cbc <HAL_GetTick>
 8006720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006722:	e008      	b.n	8006736 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006724:	f7fd faca 	bl	8003cbc <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e1c7      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006736:	4b30      	ldr	r3, [pc, #192]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d0f0      	beq.n	8006724 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006742:	4b2d      	ldr	r3, [pc, #180]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	00db      	lsls	r3, r3, #3
 8006750:	4929      	ldr	r1, [pc, #164]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006752:	4313      	orrs	r3, r2
 8006754:	600b      	str	r3, [r1, #0]
 8006756:	e018      	b.n	800678a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006758:	4b27      	ldr	r3, [pc, #156]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a26      	ldr	r2, [pc, #152]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 800675e:	f023 0301 	bic.w	r3, r3, #1
 8006762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006764:	f7fd faaa 	bl	8003cbc <HAL_GetTick>
 8006768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800676a:	e008      	b.n	800677e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800676c:	f7fd faa6 	bl	8003cbc <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	2b02      	cmp	r3, #2
 8006778:	d901      	bls.n	800677e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e1a3      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800677e:	4b1e      	ldr	r3, [pc, #120]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1f0      	bne.n	800676c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b00      	cmp	r3, #0
 8006794:	d038      	beq.n	8006808 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d019      	beq.n	80067d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800679e:	4b16      	ldr	r3, [pc, #88]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80067a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067a2:	4a15      	ldr	r2, [pc, #84]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80067a4:	f043 0301 	orr.w	r3, r3, #1
 80067a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067aa:	f7fd fa87 	bl	8003cbc <HAL_GetTick>
 80067ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067b0:	e008      	b.n	80067c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067b2:	f7fd fa83 	bl	8003cbc <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d901      	bls.n	80067c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e180      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067c4:	4b0c      	ldr	r3, [pc, #48]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80067c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0f0      	beq.n	80067b2 <HAL_RCC_OscConfig+0x23a>
 80067d0:	e01a      	b.n	8006808 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067d2:	4b09      	ldr	r3, [pc, #36]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80067d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067d6:	4a08      	ldr	r2, [pc, #32]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80067d8:	f023 0301 	bic.w	r3, r3, #1
 80067dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067de:	f7fd fa6d 	bl	8003cbc <HAL_GetTick>
 80067e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067e4:	e00a      	b.n	80067fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067e6:	f7fd fa69 	bl	8003cbc <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d903      	bls.n	80067fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e166      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
 80067f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067fc:	4b92      	ldr	r3, [pc, #584]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80067fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1ee      	bne.n	80067e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 80a4 	beq.w	800695e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006816:	4b8c      	ldr	r3, [pc, #560]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10d      	bne.n	800683e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006822:	4b89      	ldr	r3, [pc, #548]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	4a88      	ldr	r2, [pc, #544]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800682c:	6413      	str	r3, [r2, #64]	; 0x40
 800682e:	4b86      	ldr	r3, [pc, #536]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006836:	60bb      	str	r3, [r7, #8]
 8006838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800683a:	2301      	movs	r3, #1
 800683c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800683e:	4b83      	ldr	r3, [pc, #524]	; (8006a4c <HAL_RCC_OscConfig+0x4d4>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006846:	2b00      	cmp	r3, #0
 8006848:	d118      	bne.n	800687c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800684a:	4b80      	ldr	r3, [pc, #512]	; (8006a4c <HAL_RCC_OscConfig+0x4d4>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a7f      	ldr	r2, [pc, #508]	; (8006a4c <HAL_RCC_OscConfig+0x4d4>)
 8006850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006856:	f7fd fa31 	bl	8003cbc <HAL_GetTick>
 800685a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800685c:	e008      	b.n	8006870 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800685e:	f7fd fa2d 	bl	8003cbc <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b64      	cmp	r3, #100	; 0x64
 800686a:	d901      	bls.n	8006870 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e12a      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006870:	4b76      	ldr	r3, [pc, #472]	; (8006a4c <HAL_RCC_OscConfig+0x4d4>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0f0      	beq.n	800685e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d106      	bne.n	8006892 <HAL_RCC_OscConfig+0x31a>
 8006884:	4b70      	ldr	r3, [pc, #448]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006888:	4a6f      	ldr	r2, [pc, #444]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 800688a:	f043 0301 	orr.w	r3, r3, #1
 800688e:	6713      	str	r3, [r2, #112]	; 0x70
 8006890:	e02d      	b.n	80068ee <HAL_RCC_OscConfig+0x376>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10c      	bne.n	80068b4 <HAL_RCC_OscConfig+0x33c>
 800689a:	4b6b      	ldr	r3, [pc, #428]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 800689c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689e:	4a6a      	ldr	r2, [pc, #424]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80068a0:	f023 0301 	bic.w	r3, r3, #1
 80068a4:	6713      	str	r3, [r2, #112]	; 0x70
 80068a6:	4b68      	ldr	r3, [pc, #416]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80068a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068aa:	4a67      	ldr	r2, [pc, #412]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80068ac:	f023 0304 	bic.w	r3, r3, #4
 80068b0:	6713      	str	r3, [r2, #112]	; 0x70
 80068b2:	e01c      	b.n	80068ee <HAL_RCC_OscConfig+0x376>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	2b05      	cmp	r3, #5
 80068ba:	d10c      	bne.n	80068d6 <HAL_RCC_OscConfig+0x35e>
 80068bc:	4b62      	ldr	r3, [pc, #392]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80068be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c0:	4a61      	ldr	r2, [pc, #388]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80068c2:	f043 0304 	orr.w	r3, r3, #4
 80068c6:	6713      	str	r3, [r2, #112]	; 0x70
 80068c8:	4b5f      	ldr	r3, [pc, #380]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80068ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068cc:	4a5e      	ldr	r2, [pc, #376]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80068ce:	f043 0301 	orr.w	r3, r3, #1
 80068d2:	6713      	str	r3, [r2, #112]	; 0x70
 80068d4:	e00b      	b.n	80068ee <HAL_RCC_OscConfig+0x376>
 80068d6:	4b5c      	ldr	r3, [pc, #368]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80068d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068da:	4a5b      	ldr	r2, [pc, #364]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80068dc:	f023 0301 	bic.w	r3, r3, #1
 80068e0:	6713      	str	r3, [r2, #112]	; 0x70
 80068e2:	4b59      	ldr	r3, [pc, #356]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80068e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e6:	4a58      	ldr	r2, [pc, #352]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80068e8:	f023 0304 	bic.w	r3, r3, #4
 80068ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d015      	beq.n	8006922 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f6:	f7fd f9e1 	bl	8003cbc <HAL_GetTick>
 80068fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068fc:	e00a      	b.n	8006914 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068fe:	f7fd f9dd 	bl	8003cbc <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	f241 3288 	movw	r2, #5000	; 0x1388
 800690c:	4293      	cmp	r3, r2
 800690e:	d901      	bls.n	8006914 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e0d8      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006914:	4b4c      	ldr	r3, [pc, #304]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d0ee      	beq.n	80068fe <HAL_RCC_OscConfig+0x386>
 8006920:	e014      	b.n	800694c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006922:	f7fd f9cb 	bl	8003cbc <HAL_GetTick>
 8006926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006928:	e00a      	b.n	8006940 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800692a:	f7fd f9c7 	bl	8003cbc <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	f241 3288 	movw	r2, #5000	; 0x1388
 8006938:	4293      	cmp	r3, r2
 800693a:	d901      	bls.n	8006940 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e0c2      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006940:	4b41      	ldr	r3, [pc, #260]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1ee      	bne.n	800692a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800694c:	7dfb      	ldrb	r3, [r7, #23]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d105      	bne.n	800695e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006952:	4b3d      	ldr	r3, [pc, #244]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	4a3c      	ldr	r2, [pc, #240]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800695c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 80ae 	beq.w	8006ac4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006968:	4b37      	ldr	r3, [pc, #220]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f003 030c 	and.w	r3, r3, #12
 8006970:	2b08      	cmp	r3, #8
 8006972:	d06d      	beq.n	8006a50 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	2b02      	cmp	r3, #2
 800697a:	d14b      	bne.n	8006a14 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800697c:	4b32      	ldr	r3, [pc, #200]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a31      	ldr	r2, [pc, #196]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006988:	f7fd f998 	bl	8003cbc <HAL_GetTick>
 800698c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800698e:	e008      	b.n	80069a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006990:	f7fd f994 	bl	8003cbc <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	2b02      	cmp	r3, #2
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e091      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069a2:	4b29      	ldr	r3, [pc, #164]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1f0      	bne.n	8006990 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	69da      	ldr	r2, [r3, #28]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	431a      	orrs	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069bc:	019b      	lsls	r3, r3, #6
 80069be:	431a      	orrs	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c4:	085b      	lsrs	r3, r3, #1
 80069c6:	3b01      	subs	r3, #1
 80069c8:	041b      	lsls	r3, r3, #16
 80069ca:	431a      	orrs	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d0:	061b      	lsls	r3, r3, #24
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d8:	071b      	lsls	r3, r3, #28
 80069da:	491b      	ldr	r1, [pc, #108]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069e0:	4b19      	ldr	r3, [pc, #100]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a18      	ldr	r2, [pc, #96]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80069e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ec:	f7fd f966 	bl	8003cbc <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069f2:	e008      	b.n	8006a06 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069f4:	f7fd f962 	bl	8003cbc <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e05f      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a06:	4b10      	ldr	r3, [pc, #64]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0f0      	beq.n	80069f4 <HAL_RCC_OscConfig+0x47c>
 8006a12:	e057      	b.n	8006ac4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a14:	4b0c      	ldr	r3, [pc, #48]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a0b      	ldr	r2, [pc, #44]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a20:	f7fd f94c 	bl	8003cbc <HAL_GetTick>
 8006a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a26:	e008      	b.n	8006a3a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a28:	f7fd f948 	bl	8003cbc <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d901      	bls.n	8006a3a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e045      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a3a:	4b03      	ldr	r3, [pc, #12]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1f0      	bne.n	8006a28 <HAL_RCC_OscConfig+0x4b0>
 8006a46:	e03d      	b.n	8006ac4 <HAL_RCC_OscConfig+0x54c>
 8006a48:	40023800 	.word	0x40023800
 8006a4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006a50:	4b1f      	ldr	r3, [pc, #124]	; (8006ad0 <HAL_RCC_OscConfig+0x558>)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d030      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d129      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d122      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a80:	4013      	ands	r3, r2
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a86:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d119      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a96:	085b      	lsrs	r3, r3, #1
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d10f      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aaa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d107      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d001      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e000      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3718      	adds	r7, #24
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	40023800 	.word	0x40023800

08006ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e0d0      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006aec:	4b6a      	ldr	r3, [pc, #424]	; (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 030f 	and.w	r3, r3, #15
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d910      	bls.n	8006b1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006afa:	4b67      	ldr	r3, [pc, #412]	; (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f023 020f 	bic.w	r2, r3, #15
 8006b02:	4965      	ldr	r1, [pc, #404]	; (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b0a:	4b63      	ldr	r3, [pc, #396]	; (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 030f 	and.w	r3, r3, #15
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d001      	beq.n	8006b1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e0b8      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d020      	beq.n	8006b6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0304 	and.w	r3, r3, #4
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b34:	4b59      	ldr	r3, [pc, #356]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	4a58      	ldr	r2, [pc, #352]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0308 	and.w	r3, r3, #8
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d005      	beq.n	8006b58 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b4c:	4b53      	ldr	r3, [pc, #332]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	4a52      	ldr	r2, [pc, #328]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b58:	4b50      	ldr	r3, [pc, #320]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	494d      	ldr	r1, [pc, #308]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d040      	beq.n	8006bf8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d107      	bne.n	8006b8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b7e:	4b47      	ldr	r3, [pc, #284]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d115      	bne.n	8006bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e07f      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d107      	bne.n	8006ba6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b96:	4b41      	ldr	r3, [pc, #260]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d109      	bne.n	8006bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e073      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ba6:	4b3d      	ldr	r3, [pc, #244]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0302 	and.w	r3, r3, #2
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e06b      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bb6:	4b39      	ldr	r3, [pc, #228]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f023 0203 	bic.w	r2, r3, #3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	4936      	ldr	r1, [pc, #216]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc8:	f7fd f878 	bl	8003cbc <HAL_GetTick>
 8006bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bce:	e00a      	b.n	8006be6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bd0:	f7fd f874 	bl	8003cbc <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d901      	bls.n	8006be6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e053      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006be6:	4b2d      	ldr	r3, [pc, #180]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 020c 	and.w	r2, r3, #12
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d1eb      	bne.n	8006bd0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bf8:	4b27      	ldr	r3, [pc, #156]	; (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 030f 	and.w	r3, r3, #15
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d210      	bcs.n	8006c28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c06:	4b24      	ldr	r3, [pc, #144]	; (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f023 020f 	bic.w	r2, r3, #15
 8006c0e:	4922      	ldr	r1, [pc, #136]	; (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c16:	4b20      	ldr	r3, [pc, #128]	; (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 030f 	and.w	r3, r3, #15
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d001      	beq.n	8006c28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e032      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0304 	and.w	r3, r3, #4
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d008      	beq.n	8006c46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c34:	4b19      	ldr	r3, [pc, #100]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	4916      	ldr	r1, [pc, #88]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0308 	and.w	r3, r3, #8
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d009      	beq.n	8006c66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c52:	4b12      	ldr	r3, [pc, #72]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	490e      	ldr	r1, [pc, #56]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c66:	f000 f821 	bl	8006cac <HAL_RCC_GetSysClockFreq>
 8006c6a:	4601      	mov	r1, r0
 8006c6c:	4b0b      	ldr	r3, [pc, #44]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	091b      	lsrs	r3, r3, #4
 8006c72:	f003 030f 	and.w	r3, r3, #15
 8006c76:	4a0a      	ldr	r2, [pc, #40]	; (8006ca0 <HAL_RCC_ClockConfig+0x1cc>)
 8006c78:	5cd3      	ldrb	r3, [r2, r3]
 8006c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8006c7e:	4a09      	ldr	r2, [pc, #36]	; (8006ca4 <HAL_RCC_ClockConfig+0x1d0>)
 8006c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c82:	4b09      	ldr	r3, [pc, #36]	; (8006ca8 <HAL_RCC_ClockConfig+0x1d4>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fc feb2 	bl	80039f0 <HAL_InitTick>

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	40023c00 	.word	0x40023c00
 8006c9c:	40023800 	.word	0x40023800
 8006ca0:	080245d0 	.word	0x080245d0
 8006ca4:	20000000 	.word	0x20000000
 8006ca8:	20000004 	.word	0x20000004

08006cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	607b      	str	r3, [r7, #4]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60fb      	str	r3, [r7, #12]
 8006cba:	2300      	movs	r3, #0
 8006cbc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cc2:	4b63      	ldr	r3, [pc, #396]	; (8006e50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f003 030c 	and.w	r3, r3, #12
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	d007      	beq.n	8006cde <HAL_RCC_GetSysClockFreq+0x32>
 8006cce:	2b08      	cmp	r3, #8
 8006cd0:	d008      	beq.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x38>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f040 80b4 	bne.w	8006e40 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006cd8:	4b5e      	ldr	r3, [pc, #376]	; (8006e54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006cda:	60bb      	str	r3, [r7, #8]
      break;
 8006cdc:	e0b3      	b.n	8006e46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006cde:	4b5e      	ldr	r3, [pc, #376]	; (8006e58 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006ce0:	60bb      	str	r3, [r7, #8]
      break;
 8006ce2:	e0b0      	b.n	8006e46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ce4:	4b5a      	ldr	r3, [pc, #360]	; (8006e50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cec:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006cee:	4b58      	ldr	r3, [pc, #352]	; (8006e50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d04a      	beq.n	8006d90 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cfa:	4b55      	ldr	r3, [pc, #340]	; (8006e50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	099b      	lsrs	r3, r3, #6
 8006d00:	f04f 0400 	mov.w	r4, #0
 8006d04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006d08:	f04f 0200 	mov.w	r2, #0
 8006d0c:	ea03 0501 	and.w	r5, r3, r1
 8006d10:	ea04 0602 	and.w	r6, r4, r2
 8006d14:	4629      	mov	r1, r5
 8006d16:	4632      	mov	r2, r6
 8006d18:	f04f 0300 	mov.w	r3, #0
 8006d1c:	f04f 0400 	mov.w	r4, #0
 8006d20:	0154      	lsls	r4, r2, #5
 8006d22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006d26:	014b      	lsls	r3, r1, #5
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4622      	mov	r2, r4
 8006d2c:	1b49      	subs	r1, r1, r5
 8006d2e:	eb62 0206 	sbc.w	r2, r2, r6
 8006d32:	f04f 0300 	mov.w	r3, #0
 8006d36:	f04f 0400 	mov.w	r4, #0
 8006d3a:	0194      	lsls	r4, r2, #6
 8006d3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006d40:	018b      	lsls	r3, r1, #6
 8006d42:	1a5b      	subs	r3, r3, r1
 8006d44:	eb64 0402 	sbc.w	r4, r4, r2
 8006d48:	f04f 0100 	mov.w	r1, #0
 8006d4c:	f04f 0200 	mov.w	r2, #0
 8006d50:	00e2      	lsls	r2, r4, #3
 8006d52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006d56:	00d9      	lsls	r1, r3, #3
 8006d58:	460b      	mov	r3, r1
 8006d5a:	4614      	mov	r4, r2
 8006d5c:	195b      	adds	r3, r3, r5
 8006d5e:	eb44 0406 	adc.w	r4, r4, r6
 8006d62:	f04f 0100 	mov.w	r1, #0
 8006d66:	f04f 0200 	mov.w	r2, #0
 8006d6a:	0262      	lsls	r2, r4, #9
 8006d6c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006d70:	0259      	lsls	r1, r3, #9
 8006d72:	460b      	mov	r3, r1
 8006d74:	4614      	mov	r4, r2
 8006d76:	4618      	mov	r0, r3
 8006d78:	4621      	mov	r1, r4
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f04f 0400 	mov.w	r4, #0
 8006d80:	461a      	mov	r2, r3
 8006d82:	4623      	mov	r3, r4
 8006d84:	f7f9 fab4 	bl	80002f0 <__aeabi_uldivmod>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	e049      	b.n	8006e24 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d90:	4b2f      	ldr	r3, [pc, #188]	; (8006e50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	099b      	lsrs	r3, r3, #6
 8006d96:	f04f 0400 	mov.w	r4, #0
 8006d9a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006d9e:	f04f 0200 	mov.w	r2, #0
 8006da2:	ea03 0501 	and.w	r5, r3, r1
 8006da6:	ea04 0602 	and.w	r6, r4, r2
 8006daa:	4629      	mov	r1, r5
 8006dac:	4632      	mov	r2, r6
 8006dae:	f04f 0300 	mov.w	r3, #0
 8006db2:	f04f 0400 	mov.w	r4, #0
 8006db6:	0154      	lsls	r4, r2, #5
 8006db8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006dbc:	014b      	lsls	r3, r1, #5
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	4622      	mov	r2, r4
 8006dc2:	1b49      	subs	r1, r1, r5
 8006dc4:	eb62 0206 	sbc.w	r2, r2, r6
 8006dc8:	f04f 0300 	mov.w	r3, #0
 8006dcc:	f04f 0400 	mov.w	r4, #0
 8006dd0:	0194      	lsls	r4, r2, #6
 8006dd2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006dd6:	018b      	lsls	r3, r1, #6
 8006dd8:	1a5b      	subs	r3, r3, r1
 8006dda:	eb64 0402 	sbc.w	r4, r4, r2
 8006dde:	f04f 0100 	mov.w	r1, #0
 8006de2:	f04f 0200 	mov.w	r2, #0
 8006de6:	00e2      	lsls	r2, r4, #3
 8006de8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006dec:	00d9      	lsls	r1, r3, #3
 8006dee:	460b      	mov	r3, r1
 8006df0:	4614      	mov	r4, r2
 8006df2:	195b      	adds	r3, r3, r5
 8006df4:	eb44 0406 	adc.w	r4, r4, r6
 8006df8:	f04f 0100 	mov.w	r1, #0
 8006dfc:	f04f 0200 	mov.w	r2, #0
 8006e00:	02a2      	lsls	r2, r4, #10
 8006e02:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006e06:	0299      	lsls	r1, r3, #10
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4614      	mov	r4, r2
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	4621      	mov	r1, r4
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f04f 0400 	mov.w	r4, #0
 8006e16:	461a      	mov	r2, r3
 8006e18:	4623      	mov	r3, r4
 8006e1a:	f7f9 fa69 	bl	80002f0 <__aeabi_uldivmod>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	460c      	mov	r4, r1
 8006e22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006e24:	4b0a      	ldr	r3, [pc, #40]	; (8006e50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	0c1b      	lsrs	r3, r3, #16
 8006e2a:	f003 0303 	and.w	r3, r3, #3
 8006e2e:	3301      	adds	r3, #1
 8006e30:	005b      	lsls	r3, r3, #1
 8006e32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e3c:	60bb      	str	r3, [r7, #8]
      break;
 8006e3e:	e002      	b.n	8006e46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e40:	4b04      	ldr	r3, [pc, #16]	; (8006e54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006e42:	60bb      	str	r3, [r7, #8]
      break;
 8006e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e46:	68bb      	ldr	r3, [r7, #8]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e50:	40023800 	.word	0x40023800
 8006e54:	00f42400 	.word	0x00f42400
 8006e58:	007a1200 	.word	0x007a1200

08006e5c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e60:	4b03      	ldr	r3, [pc, #12]	; (8006e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e62:	681b      	ldr	r3, [r3, #0]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	20000000 	.word	0x20000000

08006e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e78:	f7ff fff0 	bl	8006e5c <HAL_RCC_GetHCLKFreq>
 8006e7c:	4601      	mov	r1, r0
 8006e7e:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	0a9b      	lsrs	r3, r3, #10
 8006e84:	f003 0307 	and.w	r3, r3, #7
 8006e88:	4a03      	ldr	r2, [pc, #12]	; (8006e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e8a:	5cd3      	ldrb	r3, [r2, r3]
 8006e8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	40023800 	.word	0x40023800
 8006e98:	080245e0 	.word	0x080245e0

08006e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ea0:	f7ff ffdc 	bl	8006e5c <HAL_RCC_GetHCLKFreq>
 8006ea4:	4601      	mov	r1, r0
 8006ea6:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	0b5b      	lsrs	r3, r3, #13
 8006eac:	f003 0307 	and.w	r3, r3, #7
 8006eb0:	4a03      	ldr	r2, [pc, #12]	; (8006ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006eb2:	5cd3      	ldrb	r3, [r2, r3]
 8006eb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	40023800 	.word	0x40023800
 8006ec0:	080245e0 	.word	0x080245e0

08006ec4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	220f      	movs	r2, #15
 8006ed2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ed4:	4b12      	ldr	r3, [pc, #72]	; (8006f20 <HAL_RCC_GetClockConfig+0x5c>)
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f003 0203 	and.w	r2, r3, #3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006ee0:	4b0f      	ldr	r3, [pc, #60]	; (8006f20 <HAL_RCC_GetClockConfig+0x5c>)
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006eec:	4b0c      	ldr	r3, [pc, #48]	; (8006f20 <HAL_RCC_GetClockConfig+0x5c>)
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006ef8:	4b09      	ldr	r3, [pc, #36]	; (8006f20 <HAL_RCC_GetClockConfig+0x5c>)
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	08db      	lsrs	r3, r3, #3
 8006efe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f06:	4b07      	ldr	r3, [pc, #28]	; (8006f24 <HAL_RCC_GetClockConfig+0x60>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 020f 	and.w	r2, r3, #15
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	601a      	str	r2, [r3, #0]
}
 8006f12:	bf00      	nop
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	40023800 	.word	0x40023800
 8006f24:	40023c00 	.word	0x40023c00

08006f28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b088      	sub	sp, #32
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006f30:	2300      	movs	r3, #0
 8006f32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006f34:	2300      	movs	r3, #0
 8006f36:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006f40:	2300      	movs	r3, #0
 8006f42:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d012      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f50:	4b69      	ldr	r3, [pc, #420]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	4a68      	ldr	r2, [pc, #416]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006f5a:	6093      	str	r3, [r2, #8]
 8006f5c:	4b66      	ldr	r3, [pc, #408]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f64:	4964      	ldr	r1, [pc, #400]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006f72:	2301      	movs	r3, #1
 8006f74:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d017      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f82:	4b5d      	ldr	r3, [pc, #372]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f90:	4959      	ldr	r1, [pc, #356]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fa0:	d101      	bne.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d017      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006fbe:	4b4e      	ldr	r3, [pc, #312]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fcc:	494a      	ldr	r1, [pc, #296]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fdc:	d101      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006fea:	2301      	movs	r3, #1
 8006fec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0320 	and.w	r3, r3, #32
 8007006:	2b00      	cmp	r3, #0
 8007008:	f000 808b 	beq.w	8007122 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800700c:	4b3a      	ldr	r3, [pc, #232]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800700e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007010:	4a39      	ldr	r2, [pc, #228]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007016:	6413      	str	r3, [r2, #64]	; 0x40
 8007018:	4b37      	ldr	r3, [pc, #220]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800701a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007020:	60bb      	str	r3, [r7, #8]
 8007022:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007024:	4b35      	ldr	r3, [pc, #212]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a34      	ldr	r2, [pc, #208]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800702a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800702e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007030:	f7fc fe44 	bl	8003cbc <HAL_GetTick>
 8007034:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007036:	e008      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007038:	f7fc fe40 	bl	8003cbc <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	2b64      	cmp	r3, #100	; 0x64
 8007044:	d901      	bls.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	e38d      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800704a:	4b2c      	ldr	r3, [pc, #176]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007052:	2b00      	cmp	r3, #0
 8007054:	d0f0      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007056:	4b28      	ldr	r3, [pc, #160]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800705e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d035      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	429a      	cmp	r2, r3
 8007072:	d02e      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007074:	4b20      	ldr	r3, [pc, #128]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800707c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800707e:	4b1e      	ldr	r3, [pc, #120]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007082:	4a1d      	ldr	r2, [pc, #116]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007088:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800708a:	4b1b      	ldr	r3, [pc, #108]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800708c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708e:	4a1a      	ldr	r2, [pc, #104]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007094:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007096:	4a18      	ldr	r2, [pc, #96]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800709c:	4b16      	ldr	r3, [pc, #88]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800709e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d114      	bne.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a8:	f7fc fe08 	bl	8003cbc <HAL_GetTick>
 80070ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070ae:	e00a      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070b0:	f7fc fe04 	bl	8003cbc <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80070be:	4293      	cmp	r3, r2
 80070c0:	d901      	bls.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e34f      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070c6:	4b0c      	ldr	r3, [pc, #48]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ca:	f003 0302 	and.w	r3, r3, #2
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d0ee      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070de:	d111      	bne.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80070e0:	4b05      	ldr	r3, [pc, #20]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80070ec:	4b04      	ldr	r3, [pc, #16]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80070ee:	400b      	ands	r3, r1
 80070f0:	4901      	ldr	r1, [pc, #4]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	608b      	str	r3, [r1, #8]
 80070f6:	e00b      	b.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80070f8:	40023800 	.word	0x40023800
 80070fc:	40007000 	.word	0x40007000
 8007100:	0ffffcff 	.word	0x0ffffcff
 8007104:	4bb3      	ldr	r3, [pc, #716]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	4ab2      	ldr	r2, [pc, #712]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800710a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800710e:	6093      	str	r3, [r2, #8]
 8007110:	4bb0      	ldr	r3, [pc, #704]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007112:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800711c:	49ad      	ldr	r1, [pc, #692]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800711e:	4313      	orrs	r3, r2
 8007120:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0310 	and.w	r3, r3, #16
 800712a:	2b00      	cmp	r3, #0
 800712c:	d010      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800712e:	4ba9      	ldr	r3, [pc, #676]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007134:	4aa7      	ldr	r2, [pc, #668]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007136:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800713a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800713e:	4ba5      	ldr	r3, [pc, #660]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007140:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007148:	49a2      	ldr	r1, [pc, #648]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800714a:	4313      	orrs	r3, r2
 800714c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00a      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800715c:	4b9d      	ldr	r3, [pc, #628]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800715e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007162:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800716a:	499a      	ldr	r1, [pc, #616]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800716c:	4313      	orrs	r3, r2
 800716e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00a      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800717e:	4b95      	ldr	r3, [pc, #596]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007184:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800718c:	4991      	ldr	r1, [pc, #580]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800718e:	4313      	orrs	r3, r2
 8007190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00a      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071a0:	4b8c      	ldr	r3, [pc, #560]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071ae:	4989      	ldr	r1, [pc, #548]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00a      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80071c2:	4b84      	ldr	r3, [pc, #528]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d0:	4980      	ldr	r1, [pc, #512]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00a      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071e4:	4b7b      	ldr	r3, [pc, #492]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ea:	f023 0203 	bic.w	r2, r3, #3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f2:	4978      	ldr	r1, [pc, #480]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00a      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007206:	4b73      	ldr	r3, [pc, #460]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800720c:	f023 020c 	bic.w	r2, r3, #12
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007214:	496f      	ldr	r1, [pc, #444]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007216:	4313      	orrs	r3, r2
 8007218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00a      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007228:	4b6a      	ldr	r3, [pc, #424]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800722a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800722e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007236:	4967      	ldr	r1, [pc, #412]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007238:	4313      	orrs	r3, r2
 800723a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00a      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800724a:	4b62      	ldr	r3, [pc, #392]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800724c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007250:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007258:	495e      	ldr	r1, [pc, #376]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800725a:	4313      	orrs	r3, r2
 800725c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00a      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800726c:	4b59      	ldr	r3, [pc, #356]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800726e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007272:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800727a:	4956      	ldr	r1, [pc, #344]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800727c:	4313      	orrs	r3, r2
 800727e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00a      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800728e:	4b51      	ldr	r3, [pc, #324]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007294:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800729c:	494d      	ldr	r1, [pc, #308]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00a      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80072b0:	4b48      	ldr	r3, [pc, #288]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072be:	4945      	ldr	r1, [pc, #276]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00a      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80072d2:	4b40      	ldr	r3, [pc, #256]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072e0:	493c      	ldr	r1, [pc, #240]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00a      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80072f4:	4b37      	ldr	r3, [pc, #220]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007302:	4934      	ldr	r1, [pc, #208]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007304:	4313      	orrs	r3, r2
 8007306:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d011      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007316:	4b2f      	ldr	r3, [pc, #188]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800731c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007324:	492b      	ldr	r1, [pc, #172]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007326:	4313      	orrs	r3, r2
 8007328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007330:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007334:	d101      	bne.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007336:	2301      	movs	r3, #1
 8007338:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0308 	and.w	r3, r3, #8
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007346:	2301      	movs	r3, #1
 8007348:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00a      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007356:	4b1f      	ldr	r3, [pc, #124]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800735c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007364:	491b      	ldr	r1, [pc, #108]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007366:	4313      	orrs	r3, r2
 8007368:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00b      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007378:	4b16      	ldr	r3, [pc, #88]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800737a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800737e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007388:	4912      	ldr	r1, [pc, #72]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800738a:	4313      	orrs	r3, r2
 800738c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00b      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800739c:	4b0d      	ldr	r3, [pc, #52]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800739e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073ac:	4909      	ldr	r1, [pc, #36]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80073ae:	4313      	orrs	r3, r2
 80073b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00f      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80073c0:	4b04      	ldr	r3, [pc, #16]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80073c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073d0:	e002      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80073d2:	bf00      	nop
 80073d4:	40023800 	.word	0x40023800
 80073d8:	4985      	ldr	r1, [pc, #532]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00b      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80073ec:	4b80      	ldr	r3, [pc, #512]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073fc:	497c      	ldr	r1, [pc, #496]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	2b01      	cmp	r3, #1
 8007408:	d005      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007412:	f040 80d6 	bne.w	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007416:	4b76      	ldr	r3, [pc, #472]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a75      	ldr	r2, [pc, #468]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800741c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007422:	f7fc fc4b 	bl	8003cbc <HAL_GetTick>
 8007426:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007428:	e008      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800742a:	f7fc fc47 	bl	8003cbc <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	2b64      	cmp	r3, #100	; 0x64
 8007436:	d901      	bls.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e194      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800743c:	4b6c      	ldr	r3, [pc, #432]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1f0      	bne.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b00      	cmp	r3, #0
 8007452:	d021      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007458:	2b00      	cmp	r3, #0
 800745a:	d11d      	bne.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800745c:	4b64      	ldr	r3, [pc, #400]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800745e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007462:	0c1b      	lsrs	r3, r3, #16
 8007464:	f003 0303 	and.w	r3, r3, #3
 8007468:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800746a:	4b61      	ldr	r3, [pc, #388]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800746c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007470:	0e1b      	lsrs	r3, r3, #24
 8007472:	f003 030f 	and.w	r3, r3, #15
 8007476:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	019a      	lsls	r2, r3, #6
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	041b      	lsls	r3, r3, #16
 8007482:	431a      	orrs	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	061b      	lsls	r3, r3, #24
 8007488:	431a      	orrs	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	071b      	lsls	r3, r3, #28
 8007490:	4957      	ldr	r1, [pc, #348]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007492:	4313      	orrs	r3, r2
 8007494:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d004      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x586>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ac:	d00a      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d02e      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074c2:	d129      	bne.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80074c4:	4b4a      	ldr	r3, [pc, #296]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80074c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074ca:	0c1b      	lsrs	r3, r3, #16
 80074cc:	f003 0303 	and.w	r3, r3, #3
 80074d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80074d2:	4b47      	ldr	r3, [pc, #284]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80074d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074d8:	0f1b      	lsrs	r3, r3, #28
 80074da:	f003 0307 	and.w	r3, r3, #7
 80074de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	019a      	lsls	r2, r3, #6
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	041b      	lsls	r3, r3, #16
 80074ea:	431a      	orrs	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	061b      	lsls	r3, r3, #24
 80074f2:	431a      	orrs	r2, r3
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	071b      	lsls	r3, r3, #28
 80074f8:	493d      	ldr	r1, [pc, #244]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80074fa:	4313      	orrs	r3, r2
 80074fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007500:	4b3b      	ldr	r3, [pc, #236]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007506:	f023 021f 	bic.w	r2, r3, #31
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750e:	3b01      	subs	r3, #1
 8007510:	4937      	ldr	r1, [pc, #220]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007512:	4313      	orrs	r3, r2
 8007514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d01d      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007524:	4b32      	ldr	r3, [pc, #200]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800752a:	0e1b      	lsrs	r3, r3, #24
 800752c:	f003 030f 	and.w	r3, r3, #15
 8007530:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007532:	4b2f      	ldr	r3, [pc, #188]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007538:	0f1b      	lsrs	r3, r3, #28
 800753a:	f003 0307 	and.w	r3, r3, #7
 800753e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	019a      	lsls	r2, r3, #6
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	041b      	lsls	r3, r3, #16
 800754c:	431a      	orrs	r2, r3
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	061b      	lsls	r3, r3, #24
 8007552:	431a      	orrs	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	071b      	lsls	r3, r3, #28
 8007558:	4925      	ldr	r1, [pc, #148]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800755a:	4313      	orrs	r3, r2
 800755c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d011      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	019a      	lsls	r2, r3, #6
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	041b      	lsls	r3, r3, #16
 8007578:	431a      	orrs	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	061b      	lsls	r3, r3, #24
 8007580:	431a      	orrs	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	071b      	lsls	r3, r3, #28
 8007588:	4919      	ldr	r1, [pc, #100]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800758a:	4313      	orrs	r3, r2
 800758c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007590:	4b17      	ldr	r3, [pc, #92]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a16      	ldr	r2, [pc, #88]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007596:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800759a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800759c:	f7fc fb8e 	bl	8003cbc <HAL_GetTick>
 80075a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075a2:	e008      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80075a4:	f7fc fb8a 	bl	8003cbc <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	2b64      	cmp	r3, #100	; 0x64
 80075b0:	d901      	bls.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e0d7      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075b6:	4b0e      	ldr	r3, [pc, #56]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d0f0      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	f040 80cd 	bne.w	8007764 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80075ca:	4b09      	ldr	r3, [pc, #36]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a08      	ldr	r2, [pc, #32]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80075d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075d6:	f7fc fb71 	bl	8003cbc <HAL_GetTick>
 80075da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075dc:	e00a      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80075de:	f7fc fb6d 	bl	8003cbc <HAL_GetTick>
 80075e2:	4602      	mov	r2, r0
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	2b64      	cmp	r3, #100	; 0x64
 80075ea:	d903      	bls.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	e0ba      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80075f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075f4:	4b5e      	ldr	r3, [pc, #376]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007600:	d0ed      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d003      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007612:	2b00      	cmp	r3, #0
 8007614:	d009      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800761e:	2b00      	cmp	r3, #0
 8007620:	d02e      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007626:	2b00      	cmp	r3, #0
 8007628:	d12a      	bne.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800762a:	4b51      	ldr	r3, [pc, #324]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800762c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007630:	0c1b      	lsrs	r3, r3, #16
 8007632:	f003 0303 	and.w	r3, r3, #3
 8007636:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007638:	4b4d      	ldr	r3, [pc, #308]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800763a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800763e:	0f1b      	lsrs	r3, r3, #28
 8007640:	f003 0307 	and.w	r3, r3, #7
 8007644:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	019a      	lsls	r2, r3, #6
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	041b      	lsls	r3, r3, #16
 8007650:	431a      	orrs	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	061b      	lsls	r3, r3, #24
 8007658:	431a      	orrs	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	071b      	lsls	r3, r3, #28
 800765e:	4944      	ldr	r1, [pc, #272]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007660:	4313      	orrs	r3, r2
 8007662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007666:	4b42      	ldr	r3, [pc, #264]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800766c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007674:	3b01      	subs	r3, #1
 8007676:	021b      	lsls	r3, r3, #8
 8007678:	493d      	ldr	r1, [pc, #244]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800767a:	4313      	orrs	r3, r2
 800767c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d022      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007690:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007694:	d11d      	bne.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007696:	4b36      	ldr	r3, [pc, #216]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800769c:	0e1b      	lsrs	r3, r3, #24
 800769e:	f003 030f 	and.w	r3, r3, #15
 80076a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80076a4:	4b32      	ldr	r3, [pc, #200]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80076a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076aa:	0f1b      	lsrs	r3, r3, #28
 80076ac:	f003 0307 	and.w	r3, r3, #7
 80076b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	019a      	lsls	r2, r3, #6
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	041b      	lsls	r3, r3, #16
 80076be:	431a      	orrs	r2, r3
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	061b      	lsls	r3, r3, #24
 80076c4:	431a      	orrs	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	071b      	lsls	r3, r3, #28
 80076ca:	4929      	ldr	r1, [pc, #164]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0308 	and.w	r3, r3, #8
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d028      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80076de:	4b24      	ldr	r3, [pc, #144]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80076e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e4:	0e1b      	lsrs	r3, r3, #24
 80076e6:	f003 030f 	and.w	r3, r3, #15
 80076ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80076ec:	4b20      	ldr	r3, [pc, #128]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80076ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f2:	0c1b      	lsrs	r3, r3, #16
 80076f4:	f003 0303 	and.w	r3, r3, #3
 80076f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	019a      	lsls	r2, r3, #6
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	041b      	lsls	r3, r3, #16
 8007704:	431a      	orrs	r2, r3
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	061b      	lsls	r3, r3, #24
 800770a:	431a      	orrs	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	071b      	lsls	r3, r3, #28
 8007712:	4917      	ldr	r1, [pc, #92]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007714:	4313      	orrs	r3, r2
 8007716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800771a:	4b15      	ldr	r3, [pc, #84]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800771c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007720:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	4911      	ldr	r1, [pc, #68]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800772a:	4313      	orrs	r3, r2
 800772c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007730:	4b0f      	ldr	r3, [pc, #60]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a0e      	ldr	r2, [pc, #56]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800773a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800773c:	f7fc fabe 	bl	8003cbc <HAL_GetTick>
 8007740:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007742:	e008      	b.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007744:	f7fc faba 	bl	8003cbc <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	2b64      	cmp	r3, #100	; 0x64
 8007750:	d901      	bls.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e007      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007756:	4b06      	ldr	r3, [pc, #24]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800775e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007762:	d1ef      	bne.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3720      	adds	r7, #32
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	40023800 	.word	0x40023800

08007774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e01d      	b.n	80077c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	d106      	bne.n	80077a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f815 	bl	80077ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2202      	movs	r2, #2
 80077a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	3304      	adds	r3, #4
 80077b0:	4619      	mov	r1, r3
 80077b2:	4610      	mov	r0, r2
 80077b4:	f000 f986 	bl	8007ac4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b083      	sub	sp, #12
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80077d2:	bf00      	nop
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
	...

080077e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68da      	ldr	r2, [r3, #12]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f042 0201 	orr.w	r2, r2, #1
 80077f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689a      	ldr	r2, [r3, #8]
 80077fe:	4b0c      	ldr	r3, [pc, #48]	; (8007830 <HAL_TIM_Base_Start_IT+0x50>)
 8007800:	4013      	ands	r3, r2
 8007802:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b06      	cmp	r3, #6
 8007808:	d00b      	beq.n	8007822 <HAL_TIM_Base_Start_IT+0x42>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007810:	d007      	beq.n	8007822 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f042 0201 	orr.w	r2, r2, #1
 8007820:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	00010007 	.word	0x00010007

08007834 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	f003 0302 	and.w	r3, r3, #2
 8007846:	2b02      	cmp	r3, #2
 8007848:	d122      	bne.n	8007890 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f003 0302 	and.w	r3, r3, #2
 8007854:	2b02      	cmp	r3, #2
 8007856:	d11b      	bne.n	8007890 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f06f 0202 	mvn.w	r2, #2
 8007860:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2201      	movs	r2, #1
 8007866:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	f003 0303 	and.w	r3, r3, #3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d003      	beq.n	800787e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f905 	bl	8007a86 <HAL_TIM_IC_CaptureCallback>
 800787c:	e005      	b.n	800788a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f8f7 	bl	8007a72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f908 	bl	8007a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	f003 0304 	and.w	r3, r3, #4
 800789a:	2b04      	cmp	r3, #4
 800789c:	d122      	bne.n	80078e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	f003 0304 	and.w	r3, r3, #4
 80078a8:	2b04      	cmp	r3, #4
 80078aa:	d11b      	bne.n	80078e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f06f 0204 	mvn.w	r2, #4
 80078b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2202      	movs	r2, #2
 80078ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f8db 	bl	8007a86 <HAL_TIM_IC_CaptureCallback>
 80078d0:	e005      	b.n	80078de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f8cd 	bl	8007a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f8de 	bl	8007a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	f003 0308 	and.w	r3, r3, #8
 80078ee:	2b08      	cmp	r3, #8
 80078f0:	d122      	bne.n	8007938 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f003 0308 	and.w	r3, r3, #8
 80078fc:	2b08      	cmp	r3, #8
 80078fe:	d11b      	bne.n	8007938 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f06f 0208 	mvn.w	r2, #8
 8007908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2204      	movs	r2, #4
 800790e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	f003 0303 	and.w	r3, r3, #3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d003      	beq.n	8007926 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f8b1 	bl	8007a86 <HAL_TIM_IC_CaptureCallback>
 8007924:	e005      	b.n	8007932 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f8a3 	bl	8007a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f8b4 	bl	8007a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	f003 0310 	and.w	r3, r3, #16
 8007942:	2b10      	cmp	r3, #16
 8007944:	d122      	bne.n	800798c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	f003 0310 	and.w	r3, r3, #16
 8007950:	2b10      	cmp	r3, #16
 8007952:	d11b      	bne.n	800798c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f06f 0210 	mvn.w	r2, #16
 800795c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2208      	movs	r2, #8
 8007962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	69db      	ldr	r3, [r3, #28]
 800796a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800796e:	2b00      	cmp	r3, #0
 8007970:	d003      	beq.n	800797a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f887 	bl	8007a86 <HAL_TIM_IC_CaptureCallback>
 8007978:	e005      	b.n	8007986 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f879 	bl	8007a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 f88a 	bl	8007a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	2b01      	cmp	r3, #1
 8007998:	d10e      	bne.n	80079b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d107      	bne.n	80079b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f06f 0201 	mvn.w	r2, #1
 80079b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7fb fe4e 	bl	8003654 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c2:	2b80      	cmp	r3, #128	; 0x80
 80079c4:	d10e      	bne.n	80079e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d0:	2b80      	cmp	r3, #128	; 0x80
 80079d2:	d107      	bne.n	80079e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f91a 	bl	8007c18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079f2:	d10e      	bne.n	8007a12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079fe:	2b80      	cmp	r3, #128	; 0x80
 8007a00:	d107      	bne.n	8007a12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f90d 	bl	8007c2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a1c:	2b40      	cmp	r3, #64	; 0x40
 8007a1e:	d10e      	bne.n	8007a3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a2a:	2b40      	cmp	r3, #64	; 0x40
 8007a2c:	d107      	bne.n	8007a3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f838 	bl	8007aae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	f003 0320 	and.w	r3, r3, #32
 8007a48:	2b20      	cmp	r3, #32
 8007a4a:	d10e      	bne.n	8007a6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	f003 0320 	and.w	r3, r3, #32
 8007a56:	2b20      	cmp	r3, #32
 8007a58:	d107      	bne.n	8007a6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f06f 0220 	mvn.w	r2, #32
 8007a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f8cd 	bl	8007c04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a6a:	bf00      	nop
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b083      	sub	sp, #12
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a7a:	bf00      	nop
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b083      	sub	sp, #12
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a8e:	bf00      	nop
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b083      	sub	sp, #12
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007aa2:	bf00      	nop
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b083      	sub	sp, #12
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ab6:	bf00      	nop
 8007ab8:	370c      	adds	r7, #12
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
	...

08007ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a40      	ldr	r2, [pc, #256]	; (8007bd8 <TIM_Base_SetConfig+0x114>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d013      	beq.n	8007b04 <TIM_Base_SetConfig+0x40>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae2:	d00f      	beq.n	8007b04 <TIM_Base_SetConfig+0x40>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a3d      	ldr	r2, [pc, #244]	; (8007bdc <TIM_Base_SetConfig+0x118>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d00b      	beq.n	8007b04 <TIM_Base_SetConfig+0x40>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a3c      	ldr	r2, [pc, #240]	; (8007be0 <TIM_Base_SetConfig+0x11c>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d007      	beq.n	8007b04 <TIM_Base_SetConfig+0x40>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a3b      	ldr	r2, [pc, #236]	; (8007be4 <TIM_Base_SetConfig+0x120>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d003      	beq.n	8007b04 <TIM_Base_SetConfig+0x40>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a3a      	ldr	r2, [pc, #232]	; (8007be8 <TIM_Base_SetConfig+0x124>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d108      	bne.n	8007b16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a2f      	ldr	r2, [pc, #188]	; (8007bd8 <TIM_Base_SetConfig+0x114>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d02b      	beq.n	8007b76 <TIM_Base_SetConfig+0xb2>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b24:	d027      	beq.n	8007b76 <TIM_Base_SetConfig+0xb2>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a2c      	ldr	r2, [pc, #176]	; (8007bdc <TIM_Base_SetConfig+0x118>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d023      	beq.n	8007b76 <TIM_Base_SetConfig+0xb2>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a2b      	ldr	r2, [pc, #172]	; (8007be0 <TIM_Base_SetConfig+0x11c>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d01f      	beq.n	8007b76 <TIM_Base_SetConfig+0xb2>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a2a      	ldr	r2, [pc, #168]	; (8007be4 <TIM_Base_SetConfig+0x120>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d01b      	beq.n	8007b76 <TIM_Base_SetConfig+0xb2>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a29      	ldr	r2, [pc, #164]	; (8007be8 <TIM_Base_SetConfig+0x124>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d017      	beq.n	8007b76 <TIM_Base_SetConfig+0xb2>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a28      	ldr	r2, [pc, #160]	; (8007bec <TIM_Base_SetConfig+0x128>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d013      	beq.n	8007b76 <TIM_Base_SetConfig+0xb2>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a27      	ldr	r2, [pc, #156]	; (8007bf0 <TIM_Base_SetConfig+0x12c>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d00f      	beq.n	8007b76 <TIM_Base_SetConfig+0xb2>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a26      	ldr	r2, [pc, #152]	; (8007bf4 <TIM_Base_SetConfig+0x130>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d00b      	beq.n	8007b76 <TIM_Base_SetConfig+0xb2>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a25      	ldr	r2, [pc, #148]	; (8007bf8 <TIM_Base_SetConfig+0x134>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d007      	beq.n	8007b76 <TIM_Base_SetConfig+0xb2>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a24      	ldr	r2, [pc, #144]	; (8007bfc <TIM_Base_SetConfig+0x138>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d003      	beq.n	8007b76 <TIM_Base_SetConfig+0xb2>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a23      	ldr	r2, [pc, #140]	; (8007c00 <TIM_Base_SetConfig+0x13c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d108      	bne.n	8007b88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	689a      	ldr	r2, [r3, #8]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a0a      	ldr	r2, [pc, #40]	; (8007bd8 <TIM_Base_SetConfig+0x114>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d003      	beq.n	8007bbc <TIM_Base_SetConfig+0xf8>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a0c      	ldr	r2, [pc, #48]	; (8007be8 <TIM_Base_SetConfig+0x124>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d103      	bne.n	8007bc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	691a      	ldr	r2, [r3, #16]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	615a      	str	r2, [r3, #20]
}
 8007bca:	bf00      	nop
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	40010000 	.word	0x40010000
 8007bdc:	40000400 	.word	0x40000400
 8007be0:	40000800 	.word	0x40000800
 8007be4:	40000c00 	.word	0x40000c00
 8007be8:	40010400 	.word	0x40010400
 8007bec:	40014000 	.word	0x40014000
 8007bf0:	40014400 	.word	0x40014400
 8007bf4:	40014800 	.word	0x40014800
 8007bf8:	40001800 	.word	0x40001800
 8007bfc:	40001c00 	.word	0x40001c00
 8007c00:	40002000 	.word	0x40002000

08007c04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c0c:	bf00      	nop
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e040      	b.n	8007cd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d106      	bne.n	8007c68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7fb fe18 	bl	8003898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2224      	movs	r2, #36	; 0x24
 8007c6c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f022 0201 	bic.w	r2, r2, #1
 8007c7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fbec 	bl	800845c <UART_SetConfig>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d101      	bne.n	8007c8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e022      	b.n	8007cd4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d002      	beq.n	8007c9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fe8a 	bl	80089b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007caa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689a      	ldr	r2, [r3, #8]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f042 0201 	orr.w	r2, r2, #1
 8007cca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 ff11 	bl	8008af4 <UART_CheckIdleState>
 8007cd2:	4603      	mov	r3, r0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b08a      	sub	sp, #40	; 0x28
 8007ce0:	af02      	add	r7, sp, #8
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	603b      	str	r3, [r7, #0]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cf0:	2b20      	cmp	r3, #32
 8007cf2:	d17f      	bne.n	8007df4 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d002      	beq.n	8007d00 <HAL_UART_Transmit+0x24>
 8007cfa:	88fb      	ldrh	r3, [r7, #6]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d101      	bne.n	8007d04 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e078      	b.n	8007df6 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d101      	bne.n	8007d12 <HAL_UART_Transmit+0x36>
 8007d0e:	2302      	movs	r3, #2
 8007d10:	e071      	b.n	8007df6 <HAL_UART_Transmit+0x11a>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2221      	movs	r2, #33	; 0x21
 8007d24:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007d26:	f7fb ffc9 	bl	8003cbc <HAL_GetTick>
 8007d2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	88fa      	ldrh	r2, [r7, #6]
 8007d30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	88fa      	ldrh	r2, [r7, #6]
 8007d38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d44:	d108      	bne.n	8007d58 <HAL_UART_Transmit+0x7c>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d104      	bne.n	8007d58 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	61bb      	str	r3, [r7, #24]
 8007d56:	e003      	b.n	8007d60 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8007d68:	e02c      	b.n	8007dc4 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	2200      	movs	r2, #0
 8007d72:	2180      	movs	r1, #128	; 0x80
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 ff02 	bl	8008b7e <UART_WaitOnFlagUntilTimeout>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e038      	b.n	8007df6 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10b      	bne.n	8007da2 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	881b      	ldrh	r3, [r3, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	3302      	adds	r3, #2
 8007d9e:	61bb      	str	r3, [r7, #24]
 8007da0:	e007      	b.n	8007db2 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	781a      	ldrb	r2, [r3, #0]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	3301      	adds	r3, #1
 8007db0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1cc      	bne.n	8007d6a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	2140      	movs	r1, #64	; 0x40
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f000 fecf 	bl	8008b7e <UART_WaitOnFlagUntilTimeout>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e005      	b.n	8007df6 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2220      	movs	r2, #32
 8007dee:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	e000      	b.n	8007df6 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8007df4:	2302      	movs	r3, #2
  }
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3720      	adds	r7, #32
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b08a      	sub	sp, #40	; 0x28
 8007e02:	af02      	add	r7, sp, #8
 8007e04:	60f8      	str	r0, [r7, #12]
 8007e06:	60b9      	str	r1, [r7, #8]
 8007e08:	603b      	str	r3, [r7, #0]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e12:	2b20      	cmp	r3, #32
 8007e14:	f040 80ba 	bne.w	8007f8c <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d002      	beq.n	8007e24 <HAL_UART_Receive+0x26>
 8007e1e:	88fb      	ldrh	r3, [r7, #6]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d101      	bne.n	8007e28 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e0b2      	b.n	8007f8e <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d101      	bne.n	8007e36 <HAL_UART_Receive+0x38>
 8007e32:	2302      	movs	r3, #2
 8007e34:	e0ab      	b.n	8007f8e <HAL_UART_Receive+0x190>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2222      	movs	r2, #34	; 0x22
 8007e48:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007e4a:	f7fb ff37 	bl	8003cbc <HAL_GetTick>
 8007e4e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	88fa      	ldrh	r2, [r7, #6]
 8007e54:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	88fa      	ldrh	r2, [r7, #6]
 8007e5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e68:	d10e      	bne.n	8007e88 <HAL_UART_Receive+0x8a>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d105      	bne.n	8007e7e <HAL_UART_Receive+0x80>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007e78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e7c:	e02d      	b.n	8007eda <HAL_UART_Receive+0xdc>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	22ff      	movs	r2, #255	; 0xff
 8007e82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e86:	e028      	b.n	8007eda <HAL_UART_Receive+0xdc>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10d      	bne.n	8007eac <HAL_UART_Receive+0xae>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d104      	bne.n	8007ea2 <HAL_UART_Receive+0xa4>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	22ff      	movs	r2, #255	; 0xff
 8007e9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ea0:	e01b      	b.n	8007eda <HAL_UART_Receive+0xdc>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	227f      	movs	r2, #127	; 0x7f
 8007ea6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007eaa:	e016      	b.n	8007eda <HAL_UART_Receive+0xdc>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eb4:	d10d      	bne.n	8007ed2 <HAL_UART_Receive+0xd4>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d104      	bne.n	8007ec8 <HAL_UART_Receive+0xca>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	227f      	movs	r2, #127	; 0x7f
 8007ec2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ec6:	e008      	b.n	8007eda <HAL_UART_Receive+0xdc>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	223f      	movs	r2, #63	; 0x3f
 8007ecc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ed0:	e003      	b.n	8007eda <HAL_UART_Receive+0xdc>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ee0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eea:	d108      	bne.n	8007efe <HAL_UART_Receive+0x100>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d104      	bne.n	8007efe <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	61bb      	str	r3, [r7, #24]
 8007efc:	e003      	b.n	8007f06 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f02:	2300      	movs	r3, #0
 8007f04:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007f0e:	e032      	b.n	8007f76 <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	2200      	movs	r2, #0
 8007f18:	2120      	movs	r1, #32
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f000 fe2f 	bl	8008b7e <UART_WaitOnFlagUntilTimeout>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d001      	beq.n	8007f2a <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e031      	b.n	8007f8e <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10c      	bne.n	8007f4a <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	8a7b      	ldrh	r3, [r7, #18]
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	3302      	adds	r3, #2
 8007f46:	61bb      	str	r3, [r7, #24]
 8007f48:	e00c      	b.n	8007f64 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	8a7b      	ldrh	r3, [r7, #18]
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	4013      	ands	r3, r2
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	3301      	adds	r3, #1
 8007f62:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1c6      	bne.n	8007f10 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2220      	movs	r2, #32
 8007f86:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	e000      	b.n	8007f8e <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 8007f8c:	2302      	movs	r3, #2
  }
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3720      	adds	r7, #32
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
	...

08007f98 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007faa:	2b20      	cmp	r3, #32
 8007fac:	d144      	bne.n	8008038 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <HAL_UART_Transmit_IT+0x22>
 8007fb4:	88fb      	ldrh	r3, [r7, #6]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e03d      	b.n	800803a <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d101      	bne.n	8007fcc <HAL_UART_Transmit_IT+0x34>
 8007fc8:	2302      	movs	r3, #2
 8007fca:	e036      	b.n	800803a <HAL_UART_Transmit_IT+0xa2>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	88fa      	ldrh	r2, [r7, #6]
 8007fde:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	88fa      	ldrh	r2, [r7, #6]
 8007fe6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2221      	movs	r2, #33	; 0x21
 8007ffa:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008004:	d107      	bne.n	8008016 <HAL_UART_Transmit_IT+0x7e>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d103      	bne.n	8008016 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	4a0d      	ldr	r2, [pc, #52]	; (8008048 <HAL_UART_Transmit_IT+0xb0>)
 8008012:	665a      	str	r2, [r3, #100]	; 0x64
 8008014:	e002      	b.n	800801c <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	4a0c      	ldr	r2, [pc, #48]	; (800804c <HAL_UART_Transmit_IT+0xb4>)
 800801a:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008032:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	e000      	b.n	800803a <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8008038:	2302      	movs	r3, #2
  }
}
 800803a:	4618      	mov	r0, r3
 800803c:	3714      	adds	r7, #20
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	08008d53 	.word	0x08008d53
 800804c:	08008ce1 	.word	0x08008ce1

08008050 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	4613      	mov	r3, r2
 800805c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008062:	2b20      	cmp	r3, #32
 8008064:	f040 808a 	bne.w	800817c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d002      	beq.n	8008074 <HAL_UART_Receive_IT+0x24>
 800806e:	88fb      	ldrh	r3, [r7, #6]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d101      	bne.n	8008078 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e082      	b.n	800817e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800807e:	2b01      	cmp	r3, #1
 8008080:	d101      	bne.n	8008086 <HAL_UART_Receive_IT+0x36>
 8008082:	2302      	movs	r3, #2
 8008084:	e07b      	b.n	800817e <HAL_UART_Receive_IT+0x12e>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	88fa      	ldrh	r2, [r7, #6]
 8008098:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	88fa      	ldrh	r2, [r7, #6]
 80080a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080b2:	d10e      	bne.n	80080d2 <HAL_UART_Receive_IT+0x82>
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d105      	bne.n	80080c8 <HAL_UART_Receive_IT+0x78>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80080c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080c6:	e02d      	b.n	8008124 <HAL_UART_Receive_IT+0xd4>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	22ff      	movs	r2, #255	; 0xff
 80080cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080d0:	e028      	b.n	8008124 <HAL_UART_Receive_IT+0xd4>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10d      	bne.n	80080f6 <HAL_UART_Receive_IT+0xa6>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d104      	bne.n	80080ec <HAL_UART_Receive_IT+0x9c>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	22ff      	movs	r2, #255	; 0xff
 80080e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080ea:	e01b      	b.n	8008124 <HAL_UART_Receive_IT+0xd4>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	227f      	movs	r2, #127	; 0x7f
 80080f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080f4:	e016      	b.n	8008124 <HAL_UART_Receive_IT+0xd4>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080fe:	d10d      	bne.n	800811c <HAL_UART_Receive_IT+0xcc>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d104      	bne.n	8008112 <HAL_UART_Receive_IT+0xc2>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	227f      	movs	r2, #127	; 0x7f
 800810c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008110:	e008      	b.n	8008124 <HAL_UART_Receive_IT+0xd4>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	223f      	movs	r2, #63	; 0x3f
 8008116:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800811a:	e003      	b.n	8008124 <HAL_UART_Receive_IT+0xd4>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2222      	movs	r2, #34	; 0x22
 800812e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	689a      	ldr	r2, [r3, #8]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f042 0201 	orr.w	r2, r2, #1
 800813e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008148:	d107      	bne.n	800815a <HAL_UART_Receive_IT+0x10a>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d103      	bne.n	800815a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	4a0d      	ldr	r2, [pc, #52]	; (800818c <HAL_UART_Receive_IT+0x13c>)
 8008156:	661a      	str	r2, [r3, #96]	; 0x60
 8008158:	e002      	b.n	8008160 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	4a0c      	ldr	r2, [pc, #48]	; (8008190 <HAL_UART_Receive_IT+0x140>)
 800815e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008176:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008178:	2300      	movs	r3, #0
 800817a:	e000      	b.n	800817e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800817c:	2302      	movs	r3, #2
  }
}
 800817e:	4618      	mov	r0, r3
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	08008ea7 	.word	0x08008ea7
 8008190:	08008e01 	.word	0x08008e01

08008194 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b088      	sub	sp, #32
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	69db      	ldr	r3, [r3, #28]
 80081a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80081b4:	69fa      	ldr	r2, [r7, #28]
 80081b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80081ba:	4013      	ands	r3, r2
 80081bc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d113      	bne.n	80081ec <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	f003 0320 	and.w	r3, r3, #32
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00e      	beq.n	80081ec <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	f003 0320 	and.w	r3, r3, #32
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d009      	beq.n	80081ec <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f000 8114 	beq.w	800840a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	4798      	blx	r3
      }
      return;
 80081ea:	e10e      	b.n	800840a <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 80d6 	beq.w	80083a0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d105      	bne.n	800820a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 80cb 	beq.w	80083a0 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	f003 0301 	and.w	r3, r3, #1
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00e      	beq.n	8008232 <HAL_UART_IRQHandler+0x9e>
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800821a:	2b00      	cmp	r3, #0
 800821c:	d009      	beq.n	8008232 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2201      	movs	r2, #1
 8008224:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800822a:	f043 0201 	orr.w	r2, r3, #1
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	f003 0302 	and.w	r3, r3, #2
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00e      	beq.n	800825a <HAL_UART_IRQHandler+0xc6>
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	d009      	beq.n	800825a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2202      	movs	r2, #2
 800824c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008252:	f043 0204 	orr.w	r2, r3, #4
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	f003 0304 	and.w	r3, r3, #4
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00e      	beq.n	8008282 <HAL_UART_IRQHandler+0xee>
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	f003 0301 	and.w	r3, r3, #1
 800826a:	2b00      	cmp	r3, #0
 800826c:	d009      	beq.n	8008282 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2204      	movs	r2, #4
 8008274:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800827a:	f043 0202 	orr.w	r2, r3, #2
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	f003 0308 	and.w	r3, r3, #8
 8008288:	2b00      	cmp	r3, #0
 800828a:	d013      	beq.n	80082b4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	f003 0320 	and.w	r3, r3, #32
 8008292:	2b00      	cmp	r3, #0
 8008294:	d104      	bne.n	80082a0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800829c:	2b00      	cmp	r3, #0
 800829e:	d009      	beq.n	80082b4 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2208      	movs	r2, #8
 80082a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082ac:	f043 0208 	orr.w	r2, r3, #8
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00f      	beq.n	80082de <HAL_UART_IRQHandler+0x14a>
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00a      	beq.n	80082de <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082d6:	f043 0220 	orr.w	r2, r3, #32
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f000 8093 	beq.w	800840e <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	f003 0320 	and.w	r3, r3, #32
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00c      	beq.n	800830c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	f003 0320 	and.w	r3, r3, #32
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d007      	beq.n	800830c <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008300:	2b00      	cmp	r3, #0
 8008302:	d003      	beq.n	800830c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008310:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800831c:	2b40      	cmp	r3, #64	; 0x40
 800831e:	d004      	beq.n	800832a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008326:	2b00      	cmp	r3, #0
 8008328:	d031      	beq.n	800838e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fca2 	bl	8008c74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833a:	2b40      	cmp	r3, #64	; 0x40
 800833c:	d123      	bne.n	8008386 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	689a      	ldr	r2, [r3, #8]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800834c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008352:	2b00      	cmp	r3, #0
 8008354:	d013      	beq.n	800837e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800835a:	4a30      	ldr	r2, [pc, #192]	; (800841c <HAL_UART_IRQHandler+0x288>)
 800835c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008362:	4618      	mov	r0, r3
 8008364:	f7fc f994 	bl	8004690 <HAL_DMA_Abort_IT>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d016      	beq.n	800839c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008378:	4610      	mov	r0, r2
 800837a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800837c:	e00e      	b.n	800839c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f858 	bl	8008434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008384:	e00a      	b.n	800839c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f854 	bl	8008434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800838c:	e006      	b.n	800839c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f850 	bl	8008434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800839a:	e038      	b.n	800840e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800839c:	bf00      	nop
    return;
 800839e:	e036      	b.n	800840e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00d      	beq.n	80083c6 <HAL_UART_IRQHandler+0x232>
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d008      	beq.n	80083c6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80083bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f842 	bl	8008448 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083c4:	e026      	b.n	8008414 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00d      	beq.n	80083ec <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d008      	beq.n	80083ec <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d017      	beq.n	8008412 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	4798      	blx	r3
    }
    return;
 80083ea:	e012      	b.n	8008412 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00e      	beq.n	8008414 <HAL_UART_IRQHandler+0x280>
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d009      	beq.n	8008414 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fce4 	bl	8008dce <UART_EndTransmit_IT>
    return;
 8008406:	bf00      	nop
 8008408:	e004      	b.n	8008414 <HAL_UART_IRQHandler+0x280>
      return;
 800840a:	bf00      	nop
 800840c:	e002      	b.n	8008414 <HAL_UART_IRQHandler+0x280>
    return;
 800840e:	bf00      	nop
 8008410:	e000      	b.n	8008414 <HAL_UART_IRQHandler+0x280>
    return;
 8008412:	bf00      	nop
  }

}
 8008414:	3720      	adds	r7, #32
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	08008cb5 	.word	0x08008cb5

08008420 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008450:	bf00      	nop
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b088      	sub	sp, #32
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008464:	2300      	movs	r3, #0
 8008466:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689a      	ldr	r2, [r3, #8]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	431a      	orrs	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	431a      	orrs	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	69db      	ldr	r3, [r3, #28]
 8008480:	4313      	orrs	r3, r2
 8008482:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	4bb1      	ldr	r3, [pc, #708]	; (8008750 <UART_SetConfig+0x2f4>)
 800848c:	4013      	ands	r3, r2
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	6812      	ldr	r2, [r2, #0]
 8008492:	6939      	ldr	r1, [r7, #16]
 8008494:	430b      	orrs	r3, r1
 8008496:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68da      	ldr	r2, [r3, #12]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	430a      	orrs	r2, r1
 80084ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a1b      	ldr	r3, [r3, #32]
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	430a      	orrs	r2, r1
 80084d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a9f      	ldr	r2, [pc, #636]	; (8008754 <UART_SetConfig+0x2f8>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d121      	bne.n	8008520 <UART_SetConfig+0xc4>
 80084dc:	4b9e      	ldr	r3, [pc, #632]	; (8008758 <UART_SetConfig+0x2fc>)
 80084de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084e2:	f003 0303 	and.w	r3, r3, #3
 80084e6:	2b03      	cmp	r3, #3
 80084e8:	d816      	bhi.n	8008518 <UART_SetConfig+0xbc>
 80084ea:	a201      	add	r2, pc, #4	; (adr r2, 80084f0 <UART_SetConfig+0x94>)
 80084ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f0:	08008501 	.word	0x08008501
 80084f4:	0800850d 	.word	0x0800850d
 80084f8:	08008507 	.word	0x08008507
 80084fc:	08008513 	.word	0x08008513
 8008500:	2301      	movs	r3, #1
 8008502:	77fb      	strb	r3, [r7, #31]
 8008504:	e151      	b.n	80087aa <UART_SetConfig+0x34e>
 8008506:	2302      	movs	r3, #2
 8008508:	77fb      	strb	r3, [r7, #31]
 800850a:	e14e      	b.n	80087aa <UART_SetConfig+0x34e>
 800850c:	2304      	movs	r3, #4
 800850e:	77fb      	strb	r3, [r7, #31]
 8008510:	e14b      	b.n	80087aa <UART_SetConfig+0x34e>
 8008512:	2308      	movs	r3, #8
 8008514:	77fb      	strb	r3, [r7, #31]
 8008516:	e148      	b.n	80087aa <UART_SetConfig+0x34e>
 8008518:	2310      	movs	r3, #16
 800851a:	77fb      	strb	r3, [r7, #31]
 800851c:	bf00      	nop
 800851e:	e144      	b.n	80087aa <UART_SetConfig+0x34e>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a8d      	ldr	r2, [pc, #564]	; (800875c <UART_SetConfig+0x300>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d134      	bne.n	8008594 <UART_SetConfig+0x138>
 800852a:	4b8b      	ldr	r3, [pc, #556]	; (8008758 <UART_SetConfig+0x2fc>)
 800852c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008530:	f003 030c 	and.w	r3, r3, #12
 8008534:	2b0c      	cmp	r3, #12
 8008536:	d829      	bhi.n	800858c <UART_SetConfig+0x130>
 8008538:	a201      	add	r2, pc, #4	; (adr r2, 8008540 <UART_SetConfig+0xe4>)
 800853a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853e:	bf00      	nop
 8008540:	08008575 	.word	0x08008575
 8008544:	0800858d 	.word	0x0800858d
 8008548:	0800858d 	.word	0x0800858d
 800854c:	0800858d 	.word	0x0800858d
 8008550:	08008581 	.word	0x08008581
 8008554:	0800858d 	.word	0x0800858d
 8008558:	0800858d 	.word	0x0800858d
 800855c:	0800858d 	.word	0x0800858d
 8008560:	0800857b 	.word	0x0800857b
 8008564:	0800858d 	.word	0x0800858d
 8008568:	0800858d 	.word	0x0800858d
 800856c:	0800858d 	.word	0x0800858d
 8008570:	08008587 	.word	0x08008587
 8008574:	2300      	movs	r3, #0
 8008576:	77fb      	strb	r3, [r7, #31]
 8008578:	e117      	b.n	80087aa <UART_SetConfig+0x34e>
 800857a:	2302      	movs	r3, #2
 800857c:	77fb      	strb	r3, [r7, #31]
 800857e:	e114      	b.n	80087aa <UART_SetConfig+0x34e>
 8008580:	2304      	movs	r3, #4
 8008582:	77fb      	strb	r3, [r7, #31]
 8008584:	e111      	b.n	80087aa <UART_SetConfig+0x34e>
 8008586:	2308      	movs	r3, #8
 8008588:	77fb      	strb	r3, [r7, #31]
 800858a:	e10e      	b.n	80087aa <UART_SetConfig+0x34e>
 800858c:	2310      	movs	r3, #16
 800858e:	77fb      	strb	r3, [r7, #31]
 8008590:	bf00      	nop
 8008592:	e10a      	b.n	80087aa <UART_SetConfig+0x34e>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a71      	ldr	r2, [pc, #452]	; (8008760 <UART_SetConfig+0x304>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d120      	bne.n	80085e0 <UART_SetConfig+0x184>
 800859e:	4b6e      	ldr	r3, [pc, #440]	; (8008758 <UART_SetConfig+0x2fc>)
 80085a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80085a8:	2b10      	cmp	r3, #16
 80085aa:	d00f      	beq.n	80085cc <UART_SetConfig+0x170>
 80085ac:	2b10      	cmp	r3, #16
 80085ae:	d802      	bhi.n	80085b6 <UART_SetConfig+0x15a>
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d005      	beq.n	80085c0 <UART_SetConfig+0x164>
 80085b4:	e010      	b.n	80085d8 <UART_SetConfig+0x17c>
 80085b6:	2b20      	cmp	r3, #32
 80085b8:	d005      	beq.n	80085c6 <UART_SetConfig+0x16a>
 80085ba:	2b30      	cmp	r3, #48	; 0x30
 80085bc:	d009      	beq.n	80085d2 <UART_SetConfig+0x176>
 80085be:	e00b      	b.n	80085d8 <UART_SetConfig+0x17c>
 80085c0:	2300      	movs	r3, #0
 80085c2:	77fb      	strb	r3, [r7, #31]
 80085c4:	e0f1      	b.n	80087aa <UART_SetConfig+0x34e>
 80085c6:	2302      	movs	r3, #2
 80085c8:	77fb      	strb	r3, [r7, #31]
 80085ca:	e0ee      	b.n	80087aa <UART_SetConfig+0x34e>
 80085cc:	2304      	movs	r3, #4
 80085ce:	77fb      	strb	r3, [r7, #31]
 80085d0:	e0eb      	b.n	80087aa <UART_SetConfig+0x34e>
 80085d2:	2308      	movs	r3, #8
 80085d4:	77fb      	strb	r3, [r7, #31]
 80085d6:	e0e8      	b.n	80087aa <UART_SetConfig+0x34e>
 80085d8:	2310      	movs	r3, #16
 80085da:	77fb      	strb	r3, [r7, #31]
 80085dc:	bf00      	nop
 80085de:	e0e4      	b.n	80087aa <UART_SetConfig+0x34e>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a5f      	ldr	r2, [pc, #380]	; (8008764 <UART_SetConfig+0x308>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d120      	bne.n	800862c <UART_SetConfig+0x1d0>
 80085ea:	4b5b      	ldr	r3, [pc, #364]	; (8008758 <UART_SetConfig+0x2fc>)
 80085ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80085f4:	2b40      	cmp	r3, #64	; 0x40
 80085f6:	d00f      	beq.n	8008618 <UART_SetConfig+0x1bc>
 80085f8:	2b40      	cmp	r3, #64	; 0x40
 80085fa:	d802      	bhi.n	8008602 <UART_SetConfig+0x1a6>
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d005      	beq.n	800860c <UART_SetConfig+0x1b0>
 8008600:	e010      	b.n	8008624 <UART_SetConfig+0x1c8>
 8008602:	2b80      	cmp	r3, #128	; 0x80
 8008604:	d005      	beq.n	8008612 <UART_SetConfig+0x1b6>
 8008606:	2bc0      	cmp	r3, #192	; 0xc0
 8008608:	d009      	beq.n	800861e <UART_SetConfig+0x1c2>
 800860a:	e00b      	b.n	8008624 <UART_SetConfig+0x1c8>
 800860c:	2300      	movs	r3, #0
 800860e:	77fb      	strb	r3, [r7, #31]
 8008610:	e0cb      	b.n	80087aa <UART_SetConfig+0x34e>
 8008612:	2302      	movs	r3, #2
 8008614:	77fb      	strb	r3, [r7, #31]
 8008616:	e0c8      	b.n	80087aa <UART_SetConfig+0x34e>
 8008618:	2304      	movs	r3, #4
 800861a:	77fb      	strb	r3, [r7, #31]
 800861c:	e0c5      	b.n	80087aa <UART_SetConfig+0x34e>
 800861e:	2308      	movs	r3, #8
 8008620:	77fb      	strb	r3, [r7, #31]
 8008622:	e0c2      	b.n	80087aa <UART_SetConfig+0x34e>
 8008624:	2310      	movs	r3, #16
 8008626:	77fb      	strb	r3, [r7, #31]
 8008628:	bf00      	nop
 800862a:	e0be      	b.n	80087aa <UART_SetConfig+0x34e>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a4d      	ldr	r2, [pc, #308]	; (8008768 <UART_SetConfig+0x30c>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d124      	bne.n	8008680 <UART_SetConfig+0x224>
 8008636:	4b48      	ldr	r3, [pc, #288]	; (8008758 <UART_SetConfig+0x2fc>)
 8008638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800863c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008644:	d012      	beq.n	800866c <UART_SetConfig+0x210>
 8008646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800864a:	d802      	bhi.n	8008652 <UART_SetConfig+0x1f6>
 800864c:	2b00      	cmp	r3, #0
 800864e:	d007      	beq.n	8008660 <UART_SetConfig+0x204>
 8008650:	e012      	b.n	8008678 <UART_SetConfig+0x21c>
 8008652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008656:	d006      	beq.n	8008666 <UART_SetConfig+0x20a>
 8008658:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800865c:	d009      	beq.n	8008672 <UART_SetConfig+0x216>
 800865e:	e00b      	b.n	8008678 <UART_SetConfig+0x21c>
 8008660:	2300      	movs	r3, #0
 8008662:	77fb      	strb	r3, [r7, #31]
 8008664:	e0a1      	b.n	80087aa <UART_SetConfig+0x34e>
 8008666:	2302      	movs	r3, #2
 8008668:	77fb      	strb	r3, [r7, #31]
 800866a:	e09e      	b.n	80087aa <UART_SetConfig+0x34e>
 800866c:	2304      	movs	r3, #4
 800866e:	77fb      	strb	r3, [r7, #31]
 8008670:	e09b      	b.n	80087aa <UART_SetConfig+0x34e>
 8008672:	2308      	movs	r3, #8
 8008674:	77fb      	strb	r3, [r7, #31]
 8008676:	e098      	b.n	80087aa <UART_SetConfig+0x34e>
 8008678:	2310      	movs	r3, #16
 800867a:	77fb      	strb	r3, [r7, #31]
 800867c:	bf00      	nop
 800867e:	e094      	b.n	80087aa <UART_SetConfig+0x34e>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a39      	ldr	r2, [pc, #228]	; (800876c <UART_SetConfig+0x310>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d124      	bne.n	80086d4 <UART_SetConfig+0x278>
 800868a:	4b33      	ldr	r3, [pc, #204]	; (8008758 <UART_SetConfig+0x2fc>)
 800868c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008690:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008698:	d012      	beq.n	80086c0 <UART_SetConfig+0x264>
 800869a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800869e:	d802      	bhi.n	80086a6 <UART_SetConfig+0x24a>
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d007      	beq.n	80086b4 <UART_SetConfig+0x258>
 80086a4:	e012      	b.n	80086cc <UART_SetConfig+0x270>
 80086a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086aa:	d006      	beq.n	80086ba <UART_SetConfig+0x25e>
 80086ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086b0:	d009      	beq.n	80086c6 <UART_SetConfig+0x26a>
 80086b2:	e00b      	b.n	80086cc <UART_SetConfig+0x270>
 80086b4:	2301      	movs	r3, #1
 80086b6:	77fb      	strb	r3, [r7, #31]
 80086b8:	e077      	b.n	80087aa <UART_SetConfig+0x34e>
 80086ba:	2302      	movs	r3, #2
 80086bc:	77fb      	strb	r3, [r7, #31]
 80086be:	e074      	b.n	80087aa <UART_SetConfig+0x34e>
 80086c0:	2304      	movs	r3, #4
 80086c2:	77fb      	strb	r3, [r7, #31]
 80086c4:	e071      	b.n	80087aa <UART_SetConfig+0x34e>
 80086c6:	2308      	movs	r3, #8
 80086c8:	77fb      	strb	r3, [r7, #31]
 80086ca:	e06e      	b.n	80087aa <UART_SetConfig+0x34e>
 80086cc:	2310      	movs	r3, #16
 80086ce:	77fb      	strb	r3, [r7, #31]
 80086d0:	bf00      	nop
 80086d2:	e06a      	b.n	80087aa <UART_SetConfig+0x34e>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a25      	ldr	r2, [pc, #148]	; (8008770 <UART_SetConfig+0x314>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d124      	bne.n	8008728 <UART_SetConfig+0x2cc>
 80086de:	4b1e      	ldr	r3, [pc, #120]	; (8008758 <UART_SetConfig+0x2fc>)
 80086e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086e4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80086e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ec:	d012      	beq.n	8008714 <UART_SetConfig+0x2b8>
 80086ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086f2:	d802      	bhi.n	80086fa <UART_SetConfig+0x29e>
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d007      	beq.n	8008708 <UART_SetConfig+0x2ac>
 80086f8:	e012      	b.n	8008720 <UART_SetConfig+0x2c4>
 80086fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086fe:	d006      	beq.n	800870e <UART_SetConfig+0x2b2>
 8008700:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008704:	d009      	beq.n	800871a <UART_SetConfig+0x2be>
 8008706:	e00b      	b.n	8008720 <UART_SetConfig+0x2c4>
 8008708:	2300      	movs	r3, #0
 800870a:	77fb      	strb	r3, [r7, #31]
 800870c:	e04d      	b.n	80087aa <UART_SetConfig+0x34e>
 800870e:	2302      	movs	r3, #2
 8008710:	77fb      	strb	r3, [r7, #31]
 8008712:	e04a      	b.n	80087aa <UART_SetConfig+0x34e>
 8008714:	2304      	movs	r3, #4
 8008716:	77fb      	strb	r3, [r7, #31]
 8008718:	e047      	b.n	80087aa <UART_SetConfig+0x34e>
 800871a:	2308      	movs	r3, #8
 800871c:	77fb      	strb	r3, [r7, #31]
 800871e:	e044      	b.n	80087aa <UART_SetConfig+0x34e>
 8008720:	2310      	movs	r3, #16
 8008722:	77fb      	strb	r3, [r7, #31]
 8008724:	bf00      	nop
 8008726:	e040      	b.n	80087aa <UART_SetConfig+0x34e>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a11      	ldr	r2, [pc, #68]	; (8008774 <UART_SetConfig+0x318>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d139      	bne.n	80087a6 <UART_SetConfig+0x34a>
 8008732:	4b09      	ldr	r3, [pc, #36]	; (8008758 <UART_SetConfig+0x2fc>)
 8008734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008738:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800873c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008740:	d027      	beq.n	8008792 <UART_SetConfig+0x336>
 8008742:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008746:	d817      	bhi.n	8008778 <UART_SetConfig+0x31c>
 8008748:	2b00      	cmp	r3, #0
 800874a:	d01c      	beq.n	8008786 <UART_SetConfig+0x32a>
 800874c:	e027      	b.n	800879e <UART_SetConfig+0x342>
 800874e:	bf00      	nop
 8008750:	efff69f3 	.word	0xefff69f3
 8008754:	40011000 	.word	0x40011000
 8008758:	40023800 	.word	0x40023800
 800875c:	40004400 	.word	0x40004400
 8008760:	40004800 	.word	0x40004800
 8008764:	40004c00 	.word	0x40004c00
 8008768:	40005000 	.word	0x40005000
 800876c:	40011400 	.word	0x40011400
 8008770:	40007800 	.word	0x40007800
 8008774:	40007c00 	.word	0x40007c00
 8008778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800877c:	d006      	beq.n	800878c <UART_SetConfig+0x330>
 800877e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008782:	d009      	beq.n	8008798 <UART_SetConfig+0x33c>
 8008784:	e00b      	b.n	800879e <UART_SetConfig+0x342>
 8008786:	2300      	movs	r3, #0
 8008788:	77fb      	strb	r3, [r7, #31]
 800878a:	e00e      	b.n	80087aa <UART_SetConfig+0x34e>
 800878c:	2302      	movs	r3, #2
 800878e:	77fb      	strb	r3, [r7, #31]
 8008790:	e00b      	b.n	80087aa <UART_SetConfig+0x34e>
 8008792:	2304      	movs	r3, #4
 8008794:	77fb      	strb	r3, [r7, #31]
 8008796:	e008      	b.n	80087aa <UART_SetConfig+0x34e>
 8008798:	2308      	movs	r3, #8
 800879a:	77fb      	strb	r3, [r7, #31]
 800879c:	e005      	b.n	80087aa <UART_SetConfig+0x34e>
 800879e:	2310      	movs	r3, #16
 80087a0:	77fb      	strb	r3, [r7, #31]
 80087a2:	bf00      	nop
 80087a4:	e001      	b.n	80087aa <UART_SetConfig+0x34e>
 80087a6:	2310      	movs	r3, #16
 80087a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	69db      	ldr	r3, [r3, #28]
 80087ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087b2:	d17f      	bne.n	80088b4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80087b4:	7ffb      	ldrb	r3, [r7, #31]
 80087b6:	2b08      	cmp	r3, #8
 80087b8:	d85c      	bhi.n	8008874 <UART_SetConfig+0x418>
 80087ba:	a201      	add	r2, pc, #4	; (adr r2, 80087c0 <UART_SetConfig+0x364>)
 80087bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c0:	080087e5 	.word	0x080087e5
 80087c4:	08008805 	.word	0x08008805
 80087c8:	08008825 	.word	0x08008825
 80087cc:	08008875 	.word	0x08008875
 80087d0:	0800883d 	.word	0x0800883d
 80087d4:	08008875 	.word	0x08008875
 80087d8:	08008875 	.word	0x08008875
 80087dc:	08008875 	.word	0x08008875
 80087e0:	0800885d 	.word	0x0800885d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087e4:	f7fe fb46 	bl	8006e74 <HAL_RCC_GetPCLK1Freq>
 80087e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	005a      	lsls	r2, r3, #1
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	085b      	lsrs	r3, r3, #1
 80087f4:	441a      	add	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80087fe:	b29b      	uxth	r3, r3
 8008800:	61bb      	str	r3, [r7, #24]
        break;
 8008802:	e03a      	b.n	800887a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008804:	f7fe fb4a 	bl	8006e9c <HAL_RCC_GetPCLK2Freq>
 8008808:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	005a      	lsls	r2, r3, #1
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	085b      	lsrs	r3, r3, #1
 8008814:	441a      	add	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	fbb2 f3f3 	udiv	r3, r2, r3
 800881e:	b29b      	uxth	r3, r3
 8008820:	61bb      	str	r3, [r7, #24]
        break;
 8008822:	e02a      	b.n	800887a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	085a      	lsrs	r2, r3, #1
 800882a:	4b5f      	ldr	r3, [pc, #380]	; (80089a8 <UART_SetConfig+0x54c>)
 800882c:	4413      	add	r3, r2
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	6852      	ldr	r2, [r2, #4]
 8008832:	fbb3 f3f2 	udiv	r3, r3, r2
 8008836:	b29b      	uxth	r3, r3
 8008838:	61bb      	str	r3, [r7, #24]
        break;
 800883a:	e01e      	b.n	800887a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800883c:	f7fe fa36 	bl	8006cac <HAL_RCC_GetSysClockFreq>
 8008840:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	005a      	lsls	r2, r3, #1
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	085b      	lsrs	r3, r3, #1
 800884c:	441a      	add	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	fbb2 f3f3 	udiv	r3, r2, r3
 8008856:	b29b      	uxth	r3, r3
 8008858:	61bb      	str	r3, [r7, #24]
        break;
 800885a:	e00e      	b.n	800887a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	085b      	lsrs	r3, r3, #1
 8008862:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	fbb2 f3f3 	udiv	r3, r2, r3
 800886e:	b29b      	uxth	r3, r3
 8008870:	61bb      	str	r3, [r7, #24]
        break;
 8008872:	e002      	b.n	800887a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	75fb      	strb	r3, [r7, #23]
        break;
 8008878:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	2b0f      	cmp	r3, #15
 800887e:	d916      	bls.n	80088ae <UART_SetConfig+0x452>
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008886:	d212      	bcs.n	80088ae <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	b29b      	uxth	r3, r3
 800888c:	f023 030f 	bic.w	r3, r3, #15
 8008890:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	085b      	lsrs	r3, r3, #1
 8008896:	b29b      	uxth	r3, r3
 8008898:	f003 0307 	and.w	r3, r3, #7
 800889c:	b29a      	uxth	r2, r3
 800889e:	897b      	ldrh	r3, [r7, #10]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	897a      	ldrh	r2, [r7, #10]
 80088aa:	60da      	str	r2, [r3, #12]
 80088ac:	e070      	b.n	8008990 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	75fb      	strb	r3, [r7, #23]
 80088b2:	e06d      	b.n	8008990 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80088b4:	7ffb      	ldrb	r3, [r7, #31]
 80088b6:	2b08      	cmp	r3, #8
 80088b8:	d859      	bhi.n	800896e <UART_SetConfig+0x512>
 80088ba:	a201      	add	r2, pc, #4	; (adr r2, 80088c0 <UART_SetConfig+0x464>)
 80088bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c0:	080088e5 	.word	0x080088e5
 80088c4:	08008903 	.word	0x08008903
 80088c8:	08008921 	.word	0x08008921
 80088cc:	0800896f 	.word	0x0800896f
 80088d0:	08008939 	.word	0x08008939
 80088d4:	0800896f 	.word	0x0800896f
 80088d8:	0800896f 	.word	0x0800896f
 80088dc:	0800896f 	.word	0x0800896f
 80088e0:	08008957 	.word	0x08008957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088e4:	f7fe fac6 	bl	8006e74 <HAL_RCC_GetPCLK1Freq>
 80088e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	085a      	lsrs	r2, r3, #1
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	441a      	add	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	61bb      	str	r3, [r7, #24]
        break;
 8008900:	e038      	b.n	8008974 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008902:	f7fe facb 	bl	8006e9c <HAL_RCC_GetPCLK2Freq>
 8008906:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	085a      	lsrs	r2, r3, #1
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	441a      	add	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	fbb2 f3f3 	udiv	r3, r2, r3
 800891a:	b29b      	uxth	r3, r3
 800891c:	61bb      	str	r3, [r7, #24]
        break;
 800891e:	e029      	b.n	8008974 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	085a      	lsrs	r2, r3, #1
 8008926:	4b21      	ldr	r3, [pc, #132]	; (80089ac <UART_SetConfig+0x550>)
 8008928:	4413      	add	r3, r2
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	6852      	ldr	r2, [r2, #4]
 800892e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008932:	b29b      	uxth	r3, r3
 8008934:	61bb      	str	r3, [r7, #24]
        break;
 8008936:	e01d      	b.n	8008974 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008938:	f7fe f9b8 	bl	8006cac <HAL_RCC_GetSysClockFreq>
 800893c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	085a      	lsrs	r2, r3, #1
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	441a      	add	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008950:	b29b      	uxth	r3, r3
 8008952:	61bb      	str	r3, [r7, #24]
        break;
 8008954:	e00e      	b.n	8008974 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	085b      	lsrs	r3, r3, #1
 800895c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	fbb2 f3f3 	udiv	r3, r2, r3
 8008968:	b29b      	uxth	r3, r3
 800896a:	61bb      	str	r3, [r7, #24]
        break;
 800896c:	e002      	b.n	8008974 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	75fb      	strb	r3, [r7, #23]
        break;
 8008972:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	2b0f      	cmp	r3, #15
 8008978:	d908      	bls.n	800898c <UART_SetConfig+0x530>
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008980:	d204      	bcs.n	800898c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	69ba      	ldr	r2, [r7, #24]
 8008988:	60da      	str	r2, [r3, #12]
 800898a:	e001      	b.n	8008990 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800899c:	7dfb      	ldrb	r3, [r7, #23]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3720      	adds	r7, #32
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	01e84800 	.word	0x01e84800
 80089ac:	00f42400 	.word	0x00f42400

080089b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089bc:	f003 0301 	and.w	r3, r3, #1
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00a      	beq.n	80089da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	430a      	orrs	r2, r1
 80089d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089de:	f003 0302 	and.w	r3, r3, #2
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00a      	beq.n	80089fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	430a      	orrs	r2, r1
 80089fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a00:	f003 0304 	and.w	r3, r3, #4
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00a      	beq.n	8008a1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	430a      	orrs	r2, r1
 8008a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a22:	f003 0308 	and.w	r3, r3, #8
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00a      	beq.n	8008a40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	430a      	orrs	r2, r1
 8008a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a44:	f003 0310 	and.w	r3, r3, #16
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00a      	beq.n	8008a62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	430a      	orrs	r2, r1
 8008a60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a66:	f003 0320 	and.w	r3, r3, #32
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00a      	beq.n	8008a84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	430a      	orrs	r2, r1
 8008a82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d01a      	beq.n	8008ac6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008aae:	d10a      	bne.n	8008ac6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00a      	beq.n	8008ae8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	605a      	str	r2, [r3, #4]
  }
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af02      	add	r7, sp, #8
 8008afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008b02:	f7fb f8db 	bl	8003cbc <HAL_GetTick>
 8008b06:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0308 	and.w	r3, r3, #8
 8008b12:	2b08      	cmp	r3, #8
 8008b14:	d10e      	bne.n	8008b34 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f82a 	bl	8008b7e <UART_WaitOnFlagUntilTimeout>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d001      	beq.n	8008b34 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b30:	2303      	movs	r3, #3
 8008b32:	e020      	b.n	8008b76 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 0304 	and.w	r3, r3, #4
 8008b3e:	2b04      	cmp	r3, #4
 8008b40:	d10e      	bne.n	8008b60 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f814 	bl	8008b7e <UART_WaitOnFlagUntilTimeout>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e00a      	b.n	8008b76 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2220      	movs	r2, #32
 8008b64:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2220      	movs	r2, #32
 8008b6a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b084      	sub	sp, #16
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	60f8      	str	r0, [r7, #12]
 8008b86:	60b9      	str	r1, [r7, #8]
 8008b88:	603b      	str	r3, [r7, #0]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b8e:	e05d      	b.n	8008c4c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b96:	d059      	beq.n	8008c4c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b98:	f7fb f890 	bl	8003cbc <HAL_GetTick>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	69ba      	ldr	r2, [r7, #24]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d302      	bcc.n	8008bae <UART_WaitOnFlagUntilTimeout+0x30>
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d11b      	bne.n	8008be6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008bbc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	689a      	ldr	r2, [r3, #8]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f022 0201 	bic.w	r2, r2, #1
 8008bcc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2220      	movs	r2, #32
 8008bd2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2220      	movs	r2, #32
 8008bd8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e042      	b.n	8008c6c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 0304 	and.w	r3, r3, #4
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d02b      	beq.n	8008c4c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	69db      	ldr	r3, [r3, #28]
 8008bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c02:	d123      	bne.n	8008c4c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c0c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008c1c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	689a      	ldr	r2, [r3, #8]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f022 0201 	bic.w	r2, r2, #1
 8008c2c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2220      	movs	r2, #32
 8008c32:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2220      	movs	r2, #32
 8008c38:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2220      	movs	r2, #32
 8008c3e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e00f      	b.n	8008c6c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	69da      	ldr	r2, [r3, #28]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	4013      	ands	r3, r2
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	bf0c      	ite	eq
 8008c5c:	2301      	moveq	r3, #1
 8008c5e:	2300      	movne	r3, #0
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	461a      	mov	r2, r3
 8008c64:	79fb      	ldrb	r3, [r7, #7]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d092      	beq.n	8008b90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008c8a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	689a      	ldr	r2, [r3, #8]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 0201 	bic.w	r2, r2, #1
 8008c9a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2220      	movs	r2, #32
 8008ca0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f7ff fbae 	bl	8008434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cd8:	bf00      	nop
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cec:	2b21      	cmp	r3, #33	; 0x21
 8008cee:	d12a      	bne.n	8008d46 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d110      	bne.n	8008d1e <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d0a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d1a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008d1c:	e013      	b.n	8008d46 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d22:	781a      	ldrb	r2, [r3, #0]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d2e:	1c5a      	adds	r2, r3, #1
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008d46:	bf00      	nop
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008d52:	b480      	push	{r7}
 8008d54:	b085      	sub	sp, #20
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d5e:	2b21      	cmp	r3, #33	; 0x21
 8008d60:	d12f      	bne.n	8008dc2 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d110      	bne.n	8008d90 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d7c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d8c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008d8e:	e018      	b.n	8008dc2 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d94:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	881b      	ldrh	r3, [r3, #0]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008da4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008daa:	1c9a      	adds	r2, r3, #2
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	3b01      	subs	r3, #1
 8008dba:	b29a      	uxth	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008dc2:	bf00      	nop
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b082      	sub	sp, #8
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008de4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2220      	movs	r2, #32
 8008dea:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7ff fb14 	bl	8008420 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008df8:	bf00      	nop
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e0e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e14:	2b22      	cmp	r3, #34	; 0x22
 8008e16:	d13a      	bne.n	8008e8e <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e20:	89bb      	ldrh	r3, [r7, #12]
 8008e22:	b2d9      	uxtb	r1, r3
 8008e24:	89fb      	ldrh	r3, [r7, #14]
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e2c:	400a      	ands	r2, r1
 8008e2e:	b2d2      	uxtb	r2, r2
 8008e30:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e36:	1c5a      	adds	r2, r3, #1
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	3b01      	subs	r3, #1
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d121      	bne.n	8008e9e <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008e68:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	689a      	ldr	r2, [r3, #8]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f022 0201 	bic.w	r2, r2, #1
 8008e78:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2220      	movs	r2, #32
 8008e7e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7f9 f912 	bl	80020b0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e8c:	e007      	b.n	8008e9e <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	699a      	ldr	r2, [r3, #24]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f042 0208 	orr.w	r2, r2, #8
 8008e9c:	619a      	str	r2, [r3, #24]
}
 8008e9e:	bf00      	nop
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b084      	sub	sp, #16
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008eb4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008eba:	2b22      	cmp	r3, #34	; 0x22
 8008ebc:	d13a      	bne.n	8008f34 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec4:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eca:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008ecc:	89ba      	ldrh	r2, [r7, #12]
 8008ece:	89fb      	ldrh	r3, [r7, #14]
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008edc:	1c9a      	adds	r2, r3, #2
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	3b01      	subs	r3, #1
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d121      	bne.n	8008f44 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f0e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	689a      	ldr	r2, [r3, #8]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f022 0201 	bic.w	r2, r2, #1
 8008f1e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2220      	movs	r2, #32
 8008f24:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7f9 f8bf 	bl	80020b0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f32:	e007      	b.n	8008f44 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	699a      	ldr	r2, [r3, #24]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f042 0208 	orr.w	r2, r2, #8
 8008f42:	619a      	str	r2, [r3, #24]
}
 8008f44:	bf00      	nop
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <MX_LWIP_Init>:
/* USER CODE END 2 */

/**
 * LwIP initialization function
 */
void MX_LWIP_Init(void) {
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af04      	add	r7, sp, #16
	/* IP addresses initialization */
	IP_ADDRESS[0] = 192;
 8008f52:	4b8c      	ldr	r3, [pc, #560]	; (8009184 <MX_LWIP_Init+0x238>)
 8008f54:	22c0      	movs	r2, #192	; 0xc0
 8008f56:	701a      	strb	r2, [r3, #0]
	IP_ADDRESS[1] = 168;
 8008f58:	4b8a      	ldr	r3, [pc, #552]	; (8009184 <MX_LWIP_Init+0x238>)
 8008f5a:	22a8      	movs	r2, #168	; 0xa8
 8008f5c:	705a      	strb	r2, [r3, #1]
	IP_ADDRESS[2] = 1;
 8008f5e:	4b89      	ldr	r3, [pc, #548]	; (8009184 <MX_LWIP_Init+0x238>)
 8008f60:	2201      	movs	r2, #1
 8008f62:	709a      	strb	r2, [r3, #2]
	IP_ADDRESS[3] = 102;
 8008f64:	4b87      	ldr	r3, [pc, #540]	; (8009184 <MX_LWIP_Init+0x238>)
 8008f66:	2266      	movs	r2, #102	; 0x66
 8008f68:	70da      	strb	r2, [r3, #3]
	NETMASK_ADDRESS[0] = 255;
 8008f6a:	4b87      	ldr	r3, [pc, #540]	; (8009188 <MX_LWIP_Init+0x23c>)
 8008f6c:	22ff      	movs	r2, #255	; 0xff
 8008f6e:	701a      	strb	r2, [r3, #0]
	NETMASK_ADDRESS[1] = 255;
 8008f70:	4b85      	ldr	r3, [pc, #532]	; (8009188 <MX_LWIP_Init+0x23c>)
 8008f72:	22ff      	movs	r2, #255	; 0xff
 8008f74:	705a      	strb	r2, [r3, #1]
	NETMASK_ADDRESS[2] = 255;
 8008f76:	4b84      	ldr	r3, [pc, #528]	; (8009188 <MX_LWIP_Init+0x23c>)
 8008f78:	22ff      	movs	r2, #255	; 0xff
 8008f7a:	709a      	strb	r2, [r3, #2]
	NETMASK_ADDRESS[3] = 0;
 8008f7c:	4b82      	ldr	r3, [pc, #520]	; (8009188 <MX_LWIP_Init+0x23c>)
 8008f7e:	2200      	movs	r2, #0
 8008f80:	70da      	strb	r2, [r3, #3]
	GATEWAY_ADDRESS[0] = 192;
 8008f82:	4b82      	ldr	r3, [pc, #520]	; (800918c <MX_LWIP_Init+0x240>)
 8008f84:	22c0      	movs	r2, #192	; 0xc0
 8008f86:	701a      	strb	r2, [r3, #0]
	GATEWAY_ADDRESS[1] = 168;
 8008f88:	4b80      	ldr	r3, [pc, #512]	; (800918c <MX_LWIP_Init+0x240>)
 8008f8a:	22a8      	movs	r2, #168	; 0xa8
 8008f8c:	705a      	strb	r2, [r3, #1]
	GATEWAY_ADDRESS[2] = 1;
 8008f8e:	4b7f      	ldr	r3, [pc, #508]	; (800918c <MX_LWIP_Init+0x240>)
 8008f90:	2201      	movs	r2, #1
 8008f92:	709a      	strb	r2, [r3, #2]
	GATEWAY_ADDRESS[3] = 1;
 8008f94:	4b7d      	ldr	r3, [pc, #500]	; (800918c <MX_LWIP_Init+0x240>)
 8008f96:	2201      	movs	r2, #1
 8008f98:	70da      	strb	r2, [r3, #3]

	/* Initilialize the LwIP stack with RTOS */
	tcpip_init( NULL, NULL);
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	f005 fd4b 	bl	800ea38 <tcpip_init>

	/* IP addresses initialization without DHCP (IPv4) */
	IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2],
 8008fa2:	4b78      	ldr	r3, [pc, #480]	; (8009184 <MX_LWIP_Init+0x238>)
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	061a      	lsls	r2, r3, #24
 8008fa8:	4b76      	ldr	r3, [pc, #472]	; (8009184 <MX_LWIP_Init+0x238>)
 8008faa:	785b      	ldrb	r3, [r3, #1]
 8008fac:	041b      	lsls	r3, r3, #16
 8008fae:	431a      	orrs	r2, r3
 8008fb0:	4b74      	ldr	r3, [pc, #464]	; (8009184 <MX_LWIP_Init+0x238>)
 8008fb2:	789b      	ldrb	r3, [r3, #2]
 8008fb4:	021b      	lsls	r3, r3, #8
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	4a72      	ldr	r2, [pc, #456]	; (8009184 <MX_LWIP_Init+0x238>)
 8008fba:	78d2      	ldrb	r2, [r2, #3]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	061a      	lsls	r2, r3, #24
 8008fc0:	4b70      	ldr	r3, [pc, #448]	; (8009184 <MX_LWIP_Init+0x238>)
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	0619      	lsls	r1, r3, #24
 8008fc6:	4b6f      	ldr	r3, [pc, #444]	; (8009184 <MX_LWIP_Init+0x238>)
 8008fc8:	785b      	ldrb	r3, [r3, #1]
 8008fca:	041b      	lsls	r3, r3, #16
 8008fcc:	4319      	orrs	r1, r3
 8008fce:	4b6d      	ldr	r3, [pc, #436]	; (8009184 <MX_LWIP_Init+0x238>)
 8008fd0:	789b      	ldrb	r3, [r3, #2]
 8008fd2:	021b      	lsls	r3, r3, #8
 8008fd4:	430b      	orrs	r3, r1
 8008fd6:	496b      	ldr	r1, [pc, #428]	; (8009184 <MX_LWIP_Init+0x238>)
 8008fd8:	78c9      	ldrb	r1, [r1, #3]
 8008fda:	430b      	orrs	r3, r1
 8008fdc:	021b      	lsls	r3, r3, #8
 8008fde:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	4b67      	ldr	r3, [pc, #412]	; (8009184 <MX_LWIP_Init+0x238>)
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	0619      	lsls	r1, r3, #24
 8008fea:	4b66      	ldr	r3, [pc, #408]	; (8009184 <MX_LWIP_Init+0x238>)
 8008fec:	785b      	ldrb	r3, [r3, #1]
 8008fee:	041b      	lsls	r3, r3, #16
 8008ff0:	4319      	orrs	r1, r3
 8008ff2:	4b64      	ldr	r3, [pc, #400]	; (8009184 <MX_LWIP_Init+0x238>)
 8008ff4:	789b      	ldrb	r3, [r3, #2]
 8008ff6:	021b      	lsls	r3, r3, #8
 8008ff8:	430b      	orrs	r3, r1
 8008ffa:	4962      	ldr	r1, [pc, #392]	; (8009184 <MX_LWIP_Init+0x238>)
 8008ffc:	78c9      	ldrb	r1, [r1, #3]
 8008ffe:	430b      	orrs	r3, r1
 8009000:	0a1b      	lsrs	r3, r3, #8
 8009002:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009006:	431a      	orrs	r2, r3
 8009008:	4b5e      	ldr	r3, [pc, #376]	; (8009184 <MX_LWIP_Init+0x238>)
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	0619      	lsls	r1, r3, #24
 800900e:	4b5d      	ldr	r3, [pc, #372]	; (8009184 <MX_LWIP_Init+0x238>)
 8009010:	785b      	ldrb	r3, [r3, #1]
 8009012:	041b      	lsls	r3, r3, #16
 8009014:	4319      	orrs	r1, r3
 8009016:	4b5b      	ldr	r3, [pc, #364]	; (8009184 <MX_LWIP_Init+0x238>)
 8009018:	789b      	ldrb	r3, [r3, #2]
 800901a:	021b      	lsls	r3, r3, #8
 800901c:	430b      	orrs	r3, r1
 800901e:	4959      	ldr	r1, [pc, #356]	; (8009184 <MX_LWIP_Init+0x238>)
 8009020:	78c9      	ldrb	r1, [r1, #3]
 8009022:	430b      	orrs	r3, r1
 8009024:	0e1b      	lsrs	r3, r3, #24
 8009026:	4313      	orrs	r3, r2
 8009028:	4a59      	ldr	r2, [pc, #356]	; (8009190 <MX_LWIP_Init+0x244>)
 800902a:	6013      	str	r3, [r2, #0]
			IP_ADDRESS[3]);
	IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1],
 800902c:	4b56      	ldr	r3, [pc, #344]	; (8009188 <MX_LWIP_Init+0x23c>)
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	061a      	lsls	r2, r3, #24
 8009032:	4b55      	ldr	r3, [pc, #340]	; (8009188 <MX_LWIP_Init+0x23c>)
 8009034:	785b      	ldrb	r3, [r3, #1]
 8009036:	041b      	lsls	r3, r3, #16
 8009038:	431a      	orrs	r2, r3
 800903a:	4b53      	ldr	r3, [pc, #332]	; (8009188 <MX_LWIP_Init+0x23c>)
 800903c:	789b      	ldrb	r3, [r3, #2]
 800903e:	021b      	lsls	r3, r3, #8
 8009040:	4313      	orrs	r3, r2
 8009042:	4a51      	ldr	r2, [pc, #324]	; (8009188 <MX_LWIP_Init+0x23c>)
 8009044:	78d2      	ldrb	r2, [r2, #3]
 8009046:	4313      	orrs	r3, r2
 8009048:	061a      	lsls	r2, r3, #24
 800904a:	4b4f      	ldr	r3, [pc, #316]	; (8009188 <MX_LWIP_Init+0x23c>)
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	0619      	lsls	r1, r3, #24
 8009050:	4b4d      	ldr	r3, [pc, #308]	; (8009188 <MX_LWIP_Init+0x23c>)
 8009052:	785b      	ldrb	r3, [r3, #1]
 8009054:	041b      	lsls	r3, r3, #16
 8009056:	4319      	orrs	r1, r3
 8009058:	4b4b      	ldr	r3, [pc, #300]	; (8009188 <MX_LWIP_Init+0x23c>)
 800905a:	789b      	ldrb	r3, [r3, #2]
 800905c:	021b      	lsls	r3, r3, #8
 800905e:	430b      	orrs	r3, r1
 8009060:	4949      	ldr	r1, [pc, #292]	; (8009188 <MX_LWIP_Init+0x23c>)
 8009062:	78c9      	ldrb	r1, [r1, #3]
 8009064:	430b      	orrs	r3, r1
 8009066:	021b      	lsls	r3, r3, #8
 8009068:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800906c:	431a      	orrs	r2, r3
 800906e:	4b46      	ldr	r3, [pc, #280]	; (8009188 <MX_LWIP_Init+0x23c>)
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	0619      	lsls	r1, r3, #24
 8009074:	4b44      	ldr	r3, [pc, #272]	; (8009188 <MX_LWIP_Init+0x23c>)
 8009076:	785b      	ldrb	r3, [r3, #1]
 8009078:	041b      	lsls	r3, r3, #16
 800907a:	4319      	orrs	r1, r3
 800907c:	4b42      	ldr	r3, [pc, #264]	; (8009188 <MX_LWIP_Init+0x23c>)
 800907e:	789b      	ldrb	r3, [r3, #2]
 8009080:	021b      	lsls	r3, r3, #8
 8009082:	430b      	orrs	r3, r1
 8009084:	4940      	ldr	r1, [pc, #256]	; (8009188 <MX_LWIP_Init+0x23c>)
 8009086:	78c9      	ldrb	r1, [r1, #3]
 8009088:	430b      	orrs	r3, r1
 800908a:	0a1b      	lsrs	r3, r3, #8
 800908c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009090:	431a      	orrs	r2, r3
 8009092:	4b3d      	ldr	r3, [pc, #244]	; (8009188 <MX_LWIP_Init+0x23c>)
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	0619      	lsls	r1, r3, #24
 8009098:	4b3b      	ldr	r3, [pc, #236]	; (8009188 <MX_LWIP_Init+0x23c>)
 800909a:	785b      	ldrb	r3, [r3, #1]
 800909c:	041b      	lsls	r3, r3, #16
 800909e:	4319      	orrs	r1, r3
 80090a0:	4b39      	ldr	r3, [pc, #228]	; (8009188 <MX_LWIP_Init+0x23c>)
 80090a2:	789b      	ldrb	r3, [r3, #2]
 80090a4:	021b      	lsls	r3, r3, #8
 80090a6:	430b      	orrs	r3, r1
 80090a8:	4937      	ldr	r1, [pc, #220]	; (8009188 <MX_LWIP_Init+0x23c>)
 80090aa:	78c9      	ldrb	r1, [r1, #3]
 80090ac:	430b      	orrs	r3, r1
 80090ae:	0e1b      	lsrs	r3, r3, #24
 80090b0:	4313      	orrs	r3, r2
 80090b2:	4a38      	ldr	r2, [pc, #224]	; (8009194 <MX_LWIP_Init+0x248>)
 80090b4:	6013      	str	r3, [r2, #0]
			NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
	IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2],
 80090b6:	4b35      	ldr	r3, [pc, #212]	; (800918c <MX_LWIP_Init+0x240>)
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	061a      	lsls	r2, r3, #24
 80090bc:	4b33      	ldr	r3, [pc, #204]	; (800918c <MX_LWIP_Init+0x240>)
 80090be:	785b      	ldrb	r3, [r3, #1]
 80090c0:	041b      	lsls	r3, r3, #16
 80090c2:	431a      	orrs	r2, r3
 80090c4:	4b31      	ldr	r3, [pc, #196]	; (800918c <MX_LWIP_Init+0x240>)
 80090c6:	789b      	ldrb	r3, [r3, #2]
 80090c8:	021b      	lsls	r3, r3, #8
 80090ca:	4313      	orrs	r3, r2
 80090cc:	4a2f      	ldr	r2, [pc, #188]	; (800918c <MX_LWIP_Init+0x240>)
 80090ce:	78d2      	ldrb	r2, [r2, #3]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	061a      	lsls	r2, r3, #24
 80090d4:	4b2d      	ldr	r3, [pc, #180]	; (800918c <MX_LWIP_Init+0x240>)
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	0619      	lsls	r1, r3, #24
 80090da:	4b2c      	ldr	r3, [pc, #176]	; (800918c <MX_LWIP_Init+0x240>)
 80090dc:	785b      	ldrb	r3, [r3, #1]
 80090de:	041b      	lsls	r3, r3, #16
 80090e0:	4319      	orrs	r1, r3
 80090e2:	4b2a      	ldr	r3, [pc, #168]	; (800918c <MX_LWIP_Init+0x240>)
 80090e4:	789b      	ldrb	r3, [r3, #2]
 80090e6:	021b      	lsls	r3, r3, #8
 80090e8:	430b      	orrs	r3, r1
 80090ea:	4928      	ldr	r1, [pc, #160]	; (800918c <MX_LWIP_Init+0x240>)
 80090ec:	78c9      	ldrb	r1, [r1, #3]
 80090ee:	430b      	orrs	r3, r1
 80090f0:	021b      	lsls	r3, r3, #8
 80090f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80090f6:	431a      	orrs	r2, r3
 80090f8:	4b24      	ldr	r3, [pc, #144]	; (800918c <MX_LWIP_Init+0x240>)
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	0619      	lsls	r1, r3, #24
 80090fe:	4b23      	ldr	r3, [pc, #140]	; (800918c <MX_LWIP_Init+0x240>)
 8009100:	785b      	ldrb	r3, [r3, #1]
 8009102:	041b      	lsls	r3, r3, #16
 8009104:	4319      	orrs	r1, r3
 8009106:	4b21      	ldr	r3, [pc, #132]	; (800918c <MX_LWIP_Init+0x240>)
 8009108:	789b      	ldrb	r3, [r3, #2]
 800910a:	021b      	lsls	r3, r3, #8
 800910c:	430b      	orrs	r3, r1
 800910e:	491f      	ldr	r1, [pc, #124]	; (800918c <MX_LWIP_Init+0x240>)
 8009110:	78c9      	ldrb	r1, [r1, #3]
 8009112:	430b      	orrs	r3, r1
 8009114:	0a1b      	lsrs	r3, r3, #8
 8009116:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800911a:	431a      	orrs	r2, r3
 800911c:	4b1b      	ldr	r3, [pc, #108]	; (800918c <MX_LWIP_Init+0x240>)
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	0619      	lsls	r1, r3, #24
 8009122:	4b1a      	ldr	r3, [pc, #104]	; (800918c <MX_LWIP_Init+0x240>)
 8009124:	785b      	ldrb	r3, [r3, #1]
 8009126:	041b      	lsls	r3, r3, #16
 8009128:	4319      	orrs	r1, r3
 800912a:	4b18      	ldr	r3, [pc, #96]	; (800918c <MX_LWIP_Init+0x240>)
 800912c:	789b      	ldrb	r3, [r3, #2]
 800912e:	021b      	lsls	r3, r3, #8
 8009130:	430b      	orrs	r3, r1
 8009132:	4916      	ldr	r1, [pc, #88]	; (800918c <MX_LWIP_Init+0x240>)
 8009134:	78c9      	ldrb	r1, [r1, #3]
 8009136:	430b      	orrs	r3, r1
 8009138:	0e1b      	lsrs	r3, r3, #24
 800913a:	4313      	orrs	r3, r2
 800913c:	4a16      	ldr	r2, [pc, #88]	; (8009198 <MX_LWIP_Init+0x24c>)
 800913e:	6013      	str	r3, [r2, #0]
			GATEWAY_ADDRESS[3]);

	/* add the network interface (IPv4/IPv6) with RTOS */
	netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init,
 8009140:	4b16      	ldr	r3, [pc, #88]	; (800919c <MX_LWIP_Init+0x250>)
 8009142:	9302      	str	r3, [sp, #8]
 8009144:	4b16      	ldr	r3, [pc, #88]	; (80091a0 <MX_LWIP_Init+0x254>)
 8009146:	9301      	str	r3, [sp, #4]
 8009148:	2300      	movs	r3, #0
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	4b12      	ldr	r3, [pc, #72]	; (8009198 <MX_LWIP_Init+0x24c>)
 800914e:	4a11      	ldr	r2, [pc, #68]	; (8009194 <MX_LWIP_Init+0x248>)
 8009150:	490f      	ldr	r1, [pc, #60]	; (8009190 <MX_LWIP_Init+0x244>)
 8009152:	4814      	ldr	r0, [pc, #80]	; (80091a4 <MX_LWIP_Init+0x258>)
 8009154:	f006 f9f4 	bl	800f540 <netif_add>
			&tcpip_input);

	/* Registers the default network interface */
	netif_set_default(&gnetif);
 8009158:	4812      	ldr	r0, [pc, #72]	; (80091a4 <MX_LWIP_Init+0x258>)
 800915a:	f006 fba1 	bl	800f8a0 <netif_set_default>

	if (netif_is_link_up(&gnetif)) {
 800915e:	4b11      	ldr	r3, [pc, #68]	; (80091a4 <MX_LWIP_Init+0x258>)
 8009160:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009164:	089b      	lsrs	r3, r3, #2
 8009166:	f003 0301 	and.w	r3, r3, #1
 800916a:	b2db      	uxtb	r3, r3
 800916c:	2b00      	cmp	r3, #0
 800916e:	d003      	beq.n	8009178 <MX_LWIP_Init+0x22c>
		/* When the netif is fully configured this function must be called */
		netif_set_up(&gnetif);
 8009170:	480c      	ldr	r0, [pc, #48]	; (80091a4 <MX_LWIP_Init+0x258>)
 8009172:	f006 fba5 	bl	800f8c0 <netif_set_up>
	}

	/* USER CODE BEGIN 3 */

	/* USER CODE END 3 */
}
 8009176:	e002      	b.n	800917e <MX_LWIP_Init+0x232>
		netif_set_down(&gnetif);
 8009178:	480a      	ldr	r0, [pc, #40]	; (80091a4 <MX_LWIP_Init+0x258>)
 800917a:	f006 fc0d 	bl	800f998 <netif_set_down>
}
 800917e:	bf00      	nop
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	20001444 	.word	0x20001444
 8009188:	20001440 	.word	0x20001440
 800918c:	20001408 	.word	0x20001408
 8009190:	2000143c 	.word	0x2000143c
 8009194:	20001448 	.word	0x20001448
 8009198:	2000144c 	.word	0x2000144c
 800919c:	0800e949 	.word	0x0800e949
 80091a0:	080097ed 	.word	0x080097ed
 80091a4:	2000140c 	.word	0x2000140c

080091a8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b08e      	sub	sp, #56	; 0x38
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091b4:	2200      	movs	r2, #0
 80091b6:	601a      	str	r2, [r3, #0]
 80091b8:	605a      	str	r2, [r3, #4]
 80091ba:	609a      	str	r2, [r3, #8]
 80091bc:	60da      	str	r2, [r3, #12]
 80091be:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a52      	ldr	r2, [pc, #328]	; (8009310 <HAL_ETH_MspInit+0x168>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	f040 809e 	bne.w	8009308 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80091cc:	4b51      	ldr	r3, [pc, #324]	; (8009314 <HAL_ETH_MspInit+0x16c>)
 80091ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d0:	4a50      	ldr	r2, [pc, #320]	; (8009314 <HAL_ETH_MspInit+0x16c>)
 80091d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80091d6:	6313      	str	r3, [r2, #48]	; 0x30
 80091d8:	4b4e      	ldr	r3, [pc, #312]	; (8009314 <HAL_ETH_MspInit+0x16c>)
 80091da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091e0:	623b      	str	r3, [r7, #32]
 80091e2:	6a3b      	ldr	r3, [r7, #32]
 80091e4:	4b4b      	ldr	r3, [pc, #300]	; (8009314 <HAL_ETH_MspInit+0x16c>)
 80091e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e8:	4a4a      	ldr	r2, [pc, #296]	; (8009314 <HAL_ETH_MspInit+0x16c>)
 80091ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80091ee:	6313      	str	r3, [r2, #48]	; 0x30
 80091f0:	4b48      	ldr	r3, [pc, #288]	; (8009314 <HAL_ETH_MspInit+0x16c>)
 80091f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80091f8:	61fb      	str	r3, [r7, #28]
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	4b45      	ldr	r3, [pc, #276]	; (8009314 <HAL_ETH_MspInit+0x16c>)
 80091fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009200:	4a44      	ldr	r2, [pc, #272]	; (8009314 <HAL_ETH_MspInit+0x16c>)
 8009202:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009206:	6313      	str	r3, [r2, #48]	; 0x30
 8009208:	4b42      	ldr	r3, [pc, #264]	; (8009314 <HAL_ETH_MspInit+0x16c>)
 800920a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800920c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009210:	61bb      	str	r3, [r7, #24]
 8009212:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009214:	4b3f      	ldr	r3, [pc, #252]	; (8009314 <HAL_ETH_MspInit+0x16c>)
 8009216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009218:	4a3e      	ldr	r2, [pc, #248]	; (8009314 <HAL_ETH_MspInit+0x16c>)
 800921a:	f043 0304 	orr.w	r3, r3, #4
 800921e:	6313      	str	r3, [r2, #48]	; 0x30
 8009220:	4b3c      	ldr	r3, [pc, #240]	; (8009314 <HAL_ETH_MspInit+0x16c>)
 8009222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009224:	f003 0304 	and.w	r3, r3, #4
 8009228:	617b      	str	r3, [r7, #20]
 800922a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800922c:	4b39      	ldr	r3, [pc, #228]	; (8009314 <HAL_ETH_MspInit+0x16c>)
 800922e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009230:	4a38      	ldr	r2, [pc, #224]	; (8009314 <HAL_ETH_MspInit+0x16c>)
 8009232:	f043 0301 	orr.w	r3, r3, #1
 8009236:	6313      	str	r3, [r2, #48]	; 0x30
 8009238:	4b36      	ldr	r3, [pc, #216]	; (8009314 <HAL_ETH_MspInit+0x16c>)
 800923a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923c:	f003 0301 	and.w	r3, r3, #1
 8009240:	613b      	str	r3, [r7, #16]
 8009242:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009244:	4b33      	ldr	r3, [pc, #204]	; (8009314 <HAL_ETH_MspInit+0x16c>)
 8009246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009248:	4a32      	ldr	r2, [pc, #200]	; (8009314 <HAL_ETH_MspInit+0x16c>)
 800924a:	f043 0302 	orr.w	r3, r3, #2
 800924e:	6313      	str	r3, [r2, #48]	; 0x30
 8009250:	4b30      	ldr	r3, [pc, #192]	; (8009314 <HAL_ETH_MspInit+0x16c>)
 8009252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009254:	f003 0302 	and.w	r3, r3, #2
 8009258:	60fb      	str	r3, [r7, #12]
 800925a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800925c:	4b2d      	ldr	r3, [pc, #180]	; (8009314 <HAL_ETH_MspInit+0x16c>)
 800925e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009260:	4a2c      	ldr	r2, [pc, #176]	; (8009314 <HAL_ETH_MspInit+0x16c>)
 8009262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009266:	6313      	str	r3, [r2, #48]	; 0x30
 8009268:	4b2a      	ldr	r3, [pc, #168]	; (8009314 <HAL_ETH_MspInit+0x16c>)
 800926a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800926c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009270:	60bb      	str	r3, [r7, #8]
 8009272:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009274:	2332      	movs	r3, #50	; 0x32
 8009276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009278:	2302      	movs	r3, #2
 800927a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800927c:	2300      	movs	r3, #0
 800927e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009280:	2303      	movs	r3, #3
 8009282:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009284:	230b      	movs	r3, #11
 8009286:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800928c:	4619      	mov	r1, r3
 800928e:	4822      	ldr	r0, [pc, #136]	; (8009318 <HAL_ETH_MspInit+0x170>)
 8009290:	f7fc fa12 	bl	80056b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009294:	2386      	movs	r3, #134	; 0x86
 8009296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009298:	2302      	movs	r3, #2
 800929a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800929c:	2300      	movs	r3, #0
 800929e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092a0:	2303      	movs	r3, #3
 80092a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80092a4:	230b      	movs	r3, #11
 80092a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092ac:	4619      	mov	r1, r3
 80092ae:	481b      	ldr	r0, [pc, #108]	; (800931c <HAL_ETH_MspInit+0x174>)
 80092b0:	f7fc fa02 	bl	80056b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80092b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80092b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092ba:	2302      	movs	r3, #2
 80092bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092be:	2300      	movs	r3, #0
 80092c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092c2:	2303      	movs	r3, #3
 80092c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80092c6:	230b      	movs	r3, #11
 80092c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80092ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092ce:	4619      	mov	r1, r3
 80092d0:	4813      	ldr	r0, [pc, #76]	; (8009320 <HAL_ETH_MspInit+0x178>)
 80092d2:	f7fc f9f1 	bl	80056b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80092d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80092da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092dc:	2302      	movs	r3, #2
 80092de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092e0:	2300      	movs	r3, #0
 80092e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092e4:	2303      	movs	r3, #3
 80092e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80092e8:	230b      	movs	r3, #11
 80092ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80092ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092f0:	4619      	mov	r1, r3
 80092f2:	480c      	ldr	r0, [pc, #48]	; (8009324 <HAL_ETH_MspInit+0x17c>)
 80092f4:	f7fc f9e0 	bl	80056b8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80092f8:	2200      	movs	r2, #0
 80092fa:	2105      	movs	r1, #5
 80092fc:	203d      	movs	r0, #61	; 0x3d
 80092fe:	f7fb f99d 	bl	800463c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009302:	203d      	movs	r0, #61	; 0x3d
 8009304:	f7fb f9b6 	bl	8004674 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009308:	bf00      	nop
 800930a:	3738      	adds	r7, #56	; 0x38
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	40028000 	.word	0x40028000
 8009314:	40023800 	.word	0x40023800
 8009318:	40020800 	.word	0x40020800
 800931c:	40020000 	.word	0x40020000
 8009320:	40020400 	.word	0x40020400
 8009324:	40021800 	.word	0x40021800

08009328 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8009330:	4b04      	ldr	r3, [pc, #16]	; (8009344 <HAL_ETH_RxCpltCallback+0x1c>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4618      	mov	r0, r3
 8009336:	f000 fc59 	bl	8009bec <osSemaphoreRelease>
}
 800933a:	bf00      	nop
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	20000700 	.word	0x20000700

08009348 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8009348:	b5b0      	push	{r4, r5, r7, lr}
 800934a:	b090      	sub	sp, #64	; 0x40
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8009350:	2300      	movs	r3, #0
 8009352:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009354:	4b5c      	ldr	r3, [pc, #368]	; (80094c8 <low_level_init+0x180>)
 8009356:	4a5d      	ldr	r2, [pc, #372]	; (80094cc <low_level_init+0x184>)
 8009358:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800935a:	4b5b      	ldr	r3, [pc, #364]	; (80094c8 <low_level_init+0x180>)
 800935c:	2201      	movs	r2, #1
 800935e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8009360:	4b59      	ldr	r3, [pc, #356]	; (80094c8 <low_level_init+0x180>)
 8009362:	2200      	movs	r2, #0
 8009364:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8009366:	2300      	movs	r3, #0
 8009368:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800936c:	2380      	movs	r3, #128	; 0x80
 800936e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8009372:	23e1      	movs	r3, #225	; 0xe1
 8009374:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8009378:	2300      	movs	r3, #0
 800937a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800937e:	2300      	movs	r3, #0
 8009380:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8009384:	2300      	movs	r3, #0
 8009386:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800938a:	4a4f      	ldr	r2, [pc, #316]	; (80094c8 <low_level_init+0x180>)
 800938c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009390:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8009392:	4b4d      	ldr	r3, [pc, #308]	; (80094c8 <low_level_init+0x180>)
 8009394:	2201      	movs	r2, #1
 8009396:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8009398:	4b4b      	ldr	r3, [pc, #300]	; (80094c8 <low_level_init+0x180>)
 800939a:	2200      	movs	r2, #0
 800939c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800939e:	4b4a      	ldr	r3, [pc, #296]	; (80094c8 <low_level_init+0x180>)
 80093a0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80093a4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80093a6:	4848      	ldr	r0, [pc, #288]	; (80094c8 <low_level_init+0x180>)
 80093a8:	f7fb f994 	bl	80046d4 <HAL_ETH_Init>
 80093ac:	4603      	mov	r3, r0
 80093ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80093b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d108      	bne.n	80093cc <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80093c0:	f043 0304 	orr.w	r3, r3, #4
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80093cc:	2304      	movs	r3, #4
 80093ce:	4a40      	ldr	r2, [pc, #256]	; (80094d0 <low_level_init+0x188>)
 80093d0:	4940      	ldr	r1, [pc, #256]	; (80094d4 <low_level_init+0x18c>)
 80093d2:	483d      	ldr	r0, [pc, #244]	; (80094c8 <low_level_init+0x180>)
 80093d4:	f7fb fb1a 	bl	8004a0c <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80093d8:	2304      	movs	r3, #4
 80093da:	4a3f      	ldr	r2, [pc, #252]	; (80094d8 <low_level_init+0x190>)
 80093dc:	493f      	ldr	r1, [pc, #252]	; (80094dc <low_level_init+0x194>)
 80093de:	483a      	ldr	r0, [pc, #232]	; (80094c8 <low_level_init+0x180>)
 80093e0:	f7fb fb7d 	bl	8004ade <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2206      	movs	r2, #6
 80093e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80093ec:	4b36      	ldr	r3, [pc, #216]	; (80094c8 <low_level_init+0x180>)
 80093ee:	695b      	ldr	r3, [r3, #20]
 80093f0:	781a      	ldrb	r2, [r3, #0]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80093f8:	4b33      	ldr	r3, [pc, #204]	; (80094c8 <low_level_init+0x180>)
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	785a      	ldrb	r2, [r3, #1]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009404:	4b30      	ldr	r3, [pc, #192]	; (80094c8 <low_level_init+0x180>)
 8009406:	695b      	ldr	r3, [r3, #20]
 8009408:	789a      	ldrb	r2, [r3, #2]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009410:	4b2d      	ldr	r3, [pc, #180]	; (80094c8 <low_level_init+0x180>)
 8009412:	695b      	ldr	r3, [r3, #20]
 8009414:	78da      	ldrb	r2, [r3, #3]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800941c:	4b2a      	ldr	r3, [pc, #168]	; (80094c8 <low_level_init+0x180>)
 800941e:	695b      	ldr	r3, [r3, #20]
 8009420:	791a      	ldrb	r2, [r3, #4]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009428:	4b27      	ldr	r3, [pc, #156]	; (80094c8 <low_level_init+0x180>)
 800942a:	695b      	ldr	r3, [r3, #20]
 800942c:	795a      	ldrb	r2, [r3, #5]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800943a:	841a      	strh	r2, [r3, #32]
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009442:	f043 030a 	orr.w	r3, r3, #10
 8009446:	b2da      	uxtb	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800944e:	2300      	movs	r3, #0
 8009450:	62bb      	str	r3, [r7, #40]	; 0x28
 8009452:	2300      	movs	r3, #0
 8009454:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8009456:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800945a:	2101      	movs	r1, #1
 800945c:	4618      	mov	r0, r3
 800945e:	f000 fb43 	bl	8009ae8 <osSemaphoreCreate>
 8009462:	4602      	mov	r2, r0
 8009464:	4b1e      	ldr	r3, [pc, #120]	; (80094e0 <low_level_init+0x198>)
 8009466:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8009468:	4b1e      	ldr	r3, [pc, #120]	; (80094e4 <low_level_init+0x19c>)
 800946a:	f107 040c 	add.w	r4, r7, #12
 800946e:	461d      	mov	r5, r3
 8009470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009474:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009478:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800947c:	f107 030c 	add.w	r3, r7, #12
 8009480:	6879      	ldr	r1, [r7, #4]
 8009482:	4618      	mov	r0, r3
 8009484:	f000 fa28 	bl	80098d8 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8009488:	480f      	ldr	r0, [pc, #60]	; (80094c8 <low_level_init+0x180>)
 800948a:	f7fb fe50 	bl	800512e <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800948e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009492:	461a      	mov	r2, r3
 8009494:	211d      	movs	r1, #29
 8009496:	480c      	ldr	r0, [pc, #48]	; (80094c8 <low_level_init+0x180>)
 8009498:	f7fb fd7b 	bl	8004f92 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800949c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949e:	f043 030b 	orr.w	r3, r3, #11
 80094a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80094a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a6:	461a      	mov	r2, r3
 80094a8:	211d      	movs	r1, #29
 80094aa:	4807      	ldr	r0, [pc, #28]	; (80094c8 <low_level_init+0x180>)
 80094ac:	f7fb fdd9 	bl	8005062 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80094b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80094b4:	461a      	mov	r2, r3
 80094b6:	211d      	movs	r1, #29
 80094b8:	4803      	ldr	r0, [pc, #12]	; (80094c8 <low_level_init+0x180>)
 80094ba:	f7fb fd6a 	bl	8004f92 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 80094be:	bf00      	nop
 80094c0:	3740      	adds	r7, #64	; 0x40
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bdb0      	pop	{r4, r5, r7, pc}
 80094c6:	bf00      	nop
 80094c8:	20002d20 	.word	0x20002d20
 80094cc:	40028000 	.word	0x40028000
 80094d0:	20002d68 	.word	0x20002d68
 80094d4:	20001450 	.word	0x20001450
 80094d8:	200014d0 	.word	0x200014d0
 80094dc:	20002ca0 	.word	0x20002ca0
 80094e0:	20000700 	.word	0x20000700
 80094e4:	0801f888 	.word	0x0801f888

080094e8 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b08a      	sub	sp, #40	; 0x28
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80094f2:	4b4b      	ldr	r3, [pc, #300]	; (8009620 <low_level_output+0x138>)
 80094f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80094fa:	2300      	movs	r3, #0
 80094fc:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80094fe:	2300      	movs	r3, #0
 8009500:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8009502:	2300      	movs	r3, #0
 8009504:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8009506:	2300      	movs	r3, #0
 8009508:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800950a:	4b45      	ldr	r3, [pc, #276]	; (8009620 <low_level_output+0x138>)
 800950c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8009510:	2300      	movs	r3, #0
 8009512:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	623b      	str	r3, [r7, #32]
 8009518:	e05a      	b.n	80095d0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	da03      	bge.n	800952a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8009522:	23f8      	movs	r3, #248	; 0xf8
 8009524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8009528:	e05c      	b.n	80095e4 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	895b      	ldrh	r3, [r3, #10]
 800952e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8009530:	2300      	movs	r3, #0
 8009532:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009534:	e02f      	b.n	8009596 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8009536:	69fa      	ldr	r2, [r7, #28]
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	18d0      	adds	r0, r2, r3
 800953c:	6a3b      	ldr	r3, [r7, #32]
 800953e:	685a      	ldr	r2, [r3, #4]
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	18d1      	adds	r1, r2, r3
 8009544:	693a      	ldr	r2, [r7, #16]
 8009546:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800954a:	1a9b      	subs	r3, r3, r2
 800954c:	461a      	mov	r2, r3
 800954e:	f010 fd62 	bl	801a016 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	da03      	bge.n	8009568 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8009560:	23f8      	movs	r3, #248	; 0xf8
 8009562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8009566:	e03d      	b.n	80095e4 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800956e:	693a      	ldr	r2, [r7, #16]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	4413      	add	r3, r2
 8009574:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8009578:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	1ad3      	subs	r3, r2, r3
 8009580:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009584:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8009586:	697a      	ldr	r2, [r7, #20]
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	1ad3      	subs	r3, r2, r3
 800958c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009590:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8009592:	2300      	movs	r3, #0
 8009594:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009596:	68fa      	ldr	r2, [r7, #12]
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	4413      	add	r3, r2
 800959c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d8c8      	bhi.n	8009536 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80095a4:	69fa      	ldr	r2, [r7, #28]
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	18d0      	adds	r0, r2, r3
 80095aa:	6a3b      	ldr	r3, [r7, #32]
 80095ac:	685a      	ldr	r2, [r3, #4]
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	4413      	add	r3, r2
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	4619      	mov	r1, r3
 80095b6:	f010 fd2e 	bl	801a016 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80095ba:	693a      	ldr	r2, [r7, #16]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	4413      	add	r3, r2
 80095c0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80095c2:	697a      	ldr	r2, [r7, #20]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	4413      	add	r3, r2
 80095c8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80095ca:	6a3b      	ldr	r3, [r7, #32]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	623b      	str	r3, [r7, #32]
 80095d0:	6a3b      	ldr	r3, [r7, #32]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1a1      	bne.n	800951a <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 80095d6:	6979      	ldr	r1, [r7, #20]
 80095d8:	4811      	ldr	r0, [pc, #68]	; (8009620 <low_level_output+0x138>)
 80095da:	f7fb faed 	bl	8004bb8 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 80095de:	2300      	movs	r3, #0
 80095e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80095e4:	4b0e      	ldr	r3, [pc, #56]	; (8009620 <low_level_output+0x138>)
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	f241 0314 	movw	r3, #4116	; 0x1014
 80095ec:	4413      	add	r3, r2
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 0320 	and.w	r3, r3, #32
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d00d      	beq.n	8009614 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80095f8:	4b09      	ldr	r3, [pc, #36]	; (8009620 <low_level_output+0x138>)
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	f241 0314 	movw	r3, #4116	; 0x1014
 8009600:	4413      	add	r3, r2
 8009602:	2220      	movs	r2, #32
 8009604:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8009606:	4b06      	ldr	r3, [pc, #24]	; (8009620 <low_level_output+0x138>)
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	f241 0304 	movw	r3, #4100	; 0x1004
 800960e:	4413      	add	r3, r2
 8009610:	2200      	movs	r2, #0
 8009612:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8009614:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009618:	4618      	mov	r0, r3
 800961a:	3728      	adds	r7, #40	; 0x28
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	20002d20 	.word	0x20002d20

08009624 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b08c      	sub	sp, #48	; 0x30
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800962c:	2300      	movs	r3, #0
 800962e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8009630:	2300      	movs	r3, #0
 8009632:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8009634:	2300      	movs	r3, #0
 8009636:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8009638:	2300      	movs	r3, #0
 800963a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800963c:	2300      	movs	r3, #0
 800963e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8009640:	2300      	movs	r3, #0
 8009642:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8009644:	2300      	movs	r3, #0
 8009646:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8009648:	484f      	ldr	r0, [pc, #316]	; (8009788 <low_level_input+0x164>)
 800964a:	f7fb fb9f 	bl	8004d8c <HAL_ETH_GetReceivedFrame_IT>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <low_level_input+0x34>
  
    return NULL;
 8009654:	2300      	movs	r3, #0
 8009656:	e092      	b.n	800977e <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8009658:	4b4b      	ldr	r3, [pc, #300]	; (8009788 <low_level_input+0x164>)
 800965a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800965c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800965e:	4b4a      	ldr	r3, [pc, #296]	; (8009788 <low_level_input+0x164>)
 8009660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009662:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8009664:	89fb      	ldrh	r3, [r7, #14]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d007      	beq.n	800967a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800966a:	89fb      	ldrh	r3, [r7, #14]
 800966c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8009670:	4619      	mov	r1, r3
 8009672:	2000      	movs	r0, #0
 8009674:	f006 fa7a 	bl	800fb6c <pbuf_alloc>
 8009678:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 800967a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967c:	2b00      	cmp	r3, #0
 800967e:	d04b      	beq.n	8009718 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009680:	4b41      	ldr	r3, [pc, #260]	; (8009788 <low_level_input+0x164>)
 8009682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009684:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8009686:	2300      	movs	r3, #0
 8009688:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800968a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968c:	62bb      	str	r3, [r7, #40]	; 0x28
 800968e:	e040      	b.n	8009712 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8009690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009692:	895b      	ldrh	r3, [r3, #10]
 8009694:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8009696:	2300      	movs	r3, #0
 8009698:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800969a:	e021      	b.n	80096e0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800969c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969e:	685a      	ldr	r2, [r3, #4]
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	18d0      	adds	r0, r2, r3
 80096a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	18d1      	adds	r1, r2, r3
 80096aa:	69fa      	ldr	r2, [r7, #28]
 80096ac:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80096b0:	1a9b      	subs	r3, r3, r2
 80096b2:	461a      	mov	r2, r3
 80096b4:	f010 fcaf 	bl	801a016 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80096b8:	6a3b      	ldr	r3, [r7, #32]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80096be:	6a3b      	ldr	r3, [r7, #32]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80096c4:	69fa      	ldr	r2, [r7, #28]
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	4413      	add	r3, r2
 80096ca:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80096ce:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80096d0:	69ba      	ldr	r2, [r7, #24]
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	1ad3      	subs	r3, r2, r3
 80096d6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80096da:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80096dc:	2300      	movs	r3, #0
 80096de:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80096e0:	697a      	ldr	r2, [r7, #20]
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	4413      	add	r3, r2
 80096e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d8d6      	bhi.n	800969c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80096ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	18d0      	adds	r0, r2, r3
 80096f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	4413      	add	r3, r2
 80096fc:	697a      	ldr	r2, [r7, #20]
 80096fe:	4619      	mov	r1, r3
 8009700:	f010 fc89 	bl	801a016 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8009704:	69fa      	ldr	r2, [r7, #28]
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	4413      	add	r3, r2
 800970a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800970c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	62bb      	str	r3, [r7, #40]	; 0x28
 8009712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1bb      	bne.n	8009690 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009718:	4b1b      	ldr	r3, [pc, #108]	; (8009788 <low_level_input+0x164>)
 800971a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800971c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800971e:	2300      	movs	r3, #0
 8009720:	613b      	str	r3, [r7, #16]
 8009722:	e00b      	b.n	800973c <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8009724:	6a3b      	ldr	r3, [r7, #32]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800972c:	6a3b      	ldr	r3, [r7, #32]
 800972e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009730:	6a3b      	ldr	r3, [r7, #32]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	3301      	adds	r3, #1
 800973a:	613b      	str	r3, [r7, #16]
 800973c:	4b12      	ldr	r3, [pc, #72]	; (8009788 <low_level_input+0x164>)
 800973e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009740:	693a      	ldr	r2, [r7, #16]
 8009742:	429a      	cmp	r2, r3
 8009744:	d3ee      	bcc.n	8009724 <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8009746:	4b10      	ldr	r3, [pc, #64]	; (8009788 <low_level_input+0x164>)
 8009748:	2200      	movs	r2, #0
 800974a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800974c:	4b0e      	ldr	r3, [pc, #56]	; (8009788 <low_level_input+0x164>)
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	f241 0314 	movw	r3, #4116	; 0x1014
 8009754:	4413      	add	r3, r2
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00d      	beq.n	800977c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8009760:	4b09      	ldr	r3, [pc, #36]	; (8009788 <low_level_input+0x164>)
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	f241 0314 	movw	r3, #4116	; 0x1014
 8009768:	4413      	add	r3, r2
 800976a:	2280      	movs	r2, #128	; 0x80
 800976c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800976e:	4b06      	ldr	r3, [pc, #24]	; (8009788 <low_level_input+0x164>)
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	f241 0308 	movw	r3, #4104	; 0x1008
 8009776:	4413      	add	r3, r2
 8009778:	2200      	movs	r2, #0
 800977a:	601a      	str	r2, [r3, #0]
  }
  return p;
 800977c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800977e:	4618      	mov	r0, r3
 8009780:	3730      	adds	r7, #48	; 0x30
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	20002d20 	.word	0x20002d20

0800978c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009798:	4b12      	ldr	r3, [pc, #72]	; (80097e4 <ethernetif_input+0x58>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f04f 31ff 	mov.w	r1, #4294967295
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 f9d5 	bl	8009b50 <osSemaphoreWait>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1f5      	bne.n	8009798 <ethernetif_input+0xc>
    {
      do
      {   
        LOCK_TCPIP_CORE();
 80097ac:	480e      	ldr	r0, [pc, #56]	; (80097e8 <ethernetif_input+0x5c>)
 80097ae:	f010 faaf 	bl	8019d10 <sys_mutex_lock>
        p = low_level_input( netif );
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f7ff ff36 	bl	8009624 <low_level_input>
 80097b8:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00a      	beq.n	80097d6 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	691b      	ldr	r3, [r3, #16]
 80097c4:	68f9      	ldr	r1, [r7, #12]
 80097c6:	68b8      	ldr	r0, [r7, #8]
 80097c8:	4798      	blx	r3
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d002      	beq.n	80097d6 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80097d0:	68b8      	ldr	r0, [r7, #8]
 80097d2:	f006 fcab 	bl	801012c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80097d6:	4804      	ldr	r0, [pc, #16]	; (80097e8 <ethernetif_input+0x5c>)
 80097d8:	f010 faa9 	bl	8019d2e <sys_mutex_unlock>
      } while(p!=NULL);
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1e4      	bne.n	80097ac <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80097e2:	e7d9      	b.n	8009798 <ethernetif_input+0xc>
 80097e4:	20000700 	.word	0x20000700
 80097e8:	20004584 	.word	0x20004584

080097ec <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d106      	bne.n	8009808 <ethernetif_init+0x1c>
 80097fa:	4b0e      	ldr	r3, [pc, #56]	; (8009834 <ethernetif_init+0x48>)
 80097fc:	f240 2235 	movw	r2, #565	; 0x235
 8009800:	490d      	ldr	r1, [pc, #52]	; (8009838 <ethernetif_init+0x4c>)
 8009802:	480e      	ldr	r0, [pc, #56]	; (800983c <ethernetif_init+0x50>)
 8009804:	f011 faf0 	bl	801ade8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2273      	movs	r2, #115	; 0x73
 800980c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2274      	movs	r2, #116	; 0x74
 8009814:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a09      	ldr	r2, [pc, #36]	; (8009840 <ethernetif_init+0x54>)
 800981c:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	4a08      	ldr	r2, [pc, #32]	; (8009844 <ethernetif_init+0x58>)
 8009822:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f7ff fd8f 	bl	8009348 <low_level_init>

  return ERR_OK;
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	0801f8a4 	.word	0x0801f8a4
 8009838:	0801f8c0 	.word	0x0801f8c0
 800983c:	0801f8d0 	.word	0x0801f8d0
 8009840:	08017d31 	.word	0x08017d31
 8009844:	080094e9 	.word	0x080094e9

08009848 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800984c:	f7fa fa36 	bl	8003cbc <HAL_GetTick>
 8009850:	4603      	mov	r3, r0
}
 8009852:	4618      	mov	r0, r3
 8009854:	bd80      	pop	{r7, pc}

08009856 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009856:	b480      	push	{r7}
 8009858:	b085      	sub	sp, #20
 800985a:	af00      	add	r7, sp, #0
 800985c:	4603      	mov	r3, r0
 800985e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009860:	2300      	movs	r3, #0
 8009862:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009864:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009868:	2b84      	cmp	r3, #132	; 0x84
 800986a:	d005      	beq.n	8009878 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800986c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	4413      	add	r3, r2
 8009874:	3303      	adds	r3, #3
 8009876:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009878:	68fb      	ldr	r3, [r7, #12]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3714      	adds	r7, #20
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009886:	b480      	push	{r7}
 8009888:	b083      	sub	sp, #12
 800988a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800988c:	f3ef 8305 	mrs	r3, IPSR
 8009890:	607b      	str	r3, [r7, #4]
  return(result);
 8009892:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009894:	2b00      	cmp	r3, #0
 8009896:	bf14      	ite	ne
 8009898:	2301      	movne	r3, #1
 800989a:	2300      	moveq	r3, #0
 800989c:	b2db      	uxtb	r3, r3
}
 800989e:	4618      	mov	r0, r3
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80098ae:	f001 fe0d 	bl	800b4cc <vTaskStartScheduler>
  
  return osOK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80098bc:	f7ff ffe3 	bl	8009886 <inHandlerMode>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d003      	beq.n	80098ce <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80098c6:	f001 ff29 	bl	800b71c <xTaskGetTickCountFromISR>
 80098ca:	4603      	mov	r3, r0
 80098cc:	e002      	b.n	80098d4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80098ce:	f001 ff15 	bl	800b6fc <xTaskGetTickCount>
 80098d2:	4603      	mov	r3, r0
  }
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80098d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098da:	b089      	sub	sp, #36	; 0x24
 80098dc:	af04      	add	r7, sp, #16
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d020      	beq.n	800992c <osThreadCreate+0x54>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	699b      	ldr	r3, [r3, #24]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d01c      	beq.n	800992c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	685c      	ldr	r4, [r3, #4]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681d      	ldr	r5, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	691e      	ldr	r6, [r3, #16]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009904:	4618      	mov	r0, r3
 8009906:	f7ff ffa6 	bl	8009856 <makeFreeRtosPriority>
 800990a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	695b      	ldr	r3, [r3, #20]
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009914:	9202      	str	r2, [sp, #8]
 8009916:	9301      	str	r3, [sp, #4]
 8009918:	9100      	str	r1, [sp, #0]
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	4632      	mov	r2, r6
 800991e:	4629      	mov	r1, r5
 8009920:	4620      	mov	r0, r4
 8009922:	f001 fb55 	bl	800afd0 <xTaskCreateStatic>
 8009926:	4603      	mov	r3, r0
 8009928:	60fb      	str	r3, [r7, #12]
 800992a:	e01c      	b.n	8009966 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	685c      	ldr	r4, [r3, #4]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009938:	b29e      	uxth	r6, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009940:	4618      	mov	r0, r3
 8009942:	f7ff ff88 	bl	8009856 <makeFreeRtosPriority>
 8009946:	4602      	mov	r2, r0
 8009948:	f107 030c 	add.w	r3, r7, #12
 800994c:	9301      	str	r3, [sp, #4]
 800994e:	9200      	str	r2, [sp, #0]
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	4632      	mov	r2, r6
 8009954:	4629      	mov	r1, r5
 8009956:	4620      	mov	r0, r4
 8009958:	f001 fb9a 	bl	800b090 <xTaskCreate>
 800995c:	4603      	mov	r3, r0
 800995e:	2b01      	cmp	r3, #1
 8009960:	d001      	beq.n	8009966 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009962:	2300      	movs	r3, #0
 8009964:	e000      	b.n	8009968 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009966:	68fb      	ldr	r3, [r7, #12]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3714      	adds	r7, #20
 800996c:	46bd      	mov	sp, r7
 800996e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009970 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f001 fce1 	bl	800b340 <vTaskDelete>
  return osOK;
 800997e:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8009980:	4618      	mov	r0, r3
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d001      	beq.n	800999e <osDelay+0x16>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	e000      	b.n	80099a0 <osDelay+0x18>
 800999e:	2301      	movs	r3, #1
 80099a0:	4618      	mov	r0, r3
 80099a2:	f001 fd5d 	bl	800b460 <vTaskDelay>
  
  return osOK;
 80099a6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d007      	beq.n	80099d0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	4619      	mov	r1, r3
 80099c6:	2001      	movs	r0, #1
 80099c8:	f000 fc8d 	bl	800a2e6 <xQueueCreateMutexStatic>
 80099cc:	4603      	mov	r3, r0
 80099ce:	e003      	b.n	80099d8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80099d0:	2001      	movs	r0, #1
 80099d2:	f000 fc70 	bl	800a2b6 <xQueueCreateMutex>
 80099d6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80099ea:	2300      	movs	r3, #0
 80099ec:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d101      	bne.n	80099f8 <osMutexWait+0x18>
    return osErrorParameter;
 80099f4:	2380      	movs	r3, #128	; 0x80
 80099f6:	e03a      	b.n	8009a6e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80099f8:	2300      	movs	r3, #0
 80099fa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a02:	d103      	bne.n	8009a0c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009a04:	f04f 33ff 	mov.w	r3, #4294967295
 8009a08:	60fb      	str	r3, [r7, #12]
 8009a0a:	e009      	b.n	8009a20 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d006      	beq.n	8009a20 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d101      	bne.n	8009a20 <osMutexWait+0x40>
      ticks = 1;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009a20:	f7ff ff31 	bl	8009886 <inHandlerMode>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d017      	beq.n	8009a5a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009a2a:	f107 0308 	add.w	r3, r7, #8
 8009a2e:	461a      	mov	r2, r3
 8009a30:	2100      	movs	r1, #0
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f001 f894 	bl	800ab60 <xQueueReceiveFromISR>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d001      	beq.n	8009a42 <osMutexWait+0x62>
      return osErrorOS;
 8009a3e:	23ff      	movs	r3, #255	; 0xff
 8009a40:	e015      	b.n	8009a6e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d011      	beq.n	8009a6c <osMutexWait+0x8c>
 8009a48:	4b0b      	ldr	r3, [pc, #44]	; (8009a78 <osMutexWait+0x98>)
 8009a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a4e:	601a      	str	r2, [r3, #0]
 8009a50:	f3bf 8f4f 	dsb	sy
 8009a54:	f3bf 8f6f 	isb	sy
 8009a58:	e008      	b.n	8009a6c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009a5a:	68f9      	ldr	r1, [r7, #12]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 ff6f 	bl	800a940 <xQueueSemaphoreTake>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d001      	beq.n	8009a6c <osMutexWait+0x8c>
    return osErrorOS;
 8009a68:	23ff      	movs	r3, #255	; 0xff
 8009a6a:	e000      	b.n	8009a6e <osMutexWait+0x8e>
  }
  
  return osOK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	e000ed04 	.word	0xe000ed04

08009a7c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009a84:	2300      	movs	r3, #0
 8009a86:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009a8c:	f7ff fefb 	bl	8009886 <inHandlerMode>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d016      	beq.n	8009ac4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009a96:	f107 0308 	add.w	r3, r7, #8
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 fddb 	bl	800a658 <xQueueGiveFromISR>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d001      	beq.n	8009aac <osMutexRelease+0x30>
      return osErrorOS;
 8009aa8:	23ff      	movs	r3, #255	; 0xff
 8009aaa:	e017      	b.n	8009adc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d013      	beq.n	8009ada <osMutexRelease+0x5e>
 8009ab2:	4b0c      	ldr	r3, [pc, #48]	; (8009ae4 <osMutexRelease+0x68>)
 8009ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ab8:	601a      	str	r2, [r3, #0]
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	e00a      	b.n	8009ada <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	2100      	movs	r1, #0
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 fc26 	bl	800a31c <xQueueGenericSend>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d001      	beq.n	8009ada <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009ad6:	23ff      	movs	r3, #255	; 0xff
 8009ad8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009ada:	68fb      	ldr	r3, [r7, #12]
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3710      	adds	r7, #16
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	e000ed04 	.word	0xe000ed04

08009ae8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b086      	sub	sp, #24
 8009aec:	af02      	add	r7, sp, #8
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d010      	beq.n	8009b1c <osSemaphoreCreate+0x34>
    if (count == 1) {
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d10b      	bne.n	8009b18 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685a      	ldr	r2, [r3, #4]
 8009b04:	2303      	movs	r3, #3
 8009b06:	9300      	str	r3, [sp, #0]
 8009b08:	4613      	mov	r3, r2
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	2001      	movs	r0, #1
 8009b10:	f000 fada 	bl	800a0c8 <xQueueGenericCreateStatic>
 8009b14:	4603      	mov	r3, r0
 8009b16:	e016      	b.n	8009b46 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	e014      	b.n	8009b46 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d110      	bne.n	8009b44 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8009b22:	2203      	movs	r2, #3
 8009b24:	2100      	movs	r1, #0
 8009b26:	2001      	movs	r0, #1
 8009b28:	f000 fb4b 	bl	800a1c2 <xQueueGenericCreate>
 8009b2c:	60f8      	str	r0, [r7, #12]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d005      	beq.n	8009b40 <osSemaphoreCreate+0x58>
 8009b34:	2300      	movs	r3, #0
 8009b36:	2200      	movs	r2, #0
 8009b38:	2100      	movs	r1, #0
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f000 fbee 	bl	800a31c <xQueueGenericSend>
      return sema;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	e000      	b.n	8009b46 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009b44:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3710      	adds	r7, #16
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
	...

08009b50 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d101      	bne.n	8009b68 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009b64:	2380      	movs	r3, #128	; 0x80
 8009b66:	e03a      	b.n	8009bde <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b72:	d103      	bne.n	8009b7c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009b74:	f04f 33ff 	mov.w	r3, #4294967295
 8009b78:	60fb      	str	r3, [r7, #12]
 8009b7a:	e009      	b.n	8009b90 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d006      	beq.n	8009b90 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d101      	bne.n	8009b90 <osSemaphoreWait+0x40>
      ticks = 1;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009b90:	f7ff fe79 	bl	8009886 <inHandlerMode>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d017      	beq.n	8009bca <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009b9a:	f107 0308 	add.w	r3, r7, #8
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 ffdc 	bl	800ab60 <xQueueReceiveFromISR>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d001      	beq.n	8009bb2 <osSemaphoreWait+0x62>
      return osErrorOS;
 8009bae:	23ff      	movs	r3, #255	; 0xff
 8009bb0:	e015      	b.n	8009bde <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d011      	beq.n	8009bdc <osSemaphoreWait+0x8c>
 8009bb8:	4b0b      	ldr	r3, [pc, #44]	; (8009be8 <osSemaphoreWait+0x98>)
 8009bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bbe:	601a      	str	r2, [r3, #0]
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	f3bf 8f6f 	isb	sy
 8009bc8:	e008      	b.n	8009bdc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009bca:	68f9      	ldr	r1, [r7, #12]
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 feb7 	bl	800a940 <xQueueSemaphoreTake>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d001      	beq.n	8009bdc <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009bd8:	23ff      	movs	r3, #255	; 0xff
 8009bda:	e000      	b.n	8009bde <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	e000ed04 	.word	0xe000ed04

08009bec <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009bfc:	f7ff fe43 	bl	8009886 <inHandlerMode>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d016      	beq.n	8009c34 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009c06:	f107 0308 	add.w	r3, r7, #8
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 fd23 	bl	800a658 <xQueueGiveFromISR>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d001      	beq.n	8009c1c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009c18:	23ff      	movs	r3, #255	; 0xff
 8009c1a:	e017      	b.n	8009c4c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d013      	beq.n	8009c4a <osSemaphoreRelease+0x5e>
 8009c22:	4b0c      	ldr	r3, [pc, #48]	; (8009c54 <osSemaphoreRelease+0x68>)
 8009c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c28:	601a      	str	r2, [r3, #0]
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	f3bf 8f6f 	isb	sy
 8009c32:	e00a      	b.n	8009c4a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009c34:	2300      	movs	r3, #0
 8009c36:	2200      	movs	r2, #0
 8009c38:	2100      	movs	r1, #0
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 fb6e 	bl	800a31c <xQueueGenericSend>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d001      	beq.n	8009c4a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009c46:	23ff      	movs	r3, #255	; 0xff
 8009c48:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	e000ed04 	.word	0xe000ed04

08009c58 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009c60:	f7ff fe11 	bl	8009886 <inHandlerMode>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d001      	beq.n	8009c6e <osSemaphoreDelete+0x16>
    return osErrorISR;
 8009c6a:	2382      	movs	r3, #130	; 0x82
 8009c6c:	e003      	b.n	8009c76 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f001 f837 	bl	800ace2 <vQueueDelete>

  return osOK; 
 8009c74:	2300      	movs	r3, #0
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3708      	adds	r7, #8
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009c7e:	b590      	push	{r4, r7, lr}
 8009c80:	b085      	sub	sp, #20
 8009c82:	af02      	add	r7, sp, #8
 8009c84:	6078      	str	r0, [r7, #4]
 8009c86:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d012      	beq.n	8009cb6 <osMessageCreate+0x38>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00e      	beq.n	8009cb6 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6818      	ldr	r0, [r3, #0]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6859      	ldr	r1, [r3, #4]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	689a      	ldr	r2, [r3, #8]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	68dc      	ldr	r4, [r3, #12]
 8009ca8:	2300      	movs	r3, #0
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	4623      	mov	r3, r4
 8009cae:	f000 fa0b 	bl	800a0c8 <xQueueGenericCreateStatic>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	e008      	b.n	8009cc8 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6818      	ldr	r0, [r3, #0]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	f000 fa7e 	bl	800a1c2 <xQueueGenericCreate>
 8009cc6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	370c      	adds	r7, #12
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd90      	pop	{r4, r7, pc}

08009cd0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b086      	sub	sp, #24
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d101      	bne.n	8009cee <osMessagePut+0x1e>
    ticks = 1;
 8009cea:	2301      	movs	r3, #1
 8009cec:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009cee:	f7ff fdca 	bl	8009886 <inHandlerMode>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d018      	beq.n	8009d2a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009cf8:	f107 0210 	add.w	r2, r7, #16
 8009cfc:	f107 0108 	add.w	r1, r7, #8
 8009d00:	2300      	movs	r3, #0
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	f000 fc0c 	bl	800a520 <xQueueGenericSendFromISR>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d001      	beq.n	8009d12 <osMessagePut+0x42>
      return osErrorOS;
 8009d0e:	23ff      	movs	r3, #255	; 0xff
 8009d10:	e018      	b.n	8009d44 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d014      	beq.n	8009d42 <osMessagePut+0x72>
 8009d18:	4b0c      	ldr	r3, [pc, #48]	; (8009d4c <osMessagePut+0x7c>)
 8009d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d1e:	601a      	str	r2, [r3, #0]
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	e00b      	b.n	8009d42 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009d2a:	f107 0108 	add.w	r1, r7, #8
 8009d2e:	2300      	movs	r3, #0
 8009d30:	697a      	ldr	r2, [r7, #20]
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f000 faf2 	bl	800a31c <xQueueGenericSend>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d001      	beq.n	8009d42 <osMessagePut+0x72>
      return osErrorOS;
 8009d3e:	23ff      	movs	r3, #255	; 0xff
 8009d40:	e000      	b.n	8009d44 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3718      	adds	r7, #24
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	e000ed04 	.word	0xe000ed04

08009d50 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009d50:	b590      	push	{r4, r7, lr}
 8009d52:	b08b      	sub	sp, #44	; 0x2c
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009d60:	2300      	movs	r3, #0
 8009d62:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10a      	bne.n	8009d80 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009d6a:	2380      	movs	r3, #128	; 0x80
 8009d6c:	617b      	str	r3, [r7, #20]
    return event;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	461c      	mov	r4, r3
 8009d72:	f107 0314 	add.w	r3, r7, #20
 8009d76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009d7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009d7e:	e054      	b.n	8009e2a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009d80:	2300      	movs	r3, #0
 8009d82:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009d84:	2300      	movs	r3, #0
 8009d86:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d8e:	d103      	bne.n	8009d98 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009d90:	f04f 33ff 	mov.w	r3, #4294967295
 8009d94:	627b      	str	r3, [r7, #36]	; 0x24
 8009d96:	e009      	b.n	8009dac <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d006      	beq.n	8009dac <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d101      	bne.n	8009dac <osMessageGet+0x5c>
      ticks = 1;
 8009da8:	2301      	movs	r3, #1
 8009daa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009dac:	f7ff fd6b 	bl	8009886 <inHandlerMode>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d01c      	beq.n	8009df0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009db6:	f107 0220 	add.w	r2, r7, #32
 8009dba:	f107 0314 	add.w	r3, r7, #20
 8009dbe:	3304      	adds	r3, #4
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	68b8      	ldr	r0, [r7, #8]
 8009dc4:	f000 fecc 	bl	800ab60 <xQueueReceiveFromISR>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d102      	bne.n	8009dd4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009dce:	2310      	movs	r3, #16
 8009dd0:	617b      	str	r3, [r7, #20]
 8009dd2:	e001      	b.n	8009dd8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009dd8:	6a3b      	ldr	r3, [r7, #32]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d01d      	beq.n	8009e1a <osMessageGet+0xca>
 8009dde:	4b15      	ldr	r3, [pc, #84]	; (8009e34 <osMessageGet+0xe4>)
 8009de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009de4:	601a      	str	r2, [r3, #0]
 8009de6:	f3bf 8f4f 	dsb	sy
 8009dea:	f3bf 8f6f 	isb	sy
 8009dee:	e014      	b.n	8009e1a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009df0:	f107 0314 	add.w	r3, r7, #20
 8009df4:	3304      	adds	r3, #4
 8009df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009df8:	4619      	mov	r1, r3
 8009dfa:	68b8      	ldr	r0, [r7, #8]
 8009dfc:	f000 fcbe 	bl	800a77c <xQueueReceive>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d102      	bne.n	8009e0c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009e06:	2310      	movs	r3, #16
 8009e08:	617b      	str	r3, [r7, #20]
 8009e0a:	e006      	b.n	8009e1a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d101      	bne.n	8009e16 <osMessageGet+0xc6>
 8009e12:	2300      	movs	r3, #0
 8009e14:	e000      	b.n	8009e18 <osMessageGet+0xc8>
 8009e16:	2340      	movs	r3, #64	; 0x40
 8009e18:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	461c      	mov	r4, r3
 8009e1e:	f107 0314 	add.w	r3, r7, #20
 8009e22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	372c      	adds	r7, #44	; 0x2c
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd90      	pop	{r4, r7, pc}
 8009e32:	bf00      	nop
 8009e34:	e000ed04 	.word	0xe000ed04

08009e38 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009e40:	f7ff fd21 	bl	8009886 <inHandlerMode>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d004      	beq.n	8009e54 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 ff2a 	bl	800aca4 <uxQueueMessagesWaitingFromISR>
 8009e50:	4603      	mov	r3, r0
 8009e52:	e003      	b.n	8009e5c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 ff06 	bl	800ac66 <uxQueueMessagesWaiting>
 8009e5a:	4603      	mov	r3, r0
  }
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3708      	adds	r7, #8
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009e6c:	f7ff fd0b 	bl	8009886 <inHandlerMode>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d001      	beq.n	8009e7a <osMessageDelete+0x16>
    return osErrorISR;
 8009e76:	2382      	movs	r3, #130	; 0x82
 8009e78:	e003      	b.n	8009e82 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 ff31 	bl	800ace2 <vQueueDelete>

  return osOK; 
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e8a:	b480      	push	{r7}
 8009e8c:	b083      	sub	sp, #12
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f103 0208 	add.w	r2, r3, #8
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f103 0208 	add.w	r2, r3, #8
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f103 0208 	add.w	r2, r3, #8
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009ebe:	bf00      	nop
 8009ec0:	370c      	adds	r7, #12
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr

08009eca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009eca:	b480      	push	{r7}
 8009ecc:	b083      	sub	sp, #12
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	689a      	ldr	r2, [r3, #8]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	683a      	ldr	r2, [r7, #0]
 8009f08:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	683a      	ldr	r2, [r7, #0]
 8009f0e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	1c5a      	adds	r2, r3, #1
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	601a      	str	r2, [r3, #0]
}
 8009f20:	bf00      	nop
 8009f22:	3714      	adds	r7, #20
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f42:	d103      	bne.n	8009f4c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	691b      	ldr	r3, [r3, #16]
 8009f48:	60fb      	str	r3, [r7, #12]
 8009f4a:	e00c      	b.n	8009f66 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	3308      	adds	r3, #8
 8009f50:	60fb      	str	r3, [r7, #12]
 8009f52:	e002      	b.n	8009f5a <vListInsert+0x2e>
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	60fb      	str	r3, [r7, #12]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d2f6      	bcs.n	8009f54 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	685a      	ldr	r2, [r3, #4]
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	683a      	ldr	r2, [r7, #0]
 8009f74:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	1c5a      	adds	r2, r3, #1
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	601a      	str	r2, [r3, #0]
}
 8009f92:	bf00      	nop
 8009f94:	3714      	adds	r7, #20
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr

08009f9e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f9e:	b480      	push	{r7}
 8009fa0:	b085      	sub	sp, #20
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	691b      	ldr	r3, [r3, #16]
 8009faa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	6892      	ldr	r2, [r2, #8]
 8009fb4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	6852      	ldr	r2, [r2, #4]
 8009fbe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d103      	bne.n	8009fd2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	689a      	ldr	r2, [r3, #8]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	1e5a      	subs	r2, r3, #1
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3714      	adds	r7, #20
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
	...

08009ff4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d10b      	bne.n	800a020 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00c:	b672      	cpsid	i
 800a00e:	f383 8811 	msr	BASEPRI, r3
 800a012:	f3bf 8f6f 	isb	sy
 800a016:	f3bf 8f4f 	dsb	sy
 800a01a:	b662      	cpsie	i
 800a01c:	60bb      	str	r3, [r7, #8]
 800a01e:	e7fe      	b.n	800a01e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800a020:	f002 fa02 	bl	800c428 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a02c:	68f9      	ldr	r1, [r7, #12]
 800a02e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a030:	fb01 f303 	mul.w	r3, r1, r3
 800a034:	441a      	add	r2, r3
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2200      	movs	r2, #0
 800a03e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a050:	3b01      	subs	r3, #1
 800a052:	68f9      	ldr	r1, [r7, #12]
 800a054:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a056:	fb01 f303 	mul.w	r3, r1, r3
 800a05a:	441a      	add	r2, r3
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	22ff      	movs	r2, #255	; 0xff
 800a064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	22ff      	movs	r2, #255	; 0xff
 800a06c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d114      	bne.n	800a0a0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d01a      	beq.n	800a0b4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	3310      	adds	r3, #16
 800a082:	4618      	mov	r0, r3
 800a084:	f001 fcc4 	bl	800ba10 <xTaskRemoveFromEventList>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d012      	beq.n	800a0b4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a08e:	4b0d      	ldr	r3, [pc, #52]	; (800a0c4 <xQueueGenericReset+0xd0>)
 800a090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a094:	601a      	str	r2, [r3, #0]
 800a096:	f3bf 8f4f 	dsb	sy
 800a09a:	f3bf 8f6f 	isb	sy
 800a09e:	e009      	b.n	800a0b4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	3310      	adds	r3, #16
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7ff fef0 	bl	8009e8a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	3324      	adds	r3, #36	; 0x24
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7ff feeb 	bl	8009e8a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a0b4:	f002 f9ea 	bl	800c48c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a0b8:	2301      	movs	r3, #1
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	e000ed04 	.word	0xe000ed04

0800a0c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b08e      	sub	sp, #56	; 0x38
 800a0cc:	af02      	add	r7, sp, #8
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]
 800a0d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10b      	bne.n	800a0f4 <xQueueGenericCreateStatic+0x2c>
 800a0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e0:	b672      	cpsid	i
 800a0e2:	f383 8811 	msr	BASEPRI, r3
 800a0e6:	f3bf 8f6f 	isb	sy
 800a0ea:	f3bf 8f4f 	dsb	sy
 800a0ee:	b662      	cpsie	i
 800a0f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0f2:	e7fe      	b.n	800a0f2 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d10b      	bne.n	800a112 <xQueueGenericCreateStatic+0x4a>
 800a0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fe:	b672      	cpsid	i
 800a100:	f383 8811 	msr	BASEPRI, r3
 800a104:	f3bf 8f6f 	isb	sy
 800a108:	f3bf 8f4f 	dsb	sy
 800a10c:	b662      	cpsie	i
 800a10e:	627b      	str	r3, [r7, #36]	; 0x24
 800a110:	e7fe      	b.n	800a110 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d002      	beq.n	800a11e <xQueueGenericCreateStatic+0x56>
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d001      	beq.n	800a122 <xQueueGenericCreateStatic+0x5a>
 800a11e:	2301      	movs	r3, #1
 800a120:	e000      	b.n	800a124 <xQueueGenericCreateStatic+0x5c>
 800a122:	2300      	movs	r3, #0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d10b      	bne.n	800a140 <xQueueGenericCreateStatic+0x78>
 800a128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12c:	b672      	cpsid	i
 800a12e:	f383 8811 	msr	BASEPRI, r3
 800a132:	f3bf 8f6f 	isb	sy
 800a136:	f3bf 8f4f 	dsb	sy
 800a13a:	b662      	cpsie	i
 800a13c:	623b      	str	r3, [r7, #32]
 800a13e:	e7fe      	b.n	800a13e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d102      	bne.n	800a14c <xQueueGenericCreateStatic+0x84>
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d101      	bne.n	800a150 <xQueueGenericCreateStatic+0x88>
 800a14c:	2301      	movs	r3, #1
 800a14e:	e000      	b.n	800a152 <xQueueGenericCreateStatic+0x8a>
 800a150:	2300      	movs	r3, #0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d10b      	bne.n	800a16e <xQueueGenericCreateStatic+0xa6>
 800a156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15a:	b672      	cpsid	i
 800a15c:	f383 8811 	msr	BASEPRI, r3
 800a160:	f3bf 8f6f 	isb	sy
 800a164:	f3bf 8f4f 	dsb	sy
 800a168:	b662      	cpsie	i
 800a16a:	61fb      	str	r3, [r7, #28]
 800a16c:	e7fe      	b.n	800a16c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a16e:	2348      	movs	r3, #72	; 0x48
 800a170:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	2b48      	cmp	r3, #72	; 0x48
 800a176:	d00b      	beq.n	800a190 <xQueueGenericCreateStatic+0xc8>
 800a178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17c:	b672      	cpsid	i
 800a17e:	f383 8811 	msr	BASEPRI, r3
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	f3bf 8f4f 	dsb	sy
 800a18a:	b662      	cpsie	i
 800a18c:	61bb      	str	r3, [r7, #24]
 800a18e:	e7fe      	b.n	800a18e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a190:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00d      	beq.n	800a1b8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a1a4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1aa:	9300      	str	r3, [sp, #0]
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	68b9      	ldr	r1, [r7, #8]
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f000 f846 	bl	800a244 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3730      	adds	r7, #48	; 0x30
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b08a      	sub	sp, #40	; 0x28
 800a1c6:	af02      	add	r7, sp, #8
 800a1c8:	60f8      	str	r0, [r7, #12]
 800a1ca:	60b9      	str	r1, [r7, #8]
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10b      	bne.n	800a1ee <xQueueGenericCreate+0x2c>
 800a1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1da:	b672      	cpsid	i
 800a1dc:	f383 8811 	msr	BASEPRI, r3
 800a1e0:	f3bf 8f6f 	isb	sy
 800a1e4:	f3bf 8f4f 	dsb	sy
 800a1e8:	b662      	cpsie	i
 800a1ea:	613b      	str	r3, [r7, #16]
 800a1ec:	e7fe      	b.n	800a1ec <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d102      	bne.n	800a1fa <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	61fb      	str	r3, [r7, #28]
 800a1f8:	e004      	b.n	800a204 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	68ba      	ldr	r2, [r7, #8]
 800a1fe:	fb02 f303 	mul.w	r3, r2, r3
 800a202:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	3348      	adds	r3, #72	; 0x48
 800a208:	4618      	mov	r0, r3
 800a20a:	f002 fabf 	bl	800c78c <pvPortMalloc>
 800a20e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d011      	beq.n	800a23a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	3348      	adds	r3, #72	; 0x48
 800a21e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	2200      	movs	r2, #0
 800a224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a228:	79fa      	ldrb	r2, [r7, #7]
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	9300      	str	r3, [sp, #0]
 800a22e:	4613      	mov	r3, r2
 800a230:	697a      	ldr	r2, [r7, #20]
 800a232:	68b9      	ldr	r1, [r7, #8]
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f000 f805 	bl	800a244 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a23a:	69bb      	ldr	r3, [r7, #24]
	}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3720      	adds	r7, #32
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
 800a250:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d103      	bne.n	800a260 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a258:	69bb      	ldr	r3, [r7, #24]
 800a25a:	69ba      	ldr	r2, [r7, #24]
 800a25c:	601a      	str	r2, [r3, #0]
 800a25e:	e002      	b.n	800a266 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	68ba      	ldr	r2, [r7, #8]
 800a270:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a272:	2101      	movs	r1, #1
 800a274:	69b8      	ldr	r0, [r7, #24]
 800a276:	f7ff febd 	bl	8009ff4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a27a:	bf00      	nop
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a282:	b580      	push	{r7, lr}
 800a284:	b082      	sub	sp, #8
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00e      	beq.n	800a2ae <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	2100      	movs	r1, #0
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 f837 	bl	800a31c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a2ae:	bf00      	nop
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b086      	sub	sp, #24
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	4603      	mov	r3, r0
 800a2be:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	617b      	str	r3, [r7, #20]
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a2c8:	79fb      	ldrb	r3, [r7, #7]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	6939      	ldr	r1, [r7, #16]
 800a2ce:	6978      	ldr	r0, [r7, #20]
 800a2d0:	f7ff ff77 	bl	800a1c2 <xQueueGenericCreate>
 800a2d4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a2d6:	68f8      	ldr	r0, [r7, #12]
 800a2d8:	f7ff ffd3 	bl	800a282 <prvInitialiseMutex>

		return xNewQueue;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
	}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3718      	adds	r7, #24
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b088      	sub	sp, #32
 800a2ea:	af02      	add	r7, sp, #8
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	6039      	str	r1, [r7, #0]
 800a2f0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	617b      	str	r3, [r7, #20]
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a2fa:	79fb      	ldrb	r3, [r7, #7]
 800a2fc:	9300      	str	r3, [sp, #0]
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	2200      	movs	r2, #0
 800a302:	6939      	ldr	r1, [r7, #16]
 800a304:	6978      	ldr	r0, [r7, #20]
 800a306:	f7ff fedf 	bl	800a0c8 <xQueueGenericCreateStatic>
 800a30a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	f7ff ffb8 	bl	800a282 <prvInitialiseMutex>

		return xNewQueue;
 800a312:	68fb      	ldr	r3, [r7, #12]
	}
 800a314:	4618      	mov	r0, r3
 800a316:	3718      	adds	r7, #24
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b08e      	sub	sp, #56	; 0x38
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
 800a328:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a32a:	2300      	movs	r3, #0
 800a32c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a334:	2b00      	cmp	r3, #0
 800a336:	d10b      	bne.n	800a350 <xQueueGenericSend+0x34>
 800a338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33c:	b672      	cpsid	i
 800a33e:	f383 8811 	msr	BASEPRI, r3
 800a342:	f3bf 8f6f 	isb	sy
 800a346:	f3bf 8f4f 	dsb	sy
 800a34a:	b662      	cpsie	i
 800a34c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a34e:	e7fe      	b.n	800a34e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d103      	bne.n	800a35e <xQueueGenericSend+0x42>
 800a356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d101      	bne.n	800a362 <xQueueGenericSend+0x46>
 800a35e:	2301      	movs	r3, #1
 800a360:	e000      	b.n	800a364 <xQueueGenericSend+0x48>
 800a362:	2300      	movs	r3, #0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d10b      	bne.n	800a380 <xQueueGenericSend+0x64>
 800a368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36c:	b672      	cpsid	i
 800a36e:	f383 8811 	msr	BASEPRI, r3
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	b662      	cpsie	i
 800a37c:	627b      	str	r3, [r7, #36]	; 0x24
 800a37e:	e7fe      	b.n	800a37e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	2b02      	cmp	r3, #2
 800a384:	d103      	bne.n	800a38e <xQueueGenericSend+0x72>
 800a386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d101      	bne.n	800a392 <xQueueGenericSend+0x76>
 800a38e:	2301      	movs	r3, #1
 800a390:	e000      	b.n	800a394 <xQueueGenericSend+0x78>
 800a392:	2300      	movs	r3, #0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d10b      	bne.n	800a3b0 <xQueueGenericSend+0x94>
 800a398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39c:	b672      	cpsid	i
 800a39e:	f383 8811 	msr	BASEPRI, r3
 800a3a2:	f3bf 8f6f 	isb	sy
 800a3a6:	f3bf 8f4f 	dsb	sy
 800a3aa:	b662      	cpsie	i
 800a3ac:	623b      	str	r3, [r7, #32]
 800a3ae:	e7fe      	b.n	800a3ae <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3b0:	f001 fcf2 	bl	800bd98 <xTaskGetSchedulerState>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d102      	bne.n	800a3c0 <xQueueGenericSend+0xa4>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d101      	bne.n	800a3c4 <xQueueGenericSend+0xa8>
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e000      	b.n	800a3c6 <xQueueGenericSend+0xaa>
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d10b      	bne.n	800a3e2 <xQueueGenericSend+0xc6>
 800a3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ce:	b672      	cpsid	i
 800a3d0:	f383 8811 	msr	BASEPRI, r3
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	f3bf 8f4f 	dsb	sy
 800a3dc:	b662      	cpsie	i
 800a3de:	61fb      	str	r3, [r7, #28]
 800a3e0:	e7fe      	b.n	800a3e0 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3e2:	f002 f821 	bl	800c428 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d302      	bcc.n	800a3f8 <xQueueGenericSend+0xdc>
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d129      	bne.n	800a44c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3f8:	683a      	ldr	r2, [r7, #0]
 800a3fa:	68b9      	ldr	r1, [r7, #8]
 800a3fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3fe:	f000 fcac 	bl	800ad5a <prvCopyDataToQueue>
 800a402:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d010      	beq.n	800a42e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40e:	3324      	adds	r3, #36	; 0x24
 800a410:	4618      	mov	r0, r3
 800a412:	f001 fafd 	bl	800ba10 <xTaskRemoveFromEventList>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d013      	beq.n	800a444 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a41c:	4b3f      	ldr	r3, [pc, #252]	; (800a51c <xQueueGenericSend+0x200>)
 800a41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	e00a      	b.n	800a444 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a430:	2b00      	cmp	r3, #0
 800a432:	d007      	beq.n	800a444 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a434:	4b39      	ldr	r3, [pc, #228]	; (800a51c <xQueueGenericSend+0x200>)
 800a436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a43a:	601a      	str	r2, [r3, #0]
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a444:	f002 f822 	bl	800c48c <vPortExitCritical>
				return pdPASS;
 800a448:	2301      	movs	r3, #1
 800a44a:	e063      	b.n	800a514 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d103      	bne.n	800a45a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a452:	f002 f81b 	bl	800c48c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a456:	2300      	movs	r3, #0
 800a458:	e05c      	b.n	800a514 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d106      	bne.n	800a46e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a460:	f107 0314 	add.w	r3, r7, #20
 800a464:	4618      	mov	r0, r3
 800a466:	f001 fb37 	bl	800bad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a46a:	2301      	movs	r3, #1
 800a46c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a46e:	f002 f80d 	bl	800c48c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a472:	f001 f897 	bl	800b5a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a476:	f001 ffd7 	bl	800c428 <vPortEnterCritical>
 800a47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a480:	b25b      	sxtb	r3, r3
 800a482:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a486:	d103      	bne.n	800a490 <xQueueGenericSend+0x174>
 800a488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a492:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a496:	b25b      	sxtb	r3, r3
 800a498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a49c:	d103      	bne.n	800a4a6 <xQueueGenericSend+0x18a>
 800a49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4a6:	f001 fff1 	bl	800c48c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4aa:	1d3a      	adds	r2, r7, #4
 800a4ac:	f107 0314 	add.w	r3, r7, #20
 800a4b0:	4611      	mov	r1, r2
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f001 fb26 	bl	800bb04 <xTaskCheckForTimeOut>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d124      	bne.n	800a508 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a4be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4c0:	f000 fd43 	bl	800af4a <prvIsQueueFull>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d018      	beq.n	800a4fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4cc:	3310      	adds	r3, #16
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	4611      	mov	r1, r2
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f001 fa76 	bl	800b9c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a4d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4da:	f000 fcce 	bl	800ae7a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a4de:	f001 f86f 	bl	800b5c0 <xTaskResumeAll>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f47f af7c 	bne.w	800a3e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a4ea:	4b0c      	ldr	r3, [pc, #48]	; (800a51c <xQueueGenericSend+0x200>)
 800a4ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4f0:	601a      	str	r2, [r3, #0]
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	f3bf 8f6f 	isb	sy
 800a4fa:	e772      	b.n	800a3e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a4fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4fe:	f000 fcbc 	bl	800ae7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a502:	f001 f85d 	bl	800b5c0 <xTaskResumeAll>
 800a506:	e76c      	b.n	800a3e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a50a:	f000 fcb6 	bl	800ae7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a50e:	f001 f857 	bl	800b5c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a512:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a514:	4618      	mov	r0, r3
 800a516:	3738      	adds	r7, #56	; 0x38
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	e000ed04 	.word	0xe000ed04

0800a520 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b08e      	sub	sp, #56	; 0x38
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
 800a52c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10b      	bne.n	800a550 <xQueueGenericSendFromISR+0x30>
 800a538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53c:	b672      	cpsid	i
 800a53e:	f383 8811 	msr	BASEPRI, r3
 800a542:	f3bf 8f6f 	isb	sy
 800a546:	f3bf 8f4f 	dsb	sy
 800a54a:	b662      	cpsie	i
 800a54c:	627b      	str	r3, [r7, #36]	; 0x24
 800a54e:	e7fe      	b.n	800a54e <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d103      	bne.n	800a55e <xQueueGenericSendFromISR+0x3e>
 800a556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d101      	bne.n	800a562 <xQueueGenericSendFromISR+0x42>
 800a55e:	2301      	movs	r3, #1
 800a560:	e000      	b.n	800a564 <xQueueGenericSendFromISR+0x44>
 800a562:	2300      	movs	r3, #0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10b      	bne.n	800a580 <xQueueGenericSendFromISR+0x60>
 800a568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56c:	b672      	cpsid	i
 800a56e:	f383 8811 	msr	BASEPRI, r3
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	b662      	cpsie	i
 800a57c:	623b      	str	r3, [r7, #32]
 800a57e:	e7fe      	b.n	800a57e <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	2b02      	cmp	r3, #2
 800a584:	d103      	bne.n	800a58e <xQueueGenericSendFromISR+0x6e>
 800a586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d101      	bne.n	800a592 <xQueueGenericSendFromISR+0x72>
 800a58e:	2301      	movs	r3, #1
 800a590:	e000      	b.n	800a594 <xQueueGenericSendFromISR+0x74>
 800a592:	2300      	movs	r3, #0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d10b      	bne.n	800a5b0 <xQueueGenericSendFromISR+0x90>
 800a598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a59c:	b672      	cpsid	i
 800a59e:	f383 8811 	msr	BASEPRI, r3
 800a5a2:	f3bf 8f6f 	isb	sy
 800a5a6:	f3bf 8f4f 	dsb	sy
 800a5aa:	b662      	cpsie	i
 800a5ac:	61fb      	str	r3, [r7, #28]
 800a5ae:	e7fe      	b.n	800a5ae <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5b0:	f002 f81a 	bl	800c5e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a5b4:	f3ef 8211 	mrs	r2, BASEPRI
 800a5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5bc:	b672      	cpsid	i
 800a5be:	f383 8811 	msr	BASEPRI, r3
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	f3bf 8f4f 	dsb	sy
 800a5ca:	b662      	cpsie	i
 800a5cc:	61ba      	str	r2, [r7, #24]
 800a5ce:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a5d0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d302      	bcc.n	800a5e6 <xQueueGenericSendFromISR+0xc6>
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	2b02      	cmp	r3, #2
 800a5e4:	d12c      	bne.n	800a640 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a5f0:	683a      	ldr	r2, [r7, #0]
 800a5f2:	68b9      	ldr	r1, [r7, #8]
 800a5f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5f6:	f000 fbb0 	bl	800ad5a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a5fa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a5fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a602:	d112      	bne.n	800a62a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d016      	beq.n	800a63a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60e:	3324      	adds	r3, #36	; 0x24
 800a610:	4618      	mov	r0, r3
 800a612:	f001 f9fd 	bl	800ba10 <xTaskRemoveFromEventList>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d00e      	beq.n	800a63a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d00b      	beq.n	800a63a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2201      	movs	r2, #1
 800a626:	601a      	str	r2, [r3, #0]
 800a628:	e007      	b.n	800a63a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a62a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a62e:	3301      	adds	r3, #1
 800a630:	b2db      	uxtb	r3, r3
 800a632:	b25a      	sxtb	r2, r3
 800a634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a63a:	2301      	movs	r3, #1
 800a63c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a63e:	e001      	b.n	800a644 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a640:	2300      	movs	r3, #0
 800a642:	637b      	str	r3, [r7, #52]	; 0x34
 800a644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a646:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a650:	4618      	mov	r0, r3
 800a652:	3738      	adds	r7, #56	; 0x38
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b08e      	sub	sp, #56	; 0x38
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d10b      	bne.n	800a684 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a670:	b672      	cpsid	i
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	b662      	cpsie	i
 800a680:	623b      	str	r3, [r7, #32]
 800a682:	e7fe      	b.n	800a682 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00b      	beq.n	800a6a4 <xQueueGiveFromISR+0x4c>
 800a68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a690:	b672      	cpsid	i
 800a692:	f383 8811 	msr	BASEPRI, r3
 800a696:	f3bf 8f6f 	isb	sy
 800a69a:	f3bf 8f4f 	dsb	sy
 800a69e:	b662      	cpsie	i
 800a6a0:	61fb      	str	r3, [r7, #28]
 800a6a2:	e7fe      	b.n	800a6a2 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d103      	bne.n	800a6b4 <xQueueGiveFromISR+0x5c>
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ae:	689b      	ldr	r3, [r3, #8]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d101      	bne.n	800a6b8 <xQueueGiveFromISR+0x60>
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e000      	b.n	800a6ba <xQueueGiveFromISR+0x62>
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d10b      	bne.n	800a6d6 <xQueueGiveFromISR+0x7e>
 800a6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c2:	b672      	cpsid	i
 800a6c4:	f383 8811 	msr	BASEPRI, r3
 800a6c8:	f3bf 8f6f 	isb	sy
 800a6cc:	f3bf 8f4f 	dsb	sy
 800a6d0:	b662      	cpsie	i
 800a6d2:	61bb      	str	r3, [r7, #24]
 800a6d4:	e7fe      	b.n	800a6d4 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a6d6:	f001 ff87 	bl	800c5e8 <vPortValidateInterruptPriority>
	__asm volatile
 800a6da:	f3ef 8211 	mrs	r2, BASEPRI
 800a6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e2:	b672      	cpsid	i
 800a6e4:	f383 8811 	msr	BASEPRI, r3
 800a6e8:	f3bf 8f6f 	isb	sy
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	b662      	cpsie	i
 800a6f2:	617a      	str	r2, [r7, #20]
 800a6f4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a6f6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a706:	429a      	cmp	r2, r3
 800a708:	d22b      	bcs.n	800a762 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a716:	1c5a      	adds	r2, r3, #1
 800a718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a71c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a724:	d112      	bne.n	800a74c <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d016      	beq.n	800a75c <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a730:	3324      	adds	r3, #36	; 0x24
 800a732:	4618      	mov	r0, r3
 800a734:	f001 f96c 	bl	800ba10 <xTaskRemoveFromEventList>
 800a738:	4603      	mov	r3, r0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d00e      	beq.n	800a75c <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00b      	beq.n	800a75c <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	2201      	movs	r2, #1
 800a748:	601a      	str	r2, [r3, #0]
 800a74a:	e007      	b.n	800a75c <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a74c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a750:	3301      	adds	r3, #1
 800a752:	b2db      	uxtb	r3, r3
 800a754:	b25a      	sxtb	r2, r3
 800a756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a75c:	2301      	movs	r3, #1
 800a75e:	637b      	str	r3, [r7, #52]	; 0x34
 800a760:	e001      	b.n	800a766 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a762:	2300      	movs	r3, #0
 800a764:	637b      	str	r3, [r7, #52]	; 0x34
 800a766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a768:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a772:	4618      	mov	r0, r3
 800a774:	3738      	adds	r7, #56	; 0x38
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
	...

0800a77c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b08c      	sub	sp, #48	; 0x30
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	60b9      	str	r1, [r7, #8]
 800a786:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a788:	2300      	movs	r3, #0
 800a78a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10b      	bne.n	800a7ae <xQueueReceive+0x32>
	__asm volatile
 800a796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79a:	b672      	cpsid	i
 800a79c:	f383 8811 	msr	BASEPRI, r3
 800a7a0:	f3bf 8f6f 	isb	sy
 800a7a4:	f3bf 8f4f 	dsb	sy
 800a7a8:	b662      	cpsie	i
 800a7aa:	623b      	str	r3, [r7, #32]
 800a7ac:	e7fe      	b.n	800a7ac <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d103      	bne.n	800a7bc <xQueueReceive+0x40>
 800a7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d101      	bne.n	800a7c0 <xQueueReceive+0x44>
 800a7bc:	2301      	movs	r3, #1
 800a7be:	e000      	b.n	800a7c2 <xQueueReceive+0x46>
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10b      	bne.n	800a7de <xQueueReceive+0x62>
 800a7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ca:	b672      	cpsid	i
 800a7cc:	f383 8811 	msr	BASEPRI, r3
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	b662      	cpsie	i
 800a7da:	61fb      	str	r3, [r7, #28]
 800a7dc:	e7fe      	b.n	800a7dc <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7de:	f001 fadb 	bl	800bd98 <xTaskGetSchedulerState>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d102      	bne.n	800a7ee <xQueueReceive+0x72>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d101      	bne.n	800a7f2 <xQueueReceive+0x76>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e000      	b.n	800a7f4 <xQueueReceive+0x78>
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d10b      	bne.n	800a810 <xQueueReceive+0x94>
 800a7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fc:	b672      	cpsid	i
 800a7fe:	f383 8811 	msr	BASEPRI, r3
 800a802:	f3bf 8f6f 	isb	sy
 800a806:	f3bf 8f4f 	dsb	sy
 800a80a:	b662      	cpsie	i
 800a80c:	61bb      	str	r3, [r7, #24]
 800a80e:	e7fe      	b.n	800a80e <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a810:	f001 fe0a 	bl	800c428 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a818:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d01f      	beq.n	800a860 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a820:	68b9      	ldr	r1, [r7, #8]
 800a822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a824:	f000 fb03 	bl	800ae2e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82a:	1e5a      	subs	r2, r3, #1
 800a82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a832:	691b      	ldr	r3, [r3, #16]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00f      	beq.n	800a858 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83a:	3310      	adds	r3, #16
 800a83c:	4618      	mov	r0, r3
 800a83e:	f001 f8e7 	bl	800ba10 <xTaskRemoveFromEventList>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d007      	beq.n	800a858 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a848:	4b3c      	ldr	r3, [pc, #240]	; (800a93c <xQueueReceive+0x1c0>)
 800a84a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a84e:	601a      	str	r2, [r3, #0]
 800a850:	f3bf 8f4f 	dsb	sy
 800a854:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a858:	f001 fe18 	bl	800c48c <vPortExitCritical>
				return pdPASS;
 800a85c:	2301      	movs	r3, #1
 800a85e:	e069      	b.n	800a934 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d103      	bne.n	800a86e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a866:	f001 fe11 	bl	800c48c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a86a:	2300      	movs	r3, #0
 800a86c:	e062      	b.n	800a934 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a870:	2b00      	cmp	r3, #0
 800a872:	d106      	bne.n	800a882 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a874:	f107 0310 	add.w	r3, r7, #16
 800a878:	4618      	mov	r0, r3
 800a87a:	f001 f92d 	bl	800bad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a87e:	2301      	movs	r3, #1
 800a880:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a882:	f001 fe03 	bl	800c48c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a886:	f000 fe8d 	bl	800b5a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a88a:	f001 fdcd 	bl	800c428 <vPortEnterCritical>
 800a88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a890:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a894:	b25b      	sxtb	r3, r3
 800a896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a89a:	d103      	bne.n	800a8a4 <xQueueReceive+0x128>
 800a89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8aa:	b25b      	sxtb	r3, r3
 800a8ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b0:	d103      	bne.n	800a8ba <xQueueReceive+0x13e>
 800a8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8ba:	f001 fde7 	bl	800c48c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8be:	1d3a      	adds	r2, r7, #4
 800a8c0:	f107 0310 	add.w	r3, r7, #16
 800a8c4:	4611      	mov	r1, r2
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f001 f91c 	bl	800bb04 <xTaskCheckForTimeOut>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d123      	bne.n	800a91a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8d4:	f000 fb23 	bl	800af1e <prvIsQueueEmpty>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d017      	beq.n	800a90e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e0:	3324      	adds	r3, #36	; 0x24
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	4611      	mov	r1, r2
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f001 f86c 	bl	800b9c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a8ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8ee:	f000 fac4 	bl	800ae7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a8f2:	f000 fe65 	bl	800b5c0 <xTaskResumeAll>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d189      	bne.n	800a810 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a8fc:	4b0f      	ldr	r3, [pc, #60]	; (800a93c <xQueueReceive+0x1c0>)
 800a8fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a902:	601a      	str	r2, [r3, #0]
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	e780      	b.n	800a810 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a90e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a910:	f000 fab3 	bl	800ae7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a914:	f000 fe54 	bl	800b5c0 <xTaskResumeAll>
 800a918:	e77a      	b.n	800a810 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a91a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a91c:	f000 faad 	bl	800ae7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a920:	f000 fe4e 	bl	800b5c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a926:	f000 fafa 	bl	800af1e <prvIsQueueEmpty>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f43f af6f 	beq.w	800a810 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a932:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a934:	4618      	mov	r0, r3
 800a936:	3730      	adds	r7, #48	; 0x30
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	e000ed04 	.word	0xe000ed04

0800a940 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b08e      	sub	sp, #56	; 0x38
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a94a:	2300      	movs	r3, #0
 800a94c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a952:	2300      	movs	r3, #0
 800a954:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10b      	bne.n	800a974 <xQueueSemaphoreTake+0x34>
 800a95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a960:	b672      	cpsid	i
 800a962:	f383 8811 	msr	BASEPRI, r3
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	b662      	cpsie	i
 800a970:	623b      	str	r3, [r7, #32]
 800a972:	e7fe      	b.n	800a972 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d00b      	beq.n	800a994 <xQueueSemaphoreTake+0x54>
 800a97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a980:	b672      	cpsid	i
 800a982:	f383 8811 	msr	BASEPRI, r3
 800a986:	f3bf 8f6f 	isb	sy
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	b662      	cpsie	i
 800a990:	61fb      	str	r3, [r7, #28]
 800a992:	e7fe      	b.n	800a992 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a994:	f001 fa00 	bl	800bd98 <xTaskGetSchedulerState>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d102      	bne.n	800a9a4 <xQueueSemaphoreTake+0x64>
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d101      	bne.n	800a9a8 <xQueueSemaphoreTake+0x68>
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e000      	b.n	800a9aa <xQueueSemaphoreTake+0x6a>
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d10b      	bne.n	800a9c6 <xQueueSemaphoreTake+0x86>
 800a9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b2:	b672      	cpsid	i
 800a9b4:	f383 8811 	msr	BASEPRI, r3
 800a9b8:	f3bf 8f6f 	isb	sy
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	b662      	cpsie	i
 800a9c2:	61bb      	str	r3, [r7, #24]
 800a9c4:	e7fe      	b.n	800a9c4 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a9c6:	f001 fd2f 	bl	800c428 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ce:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d024      	beq.n	800aa20 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d8:	1e5a      	subs	r2, r3, #1
 800a9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9dc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d104      	bne.n	800a9f0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a9e6:	f001 fb99 	bl	800c11c <pvTaskIncrementMutexHeldCount>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00f      	beq.n	800aa18 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9fa:	3310      	adds	r3, #16
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f001 f807 	bl	800ba10 <xTaskRemoveFromEventList>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d007      	beq.n	800aa18 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa08:	4b54      	ldr	r3, [pc, #336]	; (800ab5c <xQueueSemaphoreTake+0x21c>)
 800aa0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa0e:	601a      	str	r2, [r3, #0]
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa18:	f001 fd38 	bl	800c48c <vPortExitCritical>
				return pdPASS;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	e098      	b.n	800ab52 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d112      	bne.n	800aa4c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800aa26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d00b      	beq.n	800aa44 <xQueueSemaphoreTake+0x104>
 800aa2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa30:	b672      	cpsid	i
 800aa32:	f383 8811 	msr	BASEPRI, r3
 800aa36:	f3bf 8f6f 	isb	sy
 800aa3a:	f3bf 8f4f 	dsb	sy
 800aa3e:	b662      	cpsie	i
 800aa40:	617b      	str	r3, [r7, #20]
 800aa42:	e7fe      	b.n	800aa42 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800aa44:	f001 fd22 	bl	800c48c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	e082      	b.n	800ab52 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d106      	bne.n	800aa60 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa52:	f107 030c 	add.w	r3, r7, #12
 800aa56:	4618      	mov	r0, r3
 800aa58:	f001 f83e 	bl	800bad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa60:	f001 fd14 	bl	800c48c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa64:	f000 fd9e 	bl	800b5a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa68:	f001 fcde 	bl	800c428 <vPortEnterCritical>
 800aa6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa72:	b25b      	sxtb	r3, r3
 800aa74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa78:	d103      	bne.n	800aa82 <xQueueSemaphoreTake+0x142>
 800aa7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa88:	b25b      	sxtb	r3, r3
 800aa8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa8e:	d103      	bne.n	800aa98 <xQueueSemaphoreTake+0x158>
 800aa90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa92:	2200      	movs	r2, #0
 800aa94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa98:	f001 fcf8 	bl	800c48c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa9c:	463a      	mov	r2, r7
 800aa9e:	f107 030c 	add.w	r3, r7, #12
 800aaa2:	4611      	mov	r1, r2
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f001 f82d 	bl	800bb04 <xTaskCheckForTimeOut>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d132      	bne.n	800ab16 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aab0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aab2:	f000 fa34 	bl	800af1e <prvIsQueueEmpty>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d026      	beq.n	800ab0a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d109      	bne.n	800aad8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800aac4:	f001 fcb0 	bl	800c428 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaca:	689b      	ldr	r3, [r3, #8]
 800aacc:	4618      	mov	r0, r3
 800aace:	f001 f981 	bl	800bdd4 <xTaskPriorityInherit>
 800aad2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800aad4:	f001 fcda 	bl	800c48c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aada:	3324      	adds	r3, #36	; 0x24
 800aadc:	683a      	ldr	r2, [r7, #0]
 800aade:	4611      	mov	r1, r2
 800aae0:	4618      	mov	r0, r3
 800aae2:	f000 ff6f 	bl	800b9c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aae6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aae8:	f000 f9c7 	bl	800ae7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aaec:	f000 fd68 	bl	800b5c0 <xTaskResumeAll>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f47f af67 	bne.w	800a9c6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800aaf8:	4b18      	ldr	r3, [pc, #96]	; (800ab5c <xQueueSemaphoreTake+0x21c>)
 800aafa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aafe:	601a      	str	r2, [r3, #0]
 800ab00:	f3bf 8f4f 	dsb	sy
 800ab04:	f3bf 8f6f 	isb	sy
 800ab08:	e75d      	b.n	800a9c6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ab0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab0c:	f000 f9b5 	bl	800ae7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab10:	f000 fd56 	bl	800b5c0 <xTaskResumeAll>
 800ab14:	e757      	b.n	800a9c6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ab16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab18:	f000 f9af 	bl	800ae7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab1c:	f000 fd50 	bl	800b5c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab22:	f000 f9fc 	bl	800af1e <prvIsQueueEmpty>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f43f af4c 	beq.w	800a9c6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ab2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d00d      	beq.n	800ab50 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800ab34:	f001 fc78 	bl	800c428 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ab38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab3a:	f000 f8f6 	bl	800ad2a <prvGetDisinheritPriorityAfterTimeout>
 800ab3e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ab40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab46:	4618      	mov	r0, r3
 800ab48:	f001 fa4c 	bl	800bfe4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ab4c:	f001 fc9e 	bl	800c48c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3738      	adds	r7, #56	; 0x38
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	e000ed04 	.word	0xe000ed04

0800ab60 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b08e      	sub	sp, #56	; 0x38
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ab70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d10b      	bne.n	800ab8e <xQueueReceiveFromISR+0x2e>
 800ab76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7a:	b672      	cpsid	i
 800ab7c:	f383 8811 	msr	BASEPRI, r3
 800ab80:	f3bf 8f6f 	isb	sy
 800ab84:	f3bf 8f4f 	dsb	sy
 800ab88:	b662      	cpsie	i
 800ab8a:	623b      	str	r3, [r7, #32]
 800ab8c:	e7fe      	b.n	800ab8c <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d103      	bne.n	800ab9c <xQueueReceiveFromISR+0x3c>
 800ab94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d101      	bne.n	800aba0 <xQueueReceiveFromISR+0x40>
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	e000      	b.n	800aba2 <xQueueReceiveFromISR+0x42>
 800aba0:	2300      	movs	r3, #0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d10b      	bne.n	800abbe <xQueueReceiveFromISR+0x5e>
 800aba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abaa:	b672      	cpsid	i
 800abac:	f383 8811 	msr	BASEPRI, r3
 800abb0:	f3bf 8f6f 	isb	sy
 800abb4:	f3bf 8f4f 	dsb	sy
 800abb8:	b662      	cpsie	i
 800abba:	61fb      	str	r3, [r7, #28]
 800abbc:	e7fe      	b.n	800abbc <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abbe:	f001 fd13 	bl	800c5e8 <vPortValidateInterruptPriority>
	__asm volatile
 800abc2:	f3ef 8211 	mrs	r2, BASEPRI
 800abc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abca:	b672      	cpsid	i
 800abcc:	f383 8811 	msr	BASEPRI, r3
 800abd0:	f3bf 8f6f 	isb	sy
 800abd4:	f3bf 8f4f 	dsb	sy
 800abd8:	b662      	cpsie	i
 800abda:	61ba      	str	r2, [r7, #24]
 800abdc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800abde:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800abe0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abea:	2b00      	cmp	r3, #0
 800abec:	d02f      	beq.n	800ac4e <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800abee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800abf8:	68b9      	ldr	r1, [r7, #8]
 800abfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abfc:	f000 f917 	bl	800ae2e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac02:	1e5a      	subs	r2, r3, #1
 800ac04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac06:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ac08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac10:	d112      	bne.n	800ac38 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac14:	691b      	ldr	r3, [r3, #16]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d016      	beq.n	800ac48 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1c:	3310      	adds	r3, #16
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f000 fef6 	bl	800ba10 <xTaskRemoveFromEventList>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d00e      	beq.n	800ac48 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00b      	beq.n	800ac48 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2201      	movs	r2, #1
 800ac34:	601a      	str	r2, [r3, #0]
 800ac36:	e007      	b.n	800ac48 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ac38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	b25a      	sxtb	r2, r3
 800ac42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	637b      	str	r3, [r7, #52]	; 0x34
 800ac4c:	e001      	b.n	800ac52 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	637b      	str	r3, [r7, #52]	; 0x34
 800ac52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac54:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3738      	adds	r7, #56	; 0x38
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ac66:	b580      	push	{r7, lr}
 800ac68:	b084      	sub	sp, #16
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d10b      	bne.n	800ac8c <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800ac74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac78:	b672      	cpsid	i
 800ac7a:	f383 8811 	msr	BASEPRI, r3
 800ac7e:	f3bf 8f6f 	isb	sy
 800ac82:	f3bf 8f4f 	dsb	sy
 800ac86:	b662      	cpsie	i
 800ac88:	60bb      	str	r3, [r7, #8]
 800ac8a:	e7fe      	b.n	800ac8a <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 800ac8c:	f001 fbcc 	bl	800c428 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac94:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800ac96:	f001 fbf9 	bl	800c48c <vPortExitCritical>

	return uxReturn;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3710      	adds	r7, #16
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800aca4:	b480      	push	{r7}
 800aca6:	b087      	sub	sp, #28
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d10b      	bne.n	800acce <uxQueueMessagesWaitingFromISR+0x2a>
 800acb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acba:	b672      	cpsid	i
 800acbc:	f383 8811 	msr	BASEPRI, r3
 800acc0:	f3bf 8f6f 	isb	sy
 800acc4:	f3bf 8f4f 	dsb	sy
 800acc8:	b662      	cpsie	i
 800acca:	60fb      	str	r3, [r7, #12]
 800accc:	e7fe      	b.n	800accc <uxQueueMessagesWaitingFromISR+0x28>
	uxReturn = pxQueue->uxMessagesWaiting;
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd2:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800acd4:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800acd6:	4618      	mov	r0, r3
 800acd8:	371c      	adds	r7, #28
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr

0800ace2 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b084      	sub	sp, #16
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d10b      	bne.n	800ad0c <vQueueDelete+0x2a>
 800acf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf8:	b672      	cpsid	i
 800acfa:	f383 8811 	msr	BASEPRI, r3
 800acfe:	f3bf 8f6f 	isb	sy
 800ad02:	f3bf 8f4f 	dsb	sy
 800ad06:	b662      	cpsie	i
 800ad08:	60bb      	str	r3, [r7, #8]
 800ad0a:	e7fe      	b.n	800ad0a <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f000 f935 	bl	800af7c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d102      	bne.n	800ad22 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f001 fd43 	bl	800c7a8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ad22:	bf00      	nop
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ad2a:	b480      	push	{r7}
 800ad2c:	b085      	sub	sp, #20
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d006      	beq.n	800ad48 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f1c3 0307 	rsb	r3, r3, #7
 800ad44:	60fb      	str	r3, [r7, #12]
 800ad46:	e001      	b.n	800ad4c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
	}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3714      	adds	r7, #20
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr

0800ad5a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b086      	sub	sp, #24
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	60f8      	str	r0, [r7, #12]
 800ad62:	60b9      	str	r1, [r7, #8]
 800ad64:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ad66:	2300      	movs	r3, #0
 800ad68:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad6e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d10d      	bne.n	800ad94 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d14d      	bne.n	800ae1c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	689b      	ldr	r3, [r3, #8]
 800ad84:	4618      	mov	r0, r3
 800ad86:	f001 f8a5 	bl	800bed4 <xTaskPriorityDisinherit>
 800ad8a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	609a      	str	r2, [r3, #8]
 800ad92:	e043      	b.n	800ae1c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d119      	bne.n	800adce <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	6858      	ldr	r0, [r3, #4]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada2:	461a      	mov	r2, r3
 800ada4:	68b9      	ldr	r1, [r7, #8]
 800ada6:	f00f f936 	bl	801a016 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	685a      	ldr	r2, [r3, #4]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb2:	441a      	add	r2, r3
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	685a      	ldr	r2, [r3, #4]
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d32b      	bcc.n	800ae1c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	605a      	str	r2, [r3, #4]
 800adcc:	e026      	b.n	800ae1c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	68d8      	ldr	r0, [r3, #12]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add6:	461a      	mov	r2, r3
 800add8:	68b9      	ldr	r1, [r7, #8]
 800adda:	f00f f91c 	bl	801a016 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	68da      	ldr	r2, [r3, #12]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade6:	425b      	negs	r3, r3
 800ade8:	441a      	add	r2, r3
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	68da      	ldr	r2, [r3, #12]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d207      	bcs.n	800ae0a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	689a      	ldr	r2, [r3, #8]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae02:	425b      	negs	r3, r3
 800ae04:	441a      	add	r2, r3
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2b02      	cmp	r3, #2
 800ae0e:	d105      	bne.n	800ae1c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d002      	beq.n	800ae1c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	1c5a      	adds	r2, r3, #1
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ae24:	697b      	ldr	r3, [r7, #20]
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3718      	adds	r7, #24
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b082      	sub	sp, #8
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
 800ae36:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d018      	beq.n	800ae72 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	68da      	ldr	r2, [r3, #12]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae48:	441a      	add	r2, r3
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	68da      	ldr	r2, [r3, #12]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d303      	bcc.n	800ae62 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	68d9      	ldr	r1, [r3, #12]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	6838      	ldr	r0, [r7, #0]
 800ae6e:	f00f f8d2 	bl	801a016 <memcpy>
	}
}
 800ae72:	bf00      	nop
 800ae74:	3708      	adds	r7, #8
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b084      	sub	sp, #16
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ae82:	f001 fad1 	bl	800c428 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae8c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae8e:	e011      	b.n	800aeb4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d012      	beq.n	800aebe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	3324      	adds	r3, #36	; 0x24
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f000 fdb7 	bl	800ba10 <xTaskRemoveFromEventList>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d001      	beq.n	800aeac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aea8:	f000 fe90 	bl	800bbcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aeac:	7bfb      	ldrb	r3, [r7, #15]
 800aeae:	3b01      	subs	r3, #1
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aeb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	dce9      	bgt.n	800ae90 <prvUnlockQueue+0x16>
 800aebc:	e000      	b.n	800aec0 <prvUnlockQueue+0x46>
					break;
 800aebe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	22ff      	movs	r2, #255	; 0xff
 800aec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aec8:	f001 fae0 	bl	800c48c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aecc:	f001 faac 	bl	800c428 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aed6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aed8:	e011      	b.n	800aefe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	691b      	ldr	r3, [r3, #16]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d012      	beq.n	800af08 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	3310      	adds	r3, #16
 800aee6:	4618      	mov	r0, r3
 800aee8:	f000 fd92 	bl	800ba10 <xTaskRemoveFromEventList>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d001      	beq.n	800aef6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aef2:	f000 fe6b 	bl	800bbcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aef6:	7bbb      	ldrb	r3, [r7, #14]
 800aef8:	3b01      	subs	r3, #1
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aefe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af02:	2b00      	cmp	r3, #0
 800af04:	dce9      	bgt.n	800aeda <prvUnlockQueue+0x60>
 800af06:	e000      	b.n	800af0a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800af08:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	22ff      	movs	r2, #255	; 0xff
 800af0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800af12:	f001 fabb 	bl	800c48c <vPortExitCritical>
}
 800af16:	bf00      	nop
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b084      	sub	sp, #16
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af26:	f001 fa7f 	bl	800c428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d102      	bne.n	800af38 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800af32:	2301      	movs	r3, #1
 800af34:	60fb      	str	r3, [r7, #12]
 800af36:	e001      	b.n	800af3c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800af38:	2300      	movs	r3, #0
 800af3a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af3c:	f001 faa6 	bl	800c48c <vPortExitCritical>

	return xReturn;
 800af40:	68fb      	ldr	r3, [r7, #12]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b084      	sub	sp, #16
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af52:	f001 fa69 	bl	800c428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af5e:	429a      	cmp	r2, r3
 800af60:	d102      	bne.n	800af68 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800af62:	2301      	movs	r3, #1
 800af64:	60fb      	str	r3, [r7, #12]
 800af66:	e001      	b.n	800af6c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800af68:	2300      	movs	r3, #0
 800af6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af6c:	f001 fa8e 	bl	800c48c <vPortExitCritical>

	return xReturn;
 800af70:	68fb      	ldr	r3, [r7, #12]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
	...

0800af7c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af84:	2300      	movs	r3, #0
 800af86:	60fb      	str	r3, [r7, #12]
 800af88:	e016      	b.n	800afb8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800af8a:	4a10      	ldr	r2, [pc, #64]	; (800afcc <vQueueUnregisterQueue+0x50>)
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	00db      	lsls	r3, r3, #3
 800af90:	4413      	add	r3, r2
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	429a      	cmp	r2, r3
 800af98:	d10b      	bne.n	800afb2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800af9a:	4a0c      	ldr	r2, [pc, #48]	; (800afcc <vQueueUnregisterQueue+0x50>)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2100      	movs	r1, #0
 800afa0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800afa4:	4a09      	ldr	r2, [pc, #36]	; (800afcc <vQueueUnregisterQueue+0x50>)
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	00db      	lsls	r3, r3, #3
 800afaa:	4413      	add	r3, r2
 800afac:	2200      	movs	r2, #0
 800afae:	605a      	str	r2, [r3, #4]
				break;
 800afb0:	e005      	b.n	800afbe <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	3301      	adds	r3, #1
 800afb6:	60fb      	str	r3, [r7, #12]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2b07      	cmp	r3, #7
 800afbc:	d9e5      	bls.n	800af8a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800afbe:	bf00      	nop
 800afc0:	3714      	adds	r7, #20
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop
 800afcc:	20004538 	.word	0x20004538

0800afd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b08e      	sub	sp, #56	; 0x38
 800afd4:	af04      	add	r7, sp, #16
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	60b9      	str	r1, [r7, #8]
 800afda:	607a      	str	r2, [r7, #4]
 800afdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800afde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d10b      	bne.n	800affc <xTaskCreateStatic+0x2c>
 800afe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe8:	b672      	cpsid	i
 800afea:	f383 8811 	msr	BASEPRI, r3
 800afee:	f3bf 8f6f 	isb	sy
 800aff2:	f3bf 8f4f 	dsb	sy
 800aff6:	b662      	cpsie	i
 800aff8:	623b      	str	r3, [r7, #32]
 800affa:	e7fe      	b.n	800affa <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800affc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affe:	2b00      	cmp	r3, #0
 800b000:	d10b      	bne.n	800b01a <xTaskCreateStatic+0x4a>
 800b002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b006:	b672      	cpsid	i
 800b008:	f383 8811 	msr	BASEPRI, r3
 800b00c:	f3bf 8f6f 	isb	sy
 800b010:	f3bf 8f4f 	dsb	sy
 800b014:	b662      	cpsie	i
 800b016:	61fb      	str	r3, [r7, #28]
 800b018:	e7fe      	b.n	800b018 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b01a:	23b4      	movs	r3, #180	; 0xb4
 800b01c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	2bb4      	cmp	r3, #180	; 0xb4
 800b022:	d00b      	beq.n	800b03c <xTaskCreateStatic+0x6c>
 800b024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b028:	b672      	cpsid	i
 800b02a:	f383 8811 	msr	BASEPRI, r3
 800b02e:	f3bf 8f6f 	isb	sy
 800b032:	f3bf 8f4f 	dsb	sy
 800b036:	b662      	cpsie	i
 800b038:	61bb      	str	r3, [r7, #24]
 800b03a:	e7fe      	b.n	800b03a <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b03c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b040:	2b00      	cmp	r3, #0
 800b042:	d01e      	beq.n	800b082 <xTaskCreateStatic+0xb2>
 800b044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b046:	2b00      	cmp	r3, #0
 800b048:	d01b      	beq.n	800b082 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b052:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b056:	2202      	movs	r2, #2
 800b058:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b05c:	2300      	movs	r3, #0
 800b05e:	9303      	str	r3, [sp, #12]
 800b060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b062:	9302      	str	r3, [sp, #8]
 800b064:	f107 0314 	add.w	r3, r7, #20
 800b068:	9301      	str	r3, [sp, #4]
 800b06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06c:	9300      	str	r3, [sp, #0]
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	68b9      	ldr	r1, [r7, #8]
 800b074:	68f8      	ldr	r0, [r7, #12]
 800b076:	f000 f851 	bl	800b11c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b07a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b07c:	f000 f8f6 	bl	800b26c <prvAddNewTaskToReadyList>
 800b080:	e001      	b.n	800b086 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b082:	2300      	movs	r3, #0
 800b084:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b086:	697b      	ldr	r3, [r7, #20]
	}
 800b088:	4618      	mov	r0, r3
 800b08a:	3728      	adds	r7, #40	; 0x28
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b090:	b580      	push	{r7, lr}
 800b092:	b08c      	sub	sp, #48	; 0x30
 800b094:	af04      	add	r7, sp, #16
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	603b      	str	r3, [r7, #0]
 800b09c:	4613      	mov	r3, r2
 800b09e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b0a0:	88fb      	ldrh	r3, [r7, #6]
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f001 fb71 	bl	800c78c <pvPortMalloc>
 800b0aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00e      	beq.n	800b0d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b0b2:	20b4      	movs	r0, #180	; 0xb4
 800b0b4:	f001 fb6a 	bl	800c78c <pvPortMalloc>
 800b0b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d003      	beq.n	800b0c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	697a      	ldr	r2, [r7, #20]
 800b0c4:	631a      	str	r2, [r3, #48]	; 0x30
 800b0c6:	e005      	b.n	800b0d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b0c8:	6978      	ldr	r0, [r7, #20]
 800b0ca:	f001 fb6d 	bl	800c7a8 <vPortFree>
 800b0ce:	e001      	b.n	800b0d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b0d4:	69fb      	ldr	r3, [r7, #28]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d017      	beq.n	800b10a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b0da:	69fb      	ldr	r3, [r7, #28]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b0e2:	88fa      	ldrh	r2, [r7, #6]
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	9303      	str	r3, [sp, #12]
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	9302      	str	r3, [sp, #8]
 800b0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ee:	9301      	str	r3, [sp, #4]
 800b0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	68b9      	ldr	r1, [r7, #8]
 800b0f8:	68f8      	ldr	r0, [r7, #12]
 800b0fa:	f000 f80f 	bl	800b11c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b0fe:	69f8      	ldr	r0, [r7, #28]
 800b100:	f000 f8b4 	bl	800b26c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b104:	2301      	movs	r3, #1
 800b106:	61bb      	str	r3, [r7, #24]
 800b108:	e002      	b.n	800b110 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b10a:	f04f 33ff 	mov.w	r3, #4294967295
 800b10e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b110:	69bb      	ldr	r3, [r7, #24]
	}
 800b112:	4618      	mov	r0, r3
 800b114:	3720      	adds	r7, #32
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
	...

0800b11c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b088      	sub	sp, #32
 800b120:	af00      	add	r7, sp, #0
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	607a      	str	r2, [r7, #4]
 800b128:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	461a      	mov	r2, r3
 800b134:	21a5      	movs	r1, #165	; 0xa5
 800b136:	f00e ff92 	bl	801a05e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b13e:	6879      	ldr	r1, [r7, #4]
 800b140:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b144:	440b      	add	r3, r1
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	4413      	add	r3, r2
 800b14a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	f023 0307 	bic.w	r3, r3, #7
 800b152:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b154:	69bb      	ldr	r3, [r7, #24]
 800b156:	f003 0307 	and.w	r3, r3, #7
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d00b      	beq.n	800b176 <prvInitialiseNewTask+0x5a>
 800b15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b162:	b672      	cpsid	i
 800b164:	f383 8811 	msr	BASEPRI, r3
 800b168:	f3bf 8f6f 	isb	sy
 800b16c:	f3bf 8f4f 	dsb	sy
 800b170:	b662      	cpsie	i
 800b172:	617b      	str	r3, [r7, #20]
 800b174:	e7fe      	b.n	800b174 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d01f      	beq.n	800b1bc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b17c:	2300      	movs	r3, #0
 800b17e:	61fb      	str	r3, [r7, #28]
 800b180:	e012      	b.n	800b1a8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b182:	68ba      	ldr	r2, [r7, #8]
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	4413      	add	r3, r2
 800b188:	7819      	ldrb	r1, [r3, #0]
 800b18a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	4413      	add	r3, r2
 800b190:	3334      	adds	r3, #52	; 0x34
 800b192:	460a      	mov	r2, r1
 800b194:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b196:	68ba      	ldr	r2, [r7, #8]
 800b198:	69fb      	ldr	r3, [r7, #28]
 800b19a:	4413      	add	r3, r2
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d006      	beq.n	800b1b0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1a2:	69fb      	ldr	r3, [r7, #28]
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	61fb      	str	r3, [r7, #28]
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	2b0f      	cmp	r3, #15
 800b1ac:	d9e9      	bls.n	800b182 <prvInitialiseNewTask+0x66>
 800b1ae:	e000      	b.n	800b1b2 <prvInitialiseNewTask+0x96>
			{
				break;
 800b1b0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b1ba:	e003      	b.n	800b1c4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c6:	2b06      	cmp	r3, #6
 800b1c8:	d901      	bls.n	800b1ce <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b1ca:	2306      	movs	r3, #6
 800b1cc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1d2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1d8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1dc:	2200      	movs	r2, #0
 800b1de:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e2:	3304      	adds	r3, #4
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7fe fe70 	bl	8009eca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ec:	3318      	adds	r3, #24
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7fe fe6b 	bl	8009eca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fc:	f1c3 0207 	rsb	r2, r3, #7
 800b200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b202:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b208:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20c:	2200      	movs	r2, #0
 800b20e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b214:	2200      	movs	r2, #0
 800b216:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21c:	334c      	adds	r3, #76	; 0x4c
 800b21e:	2260      	movs	r2, #96	; 0x60
 800b220:	2100      	movs	r1, #0
 800b222:	4618      	mov	r0, r3
 800b224:	f00e ff1b 	bl	801a05e <memset>
 800b228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22a:	4a0d      	ldr	r2, [pc, #52]	; (800b260 <prvInitialiseNewTask+0x144>)
 800b22c:	651a      	str	r2, [r3, #80]	; 0x50
 800b22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b230:	4a0c      	ldr	r2, [pc, #48]	; (800b264 <prvInitialiseNewTask+0x148>)
 800b232:	655a      	str	r2, [r3, #84]	; 0x54
 800b234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b236:	4a0c      	ldr	r2, [pc, #48]	; (800b268 <prvInitialiseNewTask+0x14c>)
 800b238:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b23a:	683a      	ldr	r2, [r7, #0]
 800b23c:	68f9      	ldr	r1, [r7, #12]
 800b23e:	69b8      	ldr	r0, [r7, #24]
 800b240:	f000 ffe6 	bl	800c210 <pxPortInitialiseStack>
 800b244:	4602      	mov	r2, r0
 800b246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b248:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d002      	beq.n	800b256 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b254:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b256:	bf00      	nop
 800b258:	3720      	adds	r7, #32
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop
 800b260:	08024738 	.word	0x08024738
 800b264:	08024758 	.word	0x08024758
 800b268:	08024718 	.word	0x08024718

0800b26c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b274:	f001 f8d8 	bl	800c428 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b278:	4b2a      	ldr	r3, [pc, #168]	; (800b324 <prvAddNewTaskToReadyList+0xb8>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	3301      	adds	r3, #1
 800b27e:	4a29      	ldr	r2, [pc, #164]	; (800b324 <prvAddNewTaskToReadyList+0xb8>)
 800b280:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b282:	4b29      	ldr	r3, [pc, #164]	; (800b328 <prvAddNewTaskToReadyList+0xbc>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d109      	bne.n	800b29e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b28a:	4a27      	ldr	r2, [pc, #156]	; (800b328 <prvAddNewTaskToReadyList+0xbc>)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b290:	4b24      	ldr	r3, [pc, #144]	; (800b324 <prvAddNewTaskToReadyList+0xb8>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d110      	bne.n	800b2ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b298:	f000 fcbc 	bl	800bc14 <prvInitialiseTaskLists>
 800b29c:	e00d      	b.n	800b2ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b29e:	4b23      	ldr	r3, [pc, #140]	; (800b32c <prvAddNewTaskToReadyList+0xc0>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d109      	bne.n	800b2ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b2a6:	4b20      	ldr	r3, [pc, #128]	; (800b328 <prvAddNewTaskToReadyList+0xbc>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d802      	bhi.n	800b2ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b2b4:	4a1c      	ldr	r2, [pc, #112]	; (800b328 <prvAddNewTaskToReadyList+0xbc>)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b2ba:	4b1d      	ldr	r3, [pc, #116]	; (800b330 <prvAddNewTaskToReadyList+0xc4>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	4a1b      	ldr	r2, [pc, #108]	; (800b330 <prvAddNewTaskToReadyList+0xc4>)
 800b2c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	409a      	lsls	r2, r3
 800b2cc:	4b19      	ldr	r3, [pc, #100]	; (800b334 <prvAddNewTaskToReadyList+0xc8>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	4a18      	ldr	r2, [pc, #96]	; (800b334 <prvAddNewTaskToReadyList+0xc8>)
 800b2d4:	6013      	str	r3, [r2, #0]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2da:	4613      	mov	r3, r2
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	4413      	add	r3, r2
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4a15      	ldr	r2, [pc, #84]	; (800b338 <prvAddNewTaskToReadyList+0xcc>)
 800b2e4:	441a      	add	r2, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	4610      	mov	r0, r2
 800b2ee:	f7fe fdf9 	bl	8009ee4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b2f2:	f001 f8cb 	bl	800c48c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b2f6:	4b0d      	ldr	r3, [pc, #52]	; (800b32c <prvAddNewTaskToReadyList+0xc0>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00e      	beq.n	800b31c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b2fe:	4b0a      	ldr	r3, [pc, #40]	; (800b328 <prvAddNewTaskToReadyList+0xbc>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b308:	429a      	cmp	r2, r3
 800b30a:	d207      	bcs.n	800b31c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b30c:	4b0b      	ldr	r3, [pc, #44]	; (800b33c <prvAddNewTaskToReadyList+0xd0>)
 800b30e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b312:	601a      	str	r2, [r3, #0]
 800b314:	f3bf 8f4f 	dsb	sy
 800b318:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b31c:	bf00      	nop
 800b31e:	3708      	adds	r7, #8
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	20000804 	.word	0x20000804
 800b328:	20000704 	.word	0x20000704
 800b32c:	20000810 	.word	0x20000810
 800b330:	20000820 	.word	0x20000820
 800b334:	2000080c 	.word	0x2000080c
 800b338:	20000708 	.word	0x20000708
 800b33c:	e000ed04 	.word	0xe000ed04

0800b340 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b348:	f001 f86e 	bl	800c428 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d102      	bne.n	800b358 <vTaskDelete+0x18>
 800b352:	4b39      	ldr	r3, [pc, #228]	; (800b438 <vTaskDelete+0xf8>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	e000      	b.n	800b35a <vTaskDelete+0x1a>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	3304      	adds	r3, #4
 800b360:	4618      	mov	r0, r3
 800b362:	f7fe fe1c 	bl	8009f9e <uxListRemove>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d115      	bne.n	800b398 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b370:	4932      	ldr	r1, [pc, #200]	; (800b43c <vTaskDelete+0xfc>)
 800b372:	4613      	mov	r3, r2
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	4413      	add	r3, r2
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	440b      	add	r3, r1
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d10a      	bne.n	800b398 <vTaskDelete+0x58>
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b386:	2201      	movs	r2, #1
 800b388:	fa02 f303 	lsl.w	r3, r2, r3
 800b38c:	43da      	mvns	r2, r3
 800b38e:	4b2c      	ldr	r3, [pc, #176]	; (800b440 <vTaskDelete+0x100>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4013      	ands	r3, r2
 800b394:	4a2a      	ldr	r2, [pc, #168]	; (800b440 <vTaskDelete+0x100>)
 800b396:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d004      	beq.n	800b3aa <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	3318      	adds	r3, #24
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7fe fdfa 	bl	8009f9e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b3aa:	4b26      	ldr	r3, [pc, #152]	; (800b444 <vTaskDelete+0x104>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	4a24      	ldr	r2, [pc, #144]	; (800b444 <vTaskDelete+0x104>)
 800b3b2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b3b4:	4b20      	ldr	r3, [pc, #128]	; (800b438 <vTaskDelete+0xf8>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d10b      	bne.n	800b3d6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	3304      	adds	r3, #4
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	4820      	ldr	r0, [pc, #128]	; (800b448 <vTaskDelete+0x108>)
 800b3c6:	f7fe fd8d 	bl	8009ee4 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b3ca:	4b20      	ldr	r3, [pc, #128]	; (800b44c <vTaskDelete+0x10c>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	4a1e      	ldr	r2, [pc, #120]	; (800b44c <vTaskDelete+0x10c>)
 800b3d2:	6013      	str	r3, [r2, #0]
 800b3d4:	e009      	b.n	800b3ea <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b3d6:	4b1e      	ldr	r3, [pc, #120]	; (800b450 <vTaskDelete+0x110>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	4a1c      	ldr	r2, [pc, #112]	; (800b450 <vTaskDelete+0x110>)
 800b3de:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f000 fc83 	bl	800bcec <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b3e6:	f000 fcb7 	bl	800bd58 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800b3ea:	f001 f84f 	bl	800c48c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b3ee:	4b19      	ldr	r3, [pc, #100]	; (800b454 <vTaskDelete+0x114>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d01c      	beq.n	800b430 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 800b3f6:	4b10      	ldr	r3, [pc, #64]	; (800b438 <vTaskDelete+0xf8>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d117      	bne.n	800b430 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b400:	4b15      	ldr	r3, [pc, #84]	; (800b458 <vTaskDelete+0x118>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00b      	beq.n	800b420 <vTaskDelete+0xe0>
 800b408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40c:	b672      	cpsid	i
 800b40e:	f383 8811 	msr	BASEPRI, r3
 800b412:	f3bf 8f6f 	isb	sy
 800b416:	f3bf 8f4f 	dsb	sy
 800b41a:	b662      	cpsie	i
 800b41c:	60bb      	str	r3, [r7, #8]
 800b41e:	e7fe      	b.n	800b41e <vTaskDelete+0xde>
				portYIELD_WITHIN_API();
 800b420:	4b0e      	ldr	r3, [pc, #56]	; (800b45c <vTaskDelete+0x11c>)
 800b422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b426:	601a      	str	r2, [r3, #0]
 800b428:	f3bf 8f4f 	dsb	sy
 800b42c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b430:	bf00      	nop
 800b432:	3710      	adds	r7, #16
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}
 800b438:	20000704 	.word	0x20000704
 800b43c:	20000708 	.word	0x20000708
 800b440:	2000080c 	.word	0x2000080c
 800b444:	20000820 	.word	0x20000820
 800b448:	200007d8 	.word	0x200007d8
 800b44c:	200007ec 	.word	0x200007ec
 800b450:	20000804 	.word	0x20000804
 800b454:	20000810 	.word	0x20000810
 800b458:	2000082c 	.word	0x2000082c
 800b45c:	e000ed04 	.word	0xe000ed04

0800b460 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b468:	2300      	movs	r3, #0
 800b46a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d018      	beq.n	800b4a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b472:	4b14      	ldr	r3, [pc, #80]	; (800b4c4 <vTaskDelay+0x64>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00b      	beq.n	800b492 <vTaskDelay+0x32>
 800b47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47e:	b672      	cpsid	i
 800b480:	f383 8811 	msr	BASEPRI, r3
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	f3bf 8f4f 	dsb	sy
 800b48c:	b662      	cpsie	i
 800b48e:	60bb      	str	r3, [r7, #8]
 800b490:	e7fe      	b.n	800b490 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800b492:	f000 f887 	bl	800b5a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b496:	2100      	movs	r1, #0
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 fe53 	bl	800c144 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b49e:	f000 f88f 	bl	800b5c0 <xTaskResumeAll>
 800b4a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d107      	bne.n	800b4ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b4aa:	4b07      	ldr	r3, [pc, #28]	; (800b4c8 <vTaskDelay+0x68>)
 800b4ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4b0:	601a      	str	r2, [r3, #0]
 800b4b2:	f3bf 8f4f 	dsb	sy
 800b4b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b4ba:	bf00      	nop
 800b4bc:	3710      	adds	r7, #16
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	2000082c 	.word	0x2000082c
 800b4c8:	e000ed04 	.word	0xe000ed04

0800b4cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b08a      	sub	sp, #40	; 0x28
 800b4d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b4da:	463a      	mov	r2, r7
 800b4dc:	1d39      	adds	r1, r7, #4
 800b4de:	f107 0308 	add.w	r3, r7, #8
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7f6 f9c0 	bl	8001868 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b4e8:	6839      	ldr	r1, [r7, #0]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	9202      	str	r2, [sp, #8]
 800b4f0:	9301      	str	r3, [sp, #4]
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	9300      	str	r3, [sp, #0]
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	460a      	mov	r2, r1
 800b4fa:	4922      	ldr	r1, [pc, #136]	; (800b584 <vTaskStartScheduler+0xb8>)
 800b4fc:	4822      	ldr	r0, [pc, #136]	; (800b588 <vTaskStartScheduler+0xbc>)
 800b4fe:	f7ff fd67 	bl	800afd0 <xTaskCreateStatic>
 800b502:	4602      	mov	r2, r0
 800b504:	4b21      	ldr	r3, [pc, #132]	; (800b58c <vTaskStartScheduler+0xc0>)
 800b506:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b508:	4b20      	ldr	r3, [pc, #128]	; (800b58c <vTaskStartScheduler+0xc0>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d002      	beq.n	800b516 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b510:	2301      	movs	r3, #1
 800b512:	617b      	str	r3, [r7, #20]
 800b514:	e001      	b.n	800b51a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b516:	2300      	movs	r3, #0
 800b518:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d11c      	bne.n	800b55a <vTaskStartScheduler+0x8e>
 800b520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b524:	b672      	cpsid	i
 800b526:	f383 8811 	msr	BASEPRI, r3
 800b52a:	f3bf 8f6f 	isb	sy
 800b52e:	f3bf 8f4f 	dsb	sy
 800b532:	b662      	cpsie	i
 800b534:	613b      	str	r3, [r7, #16]

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b536:	4b16      	ldr	r3, [pc, #88]	; (800b590 <vTaskStartScheduler+0xc4>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	334c      	adds	r3, #76	; 0x4c
 800b53c:	4a15      	ldr	r2, [pc, #84]	; (800b594 <vTaskStartScheduler+0xc8>)
 800b53e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b540:	4b15      	ldr	r3, [pc, #84]	; (800b598 <vTaskStartScheduler+0xcc>)
 800b542:	f04f 32ff 	mov.w	r2, #4294967295
 800b546:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b548:	4b14      	ldr	r3, [pc, #80]	; (800b59c <vTaskStartScheduler+0xd0>)
 800b54a:	2201      	movs	r2, #1
 800b54c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b54e:	4b14      	ldr	r3, [pc, #80]	; (800b5a0 <vTaskStartScheduler+0xd4>)
 800b550:	2200      	movs	r2, #0
 800b552:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b554:	f000 feec 	bl	800c330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b558:	e00f      	b.n	800b57a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b560:	d10b      	bne.n	800b57a <vTaskStartScheduler+0xae>
 800b562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b566:	b672      	cpsid	i
 800b568:	f383 8811 	msr	BASEPRI, r3
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f3bf 8f4f 	dsb	sy
 800b574:	b662      	cpsie	i
 800b576:	60fb      	str	r3, [r7, #12]
 800b578:	e7fe      	b.n	800b578 <vTaskStartScheduler+0xac>
}
 800b57a:	bf00      	nop
 800b57c:	3718      	adds	r7, #24
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	0801f8f8 	.word	0x0801f8f8
 800b588:	0800bbe5 	.word	0x0800bbe5
 800b58c:	20000828 	.word	0x20000828
 800b590:	20000704 	.word	0x20000704
 800b594:	20000020 	.word	0x20000020
 800b598:	20000824 	.word	0x20000824
 800b59c:	20000810 	.word	0x20000810
 800b5a0:	20000808 	.word	0x20000808

0800b5a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b5a8:	4b04      	ldr	r3, [pc, #16]	; (800b5bc <vTaskSuspendAll+0x18>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	4a03      	ldr	r2, [pc, #12]	; (800b5bc <vTaskSuspendAll+0x18>)
 800b5b0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b5b2:	bf00      	nop
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr
 800b5bc:	2000082c 	.word	0x2000082c

0800b5c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b5ce:	4b42      	ldr	r3, [pc, #264]	; (800b6d8 <xTaskResumeAll+0x118>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d10b      	bne.n	800b5ee <xTaskResumeAll+0x2e>
 800b5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5da:	b672      	cpsid	i
 800b5dc:	f383 8811 	msr	BASEPRI, r3
 800b5e0:	f3bf 8f6f 	isb	sy
 800b5e4:	f3bf 8f4f 	dsb	sy
 800b5e8:	b662      	cpsie	i
 800b5ea:	603b      	str	r3, [r7, #0]
 800b5ec:	e7fe      	b.n	800b5ec <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b5ee:	f000 ff1b 	bl	800c428 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b5f2:	4b39      	ldr	r3, [pc, #228]	; (800b6d8 <xTaskResumeAll+0x118>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	3b01      	subs	r3, #1
 800b5f8:	4a37      	ldr	r2, [pc, #220]	; (800b6d8 <xTaskResumeAll+0x118>)
 800b5fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5fc:	4b36      	ldr	r3, [pc, #216]	; (800b6d8 <xTaskResumeAll+0x118>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d161      	bne.n	800b6c8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b604:	4b35      	ldr	r3, [pc, #212]	; (800b6dc <xTaskResumeAll+0x11c>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d05d      	beq.n	800b6c8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b60c:	e02e      	b.n	800b66c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b60e:	4b34      	ldr	r3, [pc, #208]	; (800b6e0 <xTaskResumeAll+0x120>)
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	3318      	adds	r3, #24
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7fe fcbf 	bl	8009f9e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	3304      	adds	r3, #4
 800b624:	4618      	mov	r0, r3
 800b626:	f7fe fcba 	bl	8009f9e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b62e:	2201      	movs	r2, #1
 800b630:	409a      	lsls	r2, r3
 800b632:	4b2c      	ldr	r3, [pc, #176]	; (800b6e4 <xTaskResumeAll+0x124>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4313      	orrs	r3, r2
 800b638:	4a2a      	ldr	r2, [pc, #168]	; (800b6e4 <xTaskResumeAll+0x124>)
 800b63a:	6013      	str	r3, [r2, #0]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b640:	4613      	mov	r3, r2
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	4413      	add	r3, r2
 800b646:	009b      	lsls	r3, r3, #2
 800b648:	4a27      	ldr	r2, [pc, #156]	; (800b6e8 <xTaskResumeAll+0x128>)
 800b64a:	441a      	add	r2, r3
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	3304      	adds	r3, #4
 800b650:	4619      	mov	r1, r3
 800b652:	4610      	mov	r0, r2
 800b654:	f7fe fc46 	bl	8009ee4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b65c:	4b23      	ldr	r3, [pc, #140]	; (800b6ec <xTaskResumeAll+0x12c>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b662:	429a      	cmp	r2, r3
 800b664:	d302      	bcc.n	800b66c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b666:	4b22      	ldr	r3, [pc, #136]	; (800b6f0 <xTaskResumeAll+0x130>)
 800b668:	2201      	movs	r2, #1
 800b66a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b66c:	4b1c      	ldr	r3, [pc, #112]	; (800b6e0 <xTaskResumeAll+0x120>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d1cc      	bne.n	800b60e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d001      	beq.n	800b67e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b67a:	f000 fb6d 	bl	800bd58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b67e:	4b1d      	ldr	r3, [pc, #116]	; (800b6f4 <xTaskResumeAll+0x134>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d010      	beq.n	800b6ac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b68a:	f000 f859 	bl	800b740 <xTaskIncrementTick>
 800b68e:	4603      	mov	r3, r0
 800b690:	2b00      	cmp	r3, #0
 800b692:	d002      	beq.n	800b69a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b694:	4b16      	ldr	r3, [pc, #88]	; (800b6f0 <xTaskResumeAll+0x130>)
 800b696:	2201      	movs	r2, #1
 800b698:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	3b01      	subs	r3, #1
 800b69e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d1f1      	bne.n	800b68a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800b6a6:	4b13      	ldr	r3, [pc, #76]	; (800b6f4 <xTaskResumeAll+0x134>)
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b6ac:	4b10      	ldr	r3, [pc, #64]	; (800b6f0 <xTaskResumeAll+0x130>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d009      	beq.n	800b6c8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b6b8:	4b0f      	ldr	r3, [pc, #60]	; (800b6f8 <xTaskResumeAll+0x138>)
 800b6ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6be:	601a      	str	r2, [r3, #0]
 800b6c0:	f3bf 8f4f 	dsb	sy
 800b6c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b6c8:	f000 fee0 	bl	800c48c <vPortExitCritical>

	return xAlreadyYielded;
 800b6cc:	68bb      	ldr	r3, [r7, #8]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	2000082c 	.word	0x2000082c
 800b6dc:	20000804 	.word	0x20000804
 800b6e0:	200007c4 	.word	0x200007c4
 800b6e4:	2000080c 	.word	0x2000080c
 800b6e8:	20000708 	.word	0x20000708
 800b6ec:	20000704 	.word	0x20000704
 800b6f0:	20000818 	.word	0x20000818
 800b6f4:	20000814 	.word	0x20000814
 800b6f8:	e000ed04 	.word	0xe000ed04

0800b6fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b702:	4b05      	ldr	r3, [pc, #20]	; (800b718 <xTaskGetTickCount+0x1c>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b708:	687b      	ldr	r3, [r7, #4]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	370c      	adds	r7, #12
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop
 800b718:	20000808 	.word	0x20000808

0800b71c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b722:	f000 ff61 	bl	800c5e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b726:	2300      	movs	r3, #0
 800b728:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b72a:	4b04      	ldr	r3, [pc, #16]	; (800b73c <xTaskGetTickCountFromISR+0x20>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b730:	683b      	ldr	r3, [r7, #0]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3708      	adds	r7, #8
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	20000808 	.word	0x20000808

0800b740 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b086      	sub	sp, #24
 800b744:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b746:	2300      	movs	r3, #0
 800b748:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b74a:	4b4f      	ldr	r3, [pc, #316]	; (800b888 <xTaskIncrementTick+0x148>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	f040 8089 	bne.w	800b866 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b754:	4b4d      	ldr	r3, [pc, #308]	; (800b88c <xTaskIncrementTick+0x14c>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	3301      	adds	r3, #1
 800b75a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b75c:	4a4b      	ldr	r2, [pc, #300]	; (800b88c <xTaskIncrementTick+0x14c>)
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d121      	bne.n	800b7ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b768:	4b49      	ldr	r3, [pc, #292]	; (800b890 <xTaskIncrementTick+0x150>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d00b      	beq.n	800b78a <xTaskIncrementTick+0x4a>
 800b772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b776:	b672      	cpsid	i
 800b778:	f383 8811 	msr	BASEPRI, r3
 800b77c:	f3bf 8f6f 	isb	sy
 800b780:	f3bf 8f4f 	dsb	sy
 800b784:	b662      	cpsie	i
 800b786:	603b      	str	r3, [r7, #0]
 800b788:	e7fe      	b.n	800b788 <xTaskIncrementTick+0x48>
 800b78a:	4b41      	ldr	r3, [pc, #260]	; (800b890 <xTaskIncrementTick+0x150>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	60fb      	str	r3, [r7, #12]
 800b790:	4b40      	ldr	r3, [pc, #256]	; (800b894 <xTaskIncrementTick+0x154>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a3e      	ldr	r2, [pc, #248]	; (800b890 <xTaskIncrementTick+0x150>)
 800b796:	6013      	str	r3, [r2, #0]
 800b798:	4a3e      	ldr	r2, [pc, #248]	; (800b894 <xTaskIncrementTick+0x154>)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	6013      	str	r3, [r2, #0]
 800b79e:	4b3e      	ldr	r3, [pc, #248]	; (800b898 <xTaskIncrementTick+0x158>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	4a3c      	ldr	r2, [pc, #240]	; (800b898 <xTaskIncrementTick+0x158>)
 800b7a6:	6013      	str	r3, [r2, #0]
 800b7a8:	f000 fad6 	bl	800bd58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b7ac:	4b3b      	ldr	r3, [pc, #236]	; (800b89c <xTaskIncrementTick+0x15c>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	693a      	ldr	r2, [r7, #16]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d348      	bcc.n	800b848 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7b6:	4b36      	ldr	r3, [pc, #216]	; (800b890 <xTaskIncrementTick+0x150>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d104      	bne.n	800b7ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7c0:	4b36      	ldr	r3, [pc, #216]	; (800b89c <xTaskIncrementTick+0x15c>)
 800b7c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7c6:	601a      	str	r2, [r3, #0]
					break;
 800b7c8:	e03e      	b.n	800b848 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7ca:	4b31      	ldr	r3, [pc, #196]	; (800b890 <xTaskIncrementTick+0x150>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	68db      	ldr	r3, [r3, #12]
 800b7d0:	68db      	ldr	r3, [r3, #12]
 800b7d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b7da:	693a      	ldr	r2, [r7, #16]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d203      	bcs.n	800b7ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b7e2:	4a2e      	ldr	r2, [pc, #184]	; (800b89c <xTaskIncrementTick+0x15c>)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b7e8:	e02e      	b.n	800b848 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	3304      	adds	r3, #4
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7fe fbd5 	bl	8009f9e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d004      	beq.n	800b806 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	3318      	adds	r3, #24
 800b800:	4618      	mov	r0, r3
 800b802:	f7fe fbcc 	bl	8009f9e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80a:	2201      	movs	r2, #1
 800b80c:	409a      	lsls	r2, r3
 800b80e:	4b24      	ldr	r3, [pc, #144]	; (800b8a0 <xTaskIncrementTick+0x160>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4313      	orrs	r3, r2
 800b814:	4a22      	ldr	r2, [pc, #136]	; (800b8a0 <xTaskIncrementTick+0x160>)
 800b816:	6013      	str	r3, [r2, #0]
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b81c:	4613      	mov	r3, r2
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	4413      	add	r3, r2
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	4a1f      	ldr	r2, [pc, #124]	; (800b8a4 <xTaskIncrementTick+0x164>)
 800b826:	441a      	add	r2, r3
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	3304      	adds	r3, #4
 800b82c:	4619      	mov	r1, r3
 800b82e:	4610      	mov	r0, r2
 800b830:	f7fe fb58 	bl	8009ee4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b838:	4b1b      	ldr	r3, [pc, #108]	; (800b8a8 <xTaskIncrementTick+0x168>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83e:	429a      	cmp	r2, r3
 800b840:	d3b9      	bcc.n	800b7b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b842:	2301      	movs	r3, #1
 800b844:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b846:	e7b6      	b.n	800b7b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b848:	4b17      	ldr	r3, [pc, #92]	; (800b8a8 <xTaskIncrementTick+0x168>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b84e:	4915      	ldr	r1, [pc, #84]	; (800b8a4 <xTaskIncrementTick+0x164>)
 800b850:	4613      	mov	r3, r2
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	4413      	add	r3, r2
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	440b      	add	r3, r1
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d907      	bls.n	800b870 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800b860:	2301      	movs	r3, #1
 800b862:	617b      	str	r3, [r7, #20]
 800b864:	e004      	b.n	800b870 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b866:	4b11      	ldr	r3, [pc, #68]	; (800b8ac <xTaskIncrementTick+0x16c>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	3301      	adds	r3, #1
 800b86c:	4a0f      	ldr	r2, [pc, #60]	; (800b8ac <xTaskIncrementTick+0x16c>)
 800b86e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b870:	4b0f      	ldr	r3, [pc, #60]	; (800b8b0 <xTaskIncrementTick+0x170>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d001      	beq.n	800b87c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800b878:	2301      	movs	r3, #1
 800b87a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b87c:	697b      	ldr	r3, [r7, #20]
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3718      	adds	r7, #24
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	2000082c 	.word	0x2000082c
 800b88c:	20000808 	.word	0x20000808
 800b890:	200007bc 	.word	0x200007bc
 800b894:	200007c0 	.word	0x200007c0
 800b898:	2000081c 	.word	0x2000081c
 800b89c:	20000824 	.word	0x20000824
 800b8a0:	2000080c 	.word	0x2000080c
 800b8a4:	20000708 	.word	0x20000708
 800b8a8:	20000704 	.word	0x20000704
 800b8ac:	20000814 	.word	0x20000814
 800b8b0:	20000818 	.word	0x20000818

0800b8b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b088      	sub	sp, #32
 800b8b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b8ba:	4b3c      	ldr	r3, [pc, #240]	; (800b9ac <vTaskSwitchContext+0xf8>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d003      	beq.n	800b8ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b8c2:	4b3b      	ldr	r3, [pc, #236]	; (800b9b0 <vTaskSwitchContext+0xfc>)
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b8c8:	e06c      	b.n	800b9a4 <vTaskSwitchContext+0xf0>
		xYieldPending = pdFALSE;
 800b8ca:	4b39      	ldr	r3, [pc, #228]	; (800b9b0 <vTaskSwitchContext+0xfc>)
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800b8d0:	4b38      	ldr	r3, [pc, #224]	; (800b9b4 <vTaskSwitchContext+0x100>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8d6:	61fb      	str	r3, [r7, #28]
 800b8d8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800b8dc:	61bb      	str	r3, [r7, #24]
 800b8de:	69fb      	ldr	r3, [r7, #28]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	69ba      	ldr	r2, [r7, #24]
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d111      	bne.n	800b90c <vTaskSwitchContext+0x58>
 800b8e8:	69fb      	ldr	r3, [r7, #28]
 800b8ea:	3304      	adds	r3, #4
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	69ba      	ldr	r2, [r7, #24]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d10b      	bne.n	800b90c <vTaskSwitchContext+0x58>
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	3308      	adds	r3, #8
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	69ba      	ldr	r2, [r7, #24]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d105      	bne.n	800b90c <vTaskSwitchContext+0x58>
 800b900:	69fb      	ldr	r3, [r7, #28]
 800b902:	330c      	adds	r3, #12
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	69ba      	ldr	r2, [r7, #24]
 800b908:	429a      	cmp	r2, r3
 800b90a:	d008      	beq.n	800b91e <vTaskSwitchContext+0x6a>
 800b90c:	4b29      	ldr	r3, [pc, #164]	; (800b9b4 <vTaskSwitchContext+0x100>)
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	4b28      	ldr	r3, [pc, #160]	; (800b9b4 <vTaskSwitchContext+0x100>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	3334      	adds	r3, #52	; 0x34
 800b916:	4619      	mov	r1, r3
 800b918:	4610      	mov	r0, r2
 800b91a:	f7f5 ff99 	bl	8001850 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b91e:	4b26      	ldr	r3, [pc, #152]	; (800b9b8 <vTaskSwitchContext+0x104>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	fab3 f383 	clz	r3, r3
 800b92a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b92c:	7afb      	ldrb	r3, [r7, #11]
 800b92e:	f1c3 031f 	rsb	r3, r3, #31
 800b932:	617b      	str	r3, [r7, #20]
 800b934:	4921      	ldr	r1, [pc, #132]	; (800b9bc <vTaskSwitchContext+0x108>)
 800b936:	697a      	ldr	r2, [r7, #20]
 800b938:	4613      	mov	r3, r2
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	4413      	add	r3, r2
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	440b      	add	r3, r1
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d10b      	bne.n	800b960 <vTaskSwitchContext+0xac>
	__asm volatile
 800b948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94c:	b672      	cpsid	i
 800b94e:	f383 8811 	msr	BASEPRI, r3
 800b952:	f3bf 8f6f 	isb	sy
 800b956:	f3bf 8f4f 	dsb	sy
 800b95a:	b662      	cpsie	i
 800b95c:	607b      	str	r3, [r7, #4]
 800b95e:	e7fe      	b.n	800b95e <vTaskSwitchContext+0xaa>
 800b960:	697a      	ldr	r2, [r7, #20]
 800b962:	4613      	mov	r3, r2
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	4413      	add	r3, r2
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	4a14      	ldr	r2, [pc, #80]	; (800b9bc <vTaskSwitchContext+0x108>)
 800b96c:	4413      	add	r3, r2
 800b96e:	613b      	str	r3, [r7, #16]
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	685a      	ldr	r2, [r3, #4]
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	605a      	str	r2, [r3, #4]
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	685a      	ldr	r2, [r3, #4]
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	3308      	adds	r3, #8
 800b982:	429a      	cmp	r2, r3
 800b984:	d104      	bne.n	800b990 <vTaskSwitchContext+0xdc>
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	685a      	ldr	r2, [r3, #4]
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	605a      	str	r2, [r3, #4]
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	4a07      	ldr	r2, [pc, #28]	; (800b9b4 <vTaskSwitchContext+0x100>)
 800b998:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b99a:	4b06      	ldr	r3, [pc, #24]	; (800b9b4 <vTaskSwitchContext+0x100>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	334c      	adds	r3, #76	; 0x4c
 800b9a0:	4a07      	ldr	r2, [pc, #28]	; (800b9c0 <vTaskSwitchContext+0x10c>)
 800b9a2:	6013      	str	r3, [r2, #0]
}
 800b9a4:	bf00      	nop
 800b9a6:	3720      	adds	r7, #32
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	2000082c 	.word	0x2000082c
 800b9b0:	20000818 	.word	0x20000818
 800b9b4:	20000704 	.word	0x20000704
 800b9b8:	2000080c 	.word	0x2000080c
 800b9bc:	20000708 	.word	0x20000708
 800b9c0:	20000020 	.word	0x20000020

0800b9c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d10b      	bne.n	800b9ec <vTaskPlaceOnEventList+0x28>
 800b9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d8:	b672      	cpsid	i
 800b9da:	f383 8811 	msr	BASEPRI, r3
 800b9de:	f3bf 8f6f 	isb	sy
 800b9e2:	f3bf 8f4f 	dsb	sy
 800b9e6:	b662      	cpsie	i
 800b9e8:	60fb      	str	r3, [r7, #12]
 800b9ea:	e7fe      	b.n	800b9ea <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b9ec:	4b07      	ldr	r3, [pc, #28]	; (800ba0c <vTaskPlaceOnEventList+0x48>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	3318      	adds	r3, #24
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f7fe fa99 	bl	8009f2c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b9fa:	2101      	movs	r1, #1
 800b9fc:	6838      	ldr	r0, [r7, #0]
 800b9fe:	f000 fba1 	bl	800c144 <prvAddCurrentTaskToDelayedList>
}
 800ba02:	bf00      	nop
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	20000704 	.word	0x20000704

0800ba10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	68db      	ldr	r3, [r3, #12]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10b      	bne.n	800ba3e <xTaskRemoveFromEventList+0x2e>
 800ba26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2a:	b672      	cpsid	i
 800ba2c:	f383 8811 	msr	BASEPRI, r3
 800ba30:	f3bf 8f6f 	isb	sy
 800ba34:	f3bf 8f4f 	dsb	sy
 800ba38:	b662      	cpsie	i
 800ba3a:	60fb      	str	r3, [r7, #12]
 800ba3c:	e7fe      	b.n	800ba3c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	3318      	adds	r3, #24
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7fe faab 	bl	8009f9e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba48:	4b1d      	ldr	r3, [pc, #116]	; (800bac0 <xTaskRemoveFromEventList+0xb0>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d11c      	bne.n	800ba8a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	3304      	adds	r3, #4
 800ba54:	4618      	mov	r0, r3
 800ba56:	f7fe faa2 	bl	8009f9e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5e:	2201      	movs	r2, #1
 800ba60:	409a      	lsls	r2, r3
 800ba62:	4b18      	ldr	r3, [pc, #96]	; (800bac4 <xTaskRemoveFromEventList+0xb4>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4313      	orrs	r3, r2
 800ba68:	4a16      	ldr	r2, [pc, #88]	; (800bac4 <xTaskRemoveFromEventList+0xb4>)
 800ba6a:	6013      	str	r3, [r2, #0]
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba70:	4613      	mov	r3, r2
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	4413      	add	r3, r2
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	4a13      	ldr	r2, [pc, #76]	; (800bac8 <xTaskRemoveFromEventList+0xb8>)
 800ba7a:	441a      	add	r2, r3
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	3304      	adds	r3, #4
 800ba80:	4619      	mov	r1, r3
 800ba82:	4610      	mov	r0, r2
 800ba84:	f7fe fa2e 	bl	8009ee4 <vListInsertEnd>
 800ba88:	e005      	b.n	800ba96 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	3318      	adds	r3, #24
 800ba8e:	4619      	mov	r1, r3
 800ba90:	480e      	ldr	r0, [pc, #56]	; (800bacc <xTaskRemoveFromEventList+0xbc>)
 800ba92:	f7fe fa27 	bl	8009ee4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba9a:	4b0d      	ldr	r3, [pc, #52]	; (800bad0 <xTaskRemoveFromEventList+0xc0>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d905      	bls.n	800bab0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800baa4:	2301      	movs	r3, #1
 800baa6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800baa8:	4b0a      	ldr	r3, [pc, #40]	; (800bad4 <xTaskRemoveFromEventList+0xc4>)
 800baaa:	2201      	movs	r2, #1
 800baac:	601a      	str	r2, [r3, #0]
 800baae:	e001      	b.n	800bab4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bab0:	2300      	movs	r3, #0
 800bab2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bab4:	697b      	ldr	r3, [r7, #20]
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3718      	adds	r7, #24
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	2000082c 	.word	0x2000082c
 800bac4:	2000080c 	.word	0x2000080c
 800bac8:	20000708 	.word	0x20000708
 800bacc:	200007c4 	.word	0x200007c4
 800bad0:	20000704 	.word	0x20000704
 800bad4:	20000818 	.word	0x20000818

0800bad8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bae0:	4b06      	ldr	r3, [pc, #24]	; (800bafc <vTaskInternalSetTimeOutState+0x24>)
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bae8:	4b05      	ldr	r3, [pc, #20]	; (800bb00 <vTaskInternalSetTimeOutState+0x28>)
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	605a      	str	r2, [r3, #4]
}
 800baf0:	bf00      	nop
 800baf2:	370c      	adds	r7, #12
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr
 800bafc:	2000081c 	.word	0x2000081c
 800bb00:	20000808 	.word	0x20000808

0800bb04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b088      	sub	sp, #32
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d10b      	bne.n	800bb2c <xTaskCheckForTimeOut+0x28>
 800bb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb18:	b672      	cpsid	i
 800bb1a:	f383 8811 	msr	BASEPRI, r3
 800bb1e:	f3bf 8f6f 	isb	sy
 800bb22:	f3bf 8f4f 	dsb	sy
 800bb26:	b662      	cpsie	i
 800bb28:	613b      	str	r3, [r7, #16]
 800bb2a:	e7fe      	b.n	800bb2a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d10b      	bne.n	800bb4a <xTaskCheckForTimeOut+0x46>
 800bb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb36:	b672      	cpsid	i
 800bb38:	f383 8811 	msr	BASEPRI, r3
 800bb3c:	f3bf 8f6f 	isb	sy
 800bb40:	f3bf 8f4f 	dsb	sy
 800bb44:	b662      	cpsie	i
 800bb46:	60fb      	str	r3, [r7, #12]
 800bb48:	e7fe      	b.n	800bb48 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800bb4a:	f000 fc6d 	bl	800c428 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bb4e:	4b1d      	ldr	r3, [pc, #116]	; (800bbc4 <xTaskCheckForTimeOut+0xc0>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	69ba      	ldr	r2, [r7, #24]
 800bb5a:	1ad3      	subs	r3, r2, r3
 800bb5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb66:	d102      	bne.n	800bb6e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	61fb      	str	r3, [r7, #28]
 800bb6c:	e023      	b.n	800bbb6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	4b15      	ldr	r3, [pc, #84]	; (800bbc8 <xTaskCheckForTimeOut+0xc4>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d007      	beq.n	800bb8a <xTaskCheckForTimeOut+0x86>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	69ba      	ldr	r2, [r7, #24]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d302      	bcc.n	800bb8a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bb84:	2301      	movs	r3, #1
 800bb86:	61fb      	str	r3, [r7, #28]
 800bb88:	e015      	b.n	800bbb6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	697a      	ldr	r2, [r7, #20]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d20b      	bcs.n	800bbac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	1ad2      	subs	r2, r2, r3
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f7ff ff99 	bl	800bad8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bba6:	2300      	movs	r3, #0
 800bba8:	61fb      	str	r3, [r7, #28]
 800bbaa:	e004      	b.n	800bbb6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bbb6:	f000 fc69 	bl	800c48c <vPortExitCritical>

	return xReturn;
 800bbba:	69fb      	ldr	r3, [r7, #28]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3720      	adds	r7, #32
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	20000808 	.word	0x20000808
 800bbc8:	2000081c 	.word	0x2000081c

0800bbcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bbcc:	b480      	push	{r7}
 800bbce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bbd0:	4b03      	ldr	r3, [pc, #12]	; (800bbe0 <vTaskMissedYield+0x14>)
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	601a      	str	r2, [r3, #0]
}
 800bbd6:	bf00      	nop
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr
 800bbe0:	20000818 	.word	0x20000818

0800bbe4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bbec:	f000 f852 	bl	800bc94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bbf0:	4b06      	ldr	r3, [pc, #24]	; (800bc0c <prvIdleTask+0x28>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d9f9      	bls.n	800bbec <prvIdleTask+0x8>
			{
				taskYIELD();
 800bbf8:	4b05      	ldr	r3, [pc, #20]	; (800bc10 <prvIdleTask+0x2c>)
 800bbfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbfe:	601a      	str	r2, [r3, #0]
 800bc00:	f3bf 8f4f 	dsb	sy
 800bc04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bc08:	e7f0      	b.n	800bbec <prvIdleTask+0x8>
 800bc0a:	bf00      	nop
 800bc0c:	20000708 	.word	0x20000708
 800bc10:	e000ed04 	.word	0xe000ed04

0800bc14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	607b      	str	r3, [r7, #4]
 800bc1e:	e00c      	b.n	800bc3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	4613      	mov	r3, r2
 800bc24:	009b      	lsls	r3, r3, #2
 800bc26:	4413      	add	r3, r2
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	4a12      	ldr	r2, [pc, #72]	; (800bc74 <prvInitialiseTaskLists+0x60>)
 800bc2c:	4413      	add	r3, r2
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fe f92b 	bl	8009e8a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	3301      	adds	r3, #1
 800bc38:	607b      	str	r3, [r7, #4]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2b06      	cmp	r3, #6
 800bc3e:	d9ef      	bls.n	800bc20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bc40:	480d      	ldr	r0, [pc, #52]	; (800bc78 <prvInitialiseTaskLists+0x64>)
 800bc42:	f7fe f922 	bl	8009e8a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bc46:	480d      	ldr	r0, [pc, #52]	; (800bc7c <prvInitialiseTaskLists+0x68>)
 800bc48:	f7fe f91f 	bl	8009e8a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bc4c:	480c      	ldr	r0, [pc, #48]	; (800bc80 <prvInitialiseTaskLists+0x6c>)
 800bc4e:	f7fe f91c 	bl	8009e8a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bc52:	480c      	ldr	r0, [pc, #48]	; (800bc84 <prvInitialiseTaskLists+0x70>)
 800bc54:	f7fe f919 	bl	8009e8a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bc58:	480b      	ldr	r0, [pc, #44]	; (800bc88 <prvInitialiseTaskLists+0x74>)
 800bc5a:	f7fe f916 	bl	8009e8a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bc5e:	4b0b      	ldr	r3, [pc, #44]	; (800bc8c <prvInitialiseTaskLists+0x78>)
 800bc60:	4a05      	ldr	r2, [pc, #20]	; (800bc78 <prvInitialiseTaskLists+0x64>)
 800bc62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bc64:	4b0a      	ldr	r3, [pc, #40]	; (800bc90 <prvInitialiseTaskLists+0x7c>)
 800bc66:	4a05      	ldr	r2, [pc, #20]	; (800bc7c <prvInitialiseTaskLists+0x68>)
 800bc68:	601a      	str	r2, [r3, #0]
}
 800bc6a:	bf00      	nop
 800bc6c:	3708      	adds	r7, #8
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	20000708 	.word	0x20000708
 800bc78:	20000794 	.word	0x20000794
 800bc7c:	200007a8 	.word	0x200007a8
 800bc80:	200007c4 	.word	0x200007c4
 800bc84:	200007d8 	.word	0x200007d8
 800bc88:	200007f0 	.word	0x200007f0
 800bc8c:	200007bc 	.word	0x200007bc
 800bc90:	200007c0 	.word	0x200007c0

0800bc94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc9a:	e019      	b.n	800bcd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bc9c:	f000 fbc4 	bl	800c428 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bca0:	4b0f      	ldr	r3, [pc, #60]	; (800bce0 <prvCheckTasksWaitingTermination+0x4c>)
 800bca2:	68db      	ldr	r3, [r3, #12]
 800bca4:	68db      	ldr	r3, [r3, #12]
 800bca6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	3304      	adds	r3, #4
 800bcac:	4618      	mov	r0, r3
 800bcae:	f7fe f976 	bl	8009f9e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bcb2:	4b0c      	ldr	r3, [pc, #48]	; (800bce4 <prvCheckTasksWaitingTermination+0x50>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	3b01      	subs	r3, #1
 800bcb8:	4a0a      	ldr	r2, [pc, #40]	; (800bce4 <prvCheckTasksWaitingTermination+0x50>)
 800bcba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bcbc:	4b0a      	ldr	r3, [pc, #40]	; (800bce8 <prvCheckTasksWaitingTermination+0x54>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	4a09      	ldr	r2, [pc, #36]	; (800bce8 <prvCheckTasksWaitingTermination+0x54>)
 800bcc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bcc6:	f000 fbe1 	bl	800c48c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 f80e 	bl	800bcec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bcd0:	4b05      	ldr	r3, [pc, #20]	; (800bce8 <prvCheckTasksWaitingTermination+0x54>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d1e1      	bne.n	800bc9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bcd8:	bf00      	nop
 800bcda:	3708      	adds	r7, #8
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	200007d8 	.word	0x200007d8
 800bce4:	20000804 	.word	0x20000804
 800bce8:	200007ec 	.word	0x200007ec

0800bcec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	334c      	adds	r3, #76	; 0x4c
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f00f f933 	bl	801af64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d108      	bne.n	800bd1a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f000 fd4b 	bl	800c7a8 <vPortFree>
				vPortFree( pxTCB );
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 fd48 	bl	800c7a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bd18:	e019      	b.n	800bd4e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800bd20:	2b01      	cmp	r3, #1
 800bd22:	d103      	bne.n	800bd2c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 fd3f 	bl	800c7a8 <vPortFree>
	}
 800bd2a:	e010      	b.n	800bd4e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800bd32:	2b02      	cmp	r3, #2
 800bd34:	d00b      	beq.n	800bd4e <prvDeleteTCB+0x62>
 800bd36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3a:	b672      	cpsid	i
 800bd3c:	f383 8811 	msr	BASEPRI, r3
 800bd40:	f3bf 8f6f 	isb	sy
 800bd44:	f3bf 8f4f 	dsb	sy
 800bd48:	b662      	cpsie	i
 800bd4a:	60fb      	str	r3, [r7, #12]
 800bd4c:	e7fe      	b.n	800bd4c <prvDeleteTCB+0x60>
	}
 800bd4e:	bf00      	nop
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
	...

0800bd58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd5e:	4b0c      	ldr	r3, [pc, #48]	; (800bd90 <prvResetNextTaskUnblockTime+0x38>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d104      	bne.n	800bd72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bd68:	4b0a      	ldr	r3, [pc, #40]	; (800bd94 <prvResetNextTaskUnblockTime+0x3c>)
 800bd6a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bd70:	e008      	b.n	800bd84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd72:	4b07      	ldr	r3, [pc, #28]	; (800bd90 <prvResetNextTaskUnblockTime+0x38>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	68db      	ldr	r3, [r3, #12]
 800bd7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	4a04      	ldr	r2, [pc, #16]	; (800bd94 <prvResetNextTaskUnblockTime+0x3c>)
 800bd82:	6013      	str	r3, [r2, #0]
}
 800bd84:	bf00      	nop
 800bd86:	370c      	adds	r7, #12
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr
 800bd90:	200007bc 	.word	0x200007bc
 800bd94:	20000824 	.word	0x20000824

0800bd98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd9e:	4b0b      	ldr	r3, [pc, #44]	; (800bdcc <xTaskGetSchedulerState+0x34>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d102      	bne.n	800bdac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bda6:	2301      	movs	r3, #1
 800bda8:	607b      	str	r3, [r7, #4]
 800bdaa:	e008      	b.n	800bdbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdac:	4b08      	ldr	r3, [pc, #32]	; (800bdd0 <xTaskGetSchedulerState+0x38>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d102      	bne.n	800bdba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bdb4:	2302      	movs	r3, #2
 800bdb6:	607b      	str	r3, [r7, #4]
 800bdb8:	e001      	b.n	800bdbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bdbe:	687b      	ldr	r3, [r7, #4]
	}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	370c      	adds	r7, #12
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr
 800bdcc:	20000810 	.word	0x20000810
 800bdd0:	2000082c 	.word	0x2000082c

0800bdd4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bde0:	2300      	movs	r3, #0
 800bde2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d069      	beq.n	800bebe <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdee:	4b36      	ldr	r3, [pc, #216]	; (800bec8 <xTaskPriorityInherit+0xf4>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d259      	bcs.n	800beac <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	699b      	ldr	r3, [r3, #24]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	db06      	blt.n	800be0e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be00:	4b31      	ldr	r3, [pc, #196]	; (800bec8 <xTaskPriorityInherit+0xf4>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be06:	f1c3 0207 	rsb	r2, r3, #7
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	6959      	ldr	r1, [r3, #20]
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be16:	4613      	mov	r3, r2
 800be18:	009b      	lsls	r3, r3, #2
 800be1a:	4413      	add	r3, r2
 800be1c:	009b      	lsls	r3, r3, #2
 800be1e:	4a2b      	ldr	r2, [pc, #172]	; (800becc <xTaskPriorityInherit+0xf8>)
 800be20:	4413      	add	r3, r2
 800be22:	4299      	cmp	r1, r3
 800be24:	d13a      	bne.n	800be9c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	3304      	adds	r3, #4
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7fe f8b7 	bl	8009f9e <uxListRemove>
 800be30:	4603      	mov	r3, r0
 800be32:	2b00      	cmp	r3, #0
 800be34:	d115      	bne.n	800be62 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be3a:	4924      	ldr	r1, [pc, #144]	; (800becc <xTaskPriorityInherit+0xf8>)
 800be3c:	4613      	mov	r3, r2
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	4413      	add	r3, r2
 800be42:	009b      	lsls	r3, r3, #2
 800be44:	440b      	add	r3, r1
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d10a      	bne.n	800be62 <xTaskPriorityInherit+0x8e>
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be50:	2201      	movs	r2, #1
 800be52:	fa02 f303 	lsl.w	r3, r2, r3
 800be56:	43da      	mvns	r2, r3
 800be58:	4b1d      	ldr	r3, [pc, #116]	; (800bed0 <xTaskPriorityInherit+0xfc>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4013      	ands	r3, r2
 800be5e:	4a1c      	ldr	r2, [pc, #112]	; (800bed0 <xTaskPriorityInherit+0xfc>)
 800be60:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800be62:	4b19      	ldr	r3, [pc, #100]	; (800bec8 <xTaskPriorityInherit+0xf4>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be70:	2201      	movs	r2, #1
 800be72:	409a      	lsls	r2, r3
 800be74:	4b16      	ldr	r3, [pc, #88]	; (800bed0 <xTaskPriorityInherit+0xfc>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4313      	orrs	r3, r2
 800be7a:	4a15      	ldr	r2, [pc, #84]	; (800bed0 <xTaskPriorityInherit+0xfc>)
 800be7c:	6013      	str	r3, [r2, #0]
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be82:	4613      	mov	r3, r2
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	4413      	add	r3, r2
 800be88:	009b      	lsls	r3, r3, #2
 800be8a:	4a10      	ldr	r2, [pc, #64]	; (800becc <xTaskPriorityInherit+0xf8>)
 800be8c:	441a      	add	r2, r3
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	3304      	adds	r3, #4
 800be92:	4619      	mov	r1, r3
 800be94:	4610      	mov	r0, r2
 800be96:	f7fe f825 	bl	8009ee4 <vListInsertEnd>
 800be9a:	e004      	b.n	800bea6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800be9c:	4b0a      	ldr	r3, [pc, #40]	; (800bec8 <xTaskPriorityInherit+0xf4>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bea6:	2301      	movs	r3, #1
 800bea8:	60fb      	str	r3, [r7, #12]
 800beaa:	e008      	b.n	800bebe <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800beb0:	4b05      	ldr	r3, [pc, #20]	; (800bec8 <xTaskPriorityInherit+0xf4>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d201      	bcs.n	800bebe <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800beba:	2301      	movs	r3, #1
 800bebc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bebe:	68fb      	ldr	r3, [r7, #12]
	}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3710      	adds	r7, #16
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	20000704 	.word	0x20000704
 800becc:	20000708 	.word	0x20000708
 800bed0:	2000080c 	.word	0x2000080c

0800bed4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b086      	sub	sp, #24
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bee0:	2300      	movs	r3, #0
 800bee2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d070      	beq.n	800bfcc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800beea:	4b3b      	ldr	r3, [pc, #236]	; (800bfd8 <xTaskPriorityDisinherit+0x104>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	693a      	ldr	r2, [r7, #16]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d00b      	beq.n	800bf0c <xTaskPriorityDisinherit+0x38>
 800bef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef8:	b672      	cpsid	i
 800befa:	f383 8811 	msr	BASEPRI, r3
 800befe:	f3bf 8f6f 	isb	sy
 800bf02:	f3bf 8f4f 	dsb	sy
 800bf06:	b662      	cpsie	i
 800bf08:	60fb      	str	r3, [r7, #12]
 800bf0a:	e7fe      	b.n	800bf0a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d10b      	bne.n	800bf2c <xTaskPriorityDisinherit+0x58>
 800bf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf18:	b672      	cpsid	i
 800bf1a:	f383 8811 	msr	BASEPRI, r3
 800bf1e:	f3bf 8f6f 	isb	sy
 800bf22:	f3bf 8f4f 	dsb	sy
 800bf26:	b662      	cpsie	i
 800bf28:	60bb      	str	r3, [r7, #8]
 800bf2a:	e7fe      	b.n	800bf2a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf30:	1e5a      	subs	r2, r3, #1
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d044      	beq.n	800bfcc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d140      	bne.n	800bfcc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	3304      	adds	r3, #4
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7fe f825 	bl	8009f9e <uxListRemove>
 800bf54:	4603      	mov	r3, r0
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d115      	bne.n	800bf86 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf5e:	491f      	ldr	r1, [pc, #124]	; (800bfdc <xTaskPriorityDisinherit+0x108>)
 800bf60:	4613      	mov	r3, r2
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	4413      	add	r3, r2
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	440b      	add	r3, r1
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d10a      	bne.n	800bf86 <xTaskPriorityDisinherit+0xb2>
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf74:	2201      	movs	r2, #1
 800bf76:	fa02 f303 	lsl.w	r3, r2, r3
 800bf7a:	43da      	mvns	r2, r3
 800bf7c:	4b18      	ldr	r3, [pc, #96]	; (800bfe0 <xTaskPriorityDisinherit+0x10c>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4013      	ands	r3, r2
 800bf82:	4a17      	ldr	r2, [pc, #92]	; (800bfe0 <xTaskPriorityDisinherit+0x10c>)
 800bf84:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf92:	f1c3 0207 	rsb	r2, r3, #7
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	409a      	lsls	r2, r3
 800bfa2:	4b0f      	ldr	r3, [pc, #60]	; (800bfe0 <xTaskPriorityDisinherit+0x10c>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	4a0d      	ldr	r2, [pc, #52]	; (800bfe0 <xTaskPriorityDisinherit+0x10c>)
 800bfaa:	6013      	str	r3, [r2, #0]
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfb0:	4613      	mov	r3, r2
 800bfb2:	009b      	lsls	r3, r3, #2
 800bfb4:	4413      	add	r3, r2
 800bfb6:	009b      	lsls	r3, r3, #2
 800bfb8:	4a08      	ldr	r2, [pc, #32]	; (800bfdc <xTaskPriorityDisinherit+0x108>)
 800bfba:	441a      	add	r2, r3
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	3304      	adds	r3, #4
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	4610      	mov	r0, r2
 800bfc4:	f7fd ff8e 	bl	8009ee4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bfcc:	697b      	ldr	r3, [r7, #20]
	}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3718      	adds	r7, #24
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	20000704 	.word	0x20000704
 800bfdc:	20000708 	.word	0x20000708
 800bfe0:	2000080c 	.word	0x2000080c

0800bfe4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b088      	sub	sp, #32
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bff2:	2301      	movs	r3, #1
 800bff4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	f000 8085 	beq.w	800c108 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bffe:	69bb      	ldr	r3, [r7, #24]
 800c000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c002:	2b00      	cmp	r3, #0
 800c004:	d10b      	bne.n	800c01e <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800c006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00a:	b672      	cpsid	i
 800c00c:	f383 8811 	msr	BASEPRI, r3
 800c010:	f3bf 8f6f 	isb	sy
 800c014:	f3bf 8f4f 	dsb	sy
 800c018:	b662      	cpsie	i
 800c01a:	60fb      	str	r3, [r7, #12]
 800c01c:	e7fe      	b.n	800c01c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c022:	683a      	ldr	r2, [r7, #0]
 800c024:	429a      	cmp	r2, r3
 800c026:	d902      	bls.n	800c02e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	61fb      	str	r3, [r7, #28]
 800c02c:	e002      	b.n	800c034 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c032:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c034:	69bb      	ldr	r3, [r7, #24]
 800c036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c038:	69fa      	ldr	r2, [r7, #28]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d064      	beq.n	800c108 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c03e:	69bb      	ldr	r3, [r7, #24]
 800c040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c042:	697a      	ldr	r2, [r7, #20]
 800c044:	429a      	cmp	r2, r3
 800c046:	d15f      	bne.n	800c108 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c048:	4b31      	ldr	r3, [pc, #196]	; (800c110 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	69ba      	ldr	r2, [r7, #24]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d10b      	bne.n	800c06a <vTaskPriorityDisinheritAfterTimeout+0x86>
 800c052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c056:	b672      	cpsid	i
 800c058:	f383 8811 	msr	BASEPRI, r3
 800c05c:	f3bf 8f6f 	isb	sy
 800c060:	f3bf 8f4f 	dsb	sy
 800c064:	b662      	cpsie	i
 800c066:	60bb      	str	r3, [r7, #8]
 800c068:	e7fe      	b.n	800c068 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c06a:	69bb      	ldr	r3, [r7, #24]
 800c06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c06e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c070:	69bb      	ldr	r3, [r7, #24]
 800c072:	69fa      	ldr	r2, [r7, #28]
 800c074:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c076:	69bb      	ldr	r3, [r7, #24]
 800c078:	699b      	ldr	r3, [r3, #24]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	db04      	blt.n	800c088 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c07e:	69fb      	ldr	r3, [r7, #28]
 800c080:	f1c3 0207 	rsb	r2, r3, #7
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c088:	69bb      	ldr	r3, [r7, #24]
 800c08a:	6959      	ldr	r1, [r3, #20]
 800c08c:	693a      	ldr	r2, [r7, #16]
 800c08e:	4613      	mov	r3, r2
 800c090:	009b      	lsls	r3, r3, #2
 800c092:	4413      	add	r3, r2
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	4a1f      	ldr	r2, [pc, #124]	; (800c114 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c098:	4413      	add	r3, r2
 800c09a:	4299      	cmp	r1, r3
 800c09c:	d134      	bne.n	800c108 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c09e:	69bb      	ldr	r3, [r7, #24]
 800c0a0:	3304      	adds	r3, #4
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7fd ff7b 	bl	8009f9e <uxListRemove>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d115      	bne.n	800c0da <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c0ae:	69bb      	ldr	r3, [r7, #24]
 800c0b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b2:	4918      	ldr	r1, [pc, #96]	; (800c114 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c0b4:	4613      	mov	r3, r2
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	4413      	add	r3, r2
 800c0ba:	009b      	lsls	r3, r3, #2
 800c0bc:	440b      	add	r3, r1
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d10a      	bne.n	800c0da <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800c0c4:	69bb      	ldr	r3, [r7, #24]
 800c0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	fa02 f303 	lsl.w	r3, r2, r3
 800c0ce:	43da      	mvns	r2, r3
 800c0d0:	4b11      	ldr	r3, [pc, #68]	; (800c118 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4013      	ands	r3, r2
 800c0d6:	4a10      	ldr	r2, [pc, #64]	; (800c118 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c0d8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c0da:	69bb      	ldr	r3, [r7, #24]
 800c0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0de:	2201      	movs	r2, #1
 800c0e0:	409a      	lsls	r2, r3
 800c0e2:	4b0d      	ldr	r3, [pc, #52]	; (800c118 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4313      	orrs	r3, r2
 800c0e8:	4a0b      	ldr	r2, [pc, #44]	; (800c118 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c0ea:	6013      	str	r3, [r2, #0]
 800c0ec:	69bb      	ldr	r3, [r7, #24]
 800c0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0f0:	4613      	mov	r3, r2
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	4413      	add	r3, r2
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	4a06      	ldr	r2, [pc, #24]	; (800c114 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c0fa:	441a      	add	r2, r3
 800c0fc:	69bb      	ldr	r3, [r7, #24]
 800c0fe:	3304      	adds	r3, #4
 800c100:	4619      	mov	r1, r3
 800c102:	4610      	mov	r0, r2
 800c104:	f7fd feee 	bl	8009ee4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c108:	bf00      	nop
 800c10a:	3720      	adds	r7, #32
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	20000704 	.word	0x20000704
 800c114:	20000708 	.word	0x20000708
 800c118:	2000080c 	.word	0x2000080c

0800c11c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c11c:	b480      	push	{r7}
 800c11e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c120:	4b07      	ldr	r3, [pc, #28]	; (800c140 <pvTaskIncrementMutexHeldCount+0x24>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d004      	beq.n	800c132 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c128:	4b05      	ldr	r3, [pc, #20]	; (800c140 <pvTaskIncrementMutexHeldCount+0x24>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c12e:	3201      	adds	r2, #1
 800c130:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c132:	4b03      	ldr	r3, [pc, #12]	; (800c140 <pvTaskIncrementMutexHeldCount+0x24>)
 800c134:	681b      	ldr	r3, [r3, #0]
	}
 800c136:	4618      	mov	r0, r3
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr
 800c140:	20000704 	.word	0x20000704

0800c144 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c14e:	4b29      	ldr	r3, [pc, #164]	; (800c1f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c154:	4b28      	ldr	r3, [pc, #160]	; (800c1f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	3304      	adds	r3, #4
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7fd ff1f 	bl	8009f9e <uxListRemove>
 800c160:	4603      	mov	r3, r0
 800c162:	2b00      	cmp	r3, #0
 800c164:	d10b      	bne.n	800c17e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c166:	4b24      	ldr	r3, [pc, #144]	; (800c1f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c16c:	2201      	movs	r2, #1
 800c16e:	fa02 f303 	lsl.w	r3, r2, r3
 800c172:	43da      	mvns	r2, r3
 800c174:	4b21      	ldr	r3, [pc, #132]	; (800c1fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4013      	ands	r3, r2
 800c17a:	4a20      	ldr	r2, [pc, #128]	; (800c1fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800c17c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c184:	d10a      	bne.n	800c19c <prvAddCurrentTaskToDelayedList+0x58>
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d007      	beq.n	800c19c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c18c:	4b1a      	ldr	r3, [pc, #104]	; (800c1f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	3304      	adds	r3, #4
 800c192:	4619      	mov	r1, r3
 800c194:	481a      	ldr	r0, [pc, #104]	; (800c200 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c196:	f7fd fea5 	bl	8009ee4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c19a:	e026      	b.n	800c1ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c19c:	68fa      	ldr	r2, [r7, #12]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	4413      	add	r3, r2
 800c1a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c1a4:	4b14      	ldr	r3, [pc, #80]	; (800c1f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	68ba      	ldr	r2, [r7, #8]
 800c1aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c1ac:	68ba      	ldr	r2, [r7, #8]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d209      	bcs.n	800c1c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1b4:	4b13      	ldr	r3, [pc, #76]	; (800c204 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c1b6:	681a      	ldr	r2, [r3, #0]
 800c1b8:	4b0f      	ldr	r3, [pc, #60]	; (800c1f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	3304      	adds	r3, #4
 800c1be:	4619      	mov	r1, r3
 800c1c0:	4610      	mov	r0, r2
 800c1c2:	f7fd feb3 	bl	8009f2c <vListInsert>
}
 800c1c6:	e010      	b.n	800c1ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1c8:	4b0f      	ldr	r3, [pc, #60]	; (800c208 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	4b0a      	ldr	r3, [pc, #40]	; (800c1f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	3304      	adds	r3, #4
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	4610      	mov	r0, r2
 800c1d6:	f7fd fea9 	bl	8009f2c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c1da:	4b0c      	ldr	r3, [pc, #48]	; (800c20c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	68ba      	ldr	r2, [r7, #8]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d202      	bcs.n	800c1ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c1e4:	4a09      	ldr	r2, [pc, #36]	; (800c20c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	6013      	str	r3, [r2, #0]
}
 800c1ea:	bf00      	nop
 800c1ec:	3710      	adds	r7, #16
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	bf00      	nop
 800c1f4:	20000808 	.word	0x20000808
 800c1f8:	20000704 	.word	0x20000704
 800c1fc:	2000080c 	.word	0x2000080c
 800c200:	200007f0 	.word	0x200007f0
 800c204:	200007c0 	.word	0x200007c0
 800c208:	200007bc 	.word	0x200007bc
 800c20c:	20000824 	.word	0x20000824

0800c210 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c210:	b480      	push	{r7}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	60b9      	str	r1, [r7, #8]
 800c21a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	3b04      	subs	r3, #4
 800c220:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c228:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	3b04      	subs	r3, #4
 800c22e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	f023 0201 	bic.w	r2, r3, #1
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	3b04      	subs	r3, #4
 800c23e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c240:	4a0c      	ldr	r2, [pc, #48]	; (800c274 <pxPortInitialiseStack+0x64>)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	3b14      	subs	r3, #20
 800c24a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	3b04      	subs	r3, #4
 800c256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f06f 0202 	mvn.w	r2, #2
 800c25e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	3b20      	subs	r3, #32
 800c264:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c266:	68fb      	ldr	r3, [r7, #12]
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3714      	adds	r7, #20
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr
 800c274:	0800c279 	.word	0x0800c279

0800c278 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c278:	b480      	push	{r7}
 800c27a:	b085      	sub	sp, #20
 800c27c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c27e:	2300      	movs	r3, #0
 800c280:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c282:	4b13      	ldr	r3, [pc, #76]	; (800c2d0 <prvTaskExitError+0x58>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c28a:	d00b      	beq.n	800c2a4 <prvTaskExitError+0x2c>
 800c28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c290:	b672      	cpsid	i
 800c292:	f383 8811 	msr	BASEPRI, r3
 800c296:	f3bf 8f6f 	isb	sy
 800c29a:	f3bf 8f4f 	dsb	sy
 800c29e:	b662      	cpsie	i
 800c2a0:	60fb      	str	r3, [r7, #12]
 800c2a2:	e7fe      	b.n	800c2a2 <prvTaskExitError+0x2a>
 800c2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a8:	b672      	cpsid	i
 800c2aa:	f383 8811 	msr	BASEPRI, r3
 800c2ae:	f3bf 8f6f 	isb	sy
 800c2b2:	f3bf 8f4f 	dsb	sy
 800c2b6:	b662      	cpsie	i
 800c2b8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c2ba:	bf00      	nop
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d0fc      	beq.n	800c2bc <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c2c2:	bf00      	nop
 800c2c4:	3714      	adds	r7, #20
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr
 800c2ce:	bf00      	nop
 800c2d0:	2000000c 	.word	0x2000000c
	...

0800c2e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c2e0:	4b07      	ldr	r3, [pc, #28]	; (800c300 <pxCurrentTCBConst2>)
 800c2e2:	6819      	ldr	r1, [r3, #0]
 800c2e4:	6808      	ldr	r0, [r1, #0]
 800c2e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ea:	f380 8809 	msr	PSP, r0
 800c2ee:	f3bf 8f6f 	isb	sy
 800c2f2:	f04f 0000 	mov.w	r0, #0
 800c2f6:	f380 8811 	msr	BASEPRI, r0
 800c2fa:	4770      	bx	lr
 800c2fc:	f3af 8000 	nop.w

0800c300 <pxCurrentTCBConst2>:
 800c300:	20000704 	.word	0x20000704
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c304:	bf00      	nop
 800c306:	bf00      	nop

0800c308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c308:	4808      	ldr	r0, [pc, #32]	; (800c32c <prvPortStartFirstTask+0x24>)
 800c30a:	6800      	ldr	r0, [r0, #0]
 800c30c:	6800      	ldr	r0, [r0, #0]
 800c30e:	f380 8808 	msr	MSP, r0
 800c312:	f04f 0000 	mov.w	r0, #0
 800c316:	f380 8814 	msr	CONTROL, r0
 800c31a:	b662      	cpsie	i
 800c31c:	b661      	cpsie	f
 800c31e:	f3bf 8f4f 	dsb	sy
 800c322:	f3bf 8f6f 	isb	sy
 800c326:	df00      	svc	0
 800c328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c32a:	bf00      	nop
 800c32c:	e000ed08 	.word	0xe000ed08

0800c330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c336:	4b36      	ldr	r3, [pc, #216]	; (800c410 <xPortStartScheduler+0xe0>)
 800c338:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	b2db      	uxtb	r3, r3
 800c340:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	22ff      	movs	r2, #255	; 0xff
 800c346:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	781b      	ldrb	r3, [r3, #0]
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c350:	78fb      	ldrb	r3, [r7, #3]
 800c352:	b2db      	uxtb	r3, r3
 800c354:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c358:	b2da      	uxtb	r2, r3
 800c35a:	4b2e      	ldr	r3, [pc, #184]	; (800c414 <xPortStartScheduler+0xe4>)
 800c35c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c35e:	4b2e      	ldr	r3, [pc, #184]	; (800c418 <xPortStartScheduler+0xe8>)
 800c360:	2207      	movs	r2, #7
 800c362:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c364:	e009      	b.n	800c37a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c366:	4b2c      	ldr	r3, [pc, #176]	; (800c418 <xPortStartScheduler+0xe8>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	3b01      	subs	r3, #1
 800c36c:	4a2a      	ldr	r2, [pc, #168]	; (800c418 <xPortStartScheduler+0xe8>)
 800c36e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c370:	78fb      	ldrb	r3, [r7, #3]
 800c372:	b2db      	uxtb	r3, r3
 800c374:	005b      	lsls	r3, r3, #1
 800c376:	b2db      	uxtb	r3, r3
 800c378:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c37a:	78fb      	ldrb	r3, [r7, #3]
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c382:	2b80      	cmp	r3, #128	; 0x80
 800c384:	d0ef      	beq.n	800c366 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c386:	4b24      	ldr	r3, [pc, #144]	; (800c418 <xPortStartScheduler+0xe8>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f1c3 0307 	rsb	r3, r3, #7
 800c38e:	2b04      	cmp	r3, #4
 800c390:	d00b      	beq.n	800c3aa <xPortStartScheduler+0x7a>
 800c392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c396:	b672      	cpsid	i
 800c398:	f383 8811 	msr	BASEPRI, r3
 800c39c:	f3bf 8f6f 	isb	sy
 800c3a0:	f3bf 8f4f 	dsb	sy
 800c3a4:	b662      	cpsie	i
 800c3a6:	60bb      	str	r3, [r7, #8]
 800c3a8:	e7fe      	b.n	800c3a8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c3aa:	4b1b      	ldr	r3, [pc, #108]	; (800c418 <xPortStartScheduler+0xe8>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	021b      	lsls	r3, r3, #8
 800c3b0:	4a19      	ldr	r2, [pc, #100]	; (800c418 <xPortStartScheduler+0xe8>)
 800c3b2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c3b4:	4b18      	ldr	r3, [pc, #96]	; (800c418 <xPortStartScheduler+0xe8>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c3bc:	4a16      	ldr	r2, [pc, #88]	; (800c418 <xPortStartScheduler+0xe8>)
 800c3be:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	b2da      	uxtb	r2, r3
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c3c8:	4b14      	ldr	r3, [pc, #80]	; (800c41c <xPortStartScheduler+0xec>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4a13      	ldr	r2, [pc, #76]	; (800c41c <xPortStartScheduler+0xec>)
 800c3ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c3d2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c3d4:	4b11      	ldr	r3, [pc, #68]	; (800c41c <xPortStartScheduler+0xec>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	4a10      	ldr	r2, [pc, #64]	; (800c41c <xPortStartScheduler+0xec>)
 800c3da:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c3de:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c3e0:	f000 f8d4 	bl	800c58c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c3e4:	4b0e      	ldr	r3, [pc, #56]	; (800c420 <xPortStartScheduler+0xf0>)
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c3ea:	f000 f8f3 	bl	800c5d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c3ee:	4b0d      	ldr	r3, [pc, #52]	; (800c424 <xPortStartScheduler+0xf4>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a0c      	ldr	r2, [pc, #48]	; (800c424 <xPortStartScheduler+0xf4>)
 800c3f4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c3f8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c3fa:	f7ff ff85 	bl	800c308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c3fe:	f7ff fa59 	bl	800b8b4 <vTaskSwitchContext>
	prvTaskExitError();
 800c402:	f7ff ff39 	bl	800c278 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c406:	2300      	movs	r3, #0
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3710      	adds	r7, #16
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	e000e400 	.word	0xe000e400
 800c414:	20000830 	.word	0x20000830
 800c418:	20000834 	.word	0x20000834
 800c41c:	e000ed20 	.word	0xe000ed20
 800c420:	2000000c 	.word	0x2000000c
 800c424:	e000ef34 	.word	0xe000ef34

0800c428 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c428:	b480      	push	{r7}
 800c42a:	b083      	sub	sp, #12
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c432:	b672      	cpsid	i
 800c434:	f383 8811 	msr	BASEPRI, r3
 800c438:	f3bf 8f6f 	isb	sy
 800c43c:	f3bf 8f4f 	dsb	sy
 800c440:	b662      	cpsie	i
 800c442:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c444:	4b0f      	ldr	r3, [pc, #60]	; (800c484 <vPortEnterCritical+0x5c>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	3301      	adds	r3, #1
 800c44a:	4a0e      	ldr	r2, [pc, #56]	; (800c484 <vPortEnterCritical+0x5c>)
 800c44c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c44e:	4b0d      	ldr	r3, [pc, #52]	; (800c484 <vPortEnterCritical+0x5c>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2b01      	cmp	r3, #1
 800c454:	d110      	bne.n	800c478 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c456:	4b0c      	ldr	r3, [pc, #48]	; (800c488 <vPortEnterCritical+0x60>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	b2db      	uxtb	r3, r3
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d00b      	beq.n	800c478 <vPortEnterCritical+0x50>
 800c460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c464:	b672      	cpsid	i
 800c466:	f383 8811 	msr	BASEPRI, r3
 800c46a:	f3bf 8f6f 	isb	sy
 800c46e:	f3bf 8f4f 	dsb	sy
 800c472:	b662      	cpsie	i
 800c474:	603b      	str	r3, [r7, #0]
 800c476:	e7fe      	b.n	800c476 <vPortEnterCritical+0x4e>
	}
}
 800c478:	bf00      	nop
 800c47a:	370c      	adds	r7, #12
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr
 800c484:	2000000c 	.word	0x2000000c
 800c488:	e000ed04 	.word	0xe000ed04

0800c48c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c492:	4b12      	ldr	r3, [pc, #72]	; (800c4dc <vPortExitCritical+0x50>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d10b      	bne.n	800c4b2 <vPortExitCritical+0x26>
 800c49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c49e:	b672      	cpsid	i
 800c4a0:	f383 8811 	msr	BASEPRI, r3
 800c4a4:	f3bf 8f6f 	isb	sy
 800c4a8:	f3bf 8f4f 	dsb	sy
 800c4ac:	b662      	cpsie	i
 800c4ae:	607b      	str	r3, [r7, #4]
 800c4b0:	e7fe      	b.n	800c4b0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800c4b2:	4b0a      	ldr	r3, [pc, #40]	; (800c4dc <vPortExitCritical+0x50>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	3b01      	subs	r3, #1
 800c4b8:	4a08      	ldr	r2, [pc, #32]	; (800c4dc <vPortExitCritical+0x50>)
 800c4ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c4bc:	4b07      	ldr	r3, [pc, #28]	; (800c4dc <vPortExitCritical+0x50>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d104      	bne.n	800c4ce <vPortExitCritical+0x42>
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c4ce:	bf00      	nop
 800c4d0:	370c      	adds	r7, #12
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d8:	4770      	bx	lr
 800c4da:	bf00      	nop
 800c4dc:	2000000c 	.word	0x2000000c

0800c4e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c4e0:	f3ef 8009 	mrs	r0, PSP
 800c4e4:	f3bf 8f6f 	isb	sy
 800c4e8:	4b15      	ldr	r3, [pc, #84]	; (800c540 <pxCurrentTCBConst>)
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	f01e 0f10 	tst.w	lr, #16
 800c4f0:	bf08      	it	eq
 800c4f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c4f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4fa:	6010      	str	r0, [r2, #0]
 800c4fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c500:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c504:	b672      	cpsid	i
 800c506:	f380 8811 	msr	BASEPRI, r0
 800c50a:	f3bf 8f4f 	dsb	sy
 800c50e:	f3bf 8f6f 	isb	sy
 800c512:	b662      	cpsie	i
 800c514:	f7ff f9ce 	bl	800b8b4 <vTaskSwitchContext>
 800c518:	f04f 0000 	mov.w	r0, #0
 800c51c:	f380 8811 	msr	BASEPRI, r0
 800c520:	bc09      	pop	{r0, r3}
 800c522:	6819      	ldr	r1, [r3, #0]
 800c524:	6808      	ldr	r0, [r1, #0]
 800c526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c52a:	f01e 0f10 	tst.w	lr, #16
 800c52e:	bf08      	it	eq
 800c530:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c534:	f380 8809 	msr	PSP, r0
 800c538:	f3bf 8f6f 	isb	sy
 800c53c:	4770      	bx	lr
 800c53e:	bf00      	nop

0800c540 <pxCurrentTCBConst>:
 800c540:	20000704 	.word	0x20000704
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c544:	bf00      	nop
 800c546:	bf00      	nop

0800c548 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
	__asm volatile
 800c54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c552:	b672      	cpsid	i
 800c554:	f383 8811 	msr	BASEPRI, r3
 800c558:	f3bf 8f6f 	isb	sy
 800c55c:	f3bf 8f4f 	dsb	sy
 800c560:	b662      	cpsie	i
 800c562:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c564:	f7ff f8ec 	bl	800b740 <xTaskIncrementTick>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d003      	beq.n	800c576 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c56e:	4b06      	ldr	r3, [pc, #24]	; (800c588 <SysTick_Handler+0x40>)
 800c570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c574:	601a      	str	r2, [r3, #0]
 800c576:	2300      	movs	r3, #0
 800c578:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c580:	bf00      	nop
 800c582:	3708      	adds	r7, #8
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}
 800c588:	e000ed04 	.word	0xe000ed04

0800c58c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c58c:	b480      	push	{r7}
 800c58e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c590:	4b0b      	ldr	r3, [pc, #44]	; (800c5c0 <vPortSetupTimerInterrupt+0x34>)
 800c592:	2200      	movs	r2, #0
 800c594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c596:	4b0b      	ldr	r3, [pc, #44]	; (800c5c4 <vPortSetupTimerInterrupt+0x38>)
 800c598:	2200      	movs	r2, #0
 800c59a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c59c:	4b0a      	ldr	r3, [pc, #40]	; (800c5c8 <vPortSetupTimerInterrupt+0x3c>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a0a      	ldr	r2, [pc, #40]	; (800c5cc <vPortSetupTimerInterrupt+0x40>)
 800c5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5a6:	099b      	lsrs	r3, r3, #6
 800c5a8:	4a09      	ldr	r2, [pc, #36]	; (800c5d0 <vPortSetupTimerInterrupt+0x44>)
 800c5aa:	3b01      	subs	r3, #1
 800c5ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c5ae:	4b04      	ldr	r3, [pc, #16]	; (800c5c0 <vPortSetupTimerInterrupt+0x34>)
 800c5b0:	2207      	movs	r2, #7
 800c5b2:	601a      	str	r2, [r3, #0]
}
 800c5b4:	bf00      	nop
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5bc:	4770      	bx	lr
 800c5be:	bf00      	nop
 800c5c0:	e000e010 	.word	0xe000e010
 800c5c4:	e000e018 	.word	0xe000e018
 800c5c8:	20000000 	.word	0x20000000
 800c5cc:	10624dd3 	.word	0x10624dd3
 800c5d0:	e000e014 	.word	0xe000e014

0800c5d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c5d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c5e4 <vPortEnableVFP+0x10>
 800c5d8:	6801      	ldr	r1, [r0, #0]
 800c5da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c5de:	6001      	str	r1, [r0, #0]
 800c5e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c5e2:	bf00      	nop
 800c5e4:	e000ed88 	.word	0xe000ed88

0800c5e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b085      	sub	sp, #20
 800c5ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c5ee:	f3ef 8305 	mrs	r3, IPSR
 800c5f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2b0f      	cmp	r3, #15
 800c5f8:	d915      	bls.n	800c626 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c5fa:	4a18      	ldr	r2, [pc, #96]	; (800c65c <vPortValidateInterruptPriority+0x74>)
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	4413      	add	r3, r2
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c604:	4b16      	ldr	r3, [pc, #88]	; (800c660 <vPortValidateInterruptPriority+0x78>)
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	7afa      	ldrb	r2, [r7, #11]
 800c60a:	429a      	cmp	r2, r3
 800c60c:	d20b      	bcs.n	800c626 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c612:	b672      	cpsid	i
 800c614:	f383 8811 	msr	BASEPRI, r3
 800c618:	f3bf 8f6f 	isb	sy
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	b662      	cpsie	i
 800c622:	607b      	str	r3, [r7, #4]
 800c624:	e7fe      	b.n	800c624 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c626:	4b0f      	ldr	r3, [pc, #60]	; (800c664 <vPortValidateInterruptPriority+0x7c>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c62e:	4b0e      	ldr	r3, [pc, #56]	; (800c668 <vPortValidateInterruptPriority+0x80>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	429a      	cmp	r2, r3
 800c634:	d90b      	bls.n	800c64e <vPortValidateInterruptPriority+0x66>
 800c636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63a:	b672      	cpsid	i
 800c63c:	f383 8811 	msr	BASEPRI, r3
 800c640:	f3bf 8f6f 	isb	sy
 800c644:	f3bf 8f4f 	dsb	sy
 800c648:	b662      	cpsie	i
 800c64a:	603b      	str	r3, [r7, #0]
 800c64c:	e7fe      	b.n	800c64c <vPortValidateInterruptPriority+0x64>
	}
 800c64e:	bf00      	nop
 800c650:	3714      	adds	r7, #20
 800c652:	46bd      	mov	sp, r7
 800c654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c658:	4770      	bx	lr
 800c65a:	bf00      	nop
 800c65c:	e000e3f0 	.word	0xe000e3f0
 800c660:	20000830 	.word	0x20000830
 800c664:	e000ed0c 	.word	0xe000ed0c
 800c668:	20000834 	.word	0x20000834

0800c66c <_sbrk_r>:
    static int totalBytesProvidedBySBRK = 0;
#endif
extern char __HeapBase, __HeapLimit;  // make sure to define these symbols in linker LD command file

//! _sbrk_r version supporting reentrant newlib (depends upon above symbols defined by linker control file).
void * _sbrk_r(struct _reent *pReent, int incr) {
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b084      	sub	sp, #16
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
    #ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
      UBaseType_t usis; // saved interrupt status
    #endif
    static char *currentHeapEnd = &__HeapBase;
    #ifdef STM_VERSION // Use STM CubeMX LD symbols for heap
      if(TotalHeapSize==0) {
 800c676:	4b24      	ldr	r3, [pc, #144]	; (800c708 <_sbrk_r+0x9c>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d10e      	bne.n	800c69c <_sbrk_r+0x30>
        TotalHeapSize = heapBytesRemaining = (int)((&__HeapLimit)-(&__HeapBase))-ISR_STACK_LENGTH_BYTES;
 800c67e:	4b23      	ldr	r3, [pc, #140]	; (800c70c <_sbrk_r+0xa0>)
 800c680:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800c684:	4a22      	ldr	r2, [pc, #136]	; (800c710 <_sbrk_r+0xa4>)
 800c686:	1a9b      	subs	r3, r3, r2
 800c688:	4a22      	ldr	r2, [pc, #136]	; (800c714 <_sbrk_r+0xa8>)
 800c68a:	6013      	str	r3, [r2, #0]
 800c68c:	4b1f      	ldr	r3, [pc, #124]	; (800c70c <_sbrk_r+0xa0>)
 800c68e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800c692:	4a1f      	ldr	r2, [pc, #124]	; (800c710 <_sbrk_r+0xa4>)
 800c694:	1a9b      	subs	r3, r3, r2
 800c696:	461a      	mov	r2, r3
 800c698:	4b1b      	ldr	r3, [pc, #108]	; (800c708 <_sbrk_r+0x9c>)
 800c69a:	601a      	str	r2, [r3, #0]
      };
    #endif
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 800c69c:	f7ff fb7c 	bl	800bd98 <xTaskGetSchedulerState>
 800c6a0:	4603      	mov	r3, r0
            stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d101      	bne.n	800c6aa <_sbrk_r+0x3e>
 800c6a6:	466b      	mov	r3, sp
 800c6a8:	e000      	b.n	800c6ac <_sbrk_r+0x40>
 800c6aa:	4b1b      	ldr	r3, [pc, #108]	; (800c718 <_sbrk_r+0xac>)
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 800c6ac:	60fb      	str	r3, [r7, #12]
            &__HeapLimit-ISR_STACK_LENGTH_BYTES;  // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION(usis);
 800c6ae:	f7fe ff79 	bl	800b5a4 <vTaskSuspendAll>
    char *previousHeapEnd = currentHeapEnd;
 800c6b2:	4b1a      	ldr	r3, [pc, #104]	; (800c71c <_sbrk_r+0xb0>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	60bb      	str	r3, [r7, #8]
    if (currentHeapEnd + incr > limit) {
 800c6b8:	4b18      	ldr	r3, [pc, #96]	; (800c71c <_sbrk_r+0xb0>)
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	4413      	add	r3, r2
 800c6c0:	68fa      	ldr	r2, [r7, #12]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d207      	bcs.n	800c6d6 <_sbrk_r+0x6a>
            // If you want to alert debugger or halt...
            // WARNING: brkpt instruction may prevent watchdog operation...
            while(1) { __asm("bkpt #0"); }; // Stop in GUI as if at a breakpoint (if debugging, otherwise loop forever)
        #else
            // Default, if you prefer to believe your application will gracefully trap out-of-memory...
            pReent->_errno = ENOMEM; // newlib's thread-specific errno
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	220c      	movs	r2, #12
 800c6ca:	601a      	str	r2, [r3, #0]
            DRN_EXIT_CRITICAL_SECTION(usis);
 800c6cc:	f7fe ff78 	bl	800b5c0 <xTaskResumeAll>
        #endif
        return (char *)-1; // the malloc-family routine that called sbrk will return 0
 800c6d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c6d4:	e014      	b.n	800c700 <_sbrk_r+0x94>
    }
    // 'incr' of memory is available: update accounting and return it.
    currentHeapEnd += incr;
 800c6d6:	4b11      	ldr	r3, [pc, #68]	; (800c71c <_sbrk_r+0xb0>)
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	4413      	add	r3, r2
 800c6de:	4a0f      	ldr	r2, [pc, #60]	; (800c71c <_sbrk_r+0xb0>)
 800c6e0:	6013      	str	r3, [r2, #0]
    heapBytesRemaining -= incr;
 800c6e2:	4b0c      	ldr	r3, [pc, #48]	; (800c714 <_sbrk_r+0xa8>)
 800c6e4:	681a      	ldr	r2, [r3, #0]
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	1ad3      	subs	r3, r2, r3
 800c6ea:	4a0a      	ldr	r2, [pc, #40]	; (800c714 <_sbrk_r+0xa8>)
 800c6ec:	6013      	str	r3, [r2, #0]
    #ifndef NDEBUG
        totalBytesProvidedBySBRK += incr;
 800c6ee:	4b0c      	ldr	r3, [pc, #48]	; (800c720 <_sbrk_r+0xb4>)
 800c6f0:	681a      	ldr	r2, [r3, #0]
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	4413      	add	r3, r2
 800c6f6:	4a0a      	ldr	r2, [pc, #40]	; (800c720 <_sbrk_r+0xb4>)
 800c6f8:	6013      	str	r3, [r2, #0]
    #endif
    DRN_EXIT_CRITICAL_SECTION(usis);
 800c6fa:	f7fe ff61 	bl	800b5c0 <xTaskResumeAll>
    return (char *) previousHeapEnd;
 800c6fe:	68bb      	ldr	r3, [r7, #8]
}
 800c700:	4618      	mov	r0, r3
 800c702:	3710      	adds	r7, #16
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}
 800c708:	2000457c 	.word	0x2000457c
 800c70c:	20080000 	.word	0x20080000
 800c710:	20007cc0 	.word	0x20007cc0
 800c714:	20000838 	.word	0x20000838
 800c718:	2007fe00 	.word	0x2007fe00
 800c71c:	20000010 	.word	0x20000010
 800c720:	2000083c 	.word	0x2000083c

0800c724 <__malloc_lock>:
//char * _sbrk(int incr) { return sbrk(incr); };

#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
  static UBaseType_t malLock_uxSavedInterruptStatus;
#endif
void __malloc_lock(struct _reent *r)     {
 800c724:	b580      	push	{r7, lr}
 800c726:	b086      	sub	sp, #24
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c72c:	f3ef 8305 	mrs	r3, IPSR
 800c730:	613b      	str	r3, [r7, #16]
	if( ulCurrentInterrupt == 0 )
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d102      	bne.n	800c73e <__malloc_lock+0x1a>
		xReturn = pdFALSE;
 800c738:	2300      	movs	r3, #0
 800c73a:	60fb      	str	r3, [r7, #12]
 800c73c:	e001      	b.n	800c742 <__malloc_lock+0x1e>
		xReturn = pdTRUE;
 800c73e:	2301      	movs	r3, #1
 800c740:	60fb      	str	r3, [r7, #12]
	return xReturn;
 800c742:	68fb      	ldr	r3, [r7, #12]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_ENTER_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    bool insideAnISR = xPortIsInsideInterrupt();
 800c744:	2b00      	cmp	r3, #0
 800c746:	bf14      	ite	ne
 800c748:	2301      	movne	r3, #1
 800c74a:	2300      	moveq	r3, #0
 800c74c:	75fb      	strb	r3, [r7, #23]
    configASSERT( !insideAnISR ); // Make damn sure no more mallocs inside ISRs!!
 800c74e:	7dfb      	ldrb	r3, [r7, #23]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d00b      	beq.n	800c76c <__malloc_lock+0x48>
	__asm volatile
 800c754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c758:	b672      	cpsid	i
 800c75a:	f383 8811 	msr	BASEPRI, r3
 800c75e:	f3bf 8f6f 	isb	sy
 800c762:	f3bf 8f4f 	dsb	sy
 800c766:	b662      	cpsie	i
 800c768:	60bb      	str	r3, [r7, #8]
 800c76a:	e7fe      	b.n	800c76a <__malloc_lock+0x46>
    vTaskSuspendAll();
 800c76c:	f7fe ff1a 	bl	800b5a4 <vTaskSuspendAll>
  #endif
};
 800c770:	bf00      	nop
 800c772:	3718      	adds	r7, #24
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <__malloc_unlock>:
void __malloc_unlock(struct _reent *r)   {
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_EXIT_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    (void)xTaskResumeAll();
 800c780:	f7fe ff1e 	bl	800b5c0 <xTaskResumeAll>
  #endif
};
 800c784:	bf00      	nop
 800c786:	3708      	adds	r7, #8
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}

0800c78c <pvPortMalloc>:

// ================================================================================================
// Implement FreeRTOS's memory API using newlib-provided malloc family.
// ================================================================================================

void *pvPortMalloc( size_t xSize ) PRIVILEGED_FUNCTION {
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
    void *p = malloc(xSize);
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f00d fc0d 	bl	8019fb4 <malloc>
 800c79a:	4603      	mov	r3, r0
 800c79c:	60fb      	str	r3, [r7, #12]
    return p;
 800c79e:	68fb      	ldr	r3, [r7, #12]
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3710      	adds	r7, #16
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}

0800c7a8 <vPortFree>:
void vPortFree( void *pv ) PRIVILEGED_FUNCTION {
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b082      	sub	sp, #8
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
    free(pv);
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f00d fc07 	bl	8019fc4 <free>
};
 800c7b6:	bf00      	nop
 800c7b8:	3708      	adds	r7, #8
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}

0800c7be <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800c7be:	b580      	push	{r7, lr}
 800c7c0:	b084      	sub	sp, #16
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
 800c7c6:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	330c      	adds	r3, #12
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	6839      	ldr	r1, [r7, #0]
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f002 f91a 	bl	800ea0c <tcpip_send_msg_wait_sem>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c7dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d103      	bne.n	800c7ec <netconn_apimsg+0x2e>
    return apimsg->err;
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c7ea:	e001      	b.n	800c7f0 <netconn_apimsg+0x32>
  }
  return err;
 800c7ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3710      	adds	r7, #16
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}

0800c7f8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b08c      	sub	sp, #48	; 0x30
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	4603      	mov	r3, r0
 800c800:	603a      	str	r2, [r7, #0]
 800c802:	71fb      	strb	r3, [r7, #7]
 800c804:	460b      	mov	r3, r1
 800c806:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800c808:	79fb      	ldrb	r3, [r7, #7]
 800c80a:	6839      	ldr	r1, [r7, #0]
 800c80c:	4618      	mov	r0, r3
 800c80e:	f000 ff07 	bl	800d620 <netconn_alloc>
 800c812:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800c814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c816:	2b00      	cmp	r3, #0
 800c818:	d054      	beq.n	800c8c4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800c81a:	79bb      	ldrb	r3, [r7, #6]
 800c81c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800c81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c820:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800c822:	f107 0308 	add.w	r3, r7, #8
 800c826:	4619      	mov	r1, r3
 800c828:	4829      	ldr	r0, [pc, #164]	; (800c8d0 <netconn_new_with_proto_and_callback+0xd8>)
 800c82a:	f7ff ffc8 	bl	800c7be <netconn_apimsg>
 800c82e:	4603      	mov	r3, r0
 800c830:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800c834:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d043      	beq.n	800c8c4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800c83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d005      	beq.n	800c850 <netconn_new_with_proto_and_callback+0x58>
 800c844:	4b23      	ldr	r3, [pc, #140]	; (800c8d4 <netconn_new_with_proto_and_callback+0xdc>)
 800c846:	22a3      	movs	r2, #163	; 0xa3
 800c848:	4923      	ldr	r1, [pc, #140]	; (800c8d8 <netconn_new_with_proto_and_callback+0xe0>)
 800c84a:	4824      	ldr	r0, [pc, #144]	; (800c8dc <netconn_new_with_proto_and_callback+0xe4>)
 800c84c:	f00e facc 	bl	801ade8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800c850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c852:	3310      	adds	r3, #16
 800c854:	4618      	mov	r0, r3
 800c856:	f00d f982 	bl	8019b5e <sys_mbox_valid>
 800c85a:	4603      	mov	r3, r0
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d105      	bne.n	800c86c <netconn_new_with_proto_and_callback+0x74>
 800c860:	4b1c      	ldr	r3, [pc, #112]	; (800c8d4 <netconn_new_with_proto_and_callback+0xdc>)
 800c862:	22a4      	movs	r2, #164	; 0xa4
 800c864:	491e      	ldr	r1, [pc, #120]	; (800c8e0 <netconn_new_with_proto_and_callback+0xe8>)
 800c866:	481d      	ldr	r0, [pc, #116]	; (800c8dc <netconn_new_with_proto_and_callback+0xe4>)
 800c868:	f00e fabe 	bl	801ade8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800c86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86e:	3314      	adds	r3, #20
 800c870:	4618      	mov	r0, r3
 800c872:	f00d f974 	bl	8019b5e <sys_mbox_valid>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d005      	beq.n	800c888 <netconn_new_with_proto_and_callback+0x90>
 800c87c:	4b15      	ldr	r3, [pc, #84]	; (800c8d4 <netconn_new_with_proto_and_callback+0xdc>)
 800c87e:	22a6      	movs	r2, #166	; 0xa6
 800c880:	4918      	ldr	r1, [pc, #96]	; (800c8e4 <netconn_new_with_proto_and_callback+0xec>)
 800c882:	4816      	ldr	r0, [pc, #88]	; (800c8dc <netconn_new_with_proto_and_callback+0xe4>)
 800c884:	f00e fab0 	bl	801ade8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800c888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c88a:	330c      	adds	r3, #12
 800c88c:	4618      	mov	r0, r3
 800c88e:	f00d f9f7 	bl	8019c80 <sys_sem_valid>
 800c892:	4603      	mov	r3, r0
 800c894:	2b00      	cmp	r3, #0
 800c896:	d105      	bne.n	800c8a4 <netconn_new_with_proto_and_callback+0xac>
 800c898:	4b0e      	ldr	r3, [pc, #56]	; (800c8d4 <netconn_new_with_proto_and_callback+0xdc>)
 800c89a:	22a9      	movs	r2, #169	; 0xa9
 800c89c:	4912      	ldr	r1, [pc, #72]	; (800c8e8 <netconn_new_with_proto_and_callback+0xf0>)
 800c89e:	480f      	ldr	r0, [pc, #60]	; (800c8dc <netconn_new_with_proto_and_callback+0xe4>)
 800c8a0:	f00e faa2 	bl	801ade8 <iprintf>
      sys_sem_free(&conn->op_completed);
 800c8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a6:	330c      	adds	r3, #12
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f00d f9dc 	bl	8019c66 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800c8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b0:	3310      	adds	r3, #16
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f00d f8cc 	bl	8019a50 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800c8b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c8ba:	2007      	movs	r0, #7
 800c8bc:	f002 fe0e 	bl	800f4dc <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	e000      	b.n	800c8c6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800c8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3730      	adds	r7, #48	; 0x30
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	0800d5f5 	.word	0x0800d5f5
 800c8d4:	0801f900 	.word	0x0801f900
 800c8d8:	0801f934 	.word	0x0801f934
 800c8dc:	0801f958 	.word	0x0801f958
 800c8e0:	0801f980 	.word	0x0801f980
 800c8e4:	0801f998 	.word	0x0801f998
 800c8e8:	0801f9bc 	.word	0x0801f9bc

0800c8ec <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b08c      	sub	sp, #48	; 0x30
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d101      	bne.n	800c8fe <netconn_prepare_delete+0x12>
    return ERR_OK;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	e014      	b.n	800c928 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800c902:	2329      	movs	r3, #41	; 0x29
 800c904:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800c906:	f107 030c 	add.w	r3, r7, #12
 800c90a:	4619      	mov	r1, r3
 800c90c:	4808      	ldr	r0, [pc, #32]	; (800c930 <netconn_prepare_delete+0x44>)
 800c90e:	f7ff ff56 	bl	800c7be <netconn_apimsg>
 800c912:	4603      	mov	r3, r0
 800c914:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800c918:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d002      	beq.n	800c926 <netconn_prepare_delete+0x3a>
    return err;
 800c920:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c924:	e000      	b.n	800c928 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800c926:	2300      	movs	r3, #0
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3730      	adds	r7, #48	; 0x30
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	0800db59 	.word	0x0800db59

0800c934 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d101      	bne.n	800c946 <netconn_delete+0x12>
    return ERR_OK;
 800c942:	2300      	movs	r3, #0
 800c944:	e00d      	b.n	800c962 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f7ff ffd0 	bl	800c8ec <netconn_prepare_delete>
 800c94c:	4603      	mov	r3, r0
 800c94e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800c950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d102      	bne.n	800c95e <netconn_delete+0x2a>
    netconn_free(conn);
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 fecf 	bl	800d6fc <netconn_free>
  }
  return err;
 800c95e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c962:	4618      	mov	r0, r3
 800c964:	3710      	adds	r7, #16
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
	...

0800c96c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b08e      	sub	sp, #56	; 0x38
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	4613      	mov	r3, r2
 800c978:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d109      	bne.n	800c994 <netconn_connect+0x28>
 800c980:	4b11      	ldr	r3, [pc, #68]	; (800c9c8 <netconn_connect+0x5c>)
 800c982:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800c986:	4911      	ldr	r1, [pc, #68]	; (800c9cc <netconn_connect+0x60>)
 800c988:	4811      	ldr	r0, [pc, #68]	; (800c9d0 <netconn_connect+0x64>)
 800c98a:	f00e fa2d 	bl	801ade8 <iprintf>
 800c98e:	f06f 030f 	mvn.w	r3, #15
 800c992:	e015      	b.n	800c9c0 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d101      	bne.n	800c99e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800c99a:	4b0e      	ldr	r3, [pc, #56]	; (800c9d4 <netconn_connect+0x68>)
 800c99c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800c9a6:	88fb      	ldrh	r3, [r7, #6]
 800c9a8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800c9aa:	f107 0314 	add.w	r3, r7, #20
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	4809      	ldr	r0, [pc, #36]	; (800c9d8 <netconn_connect+0x6c>)
 800c9b2:	f7ff ff04 	bl	800c7be <netconn_apimsg>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800c9bc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3738      	adds	r7, #56	; 0x38
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}
 800c9c8:	0801f900 	.word	0x0801f900
 800c9cc:	0801fa74 	.word	0x0801fa74
 800c9d0:	0801f958 	.word	0x0801f958
 800c9d4:	080246fc 	.word	0x080246fc
 800c9d8:	0800de41 	.word	0x0800de41

0800c9dc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b088      	sub	sp, #32
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	60f8      	str	r0, [r7, #12]
 800c9e4:	60b9      	str	r1, [r7, #8]
 800c9e6:	4613      	mov	r3, r2
 800c9e8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d109      	bne.n	800ca08 <netconn_recv_data+0x2c>
 800c9f4:	4b58      	ldr	r3, [pc, #352]	; (800cb58 <netconn_recv_data+0x17c>)
 800c9f6:	f44f 7212 	mov.w	r2, #584	; 0x248
 800c9fa:	4958      	ldr	r1, [pc, #352]	; (800cb5c <netconn_recv_data+0x180>)
 800c9fc:	4858      	ldr	r0, [pc, #352]	; (800cb60 <netconn_recv_data+0x184>)
 800c9fe:	f00e f9f3 	bl	801ade8 <iprintf>
 800ca02:	f06f 030f 	mvn.w	r3, #15
 800ca06:	e0a2      	b.n	800cb4e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d109      	bne.n	800ca28 <netconn_recv_data+0x4c>
 800ca14:	4b50      	ldr	r3, [pc, #320]	; (800cb58 <netconn_recv_data+0x17c>)
 800ca16:	f240 224a 	movw	r2, #586	; 0x24a
 800ca1a:	4952      	ldr	r1, [pc, #328]	; (800cb64 <netconn_recv_data+0x188>)
 800ca1c:	4850      	ldr	r0, [pc, #320]	; (800cb60 <netconn_recv_data+0x184>)
 800ca1e:	f00e f9e3 	bl	801ade8 <iprintf>
 800ca22:	f06f 030f 	mvn.w	r3, #15
 800ca26:	e092      	b.n	800cb4e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	3310      	adds	r3, #16
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f00d f896 	bl	8019b5e <sys_mbox_valid>
 800ca32:	4603      	mov	r3, r0
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d10e      	bne.n	800ca56 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800ca38:	68f8      	ldr	r0, [r7, #12]
 800ca3a:	f000 fa30 	bl	800ce9e <netconn_err>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800ca42:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d002      	beq.n	800ca50 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800ca4a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800ca4e:	e07e      	b.n	800cb4e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800ca50:	f06f 030a 	mvn.w	r3, #10
 800ca54:	e07b      	b.n	800cb4e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	7f1b      	ldrb	r3, [r3, #28]
 800ca5a:	f003 0302 	and.w	r3, r3, #2
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d10f      	bne.n	800ca82 <netconn_recv_data+0xa6>
 800ca62:	79fb      	ldrb	r3, [r7, #7]
 800ca64:	f003 0304 	and.w	r3, r3, #4
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d10a      	bne.n	800ca82 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	7f1b      	ldrb	r3, [r3, #28]
 800ca70:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d104      	bne.n	800ca82 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d023      	beq.n	800caca <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	3310      	adds	r3, #16
 800ca86:	f107 0218 	add.w	r2, r7, #24
 800ca8a:	4611      	mov	r1, r2
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f00d f84a 	bl	8019b26 <sys_arch_mbox_tryfetch>
 800ca92:	4603      	mov	r3, r0
 800ca94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca98:	d11f      	bne.n	800cada <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800ca9a:	68f8      	ldr	r0, [r7, #12]
 800ca9c:	f000 f9ff 	bl	800ce9e <netconn_err>
 800caa0:	4603      	mov	r3, r0
 800caa2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800caa4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d002      	beq.n	800cab2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800caac:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800cab0:	e04d      	b.n	800cb4e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	7f1b      	ldrb	r3, [r3, #28]
 800cab6:	f003 0301 	and.w	r3, r3, #1
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d002      	beq.n	800cac4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800cabe:	f06f 030a 	mvn.w	r3, #10
 800cac2:	e044      	b.n	800cb4e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800cac4:	f06f 0306 	mvn.w	r3, #6
 800cac8:	e041      	b.n	800cb4e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	3310      	adds	r3, #16
 800cace:	f107 0118 	add.w	r1, r7, #24
 800cad2:	2200      	movs	r2, #0
 800cad4:	4618      	mov	r0, r3
 800cad6:	f00c ffe7 	bl	8019aa8 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	781b      	ldrb	r3, [r3, #0]
 800cade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cae2:	2b10      	cmp	r3, #16
 800cae4:	d117      	bne.n	800cb16 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800cae6:	69bb      	ldr	r3, [r7, #24]
 800cae8:	f107 0217 	add.w	r2, r7, #23
 800caec:	4611      	mov	r1, r2
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 fa22 	bl	800cf38 <lwip_netconn_is_err_msg>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d009      	beq.n	800cb0e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800cafa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cafe:	f113 0f0f 	cmn.w	r3, #15
 800cb02:	d101      	bne.n	800cb08 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800cb04:	2300      	movs	r3, #0
 800cb06:	e022      	b.n	800cb4e <netconn_recv_data+0x172>
      }
      return err;
 800cb08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb0c:	e01f      	b.n	800cb4e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800cb0e:	69bb      	ldr	r3, [r7, #24]
 800cb10:	891b      	ldrh	r3, [r3, #8]
 800cb12:	83fb      	strh	r3, [r7, #30]
 800cb14:	e00d      	b.n	800cb32 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800cb16:	69bb      	ldr	r3, [r7, #24]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d106      	bne.n	800cb2a <netconn_recv_data+0x14e>
 800cb1c:	4b0e      	ldr	r3, [pc, #56]	; (800cb58 <netconn_recv_data+0x17c>)
 800cb1e:	f240 2291 	movw	r2, #657	; 0x291
 800cb22:	4911      	ldr	r1, [pc, #68]	; (800cb68 <netconn_recv_data+0x18c>)
 800cb24:	480e      	ldr	r0, [pc, #56]	; (800cb60 <netconn_recv_data+0x184>)
 800cb26:	f00e f95f 	bl	801ade8 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800cb2a:	69bb      	ldr	r3, [r7, #24]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	891b      	ldrh	r3, [r3, #8]
 800cb30:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d005      	beq.n	800cb46 <netconn_recv_data+0x16a>
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb3e:	8bfa      	ldrh	r2, [r7, #30]
 800cb40:	2101      	movs	r1, #1
 800cb42:	68f8      	ldr	r0, [r7, #12]
 800cb44:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800cb46:	69ba      	ldr	r2, [r7, #24]
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800cb4c:	2300      	movs	r3, #0
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3720      	adds	r7, #32
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	0801f900 	.word	0x0801f900
 800cb5c:	0801fb18 	.word	0x0801fb18
 800cb60:	0801f958 	.word	0x0801f958
 800cb64:	0801fb38 	.word	0x0801fb38
 800cb68:	0801fb54 	.word	0x0801fb54

0800cb6c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b084      	sub	sp, #16
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	60f8      	str	r0, [r7, #12]
 800cb74:	60b9      	str	r1, [r7, #8]
 800cb76:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d005      	beq.n	800cb8a <netconn_tcp_recvd_msg+0x1e>
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb86:	2b10      	cmp	r3, #16
 800cb88:	d009      	beq.n	800cb9e <netconn_tcp_recvd_msg+0x32>
 800cb8a:	4b0c      	ldr	r3, [pc, #48]	; (800cbbc <netconn_tcp_recvd_msg+0x50>)
 800cb8c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800cb90:	490b      	ldr	r1, [pc, #44]	; (800cbc0 <netconn_tcp_recvd_msg+0x54>)
 800cb92:	480c      	ldr	r0, [pc, #48]	; (800cbc4 <netconn_tcp_recvd_msg+0x58>)
 800cb94:	f00e f928 	bl	801ade8 <iprintf>
 800cb98:	f06f 030f 	mvn.w	r3, #15
 800cb9c:	e00a      	b.n	800cbb4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	68fa      	ldr	r2, [r7, #12]
 800cba2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	68ba      	ldr	r2, [r7, #8]
 800cba8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800cbaa:	6879      	ldr	r1, [r7, #4]
 800cbac:	4806      	ldr	r0, [pc, #24]	; (800cbc8 <netconn_tcp_recvd_msg+0x5c>)
 800cbae:	f7ff fe06 	bl	800c7be <netconn_apimsg>
 800cbb2:	4603      	mov	r3, r0
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3710      	adds	r7, #16
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	0801f900 	.word	0x0801f900
 800cbc0:	0801fb60 	.word	0x0801fb60
 800cbc4:	0801f958 	.word	0x0801f958
 800cbc8:	0800e059 	.word	0x0800e059

0800cbcc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b090      	sub	sp, #64	; 0x40
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	3310      	adds	r3, #16
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f00c ffbd 	bl	8019b5e <sys_mbox_valid>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d102      	bne.n	800cbf0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800cbea:	f06f 030a 	mvn.w	r3, #10
 800cbee:	e06d      	b.n	800cccc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	7f1b      	ldrb	r3, [r3, #28]
 800cbf4:	b25b      	sxtb	r3, r3
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	da07      	bge.n	800cc0a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	7f1b      	ldrb	r3, [r3, #28]
 800cbfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc02:	b2da      	uxtb	r2, r3
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800cc08:	e039      	b.n	800cc7e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800cc0a:	79fb      	ldrb	r3, [r7, #7]
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	68b9      	ldr	r1, [r7, #8]
 800cc10:	68f8      	ldr	r0, [r7, #12]
 800cc12:	f7ff fee3 	bl	800c9dc <netconn_recv_data>
 800cc16:	4603      	mov	r3, r0
 800cc18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800cc1c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d002      	beq.n	800cc2a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800cc24:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cc28:	e050      	b.n	800cccc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800cc30:	79fb      	ldrb	r3, [r7, #7]
 800cc32:	f003 0308 	and.w	r3, r3, #8
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d10e      	bne.n	800cc58 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800cc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d002      	beq.n	800cc46 <netconn_recv_data_tcp+0x7a>
 800cc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc42:	891b      	ldrh	r3, [r3, #8]
 800cc44:	e000      	b.n	800cc48 <netconn_recv_data_tcp+0x7c>
 800cc46:	2301      	movs	r3, #1
 800cc48:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800cc4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cc4c:	f107 0214 	add.w	r2, r7, #20
 800cc50:	4619      	mov	r1, r3
 800cc52:	68f8      	ldr	r0, [r7, #12]
 800cc54:	f7ff ff8a 	bl	800cb6c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800cc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d134      	bne.n	800ccc8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800cc5e:	79fb      	ldrb	r3, [r7, #7]
 800cc60:	f003 0310 	and.w	r3, r3, #16
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d009      	beq.n	800cc7c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	7f1b      	ldrb	r3, [r3, #28]
 800cc6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cc70:	b2da      	uxtb	r2, r3
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800cc76:	f06f 0306 	mvn.w	r3, #6
 800cc7a:	e027      	b.n	800cccc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800cc7c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d005      	beq.n	800cc92 <netconn_recv_data_tcp+0xc6>
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	2101      	movs	r1, #1
 800cc8e:	68f8      	ldr	r0, [r7, #12]
 800cc90:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	685b      	ldr	r3, [r3, #4]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d10f      	bne.n	800ccba <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800cc9a:	68f8      	ldr	r0, [r7, #12]
 800cc9c:	f000 f8ff 	bl	800ce9e <netconn_err>
 800cca0:	4603      	mov	r3, r0
 800cca2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800cca6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d002      	beq.n	800ccb4 <netconn_recv_data_tcp+0xe8>
          return err;
 800ccae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ccb2:	e00b      	b.n	800cccc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800ccb4:	f06f 030d 	mvn.w	r3, #13
 800ccb8:	e008      	b.n	800cccc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800ccba:	2101      	movs	r1, #1
 800ccbc:	68f8      	ldr	r0, [r7, #12]
 800ccbe:	f000 f8b1 	bl	800ce24 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800ccc2:	f06f 030e 	mvn.w	r3, #14
 800ccc6:	e001      	b.n	800cccc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800ccc8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3740      	adds	r7, #64	; 0x40
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b086      	sub	sp, #24
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800ccde:	2300      	movs	r3, #0
 800cce0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d109      	bne.n	800ccfc <netconn_recv+0x28>
 800cce8:	4b32      	ldr	r3, [pc, #200]	; (800cdb4 <netconn_recv+0xe0>)
 800ccea:	f240 3263 	movw	r2, #867	; 0x363
 800ccee:	4932      	ldr	r1, [pc, #200]	; (800cdb8 <netconn_recv+0xe4>)
 800ccf0:	4832      	ldr	r0, [pc, #200]	; (800cdbc <netconn_recv+0xe8>)
 800ccf2:	f00e f879 	bl	801ade8 <iprintf>
 800ccf6:	f06f 030f 	mvn.w	r3, #15
 800ccfa:	e056      	b.n	800cdaa <netconn_recv+0xd6>
  *new_buf = NULL;
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d109      	bne.n	800cd1c <netconn_recv+0x48>
 800cd08:	4b2a      	ldr	r3, [pc, #168]	; (800cdb4 <netconn_recv+0xe0>)
 800cd0a:	f240 3265 	movw	r2, #869	; 0x365
 800cd0e:	492c      	ldr	r1, [pc, #176]	; (800cdc0 <netconn_recv+0xec>)
 800cd10:	482a      	ldr	r0, [pc, #168]	; (800cdbc <netconn_recv+0xe8>)
 800cd12:	f00e f869 	bl	801ade8 <iprintf>
 800cd16:	f06f 030f 	mvn.w	r3, #15
 800cd1a:	e046      	b.n	800cdaa <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd24:	2b10      	cmp	r3, #16
 800cd26:	d13a      	bne.n	800cd9e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800cd2c:	2006      	movs	r0, #6
 800cd2e:	f002 fb83 	bl	800f438 <memp_malloc>
 800cd32:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d102      	bne.n	800cd40 <netconn_recv+0x6c>
      return ERR_MEM;
 800cd3a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd3e:	e034      	b.n	800cdaa <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800cd40:	f107 030c 	add.w	r3, r7, #12
 800cd44:	2200      	movs	r2, #0
 800cd46:	4619      	mov	r1, r3
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f7ff ff3f 	bl	800cbcc <netconn_recv_data_tcp>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800cd52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d006      	beq.n	800cd68 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800cd5a:	6979      	ldr	r1, [r7, #20]
 800cd5c:	2006      	movs	r0, #6
 800cd5e:	f002 fbbd 	bl	800f4dc <memp_free>
      return err;
 800cd62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cd66:	e020      	b.n	800cdaa <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d106      	bne.n	800cd7c <netconn_recv+0xa8>
 800cd6e:	4b11      	ldr	r3, [pc, #68]	; (800cdb4 <netconn_recv+0xe0>)
 800cd70:	f240 3279 	movw	r2, #889	; 0x379
 800cd74:	4913      	ldr	r1, [pc, #76]	; (800cdc4 <netconn_recv+0xf0>)
 800cd76:	4811      	ldr	r0, [pc, #68]	; (800cdbc <netconn_recv+0xe8>)
 800cd78:	f00e f836 	bl	801ade8 <iprintf>

    buf->p = p;
 800cd7c:	68fa      	ldr	r2, [r7, #12]
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800cd82:	68fa      	ldr	r2, [r7, #12]
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	2200      	movs	r2, #0
 800cd92:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	697a      	ldr	r2, [r7, #20]
 800cd98:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	e005      	b.n	800cdaa <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800cd9e:	2200      	movs	r2, #0
 800cda0:	6839      	ldr	r1, [r7, #0]
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f7ff fe1a 	bl	800c9dc <netconn_recv_data>
 800cda8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3718      	adds	r7, #24
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	bf00      	nop
 800cdb4:	0801f900 	.word	0x0801f900
 800cdb8:	0801fb18 	.word	0x0801fb18
 800cdbc:	0801f958 	.word	0x0801f958
 800cdc0:	0801fb38 	.word	0x0801fb38
 800cdc4:	0801fbb0 	.word	0x0801fbb0

0800cdc8 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b08c      	sub	sp, #48	; 0x30
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d109      	bne.n	800cdec <netconn_send+0x24>
 800cdd8:	4b0e      	ldr	r3, [pc, #56]	; (800ce14 <netconn_send+0x4c>)
 800cdda:	f240 32b2 	movw	r2, #946	; 0x3b2
 800cdde:	490e      	ldr	r1, [pc, #56]	; (800ce18 <netconn_send+0x50>)
 800cde0:	480e      	ldr	r0, [pc, #56]	; (800ce1c <netconn_send+0x54>)
 800cde2:	f00e f801 	bl	801ade8 <iprintf>
 800cde6:	f06f 030f 	mvn.w	r3, #15
 800cdea:	e00e      	b.n	800ce0a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800cdf4:	f107 030c 	add.w	r3, r7, #12
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	4809      	ldr	r0, [pc, #36]	; (800ce20 <netconn_send+0x58>)
 800cdfc:	f7ff fcdf 	bl	800c7be <netconn_apimsg>
 800ce00:	4603      	mov	r3, r0
 800ce02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ce06:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3730      	adds	r7, #48	; 0x30
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	0801f900 	.word	0x0801f900
 800ce18:	0801fbbc 	.word	0x0801fbbc
 800ce1c:	0801f958 	.word	0x0801f958
 800ce20:	0800dfbd 	.word	0x0800dfbd

0800ce24 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b08c      	sub	sp, #48	; 0x30
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	460b      	mov	r3, r1
 800ce2e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d109      	bne.n	800ce4a <netconn_close_shutdown+0x26>
 800ce36:	4b0f      	ldr	r3, [pc, #60]	; (800ce74 <netconn_close_shutdown+0x50>)
 800ce38:	f240 4247 	movw	r2, #1095	; 0x447
 800ce3c:	490e      	ldr	r1, [pc, #56]	; (800ce78 <netconn_close_shutdown+0x54>)
 800ce3e:	480f      	ldr	r0, [pc, #60]	; (800ce7c <netconn_close_shutdown+0x58>)
 800ce40:	f00d ffd2 	bl	801ade8 <iprintf>
 800ce44:	f06f 030f 	mvn.w	r3, #15
 800ce48:	e010      	b.n	800ce6c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800ce4e:	78fb      	ldrb	r3, [r7, #3]
 800ce50:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ce52:	2329      	movs	r3, #41	; 0x29
 800ce54:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800ce56:	f107 030c 	add.w	r3, r7, #12
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	4808      	ldr	r0, [pc, #32]	; (800ce80 <netconn_close_shutdown+0x5c>)
 800ce5e:	f7ff fcae 	bl	800c7be <netconn_apimsg>
 800ce62:	4603      	mov	r3, r0
 800ce64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ce68:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3730      	adds	r7, #48	; 0x30
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	0801f900 	.word	0x0801f900
 800ce78:	0801fc3c 	.word	0x0801fc3c
 800ce7c:	0801f958 	.word	0x0801f958
 800ce80:	0800e45d 	.word	0x0800e45d

0800ce84 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800ce8c:	2103      	movs	r1, #3
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f7ff ffc8 	bl	800ce24 <netconn_close_shutdown>
 800ce94:	4603      	mov	r3, r0
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3708      	adds	r7, #8
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}

0800ce9e <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800ce9e:	b580      	push	{r7, lr}
 800cea0:	b084      	sub	sp, #16
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d101      	bne.n	800ceb0 <netconn_err+0x12>
    return ERR_OK;
 800ceac:	2300      	movs	r3, #0
 800ceae:	e00d      	b.n	800cecc <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800ceb0:	f00c ff70 	bl	8019d94 <sys_arch_protect>
 800ceb4:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	7a1b      	ldrb	r3, [r3, #8]
 800ceba:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2200      	movs	r2, #0
 800cec0:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800cec2:	68f8      	ldr	r0, [r7, #12]
 800cec4:	f00c ff74 	bl	8019db0 <sys_arch_unprotect>
  return err;
 800cec8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3710      	adds	r7, #16
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	4603      	mov	r3, r0
 800cedc:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800cede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cee2:	f113 0f0e 	cmn.w	r3, #14
 800cee6:	d008      	beq.n	800cefa <lwip_netconn_err_to_msg+0x26>
 800cee8:	f113 0f0d 	cmn.w	r3, #13
 800ceec:	d003      	beq.n	800cef6 <lwip_netconn_err_to_msg+0x22>
 800ceee:	f113 0f0f 	cmn.w	r3, #15
 800cef2:	d004      	beq.n	800cefe <lwip_netconn_err_to_msg+0x2a>
 800cef4:	e005      	b.n	800cf02 <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800cef6:	4b0a      	ldr	r3, [pc, #40]	; (800cf20 <lwip_netconn_err_to_msg+0x4c>)
 800cef8:	e00e      	b.n	800cf18 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800cefa:	4b0a      	ldr	r3, [pc, #40]	; (800cf24 <lwip_netconn_err_to_msg+0x50>)
 800cefc:	e00c      	b.n	800cf18 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800cefe:	4b0a      	ldr	r3, [pc, #40]	; (800cf28 <lwip_netconn_err_to_msg+0x54>)
 800cf00:	e00a      	b.n	800cf18 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800cf02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d005      	beq.n	800cf16 <lwip_netconn_err_to_msg+0x42>
 800cf0a:	4b08      	ldr	r3, [pc, #32]	; (800cf2c <lwip_netconn_err_to_msg+0x58>)
 800cf0c:	227d      	movs	r2, #125	; 0x7d
 800cf0e:	4908      	ldr	r1, [pc, #32]	; (800cf30 <lwip_netconn_err_to_msg+0x5c>)
 800cf10:	4808      	ldr	r0, [pc, #32]	; (800cf34 <lwip_netconn_err_to_msg+0x60>)
 800cf12:	f00d ff69 	bl	801ade8 <iprintf>
      return NULL;
 800cf16:	2300      	movs	r3, #0
  }
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3708      	adds	r7, #8
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}
 800cf20:	080245e8 	.word	0x080245e8
 800cf24:	080245e9 	.word	0x080245e9
 800cf28:	080245ea 	.word	0x080245ea
 800cf2c:	0801fc58 	.word	0x0801fc58
 800cf30:	0801fc8c 	.word	0x0801fc8c
 800cf34:	0801fc9c 	.word	0x0801fc9c

0800cf38 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b082      	sub	sp, #8
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d105      	bne.n	800cf54 <lwip_netconn_is_err_msg+0x1c>
 800cf48:	4b12      	ldr	r3, [pc, #72]	; (800cf94 <lwip_netconn_is_err_msg+0x5c>)
 800cf4a:	2285      	movs	r2, #133	; 0x85
 800cf4c:	4912      	ldr	r1, [pc, #72]	; (800cf98 <lwip_netconn_is_err_msg+0x60>)
 800cf4e:	4813      	ldr	r0, [pc, #76]	; (800cf9c <lwip_netconn_is_err_msg+0x64>)
 800cf50:	f00d ff4a 	bl	801ade8 <iprintf>

  if (msg == &netconn_aborted) {
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	4a12      	ldr	r2, [pc, #72]	; (800cfa0 <lwip_netconn_is_err_msg+0x68>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d104      	bne.n	800cf66 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	22f3      	movs	r2, #243	; 0xf3
 800cf60:	701a      	strb	r2, [r3, #0]
    return 1;
 800cf62:	2301      	movs	r3, #1
 800cf64:	e012      	b.n	800cf8c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4a0e      	ldr	r2, [pc, #56]	; (800cfa4 <lwip_netconn_is_err_msg+0x6c>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d104      	bne.n	800cf78 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	22f2      	movs	r2, #242	; 0xf2
 800cf72:	701a      	strb	r2, [r3, #0]
    return 1;
 800cf74:	2301      	movs	r3, #1
 800cf76:	e009      	b.n	800cf8c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	4a0b      	ldr	r2, [pc, #44]	; (800cfa8 <lwip_netconn_is_err_msg+0x70>)
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d104      	bne.n	800cf8a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	22f1      	movs	r2, #241	; 0xf1
 800cf84:	701a      	strb	r2, [r3, #0]
    return 1;
 800cf86:	2301      	movs	r3, #1
 800cf88:	e000      	b.n	800cf8c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800cf8a:	2300      	movs	r3, #0
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3708      	adds	r7, #8
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	0801fc58 	.word	0x0801fc58
 800cf98:	0801fcc4 	.word	0x0801fcc4
 800cf9c:	0801fc9c 	.word	0x0801fc9c
 800cfa0:	080245e8 	.word	0x080245e8
 800cfa4:	080245e9 	.word	0x080245e9
 800cfa8:	080245ea 	.word	0x080245ea

0800cfac <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b088      	sub	sp, #32
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	60f8      	str	r0, [r7, #12]
 800cfb4:	60b9      	str	r1, [r7, #8]
 800cfb6:	607a      	str	r2, [r7, #4]
 800cfb8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d105      	bne.n	800cfcc <recv_udp+0x20>
 800cfc0:	4b34      	ldr	r3, [pc, #208]	; (800d094 <recv_udp+0xe8>)
 800cfc2:	22e5      	movs	r2, #229	; 0xe5
 800cfc4:	4934      	ldr	r1, [pc, #208]	; (800d098 <recv_udp+0xec>)
 800cfc6:	4835      	ldr	r0, [pc, #212]	; (800d09c <recv_udp+0xf0>)
 800cfc8:	f00d ff0e 	bl	801ade8 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d105      	bne.n	800cfde <recv_udp+0x32>
 800cfd2:	4b30      	ldr	r3, [pc, #192]	; (800d094 <recv_udp+0xe8>)
 800cfd4:	22e6      	movs	r2, #230	; 0xe6
 800cfd6:	4932      	ldr	r1, [pc, #200]	; (800d0a0 <recv_udp+0xf4>)
 800cfd8:	4830      	ldr	r0, [pc, #192]	; (800d09c <recv_udp+0xf0>)
 800cfda:	f00d ff05 	bl	801ade8 <iprintf>
  conn = (struct netconn *)arg;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800cfe2:	69fb      	ldr	r3, [r7, #28]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d103      	bne.n	800cff0 <recv_udp+0x44>
    pbuf_free(p);
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f003 f89f 	bl	801012c <pbuf_free>
    return;
 800cfee:	e04d      	b.n	800d08c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800cff0:	69fb      	ldr	r3, [r7, #28]
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	68ba      	ldr	r2, [r7, #8]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d005      	beq.n	800d006 <recv_udp+0x5a>
 800cffa:	4b26      	ldr	r3, [pc, #152]	; (800d094 <recv_udp+0xe8>)
 800cffc:	22ee      	movs	r2, #238	; 0xee
 800cffe:	4929      	ldr	r1, [pc, #164]	; (800d0a4 <recv_udp+0xf8>)
 800d000:	4826      	ldr	r0, [pc, #152]	; (800d09c <recv_udp+0xf0>)
 800d002:	f00d fef1 	bl	801ade8 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d006:	69fb      	ldr	r3, [r7, #28]
 800d008:	3310      	adds	r3, #16
 800d00a:	4618      	mov	r0, r3
 800d00c:	f00c fda7 	bl	8019b5e <sys_mbox_valid>
 800d010:	4603      	mov	r3, r0
 800d012:	2b00      	cmp	r3, #0
 800d014:	d103      	bne.n	800d01e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f003 f888 	bl	801012c <pbuf_free>
    return;
 800d01c:	e036      	b.n	800d08c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d01e:	2006      	movs	r0, #6
 800d020:	f002 fa0a 	bl	800f438 <memp_malloc>
 800d024:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800d026:	69bb      	ldr	r3, [r7, #24]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d103      	bne.n	800d034 <recv_udp+0x88>
    pbuf_free(p);
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f003 f87d 	bl	801012c <pbuf_free>
    return;
 800d032:	e02b      	b.n	800d08c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800d034:	69bb      	ldr	r3, [r7, #24]
 800d036:	687a      	ldr	r2, [r7, #4]
 800d038:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	687a      	ldr	r2, [r7, #4]
 800d03e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d002      	beq.n	800d04c <recv_udp+0xa0>
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	e000      	b.n	800d04e <recv_udp+0xa2>
 800d04c:	2300      	movs	r3, #0
 800d04e:	69ba      	ldr	r2, [r7, #24]
 800d050:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800d052:	69bb      	ldr	r3, [r7, #24]
 800d054:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d056:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	891b      	ldrh	r3, [r3, #8]
 800d05c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800d05e:	69fb      	ldr	r3, [r7, #28]
 800d060:	3310      	adds	r3, #16
 800d062:	69b9      	ldr	r1, [r7, #24]
 800d064:	4618      	mov	r0, r3
 800d066:	f00c fd05 	bl	8019a74 <sys_mbox_trypost>
 800d06a:	4603      	mov	r3, r0
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d003      	beq.n	800d078 <recv_udp+0xcc>
    netbuf_delete(buf);
 800d070:	69b8      	ldr	r0, [r7, #24]
 800d072:	f001 fa93 	bl	800e59c <netbuf_delete>
    return;
 800d076:	e009      	b.n	800d08c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d078:	69fb      	ldr	r3, [r7, #28]
 800d07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d005      	beq.n	800d08c <recv_udp+0xe0>
 800d080:	69fb      	ldr	r3, [r7, #28]
 800d082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d084:	8afa      	ldrh	r2, [r7, #22]
 800d086:	2100      	movs	r1, #0
 800d088:	69f8      	ldr	r0, [r7, #28]
 800d08a:	4798      	blx	r3
  }
}
 800d08c:	3720      	adds	r7, #32
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}
 800d092:	bf00      	nop
 800d094:	0801fc58 	.word	0x0801fc58
 800d098:	0801fcd0 	.word	0x0801fcd0
 800d09c:	0801fc9c 	.word	0x0801fc9c
 800d0a0:	0801fcf4 	.word	0x0801fcf4
 800d0a4:	0801fd14 	.word	0x0801fd14

0800d0a8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b088      	sub	sp, #32
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	60f8      	str	r0, [r7, #12]
 800d0b0:	60b9      	str	r1, [r7, #8]
 800d0b2:	607a      	str	r2, [r7, #4]
 800d0b4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d106      	bne.n	800d0ca <recv_tcp+0x22>
 800d0bc:	4b36      	ldr	r3, [pc, #216]	; (800d198 <recv_tcp+0xf0>)
 800d0be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d0c2:	4936      	ldr	r1, [pc, #216]	; (800d19c <recv_tcp+0xf4>)
 800d0c4:	4836      	ldr	r0, [pc, #216]	; (800d1a0 <recv_tcp+0xf8>)
 800d0c6:	f00d fe8f 	bl	801ade8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d106      	bne.n	800d0de <recv_tcp+0x36>
 800d0d0:	4b31      	ldr	r3, [pc, #196]	; (800d198 <recv_tcp+0xf0>)
 800d0d2:	f240 122d 	movw	r2, #301	; 0x12d
 800d0d6:	4933      	ldr	r1, [pc, #204]	; (800d1a4 <recv_tcp+0xfc>)
 800d0d8:	4831      	ldr	r0, [pc, #196]	; (800d1a0 <recv_tcp+0xf8>)
 800d0da:	f00d fe85 	bl	801ade8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800d0de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d006      	beq.n	800d0f4 <recv_tcp+0x4c>
 800d0e6:	4b2c      	ldr	r3, [pc, #176]	; (800d198 <recv_tcp+0xf0>)
 800d0e8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800d0ec:	492e      	ldr	r1, [pc, #184]	; (800d1a8 <recv_tcp+0x100>)
 800d0ee:	482c      	ldr	r0, [pc, #176]	; (800d1a0 <recv_tcp+0xf8>)
 800d0f0:	f00d fe7a 	bl	801ade8 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d102      	bne.n	800d104 <recv_tcp+0x5c>
    return ERR_VAL;
 800d0fe:	f06f 0305 	mvn.w	r3, #5
 800d102:	e045      	b.n	800d190 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	685b      	ldr	r3, [r3, #4]
 800d108:	68ba      	ldr	r2, [r7, #8]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d006      	beq.n	800d11c <recv_tcp+0x74>
 800d10e:	4b22      	ldr	r3, [pc, #136]	; (800d198 <recv_tcp+0xf0>)
 800d110:	f240 1235 	movw	r2, #309	; 0x135
 800d114:	4925      	ldr	r1, [pc, #148]	; (800d1ac <recv_tcp+0x104>)
 800d116:	4822      	ldr	r0, [pc, #136]	; (800d1a0 <recv_tcp+0xf8>)
 800d118:	f00d fe66 	bl	801ade8 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	3310      	adds	r3, #16
 800d120:	4618      	mov	r0, r3
 800d122:	f00c fd1c 	bl	8019b5e <sys_mbox_valid>
 800d126:	4603      	mov	r3, r0
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d10d      	bne.n	800d148 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d008      	beq.n	800d144 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	891b      	ldrh	r3, [r3, #8]
 800d136:	4619      	mov	r1, r3
 800d138:	68b8      	ldr	r0, [r7, #8]
 800d13a:	f003 fe53 	bl	8010de4 <tcp_recved>
      pbuf_free(p);
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f002 fff4 	bl	801012c <pbuf_free>
    }
    return ERR_OK;
 800d144:	2300      	movs	r3, #0
 800d146:	e023      	b.n	800d190 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d005      	beq.n	800d15a <recv_tcp+0xb2>
    msg = p;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	891b      	ldrh	r3, [r3, #8]
 800d156:	83fb      	strh	r3, [r7, #30]
 800d158:	e003      	b.n	800d162 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800d15a:	4b15      	ldr	r3, [pc, #84]	; (800d1b0 <recv_tcp+0x108>)
 800d15c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800d15e:	2300      	movs	r3, #0
 800d160:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	3310      	adds	r3, #16
 800d166:	69b9      	ldr	r1, [r7, #24]
 800d168:	4618      	mov	r0, r3
 800d16a:	f00c fc83 	bl	8019a74 <sys_mbox_trypost>
 800d16e:	4603      	mov	r3, r0
 800d170:	2b00      	cmp	r3, #0
 800d172:	d002      	beq.n	800d17a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800d174:	f04f 33ff 	mov.w	r3, #4294967295
 800d178:	e00a      	b.n	800d190 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d005      	beq.n	800d18e <recv_tcp+0xe6>
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d186:	8bfa      	ldrh	r2, [r7, #30]
 800d188:	2100      	movs	r1, #0
 800d18a:	6978      	ldr	r0, [r7, #20]
 800d18c:	4798      	blx	r3
  }

  return ERR_OK;
 800d18e:	2300      	movs	r3, #0
}
 800d190:	4618      	mov	r0, r3
 800d192:	3720      	adds	r7, #32
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	0801fc58 	.word	0x0801fc58
 800d19c:	0801fd34 	.word	0x0801fd34
 800d1a0:	0801fc9c 	.word	0x0801fc9c
 800d1a4:	0801fd58 	.word	0x0801fd58
 800d1a8:	0801fd78 	.word	0x0801fd78
 800d1ac:	0801fd90 	.word	0x0801fd90
 800d1b0:	080245ea 	.word	0x080245ea

0800d1b4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b084      	sub	sp, #16
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d106      	bne.n	800d1d6 <poll_tcp+0x22>
 800d1c8:	4b29      	ldr	r3, [pc, #164]	; (800d270 <poll_tcp+0xbc>)
 800d1ca:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800d1ce:	4929      	ldr	r1, [pc, #164]	; (800d274 <poll_tcp+0xc0>)
 800d1d0:	4829      	ldr	r0, [pc, #164]	; (800d278 <poll_tcp+0xc4>)
 800d1d2:	f00d fe09 	bl	801ade8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	785b      	ldrb	r3, [r3, #1]
 800d1da:	2b01      	cmp	r3, #1
 800d1dc:	d104      	bne.n	800d1e8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d1de:	2101      	movs	r1, #1
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f000 ff6f 	bl	800e0c4 <lwip_netconn_do_writemore>
 800d1e6:	e016      	b.n	800d216 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	785b      	ldrb	r3, [r3, #1]
 800d1ec:	2b04      	cmp	r3, #4
 800d1ee:	d112      	bne.n	800d216 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	6a1b      	ldr	r3, [r3, #32]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d00a      	beq.n	800d20e <poll_tcp+0x5a>
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	6a1b      	ldr	r3, [r3, #32]
 800d1fc:	7a5b      	ldrb	r3, [r3, #9]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d005      	beq.n	800d20e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	6a1b      	ldr	r3, [r3, #32]
 800d206:	7a5a      	ldrb	r2, [r3, #9]
 800d208:	3a01      	subs	r2, #1
 800d20a:	b2d2      	uxtb	r2, r2
 800d20c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d20e:	2101      	movs	r1, #1
 800d210:	68f8      	ldr	r0, [r7, #12]
 800d212:	f000 fb3b 	bl	800d88c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	7f1b      	ldrb	r3, [r3, #28]
 800d21a:	f003 0310 	and.w	r3, r3, #16
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d021      	beq.n	800d266 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	685b      	ldr	r3, [r3, #4]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d01d      	beq.n	800d266 <poll_tcp+0xb2>
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d232:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d236:	d316      	bcc.n	800d266 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	685b      	ldr	r3, [r3, #4]
 800d23c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d240:	2b04      	cmp	r3, #4
 800d242:	d810      	bhi.n	800d266 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	7f1b      	ldrb	r3, [r3, #28]
 800d248:	f023 0310 	bic.w	r3, r3, #16
 800d24c:	b2da      	uxtb	r2, r3
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d256:	2b00      	cmp	r3, #0
 800d258:	d005      	beq.n	800d266 <poll_tcp+0xb2>
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d25e:	2200      	movs	r2, #0
 800d260:	2102      	movs	r1, #2
 800d262:	68f8      	ldr	r0, [r7, #12]
 800d264:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d266:	2300      	movs	r3, #0
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3710      	adds	r7, #16
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}
 800d270:	0801fc58 	.word	0x0801fc58
 800d274:	0801fdb0 	.word	0x0801fdb0
 800d278:	0801fc9c 	.word	0x0801fc9c

0800d27c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b086      	sub	sp, #24
 800d280:	af00      	add	r7, sp, #0
 800d282:	60f8      	str	r0, [r7, #12]
 800d284:	60b9      	str	r1, [r7, #8]
 800d286:	4613      	mov	r3, r2
 800d288:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d106      	bne.n	800d2a2 <sent_tcp+0x26>
 800d294:	4b20      	ldr	r3, [pc, #128]	; (800d318 <sent_tcp+0x9c>)
 800d296:	f240 1293 	movw	r2, #403	; 0x193
 800d29a:	4920      	ldr	r1, [pc, #128]	; (800d31c <sent_tcp+0xa0>)
 800d29c:	4820      	ldr	r0, [pc, #128]	; (800d320 <sent_tcp+0xa4>)
 800d29e:	f00d fda3 	bl	801ade8 <iprintf>

  if (conn) {
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d032      	beq.n	800d30e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	785b      	ldrb	r3, [r3, #1]
 800d2ac:	2b01      	cmp	r3, #1
 800d2ae:	d104      	bne.n	800d2ba <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d2b0:	2101      	movs	r1, #1
 800d2b2:	6978      	ldr	r0, [r7, #20]
 800d2b4:	f000 ff06 	bl	800e0c4 <lwip_netconn_do_writemore>
 800d2b8:	e007      	b.n	800d2ca <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	785b      	ldrb	r3, [r3, #1]
 800d2be:	2b04      	cmp	r3, #4
 800d2c0:	d103      	bne.n	800d2ca <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d2c2:	2101      	movs	r1, #1
 800d2c4:	6978      	ldr	r0, [r7, #20]
 800d2c6:	f000 fae1 	bl	800d88c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d01d      	beq.n	800d30e <sent_tcp+0x92>
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d2da:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d2de:	d316      	bcc.n	800d30e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	685b      	ldr	r3, [r3, #4]
 800d2e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d2e8:	2b04      	cmp	r3, #4
 800d2ea:	d810      	bhi.n	800d30e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	7f1b      	ldrb	r3, [r3, #28]
 800d2f0:	f023 0310 	bic.w	r3, r3, #16
 800d2f4:	b2da      	uxtb	r2, r3
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d005      	beq.n	800d30e <sent_tcp+0x92>
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d306:	88fa      	ldrh	r2, [r7, #6]
 800d308:	2102      	movs	r1, #2
 800d30a:	6978      	ldr	r0, [r7, #20]
 800d30c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d30e:	2300      	movs	r3, #0
}
 800d310:	4618      	mov	r0, r3
 800d312:	3718      	adds	r7, #24
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	0801fc58 	.word	0x0801fc58
 800d31c:	0801fdb0 	.word	0x0801fdb0
 800d320:	0801fc9c 	.word	0x0801fc9c

0800d324 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b088      	sub	sp, #32
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	460b      	mov	r3, r1
 800d32e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d334:	69fb      	ldr	r3, [r7, #28]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d106      	bne.n	800d348 <err_tcp+0x24>
 800d33a:	4b5f      	ldr	r3, [pc, #380]	; (800d4b8 <err_tcp+0x194>)
 800d33c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800d340:	495e      	ldr	r1, [pc, #376]	; (800d4bc <err_tcp+0x198>)
 800d342:	485f      	ldr	r0, [pc, #380]	; (800d4c0 <err_tcp+0x19c>)
 800d344:	f00d fd50 	bl	801ade8 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800d348:	f00c fd24 	bl	8019d94 <sys_arch_protect>
 800d34c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800d34e:	69fb      	ldr	r3, [r7, #28]
 800d350:	2200      	movs	r2, #0
 800d352:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800d354:	69fb      	ldr	r3, [r7, #28]
 800d356:	78fa      	ldrb	r2, [r7, #3]
 800d358:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800d35a:	69fb      	ldr	r3, [r7, #28]
 800d35c:	7f1b      	ldrb	r3, [r3, #28]
 800d35e:	f043 0301 	orr.w	r3, r3, #1
 800d362:	b2da      	uxtb	r2, r3
 800d364:	69fb      	ldr	r3, [r7, #28]
 800d366:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800d368:	69fb      	ldr	r3, [r7, #28]
 800d36a:	785b      	ldrb	r3, [r3, #1]
 800d36c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800d36e:	69fb      	ldr	r3, [r7, #28]
 800d370:	2200      	movs	r2, #0
 800d372:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800d374:	69b8      	ldr	r0, [r7, #24]
 800d376:	f00c fd1b 	bl	8019db0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d37a:	69fb      	ldr	r3, [r7, #28]
 800d37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d005      	beq.n	800d38e <err_tcp+0x6a>
 800d382:	69fb      	ldr	r3, [r7, #28]
 800d384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d386:	2200      	movs	r2, #0
 800d388:	2104      	movs	r1, #4
 800d38a:	69f8      	ldr	r0, [r7, #28]
 800d38c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d392:	2b00      	cmp	r3, #0
 800d394:	d005      	beq.n	800d3a2 <err_tcp+0x7e>
 800d396:	69fb      	ldr	r3, [r7, #28]
 800d398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d39a:	2200      	movs	r2, #0
 800d39c:	2100      	movs	r1, #0
 800d39e:	69f8      	ldr	r0, [r7, #28]
 800d3a0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d3a2:	69fb      	ldr	r3, [r7, #28]
 800d3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d005      	beq.n	800d3b6 <err_tcp+0x92>
 800d3aa:	69fb      	ldr	r3, [r7, #28]
 800d3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	2102      	movs	r1, #2
 800d3b2:	69f8      	ldr	r0, [r7, #28]
 800d3b4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800d3b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7ff fd8a 	bl	800ced4 <lwip_netconn_err_to_msg>
 800d3c0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d3c2:	69fb      	ldr	r3, [r7, #28]
 800d3c4:	3310      	adds	r3, #16
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f00c fbc9 	bl	8019b5e <sys_mbox_valid>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d005      	beq.n	800d3de <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800d3d2:	69fb      	ldr	r3, [r7, #28]
 800d3d4:	3310      	adds	r3, #16
 800d3d6:	6939      	ldr	r1, [r7, #16]
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f00c fb4b 	bl	8019a74 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800d3de:	69fb      	ldr	r3, [r7, #28]
 800d3e0:	3314      	adds	r3, #20
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f00c fbbb 	bl	8019b5e <sys_mbox_valid>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d005      	beq.n	800d3fa <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800d3ee:	69fb      	ldr	r3, [r7, #28]
 800d3f0:	3314      	adds	r3, #20
 800d3f2:	6939      	ldr	r1, [r7, #16]
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f00c fb3d 	bl	8019a74 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800d3fa:	7dfb      	ldrb	r3, [r7, #23]
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d005      	beq.n	800d40c <err_tcp+0xe8>
 800d400:	7dfb      	ldrb	r3, [r7, #23]
 800d402:	2b04      	cmp	r3, #4
 800d404:	d002      	beq.n	800d40c <err_tcp+0xe8>
 800d406:	7dfb      	ldrb	r3, [r7, #23]
 800d408:	2b03      	cmp	r3, #3
 800d40a:	d143      	bne.n	800d494 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800d40c:	69fb      	ldr	r3, [r7, #28]
 800d40e:	7f1b      	ldrb	r3, [r3, #28]
 800d410:	f003 0304 	and.w	r3, r3, #4
 800d414:	2b00      	cmp	r3, #0
 800d416:	bf14      	ite	ne
 800d418:	2301      	movne	r3, #1
 800d41a:	2300      	moveq	r3, #0
 800d41c:	b2db      	uxtb	r3, r3
 800d41e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800d420:	69fb      	ldr	r3, [r7, #28]
 800d422:	7f1b      	ldrb	r3, [r3, #28]
 800d424:	f023 0304 	bic.w	r3, r3, #4
 800d428:	b2da      	uxtb	r2, r3
 800d42a:	69fb      	ldr	r3, [r7, #28]
 800d42c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d13b      	bne.n	800d4ac <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d434:	69fb      	ldr	r3, [r7, #28]
 800d436:	6a1b      	ldr	r3, [r3, #32]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d106      	bne.n	800d44a <err_tcp+0x126>
 800d43c:	4b1e      	ldr	r3, [pc, #120]	; (800d4b8 <err_tcp+0x194>)
 800d43e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d442:	4920      	ldr	r1, [pc, #128]	; (800d4c4 <err_tcp+0x1a0>)
 800d444:	481e      	ldr	r0, [pc, #120]	; (800d4c0 <err_tcp+0x19c>)
 800d446:	f00d fccf 	bl	801ade8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800d44a:	7dfb      	ldrb	r3, [r7, #23]
 800d44c:	2b04      	cmp	r3, #4
 800d44e:	d104      	bne.n	800d45a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800d450:	69fb      	ldr	r3, [r7, #28]
 800d452:	6a1b      	ldr	r3, [r3, #32]
 800d454:	2200      	movs	r2, #0
 800d456:	711a      	strb	r2, [r3, #4]
 800d458:	e003      	b.n	800d462 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800d45a:	69fb      	ldr	r3, [r7, #28]
 800d45c:	6a1b      	ldr	r3, [r3, #32]
 800d45e:	78fa      	ldrb	r2, [r7, #3]
 800d460:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d462:	69fb      	ldr	r3, [r7, #28]
 800d464:	6a1b      	ldr	r3, [r3, #32]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	330c      	adds	r3, #12
 800d46a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800d46c:	68b8      	ldr	r0, [r7, #8]
 800d46e:	f00c fc07 	bl	8019c80 <sys_sem_valid>
 800d472:	4603      	mov	r3, r0
 800d474:	2b00      	cmp	r3, #0
 800d476:	d106      	bne.n	800d486 <err_tcp+0x162>
 800d478:	4b0f      	ldr	r3, [pc, #60]	; (800d4b8 <err_tcp+0x194>)
 800d47a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800d47e:	4912      	ldr	r1, [pc, #72]	; (800d4c8 <err_tcp+0x1a4>)
 800d480:	480f      	ldr	r0, [pc, #60]	; (800d4c0 <err_tcp+0x19c>)
 800d482:	f00d fcb1 	bl	801ade8 <iprintf>
      conn->current_msg = NULL;
 800d486:	69fb      	ldr	r3, [r7, #28]
 800d488:	2200      	movs	r2, #0
 800d48a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800d48c:	68b8      	ldr	r0, [r7, #8]
 800d48e:	f00c fbdd 	bl	8019c4c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800d492:	e00b      	b.n	800d4ac <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800d494:	69fb      	ldr	r3, [r7, #28]
 800d496:	6a1b      	ldr	r3, [r3, #32]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d008      	beq.n	800d4ae <err_tcp+0x18a>
 800d49c:	4b06      	ldr	r3, [pc, #24]	; (800d4b8 <err_tcp+0x194>)
 800d49e:	f240 12f7 	movw	r2, #503	; 0x1f7
 800d4a2:	490a      	ldr	r1, [pc, #40]	; (800d4cc <err_tcp+0x1a8>)
 800d4a4:	4806      	ldr	r0, [pc, #24]	; (800d4c0 <err_tcp+0x19c>)
 800d4a6:	f00d fc9f 	bl	801ade8 <iprintf>
  }
}
 800d4aa:	e000      	b.n	800d4ae <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800d4ac:	bf00      	nop
}
 800d4ae:	bf00      	nop
 800d4b0:	3720      	adds	r7, #32
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	0801fc58 	.word	0x0801fc58
 800d4bc:	0801fdb0 	.word	0x0801fdb0
 800d4c0:	0801fc9c 	.word	0x0801fc9c
 800d4c4:	0801fdc0 	.word	0x0801fdc0
 800d4c8:	0801fddc 	.word	0x0801fddc
 800d4cc:	0801fdf8 	.word	0x0801fdf8

0800d4d0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b084      	sub	sp, #16
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	685b      	ldr	r3, [r3, #4]
 800d4dc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800d4de:	6879      	ldr	r1, [r7, #4]
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f004 fc59 	bl	8011d98 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800d4e6:	490a      	ldr	r1, [pc, #40]	; (800d510 <setup_tcp+0x40>)
 800d4e8:	68f8      	ldr	r0, [r7, #12]
 800d4ea:	f004 fc67 	bl	8011dbc <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800d4ee:	4909      	ldr	r1, [pc, #36]	; (800d514 <setup_tcp+0x44>)
 800d4f0:	68f8      	ldr	r0, [r7, #12]
 800d4f2:	f004 fc85 	bl	8011e00 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800d4f6:	2202      	movs	r2, #2
 800d4f8:	4907      	ldr	r1, [pc, #28]	; (800d518 <setup_tcp+0x48>)
 800d4fa:	68f8      	ldr	r0, [r7, #12]
 800d4fc:	f004 fcdc 	bl	8011eb8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800d500:	4906      	ldr	r1, [pc, #24]	; (800d51c <setup_tcp+0x4c>)
 800d502:	68f8      	ldr	r0, [r7, #12]
 800d504:	f004 fc9e 	bl	8011e44 <tcp_err>
}
 800d508:	bf00      	nop
 800d50a:	3710      	adds	r7, #16
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}
 800d510:	0800d0a9 	.word	0x0800d0a9
 800d514:	0800d27d 	.word	0x0800d27d
 800d518:	0800d1b5 	.word	0x0800d1b5
 800d51c:	0800d325 	.word	0x0800d325

0800d520 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800d520:	b590      	push	{r4, r7, lr}
 800d522:	b085      	sub	sp, #20
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800d528:	2300      	movs	r3, #0
 800d52a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	685b      	ldr	r3, [r3, #4]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d006      	beq.n	800d544 <pcb_new+0x24>
 800d536:	4b2b      	ldr	r3, [pc, #172]	; (800d5e4 <pcb_new+0xc4>)
 800d538:	f240 2265 	movw	r2, #613	; 0x265
 800d53c:	492a      	ldr	r1, [pc, #168]	; (800d5e8 <pcb_new+0xc8>)
 800d53e:	482b      	ldr	r0, [pc, #172]	; (800d5ec <pcb_new+0xcc>)
 800d540:	f00d fc52 	bl	801ade8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d54e:	2b10      	cmp	r3, #16
 800d550:	d022      	beq.n	800d598 <pcb_new+0x78>
 800d552:	2b20      	cmp	r3, #32
 800d554:	d133      	bne.n	800d5be <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681c      	ldr	r4, [r3, #0]
 800d55a:	7bfb      	ldrb	r3, [r7, #15]
 800d55c:	4618      	mov	r0, r3
 800d55e:	f009 ff5e 	bl	801741e <udp_new_ip_type>
 800d562:	4603      	mov	r3, r0
 800d564:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d02a      	beq.n	800d5c6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	2b22      	cmp	r3, #34	; 0x22
 800d578:	d104      	bne.n	800d584 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	2201      	movs	r2, #1
 800d582:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	6858      	ldr	r0, [r3, #4]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	461a      	mov	r2, r3
 800d590:	4917      	ldr	r1, [pc, #92]	; (800d5f0 <pcb_new+0xd0>)
 800d592:	f009 fecb 	bl	801732c <udp_recv>
      }
      break;
 800d596:	e016      	b.n	800d5c6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681c      	ldr	r4, [r3, #0]
 800d59c:	7bfb      	ldrb	r3, [r7, #15]
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f004 fbec 	bl	8011d7c <tcp_new_ip_type>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	685b      	ldr	r3, [r3, #4]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d00b      	beq.n	800d5ca <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7ff ff8a 	bl	800d4d0 <setup_tcp>
      }
      break;
 800d5bc:	e005      	b.n	800d5ca <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	22fa      	movs	r2, #250	; 0xfa
 800d5c2:	711a      	strb	r2, [r3, #4]
      return;
 800d5c4:	e00a      	b.n	800d5dc <pcb_new+0xbc>
      break;
 800d5c6:	bf00      	nop
 800d5c8:	e000      	b.n	800d5cc <pcb_new+0xac>
      break;
 800d5ca:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	685b      	ldr	r3, [r3, #4]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d102      	bne.n	800d5dc <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	22ff      	movs	r2, #255	; 0xff
 800d5da:	711a      	strb	r2, [r3, #4]
  }
}
 800d5dc:	3714      	adds	r7, #20
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd90      	pop	{r4, r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	0801fc58 	.word	0x0801fc58
 800d5e8:	0801fe3c 	.word	0x0801fe3c
 800d5ec:	0801fc9c 	.word	0x0801fc9c
 800d5f0:	0800cfad 	.word	0x0800cfad

0800d5f4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b084      	sub	sp, #16
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2200      	movs	r2, #0
 800d604:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	685b      	ldr	r3, [r3, #4]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d102      	bne.n	800d616 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800d610:	68f8      	ldr	r0, [r7, #12]
 800d612:	f7ff ff85 	bl	800d520 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800d616:	bf00      	nop
 800d618:	3710      	adds	r7, #16
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}
	...

0800d620 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b086      	sub	sp, #24
 800d624:	af00      	add	r7, sp, #0
 800d626:	4603      	mov	r3, r0
 800d628:	6039      	str	r1, [r7, #0]
 800d62a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800d62c:	2300      	movs	r3, #0
 800d62e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800d630:	2007      	movs	r0, #7
 800d632:	f001 ff01 	bl	800f438 <memp_malloc>
 800d636:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d101      	bne.n	800d642 <netconn_alloc+0x22>
    return NULL;
 800d63e:	2300      	movs	r3, #0
 800d640:	e052      	b.n	800d6e8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2200      	movs	r2, #0
 800d646:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	79fa      	ldrb	r2, [r7, #7]
 800d64c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	2200      	movs	r2, #0
 800d652:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800d654:	79fb      	ldrb	r3, [r7, #7]
 800d656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d65a:	2b10      	cmp	r3, #16
 800d65c:	d004      	beq.n	800d668 <netconn_alloc+0x48>
 800d65e:	2b20      	cmp	r3, #32
 800d660:	d105      	bne.n	800d66e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800d662:	2306      	movs	r3, #6
 800d664:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800d666:	e00a      	b.n	800d67e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800d668:	2306      	movs	r3, #6
 800d66a:	617b      	str	r3, [r7, #20]
      break;
 800d66c:	e007      	b.n	800d67e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800d66e:	4b20      	ldr	r3, [pc, #128]	; (800d6f0 <netconn_alloc+0xd0>)
 800d670:	f240 22e5 	movw	r2, #741	; 0x2e5
 800d674:	491f      	ldr	r1, [pc, #124]	; (800d6f4 <netconn_alloc+0xd4>)
 800d676:	4820      	ldr	r0, [pc, #128]	; (800d6f8 <netconn_alloc+0xd8>)
 800d678:	f00d fbb6 	bl	801ade8 <iprintf>
      goto free_and_return;
 800d67c:	e02f      	b.n	800d6de <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	3310      	adds	r3, #16
 800d682:	6979      	ldr	r1, [r7, #20]
 800d684:	4618      	mov	r0, r3
 800d686:	f00c f9c1 	bl	8019a0c <sys_mbox_new>
 800d68a:	4603      	mov	r3, r0
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d125      	bne.n	800d6dc <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	330c      	adds	r3, #12
 800d694:	2100      	movs	r1, #0
 800d696:	4618      	mov	r0, r3
 800d698:	f00c fa7f 	bl	8019b9a <sys_sem_new>
 800d69c:	4603      	mov	r3, r0
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d005      	beq.n	800d6ae <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	3310      	adds	r3, #16
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f00c f9d2 	bl	8019a50 <sys_mbox_free>
    goto free_and_return;
 800d6ac:	e017      	b.n	800d6de <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	3314      	adds	r3, #20
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f00c fa64 	bl	8019b80 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d6c4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	683a      	ldr	r2, [r7, #0]
 800d6ca:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	7cfa      	ldrb	r2, [r7, #19]
 800d6d6:	771a      	strb	r2, [r3, #28]
  return conn;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	e005      	b.n	800d6e8 <netconn_alloc+0xc8>
    goto free_and_return;
 800d6dc:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800d6de:	68f9      	ldr	r1, [r7, #12]
 800d6e0:	2007      	movs	r0, #7
 800d6e2:	f001 fefb 	bl	800f4dc <memp_free>
  return NULL;
 800d6e6:	2300      	movs	r3, #0
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3718      	adds	r7, #24
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}
 800d6f0:	0801fc58 	.word	0x0801fc58
 800d6f4:	0801fe5c 	.word	0x0801fe5c
 800d6f8:	0801fc9c 	.word	0x0801fc9c

0800d6fc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b082      	sub	sp, #8
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d006      	beq.n	800d71a <netconn_free+0x1e>
 800d70c:	4b1b      	ldr	r3, [pc, #108]	; (800d77c <netconn_free+0x80>)
 800d70e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d712:	491b      	ldr	r1, [pc, #108]	; (800d780 <netconn_free+0x84>)
 800d714:	481b      	ldr	r0, [pc, #108]	; (800d784 <netconn_free+0x88>)
 800d716:	f00d fb67 	bl	801ade8 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	3310      	adds	r3, #16
 800d71e:	4618      	mov	r0, r3
 800d720:	f00c fa1d 	bl	8019b5e <sys_mbox_valid>
 800d724:	4603      	mov	r3, r0
 800d726:	2b00      	cmp	r3, #0
 800d728:	d006      	beq.n	800d738 <netconn_free+0x3c>
 800d72a:	4b14      	ldr	r3, [pc, #80]	; (800d77c <netconn_free+0x80>)
 800d72c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800d730:	4915      	ldr	r1, [pc, #84]	; (800d788 <netconn_free+0x8c>)
 800d732:	4814      	ldr	r0, [pc, #80]	; (800d784 <netconn_free+0x88>)
 800d734:	f00d fb58 	bl	801ade8 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	3314      	adds	r3, #20
 800d73c:	4618      	mov	r0, r3
 800d73e:	f00c fa0e 	bl	8019b5e <sys_mbox_valid>
 800d742:	4603      	mov	r3, r0
 800d744:	2b00      	cmp	r3, #0
 800d746:	d006      	beq.n	800d756 <netconn_free+0x5a>
 800d748:	4b0c      	ldr	r3, [pc, #48]	; (800d77c <netconn_free+0x80>)
 800d74a:	f240 3227 	movw	r2, #807	; 0x327
 800d74e:	490f      	ldr	r1, [pc, #60]	; (800d78c <netconn_free+0x90>)
 800d750:	480c      	ldr	r0, [pc, #48]	; (800d784 <netconn_free+0x88>)
 800d752:	f00d fb49 	bl	801ade8 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	330c      	adds	r3, #12
 800d75a:	4618      	mov	r0, r3
 800d75c:	f00c fa83 	bl	8019c66 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	330c      	adds	r3, #12
 800d764:	4618      	mov	r0, r3
 800d766:	f00c fa9c 	bl	8019ca2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800d76a:	6879      	ldr	r1, [r7, #4]
 800d76c:	2007      	movs	r0, #7
 800d76e:	f001 feb5 	bl	800f4dc <memp_free>
}
 800d772:	bf00      	nop
 800d774:	3708      	adds	r7, #8
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	0801fc58 	.word	0x0801fc58
 800d780:	0801fe84 	.word	0x0801fe84
 800d784:	0801fc9c 	.word	0x0801fc9c
 800d788:	0801feb4 	.word	0x0801feb4
 800d78c:	0801fef0 	.word	0x0801fef0

0800d790 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b086      	sub	sp, #24
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	3310      	adds	r3, #16
 800d79c:	4618      	mov	r0, r3
 800d79e:	f00c f9de 	bl	8019b5e <sys_mbox_valid>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d02f      	beq.n	800d808 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d7a8:	e018      	b.n	800d7dc <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d7b2:	2b10      	cmp	r3, #16
 800d7b4:	d10e      	bne.n	800d7d4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	f107 020f 	add.w	r2, r7, #15
 800d7bc:	4611      	mov	r1, r2
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7ff fbba 	bl	800cf38 <lwip_netconn_is_err_msg>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d108      	bne.n	800d7dc <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f002 fcad 	bl	801012c <pbuf_free>
 800d7d2:	e003      	b.n	800d7dc <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f000 fee0 	bl	800e59c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	3310      	adds	r3, #16
 800d7e0:	f107 0210 	add.w	r2, r7, #16
 800d7e4:	4611      	mov	r1, r2
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f00c f99d 	bl	8019b26 <sys_arch_mbox_tryfetch>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7f2:	d1da      	bne.n	800d7aa <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	3310      	adds	r3, #16
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f00c f929 	bl	8019a50 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	3310      	adds	r3, #16
 800d802:	4618      	mov	r0, r3
 800d804:	f00c f9bc 	bl	8019b80 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	3314      	adds	r3, #20
 800d80c:	4618      	mov	r0, r3
 800d80e:	f00c f9a6 	bl	8019b5e <sys_mbox_valid>
 800d812:	4603      	mov	r3, r0
 800d814:	2b00      	cmp	r3, #0
 800d816:	d034      	beq.n	800d882 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d818:	e01d      	b.n	800d856 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d81a:	693b      	ldr	r3, [r7, #16]
 800d81c:	f107 020e 	add.w	r2, r7, #14
 800d820:	4611      	mov	r1, r2
 800d822:	4618      	mov	r0, r3
 800d824:	f7ff fb88 	bl	800cf38 <lwip_netconn_is_err_msg>
 800d828:	4603      	mov	r3, r0
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d113      	bne.n	800d856 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800d832:	6978      	ldr	r0, [r7, #20]
 800d834:	f7ff ffac 	bl	800d790 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d007      	beq.n	800d850 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	685b      	ldr	r3, [r3, #4]
 800d844:	4618      	mov	r0, r3
 800d846:	f003 fa67 	bl	8010d18 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	2200      	movs	r2, #0
 800d84e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800d850:	6978      	ldr	r0, [r7, #20]
 800d852:	f7ff ff53 	bl	800d6fc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	3314      	adds	r3, #20
 800d85a:	f107 0210 	add.w	r2, r7, #16
 800d85e:	4611      	mov	r1, r2
 800d860:	4618      	mov	r0, r3
 800d862:	f00c f960 	bl	8019b26 <sys_arch_mbox_tryfetch>
 800d866:	4603      	mov	r3, r0
 800d868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d86c:	d1d5      	bne.n	800d81a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	3314      	adds	r3, #20
 800d872:	4618      	mov	r0, r3
 800d874:	f00c f8ec 	bl	8019a50 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	3314      	adds	r3, #20
 800d87c:	4618      	mov	r0, r3
 800d87e:	f00c f97f 	bl	8019b80 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800d882:	bf00      	nop
 800d884:	3718      	adds	r7, #24
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
	...

0800d88c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b086      	sub	sp, #24
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	460b      	mov	r3, r1
 800d896:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800d898:	2300      	movs	r3, #0
 800d89a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d106      	bne.n	800d8b0 <lwip_netconn_do_close_internal+0x24>
 800d8a2:	4ba1      	ldr	r3, [pc, #644]	; (800db28 <lwip_netconn_do_close_internal+0x29c>)
 800d8a4:	f240 32a2 	movw	r2, #930	; 0x3a2
 800d8a8:	49a0      	ldr	r1, [pc, #640]	; (800db2c <lwip_netconn_do_close_internal+0x2a0>)
 800d8aa:	48a1      	ldr	r0, [pc, #644]	; (800db30 <lwip_netconn_do_close_internal+0x2a4>)
 800d8ac:	f00d fa9c 	bl	801ade8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	781b      	ldrb	r3, [r3, #0]
 800d8b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d8b8:	2b10      	cmp	r3, #16
 800d8ba:	d006      	beq.n	800d8ca <lwip_netconn_do_close_internal+0x3e>
 800d8bc:	4b9a      	ldr	r3, [pc, #616]	; (800db28 <lwip_netconn_do_close_internal+0x29c>)
 800d8be:	f240 32a3 	movw	r2, #931	; 0x3a3
 800d8c2:	499c      	ldr	r1, [pc, #624]	; (800db34 <lwip_netconn_do_close_internal+0x2a8>)
 800d8c4:	489a      	ldr	r0, [pc, #616]	; (800db30 <lwip_netconn_do_close_internal+0x2a4>)
 800d8c6:	f00d fa8f 	bl	801ade8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	785b      	ldrb	r3, [r3, #1]
 800d8ce:	2b04      	cmp	r3, #4
 800d8d0:	d006      	beq.n	800d8e0 <lwip_netconn_do_close_internal+0x54>
 800d8d2:	4b95      	ldr	r3, [pc, #596]	; (800db28 <lwip_netconn_do_close_internal+0x29c>)
 800d8d4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800d8d8:	4997      	ldr	r1, [pc, #604]	; (800db38 <lwip_netconn_do_close_internal+0x2ac>)
 800d8da:	4895      	ldr	r0, [pc, #596]	; (800db30 <lwip_netconn_do_close_internal+0x2a4>)
 800d8dc:	f00d fa84 	bl	801ade8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d106      	bne.n	800d8f6 <lwip_netconn_do_close_internal+0x6a>
 800d8e8:	4b8f      	ldr	r3, [pc, #572]	; (800db28 <lwip_netconn_do_close_internal+0x29c>)
 800d8ea:	f240 32a5 	movw	r2, #933	; 0x3a5
 800d8ee:	4993      	ldr	r1, [pc, #588]	; (800db3c <lwip_netconn_do_close_internal+0x2b0>)
 800d8f0:	488f      	ldr	r0, [pc, #572]	; (800db30 <lwip_netconn_do_close_internal+0x2a4>)
 800d8f2:	f00d fa79 	bl	801ade8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6a1b      	ldr	r3, [r3, #32]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d106      	bne.n	800d90c <lwip_netconn_do_close_internal+0x80>
 800d8fe:	4b8a      	ldr	r3, [pc, #552]	; (800db28 <lwip_netconn_do_close_internal+0x29c>)
 800d900:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d904:	498e      	ldr	r1, [pc, #568]	; (800db40 <lwip_netconn_do_close_internal+0x2b4>)
 800d906:	488a      	ldr	r0, [pc, #552]	; (800db30 <lwip_netconn_do_close_internal+0x2a4>)
 800d908:	f00d fa6e 	bl	801ade8 <iprintf>

  tpcb = conn->pcb.tcp;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6a1b      	ldr	r3, [r3, #32]
 800d916:	7a1b      	ldrb	r3, [r3, #8]
 800d918:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800d91a:	7bfb      	ldrb	r3, [r7, #15]
 800d91c:	f003 0301 	and.w	r3, r3, #1
 800d920:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800d922:	7bfb      	ldrb	r3, [r7, #15]
 800d924:	f003 0302 	and.w	r3, r3, #2
 800d928:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800d92a:	7bfb      	ldrb	r3, [r7, #15]
 800d92c:	2b03      	cmp	r3, #3
 800d92e:	d102      	bne.n	800d936 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800d930:	2301      	movs	r3, #1
 800d932:	75bb      	strb	r3, [r7, #22]
 800d934:	e01f      	b.n	800d976 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800d936:	7bbb      	ldrb	r3, [r7, #14]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d00e      	beq.n	800d95a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800d940:	2b05      	cmp	r3, #5
 800d942:	d007      	beq.n	800d954 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800d948:	2b06      	cmp	r3, #6
 800d94a:	d003      	beq.n	800d954 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800d94c:	693b      	ldr	r3, [r7, #16]
 800d94e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800d950:	2b08      	cmp	r3, #8
 800d952:	d102      	bne.n	800d95a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800d954:	2301      	movs	r3, #1
 800d956:	75bb      	strb	r3, [r7, #22]
 800d958:	e00d      	b.n	800d976 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800d95a:	7b7b      	ldrb	r3, [r7, #13]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d008      	beq.n	800d972 <lwip_netconn_do_close_internal+0xe6>
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	8b5b      	ldrh	r3, [r3, #26]
 800d964:	f003 0310 	and.w	r3, r3, #16
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d002      	beq.n	800d972 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800d96c:	2301      	movs	r3, #1
 800d96e:	75bb      	strb	r3, [r7, #22]
 800d970:	e001      	b.n	800d976 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800d972:	2300      	movs	r3, #0
 800d974:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800d976:	7dbb      	ldrb	r3, [r7, #22]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d003      	beq.n	800d984 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800d97c:	2100      	movs	r1, #0
 800d97e:	6938      	ldr	r0, [r7, #16]
 800d980:	f004 fa0a 	bl	8011d98 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	7d1b      	ldrb	r3, [r3, #20]
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d104      	bne.n	800d996 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800d98c:	2100      	movs	r1, #0
 800d98e:	6938      	ldr	r0, [r7, #16]
 800d990:	f004 fa7a 	bl	8011e88 <tcp_accept>
 800d994:	e01d      	b.n	800d9d2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800d996:	7bbb      	ldrb	r3, [r7, #14]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d007      	beq.n	800d9ac <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800d99c:	2100      	movs	r1, #0
 800d99e:	6938      	ldr	r0, [r7, #16]
 800d9a0:	f004 fa0c 	bl	8011dbc <tcp_recv>
      tcp_accept(tpcb, NULL);
 800d9a4:	2100      	movs	r1, #0
 800d9a6:	6938      	ldr	r0, [r7, #16]
 800d9a8:	f004 fa6e 	bl	8011e88 <tcp_accept>
    }
    if (shut_tx) {
 800d9ac:	7b7b      	ldrb	r3, [r7, #13]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d003      	beq.n	800d9ba <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800d9b2:	2100      	movs	r1, #0
 800d9b4:	6938      	ldr	r0, [r7, #16]
 800d9b6:	f004 fa23 	bl	8011e00 <tcp_sent>
    }
    if (shut_close) {
 800d9ba:	7dbb      	ldrb	r3, [r7, #22]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d008      	beq.n	800d9d2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	2100      	movs	r1, #0
 800d9c4:	6938      	ldr	r0, [r7, #16]
 800d9c6:	f004 fa77 	bl	8011eb8 <tcp_poll>
      tcp_err(tpcb, NULL);
 800d9ca:	2100      	movs	r1, #0
 800d9cc:	6938      	ldr	r0, [r7, #16]
 800d9ce:	f004 fa39 	bl	8011e44 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800d9d2:	7dbb      	ldrb	r3, [r7, #22]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d005      	beq.n	800d9e4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800d9d8:	6938      	ldr	r0, [r7, #16]
 800d9da:	f003 f859 	bl	8010a90 <tcp_close>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	75fb      	strb	r3, [r7, #23]
 800d9e2:	e007      	b.n	800d9f4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800d9e4:	7bbb      	ldrb	r3, [r7, #14]
 800d9e6:	7b7a      	ldrb	r2, [r7, #13]
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	6938      	ldr	r0, [r7, #16]
 800d9ec:	f003 f87c 	bl	8010ae8 <tcp_shutdown>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800d9f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d102      	bne.n	800da02 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	757b      	strb	r3, [r7, #21]
 800da00:	e016      	b.n	800da30 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800da02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da0a:	d10f      	bne.n	800da2c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6a1b      	ldr	r3, [r3, #32]
 800da10:	7a5b      	ldrb	r3, [r3, #9]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d10c      	bne.n	800da30 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800da16:	2301      	movs	r3, #1
 800da18:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800da1a:	7dbb      	ldrb	r3, [r7, #22]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d007      	beq.n	800da30 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800da20:	6938      	ldr	r0, [r7, #16]
 800da22:	f003 f979 	bl	8010d18 <tcp_abort>
          err = ERR_OK;
 800da26:	2300      	movs	r3, #0
 800da28:	75fb      	strb	r3, [r7, #23]
 800da2a:	e001      	b.n	800da30 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800da2c:	2301      	movs	r3, #1
 800da2e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800da30:	7d7b      	ldrb	r3, [r7, #21]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d044      	beq.n	800dac0 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6a1b      	ldr	r3, [r3, #32]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	330c      	adds	r3, #12
 800da3e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6a1b      	ldr	r3, [r3, #32]
 800da44:	7dfa      	ldrb	r2, [r7, #23]
 800da46:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2200      	movs	r2, #0
 800da4c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2200      	movs	r2, #0
 800da52:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800da54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d129      	bne.n	800dab0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800da5c:	7dbb      	ldrb	r3, [r7, #22]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d00c      	beq.n	800da7c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2200      	movs	r2, #0
 800da66:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d005      	beq.n	800da7c <lwip_netconn_do_close_internal+0x1f0>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da74:	2200      	movs	r2, #0
 800da76:	2104      	movs	r1, #4
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	4798      	blx	r3
      }
      if (shut_rx) {
 800da7c:	7bbb      	ldrb	r3, [r7, #14]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d009      	beq.n	800da96 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da86:	2b00      	cmp	r3, #0
 800da88:	d005      	beq.n	800da96 <lwip_netconn_do_close_internal+0x20a>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da8e:	2200      	movs	r2, #0
 800da90:	2100      	movs	r1, #0
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	4798      	blx	r3
      }
      if (shut_tx) {
 800da96:	7b7b      	ldrb	r3, [r7, #13]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d009      	beq.n	800dab0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d005      	beq.n	800dab0 <lwip_netconn_do_close_internal+0x224>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa8:	2200      	movs	r2, #0
 800daaa:	2102      	movs	r1, #2
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800dab0:	78fb      	ldrb	r3, [r7, #3]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d002      	beq.n	800dabc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800dab6:	68b8      	ldr	r0, [r7, #8]
 800dab8:	f00c f8c8 	bl	8019c4c <sys_sem_signal>
    }
    return ERR_OK;
 800dabc:	2300      	movs	r3, #0
 800dabe:	e02e      	b.n	800db1e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800dac0:	7d7b      	ldrb	r3, [r7, #21]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d11e      	bne.n	800db04 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	7d1b      	ldrb	r3, [r3, #20]
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d106      	bne.n	800dadc <lwip_netconn_do_close_internal+0x250>
 800dace:	4b16      	ldr	r3, [pc, #88]	; (800db28 <lwip_netconn_do_close_internal+0x29c>)
 800dad0:	f240 4241 	movw	r2, #1089	; 0x441
 800dad4:	491b      	ldr	r1, [pc, #108]	; (800db44 <lwip_netconn_do_close_internal+0x2b8>)
 800dad6:	4816      	ldr	r0, [pc, #88]	; (800db30 <lwip_netconn_do_close_internal+0x2a4>)
 800dad8:	f00d f986 	bl	801ade8 <iprintf>
    if (shut_tx) {
 800dadc:	7b7b      	ldrb	r3, [r7, #13]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d003      	beq.n	800daea <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800dae2:	4919      	ldr	r1, [pc, #100]	; (800db48 <lwip_netconn_do_close_internal+0x2bc>)
 800dae4:	6938      	ldr	r0, [r7, #16]
 800dae6:	f004 f98b 	bl	8011e00 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800daea:	2201      	movs	r2, #1
 800daec:	4917      	ldr	r1, [pc, #92]	; (800db4c <lwip_netconn_do_close_internal+0x2c0>)
 800daee:	6938      	ldr	r0, [r7, #16]
 800daf0:	f004 f9e2 	bl	8011eb8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800daf4:	4916      	ldr	r1, [pc, #88]	; (800db50 <lwip_netconn_do_close_internal+0x2c4>)
 800daf6:	6938      	ldr	r0, [r7, #16]
 800daf8:	f004 f9a4 	bl	8011e44 <tcp_err>
    tcp_arg(tpcb, conn);
 800dafc:	6879      	ldr	r1, [r7, #4]
 800dafe:	6938      	ldr	r0, [r7, #16]
 800db00:	f004 f94a 	bl	8011d98 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800db04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d106      	bne.n	800db1a <lwip_netconn_do_close_internal+0x28e>
 800db0c:	4b06      	ldr	r3, [pc, #24]	; (800db28 <lwip_netconn_do_close_internal+0x29c>)
 800db0e:	f240 424d 	movw	r2, #1101	; 0x44d
 800db12:	4910      	ldr	r1, [pc, #64]	; (800db54 <lwip_netconn_do_close_internal+0x2c8>)
 800db14:	4806      	ldr	r0, [pc, #24]	; (800db30 <lwip_netconn_do_close_internal+0x2a4>)
 800db16:	f00d f967 	bl	801ade8 <iprintf>
  return err;
 800db1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3718      	adds	r7, #24
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	0801fc58 	.word	0x0801fc58
 800db2c:	0801ff2c 	.word	0x0801ff2c
 800db30:	0801fc9c 	.word	0x0801fc9c
 800db34:	0801ff3c 	.word	0x0801ff3c
 800db38:	0801ff5c 	.word	0x0801ff5c
 800db3c:	0801ff80 	.word	0x0801ff80
 800db40:	0801fdc0 	.word	0x0801fdc0
 800db44:	0801ff94 	.word	0x0801ff94
 800db48:	0800d27d 	.word	0x0800d27d
 800db4c:	0800d1b5 	.word	0x0800d1b5
 800db50:	0800d325 	.word	0x0800d325
 800db54:	0801ffb8 	.word	0x0801ffb8

0800db58 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b084      	sub	sp, #16
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	785b      	ldrb	r3, [r3, #1]
 800db6a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800db6c:	7afb      	ldrb	r3, [r7, #11]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d00d      	beq.n	800db8e <lwip_netconn_do_delconn+0x36>
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db7c:	2b10      	cmp	r3, #16
 800db7e:	d006      	beq.n	800db8e <lwip_netconn_do_delconn+0x36>
 800db80:	4b60      	ldr	r3, [pc, #384]	; (800dd04 <lwip_netconn_do_delconn+0x1ac>)
 800db82:	f240 425f 	movw	r2, #1119	; 0x45f
 800db86:	4960      	ldr	r1, [pc, #384]	; (800dd08 <lwip_netconn_do_delconn+0x1b0>)
 800db88:	4860      	ldr	r0, [pc, #384]	; (800dd0c <lwip_netconn_do_delconn+0x1b4>)
 800db8a:	f00d f92d 	bl	801ade8 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800db8e:	7afb      	ldrb	r3, [r7, #11]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d005      	beq.n	800dba0 <lwip_netconn_do_delconn+0x48>
 800db94:	7afb      	ldrb	r3, [r7, #11]
 800db96:	2b02      	cmp	r3, #2
 800db98:	d002      	beq.n	800dba0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800db9a:	7afb      	ldrb	r3, [r7, #11]
 800db9c:	2b03      	cmp	r3, #3
 800db9e:	d109      	bne.n	800dbb4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800dba0:	7afb      	ldrb	r3, [r7, #11]
 800dba2:	2b03      	cmp	r3, #3
 800dba4:	d10a      	bne.n	800dbbc <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	7f1b      	ldrb	r3, [r3, #28]
 800dbac:	f003 0304 	and.w	r3, r3, #4
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d103      	bne.n	800dbbc <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	22fb      	movs	r2, #251	; 0xfb
 800dbb8:	711a      	strb	r2, [r3, #4]
 800dbba:	e097      	b.n	800dcec <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800dbbc:	7afb      	ldrb	r3, [r7, #11]
 800dbbe:	2b03      	cmp	r3, #3
 800dbc0:	d10d      	bne.n	800dbde <lwip_netconn_do_delconn+0x86>
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	7f1b      	ldrb	r3, [r3, #28]
 800dbc8:	f003 0304 	and.w	r3, r3, #4
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d106      	bne.n	800dbde <lwip_netconn_do_delconn+0x86>
 800dbd0:	4b4c      	ldr	r3, [pc, #304]	; (800dd04 <lwip_netconn_do_delconn+0x1ac>)
 800dbd2:	f240 427b 	movw	r2, #1147	; 0x47b
 800dbd6:	494e      	ldr	r1, [pc, #312]	; (800dd10 <lwip_netconn_do_delconn+0x1b8>)
 800dbd8:	484c      	ldr	r0, [pc, #304]	; (800dd0c <lwip_netconn_do_delconn+0x1b4>)
 800dbda:	f00d f905 	bl	801ade8 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f7ff fdd1 	bl	800d790 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	685b      	ldr	r3, [r3, #4]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d05f      	beq.n	800dcb8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc02:	2b10      	cmp	r3, #16
 800dc04:	d00e      	beq.n	800dc24 <lwip_netconn_do_delconn+0xcc>
 800dc06:	2b20      	cmp	r3, #32
 800dc08:	d000      	beq.n	800dc0c <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 800dc0a:	e051      	b.n	800dcb0 <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	2200      	movs	r2, #0
 800dc14:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	685b      	ldr	r3, [r3, #4]
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f009 fba5 	bl	801736c <udp_remove>
          break;
 800dc22:	e045      	b.n	800dcb0 <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	6a1b      	ldr	r3, [r3, #32]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d006      	beq.n	800dc3c <lwip_netconn_do_delconn+0xe4>
 800dc2e:	4b35      	ldr	r3, [pc, #212]	; (800dd04 <lwip_netconn_do_delconn+0x1ac>)
 800dc30:	f240 4294 	movw	r2, #1172	; 0x494
 800dc34:	4937      	ldr	r1, [pc, #220]	; (800dd14 <lwip_netconn_do_delconn+0x1bc>)
 800dc36:	4835      	ldr	r0, [pc, #212]	; (800dd0c <lwip_netconn_do_delconn+0x1b4>)
 800dc38:	f00d f8d6 	bl	801ade8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	2204      	movs	r2, #4
 800dc42:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2203      	movs	r2, #3
 800dc48:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	68fa      	ldr	r2, [r7, #12]
 800dc50:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	2100      	movs	r1, #0
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7ff fe17 	bl	800d88c <lwip_netconn_do_close_internal>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d04a      	beq.n	800dcfa <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	785b      	ldrb	r3, [r3, #1]
 800dc6a:	2b04      	cmp	r3, #4
 800dc6c:	d006      	beq.n	800dc7c <lwip_netconn_do_delconn+0x124>
 800dc6e:	4b25      	ldr	r3, [pc, #148]	; (800dd04 <lwip_netconn_do_delconn+0x1ac>)
 800dc70:	f240 429a 	movw	r2, #1178	; 0x49a
 800dc74:	4928      	ldr	r1, [pc, #160]	; (800dd18 <lwip_netconn_do_delconn+0x1c0>)
 800dc76:	4825      	ldr	r0, [pc, #148]	; (800dd0c <lwip_netconn_do_delconn+0x1b4>)
 800dc78:	f00d f8b6 	bl	801ade8 <iprintf>
            UNLOCK_TCPIP_CORE();
 800dc7c:	4827      	ldr	r0, [pc, #156]	; (800dd1c <lwip_netconn_do_delconn+0x1c4>)
 800dc7e:	f00c f856 	bl	8019d2e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	330c      	adds	r3, #12
 800dc88:	2100      	movs	r1, #0
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f00b ffad 	bl	8019bea <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800dc90:	4822      	ldr	r0, [pc, #136]	; (800dd1c <lwip_netconn_do_delconn+0x1c4>)
 800dc92:	f00c f83d 	bl	8019d10 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	785b      	ldrb	r3, [r3, #1]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d02c      	beq.n	800dcfa <lwip_netconn_do_delconn+0x1a2>
 800dca0:	4b18      	ldr	r3, [pc, #96]	; (800dd04 <lwip_netconn_do_delconn+0x1ac>)
 800dca2:	f240 429e 	movw	r2, #1182	; 0x49e
 800dca6:	491c      	ldr	r1, [pc, #112]	; (800dd18 <lwip_netconn_do_delconn+0x1c0>)
 800dca8:	4818      	ldr	r0, [pc, #96]	; (800dd0c <lwip_netconn_do_delconn+0x1b4>)
 800dcaa:	f00d f89d 	bl	801ade8 <iprintf>
          return;
 800dcae:	e024      	b.n	800dcfa <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d007      	beq.n	800dcd2 <lwip_netconn_do_delconn+0x17a>
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc8:	68fa      	ldr	r2, [r7, #12]
 800dcca:	6810      	ldr	r0, [r2, #0]
 800dccc:	2200      	movs	r2, #0
 800dcce:	2100      	movs	r1, #0
 800dcd0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d007      	beq.n	800dcec <lwip_netconn_do_delconn+0x194>
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dce2:	68fa      	ldr	r2, [r7, #12]
 800dce4:	6810      	ldr	r0, [r2, #0]
 800dce6:	2200      	movs	r2, #0
 800dce8:	2102      	movs	r1, #2
 800dcea:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	330c      	adds	r3, #12
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f00b ffc4 	bl	8019c80 <sys_sem_valid>
 800dcf8:	e000      	b.n	800dcfc <lwip_netconn_do_delconn+0x1a4>
          return;
 800dcfa:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800dcfc:	3710      	adds	r7, #16
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop
 800dd04:	0801fc58 	.word	0x0801fc58
 800dd08:	0801ffc8 	.word	0x0801ffc8
 800dd0c:	0801fc9c 	.word	0x0801fc9c
 800dd10:	0801ffdc 	.word	0x0801ffdc
 800dd14:	0801fffc 	.word	0x0801fffc
 800dd18:	08020018 	.word	0x08020018
 800dd1c:	20004584 	.word	0x20004584

0800dd20 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b088      	sub	sp, #32
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	60f8      	str	r0, [r7, #12]
 800dd28:	60b9      	str	r1, [r7, #8]
 800dd2a:	4613      	mov	r3, r2
 800dd2c:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800dd36:	69bb      	ldr	r3, [r7, #24]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d102      	bne.n	800dd42 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800dd3c:	f06f 0305 	mvn.w	r3, #5
 800dd40:	e070      	b.n	800de24 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800dd42:	69bb      	ldr	r3, [r7, #24]
 800dd44:	785b      	ldrb	r3, [r3, #1]
 800dd46:	2b03      	cmp	r3, #3
 800dd48:	d006      	beq.n	800dd58 <lwip_netconn_do_connected+0x38>
 800dd4a:	4b38      	ldr	r3, [pc, #224]	; (800de2c <lwip_netconn_do_connected+0x10c>)
 800dd4c:	f240 5223 	movw	r2, #1315	; 0x523
 800dd50:	4937      	ldr	r1, [pc, #220]	; (800de30 <lwip_netconn_do_connected+0x110>)
 800dd52:	4838      	ldr	r0, [pc, #224]	; (800de34 <lwip_netconn_do_connected+0x114>)
 800dd54:	f00d f848 	bl	801ade8 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800dd58:	69bb      	ldr	r3, [r7, #24]
 800dd5a:	6a1b      	ldr	r3, [r3, #32]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d10c      	bne.n	800dd7a <lwip_netconn_do_connected+0x5a>
 800dd60:	69bb      	ldr	r3, [r7, #24]
 800dd62:	7f1b      	ldrb	r3, [r3, #28]
 800dd64:	f003 0304 	and.w	r3, r3, #4
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d106      	bne.n	800dd7a <lwip_netconn_do_connected+0x5a>
 800dd6c:	4b2f      	ldr	r3, [pc, #188]	; (800de2c <lwip_netconn_do_connected+0x10c>)
 800dd6e:	f240 5225 	movw	r2, #1317	; 0x525
 800dd72:	4931      	ldr	r1, [pc, #196]	; (800de38 <lwip_netconn_do_connected+0x118>)
 800dd74:	482f      	ldr	r0, [pc, #188]	; (800de34 <lwip_netconn_do_connected+0x114>)
 800dd76:	f00d f837 	bl	801ade8 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800dd7a:	69bb      	ldr	r3, [r7, #24]
 800dd7c:	6a1b      	ldr	r3, [r3, #32]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d008      	beq.n	800dd94 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800dd82:	69bb      	ldr	r3, [r7, #24]
 800dd84:	6a1b      	ldr	r3, [r3, #32]
 800dd86:	79fa      	ldrb	r2, [r7, #7]
 800dd88:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800dd8a:	69bb      	ldr	r3, [r7, #24]
 800dd8c:	6a1b      	ldr	r3, [r3, #32]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	330c      	adds	r3, #12
 800dd92:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800dd94:	69bb      	ldr	r3, [r7, #24]
 800dd96:	781b      	ldrb	r3, [r3, #0]
 800dd98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd9c:	2b10      	cmp	r3, #16
 800dd9e:	d106      	bne.n	800ddae <lwip_netconn_do_connected+0x8e>
 800dda0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d102      	bne.n	800ddae <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800dda8:	69b8      	ldr	r0, [r7, #24]
 800ddaa:	f7ff fb91 	bl	800d4d0 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800ddae:	69bb      	ldr	r3, [r7, #24]
 800ddb0:	7f1b      	ldrb	r3, [r3, #28]
 800ddb2:	f003 0304 	and.w	r3, r3, #4
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	bf0c      	ite	eq
 800ddba:	2301      	moveq	r3, #1
 800ddbc:	2300      	movne	r3, #0
 800ddbe:	b2db      	uxtb	r3, r3
 800ddc0:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800ddc2:	69bb      	ldr	r3, [r7, #24]
 800ddc4:	7f1b      	ldrb	r3, [r3, #28]
 800ddc6:	f023 0304 	bic.w	r3, r3, #4
 800ddca:	b2da      	uxtb	r2, r3
 800ddcc:	69bb      	ldr	r3, [r7, #24]
 800ddce:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800ddd0:	697b      	ldr	r3, [r7, #20]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d002      	beq.n	800dddc <lwip_netconn_do_connected+0xbc>
 800ddd6:	69fb      	ldr	r3, [r7, #28]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d10c      	bne.n	800ddf6 <lwip_netconn_do_connected+0xd6>
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d102      	bne.n	800dde8 <lwip_netconn_do_connected+0xc8>
 800dde2:	69fb      	ldr	r3, [r7, #28]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d006      	beq.n	800ddf6 <lwip_netconn_do_connected+0xd6>
 800dde8:	4b10      	ldr	r3, [pc, #64]	; (800de2c <lwip_netconn_do_connected+0x10c>)
 800ddea:	f240 5232 	movw	r2, #1330	; 0x532
 800ddee:	4913      	ldr	r1, [pc, #76]	; (800de3c <lwip_netconn_do_connected+0x11c>)
 800ddf0:	4810      	ldr	r0, [pc, #64]	; (800de34 <lwip_netconn_do_connected+0x114>)
 800ddf2:	f00c fff9 	bl	801ade8 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800ddf6:	69bb      	ldr	r3, [r7, #24]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800ddfc:	69bb      	ldr	r3, [r7, #24]
 800ddfe:	2200      	movs	r2, #0
 800de00:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800de02:	69bb      	ldr	r3, [r7, #24]
 800de04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de06:	2b00      	cmp	r3, #0
 800de08:	d005      	beq.n	800de16 <lwip_netconn_do_connected+0xf6>
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de0e:	2200      	movs	r2, #0
 800de10:	2102      	movs	r1, #2
 800de12:	69b8      	ldr	r0, [r7, #24]
 800de14:	4798      	blx	r3

  if (was_blocking) {
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d002      	beq.n	800de22 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800de1c:	69f8      	ldr	r0, [r7, #28]
 800de1e:	f00b ff15 	bl	8019c4c <sys_sem_signal>
  }
  return ERR_OK;
 800de22:	2300      	movs	r3, #0
}
 800de24:	4618      	mov	r0, r3
 800de26:	3720      	adds	r7, #32
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	0801fc58 	.word	0x0801fc58
 800de30:	08020020 	.word	0x08020020
 800de34:	0801fc9c 	.word	0x0801fc9c
 800de38:	08020040 	.word	0x08020040
 800de3c:	08020080 	.word	0x08020080

0800de40 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b086      	sub	sp, #24
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d102      	bne.n	800de5c <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800de56:	23f1      	movs	r3, #241	; 0xf1
 800de58:	75fb      	strb	r3, [r7, #23]
 800de5a:	e09b      	b.n	800df94 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800de66:	2b10      	cmp	r3, #16
 800de68:	d00f      	beq.n	800de8a <lwip_netconn_do_connect+0x4a>
 800de6a:	2b20      	cmp	r3, #32
 800de6c:	f040 8087 	bne.w	800df7e <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	6858      	ldr	r0, [r3, #4]
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	6899      	ldr	r1, [r3, #8]
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	899b      	ldrh	r3, [r3, #12]
 800de7e:	461a      	mov	r2, r3
 800de80:	f009 f9e6 	bl	8017250 <udp_connect>
 800de84:	4603      	mov	r3, r0
 800de86:	75fb      	strb	r3, [r7, #23]
        break;
 800de88:	e084      	b.n	800df94 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	785b      	ldrb	r3, [r3, #1]
 800de90:	2b03      	cmp	r3, #3
 800de92:	d102      	bne.n	800de9a <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800de94:	23f7      	movs	r3, #247	; 0xf7
 800de96:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800de98:	e07b      	b.n	800df92 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800de9a:	693b      	ldr	r3, [r7, #16]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	785b      	ldrb	r3, [r3, #1]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d002      	beq.n	800deaa <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800dea4:	23f6      	movs	r3, #246	; 0xf6
 800dea6:	75fb      	strb	r3, [r7, #23]
        break;
 800dea8:	e073      	b.n	800df92 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	4618      	mov	r0, r3
 800deb0:	f7ff fb0e 	bl	800d4d0 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	6858      	ldr	r0, [r3, #4]
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	6899      	ldr	r1, [r3, #8]
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	899a      	ldrh	r2, [r3, #12]
 800dec2:	4b38      	ldr	r3, [pc, #224]	; (800dfa4 <lwip_netconn_do_connect+0x164>)
 800dec4:	f003 f824 	bl	8010f10 <tcp_connect>
 800dec8:	4603      	mov	r3, r0
 800deca:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800decc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d15e      	bne.n	800df92 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	7f1b      	ldrb	r3, [r3, #28]
 800deda:	f003 0302 	and.w	r3, r3, #2
 800dede:	2b00      	cmp	r3, #0
 800dee0:	bf14      	ite	ne
 800dee2:	2301      	movne	r3, #1
 800dee4:	2300      	moveq	r3, #0
 800dee6:	b2db      	uxtb	r3, r3
 800dee8:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	2203      	movs	r2, #3
 800def0:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800def2:	7bfb      	ldrb	r3, [r7, #15]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d009      	beq.n	800df0c <lwip_netconn_do_connect+0xcc>
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	7f1a      	ldrb	r2, [r3, #28]
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f042 0204 	orr.w	r2, r2, #4
 800df06:	b2d2      	uxtb	r2, r2
 800df08:	771a      	strb	r2, [r3, #28]
 800df0a:	e008      	b.n	800df1e <lwip_netconn_do_connect+0xde>
 800df0c:	693b      	ldr	r3, [r7, #16]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	7f1a      	ldrb	r2, [r3, #28]
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	f022 0204 	bic.w	r2, r2, #4
 800df1a:	b2d2      	uxtb	r2, r2
 800df1c:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800df1e:	7bfb      	ldrb	r3, [r7, #15]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d002      	beq.n	800df2a <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800df24:	23fb      	movs	r3, #251	; 0xfb
 800df26:	75fb      	strb	r3, [r7, #23]
        break;
 800df28:	e033      	b.n	800df92 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	693a      	ldr	r2, [r7, #16]
 800df30:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	785b      	ldrb	r3, [r3, #1]
 800df38:	2b03      	cmp	r3, #3
 800df3a:	d006      	beq.n	800df4a <lwip_netconn_do_connect+0x10a>
 800df3c:	4b1a      	ldr	r3, [pc, #104]	; (800dfa8 <lwip_netconn_do_connect+0x168>)
 800df3e:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800df42:	491a      	ldr	r1, [pc, #104]	; (800dfac <lwip_netconn_do_connect+0x16c>)
 800df44:	481a      	ldr	r0, [pc, #104]	; (800dfb0 <lwip_netconn_do_connect+0x170>)
 800df46:	f00c ff4f 	bl	801ade8 <iprintf>
              UNLOCK_TCPIP_CORE();
 800df4a:	481a      	ldr	r0, [pc, #104]	; (800dfb4 <lwip_netconn_do_connect+0x174>)
 800df4c:	f00b feef 	bl	8019d2e <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	330c      	adds	r3, #12
 800df56:	2100      	movs	r1, #0
 800df58:	4618      	mov	r0, r3
 800df5a:	f00b fe46 	bl	8019bea <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800df5e:	4815      	ldr	r0, [pc, #84]	; (800dfb4 <lwip_netconn_do_connect+0x174>)
 800df60:	f00b fed6 	bl	8019d10 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	785b      	ldrb	r3, [r3, #1]
 800df6a:	2b03      	cmp	r3, #3
 800df6c:	d116      	bne.n	800df9c <lwip_netconn_do_connect+0x15c>
 800df6e:	4b0e      	ldr	r3, [pc, #56]	; (800dfa8 <lwip_netconn_do_connect+0x168>)
 800df70:	f240 5274 	movw	r2, #1396	; 0x574
 800df74:	490d      	ldr	r1, [pc, #52]	; (800dfac <lwip_netconn_do_connect+0x16c>)
 800df76:	480e      	ldr	r0, [pc, #56]	; (800dfb0 <lwip_netconn_do_connect+0x170>)
 800df78:	f00c ff36 	bl	801ade8 <iprintf>
              return;
 800df7c:	e00e      	b.n	800df9c <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800df7e:	4b0a      	ldr	r3, [pc, #40]	; (800dfa8 <lwip_netconn_do_connect+0x168>)
 800df80:	f240 527f 	movw	r2, #1407	; 0x57f
 800df84:	490c      	ldr	r1, [pc, #48]	; (800dfb8 <lwip_netconn_do_connect+0x178>)
 800df86:	480a      	ldr	r0, [pc, #40]	; (800dfb0 <lwip_netconn_do_connect+0x170>)
 800df88:	f00c ff2e 	bl	801ade8 <iprintf>
 800df8c:	23fa      	movs	r3, #250	; 0xfa
 800df8e:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800df90:	e000      	b.n	800df94 <lwip_netconn_do_connect+0x154>
        break;
 800df92:	bf00      	nop
    }
  }
  msg->err = err;
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	7dfa      	ldrb	r2, [r7, #23]
 800df98:	711a      	strb	r2, [r3, #4]
 800df9a:	e000      	b.n	800df9e <lwip_netconn_do_connect+0x15e>
              return;
 800df9c:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800df9e:	3718      	adds	r7, #24
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}
 800dfa4:	0800dd21 	.word	0x0800dd21
 800dfa8:	0801fc58 	.word	0x0801fc58
 800dfac:	08020018 	.word	0x08020018
 800dfb0:	0801fc9c 	.word	0x0801fc9c
 800dfb4:	20004584 	.word	0x20004584
 800dfb8:	080200a0 	.word	0x080200a0

0800dfbc <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b084      	sub	sp, #16
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f7fe ff66 	bl	800ce9e <netconn_err>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800dfd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d135      	bne.n	800e04a <lwip_netconn_do_send+0x8e>
    if (msg->conn->pcb.tcp != NULL) {
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d02e      	beq.n	800e046 <lwip_netconn_do_send+0x8a>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dff2:	2b20      	cmp	r3, #32
 800dff4:	d123      	bne.n	800e03e <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	689b      	ldr	r3, [r3, #8]
 800dffa:	689b      	ldr	r3, [r3, #8]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d10c      	bne.n	800e01a <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	685a      	ldr	r2, [r3, #4]
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	689b      	ldr	r3, [r3, #8]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	4619      	mov	r1, r3
 800e00e:	4610      	mov	r0, r2
 800e010:	f008 feac 	bl	8016d6c <udp_send>
 800e014:	4603      	mov	r3, r0
 800e016:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800e018:	e017      	b.n	800e04a <lwip_netconn_do_send+0x8e>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	6858      	ldr	r0, [r3, #4]
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	689b      	ldr	r3, [r3, #8]
 800e024:	6819      	ldr	r1, [r3, #0]
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	689b      	ldr	r3, [r3, #8]
 800e02a:	f103 0208 	add.w	r2, r3, #8
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	689b      	ldr	r3, [r3, #8]
 800e032:	899b      	ldrh	r3, [r3, #12]
 800e034:	f008 fece 	bl	8016dd4 <udp_sendto>
 800e038:	4603      	mov	r3, r0
 800e03a:	73fb      	strb	r3, [r7, #15]
          break;
 800e03c:	e005      	b.n	800e04a <lwip_netconn_do_send+0x8e>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800e03e:	23f5      	movs	r3, #245	; 0xf5
 800e040:	73fb      	strb	r3, [r7, #15]
          break;
 800e042:	bf00      	nop
 800e044:	e001      	b.n	800e04a <lwip_netconn_do_send+0x8e>
      }
    } else {
      err = ERR_CONN;
 800e046:	23f5      	movs	r3, #245	; 0xf5
 800e048:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	7bfa      	ldrb	r2, [r7, #15]
 800e04e:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800e050:	bf00      	nop
 800e052:	3710      	adds	r7, #16
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}

0800e058 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b086      	sub	sp, #24
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	2200      	movs	r2, #0
 800e068:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d022      	beq.n	800e0ba <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e074:	693b      	ldr	r3, [r7, #16]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e07e:	2b10      	cmp	r3, #16
 800e080:	d11b      	bne.n	800e0ba <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	689b      	ldr	r3, [r3, #8]
 800e086:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e08e:	d202      	bcs.n	800e096 <lwip_netconn_do_recv+0x3e>
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	b29b      	uxth	r3, r3
 800e094:	e001      	b.n	800e09a <lwip_netconn_do_recv+0x42>
 800e096:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e09a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	685b      	ldr	r3, [r3, #4]
 800e0a2:	89fa      	ldrh	r2, [r7, #14]
 800e0a4:	4611      	mov	r1, r2
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f002 fe9c 	bl	8010de4 <tcp_recved>
        remaining -= recved;
 800e0ac:	89fb      	ldrh	r3, [r7, #14]
 800e0ae:	697a      	ldr	r2, [r7, #20]
 800e0b0:	1ad3      	subs	r3, r2, r3
 800e0b2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d1e6      	bne.n	800e088 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e0ba:	bf00      	nop
 800e0bc:	3718      	adds	r7, #24
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
	...

0800e0c4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b088      	sub	sp, #32
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	460b      	mov	r3, r1
 800e0ce:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d106      	bne.n	800e0e8 <lwip_netconn_do_writemore+0x24>
 800e0da:	4b96      	ldr	r3, [pc, #600]	; (800e334 <lwip_netconn_do_writemore+0x270>)
 800e0dc:	f240 6273 	movw	r2, #1651	; 0x673
 800e0e0:	4995      	ldr	r1, [pc, #596]	; (800e338 <lwip_netconn_do_writemore+0x274>)
 800e0e2:	4896      	ldr	r0, [pc, #600]	; (800e33c <lwip_netconn_do_writemore+0x278>)
 800e0e4:	f00c fe80 	bl	801ade8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	785b      	ldrb	r3, [r3, #1]
 800e0ec:	2b01      	cmp	r3, #1
 800e0ee:	d006      	beq.n	800e0fe <lwip_netconn_do_writemore+0x3a>
 800e0f0:	4b90      	ldr	r3, [pc, #576]	; (800e334 <lwip_netconn_do_writemore+0x270>)
 800e0f2:	f240 6274 	movw	r2, #1652	; 0x674
 800e0f6:	4992      	ldr	r1, [pc, #584]	; (800e340 <lwip_netconn_do_writemore+0x27c>)
 800e0f8:	4890      	ldr	r0, [pc, #576]	; (800e33c <lwip_netconn_do_writemore+0x278>)
 800e0fa:	f00c fe75 	bl	801ade8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6a1b      	ldr	r3, [r3, #32]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d106      	bne.n	800e114 <lwip_netconn_do_writemore+0x50>
 800e106:	4b8b      	ldr	r3, [pc, #556]	; (800e334 <lwip_netconn_do_writemore+0x270>)
 800e108:	f240 6275 	movw	r2, #1653	; 0x675
 800e10c:	498d      	ldr	r1, [pc, #564]	; (800e344 <lwip_netconn_do_writemore+0x280>)
 800e10e:	488b      	ldr	r0, [pc, #556]	; (800e33c <lwip_netconn_do_writemore+0x278>)
 800e110:	f00c fe6a 	bl	801ade8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	685b      	ldr	r3, [r3, #4]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d106      	bne.n	800e12a <lwip_netconn_do_writemore+0x66>
 800e11c:	4b85      	ldr	r3, [pc, #532]	; (800e334 <lwip_netconn_do_writemore+0x270>)
 800e11e:	f240 6276 	movw	r2, #1654	; 0x676
 800e122:	4989      	ldr	r1, [pc, #548]	; (800e348 <lwip_netconn_do_writemore+0x284>)
 800e124:	4885      	ldr	r0, [pc, #532]	; (800e33c <lwip_netconn_do_writemore+0x278>)
 800e126:	f00c fe5f 	bl	801ade8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6a1b      	ldr	r3, [r3, #32]
 800e12e:	699a      	ldr	r2, [r3, #24]
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6a1b      	ldr	r3, [r3, #32]
 800e134:	695b      	ldr	r3, [r3, #20]
 800e136:	429a      	cmp	r2, r3
 800e138:	d306      	bcc.n	800e148 <lwip_netconn_do_writemore+0x84>
 800e13a:	4b7e      	ldr	r3, [pc, #504]	; (800e334 <lwip_netconn_do_writemore+0x270>)
 800e13c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800e140:	4982      	ldr	r1, [pc, #520]	; (800e34c <lwip_netconn_do_writemore+0x288>)
 800e142:	487e      	ldr	r0, [pc, #504]	; (800e33c <lwip_netconn_do_writemore+0x278>)
 800e144:	f00c fe50 	bl	801ade8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6a1b      	ldr	r3, [r3, #32]
 800e14c:	899b      	ldrh	r3, [r3, #12]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d106      	bne.n	800e160 <lwip_netconn_do_writemore+0x9c>
 800e152:	4b78      	ldr	r3, [pc, #480]	; (800e334 <lwip_netconn_do_writemore+0x270>)
 800e154:	f240 6279 	movw	r2, #1657	; 0x679
 800e158:	497d      	ldr	r1, [pc, #500]	; (800e350 <lwip_netconn_do_writemore+0x28c>)
 800e15a:	4878      	ldr	r0, [pc, #480]	; (800e33c <lwip_netconn_do_writemore+0x278>)
 800e15c:	f00c fe44 	bl	801ade8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6a1b      	ldr	r3, [r3, #32]
 800e164:	7f1b      	ldrb	r3, [r3, #28]
 800e166:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	7f1b      	ldrb	r3, [r3, #28]
 800e16c:	f003 0302 	and.w	r3, r3, #2
 800e170:	2b00      	cmp	r3, #0
 800e172:	d104      	bne.n	800e17e <lwip_netconn_do_writemore+0xba>
 800e174:	7ebb      	ldrb	r3, [r7, #26]
 800e176:	f003 0304 	and.w	r3, r3, #4
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d001      	beq.n	800e182 <lwip_netconn_do_writemore+0xbe>
 800e17e:	2301      	movs	r3, #1
 800e180:	e000      	b.n	800e184 <lwip_netconn_do_writemore+0xc0>
 800e182:	2300      	movs	r3, #0
 800e184:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6a1b      	ldr	r3, [r3, #32]
 800e18a:	689b      	ldr	r3, [r3, #8]
 800e18c:	681a      	ldr	r2, [r3, #0]
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6a1b      	ldr	r3, [r3, #32]
 800e192:	691b      	ldr	r3, [r3, #16]
 800e194:	4413      	add	r3, r2
 800e196:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6a1b      	ldr	r3, [r3, #32]
 800e19c:	689b      	ldr	r3, [r3, #8]
 800e19e:	685a      	ldr	r2, [r3, #4]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6a1b      	ldr	r3, [r3, #32]
 800e1a4:	691b      	ldr	r3, [r3, #16]
 800e1a6:	1ad3      	subs	r3, r2, r3
 800e1a8:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1b0:	d307      	bcc.n	800e1c2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800e1b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e1b6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e1b8:	7ebb      	ldrb	r3, [r7, #26]
 800e1ba:	f043 0302 	orr.w	r3, r3, #2
 800e1be:	76bb      	strb	r3, [r7, #26]
 800e1c0:	e001      	b.n	800e1c6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e1ce:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800e1d0:	89fa      	ldrh	r2, [r7, #14]
 800e1d2:	8bbb      	ldrh	r3, [r7, #28]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d216      	bcs.n	800e206 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800e1d8:	89fb      	ldrh	r3, [r7, #14]
 800e1da:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800e1dc:	7e3b      	ldrb	r3, [r7, #24]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d00d      	beq.n	800e1fe <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800e1e2:	8bbb      	ldrh	r3, [r7, #28]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d10e      	bne.n	800e206 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6a1b      	ldr	r3, [r3, #32]
 800e1ec:	699b      	ldr	r3, [r3, #24]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d102      	bne.n	800e1f8 <lwip_netconn_do_writemore+0x134>
 800e1f2:	f06f 0306 	mvn.w	r3, #6
 800e1f6:	e000      	b.n	800e1fa <lwip_netconn_do_writemore+0x136>
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800e1fc:	e07d      	b.n	800e2fa <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800e1fe:	7ebb      	ldrb	r3, [r7, #26]
 800e200:	f043 0302 	orr.w	r3, r3, #2
 800e204:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6a1b      	ldr	r3, [r3, #32]
 800e20a:	691a      	ldr	r2, [r3, #16]
 800e20c:	8bbb      	ldrh	r3, [r7, #28]
 800e20e:	441a      	add	r2, r3
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6a1b      	ldr	r3, [r3, #32]
 800e214:	689b      	ldr	r3, [r3, #8]
 800e216:	685b      	ldr	r3, [r3, #4]
 800e218:	429a      	cmp	r2, r3
 800e21a:	d906      	bls.n	800e22a <lwip_netconn_do_writemore+0x166>
 800e21c:	4b45      	ldr	r3, [pc, #276]	; (800e334 <lwip_netconn_do_writemore+0x270>)
 800e21e:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800e222:	494c      	ldr	r1, [pc, #304]	; (800e354 <lwip_netconn_do_writemore+0x290>)
 800e224:	4845      	ldr	r0, [pc, #276]	; (800e33c <lwip_netconn_do_writemore+0x278>)
 800e226:	f00c fddf 	bl	801ade8 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800e22a:	8bbb      	ldrh	r3, [r7, #28]
 800e22c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e230:	4293      	cmp	r3, r2
 800e232:	d103      	bne.n	800e23c <lwip_netconn_do_writemore+0x178>
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e23a:	d209      	bcs.n	800e250 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800e240:	8bba      	ldrh	r2, [r7, #28]
 800e242:	429a      	cmp	r2, r3
 800e244:	d10b      	bne.n	800e25e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6a1b      	ldr	r3, [r3, #32]
 800e24a:	899b      	ldrh	r3, [r3, #12]
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	d906      	bls.n	800e25e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800e250:	2301      	movs	r3, #1
 800e252:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e254:	7ebb      	ldrb	r3, [r7, #26]
 800e256:	f043 0302 	orr.w	r3, r3, #2
 800e25a:	76bb      	strb	r3, [r7, #26]
 800e25c:	e001      	b.n	800e262 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800e25e:	2300      	movs	r3, #0
 800e260:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6858      	ldr	r0, [r3, #4]
 800e266:	7ebb      	ldrb	r3, [r7, #26]
 800e268:	8bba      	ldrh	r2, [r7, #28]
 800e26a:	6979      	ldr	r1, [r7, #20]
 800e26c:	f006 fcd0 	bl	8014c10 <tcp_write>
 800e270:	4603      	mov	r3, r0
 800e272:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800e274:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d12c      	bne.n	800e2d6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6a1b      	ldr	r3, [r3, #32]
 800e280:	6999      	ldr	r1, [r3, #24]
 800e282:	8bba      	ldrh	r2, [r7, #28]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6a1b      	ldr	r3, [r3, #32]
 800e288:	440a      	add	r2, r1
 800e28a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6a1b      	ldr	r3, [r3, #32]
 800e290:	6919      	ldr	r1, [r3, #16]
 800e292:	8bba      	ldrh	r2, [r7, #28]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	6a1b      	ldr	r3, [r3, #32]
 800e298:	440a      	add	r2, r1
 800e29a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6a1b      	ldr	r3, [r3, #32]
 800e2a0:	691a      	ldr	r2, [r3, #16]
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6a1b      	ldr	r3, [r3, #32]
 800e2a6:	689b      	ldr	r3, [r3, #8]
 800e2a8:	685b      	ldr	r3, [r3, #4]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d113      	bne.n	800e2d6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6a1b      	ldr	r3, [r3, #32]
 800e2b2:	899a      	ldrh	r2, [r3, #12]
 800e2b4:	3a01      	subs	r2, #1
 800e2b6:	b292      	uxth	r2, r2
 800e2b8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6a1b      	ldr	r3, [r3, #32]
 800e2be:	899b      	ldrh	r3, [r3, #12]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d008      	beq.n	800e2d6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6a1b      	ldr	r3, [r3, #32]
 800e2c8:	689a      	ldr	r2, [r3, #8]
 800e2ca:	3208      	adds	r2, #8
 800e2cc:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6a1b      	ldr	r3, [r3, #32]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800e2d6:	7e7b      	ldrb	r3, [r7, #25]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d004      	beq.n	800e2e6 <lwip_netconn_do_writemore+0x222>
 800e2dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	f43f af50 	beq.w	800e186 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800e2e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d004      	beq.n	800e2f8 <lwip_netconn_do_writemore+0x234>
 800e2ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2f6:	d146      	bne.n	800e386 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800e2f8:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800e2fa:	7e3b      	ldrb	r3, [r7, #24]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d02b      	beq.n	800e358 <lwip_netconn_do_writemore+0x294>
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6a1b      	ldr	r3, [r3, #32]
 800e304:	699a      	ldr	r2, [r3, #24]
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6a1b      	ldr	r3, [r3, #32]
 800e30a:	695b      	ldr	r3, [r3, #20]
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d223      	bcs.n	800e358 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e314:	2b00      	cmp	r3, #0
 800e316:	d005      	beq.n	800e324 <lwip_netconn_do_writemore+0x260>
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e31c:	2200      	movs	r2, #0
 800e31e:	2103      	movs	r1, #3
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	7f1b      	ldrb	r3, [r3, #28]
 800e328:	f043 0310 	orr.w	r3, r3, #16
 800e32c:	b2da      	uxtb	r2, r3
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	771a      	strb	r2, [r3, #28]
 800e332:	e028      	b.n	800e386 <lwip_netconn_do_writemore+0x2c2>
 800e334:	0801fc58 	.word	0x0801fc58
 800e338:	0801fdb0 	.word	0x0801fdb0
 800e33c:	0801fc9c 	.word	0x0801fc9c
 800e340:	080200b8 	.word	0x080200b8
 800e344:	0801fdc0 	.word	0x0801fdc0
 800e348:	080200d8 	.word	0x080200d8
 800e34c:	080200f0 	.word	0x080200f0
 800e350:	08020130 	.word	0x08020130
 800e354:	08020158 	.word	0x08020158
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	685b      	ldr	r3, [r3, #4]
 800e35c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e360:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e364:	d305      	bcc.n	800e372 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	685b      	ldr	r3, [r3, #4]
 800e36a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e36e:	2b04      	cmp	r3, #4
 800e370:	d909      	bls.n	800e386 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e376:	2b00      	cmp	r3, #0
 800e378:	d005      	beq.n	800e386 <lwip_netconn_do_writemore+0x2c2>
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e37e:	2200      	movs	r2, #0
 800e380:	2103      	movs	r1, #3
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800e386:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d11d      	bne.n	800e3ca <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6a1b      	ldr	r3, [r3, #32]
 800e392:	699a      	ldr	r2, [r3, #24]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6a1b      	ldr	r3, [r3, #32]
 800e398:	695b      	ldr	r3, [r3, #20]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d002      	beq.n	800e3a4 <lwip_netconn_do_writemore+0x2e0>
 800e39e:	7e3b      	ldrb	r3, [r7, #24]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d001      	beq.n	800e3a8 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	685b      	ldr	r3, [r3, #4]
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f007 fa1b 	bl	80157e8 <tcp_output>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800e3b6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e3ba:	f113 0f04 	cmn.w	r3, #4
 800e3be:	d12c      	bne.n	800e41a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e3c0:	7b3b      	ldrb	r3, [r7, #12]
 800e3c2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	76fb      	strb	r3, [r7, #27]
 800e3c8:	e027      	b.n	800e41a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800e3ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3d2:	d120      	bne.n	800e416 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	685b      	ldr	r3, [r3, #4]
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f007 fa05 	bl	80157e8 <tcp_output>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800e3e2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e3e6:	f113 0f04 	cmn.w	r3, #4
 800e3ea:	d104      	bne.n	800e3f6 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e3ec:	7b7b      	ldrb	r3, [r7, #13]
 800e3ee:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	76fb      	strb	r3, [r7, #27]
 800e3f4:	e011      	b.n	800e41a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800e3f6:	7e3b      	ldrb	r3, [r7, #24]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d00e      	beq.n	800e41a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6a1b      	ldr	r3, [r3, #32]
 800e400:	699b      	ldr	r3, [r3, #24]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d102      	bne.n	800e40c <lwip_netconn_do_writemore+0x348>
 800e406:	f06f 0306 	mvn.w	r3, #6
 800e40a:	e000      	b.n	800e40e <lwip_netconn_do_writemore+0x34a>
 800e40c:	2300      	movs	r3, #0
 800e40e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e410:	2301      	movs	r3, #1
 800e412:	76fb      	strb	r3, [r7, #27]
 800e414:	e001      	b.n	800e41a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800e416:	2301      	movs	r3, #1
 800e418:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800e41a:	7efb      	ldrb	r3, [r7, #27]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d015      	beq.n	800e44c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6a1b      	ldr	r3, [r3, #32]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	330c      	adds	r3, #12
 800e428:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6a1b      	ldr	r3, [r3, #32]
 800e42e:	7ffa      	ldrb	r2, [r7, #31]
 800e430:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2200      	movs	r2, #0
 800e436:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2200      	movs	r2, #0
 800e43c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e43e:	78fb      	ldrb	r3, [r7, #3]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d006      	beq.n	800e452 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800e444:	68b8      	ldr	r0, [r7, #8]
 800e446:	f00b fc01 	bl	8019c4c <sys_sem_signal>
 800e44a:	e002      	b.n	800e452 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800e44c:	f04f 33ff 	mov.w	r3, #4294967295
 800e450:	e000      	b.n	800e454 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800e452:	2300      	movs	r3, #0
}
 800e454:	4618      	mov	r0, r3
 800e456:	3720      	adds	r7, #32
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b084      	sub	sp, #16
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	785b      	ldrb	r3, [r3, #1]
 800e46e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	685b      	ldr	r3, [r3, #4]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d069      	beq.n	800e54e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800e484:	2b10      	cmp	r3, #16
 800e486:	d162      	bne.n	800e54e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e48c:	2b03      	cmp	r3, #3
 800e48e:	d002      	beq.n	800e496 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e490:	7afb      	ldrb	r3, [r7, #11]
 800e492:	2b02      	cmp	r3, #2
 800e494:	d05b      	beq.n	800e54e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800e496:	7afb      	ldrb	r3, [r7, #11]
 800e498:	2b03      	cmp	r3, #3
 800e49a:	d103      	bne.n	800e4a4 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	22f5      	movs	r2, #245	; 0xf5
 800e4a0:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e4a2:	e059      	b.n	800e558 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800e4a4:	7afb      	ldrb	r3, [r7, #11]
 800e4a6:	2b01      	cmp	r3, #1
 800e4a8:	d103      	bne.n	800e4b2 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	22fb      	movs	r2, #251	; 0xfb
 800e4ae:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e4b0:	e052      	b.n	800e558 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	7a1b      	ldrb	r3, [r3, #8]
 800e4b6:	f003 0301 	and.w	r3, r3, #1
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d004      	beq.n	800e4c8 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f7ff f964 	bl	800d790 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	6a1b      	ldr	r3, [r3, #32]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d006      	beq.n	800e4e0 <lwip_netconn_do_close+0x84>
 800e4d2:	4b23      	ldr	r3, [pc, #140]	; (800e560 <lwip_netconn_do_close+0x104>)
 800e4d4:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800e4d8:	4922      	ldr	r1, [pc, #136]	; (800e564 <lwip_netconn_do_close+0x108>)
 800e4da:	4823      	ldr	r0, [pc, #140]	; (800e568 <lwip_netconn_do_close+0x10c>)
 800e4dc:	f00c fc84 	bl	801ade8 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	2204      	movs	r2, #4
 800e4e6:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	68fa      	ldr	r2, [r7, #12]
 800e4ee:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	2100      	movs	r1, #0
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7ff f9c8 	bl	800d88c <lwip_netconn_do_close_internal>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d029      	beq.n	800e556 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	785b      	ldrb	r3, [r3, #1]
 800e508:	2b04      	cmp	r3, #4
 800e50a:	d006      	beq.n	800e51a <lwip_netconn_do_close+0xbe>
 800e50c:	4b14      	ldr	r3, [pc, #80]	; (800e560 <lwip_netconn_do_close+0x104>)
 800e50e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800e512:	4916      	ldr	r1, [pc, #88]	; (800e56c <lwip_netconn_do_close+0x110>)
 800e514:	4814      	ldr	r0, [pc, #80]	; (800e568 <lwip_netconn_do_close+0x10c>)
 800e516:	f00c fc67 	bl	801ade8 <iprintf>
        UNLOCK_TCPIP_CORE();
 800e51a:	4815      	ldr	r0, [pc, #84]	; (800e570 <lwip_netconn_do_close+0x114>)
 800e51c:	f00b fc07 	bl	8019d2e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	330c      	adds	r3, #12
 800e526:	2100      	movs	r1, #0
 800e528:	4618      	mov	r0, r3
 800e52a:	f00b fb5e 	bl	8019bea <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800e52e:	4810      	ldr	r0, [pc, #64]	; (800e570 <lwip_netconn_do_close+0x114>)
 800e530:	f00b fbee 	bl	8019d10 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	785b      	ldrb	r3, [r3, #1]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d00b      	beq.n	800e556 <lwip_netconn_do_close+0xfa>
 800e53e:	4b08      	ldr	r3, [pc, #32]	; (800e560 <lwip_netconn_do_close+0x104>)
 800e540:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800e544:	4909      	ldr	r1, [pc, #36]	; (800e56c <lwip_netconn_do_close+0x110>)
 800e546:	4808      	ldr	r0, [pc, #32]	; (800e568 <lwip_netconn_do_close+0x10c>)
 800e548:	f00c fc4e 	bl	801ade8 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800e54c:	e003      	b.n	800e556 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	22f5      	movs	r2, #245	; 0xf5
 800e552:	711a      	strb	r2, [r3, #4]
 800e554:	e000      	b.n	800e558 <lwip_netconn_do_close+0xfc>
      return;
 800e556:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e558:	3710      	adds	r7, #16
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	bf00      	nop
 800e560:	0801fc58 	.word	0x0801fc58
 800e564:	0801fffc 	.word	0x0801fffc
 800e568:	0801fc9c 	.word	0x0801fc9c
 800e56c:	08020018 	.word	0x08020018
 800e570:	20004584 	.word	0x20004584

0800e574 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b082      	sub	sp, #8
 800e578:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800e57a:	2006      	movs	r0, #6
 800e57c:	f000 ff5c 	bl	800f438 <memp_malloc>
 800e580:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d004      	beq.n	800e592 <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 800e588:	2210      	movs	r2, #16
 800e58a:	2100      	movs	r1, #0
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f00b fd66 	bl	801a05e <memset>
  }
  return buf;
 800e592:	687b      	ldr	r3, [r7, #4]
}
 800e594:	4618      	mov	r0, r3
 800e596:	3708      	adds	r7, #8
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}

0800e59c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b082      	sub	sp, #8
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d013      	beq.n	800e5d2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d00b      	beq.n	800e5ca <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f001 fdb8 	bl	801012c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2200      	movs	r2, #0
 800e5c0:	605a      	str	r2, [r3, #4]
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	685a      	ldr	r2, [r3, #4]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800e5ca:	6879      	ldr	r1, [r7, #4]
 800e5cc:	2006      	movs	r0, #6
 800e5ce:	f000 ff85 	bl	800f4dc <memp_free>
  }
}
 800e5d2:	bf00      	nop
 800e5d4:	3708      	adds	r7, #8
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
	...

0800e5dc <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b084      	sub	sp, #16
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	60f8      	str	r0, [r7, #12]
 800e5e4:	60b9      	str	r1, [r7, #8]
 800e5e6:	4613      	mov	r3, r2
 800e5e8:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d108      	bne.n	800e602 <netbuf_ref+0x26>
 800e5f0:	4b1c      	ldr	r3, [pc, #112]	; (800e664 <netbuf_ref+0x88>)
 800e5f2:	2299      	movs	r2, #153	; 0x99
 800e5f4:	491c      	ldr	r1, [pc, #112]	; (800e668 <netbuf_ref+0x8c>)
 800e5f6:	481d      	ldr	r0, [pc, #116]	; (800e66c <netbuf_ref+0x90>)
 800e5f8:	f00c fbf6 	bl	801ade8 <iprintf>
 800e5fc:	f06f 030f 	mvn.w	r3, #15
 800e600:	e02b      	b.n	800e65a <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d004      	beq.n	800e614 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	4618      	mov	r0, r3
 800e610:	f001 fd8c 	bl	801012c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800e614:	2241      	movs	r2, #65	; 0x41
 800e616:	2100      	movs	r1, #0
 800e618:	2036      	movs	r0, #54	; 0x36
 800e61a:	f001 faa7 	bl	800fb6c <pbuf_alloc>
 800e61e:	4602      	mov	r2, r0
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d105      	bne.n	800e638 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2200      	movs	r2, #0
 800e630:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800e632:	f04f 33ff 	mov.w	r3, #4294967295
 800e636:	e010      	b.n	800e65a <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	68ba      	ldr	r2, [r7, #8]
 800e63e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	88fa      	ldrh	r2, [r7, #6]
 800e646:	811a      	strh	r2, [r3, #8]
 800e648:	68fa      	ldr	r2, [r7, #12]
 800e64a:	6812      	ldr	r2, [r2, #0]
 800e64c:	891b      	ldrh	r3, [r3, #8]
 800e64e:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	681a      	ldr	r2, [r3, #0]
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800e658:	2300      	movs	r3, #0
}
 800e65a:	4618      	mov	r0, r3
 800e65c:	3710      	adds	r7, #16
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}
 800e662:	bf00      	nop
 800e664:	080201b0 	.word	0x080201b0
 800e668:	08020268 	.word	0x08020268
 800e66c:	08020200 	.word	0x08020200

0800e670 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b084      	sub	sp, #16
 800e674:	af00      	add	r7, sp, #0
 800e676:	60f8      	str	r0, [r7, #12]
 800e678:	60b9      	str	r1, [r7, #8]
 800e67a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d108      	bne.n	800e694 <netbuf_data+0x24>
 800e682:	4b1b      	ldr	r3, [pc, #108]	; (800e6f0 <netbuf_data+0x80>)
 800e684:	22c6      	movs	r2, #198	; 0xc6
 800e686:	491b      	ldr	r1, [pc, #108]	; (800e6f4 <netbuf_data+0x84>)
 800e688:	481b      	ldr	r0, [pc, #108]	; (800e6f8 <netbuf_data+0x88>)
 800e68a:	f00c fbad 	bl	801ade8 <iprintf>
 800e68e:	f06f 030f 	mvn.w	r3, #15
 800e692:	e029      	b.n	800e6e8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d108      	bne.n	800e6ac <netbuf_data+0x3c>
 800e69a:	4b15      	ldr	r3, [pc, #84]	; (800e6f0 <netbuf_data+0x80>)
 800e69c:	22c7      	movs	r2, #199	; 0xc7
 800e69e:	4917      	ldr	r1, [pc, #92]	; (800e6fc <netbuf_data+0x8c>)
 800e6a0:	4815      	ldr	r0, [pc, #84]	; (800e6f8 <netbuf_data+0x88>)
 800e6a2:	f00c fba1 	bl	801ade8 <iprintf>
 800e6a6:	f06f 030f 	mvn.w	r3, #15
 800e6aa:	e01d      	b.n	800e6e8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d108      	bne.n	800e6c4 <netbuf_data+0x54>
 800e6b2:	4b0f      	ldr	r3, [pc, #60]	; (800e6f0 <netbuf_data+0x80>)
 800e6b4:	22c8      	movs	r2, #200	; 0xc8
 800e6b6:	4912      	ldr	r1, [pc, #72]	; (800e700 <netbuf_data+0x90>)
 800e6b8:	480f      	ldr	r0, [pc, #60]	; (800e6f8 <netbuf_data+0x88>)
 800e6ba:	f00c fb95 	bl	801ade8 <iprintf>
 800e6be:	f06f 030f 	mvn.w	r3, #15
 800e6c2:	e011      	b.n	800e6e8 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	685b      	ldr	r3, [r3, #4]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d102      	bne.n	800e6d2 <netbuf_data+0x62>
    return ERR_BUF;
 800e6cc:	f06f 0301 	mvn.w	r3, #1
 800e6d0:	e00a      	b.n	800e6e8 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	685b      	ldr	r3, [r3, #4]
 800e6d6:	685a      	ldr	r2, [r3, #4]
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	895a      	ldrh	r2, [r3, #10]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800e6e6:	2300      	movs	r3, #0
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3710      	adds	r7, #16
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}
 800e6f0:	080201b0 	.word	0x080201b0
 800e6f4:	080202b8 	.word	0x080202b8
 800e6f8:	08020200 	.word	0x08020200
 800e6fc:	080202d4 	.word	0x080202d4
 800e700:	080202f4 	.word	0x080202f4

0800e704 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b082      	sub	sp, #8
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d108      	bne.n	800e724 <netbuf_next+0x20>
 800e712:	4b11      	ldr	r3, [pc, #68]	; (800e758 <netbuf_next+0x54>)
 800e714:	22e0      	movs	r2, #224	; 0xe0
 800e716:	4911      	ldr	r1, [pc, #68]	; (800e75c <netbuf_next+0x58>)
 800e718:	4811      	ldr	r0, [pc, #68]	; (800e760 <netbuf_next+0x5c>)
 800e71a:	f00c fb65 	bl	801ade8 <iprintf>
 800e71e:	f04f 33ff 	mov.w	r3, #4294967295
 800e722:	e014      	b.n	800e74e <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	685b      	ldr	r3, [r3, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d102      	bne.n	800e734 <netbuf_next+0x30>
    return -1;
 800e72e:	f04f 33ff 	mov.w	r3, #4294967295
 800e732:	e00c      	b.n	800e74e <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	685b      	ldr	r3, [r3, #4]
 800e738:	681a      	ldr	r2, [r3, #0]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	685b      	ldr	r3, [r3, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d101      	bne.n	800e74c <netbuf_next+0x48>
    return 1;
 800e748:	2301      	movs	r3, #1
 800e74a:	e000      	b.n	800e74e <netbuf_next+0x4a>
  }
  return 0;
 800e74c:	2300      	movs	r3, #0
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3708      	adds	r7, #8
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
 800e756:	bf00      	nop
 800e758:	080201b0 	.word	0x080201b0
 800e75c:	08020310 	.word	0x08020310
 800e760:	08020200 	.word	0x08020200

0800e764 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b084      	sub	sp, #16
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800e76e:	f008 f903 	bl	8016978 <sys_timeouts_sleeptime>
 800e772:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e77a:	d10b      	bne.n	800e794 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800e77c:	4813      	ldr	r0, [pc, #76]	; (800e7cc <tcpip_timeouts_mbox_fetch+0x68>)
 800e77e:	f00b fad6 	bl	8019d2e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800e782:	2200      	movs	r2, #0
 800e784:	6839      	ldr	r1, [r7, #0]
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f00b f98e 	bl	8019aa8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800e78c:	480f      	ldr	r0, [pc, #60]	; (800e7cc <tcpip_timeouts_mbox_fetch+0x68>)
 800e78e:	f00b fabf 	bl	8019d10 <sys_mutex_lock>
    return;
 800e792:	e018      	b.n	800e7c6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d102      	bne.n	800e7a0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800e79a:	f008 f8b3 	bl	8016904 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e79e:	e7e6      	b.n	800e76e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800e7a0:	480a      	ldr	r0, [pc, #40]	; (800e7cc <tcpip_timeouts_mbox_fetch+0x68>)
 800e7a2:	f00b fac4 	bl	8019d2e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800e7a6:	68fa      	ldr	r2, [r7, #12]
 800e7a8:	6839      	ldr	r1, [r7, #0]
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f00b f97c 	bl	8019aa8 <sys_arch_mbox_fetch>
 800e7b0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800e7b2:	4806      	ldr	r0, [pc, #24]	; (800e7cc <tcpip_timeouts_mbox_fetch+0x68>)
 800e7b4:	f00b faac 	bl	8019d10 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7be:	d102      	bne.n	800e7c6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800e7c0:	f008 f8a0 	bl	8016904 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e7c4:	e7d3      	b.n	800e76e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800e7c6:	3710      	adds	r7, #16
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}
 800e7cc:	20004584 	.word	0x20004584

0800e7d0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b084      	sub	sp, #16
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800e7d8:	4810      	ldr	r0, [pc, #64]	; (800e81c <tcpip_thread+0x4c>)
 800e7da:	f00b fa99 	bl	8019d10 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800e7de:	4b10      	ldr	r3, [pc, #64]	; (800e820 <tcpip_thread+0x50>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d005      	beq.n	800e7f2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800e7e6:	4b0e      	ldr	r3, [pc, #56]	; (800e820 <tcpip_thread+0x50>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	4a0e      	ldr	r2, [pc, #56]	; (800e824 <tcpip_thread+0x54>)
 800e7ec:	6812      	ldr	r2, [r2, #0]
 800e7ee:	4610      	mov	r0, r2
 800e7f0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e7f2:	f107 030c 	add.w	r3, r7, #12
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	480b      	ldr	r0, [pc, #44]	; (800e828 <tcpip_thread+0x58>)
 800e7fa:	f7ff ffb3 	bl	800e764 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d106      	bne.n	800e812 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e804:	4b09      	ldr	r3, [pc, #36]	; (800e82c <tcpip_thread+0x5c>)
 800e806:	2291      	movs	r2, #145	; 0x91
 800e808:	4909      	ldr	r1, [pc, #36]	; (800e830 <tcpip_thread+0x60>)
 800e80a:	480a      	ldr	r0, [pc, #40]	; (800e834 <tcpip_thread+0x64>)
 800e80c:	f00c faec 	bl	801ade8 <iprintf>
      continue;
 800e810:	e003      	b.n	800e81a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	4618      	mov	r0, r3
 800e816:	f000 f80f 	bl	800e838 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e81a:	e7ea      	b.n	800e7f2 <tcpip_thread+0x22>
 800e81c:	20004584 	.word	0x20004584
 800e820:	20000840 	.word	0x20000840
 800e824:	20000844 	.word	0x20000844
 800e828:	20000848 	.word	0x20000848
 800e82c:	08020348 	.word	0x08020348
 800e830:	08020378 	.word	0x08020378
 800e834:	08020398 	.word	0x08020398

0800e838 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b082      	sub	sp, #8
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	781b      	ldrb	r3, [r3, #0]
 800e844:	2b01      	cmp	r3, #1
 800e846:	d018      	beq.n	800e87a <tcpip_thread_handle_msg+0x42>
 800e848:	2b02      	cmp	r3, #2
 800e84a:	d021      	beq.n	800e890 <tcpip_thread_handle_msg+0x58>
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d126      	bne.n	800e89e <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	68db      	ldr	r3, [r3, #12]
 800e854:	687a      	ldr	r2, [r7, #4]
 800e856:	6850      	ldr	r0, [r2, #4]
 800e858:	687a      	ldr	r2, [r7, #4]
 800e85a:	6892      	ldr	r2, [r2, #8]
 800e85c:	4611      	mov	r1, r2
 800e85e:	4798      	blx	r3
 800e860:	4603      	mov	r3, r0
 800e862:	2b00      	cmp	r3, #0
 800e864:	d004      	beq.n	800e870 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	685b      	ldr	r3, [r3, #4]
 800e86a:	4618      	mov	r0, r3
 800e86c:	f001 fc5e 	bl	801012c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e870:	6879      	ldr	r1, [r7, #4]
 800e872:	2009      	movs	r0, #9
 800e874:	f000 fe32 	bl	800f4dc <memp_free>
      break;
 800e878:	e018      	b.n	800e8ac <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	687a      	ldr	r2, [r7, #4]
 800e880:	6892      	ldr	r2, [r2, #8]
 800e882:	4610      	mov	r0, r2
 800e884:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800e886:	6879      	ldr	r1, [r7, #4]
 800e888:	2008      	movs	r0, #8
 800e88a:	f000 fe27 	bl	800f4dc <memp_free>
      break;
 800e88e:	e00d      	b.n	800e8ac <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	6892      	ldr	r2, [r2, #8]
 800e898:	4610      	mov	r0, r2
 800e89a:	4798      	blx	r3
      break;
 800e89c:	e006      	b.n	800e8ac <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e89e:	4b05      	ldr	r3, [pc, #20]	; (800e8b4 <tcpip_thread_handle_msg+0x7c>)
 800e8a0:	22cf      	movs	r2, #207	; 0xcf
 800e8a2:	4905      	ldr	r1, [pc, #20]	; (800e8b8 <tcpip_thread_handle_msg+0x80>)
 800e8a4:	4805      	ldr	r0, [pc, #20]	; (800e8bc <tcpip_thread_handle_msg+0x84>)
 800e8a6:	f00c fa9f 	bl	801ade8 <iprintf>
      break;
 800e8aa:	bf00      	nop
  }
}
 800e8ac:	bf00      	nop
 800e8ae:	3708      	adds	r7, #8
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}
 800e8b4:	08020348 	.word	0x08020348
 800e8b8:	08020378 	.word	0x08020378
 800e8bc:	08020398 	.word	0x08020398

0800e8c0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b086      	sub	sp, #24
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	60b9      	str	r1, [r7, #8]
 800e8ca:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e8cc:	481a      	ldr	r0, [pc, #104]	; (800e938 <tcpip_inpkt+0x78>)
 800e8ce:	f00b f946 	bl	8019b5e <sys_mbox_valid>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d105      	bne.n	800e8e4 <tcpip_inpkt+0x24>
 800e8d8:	4b18      	ldr	r3, [pc, #96]	; (800e93c <tcpip_inpkt+0x7c>)
 800e8da:	22fc      	movs	r2, #252	; 0xfc
 800e8dc:	4918      	ldr	r1, [pc, #96]	; (800e940 <tcpip_inpkt+0x80>)
 800e8de:	4819      	ldr	r0, [pc, #100]	; (800e944 <tcpip_inpkt+0x84>)
 800e8e0:	f00c fa82 	bl	801ade8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800e8e4:	2009      	movs	r0, #9
 800e8e6:	f000 fda7 	bl	800f438 <memp_malloc>
 800e8ea:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d102      	bne.n	800e8f8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800e8f2:	f04f 33ff 	mov.w	r3, #4294967295
 800e8f6:	e01a      	b.n	800e92e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	68fa      	ldr	r2, [r7, #12]
 800e902:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	68ba      	ldr	r2, [r7, #8]
 800e908:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	687a      	ldr	r2, [r7, #4]
 800e90e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e910:	6979      	ldr	r1, [r7, #20]
 800e912:	4809      	ldr	r0, [pc, #36]	; (800e938 <tcpip_inpkt+0x78>)
 800e914:	f00b f8ae 	bl	8019a74 <sys_mbox_trypost>
 800e918:	4603      	mov	r3, r0
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d006      	beq.n	800e92c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e91e:	6979      	ldr	r1, [r7, #20]
 800e920:	2009      	movs	r0, #9
 800e922:	f000 fddb 	bl	800f4dc <memp_free>
    return ERR_MEM;
 800e926:	f04f 33ff 	mov.w	r3, #4294967295
 800e92a:	e000      	b.n	800e92e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800e92c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3718      	adds	r7, #24
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}
 800e936:	bf00      	nop
 800e938:	20000848 	.word	0x20000848
 800e93c:	08020348 	.word	0x08020348
 800e940:	080203c0 	.word	0x080203c0
 800e944:	08020398 	.word	0x08020398

0800e948 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b082      	sub	sp, #8
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e958:	f003 0318 	and.w	r3, r3, #24
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d006      	beq.n	800e96e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800e960:	4a08      	ldr	r2, [pc, #32]	; (800e984 <tcpip_input+0x3c>)
 800e962:	6839      	ldr	r1, [r7, #0]
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f7ff ffab 	bl	800e8c0 <tcpip_inpkt>
 800e96a:	4603      	mov	r3, r0
 800e96c:	e005      	b.n	800e97a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800e96e:	4a06      	ldr	r2, [pc, #24]	; (800e988 <tcpip_input+0x40>)
 800e970:	6839      	ldr	r1, [r7, #0]
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f7ff ffa4 	bl	800e8c0 <tcpip_inpkt>
 800e978:	4603      	mov	r3, r0
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	3708      	adds	r7, #8
 800e97e:	46bd      	mov	sp, r7
 800e980:	bd80      	pop	{r7, pc}
 800e982:	bf00      	nop
 800e984:	08019861 	.word	0x08019861
 800e988:	08018781 	.word	0x08018781

0800e98c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b084      	sub	sp, #16
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e996:	4819      	ldr	r0, [pc, #100]	; (800e9fc <tcpip_try_callback+0x70>)
 800e998:	f00b f8e1 	bl	8019b5e <sys_mbox_valid>
 800e99c:	4603      	mov	r3, r0
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d106      	bne.n	800e9b0 <tcpip_try_callback+0x24>
 800e9a2:	4b17      	ldr	r3, [pc, #92]	; (800ea00 <tcpip_try_callback+0x74>)
 800e9a4:	f240 125d 	movw	r2, #349	; 0x15d
 800e9a8:	4916      	ldr	r1, [pc, #88]	; (800ea04 <tcpip_try_callback+0x78>)
 800e9aa:	4817      	ldr	r0, [pc, #92]	; (800ea08 <tcpip_try_callback+0x7c>)
 800e9ac:	f00c fa1c 	bl	801ade8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800e9b0:	2008      	movs	r0, #8
 800e9b2:	f000 fd41 	bl	800f438 <memp_malloc>
 800e9b6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d102      	bne.n	800e9c4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800e9be:	f04f 33ff 	mov.w	r3, #4294967295
 800e9c2:	e017      	b.n	800e9f4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	2201      	movs	r2, #1
 800e9c8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	687a      	ldr	r2, [r7, #4]
 800e9ce:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	683a      	ldr	r2, [r7, #0]
 800e9d4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e9d6:	68f9      	ldr	r1, [r7, #12]
 800e9d8:	4808      	ldr	r0, [pc, #32]	; (800e9fc <tcpip_try_callback+0x70>)
 800e9da:	f00b f84b 	bl	8019a74 <sys_mbox_trypost>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d006      	beq.n	800e9f2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800e9e4:	68f9      	ldr	r1, [r7, #12]
 800e9e6:	2008      	movs	r0, #8
 800e9e8:	f000 fd78 	bl	800f4dc <memp_free>
    return ERR_MEM;
 800e9ec:	f04f 33ff 	mov.w	r3, #4294967295
 800e9f0:	e000      	b.n	800e9f4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800e9f2:	2300      	movs	r3, #0
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3710      	adds	r7, #16
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}
 800e9fc:	20000848 	.word	0x20000848
 800ea00:	08020348 	.word	0x08020348
 800ea04:	080203c0 	.word	0x080203c0
 800ea08:	08020398 	.word	0x08020398

0800ea0c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b084      	sub	sp, #16
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800ea18:	4806      	ldr	r0, [pc, #24]	; (800ea34 <tcpip_send_msg_wait_sem+0x28>)
 800ea1a:	f00b f979 	bl	8019d10 <sys_mutex_lock>
  fn(apimsg);
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	68b8      	ldr	r0, [r7, #8]
 800ea22:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800ea24:	4803      	ldr	r0, [pc, #12]	; (800ea34 <tcpip_send_msg_wait_sem+0x28>)
 800ea26:	f00b f982 	bl	8019d2e <sys_mutex_unlock>
  return ERR_OK;
 800ea2a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3710      	adds	r7, #16
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}
 800ea34:	20004584 	.word	0x20004584

0800ea38 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af02      	add	r7, sp, #8
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ea42:	f000 f871 	bl	800eb28 <lwip_init>

  tcpip_init_done = initfunc;
 800ea46:	4a17      	ldr	r2, [pc, #92]	; (800eaa4 <tcpip_init+0x6c>)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ea4c:	4a16      	ldr	r2, [pc, #88]	; (800eaa8 <tcpip_init+0x70>)
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ea52:	2106      	movs	r1, #6
 800ea54:	4815      	ldr	r0, [pc, #84]	; (800eaac <tcpip_init+0x74>)
 800ea56:	f00a ffd9 	bl	8019a0c <sys_mbox_new>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d006      	beq.n	800ea6e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ea60:	4b13      	ldr	r3, [pc, #76]	; (800eab0 <tcpip_init+0x78>)
 800ea62:	f240 2261 	movw	r2, #609	; 0x261
 800ea66:	4913      	ldr	r1, [pc, #76]	; (800eab4 <tcpip_init+0x7c>)
 800ea68:	4813      	ldr	r0, [pc, #76]	; (800eab8 <tcpip_init+0x80>)
 800ea6a:	f00c f9bd 	bl	801ade8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ea6e:	4813      	ldr	r0, [pc, #76]	; (800eabc <tcpip_init+0x84>)
 800ea70:	f00b f932 	bl	8019cd8 <sys_mutex_new>
 800ea74:	4603      	mov	r3, r0
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d006      	beq.n	800ea88 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ea7a:	4b0d      	ldr	r3, [pc, #52]	; (800eab0 <tcpip_init+0x78>)
 800ea7c:	f240 2265 	movw	r2, #613	; 0x265
 800ea80:	490f      	ldr	r1, [pc, #60]	; (800eac0 <tcpip_init+0x88>)
 800ea82:	480d      	ldr	r0, [pc, #52]	; (800eab8 <tcpip_init+0x80>)
 800ea84:	f00c f9b0 	bl	801ade8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ea88:	2300      	movs	r3, #0
 800ea8a:	9300      	str	r3, [sp, #0]
 800ea8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea90:	2200      	movs	r2, #0
 800ea92:	490c      	ldr	r1, [pc, #48]	; (800eac4 <tcpip_init+0x8c>)
 800ea94:	480c      	ldr	r0, [pc, #48]	; (800eac8 <tcpip_init+0x90>)
 800ea96:	f00b f957 	bl	8019d48 <sys_thread_new>
}
 800ea9a:	bf00      	nop
 800ea9c:	3708      	adds	r7, #8
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	20000840 	.word	0x20000840
 800eaa8:	20000844 	.word	0x20000844
 800eaac:	20000848 	.word	0x20000848
 800eab0:	08020348 	.word	0x08020348
 800eab4:	080203d0 	.word	0x080203d0
 800eab8:	08020398 	.word	0x08020398
 800eabc:	20004584 	.word	0x20004584
 800eac0:	080203f4 	.word	0x080203f4
 800eac4:	0800e7d1 	.word	0x0800e7d1
 800eac8:	08020418 	.word	0x08020418

0800eacc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800eacc:	b480      	push	{r7}
 800eace:	b083      	sub	sp, #12
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	4603      	mov	r3, r0
 800ead4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ead6:	88fb      	ldrh	r3, [r7, #6]
 800ead8:	021b      	lsls	r3, r3, #8
 800eada:	b21a      	sxth	r2, r3
 800eadc:	88fb      	ldrh	r3, [r7, #6]
 800eade:	0a1b      	lsrs	r3, r3, #8
 800eae0:	b29b      	uxth	r3, r3
 800eae2:	b21b      	sxth	r3, r3
 800eae4:	4313      	orrs	r3, r2
 800eae6:	b21b      	sxth	r3, r3
 800eae8:	b29b      	uxth	r3, r3
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	370c      	adds	r7, #12
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr

0800eaf6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800eaf6:	b480      	push	{r7}
 800eaf8:	b083      	sub	sp, #12
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	061a      	lsls	r2, r3, #24
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	021b      	lsls	r3, r3, #8
 800eb06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eb0a:	431a      	orrs	r2, r3
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	0a1b      	lsrs	r3, r3, #8
 800eb10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eb14:	431a      	orrs	r2, r3
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	0e1b      	lsrs	r3, r3, #24
 800eb1a:	4313      	orrs	r3, r2
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	370c      	adds	r7, #12
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr

0800eb28 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b082      	sub	sp, #8
 800eb2c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800eb32:	f00b f8c3 	bl	8019cbc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800eb36:	f000 f8d5 	bl	800ece4 <mem_init>
  memp_init();
 800eb3a:	f000 fc31 	bl	800f3a0 <memp_init>
  pbuf_init();
  netif_init();
 800eb3e:	f000 fcf7 	bl	800f530 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800eb42:	f007 ff51 	bl	80169e8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800eb46:	f001 fd9b 	bl	8010680 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800eb4a:	f007 fe95 	bl	8016878 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800eb4e:	bf00      	nop
 800eb50:	3708      	adds	r7, #8
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}
	...

0800eb58 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b083      	sub	sp, #12
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	4603      	mov	r3, r0
 800eb60:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800eb62:	4b05      	ldr	r3, [pc, #20]	; (800eb78 <ptr_to_mem+0x20>)
 800eb64:	681a      	ldr	r2, [r3, #0]
 800eb66:	88fb      	ldrh	r3, [r7, #6]
 800eb68:	4413      	add	r3, r2
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	370c      	adds	r7, #12
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb74:	4770      	bx	lr
 800eb76:	bf00      	nop
 800eb78:	2000084c 	.word	0x2000084c

0800eb7c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b083      	sub	sp, #12
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	4a05      	ldr	r2, [pc, #20]	; (800eb9c <mem_to_ptr+0x20>)
 800eb88:	6812      	ldr	r2, [r2, #0]
 800eb8a:	1a9b      	subs	r3, r3, r2
 800eb8c:	b29b      	uxth	r3, r3
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	370c      	adds	r7, #12
 800eb92:	46bd      	mov	sp, r7
 800eb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb98:	4770      	bx	lr
 800eb9a:	bf00      	nop
 800eb9c:	2000084c 	.word	0x2000084c

0800eba0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800eba0:	b590      	push	{r4, r7, lr}
 800eba2:	b085      	sub	sp, #20
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800eba8:	4b45      	ldr	r3, [pc, #276]	; (800ecc0 <plug_holes+0x120>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	687a      	ldr	r2, [r7, #4]
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d206      	bcs.n	800ebc0 <plug_holes+0x20>
 800ebb2:	4b44      	ldr	r3, [pc, #272]	; (800ecc4 <plug_holes+0x124>)
 800ebb4:	f240 12df 	movw	r2, #479	; 0x1df
 800ebb8:	4943      	ldr	r1, [pc, #268]	; (800ecc8 <plug_holes+0x128>)
 800ebba:	4844      	ldr	r0, [pc, #272]	; (800eccc <plug_holes+0x12c>)
 800ebbc:	f00c f914 	bl	801ade8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ebc0:	4b43      	ldr	r3, [pc, #268]	; (800ecd0 <plug_holes+0x130>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	687a      	ldr	r2, [r7, #4]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d306      	bcc.n	800ebd8 <plug_holes+0x38>
 800ebca:	4b3e      	ldr	r3, [pc, #248]	; (800ecc4 <plug_holes+0x124>)
 800ebcc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ebd0:	4940      	ldr	r1, [pc, #256]	; (800ecd4 <plug_holes+0x134>)
 800ebd2:	483e      	ldr	r0, [pc, #248]	; (800eccc <plug_holes+0x12c>)
 800ebd4:	f00c f908 	bl	801ade8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	791b      	ldrb	r3, [r3, #4]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d006      	beq.n	800ebee <plug_holes+0x4e>
 800ebe0:	4b38      	ldr	r3, [pc, #224]	; (800ecc4 <plug_holes+0x124>)
 800ebe2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ebe6:	493c      	ldr	r1, [pc, #240]	; (800ecd8 <plug_holes+0x138>)
 800ebe8:	4838      	ldr	r0, [pc, #224]	; (800eccc <plug_holes+0x12c>)
 800ebea:	f00c f8fd 	bl	801ade8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	881b      	ldrh	r3, [r3, #0]
 800ebf2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ebf6:	d906      	bls.n	800ec06 <plug_holes+0x66>
 800ebf8:	4b32      	ldr	r3, [pc, #200]	; (800ecc4 <plug_holes+0x124>)
 800ebfa:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ebfe:	4937      	ldr	r1, [pc, #220]	; (800ecdc <plug_holes+0x13c>)
 800ec00:	4832      	ldr	r0, [pc, #200]	; (800eccc <plug_holes+0x12c>)
 800ec02:	f00c f8f1 	bl	801ade8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	881b      	ldrh	r3, [r3, #0]
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f7ff ffa4 	bl	800eb58 <ptr_to_mem>
 800ec10:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ec12:	687a      	ldr	r2, [r7, #4]
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d024      	beq.n	800ec64 <plug_holes+0xc4>
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	791b      	ldrb	r3, [r3, #4]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d120      	bne.n	800ec64 <plug_holes+0xc4>
 800ec22:	4b2b      	ldr	r3, [pc, #172]	; (800ecd0 <plug_holes+0x130>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	68fa      	ldr	r2, [r7, #12]
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d01b      	beq.n	800ec64 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ec2c:	4b2c      	ldr	r3, [pc, #176]	; (800ece0 <plug_holes+0x140>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	68fa      	ldr	r2, [r7, #12]
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d102      	bne.n	800ec3c <plug_holes+0x9c>
      lfree = mem;
 800ec36:	4a2a      	ldr	r2, [pc, #168]	; (800ece0 <plug_holes+0x140>)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	881a      	ldrh	r2, [r3, #0]
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	881b      	ldrh	r3, [r3, #0]
 800ec48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ec4c:	d00a      	beq.n	800ec64 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	881b      	ldrh	r3, [r3, #0]
 800ec52:	4618      	mov	r0, r3
 800ec54:	f7ff ff80 	bl	800eb58 <ptr_to_mem>
 800ec58:	4604      	mov	r4, r0
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f7ff ff8e 	bl	800eb7c <mem_to_ptr>
 800ec60:	4603      	mov	r3, r0
 800ec62:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	885b      	ldrh	r3, [r3, #2]
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f7ff ff75 	bl	800eb58 <ptr_to_mem>
 800ec6e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ec70:	68ba      	ldr	r2, [r7, #8]
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d01f      	beq.n	800ecb8 <plug_holes+0x118>
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	791b      	ldrb	r3, [r3, #4]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d11b      	bne.n	800ecb8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ec80:	4b17      	ldr	r3, [pc, #92]	; (800ece0 <plug_holes+0x140>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	687a      	ldr	r2, [r7, #4]
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d102      	bne.n	800ec90 <plug_holes+0xf0>
      lfree = pmem;
 800ec8a:	4a15      	ldr	r2, [pc, #84]	; (800ece0 <plug_holes+0x140>)
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	881a      	ldrh	r2, [r3, #0]
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	881b      	ldrh	r3, [r3, #0]
 800ec9c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800eca0:	d00a      	beq.n	800ecb8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	881b      	ldrh	r3, [r3, #0]
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7ff ff56 	bl	800eb58 <ptr_to_mem>
 800ecac:	4604      	mov	r4, r0
 800ecae:	68b8      	ldr	r0, [r7, #8]
 800ecb0:	f7ff ff64 	bl	800eb7c <mem_to_ptr>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ecb8:	bf00      	nop
 800ecba:	3714      	adds	r7, #20
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd90      	pop	{r4, r7, pc}
 800ecc0:	2000084c 	.word	0x2000084c
 800ecc4:	08020428 	.word	0x08020428
 800ecc8:	08020458 	.word	0x08020458
 800eccc:	08020470 	.word	0x08020470
 800ecd0:	20000850 	.word	0x20000850
 800ecd4:	08020498 	.word	0x08020498
 800ecd8:	080204b4 	.word	0x080204b4
 800ecdc:	080204d0 	.word	0x080204d0
 800ece0:	20000858 	.word	0x20000858

0800ece4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b082      	sub	sp, #8
 800ece8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ecea:	4b1f      	ldr	r3, [pc, #124]	; (800ed68 <mem_init+0x84>)
 800ecec:	3303      	adds	r3, #3
 800ecee:	f023 0303 	bic.w	r3, r3, #3
 800ecf2:	461a      	mov	r2, r3
 800ecf4:	4b1d      	ldr	r3, [pc, #116]	; (800ed6c <mem_init+0x88>)
 800ecf6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ecf8:	4b1c      	ldr	r3, [pc, #112]	; (800ed6c <mem_init+0x88>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ed04:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ed12:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800ed16:	f7ff ff1f 	bl	800eb58 <ptr_to_mem>
 800ed1a:	4602      	mov	r2, r0
 800ed1c:	4b14      	ldr	r3, [pc, #80]	; (800ed70 <mem_init+0x8c>)
 800ed1e:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800ed20:	4b13      	ldr	r3, [pc, #76]	; (800ed70 <mem_init+0x8c>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	2201      	movs	r2, #1
 800ed26:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ed28:	4b11      	ldr	r3, [pc, #68]	; (800ed70 <mem_init+0x8c>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ed30:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ed32:	4b0f      	ldr	r3, [pc, #60]	; (800ed70 <mem_init+0x8c>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ed3a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ed3c:	4b0b      	ldr	r3, [pc, #44]	; (800ed6c <mem_init+0x88>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4a0c      	ldr	r2, [pc, #48]	; (800ed74 <mem_init+0x90>)
 800ed42:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ed44:	480c      	ldr	r0, [pc, #48]	; (800ed78 <mem_init+0x94>)
 800ed46:	f00a ffc7 	bl	8019cd8 <sys_mutex_new>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d006      	beq.n	800ed5e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ed50:	4b0a      	ldr	r3, [pc, #40]	; (800ed7c <mem_init+0x98>)
 800ed52:	f240 221f 	movw	r2, #543	; 0x21f
 800ed56:	490a      	ldr	r1, [pc, #40]	; (800ed80 <mem_init+0x9c>)
 800ed58:	480a      	ldr	r0, [pc, #40]	; (800ed84 <mem_init+0xa0>)
 800ed5a:	f00c f845 	bl	801ade8 <iprintf>
  }
}
 800ed5e:	bf00      	nop
 800ed60:	3708      	adds	r7, #8
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}
 800ed66:	bf00      	nop
 800ed68:	200045a0 	.word	0x200045a0
 800ed6c:	2000084c 	.word	0x2000084c
 800ed70:	20000850 	.word	0x20000850
 800ed74:	20000858 	.word	0x20000858
 800ed78:	20000854 	.word	0x20000854
 800ed7c:	08020428 	.word	0x08020428
 800ed80:	080204fc 	.word	0x080204fc
 800ed84:	08020470 	.word	0x08020470

0800ed88 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b086      	sub	sp, #24
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f7ff fef3 	bl	800eb7c <mem_to_ptr>
 800ed96:	4603      	mov	r3, r0
 800ed98:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	881b      	ldrh	r3, [r3, #0]
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7ff feda 	bl	800eb58 <ptr_to_mem>
 800eda4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	885b      	ldrh	r3, [r3, #2]
 800edaa:	4618      	mov	r0, r3
 800edac:	f7ff fed4 	bl	800eb58 <ptr_to_mem>
 800edb0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	881b      	ldrh	r3, [r3, #0]
 800edb6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800edba:	d818      	bhi.n	800edee <mem_link_valid+0x66>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	885b      	ldrh	r3, [r3, #2]
 800edc0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800edc4:	d813      	bhi.n	800edee <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800edca:	8afa      	ldrh	r2, [r7, #22]
 800edcc:	429a      	cmp	r2, r3
 800edce:	d004      	beq.n	800edda <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	881b      	ldrh	r3, [r3, #0]
 800edd4:	8afa      	ldrh	r2, [r7, #22]
 800edd6:	429a      	cmp	r2, r3
 800edd8:	d109      	bne.n	800edee <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800edda:	4b08      	ldr	r3, [pc, #32]	; (800edfc <mem_link_valid+0x74>)
 800eddc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800edde:	693a      	ldr	r2, [r7, #16]
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d006      	beq.n	800edf2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	885b      	ldrh	r3, [r3, #2]
 800ede8:	8afa      	ldrh	r2, [r7, #22]
 800edea:	429a      	cmp	r2, r3
 800edec:	d001      	beq.n	800edf2 <mem_link_valid+0x6a>
    return 0;
 800edee:	2300      	movs	r3, #0
 800edf0:	e000      	b.n	800edf4 <mem_link_valid+0x6c>
  }
  return 1;
 800edf2:	2301      	movs	r3, #1
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3718      	adds	r7, #24
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}
 800edfc:	20000850 	.word	0x20000850

0800ee00 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b088      	sub	sp, #32
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d070      	beq.n	800eef0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f003 0303 	and.w	r3, r3, #3
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d00d      	beq.n	800ee34 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ee18:	4b37      	ldr	r3, [pc, #220]	; (800eef8 <mem_free+0xf8>)
 800ee1a:	f240 2273 	movw	r2, #627	; 0x273
 800ee1e:	4937      	ldr	r1, [pc, #220]	; (800eefc <mem_free+0xfc>)
 800ee20:	4837      	ldr	r0, [pc, #220]	; (800ef00 <mem_free+0x100>)
 800ee22:	f00b ffe1 	bl	801ade8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ee26:	f00a ffb5 	bl	8019d94 <sys_arch_protect>
 800ee2a:	60f8      	str	r0, [r7, #12]
 800ee2c:	68f8      	ldr	r0, [r7, #12]
 800ee2e:	f00a ffbf 	bl	8019db0 <sys_arch_unprotect>
    return;
 800ee32:	e05e      	b.n	800eef2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	3b08      	subs	r3, #8
 800ee38:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ee3a:	4b32      	ldr	r3, [pc, #200]	; (800ef04 <mem_free+0x104>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	69fa      	ldr	r2, [r7, #28]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d306      	bcc.n	800ee52 <mem_free+0x52>
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f103 020c 	add.w	r2, r3, #12
 800ee4a:	4b2f      	ldr	r3, [pc, #188]	; (800ef08 <mem_free+0x108>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	d90d      	bls.n	800ee6e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ee52:	4b29      	ldr	r3, [pc, #164]	; (800eef8 <mem_free+0xf8>)
 800ee54:	f240 227f 	movw	r2, #639	; 0x27f
 800ee58:	492c      	ldr	r1, [pc, #176]	; (800ef0c <mem_free+0x10c>)
 800ee5a:	4829      	ldr	r0, [pc, #164]	; (800ef00 <mem_free+0x100>)
 800ee5c:	f00b ffc4 	bl	801ade8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ee60:	f00a ff98 	bl	8019d94 <sys_arch_protect>
 800ee64:	6138      	str	r0, [r7, #16]
 800ee66:	6938      	ldr	r0, [r7, #16]
 800ee68:	f00a ffa2 	bl	8019db0 <sys_arch_unprotect>
    return;
 800ee6c:	e041      	b.n	800eef2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ee6e:	4828      	ldr	r0, [pc, #160]	; (800ef10 <mem_free+0x110>)
 800ee70:	f00a ff4e 	bl	8019d10 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ee74:	69fb      	ldr	r3, [r7, #28]
 800ee76:	791b      	ldrb	r3, [r3, #4]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d110      	bne.n	800ee9e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ee7c:	4b1e      	ldr	r3, [pc, #120]	; (800eef8 <mem_free+0xf8>)
 800ee7e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ee82:	4924      	ldr	r1, [pc, #144]	; (800ef14 <mem_free+0x114>)
 800ee84:	481e      	ldr	r0, [pc, #120]	; (800ef00 <mem_free+0x100>)
 800ee86:	f00b ffaf 	bl	801ade8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ee8a:	4821      	ldr	r0, [pc, #132]	; (800ef10 <mem_free+0x110>)
 800ee8c:	f00a ff4f 	bl	8019d2e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ee90:	f00a ff80 	bl	8019d94 <sys_arch_protect>
 800ee94:	6178      	str	r0, [r7, #20]
 800ee96:	6978      	ldr	r0, [r7, #20]
 800ee98:	f00a ff8a 	bl	8019db0 <sys_arch_unprotect>
    return;
 800ee9c:	e029      	b.n	800eef2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ee9e:	69f8      	ldr	r0, [r7, #28]
 800eea0:	f7ff ff72 	bl	800ed88 <mem_link_valid>
 800eea4:	4603      	mov	r3, r0
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d110      	bne.n	800eecc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800eeaa:	4b13      	ldr	r3, [pc, #76]	; (800eef8 <mem_free+0xf8>)
 800eeac:	f240 2295 	movw	r2, #661	; 0x295
 800eeb0:	4919      	ldr	r1, [pc, #100]	; (800ef18 <mem_free+0x118>)
 800eeb2:	4813      	ldr	r0, [pc, #76]	; (800ef00 <mem_free+0x100>)
 800eeb4:	f00b ff98 	bl	801ade8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800eeb8:	4815      	ldr	r0, [pc, #84]	; (800ef10 <mem_free+0x110>)
 800eeba:	f00a ff38 	bl	8019d2e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800eebe:	f00a ff69 	bl	8019d94 <sys_arch_protect>
 800eec2:	61b8      	str	r0, [r7, #24]
 800eec4:	69b8      	ldr	r0, [r7, #24]
 800eec6:	f00a ff73 	bl	8019db0 <sys_arch_unprotect>
    return;
 800eeca:	e012      	b.n	800eef2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800eecc:	69fb      	ldr	r3, [r7, #28]
 800eece:	2200      	movs	r2, #0
 800eed0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800eed2:	4b12      	ldr	r3, [pc, #72]	; (800ef1c <mem_free+0x11c>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	69fa      	ldr	r2, [r7, #28]
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d202      	bcs.n	800eee2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800eedc:	4a0f      	ldr	r2, [pc, #60]	; (800ef1c <mem_free+0x11c>)
 800eede:	69fb      	ldr	r3, [r7, #28]
 800eee0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800eee2:	69f8      	ldr	r0, [r7, #28]
 800eee4:	f7ff fe5c 	bl	800eba0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800eee8:	4809      	ldr	r0, [pc, #36]	; (800ef10 <mem_free+0x110>)
 800eeea:	f00a ff20 	bl	8019d2e <sys_mutex_unlock>
 800eeee:	e000      	b.n	800eef2 <mem_free+0xf2>
    return;
 800eef0:	bf00      	nop
}
 800eef2:	3720      	adds	r7, #32
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}
 800eef8:	08020428 	.word	0x08020428
 800eefc:	08020518 	.word	0x08020518
 800ef00:	08020470 	.word	0x08020470
 800ef04:	2000084c 	.word	0x2000084c
 800ef08:	20000850 	.word	0x20000850
 800ef0c:	0802053c 	.word	0x0802053c
 800ef10:	20000854 	.word	0x20000854
 800ef14:	08020558 	.word	0x08020558
 800ef18:	08020580 	.word	0x08020580
 800ef1c:	20000858 	.word	0x20000858

0800ef20 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b088      	sub	sp, #32
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	460b      	mov	r3, r1
 800ef2a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ef2c:	887b      	ldrh	r3, [r7, #2]
 800ef2e:	3303      	adds	r3, #3
 800ef30:	b29b      	uxth	r3, r3
 800ef32:	f023 0303 	bic.w	r3, r3, #3
 800ef36:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ef38:	8bfb      	ldrh	r3, [r7, #30]
 800ef3a:	2b0b      	cmp	r3, #11
 800ef3c:	d801      	bhi.n	800ef42 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ef3e:	230c      	movs	r3, #12
 800ef40:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ef42:	8bfb      	ldrh	r3, [r7, #30]
 800ef44:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ef48:	d803      	bhi.n	800ef52 <mem_trim+0x32>
 800ef4a:	8bfa      	ldrh	r2, [r7, #30]
 800ef4c:	887b      	ldrh	r3, [r7, #2]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d201      	bcs.n	800ef56 <mem_trim+0x36>
    return NULL;
 800ef52:	2300      	movs	r3, #0
 800ef54:	e0d8      	b.n	800f108 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ef56:	4b6e      	ldr	r3, [pc, #440]	; (800f110 <mem_trim+0x1f0>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	687a      	ldr	r2, [r7, #4]
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d304      	bcc.n	800ef6a <mem_trim+0x4a>
 800ef60:	4b6c      	ldr	r3, [pc, #432]	; (800f114 <mem_trim+0x1f4>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	687a      	ldr	r2, [r7, #4]
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d306      	bcc.n	800ef78 <mem_trim+0x58>
 800ef6a:	4b6b      	ldr	r3, [pc, #428]	; (800f118 <mem_trim+0x1f8>)
 800ef6c:	f240 22d2 	movw	r2, #722	; 0x2d2
 800ef70:	496a      	ldr	r1, [pc, #424]	; (800f11c <mem_trim+0x1fc>)
 800ef72:	486b      	ldr	r0, [pc, #428]	; (800f120 <mem_trim+0x200>)
 800ef74:	f00b ff38 	bl	801ade8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ef78:	4b65      	ldr	r3, [pc, #404]	; (800f110 <mem_trim+0x1f0>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	687a      	ldr	r2, [r7, #4]
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d304      	bcc.n	800ef8c <mem_trim+0x6c>
 800ef82:	4b64      	ldr	r3, [pc, #400]	; (800f114 <mem_trim+0x1f4>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	687a      	ldr	r2, [r7, #4]
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d307      	bcc.n	800ef9c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ef8c:	f00a ff02 	bl	8019d94 <sys_arch_protect>
 800ef90:	60b8      	str	r0, [r7, #8]
 800ef92:	68b8      	ldr	r0, [r7, #8]
 800ef94:	f00a ff0c 	bl	8019db0 <sys_arch_unprotect>
    return rmem;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	e0b5      	b.n	800f108 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	3b08      	subs	r3, #8
 800efa0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800efa2:	69b8      	ldr	r0, [r7, #24]
 800efa4:	f7ff fdea 	bl	800eb7c <mem_to_ptr>
 800efa8:	4603      	mov	r3, r0
 800efaa:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800efac:	69bb      	ldr	r3, [r7, #24]
 800efae:	881a      	ldrh	r2, [r3, #0]
 800efb0:	8afb      	ldrh	r3, [r7, #22]
 800efb2:	1ad3      	subs	r3, r2, r3
 800efb4:	b29b      	uxth	r3, r3
 800efb6:	3b08      	subs	r3, #8
 800efb8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800efba:	8bfa      	ldrh	r2, [r7, #30]
 800efbc:	8abb      	ldrh	r3, [r7, #20]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d906      	bls.n	800efd0 <mem_trim+0xb0>
 800efc2:	4b55      	ldr	r3, [pc, #340]	; (800f118 <mem_trim+0x1f8>)
 800efc4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800efc8:	4956      	ldr	r1, [pc, #344]	; (800f124 <mem_trim+0x204>)
 800efca:	4855      	ldr	r0, [pc, #340]	; (800f120 <mem_trim+0x200>)
 800efcc:	f00b ff0c 	bl	801ade8 <iprintf>
  if (newsize > size) {
 800efd0:	8bfa      	ldrh	r2, [r7, #30]
 800efd2:	8abb      	ldrh	r3, [r7, #20]
 800efd4:	429a      	cmp	r2, r3
 800efd6:	d901      	bls.n	800efdc <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800efd8:	2300      	movs	r3, #0
 800efda:	e095      	b.n	800f108 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800efdc:	8bfa      	ldrh	r2, [r7, #30]
 800efde:	8abb      	ldrh	r3, [r7, #20]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d101      	bne.n	800efe8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	e08f      	b.n	800f108 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800efe8:	484f      	ldr	r0, [pc, #316]	; (800f128 <mem_trim+0x208>)
 800efea:	f00a fe91 	bl	8019d10 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800efee:	69bb      	ldr	r3, [r7, #24]
 800eff0:	881b      	ldrh	r3, [r3, #0]
 800eff2:	4618      	mov	r0, r3
 800eff4:	f7ff fdb0 	bl	800eb58 <ptr_to_mem>
 800eff8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800effa:	693b      	ldr	r3, [r7, #16]
 800effc:	791b      	ldrb	r3, [r3, #4]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d13f      	bne.n	800f082 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f002:	69bb      	ldr	r3, [r7, #24]
 800f004:	881b      	ldrh	r3, [r3, #0]
 800f006:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f00a:	d106      	bne.n	800f01a <mem_trim+0xfa>
 800f00c:	4b42      	ldr	r3, [pc, #264]	; (800f118 <mem_trim+0x1f8>)
 800f00e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800f012:	4946      	ldr	r1, [pc, #280]	; (800f12c <mem_trim+0x20c>)
 800f014:	4842      	ldr	r0, [pc, #264]	; (800f120 <mem_trim+0x200>)
 800f016:	f00b fee7 	bl	801ade8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f01a:	693b      	ldr	r3, [r7, #16]
 800f01c:	881b      	ldrh	r3, [r3, #0]
 800f01e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f020:	8afa      	ldrh	r2, [r7, #22]
 800f022:	8bfb      	ldrh	r3, [r7, #30]
 800f024:	4413      	add	r3, r2
 800f026:	b29b      	uxth	r3, r3
 800f028:	3308      	adds	r3, #8
 800f02a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f02c:	4b40      	ldr	r3, [pc, #256]	; (800f130 <mem_trim+0x210>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	693a      	ldr	r2, [r7, #16]
 800f032:	429a      	cmp	r2, r3
 800f034:	d106      	bne.n	800f044 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800f036:	89fb      	ldrh	r3, [r7, #14]
 800f038:	4618      	mov	r0, r3
 800f03a:	f7ff fd8d 	bl	800eb58 <ptr_to_mem>
 800f03e:	4602      	mov	r2, r0
 800f040:	4b3b      	ldr	r3, [pc, #236]	; (800f130 <mem_trim+0x210>)
 800f042:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f044:	89fb      	ldrh	r3, [r7, #14]
 800f046:	4618      	mov	r0, r3
 800f048:	f7ff fd86 	bl	800eb58 <ptr_to_mem>
 800f04c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	2200      	movs	r2, #0
 800f052:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f054:	693b      	ldr	r3, [r7, #16]
 800f056:	89ba      	ldrh	r2, [r7, #12]
 800f058:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f05a:	693b      	ldr	r3, [r7, #16]
 800f05c:	8afa      	ldrh	r2, [r7, #22]
 800f05e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f060:	69bb      	ldr	r3, [r7, #24]
 800f062:	89fa      	ldrh	r2, [r7, #14]
 800f064:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f066:	693b      	ldr	r3, [r7, #16]
 800f068:	881b      	ldrh	r3, [r3, #0]
 800f06a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f06e:	d047      	beq.n	800f100 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	881b      	ldrh	r3, [r3, #0]
 800f074:	4618      	mov	r0, r3
 800f076:	f7ff fd6f 	bl	800eb58 <ptr_to_mem>
 800f07a:	4602      	mov	r2, r0
 800f07c:	89fb      	ldrh	r3, [r7, #14]
 800f07e:	8053      	strh	r3, [r2, #2]
 800f080:	e03e      	b.n	800f100 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f082:	8bfb      	ldrh	r3, [r7, #30]
 800f084:	f103 0214 	add.w	r2, r3, #20
 800f088:	8abb      	ldrh	r3, [r7, #20]
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d838      	bhi.n	800f100 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f08e:	8afa      	ldrh	r2, [r7, #22]
 800f090:	8bfb      	ldrh	r3, [r7, #30]
 800f092:	4413      	add	r3, r2
 800f094:	b29b      	uxth	r3, r3
 800f096:	3308      	adds	r3, #8
 800f098:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f09a:	69bb      	ldr	r3, [r7, #24]
 800f09c:	881b      	ldrh	r3, [r3, #0]
 800f09e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f0a2:	d106      	bne.n	800f0b2 <mem_trim+0x192>
 800f0a4:	4b1c      	ldr	r3, [pc, #112]	; (800f118 <mem_trim+0x1f8>)
 800f0a6:	f240 3216 	movw	r2, #790	; 0x316
 800f0aa:	4920      	ldr	r1, [pc, #128]	; (800f12c <mem_trim+0x20c>)
 800f0ac:	481c      	ldr	r0, [pc, #112]	; (800f120 <mem_trim+0x200>)
 800f0ae:	f00b fe9b 	bl	801ade8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f0b2:	89fb      	ldrh	r3, [r7, #14]
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f7ff fd4f 	bl	800eb58 <ptr_to_mem>
 800f0ba:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f0bc:	4b1c      	ldr	r3, [pc, #112]	; (800f130 <mem_trim+0x210>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	693a      	ldr	r2, [r7, #16]
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d202      	bcs.n	800f0cc <mem_trim+0x1ac>
      lfree = mem2;
 800f0c6:	4a1a      	ldr	r2, [pc, #104]	; (800f130 <mem_trim+0x210>)
 800f0c8:	693b      	ldr	r3, [r7, #16]
 800f0ca:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f0cc:	693b      	ldr	r3, [r7, #16]
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f0d2:	69bb      	ldr	r3, [r7, #24]
 800f0d4:	881a      	ldrh	r2, [r3, #0]
 800f0d6:	693b      	ldr	r3, [r7, #16]
 800f0d8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f0da:	693b      	ldr	r3, [r7, #16]
 800f0dc:	8afa      	ldrh	r2, [r7, #22]
 800f0de:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f0e0:	69bb      	ldr	r3, [r7, #24]
 800f0e2:	89fa      	ldrh	r2, [r7, #14]
 800f0e4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f0e6:	693b      	ldr	r3, [r7, #16]
 800f0e8:	881b      	ldrh	r3, [r3, #0]
 800f0ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f0ee:	d007      	beq.n	800f100 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	881b      	ldrh	r3, [r3, #0]
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7ff fd2f 	bl	800eb58 <ptr_to_mem>
 800f0fa:	4602      	mov	r2, r0
 800f0fc:	89fb      	ldrh	r3, [r7, #14]
 800f0fe:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f100:	4809      	ldr	r0, [pc, #36]	; (800f128 <mem_trim+0x208>)
 800f102:	f00a fe14 	bl	8019d2e <sys_mutex_unlock>
  return rmem;
 800f106:	687b      	ldr	r3, [r7, #4]
}
 800f108:	4618      	mov	r0, r3
 800f10a:	3720      	adds	r7, #32
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}
 800f110:	2000084c 	.word	0x2000084c
 800f114:	20000850 	.word	0x20000850
 800f118:	08020428 	.word	0x08020428
 800f11c:	080205b4 	.word	0x080205b4
 800f120:	08020470 	.word	0x08020470
 800f124:	080205cc 	.word	0x080205cc
 800f128:	20000854 	.word	0x20000854
 800f12c:	080205ec 	.word	0x080205ec
 800f130:	20000858 	.word	0x20000858

0800f134 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b088      	sub	sp, #32
 800f138:	af00      	add	r7, sp, #0
 800f13a:	4603      	mov	r3, r0
 800f13c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f13e:	88fb      	ldrh	r3, [r7, #6]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d101      	bne.n	800f148 <mem_malloc+0x14>
    return NULL;
 800f144:	2300      	movs	r3, #0
 800f146:	e0e2      	b.n	800f30e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f148:	88fb      	ldrh	r3, [r7, #6]
 800f14a:	3303      	adds	r3, #3
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	f023 0303 	bic.w	r3, r3, #3
 800f152:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f154:	8bbb      	ldrh	r3, [r7, #28]
 800f156:	2b0b      	cmp	r3, #11
 800f158:	d801      	bhi.n	800f15e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f15a:	230c      	movs	r3, #12
 800f15c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f15e:	8bbb      	ldrh	r3, [r7, #28]
 800f160:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f164:	d803      	bhi.n	800f16e <mem_malloc+0x3a>
 800f166:	8bba      	ldrh	r2, [r7, #28]
 800f168:	88fb      	ldrh	r3, [r7, #6]
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d201      	bcs.n	800f172 <mem_malloc+0x3e>
    return NULL;
 800f16e:	2300      	movs	r3, #0
 800f170:	e0cd      	b.n	800f30e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f172:	4869      	ldr	r0, [pc, #420]	; (800f318 <mem_malloc+0x1e4>)
 800f174:	f00a fdcc 	bl	8019d10 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f178:	4b68      	ldr	r3, [pc, #416]	; (800f31c <mem_malloc+0x1e8>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	4618      	mov	r0, r3
 800f17e:	f7ff fcfd 	bl	800eb7c <mem_to_ptr>
 800f182:	4603      	mov	r3, r0
 800f184:	83fb      	strh	r3, [r7, #30]
 800f186:	e0b7      	b.n	800f2f8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f188:	8bfb      	ldrh	r3, [r7, #30]
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7ff fce4 	bl	800eb58 <ptr_to_mem>
 800f190:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	791b      	ldrb	r3, [r3, #4]
 800f196:	2b00      	cmp	r3, #0
 800f198:	f040 80a7 	bne.w	800f2ea <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	881b      	ldrh	r3, [r3, #0]
 800f1a0:	461a      	mov	r2, r3
 800f1a2:	8bfb      	ldrh	r3, [r7, #30]
 800f1a4:	1ad3      	subs	r3, r2, r3
 800f1a6:	f1a3 0208 	sub.w	r2, r3, #8
 800f1aa:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	f0c0 809c 	bcc.w	800f2ea <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	881b      	ldrh	r3, [r3, #0]
 800f1b6:	461a      	mov	r2, r3
 800f1b8:	8bfb      	ldrh	r3, [r7, #30]
 800f1ba:	1ad3      	subs	r3, r2, r3
 800f1bc:	f1a3 0208 	sub.w	r2, r3, #8
 800f1c0:	8bbb      	ldrh	r3, [r7, #28]
 800f1c2:	3314      	adds	r3, #20
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d333      	bcc.n	800f230 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f1c8:	8bfa      	ldrh	r2, [r7, #30]
 800f1ca:	8bbb      	ldrh	r3, [r7, #28]
 800f1cc:	4413      	add	r3, r2
 800f1ce:	b29b      	uxth	r3, r3
 800f1d0:	3308      	adds	r3, #8
 800f1d2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f1d4:	8a7b      	ldrh	r3, [r7, #18]
 800f1d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f1da:	d106      	bne.n	800f1ea <mem_malloc+0xb6>
 800f1dc:	4b50      	ldr	r3, [pc, #320]	; (800f320 <mem_malloc+0x1ec>)
 800f1de:	f240 3287 	movw	r2, #903	; 0x387
 800f1e2:	4950      	ldr	r1, [pc, #320]	; (800f324 <mem_malloc+0x1f0>)
 800f1e4:	4850      	ldr	r0, [pc, #320]	; (800f328 <mem_malloc+0x1f4>)
 800f1e6:	f00b fdff 	bl	801ade8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f1ea:	8a7b      	ldrh	r3, [r7, #18]
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7ff fcb3 	bl	800eb58 <ptr_to_mem>
 800f1f2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	881a      	ldrh	r2, [r3, #0]
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	8bfa      	ldrh	r2, [r7, #30]
 800f206:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	8a7a      	ldrh	r2, [r7, #18]
 800f20c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	2201      	movs	r2, #1
 800f212:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	881b      	ldrh	r3, [r3, #0]
 800f218:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f21c:	d00b      	beq.n	800f236 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	881b      	ldrh	r3, [r3, #0]
 800f222:	4618      	mov	r0, r3
 800f224:	f7ff fc98 	bl	800eb58 <ptr_to_mem>
 800f228:	4602      	mov	r2, r0
 800f22a:	8a7b      	ldrh	r3, [r7, #18]
 800f22c:	8053      	strh	r3, [r2, #2]
 800f22e:	e002      	b.n	800f236 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	2201      	movs	r2, #1
 800f234:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f236:	4b39      	ldr	r3, [pc, #228]	; (800f31c <mem_malloc+0x1e8>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	697a      	ldr	r2, [r7, #20]
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d127      	bne.n	800f290 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800f240:	4b36      	ldr	r3, [pc, #216]	; (800f31c <mem_malloc+0x1e8>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f246:	e005      	b.n	800f254 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f248:	69bb      	ldr	r3, [r7, #24]
 800f24a:	881b      	ldrh	r3, [r3, #0]
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7ff fc83 	bl	800eb58 <ptr_to_mem>
 800f252:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f254:	69bb      	ldr	r3, [r7, #24]
 800f256:	791b      	ldrb	r3, [r3, #4]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d004      	beq.n	800f266 <mem_malloc+0x132>
 800f25c:	4b33      	ldr	r3, [pc, #204]	; (800f32c <mem_malloc+0x1f8>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	69ba      	ldr	r2, [r7, #24]
 800f262:	429a      	cmp	r2, r3
 800f264:	d1f0      	bne.n	800f248 <mem_malloc+0x114>
          }
          lfree = cur;
 800f266:	4a2d      	ldr	r2, [pc, #180]	; (800f31c <mem_malloc+0x1e8>)
 800f268:	69bb      	ldr	r3, [r7, #24]
 800f26a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f26c:	4b2b      	ldr	r3, [pc, #172]	; (800f31c <mem_malloc+0x1e8>)
 800f26e:	681a      	ldr	r2, [r3, #0]
 800f270:	4b2e      	ldr	r3, [pc, #184]	; (800f32c <mem_malloc+0x1f8>)
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	429a      	cmp	r2, r3
 800f276:	d00b      	beq.n	800f290 <mem_malloc+0x15c>
 800f278:	4b28      	ldr	r3, [pc, #160]	; (800f31c <mem_malloc+0x1e8>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	791b      	ldrb	r3, [r3, #4]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d006      	beq.n	800f290 <mem_malloc+0x15c>
 800f282:	4b27      	ldr	r3, [pc, #156]	; (800f320 <mem_malloc+0x1ec>)
 800f284:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f288:	4929      	ldr	r1, [pc, #164]	; (800f330 <mem_malloc+0x1fc>)
 800f28a:	4827      	ldr	r0, [pc, #156]	; (800f328 <mem_malloc+0x1f4>)
 800f28c:	f00b fdac 	bl	801ade8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f290:	4821      	ldr	r0, [pc, #132]	; (800f318 <mem_malloc+0x1e4>)
 800f292:	f00a fd4c 	bl	8019d2e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f296:	8bba      	ldrh	r2, [r7, #28]
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	4413      	add	r3, r2
 800f29c:	3308      	adds	r3, #8
 800f29e:	4a23      	ldr	r2, [pc, #140]	; (800f32c <mem_malloc+0x1f8>)
 800f2a0:	6812      	ldr	r2, [r2, #0]
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	d906      	bls.n	800f2b4 <mem_malloc+0x180>
 800f2a6:	4b1e      	ldr	r3, [pc, #120]	; (800f320 <mem_malloc+0x1ec>)
 800f2a8:	f240 32ba 	movw	r2, #954	; 0x3ba
 800f2ac:	4921      	ldr	r1, [pc, #132]	; (800f334 <mem_malloc+0x200>)
 800f2ae:	481e      	ldr	r0, [pc, #120]	; (800f328 <mem_malloc+0x1f4>)
 800f2b0:	f00b fd9a 	bl	801ade8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	f003 0303 	and.w	r3, r3, #3
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d006      	beq.n	800f2cc <mem_malloc+0x198>
 800f2be:	4b18      	ldr	r3, [pc, #96]	; (800f320 <mem_malloc+0x1ec>)
 800f2c0:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800f2c4:	491c      	ldr	r1, [pc, #112]	; (800f338 <mem_malloc+0x204>)
 800f2c6:	4818      	ldr	r0, [pc, #96]	; (800f328 <mem_malloc+0x1f4>)
 800f2c8:	f00b fd8e 	bl	801ade8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	f003 0303 	and.w	r3, r3, #3
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d006      	beq.n	800f2e4 <mem_malloc+0x1b0>
 800f2d6:	4b12      	ldr	r3, [pc, #72]	; (800f320 <mem_malloc+0x1ec>)
 800f2d8:	f240 32be 	movw	r2, #958	; 0x3be
 800f2dc:	4917      	ldr	r1, [pc, #92]	; (800f33c <mem_malloc+0x208>)
 800f2de:	4812      	ldr	r0, [pc, #72]	; (800f328 <mem_malloc+0x1f4>)
 800f2e0:	f00b fd82 	bl	801ade8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	3308      	adds	r3, #8
 800f2e8:	e011      	b.n	800f30e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800f2ea:	8bfb      	ldrh	r3, [r7, #30]
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f7ff fc33 	bl	800eb58 <ptr_to_mem>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	881b      	ldrh	r3, [r3, #0]
 800f2f6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f2f8:	8bfa      	ldrh	r2, [r7, #30]
 800f2fa:	8bbb      	ldrh	r3, [r7, #28]
 800f2fc:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800f300:	429a      	cmp	r2, r3
 800f302:	f4ff af41 	bcc.w	800f188 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f306:	4804      	ldr	r0, [pc, #16]	; (800f318 <mem_malloc+0x1e4>)
 800f308:	f00a fd11 	bl	8019d2e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f30c:	2300      	movs	r3, #0
}
 800f30e:	4618      	mov	r0, r3
 800f310:	3720      	adds	r7, #32
 800f312:	46bd      	mov	sp, r7
 800f314:	bd80      	pop	{r7, pc}
 800f316:	bf00      	nop
 800f318:	20000854 	.word	0x20000854
 800f31c:	20000858 	.word	0x20000858
 800f320:	08020428 	.word	0x08020428
 800f324:	080205ec 	.word	0x080205ec
 800f328:	08020470 	.word	0x08020470
 800f32c:	20000850 	.word	0x20000850
 800f330:	08020600 	.word	0x08020600
 800f334:	0802061c 	.word	0x0802061c
 800f338:	0802064c 	.word	0x0802064c
 800f33c:	0802067c 	.word	0x0802067c

0800f340 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f340:	b480      	push	{r7}
 800f342:	b085      	sub	sp, #20
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	689b      	ldr	r3, [r3, #8]
 800f34c:	2200      	movs	r2, #0
 800f34e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	3303      	adds	r3, #3
 800f356:	f023 0303 	bic.w	r3, r3, #3
 800f35a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f35c:	2300      	movs	r3, #0
 800f35e:	60fb      	str	r3, [r7, #12]
 800f360:	e011      	b.n	800f386 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	689b      	ldr	r3, [r3, #8]
 800f366:	681a      	ldr	r2, [r3, #0]
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	689b      	ldr	r3, [r3, #8]
 800f370:	68ba      	ldr	r2, [r7, #8]
 800f372:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	881b      	ldrh	r3, [r3, #0]
 800f378:	461a      	mov	r2, r3
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	4413      	add	r3, r2
 800f37e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	3301      	adds	r3, #1
 800f384:	60fb      	str	r3, [r7, #12]
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	885b      	ldrh	r3, [r3, #2]
 800f38a:	461a      	mov	r2, r3
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	4293      	cmp	r3, r2
 800f390:	dbe7      	blt.n	800f362 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f392:	bf00      	nop
 800f394:	3714      	adds	r7, #20
 800f396:	46bd      	mov	sp, r7
 800f398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39c:	4770      	bx	lr
	...

0800f3a0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b082      	sub	sp, #8
 800f3a4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	80fb      	strh	r3, [r7, #6]
 800f3aa:	e009      	b.n	800f3c0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f3ac:	88fb      	ldrh	r3, [r7, #6]
 800f3ae:	4a08      	ldr	r2, [pc, #32]	; (800f3d0 <memp_init+0x30>)
 800f3b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f7ff ffc3 	bl	800f340 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f3ba:	88fb      	ldrh	r3, [r7, #6]
 800f3bc:	3301      	adds	r3, #1
 800f3be:	80fb      	strh	r3, [r7, #6]
 800f3c0:	88fb      	ldrh	r3, [r7, #6]
 800f3c2:	2b0c      	cmp	r3, #12
 800f3c4:	d9f2      	bls.n	800f3ac <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f3c6:	bf00      	nop
 800f3c8:	3708      	adds	r7, #8
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}
 800f3ce:	bf00      	nop
 800f3d0:	08024688 	.word	0x08024688

0800f3d4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b084      	sub	sp, #16
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f3dc:	f00a fcda 	bl	8019d94 <sys_arch_protect>
 800f3e0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	689b      	ldr	r3, [r3, #8]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d015      	beq.n	800f41c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	689b      	ldr	r3, [r3, #8]
 800f3f4:	68ba      	ldr	r2, [r7, #8]
 800f3f6:	6812      	ldr	r2, [r2, #0]
 800f3f8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	f003 0303 	and.w	r3, r3, #3
 800f400:	2b00      	cmp	r3, #0
 800f402:	d006      	beq.n	800f412 <do_memp_malloc_pool+0x3e>
 800f404:	4b09      	ldr	r3, [pc, #36]	; (800f42c <do_memp_malloc_pool+0x58>)
 800f406:	f240 1219 	movw	r2, #281	; 0x119
 800f40a:	4909      	ldr	r1, [pc, #36]	; (800f430 <do_memp_malloc_pool+0x5c>)
 800f40c:	4809      	ldr	r0, [pc, #36]	; (800f434 <do_memp_malloc_pool+0x60>)
 800f40e:	f00b fceb 	bl	801ade8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f412:	68f8      	ldr	r0, [r7, #12]
 800f414:	f00a fccc 	bl	8019db0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	e003      	b.n	800f424 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f41c:	68f8      	ldr	r0, [r7, #12]
 800f41e:	f00a fcc7 	bl	8019db0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f422:	2300      	movs	r3, #0
}
 800f424:	4618      	mov	r0, r3
 800f426:	3710      	adds	r7, #16
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}
 800f42c:	080206a0 	.word	0x080206a0
 800f430:	080206d0 	.word	0x080206d0
 800f434:	080206f4 	.word	0x080206f4

0800f438 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b084      	sub	sp, #16
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	4603      	mov	r3, r0
 800f440:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f442:	79fb      	ldrb	r3, [r7, #7]
 800f444:	2b0c      	cmp	r3, #12
 800f446:	d908      	bls.n	800f45a <memp_malloc+0x22>
 800f448:	4b0a      	ldr	r3, [pc, #40]	; (800f474 <memp_malloc+0x3c>)
 800f44a:	f240 1257 	movw	r2, #343	; 0x157
 800f44e:	490a      	ldr	r1, [pc, #40]	; (800f478 <memp_malloc+0x40>)
 800f450:	480a      	ldr	r0, [pc, #40]	; (800f47c <memp_malloc+0x44>)
 800f452:	f00b fcc9 	bl	801ade8 <iprintf>
 800f456:	2300      	movs	r3, #0
 800f458:	e008      	b.n	800f46c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f45a:	79fb      	ldrb	r3, [r7, #7]
 800f45c:	4a08      	ldr	r2, [pc, #32]	; (800f480 <memp_malloc+0x48>)
 800f45e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f462:	4618      	mov	r0, r3
 800f464:	f7ff ffb6 	bl	800f3d4 <do_memp_malloc_pool>
 800f468:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f46a:	68fb      	ldr	r3, [r7, #12]
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	3710      	adds	r7, #16
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}
 800f474:	080206a0 	.word	0x080206a0
 800f478:	08020730 	.word	0x08020730
 800f47c:	080206f4 	.word	0x080206f4
 800f480:	08024688 	.word	0x08024688

0800f484 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b084      	sub	sp, #16
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	f003 0303 	and.w	r3, r3, #3
 800f494:	2b00      	cmp	r3, #0
 800f496:	d006      	beq.n	800f4a6 <do_memp_free_pool+0x22>
 800f498:	4b0d      	ldr	r3, [pc, #52]	; (800f4d0 <do_memp_free_pool+0x4c>)
 800f49a:	f240 126d 	movw	r2, #365	; 0x16d
 800f49e:	490d      	ldr	r1, [pc, #52]	; (800f4d4 <do_memp_free_pool+0x50>)
 800f4a0:	480d      	ldr	r0, [pc, #52]	; (800f4d8 <do_memp_free_pool+0x54>)
 800f4a2:	f00b fca1 	bl	801ade8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800f4aa:	f00a fc73 	bl	8019d94 <sys_arch_protect>
 800f4ae:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	689b      	ldr	r3, [r3, #8]
 800f4b4:	681a      	ldr	r2, [r3, #0]
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	689b      	ldr	r3, [r3, #8]
 800f4be:	68fa      	ldr	r2, [r7, #12]
 800f4c0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800f4c2:	68b8      	ldr	r0, [r7, #8]
 800f4c4:	f00a fc74 	bl	8019db0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800f4c8:	bf00      	nop
 800f4ca:	3710      	adds	r7, #16
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}
 800f4d0:	080206a0 	.word	0x080206a0
 800f4d4:	08020750 	.word	0x08020750
 800f4d8:	080206f4 	.word	0x080206f4

0800f4dc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b082      	sub	sp, #8
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	6039      	str	r1, [r7, #0]
 800f4e6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f4e8:	79fb      	ldrb	r3, [r7, #7]
 800f4ea:	2b0c      	cmp	r3, #12
 800f4ec:	d907      	bls.n	800f4fe <memp_free+0x22>
 800f4ee:	4b0c      	ldr	r3, [pc, #48]	; (800f520 <memp_free+0x44>)
 800f4f0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800f4f4:	490b      	ldr	r1, [pc, #44]	; (800f524 <memp_free+0x48>)
 800f4f6:	480c      	ldr	r0, [pc, #48]	; (800f528 <memp_free+0x4c>)
 800f4f8:	f00b fc76 	bl	801ade8 <iprintf>
 800f4fc:	e00c      	b.n	800f518 <memp_free+0x3c>

  if (mem == NULL) {
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d008      	beq.n	800f516 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f504:	79fb      	ldrb	r3, [r7, #7]
 800f506:	4a09      	ldr	r2, [pc, #36]	; (800f52c <memp_free+0x50>)
 800f508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f50c:	6839      	ldr	r1, [r7, #0]
 800f50e:	4618      	mov	r0, r3
 800f510:	f7ff ffb8 	bl	800f484 <do_memp_free_pool>
 800f514:	e000      	b.n	800f518 <memp_free+0x3c>
    return;
 800f516:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f518:	3708      	adds	r7, #8
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}
 800f51e:	bf00      	nop
 800f520:	080206a0 	.word	0x080206a0
 800f524:	08020770 	.word	0x08020770
 800f528:	080206f4 	.word	0x080206f4
 800f52c:	08024688 	.word	0x08024688

0800f530 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f530:	b480      	push	{r7}
 800f532:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f534:	bf00      	nop
 800f536:	46bd      	mov	sp, r7
 800f538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53c:	4770      	bx	lr
	...

0800f540 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b086      	sub	sp, #24
 800f544:	af00      	add	r7, sp, #0
 800f546:	60f8      	str	r0, [r7, #12]
 800f548:	60b9      	str	r1, [r7, #8]
 800f54a:	607a      	str	r2, [r7, #4]
 800f54c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d108      	bne.n	800f566 <netif_add+0x26>
 800f554:	4b56      	ldr	r3, [pc, #344]	; (800f6b0 <netif_add+0x170>)
 800f556:	f240 1227 	movw	r2, #295	; 0x127
 800f55a:	4956      	ldr	r1, [pc, #344]	; (800f6b4 <netif_add+0x174>)
 800f55c:	4856      	ldr	r0, [pc, #344]	; (800f6b8 <netif_add+0x178>)
 800f55e:	f00b fc43 	bl	801ade8 <iprintf>
 800f562:	2300      	movs	r3, #0
 800f564:	e09f      	b.n	800f6a6 <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d108      	bne.n	800f57e <netif_add+0x3e>
 800f56c:	4b50      	ldr	r3, [pc, #320]	; (800f6b0 <netif_add+0x170>)
 800f56e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f572:	4952      	ldr	r1, [pc, #328]	; (800f6bc <netif_add+0x17c>)
 800f574:	4850      	ldr	r0, [pc, #320]	; (800f6b8 <netif_add+0x178>)
 800f576:	f00b fc37 	bl	801ade8 <iprintf>
 800f57a:	2300      	movs	r3, #0
 800f57c:	e093      	b.n	800f6a6 <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d101      	bne.n	800f588 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f584:	4b4e      	ldr	r3, [pc, #312]	; (800f6c0 <netif_add+0x180>)
 800f586:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d101      	bne.n	800f592 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f58e:	4b4c      	ldr	r3, [pc, #304]	; (800f6c0 <netif_add+0x180>)
 800f590:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d101      	bne.n	800f59c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800f598:	4b49      	ldr	r3, [pc, #292]	; (800f6c0 <netif_add+0x180>)
 800f59a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	4a44      	ldr	r2, [pc, #272]	; (800f6c4 <netif_add+0x184>)
 800f5b2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	6a3a      	ldr	r2, [r7, #32]
 800f5c6:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 800f5c8:	4b3f      	ldr	r3, [pc, #252]	; (800f6c8 <netif_add+0x188>)
 800f5ca:	781a      	ldrb	r2, [r3, #0]
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5d6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	687a      	ldr	r2, [r7, #4]
 800f5dc:	68b9      	ldr	r1, [r7, #8]
 800f5de:	68f8      	ldr	r0, [r7, #12]
 800f5e0:	f000 f914 	bl	800f80c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e6:	68f8      	ldr	r0, [r7, #12]
 800f5e8:	4798      	blx	r3
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d001      	beq.n	800f5f4 <netif_add+0xb4>
    return NULL;
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	e058      	b.n	800f6a6 <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f5fa:	2bff      	cmp	r3, #255	; 0xff
 800f5fc:	d103      	bne.n	800f606 <netif_add+0xc6>
        netif->num = 0;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	2200      	movs	r2, #0
 800f602:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 800f606:	2300      	movs	r3, #0
 800f608:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f60a:	4b30      	ldr	r3, [pc, #192]	; (800f6cc <netif_add+0x18c>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	617b      	str	r3, [r7, #20]
 800f610:	e02b      	b.n	800f66a <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800f612:	697a      	ldr	r2, [r7, #20]
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	429a      	cmp	r2, r3
 800f618:	d106      	bne.n	800f628 <netif_add+0xe8>
 800f61a:	4b25      	ldr	r3, [pc, #148]	; (800f6b0 <netif_add+0x170>)
 800f61c:	f240 128b 	movw	r2, #395	; 0x18b
 800f620:	492b      	ldr	r1, [pc, #172]	; (800f6d0 <netif_add+0x190>)
 800f622:	4825      	ldr	r0, [pc, #148]	; (800f6b8 <netif_add+0x178>)
 800f624:	f00b fbe0 	bl	801ade8 <iprintf>
        num_netifs++;
 800f628:	693b      	ldr	r3, [r7, #16]
 800f62a:	3301      	adds	r3, #1
 800f62c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	2bff      	cmp	r3, #255	; 0xff
 800f632:	dd06      	ble.n	800f642 <netif_add+0x102>
 800f634:	4b1e      	ldr	r3, [pc, #120]	; (800f6b0 <netif_add+0x170>)
 800f636:	f240 128d 	movw	r2, #397	; 0x18d
 800f63a:	4926      	ldr	r1, [pc, #152]	; (800f6d4 <netif_add+0x194>)
 800f63c:	481e      	ldr	r0, [pc, #120]	; (800f6b8 <netif_add+0x178>)
 800f63e:	f00b fbd3 	bl	801ade8 <iprintf>
        if (netif2->num == netif->num) {
 800f642:	697b      	ldr	r3, [r7, #20]
 800f644:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f64e:	429a      	cmp	r2, r3
 800f650:	d108      	bne.n	800f664 <netif_add+0x124>
          netif->num++;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f658:	3301      	adds	r3, #1
 800f65a:	b2da      	uxtb	r2, r3
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 800f662:	e005      	b.n	800f670 <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	617b      	str	r3, [r7, #20]
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d1d0      	bne.n	800f612 <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d1be      	bne.n	800f5f4 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f67c:	2bfe      	cmp	r3, #254	; 0xfe
 800f67e:	d103      	bne.n	800f688 <netif_add+0x148>
    netif_num = 0;
 800f680:	4b11      	ldr	r3, [pc, #68]	; (800f6c8 <netif_add+0x188>)
 800f682:	2200      	movs	r2, #0
 800f684:	701a      	strb	r2, [r3, #0]
 800f686:	e006      	b.n	800f696 <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f68e:	3301      	adds	r3, #1
 800f690:	b2da      	uxtb	r2, r3
 800f692:	4b0d      	ldr	r3, [pc, #52]	; (800f6c8 <netif_add+0x188>)
 800f694:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f696:	4b0d      	ldr	r3, [pc, #52]	; (800f6cc <netif_add+0x18c>)
 800f698:	681a      	ldr	r2, [r3, #0]
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f69e:	4a0b      	ldr	r2, [pc, #44]	; (800f6cc <netif_add+0x18c>)
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3718      	adds	r7, #24
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	0802078c 	.word	0x0802078c
 800f6b4:	08020820 	.word	0x08020820
 800f6b8:	080207dc 	.word	0x080207dc
 800f6bc:	0802083c 	.word	0x0802083c
 800f6c0:	080246fc 	.word	0x080246fc
 800f6c4:	0800f9fd 	.word	0x0800f9fd
 800f6c8:	20000890 	.word	0x20000890
 800f6cc:	20007c8c 	.word	0x20007c8c
 800f6d0:	08020860 	.word	0x08020860
 800f6d4:	08020874 	.word	0x08020874

0800f6d8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b082      	sub	sp, #8
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
 800f6e0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800f6e2:	6839      	ldr	r1, [r7, #0]
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f002 fd8d 	bl	8012204 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800f6ea:	6839      	ldr	r1, [r7, #0]
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f007 fea3 	bl	8017438 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800f6f2:	bf00      	nop
 800f6f4:	3708      	adds	r7, #8
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}
	...

0800f6fc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b086      	sub	sp, #24
 800f700:	af00      	add	r7, sp, #0
 800f702:	60f8      	str	r0, [r7, #12]
 800f704:	60b9      	str	r1, [r7, #8]
 800f706:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d106      	bne.n	800f71c <netif_do_set_ipaddr+0x20>
 800f70e:	4b1d      	ldr	r3, [pc, #116]	; (800f784 <netif_do_set_ipaddr+0x88>)
 800f710:	f240 12cb 	movw	r2, #459	; 0x1cb
 800f714:	491c      	ldr	r1, [pc, #112]	; (800f788 <netif_do_set_ipaddr+0x8c>)
 800f716:	481d      	ldr	r0, [pc, #116]	; (800f78c <netif_do_set_ipaddr+0x90>)
 800f718:	f00b fb66 	bl	801ade8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d106      	bne.n	800f730 <netif_do_set_ipaddr+0x34>
 800f722:	4b18      	ldr	r3, [pc, #96]	; (800f784 <netif_do_set_ipaddr+0x88>)
 800f724:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800f728:	4917      	ldr	r1, [pc, #92]	; (800f788 <netif_do_set_ipaddr+0x8c>)
 800f72a:	4818      	ldr	r0, [pc, #96]	; (800f78c <netif_do_set_ipaddr+0x90>)
 800f72c:	f00b fb5c 	bl	801ade8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	681a      	ldr	r2, [r3, #0]
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	3304      	adds	r3, #4
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	429a      	cmp	r2, r3
 800f73c:	d01c      	beq.n	800f778 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	3304      	adds	r3, #4
 800f748:	681a      	ldr	r2, [r3, #0]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800f74e:	f107 0314 	add.w	r3, r7, #20
 800f752:	4619      	mov	r1, r3
 800f754:	6878      	ldr	r0, [r7, #4]
 800f756:	f7ff ffbf 	bl	800f6d8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d002      	beq.n	800f766 <netif_do_set_ipaddr+0x6a>
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	e000      	b.n	800f768 <netif_do_set_ipaddr+0x6c>
 800f766:	2300      	movs	r3, #0
 800f768:	68fa      	ldr	r2, [r7, #12]
 800f76a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f76c:	2101      	movs	r1, #1
 800f76e:	68f8      	ldr	r0, [r7, #12]
 800f770:	f000 f8d2 	bl	800f918 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800f774:	2301      	movs	r3, #1
 800f776:	e000      	b.n	800f77a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800f778:	2300      	movs	r3, #0
}
 800f77a:	4618      	mov	r0, r3
 800f77c:	3718      	adds	r7, #24
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}
 800f782:	bf00      	nop
 800f784:	0802078c 	.word	0x0802078c
 800f788:	080208a4 	.word	0x080208a4
 800f78c:	080207dc 	.word	0x080207dc

0800f790 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800f790:	b480      	push	{r7}
 800f792:	b085      	sub	sp, #20
 800f794:	af00      	add	r7, sp, #0
 800f796:	60f8      	str	r0, [r7, #12]
 800f798:	60b9      	str	r1, [r7, #8]
 800f79a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	681a      	ldr	r2, [r3, #0]
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	3308      	adds	r3, #8
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	d00a      	beq.n	800f7c0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d002      	beq.n	800f7b6 <netif_do_set_netmask+0x26>
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	e000      	b.n	800f7b8 <netif_do_set_netmask+0x28>
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	68fa      	ldr	r2, [r7, #12]
 800f7ba:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800f7bc:	2301      	movs	r3, #1
 800f7be:	e000      	b.n	800f7c2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800f7c0:	2300      	movs	r3, #0
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	3714      	adds	r7, #20
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7cc:	4770      	bx	lr

0800f7ce <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800f7ce:	b480      	push	{r7}
 800f7d0:	b085      	sub	sp, #20
 800f7d2:	af00      	add	r7, sp, #0
 800f7d4:	60f8      	str	r0, [r7, #12]
 800f7d6:	60b9      	str	r1, [r7, #8]
 800f7d8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	681a      	ldr	r2, [r3, #0]
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	330c      	adds	r3, #12
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d00a      	beq.n	800f7fe <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d002      	beq.n	800f7f4 <netif_do_set_gw+0x26>
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	e000      	b.n	800f7f6 <netif_do_set_gw+0x28>
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	68fa      	ldr	r2, [r7, #12]
 800f7f8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	e000      	b.n	800f800 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800f7fe:	2300      	movs	r3, #0
}
 800f800:	4618      	mov	r0, r3
 800f802:	3714      	adds	r7, #20
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr

0800f80c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b088      	sub	sp, #32
 800f810:	af00      	add	r7, sp, #0
 800f812:	60f8      	str	r0, [r7, #12]
 800f814:	60b9      	str	r1, [r7, #8]
 800f816:	607a      	str	r2, [r7, #4]
 800f818:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800f81a:	2300      	movs	r3, #0
 800f81c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800f81e:	2300      	movs	r3, #0
 800f820:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d101      	bne.n	800f82c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800f828:	4b1c      	ldr	r3, [pc, #112]	; (800f89c <netif_set_addr+0x90>)
 800f82a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d101      	bne.n	800f836 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800f832:	4b1a      	ldr	r3, [pc, #104]	; (800f89c <netif_set_addr+0x90>)
 800f834:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d101      	bne.n	800f840 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800f83c:	4b17      	ldr	r3, [pc, #92]	; (800f89c <netif_set_addr+0x90>)
 800f83e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d003      	beq.n	800f84e <netif_set_addr+0x42>
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d101      	bne.n	800f852 <netif_set_addr+0x46>
 800f84e:	2301      	movs	r3, #1
 800f850:	e000      	b.n	800f854 <netif_set_addr+0x48>
 800f852:	2300      	movs	r3, #0
 800f854:	617b      	str	r3, [r7, #20]
  if (remove) {
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d006      	beq.n	800f86a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f85c:	f107 0310 	add.w	r3, r7, #16
 800f860:	461a      	mov	r2, r3
 800f862:	68b9      	ldr	r1, [r7, #8]
 800f864:	68f8      	ldr	r0, [r7, #12]
 800f866:	f7ff ff49 	bl	800f6fc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800f86a:	69fa      	ldr	r2, [r7, #28]
 800f86c:	6879      	ldr	r1, [r7, #4]
 800f86e:	68f8      	ldr	r0, [r7, #12]
 800f870:	f7ff ff8e 	bl	800f790 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800f874:	69ba      	ldr	r2, [r7, #24]
 800f876:	6839      	ldr	r1, [r7, #0]
 800f878:	68f8      	ldr	r0, [r7, #12]
 800f87a:	f7ff ffa8 	bl	800f7ce <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d106      	bne.n	800f892 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f884:	f107 0310 	add.w	r3, r7, #16
 800f888:	461a      	mov	r2, r3
 800f88a:	68b9      	ldr	r1, [r7, #8]
 800f88c:	68f8      	ldr	r0, [r7, #12]
 800f88e:	f7ff ff35 	bl	800f6fc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800f892:	bf00      	nop
 800f894:	3720      	adds	r7, #32
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}
 800f89a:	bf00      	nop
 800f89c:	080246fc 	.word	0x080246fc

0800f8a0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	b083      	sub	sp, #12
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800f8a8:	4a04      	ldr	r2, [pc, #16]	; (800f8bc <netif_set_default+0x1c>)
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800f8ae:	bf00      	nop
 800f8b0:	370c      	adds	r7, #12
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b8:	4770      	bx	lr
 800f8ba:	bf00      	nop
 800f8bc:	20007c90 	.word	0x20007c90

0800f8c0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b082      	sub	sp, #8
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d107      	bne.n	800f8de <netif_set_up+0x1e>
 800f8ce:	4b0f      	ldr	r3, [pc, #60]	; (800f90c <netif_set_up+0x4c>)
 800f8d0:	f44f 7254 	mov.w	r2, #848	; 0x350
 800f8d4:	490e      	ldr	r1, [pc, #56]	; (800f910 <netif_set_up+0x50>)
 800f8d6:	480f      	ldr	r0, [pc, #60]	; (800f914 <netif_set_up+0x54>)
 800f8d8:	f00b fa86 	bl	801ade8 <iprintf>
 800f8dc:	e013      	b.n	800f906 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800f8e4:	f003 0301 	and.w	r3, r3, #1
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d10c      	bne.n	800f906 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800f8f2:	f043 0301 	orr.w	r3, r3, #1
 800f8f6:	b2da      	uxtb	r2, r3
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f8fe:	2103      	movs	r1, #3
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f000 f809 	bl	800f918 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800f906:	3708      	adds	r7, #8
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}
 800f90c:	0802078c 	.word	0x0802078c
 800f910:	08020914 	.word	0x08020914
 800f914:	080207dc 	.word	0x080207dc

0800f918 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b082      	sub	sp, #8
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
 800f920:	460b      	mov	r3, r1
 800f922:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d106      	bne.n	800f938 <netif_issue_reports+0x20>
 800f92a:	4b18      	ldr	r3, [pc, #96]	; (800f98c <netif_issue_reports+0x74>)
 800f92c:	f240 326d 	movw	r2, #877	; 0x36d
 800f930:	4917      	ldr	r1, [pc, #92]	; (800f990 <netif_issue_reports+0x78>)
 800f932:	4818      	ldr	r0, [pc, #96]	; (800f994 <netif_issue_reports+0x7c>)
 800f934:	f00b fa58 	bl	801ade8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800f93e:	f003 0304 	and.w	r3, r3, #4
 800f942:	2b00      	cmp	r3, #0
 800f944:	d01e      	beq.n	800f984 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800f94c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f950:	2b00      	cmp	r3, #0
 800f952:	d017      	beq.n	800f984 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f954:	78fb      	ldrb	r3, [r7, #3]
 800f956:	f003 0301 	and.w	r3, r3, #1
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d013      	beq.n	800f986 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	3304      	adds	r3, #4
 800f962:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f964:	2b00      	cmp	r3, #0
 800f966:	d00e      	beq.n	800f986 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800f96e:	f003 0308 	and.w	r3, r3, #8
 800f972:	2b00      	cmp	r3, #0
 800f974:	d007      	beq.n	800f986 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	3304      	adds	r3, #4
 800f97a:	4619      	mov	r1, r3
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	f008 fcc5 	bl	801830c <etharp_request>
 800f982:	e000      	b.n	800f986 <netif_issue_reports+0x6e>
    return;
 800f984:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800f986:	3708      	adds	r7, #8
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}
 800f98c:	0802078c 	.word	0x0802078c
 800f990:	08020930 	.word	0x08020930
 800f994:	080207dc 	.word	0x080207dc

0800f998 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b082      	sub	sp, #8
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d107      	bne.n	800f9b6 <netif_set_down+0x1e>
 800f9a6:	4b12      	ldr	r3, [pc, #72]	; (800f9f0 <netif_set_down+0x58>)
 800f9a8:	f240 329b 	movw	r2, #923	; 0x39b
 800f9ac:	4911      	ldr	r1, [pc, #68]	; (800f9f4 <netif_set_down+0x5c>)
 800f9ae:	4812      	ldr	r0, [pc, #72]	; (800f9f8 <netif_set_down+0x60>)
 800f9b0:	f00b fa1a 	bl	801ade8 <iprintf>
 800f9b4:	e019      	b.n	800f9ea <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800f9bc:	f003 0301 	and.w	r3, r3, #1
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d012      	beq.n	800f9ea <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800f9ca:	f023 0301 	bic.w	r3, r3, #1
 800f9ce:	b2da      	uxtb	r2, r3
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800f9dc:	f003 0308 	and.w	r3, r3, #8
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d002      	beq.n	800f9ea <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f008 f84f 	bl	8017a88 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800f9ea:	3708      	adds	r7, #8
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}
 800f9f0:	0802078c 	.word	0x0802078c
 800f9f4:	08020954 	.word	0x08020954
 800f9f8:	080207dc 	.word	0x080207dc

0800f9fc <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b085      	sub	sp, #20
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	60f8      	str	r0, [r7, #12]
 800fa04:	60b9      	str	r1, [r7, #8]
 800fa06:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800fa08:	f06f 030b 	mvn.w	r3, #11
}
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3714      	adds	r7, #20
 800fa10:	46bd      	mov	sp, r7
 800fa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa16:	4770      	bx	lr

0800fa18 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800fa18:	b480      	push	{r7}
 800fa1a:	b085      	sub	sp, #20
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	4603      	mov	r3, r0
 800fa20:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800fa22:	79fb      	ldrb	r3, [r7, #7]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d013      	beq.n	800fa50 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800fa28:	4b0d      	ldr	r3, [pc, #52]	; (800fa60 <netif_get_by_index+0x48>)
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	60fb      	str	r3, [r7, #12]
 800fa2e:	e00c      	b.n	800fa4a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fa36:	3301      	adds	r3, #1
 800fa38:	b2db      	uxtb	r3, r3
 800fa3a:	79fa      	ldrb	r2, [r7, #7]
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d101      	bne.n	800fa44 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	e006      	b.n	800fa52 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	60fb      	str	r3, [r7, #12]
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d1ef      	bne.n	800fa30 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800fa50:	2300      	movs	r3, #0
}
 800fa52:	4618      	mov	r0, r3
 800fa54:	3714      	adds	r7, #20
 800fa56:	46bd      	mov	sp, r7
 800fa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5c:	4770      	bx	lr
 800fa5e:	bf00      	nop
 800fa60:	20007c8c 	.word	0x20007c8c

0800fa64 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b082      	sub	sp, #8
 800fa68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800fa6a:	f00a f993 	bl	8019d94 <sys_arch_protect>
 800fa6e:	6038      	str	r0, [r7, #0]
 800fa70:	4b0d      	ldr	r3, [pc, #52]	; (800faa8 <pbuf_free_ooseq+0x44>)
 800fa72:	2200      	movs	r2, #0
 800fa74:	701a      	strb	r2, [r3, #0]
 800fa76:	6838      	ldr	r0, [r7, #0]
 800fa78:	f00a f99a 	bl	8019db0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fa7c:	4b0b      	ldr	r3, [pc, #44]	; (800faac <pbuf_free_ooseq+0x48>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	607b      	str	r3, [r7, #4]
 800fa82:	e00a      	b.n	800fa9a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d003      	beq.n	800fa94 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f002 fbf7 	bl	8012280 <tcp_free_ooseq>
      return;
 800fa92:	e005      	b.n	800faa0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	68db      	ldr	r3, [r3, #12]
 800fa98:	607b      	str	r3, [r7, #4]
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d1f1      	bne.n	800fa84 <pbuf_free_ooseq+0x20>
    }
  }
}
 800faa0:	3708      	adds	r7, #8
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
 800faa6:	bf00      	nop
 800faa8:	20007c94 	.word	0x20007c94
 800faac:	20007c9c 	.word	0x20007c9c

0800fab0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b082      	sub	sp, #8
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800fab8:	f7ff ffd4 	bl	800fa64 <pbuf_free_ooseq>
}
 800fabc:	bf00      	nop
 800fabe:	3708      	adds	r7, #8
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}

0800fac4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b082      	sub	sp, #8
 800fac8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800faca:	f00a f963 	bl	8019d94 <sys_arch_protect>
 800face:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800fad0:	4b0f      	ldr	r3, [pc, #60]	; (800fb10 <pbuf_pool_is_empty+0x4c>)
 800fad2:	781b      	ldrb	r3, [r3, #0]
 800fad4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800fad6:	4b0e      	ldr	r3, [pc, #56]	; (800fb10 <pbuf_pool_is_empty+0x4c>)
 800fad8:	2201      	movs	r2, #1
 800fada:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f00a f967 	bl	8019db0 <sys_arch_unprotect>

  if (!queued) {
 800fae2:	78fb      	ldrb	r3, [r7, #3]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d10f      	bne.n	800fb08 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800fae8:	2100      	movs	r1, #0
 800faea:	480a      	ldr	r0, [pc, #40]	; (800fb14 <pbuf_pool_is_empty+0x50>)
 800faec:	f7fe ff4e 	bl	800e98c <tcpip_try_callback>
 800faf0:	4603      	mov	r3, r0
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d008      	beq.n	800fb08 <pbuf_pool_is_empty+0x44>
 800faf6:	f00a f94d 	bl	8019d94 <sys_arch_protect>
 800fafa:	6078      	str	r0, [r7, #4]
 800fafc:	4b04      	ldr	r3, [pc, #16]	; (800fb10 <pbuf_pool_is_empty+0x4c>)
 800fafe:	2200      	movs	r2, #0
 800fb00:	701a      	strb	r2, [r3, #0]
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f00a f954 	bl	8019db0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800fb08:	bf00      	nop
 800fb0a:	3708      	adds	r7, #8
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	20007c94 	.word	0x20007c94
 800fb14:	0800fab1 	.word	0x0800fab1

0800fb18 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b085      	sub	sp, #20
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	60f8      	str	r0, [r7, #12]
 800fb20:	60b9      	str	r1, [r7, #8]
 800fb22:	4611      	mov	r1, r2
 800fb24:	461a      	mov	r2, r3
 800fb26:	460b      	mov	r3, r1
 800fb28:	80fb      	strh	r3, [r7, #6]
 800fb2a:	4613      	mov	r3, r2
 800fb2c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	2200      	movs	r2, #0
 800fb32:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	68ba      	ldr	r2, [r7, #8]
 800fb38:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	88fa      	ldrh	r2, [r7, #6]
 800fb3e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	88ba      	ldrh	r2, [r7, #4]
 800fb44:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800fb46:	8b3b      	ldrh	r3, [r7, #24]
 800fb48:	b2da      	uxtb	r2, r3
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	7f3a      	ldrb	r2, [r7, #28]
 800fb52:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	2201      	movs	r2, #1
 800fb58:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	73da      	strb	r2, [r3, #15]
}
 800fb60:	bf00      	nop
 800fb62:	3714      	adds	r7, #20
 800fb64:	46bd      	mov	sp, r7
 800fb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6a:	4770      	bx	lr

0800fb6c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b08c      	sub	sp, #48	; 0x30
 800fb70:	af02      	add	r7, sp, #8
 800fb72:	4603      	mov	r3, r0
 800fb74:	71fb      	strb	r3, [r7, #7]
 800fb76:	460b      	mov	r3, r1
 800fb78:	80bb      	strh	r3, [r7, #4]
 800fb7a:	4613      	mov	r3, r2
 800fb7c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800fb7e:	79fb      	ldrb	r3, [r7, #7]
 800fb80:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800fb82:	887b      	ldrh	r3, [r7, #2]
 800fb84:	2b41      	cmp	r3, #65	; 0x41
 800fb86:	d00b      	beq.n	800fba0 <pbuf_alloc+0x34>
 800fb88:	2b41      	cmp	r3, #65	; 0x41
 800fb8a:	dc02      	bgt.n	800fb92 <pbuf_alloc+0x26>
 800fb8c:	2b01      	cmp	r3, #1
 800fb8e:	d007      	beq.n	800fba0 <pbuf_alloc+0x34>
 800fb90:	e0c2      	b.n	800fd18 <pbuf_alloc+0x1ac>
 800fb92:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800fb96:	d00b      	beq.n	800fbb0 <pbuf_alloc+0x44>
 800fb98:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fb9c:	d070      	beq.n	800fc80 <pbuf_alloc+0x114>
 800fb9e:	e0bb      	b.n	800fd18 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800fba0:	887a      	ldrh	r2, [r7, #2]
 800fba2:	88bb      	ldrh	r3, [r7, #4]
 800fba4:	4619      	mov	r1, r3
 800fba6:	2000      	movs	r0, #0
 800fba8:	f000 f8d2 	bl	800fd50 <pbuf_alloc_reference>
 800fbac:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800fbae:	e0bd      	b.n	800fd2c <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800fbb8:	88bb      	ldrh	r3, [r7, #4]
 800fbba:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800fbbc:	200c      	movs	r0, #12
 800fbbe:	f7ff fc3b 	bl	800f438 <memp_malloc>
 800fbc2:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d109      	bne.n	800fbde <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800fbca:	f7ff ff7b 	bl	800fac4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800fbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d002      	beq.n	800fbda <pbuf_alloc+0x6e>
            pbuf_free(p);
 800fbd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fbd6:	f000 faa9 	bl	801012c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	e0a7      	b.n	800fd2e <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800fbde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fbe0:	3303      	adds	r3, #3
 800fbe2:	b29b      	uxth	r3, r3
 800fbe4:	f023 0303 	bic.w	r3, r3, #3
 800fbe8:	b29b      	uxth	r3, r3
 800fbea:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800fbee:	b29b      	uxth	r3, r3
 800fbf0:	8b7a      	ldrh	r2, [r7, #26]
 800fbf2:	4293      	cmp	r3, r2
 800fbf4:	bf28      	it	cs
 800fbf6:	4613      	movcs	r3, r2
 800fbf8:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800fbfa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fbfc:	3310      	adds	r3, #16
 800fbfe:	693a      	ldr	r2, [r7, #16]
 800fc00:	4413      	add	r3, r2
 800fc02:	3303      	adds	r3, #3
 800fc04:	f023 0303 	bic.w	r3, r3, #3
 800fc08:	4618      	mov	r0, r3
 800fc0a:	89f9      	ldrh	r1, [r7, #14]
 800fc0c:	8b7a      	ldrh	r2, [r7, #26]
 800fc0e:	2300      	movs	r3, #0
 800fc10:	9301      	str	r3, [sp, #4]
 800fc12:	887b      	ldrh	r3, [r7, #2]
 800fc14:	9300      	str	r3, [sp, #0]
 800fc16:	460b      	mov	r3, r1
 800fc18:	4601      	mov	r1, r0
 800fc1a:	6938      	ldr	r0, [r7, #16]
 800fc1c:	f7ff ff7c 	bl	800fb18 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800fc20:	693b      	ldr	r3, [r7, #16]
 800fc22:	685b      	ldr	r3, [r3, #4]
 800fc24:	f003 0303 	and.w	r3, r3, #3
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d006      	beq.n	800fc3a <pbuf_alloc+0xce>
 800fc2c:	4b42      	ldr	r3, [pc, #264]	; (800fd38 <pbuf_alloc+0x1cc>)
 800fc2e:	f240 1201 	movw	r2, #257	; 0x101
 800fc32:	4942      	ldr	r1, [pc, #264]	; (800fd3c <pbuf_alloc+0x1d0>)
 800fc34:	4842      	ldr	r0, [pc, #264]	; (800fd40 <pbuf_alloc+0x1d4>)
 800fc36:	f00b f8d7 	bl	801ade8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800fc3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc3c:	3303      	adds	r3, #3
 800fc3e:	f023 0303 	bic.w	r3, r3, #3
 800fc42:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800fc46:	d106      	bne.n	800fc56 <pbuf_alloc+0xea>
 800fc48:	4b3b      	ldr	r3, [pc, #236]	; (800fd38 <pbuf_alloc+0x1cc>)
 800fc4a:	f240 1203 	movw	r2, #259	; 0x103
 800fc4e:	493d      	ldr	r1, [pc, #244]	; (800fd44 <pbuf_alloc+0x1d8>)
 800fc50:	483b      	ldr	r0, [pc, #236]	; (800fd40 <pbuf_alloc+0x1d4>)
 800fc52:	f00b f8c9 	bl	801ade8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800fc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d102      	bne.n	800fc62 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800fc5c:	693b      	ldr	r3, [r7, #16]
 800fc5e:	627b      	str	r3, [r7, #36]	; 0x24
 800fc60:	e002      	b.n	800fc68 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800fc62:	69fb      	ldr	r3, [r7, #28]
 800fc64:	693a      	ldr	r2, [r7, #16]
 800fc66:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800fc68:	693b      	ldr	r3, [r7, #16]
 800fc6a:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800fc6c:	8b7a      	ldrh	r2, [r7, #26]
 800fc6e:	89fb      	ldrh	r3, [r7, #14]
 800fc70:	1ad3      	subs	r3, r2, r3
 800fc72:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800fc74:	2300      	movs	r3, #0
 800fc76:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800fc78:	8b7b      	ldrh	r3, [r7, #26]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d19e      	bne.n	800fbbc <pbuf_alloc+0x50>
      break;
 800fc7e:	e055      	b.n	800fd2c <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800fc80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc82:	3303      	adds	r3, #3
 800fc84:	b29b      	uxth	r3, r3
 800fc86:	f023 0303 	bic.w	r3, r3, #3
 800fc8a:	b29a      	uxth	r2, r3
 800fc8c:	88bb      	ldrh	r3, [r7, #4]
 800fc8e:	3303      	adds	r3, #3
 800fc90:	b29b      	uxth	r3, r3
 800fc92:	f023 0303 	bic.w	r3, r3, #3
 800fc96:	b29b      	uxth	r3, r3
 800fc98:	4413      	add	r3, r2
 800fc9a:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800fc9c:	8b3b      	ldrh	r3, [r7, #24]
 800fc9e:	3310      	adds	r3, #16
 800fca0:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fca2:	8b3a      	ldrh	r2, [r7, #24]
 800fca4:	88bb      	ldrh	r3, [r7, #4]
 800fca6:	3303      	adds	r3, #3
 800fca8:	f023 0303 	bic.w	r3, r3, #3
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d306      	bcc.n	800fcbe <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800fcb0:	8afa      	ldrh	r2, [r7, #22]
 800fcb2:	88bb      	ldrh	r3, [r7, #4]
 800fcb4:	3303      	adds	r3, #3
 800fcb6:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d201      	bcs.n	800fcc2 <pbuf_alloc+0x156>
        return NULL;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	e035      	b.n	800fd2e <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800fcc2:	8afb      	ldrh	r3, [r7, #22]
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f7ff fa35 	bl	800f134 <mem_malloc>
 800fcca:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800fccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d101      	bne.n	800fcd6 <pbuf_alloc+0x16a>
        return NULL;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	e02b      	b.n	800fd2e <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800fcd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fcd8:	3310      	adds	r3, #16
 800fcda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcdc:	4413      	add	r3, r2
 800fcde:	3303      	adds	r3, #3
 800fce0:	f023 0303 	bic.w	r3, r3, #3
 800fce4:	4618      	mov	r0, r3
 800fce6:	88b9      	ldrh	r1, [r7, #4]
 800fce8:	88ba      	ldrh	r2, [r7, #4]
 800fcea:	2300      	movs	r3, #0
 800fcec:	9301      	str	r3, [sp, #4]
 800fcee:	887b      	ldrh	r3, [r7, #2]
 800fcf0:	9300      	str	r3, [sp, #0]
 800fcf2:	460b      	mov	r3, r1
 800fcf4:	4601      	mov	r1, r0
 800fcf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fcf8:	f7ff ff0e 	bl	800fb18 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800fcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcfe:	685b      	ldr	r3, [r3, #4]
 800fd00:	f003 0303 	and.w	r3, r3, #3
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d010      	beq.n	800fd2a <pbuf_alloc+0x1be>
 800fd08:	4b0b      	ldr	r3, [pc, #44]	; (800fd38 <pbuf_alloc+0x1cc>)
 800fd0a:	f240 1223 	movw	r2, #291	; 0x123
 800fd0e:	490e      	ldr	r1, [pc, #56]	; (800fd48 <pbuf_alloc+0x1dc>)
 800fd10:	480b      	ldr	r0, [pc, #44]	; (800fd40 <pbuf_alloc+0x1d4>)
 800fd12:	f00b f869 	bl	801ade8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800fd16:	e008      	b.n	800fd2a <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800fd18:	4b07      	ldr	r3, [pc, #28]	; (800fd38 <pbuf_alloc+0x1cc>)
 800fd1a:	f240 1227 	movw	r2, #295	; 0x127
 800fd1e:	490b      	ldr	r1, [pc, #44]	; (800fd4c <pbuf_alloc+0x1e0>)
 800fd20:	4807      	ldr	r0, [pc, #28]	; (800fd40 <pbuf_alloc+0x1d4>)
 800fd22:	f00b f861 	bl	801ade8 <iprintf>
      return NULL;
 800fd26:	2300      	movs	r3, #0
 800fd28:	e001      	b.n	800fd2e <pbuf_alloc+0x1c2>
      break;
 800fd2a:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800fd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	3728      	adds	r7, #40	; 0x28
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}
 800fd36:	bf00      	nop
 800fd38:	080209bc 	.word	0x080209bc
 800fd3c:	080209ec 	.word	0x080209ec
 800fd40:	08020a1c 	.word	0x08020a1c
 800fd44:	08020a44 	.word	0x08020a44
 800fd48:	08020a78 	.word	0x08020a78
 800fd4c:	08020aa4 	.word	0x08020aa4

0800fd50 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b086      	sub	sp, #24
 800fd54:	af02      	add	r7, sp, #8
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	460b      	mov	r3, r1
 800fd5a:	807b      	strh	r3, [r7, #2]
 800fd5c:	4613      	mov	r3, r2
 800fd5e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800fd60:	883b      	ldrh	r3, [r7, #0]
 800fd62:	2b41      	cmp	r3, #65	; 0x41
 800fd64:	d009      	beq.n	800fd7a <pbuf_alloc_reference+0x2a>
 800fd66:	883b      	ldrh	r3, [r7, #0]
 800fd68:	2b01      	cmp	r3, #1
 800fd6a:	d006      	beq.n	800fd7a <pbuf_alloc_reference+0x2a>
 800fd6c:	4b0f      	ldr	r3, [pc, #60]	; (800fdac <pbuf_alloc_reference+0x5c>)
 800fd6e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800fd72:	490f      	ldr	r1, [pc, #60]	; (800fdb0 <pbuf_alloc_reference+0x60>)
 800fd74:	480f      	ldr	r0, [pc, #60]	; (800fdb4 <pbuf_alloc_reference+0x64>)
 800fd76:	f00b f837 	bl	801ade8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800fd7a:	200b      	movs	r0, #11
 800fd7c:	f7ff fb5c 	bl	800f438 <memp_malloc>
 800fd80:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d101      	bne.n	800fd8c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800fd88:	2300      	movs	r3, #0
 800fd8a:	e00b      	b.n	800fda4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800fd8c:	8879      	ldrh	r1, [r7, #2]
 800fd8e:	887a      	ldrh	r2, [r7, #2]
 800fd90:	2300      	movs	r3, #0
 800fd92:	9301      	str	r3, [sp, #4]
 800fd94:	883b      	ldrh	r3, [r7, #0]
 800fd96:	9300      	str	r3, [sp, #0]
 800fd98:	460b      	mov	r3, r1
 800fd9a:	6879      	ldr	r1, [r7, #4]
 800fd9c:	68f8      	ldr	r0, [r7, #12]
 800fd9e:	f7ff febb 	bl	800fb18 <pbuf_init_alloced_pbuf>
  return p;
 800fda2:	68fb      	ldr	r3, [r7, #12]
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	3710      	adds	r7, #16
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}
 800fdac:	080209bc 	.word	0x080209bc
 800fdb0:	08020ac0 	.word	0x08020ac0
 800fdb4:	08020a1c 	.word	0x08020a1c

0800fdb8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b088      	sub	sp, #32
 800fdbc:	af02      	add	r7, sp, #8
 800fdbe:	607b      	str	r3, [r7, #4]
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	73fb      	strb	r3, [r7, #15]
 800fdc4:	460b      	mov	r3, r1
 800fdc6:	81bb      	strh	r3, [r7, #12]
 800fdc8:	4613      	mov	r3, r2
 800fdca:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800fdcc:	7bfb      	ldrb	r3, [r7, #15]
 800fdce:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800fdd0:	8a7b      	ldrh	r3, [r7, #18]
 800fdd2:	3303      	adds	r3, #3
 800fdd4:	f023 0203 	bic.w	r2, r3, #3
 800fdd8:	89bb      	ldrh	r3, [r7, #12]
 800fdda:	441a      	add	r2, r3
 800fddc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fdde:	429a      	cmp	r2, r3
 800fde0:	d901      	bls.n	800fde6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800fde2:	2300      	movs	r3, #0
 800fde4:	e018      	b.n	800fe18 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800fde6:	6a3b      	ldr	r3, [r7, #32]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d007      	beq.n	800fdfc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800fdec:	8a7b      	ldrh	r3, [r7, #18]
 800fdee:	3303      	adds	r3, #3
 800fdf0:	f023 0303 	bic.w	r3, r3, #3
 800fdf4:	6a3a      	ldr	r2, [r7, #32]
 800fdf6:	4413      	add	r3, r2
 800fdf8:	617b      	str	r3, [r7, #20]
 800fdfa:	e001      	b.n	800fe00 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	89b9      	ldrh	r1, [r7, #12]
 800fe04:	89ba      	ldrh	r2, [r7, #12]
 800fe06:	2302      	movs	r3, #2
 800fe08:	9301      	str	r3, [sp, #4]
 800fe0a:	897b      	ldrh	r3, [r7, #10]
 800fe0c:	9300      	str	r3, [sp, #0]
 800fe0e:	460b      	mov	r3, r1
 800fe10:	6979      	ldr	r1, [r7, #20]
 800fe12:	f7ff fe81 	bl	800fb18 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800fe16:	687b      	ldr	r3, [r7, #4]
}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3718      	adds	r7, #24
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}

0800fe20 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b084      	sub	sp, #16
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
 800fe28:	460b      	mov	r3, r1
 800fe2a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d106      	bne.n	800fe40 <pbuf_realloc+0x20>
 800fe32:	4b3a      	ldr	r3, [pc, #232]	; (800ff1c <pbuf_realloc+0xfc>)
 800fe34:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800fe38:	4939      	ldr	r1, [pc, #228]	; (800ff20 <pbuf_realloc+0x100>)
 800fe3a:	483a      	ldr	r0, [pc, #232]	; (800ff24 <pbuf_realloc+0x104>)
 800fe3c:	f00a ffd4 	bl	801ade8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	891b      	ldrh	r3, [r3, #8]
 800fe44:	887a      	ldrh	r2, [r7, #2]
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d264      	bcs.n	800ff14 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	891a      	ldrh	r2, [r3, #8]
 800fe4e:	887b      	ldrh	r3, [r7, #2]
 800fe50:	1ad3      	subs	r3, r2, r3
 800fe52:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800fe54:	887b      	ldrh	r3, [r7, #2]
 800fe56:	817b      	strh	r3, [r7, #10]
  q = p;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800fe5c:	e018      	b.n	800fe90 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	895b      	ldrh	r3, [r3, #10]
 800fe62:	897a      	ldrh	r2, [r7, #10]
 800fe64:	1ad3      	subs	r3, r2, r3
 800fe66:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	891a      	ldrh	r2, [r3, #8]
 800fe6c:	893b      	ldrh	r3, [r7, #8]
 800fe6e:	1ad3      	subs	r3, r2, r3
 800fe70:	b29a      	uxth	r2, r3
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d106      	bne.n	800fe90 <pbuf_realloc+0x70>
 800fe82:	4b26      	ldr	r3, [pc, #152]	; (800ff1c <pbuf_realloc+0xfc>)
 800fe84:	f240 12af 	movw	r2, #431	; 0x1af
 800fe88:	4927      	ldr	r1, [pc, #156]	; (800ff28 <pbuf_realloc+0x108>)
 800fe8a:	4826      	ldr	r0, [pc, #152]	; (800ff24 <pbuf_realloc+0x104>)
 800fe8c:	f00a ffac 	bl	801ade8 <iprintf>
  while (rem_len > q->len) {
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	895b      	ldrh	r3, [r3, #10]
 800fe94:	897a      	ldrh	r2, [r7, #10]
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d8e1      	bhi.n	800fe5e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	7b1b      	ldrb	r3, [r3, #12]
 800fe9e:	f003 030f 	and.w	r3, r3, #15
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d122      	bne.n	800feec <pbuf_realloc+0xcc>
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	895b      	ldrh	r3, [r3, #10]
 800feaa:	897a      	ldrh	r2, [r7, #10]
 800feac:	429a      	cmp	r2, r3
 800feae:	d01d      	beq.n	800feec <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	7b5b      	ldrb	r3, [r3, #13]
 800feb4:	f003 0302 	and.w	r3, r3, #2
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d117      	bne.n	800feec <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	685b      	ldr	r3, [r3, #4]
 800fec0:	461a      	mov	r2, r3
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	1ad3      	subs	r3, r2, r3
 800fec6:	b29a      	uxth	r2, r3
 800fec8:	897b      	ldrh	r3, [r7, #10]
 800feca:	4413      	add	r3, r2
 800fecc:	b29b      	uxth	r3, r3
 800fece:	4619      	mov	r1, r3
 800fed0:	68f8      	ldr	r0, [r7, #12]
 800fed2:	f7ff f825 	bl	800ef20 <mem_trim>
 800fed6:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d106      	bne.n	800feec <pbuf_realloc+0xcc>
 800fede:	4b0f      	ldr	r3, [pc, #60]	; (800ff1c <pbuf_realloc+0xfc>)
 800fee0:	f240 12bd 	movw	r2, #445	; 0x1bd
 800fee4:	4911      	ldr	r1, [pc, #68]	; (800ff2c <pbuf_realloc+0x10c>)
 800fee6:	480f      	ldr	r0, [pc, #60]	; (800ff24 <pbuf_realloc+0x104>)
 800fee8:	f00a ff7e 	bl	801ade8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	897a      	ldrh	r2, [r7, #10]
 800fef0:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	895a      	ldrh	r2, [r3, #10]
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d004      	beq.n	800ff0c <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	4618      	mov	r0, r3
 800ff08:	f000 f910 	bl	801012c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	2200      	movs	r2, #0
 800ff10:	601a      	str	r2, [r3, #0]
 800ff12:	e000      	b.n	800ff16 <pbuf_realloc+0xf6>
    return;
 800ff14:	bf00      	nop

}
 800ff16:	3710      	adds	r7, #16
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}
 800ff1c:	080209bc 	.word	0x080209bc
 800ff20:	08020ad4 	.word	0x08020ad4
 800ff24:	08020a1c 	.word	0x08020a1c
 800ff28:	08020aec 	.word	0x08020aec
 800ff2c:	08020b04 	.word	0x08020b04

0800ff30 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b086      	sub	sp, #24
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	60f8      	str	r0, [r7, #12]
 800ff38:	60b9      	str	r1, [r7, #8]
 800ff3a:	4613      	mov	r3, r2
 800ff3c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d106      	bne.n	800ff52 <pbuf_add_header_impl+0x22>
 800ff44:	4b2b      	ldr	r3, [pc, #172]	; (800fff4 <pbuf_add_header_impl+0xc4>)
 800ff46:	f240 12df 	movw	r2, #479	; 0x1df
 800ff4a:	492b      	ldr	r1, [pc, #172]	; (800fff8 <pbuf_add_header_impl+0xc8>)
 800ff4c:	482b      	ldr	r0, [pc, #172]	; (800fffc <pbuf_add_header_impl+0xcc>)
 800ff4e:	f00a ff4b 	bl	801ade8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d003      	beq.n	800ff60 <pbuf_add_header_impl+0x30>
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff5e:	d301      	bcc.n	800ff64 <pbuf_add_header_impl+0x34>
    return 1;
 800ff60:	2301      	movs	r3, #1
 800ff62:	e043      	b.n	800ffec <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d101      	bne.n	800ff6e <pbuf_add_header_impl+0x3e>
    return 0;
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	e03e      	b.n	800ffec <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	891a      	ldrh	r2, [r3, #8]
 800ff76:	8a7b      	ldrh	r3, [r7, #18]
 800ff78:	4413      	add	r3, r2
 800ff7a:	b29b      	uxth	r3, r3
 800ff7c:	8a7a      	ldrh	r2, [r7, #18]
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d901      	bls.n	800ff86 <pbuf_add_header_impl+0x56>
    return 1;
 800ff82:	2301      	movs	r3, #1
 800ff84:	e032      	b.n	800ffec <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	7b1b      	ldrb	r3, [r3, #12]
 800ff8a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ff8c:	8a3b      	ldrh	r3, [r7, #16]
 800ff8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d00c      	beq.n	800ffb0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	685a      	ldr	r2, [r3, #4]
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	425b      	negs	r3, r3
 800ff9e:	4413      	add	r3, r2
 800ffa0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	3310      	adds	r3, #16
 800ffa6:	697a      	ldr	r2, [r7, #20]
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d20d      	bcs.n	800ffc8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ffac:	2301      	movs	r3, #1
 800ffae:	e01d      	b.n	800ffec <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ffb0:	79fb      	ldrb	r3, [r7, #7]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d006      	beq.n	800ffc4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	685a      	ldr	r2, [r3, #4]
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	425b      	negs	r3, r3
 800ffbe:	4413      	add	r3, r2
 800ffc0:	617b      	str	r3, [r7, #20]
 800ffc2:	e001      	b.n	800ffc8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	e011      	b.n	800ffec <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	697a      	ldr	r2, [r7, #20]
 800ffcc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	895a      	ldrh	r2, [r3, #10]
 800ffd2:	8a7b      	ldrh	r3, [r7, #18]
 800ffd4:	4413      	add	r3, r2
 800ffd6:	b29a      	uxth	r2, r3
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	891a      	ldrh	r2, [r3, #8]
 800ffe0:	8a7b      	ldrh	r3, [r7, #18]
 800ffe2:	4413      	add	r3, r2
 800ffe4:	b29a      	uxth	r2, r3
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	811a      	strh	r2, [r3, #8]


  return 0;
 800ffea:	2300      	movs	r3, #0
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	3718      	adds	r7, #24
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}
 800fff4:	080209bc 	.word	0x080209bc
 800fff8:	08020b20 	.word	0x08020b20
 800fffc:	08020a1c 	.word	0x08020a1c

08010000 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b082      	sub	sp, #8
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
 8010008:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801000a:	2200      	movs	r2, #0
 801000c:	6839      	ldr	r1, [r7, #0]
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f7ff ff8e 	bl	800ff30 <pbuf_add_header_impl>
 8010014:	4603      	mov	r3, r0
}
 8010016:	4618      	mov	r0, r3
 8010018:	3708      	adds	r7, #8
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}
	...

08010020 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b084      	sub	sp, #16
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d106      	bne.n	801003e <pbuf_remove_header+0x1e>
 8010030:	4b20      	ldr	r3, [pc, #128]	; (80100b4 <pbuf_remove_header+0x94>)
 8010032:	f240 224b 	movw	r2, #587	; 0x24b
 8010036:	4920      	ldr	r1, [pc, #128]	; (80100b8 <pbuf_remove_header+0x98>)
 8010038:	4820      	ldr	r0, [pc, #128]	; (80100bc <pbuf_remove_header+0x9c>)
 801003a:	f00a fed5 	bl	801ade8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d003      	beq.n	801004c <pbuf_remove_header+0x2c>
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801004a:	d301      	bcc.n	8010050 <pbuf_remove_header+0x30>
    return 1;
 801004c:	2301      	movs	r3, #1
 801004e:	e02c      	b.n	80100aa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010050:	683b      	ldr	r3, [r7, #0]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d101      	bne.n	801005a <pbuf_remove_header+0x3a>
    return 0;
 8010056:	2300      	movs	r3, #0
 8010058:	e027      	b.n	80100aa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	895b      	ldrh	r3, [r3, #10]
 8010062:	89fa      	ldrh	r2, [r7, #14]
 8010064:	429a      	cmp	r2, r3
 8010066:	d908      	bls.n	801007a <pbuf_remove_header+0x5a>
 8010068:	4b12      	ldr	r3, [pc, #72]	; (80100b4 <pbuf_remove_header+0x94>)
 801006a:	f240 2255 	movw	r2, #597	; 0x255
 801006e:	4914      	ldr	r1, [pc, #80]	; (80100c0 <pbuf_remove_header+0xa0>)
 8010070:	4812      	ldr	r0, [pc, #72]	; (80100bc <pbuf_remove_header+0x9c>)
 8010072:	f00a feb9 	bl	801ade8 <iprintf>
 8010076:	2301      	movs	r3, #1
 8010078:	e017      	b.n	80100aa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	685b      	ldr	r3, [r3, #4]
 801007e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	685a      	ldr	r2, [r3, #4]
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	441a      	add	r2, r3
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	895a      	ldrh	r2, [r3, #10]
 8010090:	89fb      	ldrh	r3, [r7, #14]
 8010092:	1ad3      	subs	r3, r2, r3
 8010094:	b29a      	uxth	r2, r3
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	891a      	ldrh	r2, [r3, #8]
 801009e:	89fb      	ldrh	r3, [r7, #14]
 80100a0:	1ad3      	subs	r3, r2, r3
 80100a2:	b29a      	uxth	r2, r3
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80100a8:	2300      	movs	r3, #0
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3710      	adds	r7, #16
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}
 80100b2:	bf00      	nop
 80100b4:	080209bc 	.word	0x080209bc
 80100b8:	08020b20 	.word	0x08020b20
 80100bc:	08020a1c 	.word	0x08020a1c
 80100c0:	08020b2c 	.word	0x08020b2c

080100c4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b082      	sub	sp, #8
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	460b      	mov	r3, r1
 80100ce:	807b      	strh	r3, [r7, #2]
 80100d0:	4613      	mov	r3, r2
 80100d2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80100d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	da08      	bge.n	80100ee <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80100dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80100e0:	425b      	negs	r3, r3
 80100e2:	4619      	mov	r1, r3
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f7ff ff9b 	bl	8010020 <pbuf_remove_header>
 80100ea:	4603      	mov	r3, r0
 80100ec:	e007      	b.n	80100fe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80100ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80100f2:	787a      	ldrb	r2, [r7, #1]
 80100f4:	4619      	mov	r1, r3
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f7ff ff1a 	bl	800ff30 <pbuf_add_header_impl>
 80100fc:	4603      	mov	r3, r0
  }
}
 80100fe:	4618      	mov	r0, r3
 8010100:	3708      	adds	r7, #8
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}

08010106 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010106:	b580      	push	{r7, lr}
 8010108:	b082      	sub	sp, #8
 801010a:	af00      	add	r7, sp, #0
 801010c:	6078      	str	r0, [r7, #4]
 801010e:	460b      	mov	r3, r1
 8010110:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8010112:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010116:	2201      	movs	r2, #1
 8010118:	4619      	mov	r1, r3
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f7ff ffd2 	bl	80100c4 <pbuf_header_impl>
 8010120:	4603      	mov	r3, r0
}
 8010122:	4618      	mov	r0, r3
 8010124:	3708      	adds	r7, #8
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}
	...

0801012c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b088      	sub	sp, #32
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d10b      	bne.n	8010152 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d106      	bne.n	801014e <pbuf_free+0x22>
 8010140:	4b3b      	ldr	r3, [pc, #236]	; (8010230 <pbuf_free+0x104>)
 8010142:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8010146:	493b      	ldr	r1, [pc, #236]	; (8010234 <pbuf_free+0x108>)
 8010148:	483b      	ldr	r0, [pc, #236]	; (8010238 <pbuf_free+0x10c>)
 801014a:	f00a fe4d 	bl	801ade8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801014e:	2300      	movs	r3, #0
 8010150:	e069      	b.n	8010226 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010152:	2300      	movs	r3, #0
 8010154:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010156:	e062      	b.n	801021e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010158:	f009 fe1c 	bl	8019d94 <sys_arch_protect>
 801015c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	7b9b      	ldrb	r3, [r3, #14]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d106      	bne.n	8010174 <pbuf_free+0x48>
 8010166:	4b32      	ldr	r3, [pc, #200]	; (8010230 <pbuf_free+0x104>)
 8010168:	f240 22f1 	movw	r2, #753	; 0x2f1
 801016c:	4933      	ldr	r1, [pc, #204]	; (801023c <pbuf_free+0x110>)
 801016e:	4832      	ldr	r0, [pc, #200]	; (8010238 <pbuf_free+0x10c>)
 8010170:	f00a fe3a 	bl	801ade8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	7b9b      	ldrb	r3, [r3, #14]
 8010178:	3b01      	subs	r3, #1
 801017a:	b2da      	uxtb	r2, r3
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	739a      	strb	r2, [r3, #14]
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	7b9b      	ldrb	r3, [r3, #14]
 8010184:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8010186:	69b8      	ldr	r0, [r7, #24]
 8010188:	f009 fe12 	bl	8019db0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801018c:	7dfb      	ldrb	r3, [r7, #23]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d143      	bne.n	801021a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	7b1b      	ldrb	r3, [r3, #12]
 801019c:	f003 030f 	and.w	r3, r3, #15
 80101a0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	7b5b      	ldrb	r3, [r3, #13]
 80101a6:	f003 0302 	and.w	r3, r3, #2
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d011      	beq.n	80101d2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	691b      	ldr	r3, [r3, #16]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d106      	bne.n	80101c8 <pbuf_free+0x9c>
 80101ba:	4b1d      	ldr	r3, [pc, #116]	; (8010230 <pbuf_free+0x104>)
 80101bc:	f240 22ff 	movw	r2, #767	; 0x2ff
 80101c0:	491f      	ldr	r1, [pc, #124]	; (8010240 <pbuf_free+0x114>)
 80101c2:	481d      	ldr	r0, [pc, #116]	; (8010238 <pbuf_free+0x10c>)
 80101c4:	f00a fe10 	bl	801ade8 <iprintf>
        pc->custom_free_function(p);
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	691b      	ldr	r3, [r3, #16]
 80101cc:	6878      	ldr	r0, [r7, #4]
 80101ce:	4798      	blx	r3
 80101d0:	e01d      	b.n	801020e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80101d2:	7bfb      	ldrb	r3, [r7, #15]
 80101d4:	2b02      	cmp	r3, #2
 80101d6:	d104      	bne.n	80101e2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80101d8:	6879      	ldr	r1, [r7, #4]
 80101da:	200c      	movs	r0, #12
 80101dc:	f7ff f97e 	bl	800f4dc <memp_free>
 80101e0:	e015      	b.n	801020e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80101e2:	7bfb      	ldrb	r3, [r7, #15]
 80101e4:	2b01      	cmp	r3, #1
 80101e6:	d104      	bne.n	80101f2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80101e8:	6879      	ldr	r1, [r7, #4]
 80101ea:	200b      	movs	r0, #11
 80101ec:	f7ff f976 	bl	800f4dc <memp_free>
 80101f0:	e00d      	b.n	801020e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80101f2:	7bfb      	ldrb	r3, [r7, #15]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d103      	bne.n	8010200 <pbuf_free+0xd4>
          mem_free(p);
 80101f8:	6878      	ldr	r0, [r7, #4]
 80101fa:	f7fe fe01 	bl	800ee00 <mem_free>
 80101fe:	e006      	b.n	801020e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010200:	4b0b      	ldr	r3, [pc, #44]	; (8010230 <pbuf_free+0x104>)
 8010202:	f240 320f 	movw	r2, #783	; 0x30f
 8010206:	490f      	ldr	r1, [pc, #60]	; (8010244 <pbuf_free+0x118>)
 8010208:	480b      	ldr	r0, [pc, #44]	; (8010238 <pbuf_free+0x10c>)
 801020a:	f00a fded 	bl	801ade8 <iprintf>
        }
      }
      count++;
 801020e:	7ffb      	ldrb	r3, [r7, #31]
 8010210:	3301      	adds	r3, #1
 8010212:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8010214:	693b      	ldr	r3, [r7, #16]
 8010216:	607b      	str	r3, [r7, #4]
 8010218:	e001      	b.n	801021e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801021a:	2300      	movs	r3, #0
 801021c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d199      	bne.n	8010158 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010224:	7ffb      	ldrb	r3, [r7, #31]
}
 8010226:	4618      	mov	r0, r3
 8010228:	3720      	adds	r7, #32
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	080209bc 	.word	0x080209bc
 8010234:	08020b20 	.word	0x08020b20
 8010238:	08020a1c 	.word	0x08020a1c
 801023c:	08020b4c 	.word	0x08020b4c
 8010240:	08020b64 	.word	0x08020b64
 8010244:	08020b88 	.word	0x08020b88

08010248 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010248:	b480      	push	{r7}
 801024a:	b085      	sub	sp, #20
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010250:	2300      	movs	r3, #0
 8010252:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010254:	e005      	b.n	8010262 <pbuf_clen+0x1a>
    ++len;
 8010256:	89fb      	ldrh	r3, [r7, #14]
 8010258:	3301      	adds	r3, #1
 801025a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d1f6      	bne.n	8010256 <pbuf_clen+0xe>
  }
  return len;
 8010268:	89fb      	ldrh	r3, [r7, #14]
}
 801026a:	4618      	mov	r0, r3
 801026c:	3714      	adds	r7, #20
 801026e:	46bd      	mov	sp, r7
 8010270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010274:	4770      	bx	lr
	...

08010278 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b084      	sub	sp, #16
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d016      	beq.n	80102b4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8010286:	f009 fd85 	bl	8019d94 <sys_arch_protect>
 801028a:	60f8      	str	r0, [r7, #12]
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	7b9b      	ldrb	r3, [r3, #14]
 8010290:	3301      	adds	r3, #1
 8010292:	b2da      	uxtb	r2, r3
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	739a      	strb	r2, [r3, #14]
 8010298:	68f8      	ldr	r0, [r7, #12]
 801029a:	f009 fd89 	bl	8019db0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	7b9b      	ldrb	r3, [r3, #14]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d106      	bne.n	80102b4 <pbuf_ref+0x3c>
 80102a6:	4b05      	ldr	r3, [pc, #20]	; (80102bc <pbuf_ref+0x44>)
 80102a8:	f240 3242 	movw	r2, #834	; 0x342
 80102ac:	4904      	ldr	r1, [pc, #16]	; (80102c0 <pbuf_ref+0x48>)
 80102ae:	4805      	ldr	r0, [pc, #20]	; (80102c4 <pbuf_ref+0x4c>)
 80102b0:	f00a fd9a 	bl	801ade8 <iprintf>
  }
}
 80102b4:	bf00      	nop
 80102b6:	3710      	adds	r7, #16
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}
 80102bc:	080209bc 	.word	0x080209bc
 80102c0:	08020b9c 	.word	0x08020b9c
 80102c4:	08020a1c 	.word	0x08020a1c

080102c8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b084      	sub	sp, #16
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
 80102d0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d002      	beq.n	80102de <pbuf_cat+0x16>
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d107      	bne.n	80102ee <pbuf_cat+0x26>
 80102de:	4b20      	ldr	r3, [pc, #128]	; (8010360 <pbuf_cat+0x98>)
 80102e0:	f240 325a 	movw	r2, #858	; 0x35a
 80102e4:	491f      	ldr	r1, [pc, #124]	; (8010364 <pbuf_cat+0x9c>)
 80102e6:	4820      	ldr	r0, [pc, #128]	; (8010368 <pbuf_cat+0xa0>)
 80102e8:	f00a fd7e 	bl	801ade8 <iprintf>
 80102ec:	e034      	b.n	8010358 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	60fb      	str	r3, [r7, #12]
 80102f2:	e00a      	b.n	801030a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	891a      	ldrh	r2, [r3, #8]
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	891b      	ldrh	r3, [r3, #8]
 80102fc:	4413      	add	r3, r2
 80102fe:	b29a      	uxth	r2, r3
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	60fb      	str	r3, [r7, #12]
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d1f0      	bne.n	80102f4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	891a      	ldrh	r2, [r3, #8]
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	895b      	ldrh	r3, [r3, #10]
 801031a:	429a      	cmp	r2, r3
 801031c:	d006      	beq.n	801032c <pbuf_cat+0x64>
 801031e:	4b10      	ldr	r3, [pc, #64]	; (8010360 <pbuf_cat+0x98>)
 8010320:	f240 3262 	movw	r2, #866	; 0x362
 8010324:	4911      	ldr	r1, [pc, #68]	; (801036c <pbuf_cat+0xa4>)
 8010326:	4810      	ldr	r0, [pc, #64]	; (8010368 <pbuf_cat+0xa0>)
 8010328:	f00a fd5e 	bl	801ade8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d006      	beq.n	8010342 <pbuf_cat+0x7a>
 8010334:	4b0a      	ldr	r3, [pc, #40]	; (8010360 <pbuf_cat+0x98>)
 8010336:	f240 3263 	movw	r2, #867	; 0x363
 801033a:	490d      	ldr	r1, [pc, #52]	; (8010370 <pbuf_cat+0xa8>)
 801033c:	480a      	ldr	r0, [pc, #40]	; (8010368 <pbuf_cat+0xa0>)
 801033e:	f00a fd53 	bl	801ade8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	891a      	ldrh	r2, [r3, #8]
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	891b      	ldrh	r3, [r3, #8]
 801034a:	4413      	add	r3, r2
 801034c:	b29a      	uxth	r2, r3
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	683a      	ldr	r2, [r7, #0]
 8010356:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010358:	3710      	adds	r7, #16
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}
 801035e:	bf00      	nop
 8010360:	080209bc 	.word	0x080209bc
 8010364:	08020bb0 	.word	0x08020bb0
 8010368:	08020a1c 	.word	0x08020a1c
 801036c:	08020be8 	.word	0x08020be8
 8010370:	08020c18 	.word	0x08020c18

08010374 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b082      	sub	sp, #8
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
 801037c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801037e:	6839      	ldr	r1, [r7, #0]
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f7ff ffa1 	bl	80102c8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8010386:	6838      	ldr	r0, [r7, #0]
 8010388:	f7ff ff76 	bl	8010278 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801038c:	bf00      	nop
 801038e:	3708      	adds	r7, #8
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}

08010394 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b086      	sub	sp, #24
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801039e:	2300      	movs	r3, #0
 80103a0:	617b      	str	r3, [r7, #20]
 80103a2:	2300      	movs	r3, #0
 80103a4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d008      	beq.n	80103be <pbuf_copy+0x2a>
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d005      	beq.n	80103be <pbuf_copy+0x2a>
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	891a      	ldrh	r2, [r3, #8]
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	891b      	ldrh	r3, [r3, #8]
 80103ba:	429a      	cmp	r2, r3
 80103bc:	d209      	bcs.n	80103d2 <pbuf_copy+0x3e>
 80103be:	4b57      	ldr	r3, [pc, #348]	; (801051c <pbuf_copy+0x188>)
 80103c0:	f240 32ca 	movw	r2, #970	; 0x3ca
 80103c4:	4956      	ldr	r1, [pc, #344]	; (8010520 <pbuf_copy+0x18c>)
 80103c6:	4857      	ldr	r0, [pc, #348]	; (8010524 <pbuf_copy+0x190>)
 80103c8:	f00a fd0e 	bl	801ade8 <iprintf>
 80103cc:	f06f 030f 	mvn.w	r3, #15
 80103d0:	e09f      	b.n	8010512 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	895b      	ldrh	r3, [r3, #10]
 80103d6:	461a      	mov	r2, r3
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	1ad2      	subs	r2, r2, r3
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	895b      	ldrh	r3, [r3, #10]
 80103e0:	4619      	mov	r1, r3
 80103e2:	693b      	ldr	r3, [r7, #16]
 80103e4:	1acb      	subs	r3, r1, r3
 80103e6:	429a      	cmp	r2, r3
 80103e8:	d306      	bcc.n	80103f8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	895b      	ldrh	r3, [r3, #10]
 80103ee:	461a      	mov	r2, r3
 80103f0:	693b      	ldr	r3, [r7, #16]
 80103f2:	1ad3      	subs	r3, r2, r3
 80103f4:	60fb      	str	r3, [r7, #12]
 80103f6:	e005      	b.n	8010404 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	895b      	ldrh	r3, [r3, #10]
 80103fc:	461a      	mov	r2, r3
 80103fe:	697b      	ldr	r3, [r7, #20]
 8010400:	1ad3      	subs	r3, r2, r3
 8010402:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	685a      	ldr	r2, [r3, #4]
 8010408:	697b      	ldr	r3, [r7, #20]
 801040a:	18d0      	adds	r0, r2, r3
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	685a      	ldr	r2, [r3, #4]
 8010410:	693b      	ldr	r3, [r7, #16]
 8010412:	4413      	add	r3, r2
 8010414:	68fa      	ldr	r2, [r7, #12]
 8010416:	4619      	mov	r1, r3
 8010418:	f009 fdfd 	bl	801a016 <memcpy>
    offset_to += len;
 801041c:	697a      	ldr	r2, [r7, #20]
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	4413      	add	r3, r2
 8010422:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010424:	693a      	ldr	r2, [r7, #16]
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	4413      	add	r3, r2
 801042a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	895b      	ldrh	r3, [r3, #10]
 8010430:	461a      	mov	r2, r3
 8010432:	697b      	ldr	r3, [r7, #20]
 8010434:	4293      	cmp	r3, r2
 8010436:	d906      	bls.n	8010446 <pbuf_copy+0xb2>
 8010438:	4b38      	ldr	r3, [pc, #224]	; (801051c <pbuf_copy+0x188>)
 801043a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801043e:	493a      	ldr	r1, [pc, #232]	; (8010528 <pbuf_copy+0x194>)
 8010440:	4838      	ldr	r0, [pc, #224]	; (8010524 <pbuf_copy+0x190>)
 8010442:	f00a fcd1 	bl	801ade8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	895b      	ldrh	r3, [r3, #10]
 801044a:	461a      	mov	r2, r3
 801044c:	693b      	ldr	r3, [r7, #16]
 801044e:	4293      	cmp	r3, r2
 8010450:	d906      	bls.n	8010460 <pbuf_copy+0xcc>
 8010452:	4b32      	ldr	r3, [pc, #200]	; (801051c <pbuf_copy+0x188>)
 8010454:	f240 32da 	movw	r2, #986	; 0x3da
 8010458:	4934      	ldr	r1, [pc, #208]	; (801052c <pbuf_copy+0x198>)
 801045a:	4832      	ldr	r0, [pc, #200]	; (8010524 <pbuf_copy+0x190>)
 801045c:	f00a fcc4 	bl	801ade8 <iprintf>
    if (offset_from >= p_from->len) {
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	895b      	ldrh	r3, [r3, #10]
 8010464:	461a      	mov	r2, r3
 8010466:	693b      	ldr	r3, [r7, #16]
 8010468:	4293      	cmp	r3, r2
 801046a:	d304      	bcc.n	8010476 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801046c:	2300      	movs	r3, #0
 801046e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010470:	683b      	ldr	r3, [r7, #0]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	895b      	ldrh	r3, [r3, #10]
 801047a:	461a      	mov	r2, r3
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	4293      	cmp	r3, r2
 8010480:	d114      	bne.n	80104ac <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010482:	2300      	movs	r3, #0
 8010484:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d10c      	bne.n	80104ac <pbuf_copy+0x118>
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d009      	beq.n	80104ac <pbuf_copy+0x118>
 8010498:	4b20      	ldr	r3, [pc, #128]	; (801051c <pbuf_copy+0x188>)
 801049a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801049e:	4924      	ldr	r1, [pc, #144]	; (8010530 <pbuf_copy+0x19c>)
 80104a0:	4820      	ldr	r0, [pc, #128]	; (8010524 <pbuf_copy+0x190>)
 80104a2:	f00a fca1 	bl	801ade8 <iprintf>
 80104a6:	f06f 030f 	mvn.w	r3, #15
 80104aa:	e032      	b.n	8010512 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d013      	beq.n	80104da <pbuf_copy+0x146>
 80104b2:	683b      	ldr	r3, [r7, #0]
 80104b4:	895a      	ldrh	r2, [r3, #10]
 80104b6:	683b      	ldr	r3, [r7, #0]
 80104b8:	891b      	ldrh	r3, [r3, #8]
 80104ba:	429a      	cmp	r2, r3
 80104bc:	d10d      	bne.n	80104da <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d009      	beq.n	80104da <pbuf_copy+0x146>
 80104c6:	4b15      	ldr	r3, [pc, #84]	; (801051c <pbuf_copy+0x188>)
 80104c8:	f240 32ea 	movw	r2, #1002	; 0x3ea
 80104cc:	4919      	ldr	r1, [pc, #100]	; (8010534 <pbuf_copy+0x1a0>)
 80104ce:	4815      	ldr	r0, [pc, #84]	; (8010524 <pbuf_copy+0x190>)
 80104d0:	f00a fc8a 	bl	801ade8 <iprintf>
 80104d4:	f06f 0305 	mvn.w	r3, #5
 80104d8:	e01b      	b.n	8010512 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d013      	beq.n	8010508 <pbuf_copy+0x174>
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	895a      	ldrh	r2, [r3, #10]
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	891b      	ldrh	r3, [r3, #8]
 80104e8:	429a      	cmp	r2, r3
 80104ea:	d10d      	bne.n	8010508 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d009      	beq.n	8010508 <pbuf_copy+0x174>
 80104f4:	4b09      	ldr	r3, [pc, #36]	; (801051c <pbuf_copy+0x188>)
 80104f6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80104fa:	490e      	ldr	r1, [pc, #56]	; (8010534 <pbuf_copy+0x1a0>)
 80104fc:	4809      	ldr	r0, [pc, #36]	; (8010524 <pbuf_copy+0x190>)
 80104fe:	f00a fc73 	bl	801ade8 <iprintf>
 8010502:	f06f 0305 	mvn.w	r3, #5
 8010506:	e004      	b.n	8010512 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	2b00      	cmp	r3, #0
 801050c:	f47f af61 	bne.w	80103d2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010510:	2300      	movs	r3, #0
}
 8010512:	4618      	mov	r0, r3
 8010514:	3718      	adds	r7, #24
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}
 801051a:	bf00      	nop
 801051c:	080209bc 	.word	0x080209bc
 8010520:	08020c64 	.word	0x08020c64
 8010524:	08020a1c 	.word	0x08020a1c
 8010528:	08020c94 	.word	0x08020c94
 801052c:	08020cac 	.word	0x08020cac
 8010530:	08020cc8 	.word	0x08020cc8
 8010534:	08020cd8 	.word	0x08020cd8

08010538 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b088      	sub	sp, #32
 801053c:	af00      	add	r7, sp, #0
 801053e:	60f8      	str	r0, [r7, #12]
 8010540:	60b9      	str	r1, [r7, #8]
 8010542:	4611      	mov	r1, r2
 8010544:	461a      	mov	r2, r3
 8010546:	460b      	mov	r3, r1
 8010548:	80fb      	strh	r3, [r7, #6]
 801054a:	4613      	mov	r3, r2
 801054c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801054e:	2300      	movs	r3, #0
 8010550:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010552:	2300      	movs	r3, #0
 8010554:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d108      	bne.n	801056e <pbuf_copy_partial+0x36>
 801055c:	4b2b      	ldr	r3, [pc, #172]	; (801060c <pbuf_copy_partial+0xd4>)
 801055e:	f240 420a 	movw	r2, #1034	; 0x40a
 8010562:	492b      	ldr	r1, [pc, #172]	; (8010610 <pbuf_copy_partial+0xd8>)
 8010564:	482b      	ldr	r0, [pc, #172]	; (8010614 <pbuf_copy_partial+0xdc>)
 8010566:	f00a fc3f 	bl	801ade8 <iprintf>
 801056a:	2300      	movs	r3, #0
 801056c:	e04a      	b.n	8010604 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801056e:	68bb      	ldr	r3, [r7, #8]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d108      	bne.n	8010586 <pbuf_copy_partial+0x4e>
 8010574:	4b25      	ldr	r3, [pc, #148]	; (801060c <pbuf_copy_partial+0xd4>)
 8010576:	f240 420b 	movw	r2, #1035	; 0x40b
 801057a:	4927      	ldr	r1, [pc, #156]	; (8010618 <pbuf_copy_partial+0xe0>)
 801057c:	4825      	ldr	r0, [pc, #148]	; (8010614 <pbuf_copy_partial+0xdc>)
 801057e:	f00a fc33 	bl	801ade8 <iprintf>
 8010582:	2300      	movs	r3, #0
 8010584:	e03e      	b.n	8010604 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	61fb      	str	r3, [r7, #28]
 801058a:	e034      	b.n	80105f6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801058c:	88bb      	ldrh	r3, [r7, #4]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d00a      	beq.n	80105a8 <pbuf_copy_partial+0x70>
 8010592:	69fb      	ldr	r3, [r7, #28]
 8010594:	895b      	ldrh	r3, [r3, #10]
 8010596:	88ba      	ldrh	r2, [r7, #4]
 8010598:	429a      	cmp	r2, r3
 801059a:	d305      	bcc.n	80105a8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801059c:	69fb      	ldr	r3, [r7, #28]
 801059e:	895b      	ldrh	r3, [r3, #10]
 80105a0:	88ba      	ldrh	r2, [r7, #4]
 80105a2:	1ad3      	subs	r3, r2, r3
 80105a4:	80bb      	strh	r3, [r7, #4]
 80105a6:	e023      	b.n	80105f0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80105a8:	69fb      	ldr	r3, [r7, #28]
 80105aa:	895a      	ldrh	r2, [r3, #10]
 80105ac:	88bb      	ldrh	r3, [r7, #4]
 80105ae:	1ad3      	subs	r3, r2, r3
 80105b0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80105b2:	8b3a      	ldrh	r2, [r7, #24]
 80105b4:	88fb      	ldrh	r3, [r7, #6]
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d901      	bls.n	80105be <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80105ba:	88fb      	ldrh	r3, [r7, #6]
 80105bc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80105be:	8b7b      	ldrh	r3, [r7, #26]
 80105c0:	68ba      	ldr	r2, [r7, #8]
 80105c2:	18d0      	adds	r0, r2, r3
 80105c4:	69fb      	ldr	r3, [r7, #28]
 80105c6:	685a      	ldr	r2, [r3, #4]
 80105c8:	88bb      	ldrh	r3, [r7, #4]
 80105ca:	4413      	add	r3, r2
 80105cc:	8b3a      	ldrh	r2, [r7, #24]
 80105ce:	4619      	mov	r1, r3
 80105d0:	f009 fd21 	bl	801a016 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80105d4:	8afa      	ldrh	r2, [r7, #22]
 80105d6:	8b3b      	ldrh	r3, [r7, #24]
 80105d8:	4413      	add	r3, r2
 80105da:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80105dc:	8b7a      	ldrh	r2, [r7, #26]
 80105de:	8b3b      	ldrh	r3, [r7, #24]
 80105e0:	4413      	add	r3, r2
 80105e2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80105e4:	88fa      	ldrh	r2, [r7, #6]
 80105e6:	8b3b      	ldrh	r3, [r7, #24]
 80105e8:	1ad3      	subs	r3, r2, r3
 80105ea:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80105ec:	2300      	movs	r3, #0
 80105ee:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80105f0:	69fb      	ldr	r3, [r7, #28]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	61fb      	str	r3, [r7, #28]
 80105f6:	88fb      	ldrh	r3, [r7, #6]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d002      	beq.n	8010602 <pbuf_copy_partial+0xca>
 80105fc:	69fb      	ldr	r3, [r7, #28]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d1c4      	bne.n	801058c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010602:	8afb      	ldrh	r3, [r7, #22]
}
 8010604:	4618      	mov	r0, r3
 8010606:	3720      	adds	r7, #32
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}
 801060c:	080209bc 	.word	0x080209bc
 8010610:	08020d04 	.word	0x08020d04
 8010614:	08020a1c 	.word	0x08020a1c
 8010618:	08020d24 	.word	0x08020d24

0801061c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b084      	sub	sp, #16
 8010620:	af00      	add	r7, sp, #0
 8010622:	4603      	mov	r3, r0
 8010624:	603a      	str	r2, [r7, #0]
 8010626:	71fb      	strb	r3, [r7, #7]
 8010628:	460b      	mov	r3, r1
 801062a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	8919      	ldrh	r1, [r3, #8]
 8010630:	88ba      	ldrh	r2, [r7, #4]
 8010632:	79fb      	ldrb	r3, [r7, #7]
 8010634:	4618      	mov	r0, r3
 8010636:	f7ff fa99 	bl	800fb6c <pbuf_alloc>
 801063a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d101      	bne.n	8010646 <pbuf_clone+0x2a>
    return NULL;
 8010642:	2300      	movs	r3, #0
 8010644:	e011      	b.n	801066a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010646:	6839      	ldr	r1, [r7, #0]
 8010648:	68f8      	ldr	r0, [r7, #12]
 801064a:	f7ff fea3 	bl	8010394 <pbuf_copy>
 801064e:	4603      	mov	r3, r0
 8010650:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010652:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d006      	beq.n	8010668 <pbuf_clone+0x4c>
 801065a:	4b06      	ldr	r3, [pc, #24]	; (8010674 <pbuf_clone+0x58>)
 801065c:	f240 5224 	movw	r2, #1316	; 0x524
 8010660:	4905      	ldr	r1, [pc, #20]	; (8010678 <pbuf_clone+0x5c>)
 8010662:	4806      	ldr	r0, [pc, #24]	; (801067c <pbuf_clone+0x60>)
 8010664:	f00a fbc0 	bl	801ade8 <iprintf>
  return q;
 8010668:	68fb      	ldr	r3, [r7, #12]
}
 801066a:	4618      	mov	r0, r3
 801066c:	3710      	adds	r7, #16
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}
 8010672:	bf00      	nop
 8010674:	080209bc 	.word	0x080209bc
 8010678:	08020e30 	.word	0x08020e30
 801067c:	08020a1c 	.word	0x08020a1c

08010680 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010684:	f00a fc2c 	bl	801aee0 <rand>
 8010688:	4603      	mov	r3, r0
 801068a:	b29b      	uxth	r3, r3
 801068c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010690:	b29b      	uxth	r3, r3
 8010692:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010696:	b29a      	uxth	r2, r3
 8010698:	4b01      	ldr	r3, [pc, #4]	; (80106a0 <tcp_init+0x20>)
 801069a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801069c:	bf00      	nop
 801069e:	bd80      	pop	{r7, pc}
 80106a0:	20000014 	.word	0x20000014

080106a4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b082      	sub	sp, #8
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	7d1b      	ldrb	r3, [r3, #20]
 80106b0:	2b01      	cmp	r3, #1
 80106b2:	d105      	bne.n	80106c0 <tcp_free+0x1c>
 80106b4:	4b06      	ldr	r3, [pc, #24]	; (80106d0 <tcp_free+0x2c>)
 80106b6:	22d4      	movs	r2, #212	; 0xd4
 80106b8:	4906      	ldr	r1, [pc, #24]	; (80106d4 <tcp_free+0x30>)
 80106ba:	4807      	ldr	r0, [pc, #28]	; (80106d8 <tcp_free+0x34>)
 80106bc:	f00a fb94 	bl	801ade8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80106c0:	6879      	ldr	r1, [r7, #4]
 80106c2:	2001      	movs	r0, #1
 80106c4:	f7fe ff0a 	bl	800f4dc <memp_free>
}
 80106c8:	bf00      	nop
 80106ca:	3708      	adds	r7, #8
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}
 80106d0:	08020ebc 	.word	0x08020ebc
 80106d4:	08020eec 	.word	0x08020eec
 80106d8:	08020f00 	.word	0x08020f00

080106dc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b082      	sub	sp, #8
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	7d1b      	ldrb	r3, [r3, #20]
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d105      	bne.n	80106f8 <tcp_free_listen+0x1c>
 80106ec:	4b06      	ldr	r3, [pc, #24]	; (8010708 <tcp_free_listen+0x2c>)
 80106ee:	22df      	movs	r2, #223	; 0xdf
 80106f0:	4906      	ldr	r1, [pc, #24]	; (801070c <tcp_free_listen+0x30>)
 80106f2:	4807      	ldr	r0, [pc, #28]	; (8010710 <tcp_free_listen+0x34>)
 80106f4:	f00a fb78 	bl	801ade8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80106f8:	6879      	ldr	r1, [r7, #4]
 80106fa:	2002      	movs	r0, #2
 80106fc:	f7fe feee 	bl	800f4dc <memp_free>
}
 8010700:	bf00      	nop
 8010702:	3708      	adds	r7, #8
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}
 8010708:	08020ebc 	.word	0x08020ebc
 801070c:	08020f28 	.word	0x08020f28
 8010710:	08020f00 	.word	0x08020f00

08010714 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010718:	f001 f850 	bl	80117bc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801071c:	4b07      	ldr	r3, [pc, #28]	; (801073c <tcp_tmr+0x28>)
 801071e:	781b      	ldrb	r3, [r3, #0]
 8010720:	3301      	adds	r3, #1
 8010722:	b2da      	uxtb	r2, r3
 8010724:	4b05      	ldr	r3, [pc, #20]	; (801073c <tcp_tmr+0x28>)
 8010726:	701a      	strb	r2, [r3, #0]
 8010728:	4b04      	ldr	r3, [pc, #16]	; (801073c <tcp_tmr+0x28>)
 801072a:	781b      	ldrb	r3, [r3, #0]
 801072c:	f003 0301 	and.w	r3, r3, #1
 8010730:	2b00      	cmp	r3, #0
 8010732:	d001      	beq.n	8010738 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010734:	f000 fd04 	bl	8011140 <tcp_slowtmr>
  }
}
 8010738:	bf00      	nop
 801073a:	bd80      	pop	{r7, pc}
 801073c:	20000891 	.word	0x20000891

08010740 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b084      	sub	sp, #16
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
 8010748:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d105      	bne.n	801075c <tcp_remove_listener+0x1c>
 8010750:	4b0d      	ldr	r3, [pc, #52]	; (8010788 <tcp_remove_listener+0x48>)
 8010752:	22ff      	movs	r2, #255	; 0xff
 8010754:	490d      	ldr	r1, [pc, #52]	; (801078c <tcp_remove_listener+0x4c>)
 8010756:	480e      	ldr	r0, [pc, #56]	; (8010790 <tcp_remove_listener+0x50>)
 8010758:	f00a fb46 	bl	801ade8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	60fb      	str	r3, [r7, #12]
 8010760:	e00a      	b.n	8010778 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010766:	683a      	ldr	r2, [r7, #0]
 8010768:	429a      	cmp	r2, r3
 801076a:	d102      	bne.n	8010772 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	2200      	movs	r2, #0
 8010770:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	68db      	ldr	r3, [r3, #12]
 8010776:	60fb      	str	r3, [r7, #12]
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d1f1      	bne.n	8010762 <tcp_remove_listener+0x22>
    }
  }
}
 801077e:	bf00      	nop
 8010780:	3710      	adds	r7, #16
 8010782:	46bd      	mov	sp, r7
 8010784:	bd80      	pop	{r7, pc}
 8010786:	bf00      	nop
 8010788:	08020ebc 	.word	0x08020ebc
 801078c:	08020f44 	.word	0x08020f44
 8010790:	08020f00 	.word	0x08020f00

08010794 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b084      	sub	sp, #16
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d106      	bne.n	80107b0 <tcp_listen_closed+0x1c>
 80107a2:	4b14      	ldr	r3, [pc, #80]	; (80107f4 <tcp_listen_closed+0x60>)
 80107a4:	f240 1211 	movw	r2, #273	; 0x111
 80107a8:	4913      	ldr	r1, [pc, #76]	; (80107f8 <tcp_listen_closed+0x64>)
 80107aa:	4814      	ldr	r0, [pc, #80]	; (80107fc <tcp_listen_closed+0x68>)
 80107ac:	f00a fb1c 	bl	801ade8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	7d1b      	ldrb	r3, [r3, #20]
 80107b4:	2b01      	cmp	r3, #1
 80107b6:	d006      	beq.n	80107c6 <tcp_listen_closed+0x32>
 80107b8:	4b0e      	ldr	r3, [pc, #56]	; (80107f4 <tcp_listen_closed+0x60>)
 80107ba:	f44f 7289 	mov.w	r2, #274	; 0x112
 80107be:	4910      	ldr	r1, [pc, #64]	; (8010800 <tcp_listen_closed+0x6c>)
 80107c0:	480e      	ldr	r0, [pc, #56]	; (80107fc <tcp_listen_closed+0x68>)
 80107c2:	f00a fb11 	bl	801ade8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80107c6:	2301      	movs	r3, #1
 80107c8:	60fb      	str	r3, [r7, #12]
 80107ca:	e00b      	b.n	80107e4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80107cc:	4a0d      	ldr	r2, [pc, #52]	; (8010804 <tcp_listen_closed+0x70>)
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	6879      	ldr	r1, [r7, #4]
 80107d8:	4618      	mov	r0, r3
 80107da:	f7ff ffb1 	bl	8010740 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	3301      	adds	r3, #1
 80107e2:	60fb      	str	r3, [r7, #12]
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	2b03      	cmp	r3, #3
 80107e8:	d9f0      	bls.n	80107cc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80107ea:	bf00      	nop
 80107ec:	3710      	adds	r7, #16
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}
 80107f2:	bf00      	nop
 80107f4:	08020ebc 	.word	0x08020ebc
 80107f8:	08020f6c 	.word	0x08020f6c
 80107fc:	08020f00 	.word	0x08020f00
 8010800:	08020f78 	.word	0x08020f78
 8010804:	080246d4 	.word	0x080246d4

08010808 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010808:	b5b0      	push	{r4, r5, r7, lr}
 801080a:	b088      	sub	sp, #32
 801080c:	af04      	add	r7, sp, #16
 801080e:	6078      	str	r0, [r7, #4]
 8010810:	460b      	mov	r3, r1
 8010812:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d106      	bne.n	8010828 <tcp_close_shutdown+0x20>
 801081a:	4b61      	ldr	r3, [pc, #388]	; (80109a0 <tcp_close_shutdown+0x198>)
 801081c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010820:	4960      	ldr	r1, [pc, #384]	; (80109a4 <tcp_close_shutdown+0x19c>)
 8010822:	4861      	ldr	r0, [pc, #388]	; (80109a8 <tcp_close_shutdown+0x1a0>)
 8010824:	f00a fae0 	bl	801ade8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010828:	78fb      	ldrb	r3, [r7, #3]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d066      	beq.n	80108fc <tcp_close_shutdown+0xf4>
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	7d1b      	ldrb	r3, [r3, #20]
 8010832:	2b04      	cmp	r3, #4
 8010834:	d003      	beq.n	801083e <tcp_close_shutdown+0x36>
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	7d1b      	ldrb	r3, [r3, #20]
 801083a:	2b07      	cmp	r3, #7
 801083c:	d15e      	bne.n	80108fc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010842:	2b00      	cmp	r3, #0
 8010844:	d104      	bne.n	8010850 <tcp_close_shutdown+0x48>
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801084a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801084e:	d055      	beq.n	80108fc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	8b5b      	ldrh	r3, [r3, #26]
 8010854:	f003 0310 	and.w	r3, r3, #16
 8010858:	2b00      	cmp	r3, #0
 801085a:	d106      	bne.n	801086a <tcp_close_shutdown+0x62>
 801085c:	4b50      	ldr	r3, [pc, #320]	; (80109a0 <tcp_close_shutdown+0x198>)
 801085e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8010862:	4952      	ldr	r1, [pc, #328]	; (80109ac <tcp_close_shutdown+0x1a4>)
 8010864:	4850      	ldr	r0, [pc, #320]	; (80109a8 <tcp_close_shutdown+0x1a0>)
 8010866:	f00a fabf 	bl	801ade8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010872:	687d      	ldr	r5, [r7, #4]
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	3304      	adds	r3, #4
 8010878:	687a      	ldr	r2, [r7, #4]
 801087a:	8ad2      	ldrh	r2, [r2, #22]
 801087c:	6879      	ldr	r1, [r7, #4]
 801087e:	8b09      	ldrh	r1, [r1, #24]
 8010880:	9102      	str	r1, [sp, #8]
 8010882:	9201      	str	r2, [sp, #4]
 8010884:	9300      	str	r3, [sp, #0]
 8010886:	462b      	mov	r3, r5
 8010888:	4622      	mov	r2, r4
 801088a:	4601      	mov	r1, r0
 801088c:	6878      	ldr	r0, [r7, #4]
 801088e:	f005 fd71 	bl	8016374 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010892:	6878      	ldr	r0, [r7, #4]
 8010894:	f001 fb40 	bl	8011f18 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010898:	4b45      	ldr	r3, [pc, #276]	; (80109b0 <tcp_close_shutdown+0x1a8>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	687a      	ldr	r2, [r7, #4]
 801089e:	429a      	cmp	r2, r3
 80108a0:	d105      	bne.n	80108ae <tcp_close_shutdown+0xa6>
 80108a2:	4b43      	ldr	r3, [pc, #268]	; (80109b0 <tcp_close_shutdown+0x1a8>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	68db      	ldr	r3, [r3, #12]
 80108a8:	4a41      	ldr	r2, [pc, #260]	; (80109b0 <tcp_close_shutdown+0x1a8>)
 80108aa:	6013      	str	r3, [r2, #0]
 80108ac:	e013      	b.n	80108d6 <tcp_close_shutdown+0xce>
 80108ae:	4b40      	ldr	r3, [pc, #256]	; (80109b0 <tcp_close_shutdown+0x1a8>)
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	60fb      	str	r3, [r7, #12]
 80108b4:	e00c      	b.n	80108d0 <tcp_close_shutdown+0xc8>
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	68db      	ldr	r3, [r3, #12]
 80108ba:	687a      	ldr	r2, [r7, #4]
 80108bc:	429a      	cmp	r2, r3
 80108be:	d104      	bne.n	80108ca <tcp_close_shutdown+0xc2>
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	68da      	ldr	r2, [r3, #12]
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	60da      	str	r2, [r3, #12]
 80108c8:	e005      	b.n	80108d6 <tcp_close_shutdown+0xce>
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	68db      	ldr	r3, [r3, #12]
 80108ce:	60fb      	str	r3, [r7, #12]
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d1ef      	bne.n	80108b6 <tcp_close_shutdown+0xae>
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2200      	movs	r2, #0
 80108da:	60da      	str	r2, [r3, #12]
 80108dc:	4b35      	ldr	r3, [pc, #212]	; (80109b4 <tcp_close_shutdown+0x1ac>)
 80108de:	2201      	movs	r2, #1
 80108e0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80108e2:	4b35      	ldr	r3, [pc, #212]	; (80109b8 <tcp_close_shutdown+0x1b0>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	687a      	ldr	r2, [r7, #4]
 80108e8:	429a      	cmp	r2, r3
 80108ea:	d102      	bne.n	80108f2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80108ec:	f003 ffd2 	bl	8014894 <tcp_trigger_input_pcb_close>
 80108f0:	e002      	b.n	80108f8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	f7ff fed6 	bl	80106a4 <tcp_free>
      }
      return ERR_OK;
 80108f8:	2300      	movs	r3, #0
 80108fa:	e04d      	b.n	8010998 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	7d1b      	ldrb	r3, [r3, #20]
 8010900:	2b01      	cmp	r3, #1
 8010902:	d02d      	beq.n	8010960 <tcp_close_shutdown+0x158>
 8010904:	2b02      	cmp	r3, #2
 8010906:	d036      	beq.n	8010976 <tcp_close_shutdown+0x16e>
 8010908:	2b00      	cmp	r3, #0
 801090a:	d13f      	bne.n	801098c <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	8adb      	ldrh	r3, [r3, #22]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d021      	beq.n	8010958 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010914:	4b29      	ldr	r3, [pc, #164]	; (80109bc <tcp_close_shutdown+0x1b4>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	687a      	ldr	r2, [r7, #4]
 801091a:	429a      	cmp	r2, r3
 801091c:	d105      	bne.n	801092a <tcp_close_shutdown+0x122>
 801091e:	4b27      	ldr	r3, [pc, #156]	; (80109bc <tcp_close_shutdown+0x1b4>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	68db      	ldr	r3, [r3, #12]
 8010924:	4a25      	ldr	r2, [pc, #148]	; (80109bc <tcp_close_shutdown+0x1b4>)
 8010926:	6013      	str	r3, [r2, #0]
 8010928:	e013      	b.n	8010952 <tcp_close_shutdown+0x14a>
 801092a:	4b24      	ldr	r3, [pc, #144]	; (80109bc <tcp_close_shutdown+0x1b4>)
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	60bb      	str	r3, [r7, #8]
 8010930:	e00c      	b.n	801094c <tcp_close_shutdown+0x144>
 8010932:	68bb      	ldr	r3, [r7, #8]
 8010934:	68db      	ldr	r3, [r3, #12]
 8010936:	687a      	ldr	r2, [r7, #4]
 8010938:	429a      	cmp	r2, r3
 801093a:	d104      	bne.n	8010946 <tcp_close_shutdown+0x13e>
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	68da      	ldr	r2, [r3, #12]
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	60da      	str	r2, [r3, #12]
 8010944:	e005      	b.n	8010952 <tcp_close_shutdown+0x14a>
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	68db      	ldr	r3, [r3, #12]
 801094a:	60bb      	str	r3, [r7, #8]
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d1ef      	bne.n	8010932 <tcp_close_shutdown+0x12a>
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	2200      	movs	r2, #0
 8010956:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f7ff fea3 	bl	80106a4 <tcp_free>
      break;
 801095e:	e01a      	b.n	8010996 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f7ff ff17 	bl	8010794 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010966:	6879      	ldr	r1, [r7, #4]
 8010968:	4815      	ldr	r0, [pc, #84]	; (80109c0 <tcp_close_shutdown+0x1b8>)
 801096a:	f001 fb25 	bl	8011fb8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	f7ff feb4 	bl	80106dc <tcp_free_listen>
      break;
 8010974:	e00f      	b.n	8010996 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010976:	6879      	ldr	r1, [r7, #4]
 8010978:	480d      	ldr	r0, [pc, #52]	; (80109b0 <tcp_close_shutdown+0x1a8>)
 801097a:	f001 fb1d 	bl	8011fb8 <tcp_pcb_remove>
 801097e:	4b0d      	ldr	r3, [pc, #52]	; (80109b4 <tcp_close_shutdown+0x1ac>)
 8010980:	2201      	movs	r2, #1
 8010982:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8010984:	6878      	ldr	r0, [r7, #4]
 8010986:	f7ff fe8d 	bl	80106a4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801098a:	e004      	b.n	8010996 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 801098c:	6878      	ldr	r0, [r7, #4]
 801098e:	f000 f819 	bl	80109c4 <tcp_close_shutdown_fin>
 8010992:	4603      	mov	r3, r0
 8010994:	e000      	b.n	8010998 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8010996:	2300      	movs	r3, #0
}
 8010998:	4618      	mov	r0, r3
 801099a:	3710      	adds	r7, #16
 801099c:	46bd      	mov	sp, r7
 801099e:	bdb0      	pop	{r4, r5, r7, pc}
 80109a0:	08020ebc 	.word	0x08020ebc
 80109a4:	08020f90 	.word	0x08020f90
 80109a8:	08020f00 	.word	0x08020f00
 80109ac:	08020fb0 	.word	0x08020fb0
 80109b0:	20007c9c 	.word	0x20007c9c
 80109b4:	20007c98 	.word	0x20007c98
 80109b8:	20007cb0 	.word	0x20007cb0
 80109bc:	20007ca8 	.word	0x20007ca8
 80109c0:	20007ca4 	.word	0x20007ca4

080109c4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b084      	sub	sp, #16
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d106      	bne.n	80109e0 <tcp_close_shutdown_fin+0x1c>
 80109d2:	4b2c      	ldr	r3, [pc, #176]	; (8010a84 <tcp_close_shutdown_fin+0xc0>)
 80109d4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80109d8:	492b      	ldr	r1, [pc, #172]	; (8010a88 <tcp_close_shutdown_fin+0xc4>)
 80109da:	482c      	ldr	r0, [pc, #176]	; (8010a8c <tcp_close_shutdown_fin+0xc8>)
 80109dc:	f00a fa04 	bl	801ade8 <iprintf>

  switch (pcb->state) {
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	7d1b      	ldrb	r3, [r3, #20]
 80109e4:	2b04      	cmp	r3, #4
 80109e6:	d010      	beq.n	8010a0a <tcp_close_shutdown_fin+0x46>
 80109e8:	2b07      	cmp	r3, #7
 80109ea:	d01b      	beq.n	8010a24 <tcp_close_shutdown_fin+0x60>
 80109ec:	2b03      	cmp	r3, #3
 80109ee:	d126      	bne.n	8010a3e <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80109f0:	6878      	ldr	r0, [r7, #4]
 80109f2:	f004 fdbb 	bl	801556c <tcp_send_fin>
 80109f6:	4603      	mov	r3, r0
 80109f8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80109fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d11f      	bne.n	8010a42 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2205      	movs	r2, #5
 8010a06:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010a08:	e01b      	b.n	8010a42 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010a0a:	6878      	ldr	r0, [r7, #4]
 8010a0c:	f004 fdae 	bl	801556c <tcp_send_fin>
 8010a10:	4603      	mov	r3, r0
 8010a12:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d114      	bne.n	8010a46 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2205      	movs	r2, #5
 8010a20:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010a22:	e010      	b.n	8010a46 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010a24:	6878      	ldr	r0, [r7, #4]
 8010a26:	f004 fda1 	bl	801556c <tcp_send_fin>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d109      	bne.n	8010a4a <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	2209      	movs	r2, #9
 8010a3a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010a3c:	e005      	b.n	8010a4a <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	e01c      	b.n	8010a7c <tcp_close_shutdown_fin+0xb8>
      break;
 8010a42:	bf00      	nop
 8010a44:	e002      	b.n	8010a4c <tcp_close_shutdown_fin+0x88>
      break;
 8010a46:	bf00      	nop
 8010a48:	e000      	b.n	8010a4c <tcp_close_shutdown_fin+0x88>
      break;
 8010a4a:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d103      	bne.n	8010a5c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010a54:	6878      	ldr	r0, [r7, #4]
 8010a56:	f004 fec7 	bl	80157e8 <tcp_output>
 8010a5a:	e00d      	b.n	8010a78 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8010a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a64:	d108      	bne.n	8010a78 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	8b5b      	ldrh	r3, [r3, #26]
 8010a6a:	f043 0308 	orr.w	r3, r3, #8
 8010a6e:	b29a      	uxth	r2, r3
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010a74:	2300      	movs	r3, #0
 8010a76:	e001      	b.n	8010a7c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8010a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3710      	adds	r7, #16
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}
 8010a84:	08020ebc 	.word	0x08020ebc
 8010a88:	08020f6c 	.word	0x08020f6c
 8010a8c:	08020f00 	.word	0x08020f00

08010a90 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b082      	sub	sp, #8
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d109      	bne.n	8010ab2 <tcp_close+0x22>
 8010a9e:	4b0f      	ldr	r3, [pc, #60]	; (8010adc <tcp_close+0x4c>)
 8010aa0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8010aa4:	490e      	ldr	r1, [pc, #56]	; (8010ae0 <tcp_close+0x50>)
 8010aa6:	480f      	ldr	r0, [pc, #60]	; (8010ae4 <tcp_close+0x54>)
 8010aa8:	f00a f99e 	bl	801ade8 <iprintf>
 8010aac:	f06f 030f 	mvn.w	r3, #15
 8010ab0:	e00f      	b.n	8010ad2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	7d1b      	ldrb	r3, [r3, #20]
 8010ab6:	2b01      	cmp	r3, #1
 8010ab8:	d006      	beq.n	8010ac8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	8b5b      	ldrh	r3, [r3, #26]
 8010abe:	f043 0310 	orr.w	r3, r3, #16
 8010ac2:	b29a      	uxth	r2, r3
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010ac8:	2101      	movs	r1, #1
 8010aca:	6878      	ldr	r0, [r7, #4]
 8010acc:	f7ff fe9c 	bl	8010808 <tcp_close_shutdown>
 8010ad0:	4603      	mov	r3, r0
}
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	3708      	adds	r7, #8
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd80      	pop	{r7, pc}
 8010ada:	bf00      	nop
 8010adc:	08020ebc 	.word	0x08020ebc
 8010ae0:	08020fcc 	.word	0x08020fcc
 8010ae4:	08020f00 	.word	0x08020f00

08010ae8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b084      	sub	sp, #16
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	60f8      	str	r0, [r7, #12]
 8010af0:	60b9      	str	r1, [r7, #8]
 8010af2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d109      	bne.n	8010b0e <tcp_shutdown+0x26>
 8010afa:	4b25      	ldr	r3, [pc, #148]	; (8010b90 <tcp_shutdown+0xa8>)
 8010afc:	f240 2207 	movw	r2, #519	; 0x207
 8010b00:	4924      	ldr	r1, [pc, #144]	; (8010b94 <tcp_shutdown+0xac>)
 8010b02:	4825      	ldr	r0, [pc, #148]	; (8010b98 <tcp_shutdown+0xb0>)
 8010b04:	f00a f970 	bl	801ade8 <iprintf>
 8010b08:	f06f 030f 	mvn.w	r3, #15
 8010b0c:	e03c      	b.n	8010b88 <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	7d1b      	ldrb	r3, [r3, #20]
 8010b12:	2b01      	cmp	r3, #1
 8010b14:	d102      	bne.n	8010b1c <tcp_shutdown+0x34>
    return ERR_CONN;
 8010b16:	f06f 030a 	mvn.w	r3, #10
 8010b1a:	e035      	b.n	8010b88 <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 8010b1c:	68bb      	ldr	r3, [r7, #8]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d01b      	beq.n	8010b5a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	8b5b      	ldrh	r3, [r3, #26]
 8010b26:	f043 0310 	orr.w	r3, r3, #16
 8010b2a:	b29a      	uxth	r2, r3
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d005      	beq.n	8010b42 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8010b36:	2101      	movs	r1, #1
 8010b38:	68f8      	ldr	r0, [r7, #12]
 8010b3a:	f7ff fe65 	bl	8010808 <tcp_close_shutdown>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	e022      	b.n	8010b88 <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d007      	beq.n	8010b5a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f7ff faec 	bl	801012c <pbuf_free>
      pcb->refused_data = NULL;
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	2200      	movs	r2, #0
 8010b58:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d012      	beq.n	8010b86 <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	7d1b      	ldrb	r3, [r3, #20]
 8010b64:	2b03      	cmp	r3, #3
 8010b66:	db0b      	blt.n	8010b80 <tcp_shutdown+0x98>
 8010b68:	2b04      	cmp	r3, #4
 8010b6a:	dd01      	ble.n	8010b70 <tcp_shutdown+0x88>
 8010b6c:	2b07      	cmp	r3, #7
 8010b6e:	d107      	bne.n	8010b80 <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8010b70:	68bb      	ldr	r3, [r7, #8]
 8010b72:	b2db      	uxtb	r3, r3
 8010b74:	4619      	mov	r1, r3
 8010b76:	68f8      	ldr	r0, [r7, #12]
 8010b78:	f7ff fe46 	bl	8010808 <tcp_close_shutdown>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	e003      	b.n	8010b88 <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8010b80:	f06f 030a 	mvn.w	r3, #10
 8010b84:	e000      	b.n	8010b88 <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 8010b86:	2300      	movs	r3, #0
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3710      	adds	r7, #16
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}
 8010b90:	08020ebc 	.word	0x08020ebc
 8010b94:	08020fe4 	.word	0x08020fe4
 8010b98:	08020f00 	.word	0x08020f00

08010b9c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b08e      	sub	sp, #56	; 0x38
 8010ba0:	af04      	add	r7, sp, #16
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d107      	bne.n	8010bbc <tcp_abandon+0x20>
 8010bac:	4b52      	ldr	r3, [pc, #328]	; (8010cf8 <tcp_abandon+0x15c>)
 8010bae:	f240 223d 	movw	r2, #573	; 0x23d
 8010bb2:	4952      	ldr	r1, [pc, #328]	; (8010cfc <tcp_abandon+0x160>)
 8010bb4:	4852      	ldr	r0, [pc, #328]	; (8010d00 <tcp_abandon+0x164>)
 8010bb6:	f00a f917 	bl	801ade8 <iprintf>
 8010bba:	e099      	b.n	8010cf0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	7d1b      	ldrb	r3, [r3, #20]
 8010bc0:	2b01      	cmp	r3, #1
 8010bc2:	d106      	bne.n	8010bd2 <tcp_abandon+0x36>
 8010bc4:	4b4c      	ldr	r3, [pc, #304]	; (8010cf8 <tcp_abandon+0x15c>)
 8010bc6:	f240 2241 	movw	r2, #577	; 0x241
 8010bca:	494e      	ldr	r1, [pc, #312]	; (8010d04 <tcp_abandon+0x168>)
 8010bcc:	484c      	ldr	r0, [pc, #304]	; (8010d00 <tcp_abandon+0x164>)
 8010bce:	f00a f90b 	bl	801ade8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	7d1b      	ldrb	r3, [r3, #20]
 8010bd6:	2b0a      	cmp	r3, #10
 8010bd8:	d107      	bne.n	8010bea <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010bda:	6879      	ldr	r1, [r7, #4]
 8010bdc:	484a      	ldr	r0, [pc, #296]	; (8010d08 <tcp_abandon+0x16c>)
 8010bde:	f001 f9eb 	bl	8011fb8 <tcp_pcb_remove>
    tcp_free(pcb);
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f7ff fd5e 	bl	80106a4 <tcp_free>
 8010be8:	e082      	b.n	8010cf0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010bea:	2300      	movs	r3, #0
 8010bec:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8010bee:	2300      	movs	r3, #0
 8010bf0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010bf6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bfc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c04:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	691b      	ldr	r3, [r3, #16]
 8010c0a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	7d1b      	ldrb	r3, [r3, #20]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d126      	bne.n	8010c62 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	8adb      	ldrh	r3, [r3, #22]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d02e      	beq.n	8010c7a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010c1c:	4b3b      	ldr	r3, [pc, #236]	; (8010d0c <tcp_abandon+0x170>)
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	687a      	ldr	r2, [r7, #4]
 8010c22:	429a      	cmp	r2, r3
 8010c24:	d105      	bne.n	8010c32 <tcp_abandon+0x96>
 8010c26:	4b39      	ldr	r3, [pc, #228]	; (8010d0c <tcp_abandon+0x170>)
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	68db      	ldr	r3, [r3, #12]
 8010c2c:	4a37      	ldr	r2, [pc, #220]	; (8010d0c <tcp_abandon+0x170>)
 8010c2e:	6013      	str	r3, [r2, #0]
 8010c30:	e013      	b.n	8010c5a <tcp_abandon+0xbe>
 8010c32:	4b36      	ldr	r3, [pc, #216]	; (8010d0c <tcp_abandon+0x170>)
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	61fb      	str	r3, [r7, #28]
 8010c38:	e00c      	b.n	8010c54 <tcp_abandon+0xb8>
 8010c3a:	69fb      	ldr	r3, [r7, #28]
 8010c3c:	68db      	ldr	r3, [r3, #12]
 8010c3e:	687a      	ldr	r2, [r7, #4]
 8010c40:	429a      	cmp	r2, r3
 8010c42:	d104      	bne.n	8010c4e <tcp_abandon+0xb2>
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	68da      	ldr	r2, [r3, #12]
 8010c48:	69fb      	ldr	r3, [r7, #28]
 8010c4a:	60da      	str	r2, [r3, #12]
 8010c4c:	e005      	b.n	8010c5a <tcp_abandon+0xbe>
 8010c4e:	69fb      	ldr	r3, [r7, #28]
 8010c50:	68db      	ldr	r3, [r3, #12]
 8010c52:	61fb      	str	r3, [r7, #28]
 8010c54:	69fb      	ldr	r3, [r7, #28]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d1ef      	bne.n	8010c3a <tcp_abandon+0x9e>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	60da      	str	r2, [r3, #12]
 8010c60:	e00b      	b.n	8010c7a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8010c62:	683b      	ldr	r3, [r7, #0]
 8010c64:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	8adb      	ldrh	r3, [r3, #22]
 8010c6a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010c6c:	6879      	ldr	r1, [r7, #4]
 8010c6e:	4828      	ldr	r0, [pc, #160]	; (8010d10 <tcp_abandon+0x174>)
 8010c70:	f001 f9a2 	bl	8011fb8 <tcp_pcb_remove>
 8010c74:	4b27      	ldr	r3, [pc, #156]	; (8010d14 <tcp_abandon+0x178>)
 8010c76:	2201      	movs	r2, #1
 8010c78:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d004      	beq.n	8010c8c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c86:	4618      	mov	r0, r3
 8010c88:	f000 fe78 	bl	801197c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d004      	beq.n	8010c9e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f000 fe6f 	bl	801197c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d004      	beq.n	8010cb0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010caa:	4618      	mov	r0, r3
 8010cac:	f000 fe66 	bl	801197c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d00e      	beq.n	8010cd4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010cb6:	6879      	ldr	r1, [r7, #4]
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	3304      	adds	r3, #4
 8010cbc:	687a      	ldr	r2, [r7, #4]
 8010cbe:	8b12      	ldrh	r2, [r2, #24]
 8010cc0:	9202      	str	r2, [sp, #8]
 8010cc2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010cc4:	9201      	str	r2, [sp, #4]
 8010cc6:	9300      	str	r3, [sp, #0]
 8010cc8:	460b      	mov	r3, r1
 8010cca:	697a      	ldr	r2, [r7, #20]
 8010ccc:	69b9      	ldr	r1, [r7, #24]
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	f005 fb50 	bl	8016374 <tcp_rst>
    }
    last_state = pcb->state;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	7d1b      	ldrb	r3, [r3, #20]
 8010cd8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f7ff fce2 	bl	80106a4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010ce0:	693b      	ldr	r3, [r7, #16]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d004      	beq.n	8010cf0 <tcp_abandon+0x154>
 8010ce6:	693b      	ldr	r3, [r7, #16]
 8010ce8:	f06f 010c 	mvn.w	r1, #12
 8010cec:	68f8      	ldr	r0, [r7, #12]
 8010cee:	4798      	blx	r3
  }
}
 8010cf0:	3728      	adds	r7, #40	; 0x28
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}
 8010cf6:	bf00      	nop
 8010cf8:	08020ebc 	.word	0x08020ebc
 8010cfc:	08021000 	.word	0x08021000
 8010d00:	08020f00 	.word	0x08020f00
 8010d04:	0802101c 	.word	0x0802101c
 8010d08:	20007cac 	.word	0x20007cac
 8010d0c:	20007ca8 	.word	0x20007ca8
 8010d10:	20007c9c 	.word	0x20007c9c
 8010d14:	20007c98 	.word	0x20007c98

08010d18 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b082      	sub	sp, #8
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010d20:	2101      	movs	r1, #1
 8010d22:	6878      	ldr	r0, [r7, #4]
 8010d24:	f7ff ff3a 	bl	8010b9c <tcp_abandon>
}
 8010d28:	bf00      	nop
 8010d2a:	3708      	adds	r7, #8
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd80      	pop	{r7, pc}

08010d30 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b084      	sub	sp, #16
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d106      	bne.n	8010d4c <tcp_update_rcv_ann_wnd+0x1c>
 8010d3e:	4b25      	ldr	r3, [pc, #148]	; (8010dd4 <tcp_update_rcv_ann_wnd+0xa4>)
 8010d40:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010d44:	4924      	ldr	r1, [pc, #144]	; (8010dd8 <tcp_update_rcv_ann_wnd+0xa8>)
 8010d46:	4825      	ldr	r0, [pc, #148]	; (8010ddc <tcp_update_rcv_ann_wnd+0xac>)
 8010d48:	f00a f84e 	bl	801ade8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d50:	687a      	ldr	r2, [r7, #4]
 8010d52:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010d54:	4413      	add	r3, r2
 8010d56:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d5c:	687a      	ldr	r2, [r7, #4]
 8010d5e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8010d60:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8010d64:	bf28      	it	cs
 8010d66:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8010d6a:	b292      	uxth	r2, r2
 8010d6c:	4413      	add	r3, r2
 8010d6e:	68fa      	ldr	r2, [r7, #12]
 8010d70:	1ad3      	subs	r3, r2, r3
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	db08      	blt.n	8010d88 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d82:	68fa      	ldr	r2, [r7, #12]
 8010d84:	1ad3      	subs	r3, r2, r3
 8010d86:	e020      	b.n	8010dca <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d90:	1ad3      	subs	r3, r2, r3
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	dd03      	ble.n	8010d9e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2200      	movs	r2, #0
 8010d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010d9c:	e014      	b.n	8010dc8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010da6:	1ad3      	subs	r3, r2, r3
 8010da8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010daa:	68bb      	ldr	r3, [r7, #8]
 8010dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010db0:	d306      	bcc.n	8010dc0 <tcp_update_rcv_ann_wnd+0x90>
 8010db2:	4b08      	ldr	r3, [pc, #32]	; (8010dd4 <tcp_update_rcv_ann_wnd+0xa4>)
 8010db4:	f240 32b6 	movw	r2, #950	; 0x3b6
 8010db8:	4909      	ldr	r1, [pc, #36]	; (8010de0 <tcp_update_rcv_ann_wnd+0xb0>)
 8010dba:	4808      	ldr	r0, [pc, #32]	; (8010ddc <tcp_update_rcv_ann_wnd+0xac>)
 8010dbc:	f00a f814 	bl	801ade8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8010dc0:	68bb      	ldr	r3, [r7, #8]
 8010dc2:	b29a      	uxth	r2, r3
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010dc8:	2300      	movs	r3, #0
  }
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3710      	adds	r7, #16
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}
 8010dd2:	bf00      	nop
 8010dd4:	08020ebc 	.word	0x08020ebc
 8010dd8:	08021118 	.word	0x08021118
 8010ddc:	08020f00 	.word	0x08020f00
 8010de0:	0802113c 	.word	0x0802113c

08010de4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b084      	sub	sp, #16
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
 8010dec:	460b      	mov	r3, r1
 8010dee:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d107      	bne.n	8010e06 <tcp_recved+0x22>
 8010df6:	4b1f      	ldr	r3, [pc, #124]	; (8010e74 <tcp_recved+0x90>)
 8010df8:	f240 32cf 	movw	r2, #975	; 0x3cf
 8010dfc:	491e      	ldr	r1, [pc, #120]	; (8010e78 <tcp_recved+0x94>)
 8010dfe:	481f      	ldr	r0, [pc, #124]	; (8010e7c <tcp_recved+0x98>)
 8010e00:	f009 fff2 	bl	801ade8 <iprintf>
 8010e04:	e032      	b.n	8010e6c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	7d1b      	ldrb	r3, [r3, #20]
 8010e0a:	2b01      	cmp	r3, #1
 8010e0c:	d106      	bne.n	8010e1c <tcp_recved+0x38>
 8010e0e:	4b19      	ldr	r3, [pc, #100]	; (8010e74 <tcp_recved+0x90>)
 8010e10:	f240 32d3 	movw	r2, #979	; 0x3d3
 8010e14:	491a      	ldr	r1, [pc, #104]	; (8010e80 <tcp_recved+0x9c>)
 8010e16:	4819      	ldr	r0, [pc, #100]	; (8010e7c <tcp_recved+0x98>)
 8010e18:	f009 ffe6 	bl	801ade8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010e20:	887b      	ldrh	r3, [r7, #2]
 8010e22:	4413      	add	r3, r2
 8010e24:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010e26:	89fb      	ldrh	r3, [r7, #14]
 8010e28:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010e2c:	d804      	bhi.n	8010e38 <tcp_recved+0x54>
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e32:	89fa      	ldrh	r2, [r7, #14]
 8010e34:	429a      	cmp	r2, r3
 8010e36:	d204      	bcs.n	8010e42 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010e3e:	851a      	strh	r2, [r3, #40]	; 0x28
 8010e40:	e002      	b.n	8010e48 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	89fa      	ldrh	r2, [r7, #14]
 8010e46:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010e48:	6878      	ldr	r0, [r7, #4]
 8010e4a:	f7ff ff71 	bl	8010d30 <tcp_update_rcv_ann_wnd>
 8010e4e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010e50:	68bb      	ldr	r3, [r7, #8]
 8010e52:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010e56:	d309      	bcc.n	8010e6c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	8b5b      	ldrh	r3, [r3, #26]
 8010e5c:	f043 0302 	orr.w	r3, r3, #2
 8010e60:	b29a      	uxth	r2, r3
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	f004 fcbe 	bl	80157e8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010e6c:	3710      	adds	r7, #16
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}
 8010e72:	bf00      	nop
 8010e74:	08020ebc 	.word	0x08020ebc
 8010e78:	08021158 	.word	0x08021158
 8010e7c:	08020f00 	.word	0x08020f00
 8010e80:	08021170 	.word	0x08021170

08010e84 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8010e84:	b480      	push	{r7}
 8010e86:	b083      	sub	sp, #12
 8010e88:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8010e8e:	4b1e      	ldr	r3, [pc, #120]	; (8010f08 <tcp_new_port+0x84>)
 8010e90:	881b      	ldrh	r3, [r3, #0]
 8010e92:	3301      	adds	r3, #1
 8010e94:	b29a      	uxth	r2, r3
 8010e96:	4b1c      	ldr	r3, [pc, #112]	; (8010f08 <tcp_new_port+0x84>)
 8010e98:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8010e9a:	4b1b      	ldr	r3, [pc, #108]	; (8010f08 <tcp_new_port+0x84>)
 8010e9c:	881b      	ldrh	r3, [r3, #0]
 8010e9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ea2:	4293      	cmp	r3, r2
 8010ea4:	d103      	bne.n	8010eae <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8010ea6:	4b18      	ldr	r3, [pc, #96]	; (8010f08 <tcp_new_port+0x84>)
 8010ea8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8010eac:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010eae:	2300      	movs	r3, #0
 8010eb0:	71fb      	strb	r3, [r7, #7]
 8010eb2:	e01e      	b.n	8010ef2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010eb4:	79fb      	ldrb	r3, [r7, #7]
 8010eb6:	4a15      	ldr	r2, [pc, #84]	; (8010f0c <tcp_new_port+0x88>)
 8010eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	603b      	str	r3, [r7, #0]
 8010ec0:	e011      	b.n	8010ee6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	8ada      	ldrh	r2, [r3, #22]
 8010ec6:	4b10      	ldr	r3, [pc, #64]	; (8010f08 <tcp_new_port+0x84>)
 8010ec8:	881b      	ldrh	r3, [r3, #0]
 8010eca:	429a      	cmp	r2, r3
 8010ecc:	d108      	bne.n	8010ee0 <tcp_new_port+0x5c>
        n++;
 8010ece:	88bb      	ldrh	r3, [r7, #4]
 8010ed0:	3301      	adds	r3, #1
 8010ed2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8010ed4:	88bb      	ldrh	r3, [r7, #4]
 8010ed6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010eda:	d3d8      	bcc.n	8010e8e <tcp_new_port+0xa>
          return 0;
 8010edc:	2300      	movs	r3, #0
 8010ede:	e00d      	b.n	8010efc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	68db      	ldr	r3, [r3, #12]
 8010ee4:	603b      	str	r3, [r7, #0]
 8010ee6:	683b      	ldr	r3, [r7, #0]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d1ea      	bne.n	8010ec2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010eec:	79fb      	ldrb	r3, [r7, #7]
 8010eee:	3301      	adds	r3, #1
 8010ef0:	71fb      	strb	r3, [r7, #7]
 8010ef2:	79fb      	ldrb	r3, [r7, #7]
 8010ef4:	2b03      	cmp	r3, #3
 8010ef6:	d9dd      	bls.n	8010eb4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8010ef8:	4b03      	ldr	r3, [pc, #12]	; (8010f08 <tcp_new_port+0x84>)
 8010efa:	881b      	ldrh	r3, [r3, #0]
}
 8010efc:	4618      	mov	r0, r3
 8010efe:	370c      	adds	r7, #12
 8010f00:	46bd      	mov	sp, r7
 8010f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f06:	4770      	bx	lr
 8010f08:	20000014 	.word	0x20000014
 8010f0c:	080246d4 	.word	0x080246d4

08010f10 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b08a      	sub	sp, #40	; 0x28
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	60f8      	str	r0, [r7, #12]
 8010f18:	60b9      	str	r1, [r7, #8]
 8010f1a:	603b      	str	r3, [r7, #0]
 8010f1c:	4613      	mov	r3, r2
 8010f1e:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8010f20:	2300      	movs	r3, #0
 8010f22:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d109      	bne.n	8010f3e <tcp_connect+0x2e>
 8010f2a:	4b7d      	ldr	r3, [pc, #500]	; (8011120 <tcp_connect+0x210>)
 8010f2c:	f240 4235 	movw	r2, #1077	; 0x435
 8010f30:	497c      	ldr	r1, [pc, #496]	; (8011124 <tcp_connect+0x214>)
 8010f32:	487d      	ldr	r0, [pc, #500]	; (8011128 <tcp_connect+0x218>)
 8010f34:	f009 ff58 	bl	801ade8 <iprintf>
 8010f38:	f06f 030f 	mvn.w	r3, #15
 8010f3c:	e0ec      	b.n	8011118 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8010f3e:	68bb      	ldr	r3, [r7, #8]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d109      	bne.n	8010f58 <tcp_connect+0x48>
 8010f44:	4b76      	ldr	r3, [pc, #472]	; (8011120 <tcp_connect+0x210>)
 8010f46:	f240 4236 	movw	r2, #1078	; 0x436
 8010f4a:	4978      	ldr	r1, [pc, #480]	; (801112c <tcp_connect+0x21c>)
 8010f4c:	4876      	ldr	r0, [pc, #472]	; (8011128 <tcp_connect+0x218>)
 8010f4e:	f009 ff4b 	bl	801ade8 <iprintf>
 8010f52:	f06f 030f 	mvn.w	r3, #15
 8010f56:	e0df      	b.n	8011118 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	7d1b      	ldrb	r3, [r3, #20]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d009      	beq.n	8010f74 <tcp_connect+0x64>
 8010f60:	4b6f      	ldr	r3, [pc, #444]	; (8011120 <tcp_connect+0x210>)
 8010f62:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8010f66:	4972      	ldr	r1, [pc, #456]	; (8011130 <tcp_connect+0x220>)
 8010f68:	486f      	ldr	r0, [pc, #444]	; (8011128 <tcp_connect+0x218>)
 8010f6a:	f009 ff3d 	bl	801ade8 <iprintf>
 8010f6e:	f06f 0309 	mvn.w	r3, #9
 8010f72:	e0d1      	b.n	8011118 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d002      	beq.n	8010f80 <tcp_connect+0x70>
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	e000      	b.n	8010f82 <tcp_connect+0x72>
 8010f80:	2300      	movs	r3, #0
 8010f82:	68fa      	ldr	r2, [r7, #12]
 8010f84:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	88fa      	ldrh	r2, [r7, #6]
 8010f8a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	7a1b      	ldrb	r3, [r3, #8]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d006      	beq.n	8010fa2 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	7a1b      	ldrb	r3, [r3, #8]
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f7fe fd3d 	bl	800fa18 <netif_get_by_index>
 8010f9e:	6278      	str	r0, [r7, #36]	; 0x24
 8010fa0:	e005      	b.n	8010fae <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	3304      	adds	r3, #4
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f007 fb50 	bl	801864c <ip4_route>
 8010fac:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8010fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d102      	bne.n	8010fba <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8010fb4:	f06f 0303 	mvn.w	r3, #3
 8010fb8:	e0ae      	b.n	8011118 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d003      	beq.n	8010fc8 <tcp_connect+0xb8>
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d111      	bne.n	8010fec <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8010fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d002      	beq.n	8010fd4 <tcp_connect+0xc4>
 8010fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd0:	3304      	adds	r3, #4
 8010fd2:	e000      	b.n	8010fd6 <tcp_connect+0xc6>
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8010fd8:	69fb      	ldr	r3, [r7, #28]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d102      	bne.n	8010fe4 <tcp_connect+0xd4>
      return ERR_RTE;
 8010fde:	f06f 0303 	mvn.w	r3, #3
 8010fe2:	e099      	b.n	8011118 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010fe4:	69fb      	ldr	r3, [r7, #28]
 8010fe6:	681a      	ldr	r2, [r3, #0]
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	8adb      	ldrh	r3, [r3, #22]
 8010ff0:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	8adb      	ldrh	r3, [r3, #22]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d10c      	bne.n	8011014 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8010ffa:	f7ff ff43 	bl	8010e84 <tcp_new_port>
 8010ffe:	4603      	mov	r3, r0
 8011000:	461a      	mov	r2, r3
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	8adb      	ldrh	r3, [r3, #22]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d102      	bne.n	8011014 <tcp_connect+0x104>
      return ERR_BUF;
 801100e:	f06f 0301 	mvn.w	r3, #1
 8011012:	e081      	b.n	8011118 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8011014:	68f8      	ldr	r0, [r7, #12]
 8011016:	f001 f863 	bl	80120e0 <tcp_next_iss>
 801101a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	2200      	movs	r2, #0
 8011020:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	697a      	ldr	r2, [r7, #20]
 8011026:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8011028:	697b      	ldr	r3, [r7, #20]
 801102a:	1e5a      	subs	r2, r3, #1
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	1e5a      	subs	r2, r3, #1
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8011038:	697b      	ldr	r3, [r7, #20]
 801103a:	1e5a      	subs	r2, r3, #1
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011046:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801105e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011068:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	3304      	adds	r3, #4
 8011072:	461a      	mov	r2, r3
 8011074:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011076:	f001 f859 	bl	801212c <tcp_eff_send_mss_netif>
 801107a:	4603      	mov	r3, r0
 801107c:	461a      	mov	r2, r3
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	2201      	movs	r2, #1
 8011086:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	683a      	ldr	r2, [r7, #0]
 801108e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8011092:	2102      	movs	r1, #2
 8011094:	68f8      	ldr	r0, [r7, #12]
 8011096:	f004 fab9 	bl	801560c <tcp_enqueue_flags>
 801109a:	4603      	mov	r3, r0
 801109c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 801109e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d136      	bne.n	8011114 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	2202      	movs	r2, #2
 80110aa:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 80110ac:	8b7b      	ldrh	r3, [r7, #26]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d021      	beq.n	80110f6 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80110b2:	4b20      	ldr	r3, [pc, #128]	; (8011134 <tcp_connect+0x224>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	68fa      	ldr	r2, [r7, #12]
 80110b8:	429a      	cmp	r2, r3
 80110ba:	d105      	bne.n	80110c8 <tcp_connect+0x1b8>
 80110bc:	4b1d      	ldr	r3, [pc, #116]	; (8011134 <tcp_connect+0x224>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	68db      	ldr	r3, [r3, #12]
 80110c2:	4a1c      	ldr	r2, [pc, #112]	; (8011134 <tcp_connect+0x224>)
 80110c4:	6013      	str	r3, [r2, #0]
 80110c6:	e013      	b.n	80110f0 <tcp_connect+0x1e0>
 80110c8:	4b1a      	ldr	r3, [pc, #104]	; (8011134 <tcp_connect+0x224>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	623b      	str	r3, [r7, #32]
 80110ce:	e00c      	b.n	80110ea <tcp_connect+0x1da>
 80110d0:	6a3b      	ldr	r3, [r7, #32]
 80110d2:	68db      	ldr	r3, [r3, #12]
 80110d4:	68fa      	ldr	r2, [r7, #12]
 80110d6:	429a      	cmp	r2, r3
 80110d8:	d104      	bne.n	80110e4 <tcp_connect+0x1d4>
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	68da      	ldr	r2, [r3, #12]
 80110de:	6a3b      	ldr	r3, [r7, #32]
 80110e0:	60da      	str	r2, [r3, #12]
 80110e2:	e005      	b.n	80110f0 <tcp_connect+0x1e0>
 80110e4:	6a3b      	ldr	r3, [r7, #32]
 80110e6:	68db      	ldr	r3, [r3, #12]
 80110e8:	623b      	str	r3, [r7, #32]
 80110ea:	6a3b      	ldr	r3, [r7, #32]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d1ef      	bne.n	80110d0 <tcp_connect+0x1c0>
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	2200      	movs	r2, #0
 80110f4:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 80110f6:	4b10      	ldr	r3, [pc, #64]	; (8011138 <tcp_connect+0x228>)
 80110f8:	681a      	ldr	r2, [r3, #0]
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	60da      	str	r2, [r3, #12]
 80110fe:	4a0e      	ldr	r2, [pc, #56]	; (8011138 <tcp_connect+0x228>)
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	6013      	str	r3, [r2, #0]
 8011104:	f005 faf8 	bl	80166f8 <tcp_timer_needed>
 8011108:	4b0c      	ldr	r3, [pc, #48]	; (801113c <tcp_connect+0x22c>)
 801110a:	2201      	movs	r2, #1
 801110c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 801110e:	68f8      	ldr	r0, [r7, #12]
 8011110:	f004 fb6a 	bl	80157e8 <tcp_output>
  }
  return ret;
 8011114:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8011118:	4618      	mov	r0, r3
 801111a:	3728      	adds	r7, #40	; 0x28
 801111c:	46bd      	mov	sp, r7
 801111e:	bd80      	pop	{r7, pc}
 8011120:	08020ebc 	.word	0x08020ebc
 8011124:	08021198 	.word	0x08021198
 8011128:	08020f00 	.word	0x08020f00
 801112c:	080211b4 	.word	0x080211b4
 8011130:	080211d0 	.word	0x080211d0
 8011134:	20007ca8 	.word	0x20007ca8
 8011138:	20007c9c 	.word	0x20007c9c
 801113c:	20007c98 	.word	0x20007c98

08011140 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011140:	b5b0      	push	{r4, r5, r7, lr}
 8011142:	b090      	sub	sp, #64	; 0x40
 8011144:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011146:	2300      	movs	r3, #0
 8011148:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801114c:	4b94      	ldr	r3, [pc, #592]	; (80113a0 <tcp_slowtmr+0x260>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	3301      	adds	r3, #1
 8011152:	4a93      	ldr	r2, [pc, #588]	; (80113a0 <tcp_slowtmr+0x260>)
 8011154:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011156:	4b93      	ldr	r3, [pc, #588]	; (80113a4 <tcp_slowtmr+0x264>)
 8011158:	781b      	ldrb	r3, [r3, #0]
 801115a:	3301      	adds	r3, #1
 801115c:	b2da      	uxtb	r2, r3
 801115e:	4b91      	ldr	r3, [pc, #580]	; (80113a4 <tcp_slowtmr+0x264>)
 8011160:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8011162:	2300      	movs	r3, #0
 8011164:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8011166:	4b90      	ldr	r3, [pc, #576]	; (80113a8 <tcp_slowtmr+0x268>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801116c:	e29d      	b.n	80116aa <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011170:	7d1b      	ldrb	r3, [r3, #20]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d106      	bne.n	8011184 <tcp_slowtmr+0x44>
 8011176:	4b8d      	ldr	r3, [pc, #564]	; (80113ac <tcp_slowtmr+0x26c>)
 8011178:	f240 42be 	movw	r2, #1214	; 0x4be
 801117c:	498c      	ldr	r1, [pc, #560]	; (80113b0 <tcp_slowtmr+0x270>)
 801117e:	488d      	ldr	r0, [pc, #564]	; (80113b4 <tcp_slowtmr+0x274>)
 8011180:	f009 fe32 	bl	801ade8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011186:	7d1b      	ldrb	r3, [r3, #20]
 8011188:	2b01      	cmp	r3, #1
 801118a:	d106      	bne.n	801119a <tcp_slowtmr+0x5a>
 801118c:	4b87      	ldr	r3, [pc, #540]	; (80113ac <tcp_slowtmr+0x26c>)
 801118e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8011192:	4989      	ldr	r1, [pc, #548]	; (80113b8 <tcp_slowtmr+0x278>)
 8011194:	4887      	ldr	r0, [pc, #540]	; (80113b4 <tcp_slowtmr+0x274>)
 8011196:	f009 fe27 	bl	801ade8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801119a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801119c:	7d1b      	ldrb	r3, [r3, #20]
 801119e:	2b0a      	cmp	r3, #10
 80111a0:	d106      	bne.n	80111b0 <tcp_slowtmr+0x70>
 80111a2:	4b82      	ldr	r3, [pc, #520]	; (80113ac <tcp_slowtmr+0x26c>)
 80111a4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80111a8:	4984      	ldr	r1, [pc, #528]	; (80113bc <tcp_slowtmr+0x27c>)
 80111aa:	4882      	ldr	r0, [pc, #520]	; (80113b4 <tcp_slowtmr+0x274>)
 80111ac:	f009 fe1c 	bl	801ade8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80111b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111b2:	7f9a      	ldrb	r2, [r3, #30]
 80111b4:	4b7b      	ldr	r3, [pc, #492]	; (80113a4 <tcp_slowtmr+0x264>)
 80111b6:	781b      	ldrb	r3, [r3, #0]
 80111b8:	429a      	cmp	r2, r3
 80111ba:	d105      	bne.n	80111c8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80111bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80111c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c2:	68db      	ldr	r3, [r3, #12]
 80111c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80111c6:	e270      	b.n	80116aa <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80111c8:	4b76      	ldr	r3, [pc, #472]	; (80113a4 <tcp_slowtmr+0x264>)
 80111ca:	781a      	ldrb	r2, [r3, #0]
 80111cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ce:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80111d0:	2300      	movs	r3, #0
 80111d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80111d6:	2300      	movs	r3, #0
 80111d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80111dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111de:	7d1b      	ldrb	r3, [r3, #20]
 80111e0:	2b02      	cmp	r3, #2
 80111e2:	d10a      	bne.n	80111fa <tcp_slowtmr+0xba>
 80111e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80111ea:	2b05      	cmp	r3, #5
 80111ec:	d905      	bls.n	80111fa <tcp_slowtmr+0xba>
      ++pcb_remove;
 80111ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111f2:	3301      	adds	r3, #1
 80111f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80111f8:	e11e      	b.n	8011438 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80111fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011200:	2b0b      	cmp	r3, #11
 8011202:	d905      	bls.n	8011210 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8011204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011208:	3301      	adds	r3, #1
 801120a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801120e:	e113      	b.n	8011438 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011212:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011216:	2b00      	cmp	r3, #0
 8011218:	d075      	beq.n	8011306 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801121a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801121e:	2b00      	cmp	r3, #0
 8011220:	d006      	beq.n	8011230 <tcp_slowtmr+0xf0>
 8011222:	4b62      	ldr	r3, [pc, #392]	; (80113ac <tcp_slowtmr+0x26c>)
 8011224:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8011228:	4965      	ldr	r1, [pc, #404]	; (80113c0 <tcp_slowtmr+0x280>)
 801122a:	4862      	ldr	r0, [pc, #392]	; (80113b4 <tcp_slowtmr+0x274>)
 801122c:	f009 fddc 	bl	801ade8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011234:	2b00      	cmp	r3, #0
 8011236:	d106      	bne.n	8011246 <tcp_slowtmr+0x106>
 8011238:	4b5c      	ldr	r3, [pc, #368]	; (80113ac <tcp_slowtmr+0x26c>)
 801123a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801123e:	4961      	ldr	r1, [pc, #388]	; (80113c4 <tcp_slowtmr+0x284>)
 8011240:	485c      	ldr	r0, [pc, #368]	; (80113b4 <tcp_slowtmr+0x274>)
 8011242:	f009 fdd1 	bl	801ade8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011248:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801124c:	2b0b      	cmp	r3, #11
 801124e:	d905      	bls.n	801125c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011254:	3301      	adds	r3, #1
 8011256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801125a:	e0ed      	b.n	8011438 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801125c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801125e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011262:	3b01      	subs	r3, #1
 8011264:	4a58      	ldr	r2, [pc, #352]	; (80113c8 <tcp_slowtmr+0x288>)
 8011266:	5cd3      	ldrb	r3, [r2, r3]
 8011268:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801126a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801126c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011270:	7c7a      	ldrb	r2, [r7, #17]
 8011272:	429a      	cmp	r2, r3
 8011274:	d907      	bls.n	8011286 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8011276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011278:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801127c:	3301      	adds	r3, #1
 801127e:	b2da      	uxtb	r2, r3
 8011280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011282:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8011286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011288:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801128c:	7c7a      	ldrb	r2, [r7, #17]
 801128e:	429a      	cmp	r2, r3
 8011290:	f200 80d2 	bhi.w	8011438 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011294:	2301      	movs	r3, #1
 8011296:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801129a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d108      	bne.n	80112b4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80112a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112a4:	f005 f95a 	bl	801655c <tcp_zero_window_probe>
 80112a8:	4603      	mov	r3, r0
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d014      	beq.n	80112d8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80112ae:	2300      	movs	r3, #0
 80112b0:	623b      	str	r3, [r7, #32]
 80112b2:	e011      	b.n	80112d8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80112b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80112ba:	4619      	mov	r1, r3
 80112bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112be:	f004 f80d 	bl	80152dc <tcp_split_unsent_seg>
 80112c2:	4603      	mov	r3, r0
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d107      	bne.n	80112d8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80112c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112ca:	f004 fa8d 	bl	80157e8 <tcp_output>
 80112ce:	4603      	mov	r3, r0
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d101      	bne.n	80112d8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80112d4:	2300      	movs	r3, #0
 80112d6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80112d8:	6a3b      	ldr	r3, [r7, #32]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	f000 80ac 	beq.w	8011438 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80112e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112e2:	2200      	movs	r2, #0
 80112e4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80112e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80112ee:	2b06      	cmp	r3, #6
 80112f0:	f200 80a2 	bhi.w	8011438 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80112f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80112fa:	3301      	adds	r3, #1
 80112fc:	b2da      	uxtb	r2, r3
 80112fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011300:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011304:	e098      	b.n	8011438 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011308:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801130c:	2b00      	cmp	r3, #0
 801130e:	db0f      	blt.n	8011330 <tcp_slowtmr+0x1f0>
 8011310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011312:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011316:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801131a:	4293      	cmp	r3, r2
 801131c:	d008      	beq.n	8011330 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801131e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011320:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011324:	b29b      	uxth	r3, r3
 8011326:	3301      	adds	r3, #1
 8011328:	b29b      	uxth	r3, r3
 801132a:	b21a      	sxth	r2, r3
 801132c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801132e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011332:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011338:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801133c:	429a      	cmp	r2, r3
 801133e:	db7b      	blt.n	8011438 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011340:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011342:	f004 fd49 	bl	8015dd8 <tcp_rexmit_rto_prepare>
 8011346:	4603      	mov	r3, r0
 8011348:	2b00      	cmp	r3, #0
 801134a:	d007      	beq.n	801135c <tcp_slowtmr+0x21c>
 801134c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801134e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011350:	2b00      	cmp	r3, #0
 8011352:	d171      	bne.n	8011438 <tcp_slowtmr+0x2f8>
 8011354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011358:	2b00      	cmp	r3, #0
 801135a:	d06d      	beq.n	8011438 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801135c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801135e:	7d1b      	ldrb	r3, [r3, #20]
 8011360:	2b02      	cmp	r3, #2
 8011362:	d03a      	beq.n	80113da <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011366:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801136a:	2b0c      	cmp	r3, #12
 801136c:	bf28      	it	cs
 801136e:	230c      	movcs	r3, #12
 8011370:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011374:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011378:	10db      	asrs	r3, r3, #3
 801137a:	b21b      	sxth	r3, r3
 801137c:	461a      	mov	r2, r3
 801137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011380:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011384:	4413      	add	r3, r2
 8011386:	7efa      	ldrb	r2, [r7, #27]
 8011388:	4910      	ldr	r1, [pc, #64]	; (80113cc <tcp_slowtmr+0x28c>)
 801138a:	5c8a      	ldrb	r2, [r1, r2]
 801138c:	4093      	lsls	r3, r2
 801138e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011390:	697b      	ldr	r3, [r7, #20]
 8011392:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011396:	4293      	cmp	r3, r2
 8011398:	dc1a      	bgt.n	80113d0 <tcp_slowtmr+0x290>
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	b21a      	sxth	r2, r3
 801139e:	e019      	b.n	80113d4 <tcp_slowtmr+0x294>
 80113a0:	20007ca0 	.word	0x20007ca0
 80113a4:	20000892 	.word	0x20000892
 80113a8:	20007c9c 	.word	0x20007c9c
 80113ac:	08020ebc 	.word	0x08020ebc
 80113b0:	08021200 	.word	0x08021200
 80113b4:	08020f00 	.word	0x08020f00
 80113b8:	0802122c 	.word	0x0802122c
 80113bc:	08021258 	.word	0x08021258
 80113c0:	08021288 	.word	0x08021288
 80113c4:	080212bc 	.word	0x080212bc
 80113c8:	080246cc 	.word	0x080246cc
 80113cc:	080246bc 	.word	0x080246bc
 80113d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80113d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80113da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113dc:	2200      	movs	r2, #0
 80113de:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80113e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80113e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80113ec:	4293      	cmp	r3, r2
 80113ee:	bf28      	it	cs
 80113f0:	4613      	movcs	r3, r2
 80113f2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80113f4:	8a7b      	ldrh	r3, [r7, #18]
 80113f6:	085b      	lsrs	r3, r3, #1
 80113f8:	b29a      	uxth	r2, r3
 80113fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011402:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011408:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801140a:	005b      	lsls	r3, r3, #1
 801140c:	b29b      	uxth	r3, r3
 801140e:	429a      	cmp	r2, r3
 8011410:	d206      	bcs.n	8011420 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011414:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011416:	005b      	lsls	r3, r3, #1
 8011418:	b29a      	uxth	r2, r3
 801141a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801141c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011422:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011426:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801142a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801142c:	2200      	movs	r2, #0
 801142e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8011432:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011434:	f004 fd40 	bl	8015eb8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801143a:	7d1b      	ldrb	r3, [r3, #20]
 801143c:	2b06      	cmp	r3, #6
 801143e:	d111      	bne.n	8011464 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011442:	8b5b      	ldrh	r3, [r3, #26]
 8011444:	f003 0310 	and.w	r3, r3, #16
 8011448:	2b00      	cmp	r3, #0
 801144a:	d00b      	beq.n	8011464 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801144c:	4b9c      	ldr	r3, [pc, #624]	; (80116c0 <tcp_slowtmr+0x580>)
 801144e:	681a      	ldr	r2, [r3, #0]
 8011450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011452:	6a1b      	ldr	r3, [r3, #32]
 8011454:	1ad3      	subs	r3, r2, r3
 8011456:	2b28      	cmp	r3, #40	; 0x28
 8011458:	d904      	bls.n	8011464 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801145a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801145e:	3301      	adds	r3, #1
 8011460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011466:	7a5b      	ldrb	r3, [r3, #9]
 8011468:	f003 0308 	and.w	r3, r3, #8
 801146c:	2b00      	cmp	r3, #0
 801146e:	d04a      	beq.n	8011506 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8011470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011472:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011474:	2b04      	cmp	r3, #4
 8011476:	d003      	beq.n	8011480 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801147a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801147c:	2b07      	cmp	r3, #7
 801147e:	d142      	bne.n	8011506 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011480:	4b8f      	ldr	r3, [pc, #572]	; (80116c0 <tcp_slowtmr+0x580>)
 8011482:	681a      	ldr	r2, [r3, #0]
 8011484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011486:	6a1b      	ldr	r3, [r3, #32]
 8011488:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801148a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801148c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011490:	4b8c      	ldr	r3, [pc, #560]	; (80116c4 <tcp_slowtmr+0x584>)
 8011492:	440b      	add	r3, r1
 8011494:	498c      	ldr	r1, [pc, #560]	; (80116c8 <tcp_slowtmr+0x588>)
 8011496:	fba1 1303 	umull	r1, r3, r1, r3
 801149a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801149c:	429a      	cmp	r2, r3
 801149e:	d90a      	bls.n	80114b6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80114a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114a4:	3301      	adds	r3, #1
 80114a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80114aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80114ae:	3301      	adds	r3, #1
 80114b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80114b4:	e027      	b.n	8011506 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80114b6:	4b82      	ldr	r3, [pc, #520]	; (80116c0 <tcp_slowtmr+0x580>)
 80114b8:	681a      	ldr	r2, [r3, #0]
 80114ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114bc:	6a1b      	ldr	r3, [r3, #32]
 80114be:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80114c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80114c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80114cc:	4618      	mov	r0, r3
 80114ce:	4b7f      	ldr	r3, [pc, #508]	; (80116cc <tcp_slowtmr+0x58c>)
 80114d0:	fb03 f300 	mul.w	r3, r3, r0
 80114d4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80114d6:	497c      	ldr	r1, [pc, #496]	; (80116c8 <tcp_slowtmr+0x588>)
 80114d8:	fba1 1303 	umull	r1, r3, r1, r3
 80114dc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80114de:	429a      	cmp	r2, r3
 80114e0:	d911      	bls.n	8011506 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80114e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80114e4:	f004 fffa 	bl	80164dc <tcp_keepalive>
 80114e8:	4603      	mov	r3, r0
 80114ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80114ee:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d107      	bne.n	8011506 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80114f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114f8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80114fc:	3301      	adds	r3, #1
 80114fe:	b2da      	uxtb	r2, r3
 8011500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011502:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801150a:	2b00      	cmp	r3, #0
 801150c:	d011      	beq.n	8011532 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801150e:	4b6c      	ldr	r3, [pc, #432]	; (80116c0 <tcp_slowtmr+0x580>)
 8011510:	681a      	ldr	r2, [r3, #0]
 8011512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011514:	6a1b      	ldr	r3, [r3, #32]
 8011516:	1ad2      	subs	r2, r2, r3
 8011518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801151a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801151e:	4619      	mov	r1, r3
 8011520:	460b      	mov	r3, r1
 8011522:	005b      	lsls	r3, r3, #1
 8011524:	440b      	add	r3, r1
 8011526:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011528:	429a      	cmp	r2, r3
 801152a:	d302      	bcc.n	8011532 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801152c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801152e:	f000 fea7 	bl	8012280 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011534:	7d1b      	ldrb	r3, [r3, #20]
 8011536:	2b03      	cmp	r3, #3
 8011538:	d10b      	bne.n	8011552 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801153a:	4b61      	ldr	r3, [pc, #388]	; (80116c0 <tcp_slowtmr+0x580>)
 801153c:	681a      	ldr	r2, [r3, #0]
 801153e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011540:	6a1b      	ldr	r3, [r3, #32]
 8011542:	1ad3      	subs	r3, r2, r3
 8011544:	2b28      	cmp	r3, #40	; 0x28
 8011546:	d904      	bls.n	8011552 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801154c:	3301      	adds	r3, #1
 801154e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011554:	7d1b      	ldrb	r3, [r3, #20]
 8011556:	2b09      	cmp	r3, #9
 8011558:	d10b      	bne.n	8011572 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801155a:	4b59      	ldr	r3, [pc, #356]	; (80116c0 <tcp_slowtmr+0x580>)
 801155c:	681a      	ldr	r2, [r3, #0]
 801155e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011560:	6a1b      	ldr	r3, [r3, #32]
 8011562:	1ad3      	subs	r3, r2, r3
 8011564:	2bf0      	cmp	r3, #240	; 0xf0
 8011566:	d904      	bls.n	8011572 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8011568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801156c:	3301      	adds	r3, #1
 801156e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011572:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011576:	2b00      	cmp	r3, #0
 8011578:	d060      	beq.n	801163c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801157a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801157c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011580:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011582:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011584:	f000 fcc8 	bl	8011f18 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801158a:	2b00      	cmp	r3, #0
 801158c:	d010      	beq.n	80115b0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801158e:	4b50      	ldr	r3, [pc, #320]	; (80116d0 <tcp_slowtmr+0x590>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011594:	429a      	cmp	r2, r3
 8011596:	d106      	bne.n	80115a6 <tcp_slowtmr+0x466>
 8011598:	4b4e      	ldr	r3, [pc, #312]	; (80116d4 <tcp_slowtmr+0x594>)
 801159a:	f240 526d 	movw	r2, #1389	; 0x56d
 801159e:	494e      	ldr	r1, [pc, #312]	; (80116d8 <tcp_slowtmr+0x598>)
 80115a0:	484e      	ldr	r0, [pc, #312]	; (80116dc <tcp_slowtmr+0x59c>)
 80115a2:	f009 fc21 	bl	801ade8 <iprintf>
        prev->next = pcb->next;
 80115a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115a8:	68da      	ldr	r2, [r3, #12]
 80115aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ac:	60da      	str	r2, [r3, #12]
 80115ae:	e00f      	b.n	80115d0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80115b0:	4b47      	ldr	r3, [pc, #284]	; (80116d0 <tcp_slowtmr+0x590>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80115b6:	429a      	cmp	r2, r3
 80115b8:	d006      	beq.n	80115c8 <tcp_slowtmr+0x488>
 80115ba:	4b46      	ldr	r3, [pc, #280]	; (80116d4 <tcp_slowtmr+0x594>)
 80115bc:	f240 5271 	movw	r2, #1393	; 0x571
 80115c0:	4947      	ldr	r1, [pc, #284]	; (80116e0 <tcp_slowtmr+0x5a0>)
 80115c2:	4846      	ldr	r0, [pc, #280]	; (80116dc <tcp_slowtmr+0x59c>)
 80115c4:	f009 fc10 	bl	801ade8 <iprintf>
        tcp_active_pcbs = pcb->next;
 80115c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ca:	68db      	ldr	r3, [r3, #12]
 80115cc:	4a40      	ldr	r2, [pc, #256]	; (80116d0 <tcp_slowtmr+0x590>)
 80115ce:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80115d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d013      	beq.n	8011600 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80115d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115da:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80115dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115de:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80115e0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80115e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115e4:	3304      	adds	r3, #4
 80115e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80115e8:	8ad2      	ldrh	r2, [r2, #22]
 80115ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80115ec:	8b09      	ldrh	r1, [r1, #24]
 80115ee:	9102      	str	r1, [sp, #8]
 80115f0:	9201      	str	r2, [sp, #4]
 80115f2:	9300      	str	r3, [sp, #0]
 80115f4:	462b      	mov	r3, r5
 80115f6:	4622      	mov	r2, r4
 80115f8:	4601      	mov	r1, r0
 80115fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80115fc:	f004 feba 	bl	8016374 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011602:	691b      	ldr	r3, [r3, #16]
 8011604:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011608:	7d1b      	ldrb	r3, [r3, #20]
 801160a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801160c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801160e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011612:	68db      	ldr	r3, [r3, #12]
 8011614:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011616:	6838      	ldr	r0, [r7, #0]
 8011618:	f7ff f844 	bl	80106a4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801161c:	4b31      	ldr	r3, [pc, #196]	; (80116e4 <tcp_slowtmr+0x5a4>)
 801161e:	2200      	movs	r2, #0
 8011620:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d004      	beq.n	8011632 <tcp_slowtmr+0x4f2>
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	f06f 010c 	mvn.w	r1, #12
 801162e:	68b8      	ldr	r0, [r7, #8]
 8011630:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011632:	4b2c      	ldr	r3, [pc, #176]	; (80116e4 <tcp_slowtmr+0x5a4>)
 8011634:	781b      	ldrb	r3, [r3, #0]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d037      	beq.n	80116aa <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801163a:	e592      	b.n	8011162 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801163c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801163e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011642:	68db      	ldr	r3, [r3, #12]
 8011644:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011648:	7f1b      	ldrb	r3, [r3, #28]
 801164a:	3301      	adds	r3, #1
 801164c:	b2da      	uxtb	r2, r3
 801164e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011650:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011654:	7f1a      	ldrb	r2, [r3, #28]
 8011656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011658:	7f5b      	ldrb	r3, [r3, #29]
 801165a:	429a      	cmp	r2, r3
 801165c:	d325      	bcc.n	80116aa <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801165e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011660:	2200      	movs	r2, #0
 8011662:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011664:	4b1f      	ldr	r3, [pc, #124]	; (80116e4 <tcp_slowtmr+0x5a4>)
 8011666:	2200      	movs	r2, #0
 8011668:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801166a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801166c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011670:	2b00      	cmp	r3, #0
 8011672:	d00b      	beq.n	801168c <tcp_slowtmr+0x54c>
 8011674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801167a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801167c:	6912      	ldr	r2, [r2, #16]
 801167e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011680:	4610      	mov	r0, r2
 8011682:	4798      	blx	r3
 8011684:	4603      	mov	r3, r0
 8011686:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801168a:	e002      	b.n	8011692 <tcp_slowtmr+0x552>
 801168c:	2300      	movs	r3, #0
 801168e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8011692:	4b14      	ldr	r3, [pc, #80]	; (80116e4 <tcp_slowtmr+0x5a4>)
 8011694:	781b      	ldrb	r3, [r3, #0]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d000      	beq.n	801169c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801169a:	e562      	b.n	8011162 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801169c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d102      	bne.n	80116aa <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80116a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116a6:	f004 f89f 	bl	80157e8 <tcp_output>
  while (pcb != NULL) {
 80116aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	f47f ad5e 	bne.w	801116e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80116b2:	2300      	movs	r3, #0
 80116b4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80116b6:	4b0c      	ldr	r3, [pc, #48]	; (80116e8 <tcp_slowtmr+0x5a8>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80116bc:	e069      	b.n	8011792 <tcp_slowtmr+0x652>
 80116be:	bf00      	nop
 80116c0:	20007ca0 	.word	0x20007ca0
 80116c4:	000a4cb8 	.word	0x000a4cb8
 80116c8:	10624dd3 	.word	0x10624dd3
 80116cc:	000124f8 	.word	0x000124f8
 80116d0:	20007c9c 	.word	0x20007c9c
 80116d4:	08020ebc 	.word	0x08020ebc
 80116d8:	080212f4 	.word	0x080212f4
 80116dc:	08020f00 	.word	0x08020f00
 80116e0:	08021320 	.word	0x08021320
 80116e4:	20007c98 	.word	0x20007c98
 80116e8:	20007cac 	.word	0x20007cac
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80116ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ee:	7d1b      	ldrb	r3, [r3, #20]
 80116f0:	2b0a      	cmp	r3, #10
 80116f2:	d006      	beq.n	8011702 <tcp_slowtmr+0x5c2>
 80116f4:	4b2a      	ldr	r3, [pc, #168]	; (80117a0 <tcp_slowtmr+0x660>)
 80116f6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80116fa:	492a      	ldr	r1, [pc, #168]	; (80117a4 <tcp_slowtmr+0x664>)
 80116fc:	482a      	ldr	r0, [pc, #168]	; (80117a8 <tcp_slowtmr+0x668>)
 80116fe:	f009 fb73 	bl	801ade8 <iprintf>
    pcb_remove = 0;
 8011702:	2300      	movs	r3, #0
 8011704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011708:	4b28      	ldr	r3, [pc, #160]	; (80117ac <tcp_slowtmr+0x66c>)
 801170a:	681a      	ldr	r2, [r3, #0]
 801170c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801170e:	6a1b      	ldr	r3, [r3, #32]
 8011710:	1ad3      	subs	r3, r2, r3
 8011712:	2bf0      	cmp	r3, #240	; 0xf0
 8011714:	d904      	bls.n	8011720 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8011716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801171a:	3301      	adds	r3, #1
 801171c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011724:	2b00      	cmp	r3, #0
 8011726:	d02f      	beq.n	8011788 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011728:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801172a:	f000 fbf5 	bl	8011f18 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801172e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011730:	2b00      	cmp	r3, #0
 8011732:	d010      	beq.n	8011756 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011734:	4b1e      	ldr	r3, [pc, #120]	; (80117b0 <tcp_slowtmr+0x670>)
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801173a:	429a      	cmp	r2, r3
 801173c:	d106      	bne.n	801174c <tcp_slowtmr+0x60c>
 801173e:	4b18      	ldr	r3, [pc, #96]	; (80117a0 <tcp_slowtmr+0x660>)
 8011740:	f240 52af 	movw	r2, #1455	; 0x5af
 8011744:	491b      	ldr	r1, [pc, #108]	; (80117b4 <tcp_slowtmr+0x674>)
 8011746:	4818      	ldr	r0, [pc, #96]	; (80117a8 <tcp_slowtmr+0x668>)
 8011748:	f009 fb4e 	bl	801ade8 <iprintf>
        prev->next = pcb->next;
 801174c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801174e:	68da      	ldr	r2, [r3, #12]
 8011750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011752:	60da      	str	r2, [r3, #12]
 8011754:	e00f      	b.n	8011776 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011756:	4b16      	ldr	r3, [pc, #88]	; (80117b0 <tcp_slowtmr+0x670>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801175c:	429a      	cmp	r2, r3
 801175e:	d006      	beq.n	801176e <tcp_slowtmr+0x62e>
 8011760:	4b0f      	ldr	r3, [pc, #60]	; (80117a0 <tcp_slowtmr+0x660>)
 8011762:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011766:	4914      	ldr	r1, [pc, #80]	; (80117b8 <tcp_slowtmr+0x678>)
 8011768:	480f      	ldr	r0, [pc, #60]	; (80117a8 <tcp_slowtmr+0x668>)
 801176a:	f009 fb3d 	bl	801ade8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801176e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011770:	68db      	ldr	r3, [r3, #12]
 8011772:	4a0f      	ldr	r2, [pc, #60]	; (80117b0 <tcp_slowtmr+0x670>)
 8011774:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011778:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801177a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801177c:	68db      	ldr	r3, [r3, #12]
 801177e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011780:	69f8      	ldr	r0, [r7, #28]
 8011782:	f7fe ff8f 	bl	80106a4 <tcp_free>
 8011786:	e004      	b.n	8011792 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801178a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801178c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801178e:	68db      	ldr	r3, [r3, #12]
 8011790:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011794:	2b00      	cmp	r3, #0
 8011796:	d1a9      	bne.n	80116ec <tcp_slowtmr+0x5ac>
    }
  }
}
 8011798:	bf00      	nop
 801179a:	3730      	adds	r7, #48	; 0x30
 801179c:	46bd      	mov	sp, r7
 801179e:	bdb0      	pop	{r4, r5, r7, pc}
 80117a0:	08020ebc 	.word	0x08020ebc
 80117a4:	0802134c 	.word	0x0802134c
 80117a8:	08020f00 	.word	0x08020f00
 80117ac:	20007ca0 	.word	0x20007ca0
 80117b0:	20007cac 	.word	0x20007cac
 80117b4:	0802137c 	.word	0x0802137c
 80117b8:	080213a4 	.word	0x080213a4

080117bc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80117bc:	b580      	push	{r7, lr}
 80117be:	b082      	sub	sp, #8
 80117c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80117c2:	4b2d      	ldr	r3, [pc, #180]	; (8011878 <tcp_fasttmr+0xbc>)
 80117c4:	781b      	ldrb	r3, [r3, #0]
 80117c6:	3301      	adds	r3, #1
 80117c8:	b2da      	uxtb	r2, r3
 80117ca:	4b2b      	ldr	r3, [pc, #172]	; (8011878 <tcp_fasttmr+0xbc>)
 80117cc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80117ce:	4b2b      	ldr	r3, [pc, #172]	; (801187c <tcp_fasttmr+0xc0>)
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80117d4:	e048      	b.n	8011868 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	7f9a      	ldrb	r2, [r3, #30]
 80117da:	4b27      	ldr	r3, [pc, #156]	; (8011878 <tcp_fasttmr+0xbc>)
 80117dc:	781b      	ldrb	r3, [r3, #0]
 80117de:	429a      	cmp	r2, r3
 80117e0:	d03f      	beq.n	8011862 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80117e2:	4b25      	ldr	r3, [pc, #148]	; (8011878 <tcp_fasttmr+0xbc>)
 80117e4:	781a      	ldrb	r2, [r3, #0]
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	8b5b      	ldrh	r3, [r3, #26]
 80117ee:	f003 0301 	and.w	r3, r3, #1
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d010      	beq.n	8011818 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	8b5b      	ldrh	r3, [r3, #26]
 80117fa:	f043 0302 	orr.w	r3, r3, #2
 80117fe:	b29a      	uxth	r2, r3
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011804:	6878      	ldr	r0, [r7, #4]
 8011806:	f003 ffef 	bl	80157e8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	8b5b      	ldrh	r3, [r3, #26]
 801180e:	f023 0303 	bic.w	r3, r3, #3
 8011812:	b29a      	uxth	r2, r3
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	8b5b      	ldrh	r3, [r3, #26]
 801181c:	f003 0308 	and.w	r3, r3, #8
 8011820:	2b00      	cmp	r3, #0
 8011822:	d009      	beq.n	8011838 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	8b5b      	ldrh	r3, [r3, #26]
 8011828:	f023 0308 	bic.w	r3, r3, #8
 801182c:	b29a      	uxth	r2, r3
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011832:	6878      	ldr	r0, [r7, #4]
 8011834:	f7ff f8c6 	bl	80109c4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	68db      	ldr	r3, [r3, #12]
 801183c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011842:	2b00      	cmp	r3, #0
 8011844:	d00a      	beq.n	801185c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011846:	4b0e      	ldr	r3, [pc, #56]	; (8011880 <tcp_fasttmr+0xc4>)
 8011848:	2200      	movs	r2, #0
 801184a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801184c:	6878      	ldr	r0, [r7, #4]
 801184e:	f000 f819 	bl	8011884 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011852:	4b0b      	ldr	r3, [pc, #44]	; (8011880 <tcp_fasttmr+0xc4>)
 8011854:	781b      	ldrb	r3, [r3, #0]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d000      	beq.n	801185c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801185a:	e7b8      	b.n	80117ce <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	607b      	str	r3, [r7, #4]
 8011860:	e002      	b.n	8011868 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	68db      	ldr	r3, [r3, #12]
 8011866:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d1b3      	bne.n	80117d6 <tcp_fasttmr+0x1a>
    }
  }
}
 801186e:	bf00      	nop
 8011870:	3708      	adds	r7, #8
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}
 8011876:	bf00      	nop
 8011878:	20000892 	.word	0x20000892
 801187c:	20007c9c 	.word	0x20007c9c
 8011880:	20007c98 	.word	0x20007c98

08011884 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011884:	b590      	push	{r4, r7, lr}
 8011886:	b085      	sub	sp, #20
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d109      	bne.n	80118a6 <tcp_process_refused_data+0x22>
 8011892:	4b37      	ldr	r3, [pc, #220]	; (8011970 <tcp_process_refused_data+0xec>)
 8011894:	f240 6209 	movw	r2, #1545	; 0x609
 8011898:	4936      	ldr	r1, [pc, #216]	; (8011974 <tcp_process_refused_data+0xf0>)
 801189a:	4837      	ldr	r0, [pc, #220]	; (8011978 <tcp_process_refused_data+0xf4>)
 801189c:	f009 faa4 	bl	801ade8 <iprintf>
 80118a0:	f06f 030f 	mvn.w	r3, #15
 80118a4:	e060      	b.n	8011968 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80118aa:	7b5b      	ldrb	r3, [r3, #13]
 80118ac:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80118b2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	2200      	movs	r2, #0
 80118b8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d00b      	beq.n	80118dc <tcp_process_refused_data+0x58>
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	6918      	ldr	r0, [r3, #16]
 80118ce:	2300      	movs	r3, #0
 80118d0:	68ba      	ldr	r2, [r7, #8]
 80118d2:	6879      	ldr	r1, [r7, #4]
 80118d4:	47a0      	blx	r4
 80118d6:	4603      	mov	r3, r0
 80118d8:	73fb      	strb	r3, [r7, #15]
 80118da:	e007      	b.n	80118ec <tcp_process_refused_data+0x68>
 80118dc:	2300      	movs	r3, #0
 80118de:	68ba      	ldr	r2, [r7, #8]
 80118e0:	6879      	ldr	r1, [r7, #4]
 80118e2:	2000      	movs	r0, #0
 80118e4:	f000 f8a2 	bl	8011a2c <tcp_recv_null>
 80118e8:	4603      	mov	r3, r0
 80118ea:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80118ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d12a      	bne.n	801194a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80118f4:	7bbb      	ldrb	r3, [r7, #14]
 80118f6:	f003 0320 	and.w	r3, r3, #32
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d033      	beq.n	8011966 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011902:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011906:	d005      	beq.n	8011914 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801190c:	3301      	adds	r3, #1
 801190e:	b29a      	uxth	r2, r3
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801191a:	2b00      	cmp	r3, #0
 801191c:	d00b      	beq.n	8011936 <tcp_process_refused_data+0xb2>
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	6918      	ldr	r0, [r3, #16]
 8011928:	2300      	movs	r3, #0
 801192a:	2200      	movs	r2, #0
 801192c:	6879      	ldr	r1, [r7, #4]
 801192e:	47a0      	blx	r4
 8011930:	4603      	mov	r3, r0
 8011932:	73fb      	strb	r3, [r7, #15]
 8011934:	e001      	b.n	801193a <tcp_process_refused_data+0xb6>
 8011936:	2300      	movs	r3, #0
 8011938:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801193a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801193e:	f113 0f0d 	cmn.w	r3, #13
 8011942:	d110      	bne.n	8011966 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8011944:	f06f 030c 	mvn.w	r3, #12
 8011948:	e00e      	b.n	8011968 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801194e:	f113 0f0d 	cmn.w	r3, #13
 8011952:	d102      	bne.n	801195a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011954:	f06f 030c 	mvn.w	r3, #12
 8011958:	e006      	b.n	8011968 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	68ba      	ldr	r2, [r7, #8]
 801195e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8011960:	f06f 0304 	mvn.w	r3, #4
 8011964:	e000      	b.n	8011968 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8011966:	2300      	movs	r3, #0
}
 8011968:	4618      	mov	r0, r3
 801196a:	3714      	adds	r7, #20
 801196c:	46bd      	mov	sp, r7
 801196e:	bd90      	pop	{r4, r7, pc}
 8011970:	08020ebc 	.word	0x08020ebc
 8011974:	080213cc 	.word	0x080213cc
 8011978:	08020f00 	.word	0x08020f00

0801197c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b084      	sub	sp, #16
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011984:	e007      	b.n	8011996 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801198c:	6878      	ldr	r0, [r7, #4]
 801198e:	f000 f809 	bl	80119a4 <tcp_seg_free>
    seg = next;
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d1f4      	bne.n	8011986 <tcp_segs_free+0xa>
  }
}
 801199c:	bf00      	nop
 801199e:	3710      	adds	r7, #16
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bd80      	pop	{r7, pc}

080119a4 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b082      	sub	sp, #8
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d00c      	beq.n	80119cc <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	685b      	ldr	r3, [r3, #4]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d004      	beq.n	80119c4 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	685b      	ldr	r3, [r3, #4]
 80119be:	4618      	mov	r0, r3
 80119c0:	f7fe fbb4 	bl	801012c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80119c4:	6879      	ldr	r1, [r7, #4]
 80119c6:	2003      	movs	r0, #3
 80119c8:	f7fd fd88 	bl	800f4dc <memp_free>
  }
}
 80119cc:	bf00      	nop
 80119ce:	3708      	adds	r7, #8
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}

080119d4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b084      	sub	sp, #16
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d106      	bne.n	80119f0 <tcp_seg_copy+0x1c>
 80119e2:	4b0f      	ldr	r3, [pc, #60]	; (8011a20 <tcp_seg_copy+0x4c>)
 80119e4:	f240 6282 	movw	r2, #1666	; 0x682
 80119e8:	490e      	ldr	r1, [pc, #56]	; (8011a24 <tcp_seg_copy+0x50>)
 80119ea:	480f      	ldr	r0, [pc, #60]	; (8011a28 <tcp_seg_copy+0x54>)
 80119ec:	f009 f9fc 	bl	801ade8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80119f0:	2003      	movs	r0, #3
 80119f2:	f7fd fd21 	bl	800f438 <memp_malloc>
 80119f6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d101      	bne.n	8011a02 <tcp_seg_copy+0x2e>
    return NULL;
 80119fe:	2300      	movs	r3, #0
 8011a00:	e00a      	b.n	8011a18 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011a02:	2210      	movs	r2, #16
 8011a04:	6879      	ldr	r1, [r7, #4]
 8011a06:	68f8      	ldr	r0, [r7, #12]
 8011a08:	f008 fb05 	bl	801a016 <memcpy>
  pbuf_ref(cseg->p);
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	685b      	ldr	r3, [r3, #4]
 8011a10:	4618      	mov	r0, r3
 8011a12:	f7fe fc31 	bl	8010278 <pbuf_ref>
  return cseg;
 8011a16:	68fb      	ldr	r3, [r7, #12]
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	3710      	adds	r7, #16
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}
 8011a20:	08020ebc 	.word	0x08020ebc
 8011a24:	08021410 	.word	0x08021410
 8011a28:	08020f00 	.word	0x08020f00

08011a2c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b084      	sub	sp, #16
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	60f8      	str	r0, [r7, #12]
 8011a34:	60b9      	str	r1, [r7, #8]
 8011a36:	607a      	str	r2, [r7, #4]
 8011a38:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d109      	bne.n	8011a54 <tcp_recv_null+0x28>
 8011a40:	4b12      	ldr	r3, [pc, #72]	; (8011a8c <tcp_recv_null+0x60>)
 8011a42:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011a46:	4912      	ldr	r1, [pc, #72]	; (8011a90 <tcp_recv_null+0x64>)
 8011a48:	4812      	ldr	r0, [pc, #72]	; (8011a94 <tcp_recv_null+0x68>)
 8011a4a:	f009 f9cd 	bl	801ade8 <iprintf>
 8011a4e:	f06f 030f 	mvn.w	r3, #15
 8011a52:	e016      	b.n	8011a82 <tcp_recv_null+0x56>

  if (p != NULL) {
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d009      	beq.n	8011a6e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	891b      	ldrh	r3, [r3, #8]
 8011a5e:	4619      	mov	r1, r3
 8011a60:	68b8      	ldr	r0, [r7, #8]
 8011a62:	f7ff f9bf 	bl	8010de4 <tcp_recved>
    pbuf_free(p);
 8011a66:	6878      	ldr	r0, [r7, #4]
 8011a68:	f7fe fb60 	bl	801012c <pbuf_free>
 8011a6c:	e008      	b.n	8011a80 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8011a6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d104      	bne.n	8011a80 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8011a76:	68b8      	ldr	r0, [r7, #8]
 8011a78:	f7ff f80a 	bl	8010a90 <tcp_close>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	e000      	b.n	8011a82 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011a80:	2300      	movs	r3, #0
}
 8011a82:	4618      	mov	r0, r3
 8011a84:	3710      	adds	r7, #16
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bd80      	pop	{r7, pc}
 8011a8a:	bf00      	nop
 8011a8c:	08020ebc 	.word	0x08020ebc
 8011a90:	0802142c 	.word	0x0802142c
 8011a94:	08020f00 	.word	0x08020f00

08011a98 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b086      	sub	sp, #24
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	db01      	blt.n	8011aae <tcp_kill_prio+0x16>
 8011aaa:	79fb      	ldrb	r3, [r7, #7]
 8011aac:	e000      	b.n	8011ab0 <tcp_kill_prio+0x18>
 8011aae:	237f      	movs	r3, #127	; 0x7f
 8011ab0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8011ab2:	7afb      	ldrb	r3, [r7, #11]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d034      	beq.n	8011b22 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011ab8:	7afb      	ldrb	r3, [r7, #11]
 8011aba:	3b01      	subs	r3, #1
 8011abc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ac6:	4b19      	ldr	r3, [pc, #100]	; (8011b2c <tcp_kill_prio+0x94>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	617b      	str	r3, [r7, #20]
 8011acc:	e01f      	b.n	8011b0e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8011ace:	697b      	ldr	r3, [r7, #20]
 8011ad0:	7d5b      	ldrb	r3, [r3, #21]
 8011ad2:	7afa      	ldrb	r2, [r7, #11]
 8011ad4:	429a      	cmp	r2, r3
 8011ad6:	d80c      	bhi.n	8011af2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011ad8:	697b      	ldr	r3, [r7, #20]
 8011ada:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8011adc:	7afa      	ldrb	r2, [r7, #11]
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	d112      	bne.n	8011b08 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011ae2:	4b13      	ldr	r3, [pc, #76]	; (8011b30 <tcp_kill_prio+0x98>)
 8011ae4:	681a      	ldr	r2, [r3, #0]
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	6a1b      	ldr	r3, [r3, #32]
 8011aea:	1ad3      	subs	r3, r2, r3
 8011aec:	68fa      	ldr	r2, [r7, #12]
 8011aee:	429a      	cmp	r2, r3
 8011af0:	d80a      	bhi.n	8011b08 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8011af2:	4b0f      	ldr	r3, [pc, #60]	; (8011b30 <tcp_kill_prio+0x98>)
 8011af4:	681a      	ldr	r2, [r3, #0]
 8011af6:	697b      	ldr	r3, [r7, #20]
 8011af8:	6a1b      	ldr	r3, [r3, #32]
 8011afa:	1ad3      	subs	r3, r2, r3
 8011afc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8011afe:	697b      	ldr	r3, [r7, #20]
 8011b00:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8011b02:	697b      	ldr	r3, [r7, #20]
 8011b04:	7d5b      	ldrb	r3, [r3, #21]
 8011b06:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	68db      	ldr	r3, [r3, #12]
 8011b0c:	617b      	str	r3, [r7, #20]
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d1dc      	bne.n	8011ace <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8011b14:	693b      	ldr	r3, [r7, #16]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d004      	beq.n	8011b24 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011b1a:	6938      	ldr	r0, [r7, #16]
 8011b1c:	f7ff f8fc 	bl	8010d18 <tcp_abort>
 8011b20:	e000      	b.n	8011b24 <tcp_kill_prio+0x8c>
    return;
 8011b22:	bf00      	nop
  }
}
 8011b24:	3718      	adds	r7, #24
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bd80      	pop	{r7, pc}
 8011b2a:	bf00      	nop
 8011b2c:	20007c9c 	.word	0x20007c9c
 8011b30:	20007ca0 	.word	0x20007ca0

08011b34 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b086      	sub	sp, #24
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8011b3e:	79fb      	ldrb	r3, [r7, #7]
 8011b40:	2b08      	cmp	r3, #8
 8011b42:	d009      	beq.n	8011b58 <tcp_kill_state+0x24>
 8011b44:	79fb      	ldrb	r3, [r7, #7]
 8011b46:	2b09      	cmp	r3, #9
 8011b48:	d006      	beq.n	8011b58 <tcp_kill_state+0x24>
 8011b4a:	4b1a      	ldr	r3, [pc, #104]	; (8011bb4 <tcp_kill_state+0x80>)
 8011b4c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8011b50:	4919      	ldr	r1, [pc, #100]	; (8011bb8 <tcp_kill_state+0x84>)
 8011b52:	481a      	ldr	r0, [pc, #104]	; (8011bbc <tcp_kill_state+0x88>)
 8011b54:	f009 f948 	bl	801ade8 <iprintf>

  inactivity = 0;
 8011b58:	2300      	movs	r3, #0
 8011b5a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b60:	4b17      	ldr	r3, [pc, #92]	; (8011bc0 <tcp_kill_state+0x8c>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	617b      	str	r3, [r7, #20]
 8011b66:	e017      	b.n	8011b98 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011b68:	697b      	ldr	r3, [r7, #20]
 8011b6a:	7d1b      	ldrb	r3, [r3, #20]
 8011b6c:	79fa      	ldrb	r2, [r7, #7]
 8011b6e:	429a      	cmp	r2, r3
 8011b70:	d10f      	bne.n	8011b92 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011b72:	4b14      	ldr	r3, [pc, #80]	; (8011bc4 <tcp_kill_state+0x90>)
 8011b74:	681a      	ldr	r2, [r3, #0]
 8011b76:	697b      	ldr	r3, [r7, #20]
 8011b78:	6a1b      	ldr	r3, [r3, #32]
 8011b7a:	1ad3      	subs	r3, r2, r3
 8011b7c:	68fa      	ldr	r2, [r7, #12]
 8011b7e:	429a      	cmp	r2, r3
 8011b80:	d807      	bhi.n	8011b92 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011b82:	4b10      	ldr	r3, [pc, #64]	; (8011bc4 <tcp_kill_state+0x90>)
 8011b84:	681a      	ldr	r2, [r3, #0]
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	6a1b      	ldr	r3, [r3, #32]
 8011b8a:	1ad3      	subs	r3, r2, r3
 8011b8c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011b8e:	697b      	ldr	r3, [r7, #20]
 8011b90:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b92:	697b      	ldr	r3, [r7, #20]
 8011b94:	68db      	ldr	r3, [r3, #12]
 8011b96:	617b      	str	r3, [r7, #20]
 8011b98:	697b      	ldr	r3, [r7, #20]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d1e4      	bne.n	8011b68 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011b9e:	693b      	ldr	r3, [r7, #16]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d003      	beq.n	8011bac <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011ba4:	2100      	movs	r1, #0
 8011ba6:	6938      	ldr	r0, [r7, #16]
 8011ba8:	f7fe fff8 	bl	8010b9c <tcp_abandon>
  }
}
 8011bac:	bf00      	nop
 8011bae:	3718      	adds	r7, #24
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}
 8011bb4:	08020ebc 	.word	0x08020ebc
 8011bb8:	08021448 	.word	0x08021448
 8011bbc:	08020f00 	.word	0x08020f00
 8011bc0:	20007c9c 	.word	0x20007c9c
 8011bc4:	20007ca0 	.word	0x20007ca0

08011bc8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b084      	sub	sp, #16
 8011bcc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011bce:	2300      	movs	r3, #0
 8011bd0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011bd6:	4b12      	ldr	r3, [pc, #72]	; (8011c20 <tcp_kill_timewait+0x58>)
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	60fb      	str	r3, [r7, #12]
 8011bdc:	e012      	b.n	8011c04 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011bde:	4b11      	ldr	r3, [pc, #68]	; (8011c24 <tcp_kill_timewait+0x5c>)
 8011be0:	681a      	ldr	r2, [r3, #0]
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	6a1b      	ldr	r3, [r3, #32]
 8011be6:	1ad3      	subs	r3, r2, r3
 8011be8:	687a      	ldr	r2, [r7, #4]
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d807      	bhi.n	8011bfe <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8011bee:	4b0d      	ldr	r3, [pc, #52]	; (8011c24 <tcp_kill_timewait+0x5c>)
 8011bf0:	681a      	ldr	r2, [r3, #0]
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	6a1b      	ldr	r3, [r3, #32]
 8011bf6:	1ad3      	subs	r3, r2, r3
 8011bf8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	68db      	ldr	r3, [r3, #12]
 8011c02:	60fb      	str	r3, [r7, #12]
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d1e9      	bne.n	8011bde <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011c0a:	68bb      	ldr	r3, [r7, #8]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d002      	beq.n	8011c16 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011c10:	68b8      	ldr	r0, [r7, #8]
 8011c12:	f7ff f881 	bl	8010d18 <tcp_abort>
  }
}
 8011c16:	bf00      	nop
 8011c18:	3710      	adds	r7, #16
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}
 8011c1e:	bf00      	nop
 8011c20:	20007cac 	.word	0x20007cac
 8011c24:	20007ca0 	.word	0x20007ca0

08011c28 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b082      	sub	sp, #8
 8011c2c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8011c2e:	4b10      	ldr	r3, [pc, #64]	; (8011c70 <tcp_handle_closepend+0x48>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011c34:	e014      	b.n	8011c60 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	68db      	ldr	r3, [r3, #12]
 8011c3a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	8b5b      	ldrh	r3, [r3, #26]
 8011c40:	f003 0308 	and.w	r3, r3, #8
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d009      	beq.n	8011c5c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	8b5b      	ldrh	r3, [r3, #26]
 8011c4c:	f023 0308 	bic.w	r3, r3, #8
 8011c50:	b29a      	uxth	r2, r3
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8011c56:	6878      	ldr	r0, [r7, #4]
 8011c58:	f7fe feb4 	bl	80109c4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011c5c:	683b      	ldr	r3, [r7, #0]
 8011c5e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d1e7      	bne.n	8011c36 <tcp_handle_closepend+0xe>
  }
}
 8011c66:	bf00      	nop
 8011c68:	3708      	adds	r7, #8
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bd80      	pop	{r7, pc}
 8011c6e:	bf00      	nop
 8011c70:	20007c9c 	.word	0x20007c9c

08011c74 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b084      	sub	sp, #16
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011c7e:	2001      	movs	r0, #1
 8011c80:	f7fd fbda 	bl	800f438 <memp_malloc>
 8011c84:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d126      	bne.n	8011cda <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011c8c:	f7ff ffcc 	bl	8011c28 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011c90:	f7ff ff9a 	bl	8011bc8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011c94:	2001      	movs	r0, #1
 8011c96:	f7fd fbcf 	bl	800f438 <memp_malloc>
 8011c9a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d11b      	bne.n	8011cda <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011ca2:	2009      	movs	r0, #9
 8011ca4:	f7ff ff46 	bl	8011b34 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011ca8:	2001      	movs	r0, #1
 8011caa:	f7fd fbc5 	bl	800f438 <memp_malloc>
 8011cae:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d111      	bne.n	8011cda <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011cb6:	2008      	movs	r0, #8
 8011cb8:	f7ff ff3c 	bl	8011b34 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011cbc:	2001      	movs	r0, #1
 8011cbe:	f7fd fbbb 	bl	800f438 <memp_malloc>
 8011cc2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d107      	bne.n	8011cda <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011cca:	79fb      	ldrb	r3, [r7, #7]
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f7ff fee3 	bl	8011a98 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011cd2:	2001      	movs	r0, #1
 8011cd4:	f7fd fbb0 	bl	800f438 <memp_malloc>
 8011cd8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d03f      	beq.n	8011d60 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011ce0:	229c      	movs	r2, #156	; 0x9c
 8011ce2:	2100      	movs	r1, #0
 8011ce4:	68f8      	ldr	r0, [r7, #12]
 8011ce6:	f008 f9ba 	bl	801a05e <memset>
    pcb->prio = prio;
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	79fa      	ldrb	r2, [r7, #7]
 8011cee:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011cf6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011d00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	22ff      	movs	r2, #255	; 0xff
 8011d0e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011d16:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	2206      	movs	r2, #6
 8011d1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	2206      	movs	r2, #6
 8011d24:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d2c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	2201      	movs	r2, #1
 8011d32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8011d36:	4b0d      	ldr	r3, [pc, #52]	; (8011d6c <tcp_alloc+0xf8>)
 8011d38:	681a      	ldr	r2, [r3, #0]
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011d3e:	4b0c      	ldr	r3, [pc, #48]	; (8011d70 <tcp_alloc+0xfc>)
 8011d40:	781a      	ldrb	r2, [r3, #0]
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011d4c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	4a08      	ldr	r2, [pc, #32]	; (8011d74 <tcp_alloc+0x100>)
 8011d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	4a07      	ldr	r2, [pc, #28]	; (8011d78 <tcp_alloc+0x104>)
 8011d5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011d60:	68fb      	ldr	r3, [r7, #12]
}
 8011d62:	4618      	mov	r0, r3
 8011d64:	3710      	adds	r7, #16
 8011d66:	46bd      	mov	sp, r7
 8011d68:	bd80      	pop	{r7, pc}
 8011d6a:	bf00      	nop
 8011d6c:	20007ca0 	.word	0x20007ca0
 8011d70:	20000892 	.word	0x20000892
 8011d74:	08011a2d 	.word	0x08011a2d
 8011d78:	006ddd00 	.word	0x006ddd00

08011d7c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b084      	sub	sp, #16
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	4603      	mov	r3, r0
 8011d84:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8011d86:	2040      	movs	r0, #64	; 0x40
 8011d88:	f7ff ff74 	bl	8011c74 <tcp_alloc>
 8011d8c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8011d8e:	68fb      	ldr	r3, [r7, #12]
}
 8011d90:	4618      	mov	r0, r3
 8011d92:	3710      	adds	r7, #16
 8011d94:	46bd      	mov	sp, r7
 8011d96:	bd80      	pop	{r7, pc}

08011d98 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8011d98:	b480      	push	{r7}
 8011d9a:	b083      	sub	sp, #12
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
 8011da0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d002      	beq.n	8011dae <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	683a      	ldr	r2, [r7, #0]
 8011dac:	611a      	str	r2, [r3, #16]
  }
}
 8011dae:	bf00      	nop
 8011db0:	370c      	adds	r7, #12
 8011db2:	46bd      	mov	sp, r7
 8011db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db8:	4770      	bx	lr
	...

08011dbc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b082      	sub	sp, #8
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
 8011dc4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d00e      	beq.n	8011dea <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	7d1b      	ldrb	r3, [r3, #20]
 8011dd0:	2b01      	cmp	r3, #1
 8011dd2:	d106      	bne.n	8011de2 <tcp_recv+0x26>
 8011dd4:	4b07      	ldr	r3, [pc, #28]	; (8011df4 <tcp_recv+0x38>)
 8011dd6:	f240 72df 	movw	r2, #2015	; 0x7df
 8011dda:	4907      	ldr	r1, [pc, #28]	; (8011df8 <tcp_recv+0x3c>)
 8011ddc:	4807      	ldr	r0, [pc, #28]	; (8011dfc <tcp_recv+0x40>)
 8011dde:	f009 f803 	bl	801ade8 <iprintf>
    pcb->recv = recv;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	683a      	ldr	r2, [r7, #0]
 8011de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8011dea:	bf00      	nop
 8011dec:	3708      	adds	r7, #8
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}
 8011df2:	bf00      	nop
 8011df4:	08020ebc 	.word	0x08020ebc
 8011df8:	08021458 	.word	0x08021458
 8011dfc:	08020f00 	.word	0x08020f00

08011e00 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b082      	sub	sp, #8
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
 8011e08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d00e      	beq.n	8011e2e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	7d1b      	ldrb	r3, [r3, #20]
 8011e14:	2b01      	cmp	r3, #1
 8011e16:	d106      	bne.n	8011e26 <tcp_sent+0x26>
 8011e18:	4b07      	ldr	r3, [pc, #28]	; (8011e38 <tcp_sent+0x38>)
 8011e1a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8011e1e:	4907      	ldr	r1, [pc, #28]	; (8011e3c <tcp_sent+0x3c>)
 8011e20:	4807      	ldr	r0, [pc, #28]	; (8011e40 <tcp_sent+0x40>)
 8011e22:	f008 ffe1 	bl	801ade8 <iprintf>
    pcb->sent = sent;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	683a      	ldr	r2, [r7, #0]
 8011e2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8011e2e:	bf00      	nop
 8011e30:	3708      	adds	r7, #8
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd80      	pop	{r7, pc}
 8011e36:	bf00      	nop
 8011e38:	08020ebc 	.word	0x08020ebc
 8011e3c:	08021480 	.word	0x08021480
 8011e40:	08020f00 	.word	0x08020f00

08011e44 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b082      	sub	sp, #8
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
 8011e4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d00e      	beq.n	8011e72 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	7d1b      	ldrb	r3, [r3, #20]
 8011e58:	2b01      	cmp	r3, #1
 8011e5a:	d106      	bne.n	8011e6a <tcp_err+0x26>
 8011e5c:	4b07      	ldr	r3, [pc, #28]	; (8011e7c <tcp_err+0x38>)
 8011e5e:	f640 020d 	movw	r2, #2061	; 0x80d
 8011e62:	4907      	ldr	r1, [pc, #28]	; (8011e80 <tcp_err+0x3c>)
 8011e64:	4807      	ldr	r0, [pc, #28]	; (8011e84 <tcp_err+0x40>)
 8011e66:	f008 ffbf 	bl	801ade8 <iprintf>
    pcb->errf = err;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	683a      	ldr	r2, [r7, #0]
 8011e6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8011e72:	bf00      	nop
 8011e74:	3708      	adds	r7, #8
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}
 8011e7a:	bf00      	nop
 8011e7c:	08020ebc 	.word	0x08020ebc
 8011e80:	080214a8 	.word	0x080214a8
 8011e84:	08020f00 	.word	0x08020f00

08011e88 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8011e88:	b480      	push	{r7}
 8011e8a:	b085      	sub	sp, #20
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
 8011e90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d008      	beq.n	8011eaa <tcp_accept+0x22>
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	7d1b      	ldrb	r3, [r3, #20]
 8011e9c:	2b01      	cmp	r3, #1
 8011e9e:	d104      	bne.n	8011eaa <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	683a      	ldr	r2, [r7, #0]
 8011ea8:	619a      	str	r2, [r3, #24]
  }
}
 8011eaa:	bf00      	nop
 8011eac:	3714      	adds	r7, #20
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb4:	4770      	bx	lr
	...

08011eb8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b084      	sub	sp, #16
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	60f8      	str	r0, [r7, #12]
 8011ec0:	60b9      	str	r1, [r7, #8]
 8011ec2:	4613      	mov	r3, r2
 8011ec4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d107      	bne.n	8011edc <tcp_poll+0x24>
 8011ecc:	4b0e      	ldr	r3, [pc, #56]	; (8011f08 <tcp_poll+0x50>)
 8011ece:	f640 023d 	movw	r2, #2109	; 0x83d
 8011ed2:	490e      	ldr	r1, [pc, #56]	; (8011f0c <tcp_poll+0x54>)
 8011ed4:	480e      	ldr	r0, [pc, #56]	; (8011f10 <tcp_poll+0x58>)
 8011ed6:	f008 ff87 	bl	801ade8 <iprintf>
 8011eda:	e011      	b.n	8011f00 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	7d1b      	ldrb	r3, [r3, #20]
 8011ee0:	2b01      	cmp	r3, #1
 8011ee2:	d106      	bne.n	8011ef2 <tcp_poll+0x3a>
 8011ee4:	4b08      	ldr	r3, [pc, #32]	; (8011f08 <tcp_poll+0x50>)
 8011ee6:	f640 023e 	movw	r2, #2110	; 0x83e
 8011eea:	490a      	ldr	r1, [pc, #40]	; (8011f14 <tcp_poll+0x5c>)
 8011eec:	4808      	ldr	r0, [pc, #32]	; (8011f10 <tcp_poll+0x58>)
 8011eee:	f008 ff7b 	bl	801ade8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	68ba      	ldr	r2, [r7, #8]
 8011ef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	79fa      	ldrb	r2, [r7, #7]
 8011efe:	775a      	strb	r2, [r3, #29]
}
 8011f00:	3710      	adds	r7, #16
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd80      	pop	{r7, pc}
 8011f06:	bf00      	nop
 8011f08:	08020ebc 	.word	0x08020ebc
 8011f0c:	080214d0 	.word	0x080214d0
 8011f10:	08020f00 	.word	0x08020f00
 8011f14:	080214e8 	.word	0x080214e8

08011f18 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b082      	sub	sp, #8
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d107      	bne.n	8011f36 <tcp_pcb_purge+0x1e>
 8011f26:	4b21      	ldr	r3, [pc, #132]	; (8011fac <tcp_pcb_purge+0x94>)
 8011f28:	f640 0251 	movw	r2, #2129	; 0x851
 8011f2c:	4920      	ldr	r1, [pc, #128]	; (8011fb0 <tcp_pcb_purge+0x98>)
 8011f2e:	4821      	ldr	r0, [pc, #132]	; (8011fb4 <tcp_pcb_purge+0x9c>)
 8011f30:	f008 ff5a 	bl	801ade8 <iprintf>
 8011f34:	e037      	b.n	8011fa6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	7d1b      	ldrb	r3, [r3, #20]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d033      	beq.n	8011fa6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011f42:	2b0a      	cmp	r3, #10
 8011f44:	d02f      	beq.n	8011fa6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011f4a:	2b01      	cmp	r3, #1
 8011f4c:	d02b      	beq.n	8011fa6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d007      	beq.n	8011f66 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f7fe f8e6 	bl	801012c <pbuf_free>
      pcb->refused_data = NULL;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	2200      	movs	r2, #0
 8011f64:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d002      	beq.n	8011f74 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011f6e:	6878      	ldr	r0, [r7, #4]
 8011f70:	f000 f986 	bl	8012280 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f7a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f80:	4618      	mov	r0, r3
 8011f82:	f7ff fcfb 	bl	801197c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f7ff fcf6 	bl	801197c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	2200      	movs	r2, #0
 8011f94:	66da      	str	r2, [r3, #108]	; 0x6c
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8011fa6:	3708      	adds	r7, #8
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bd80      	pop	{r7, pc}
 8011fac:	08020ebc 	.word	0x08020ebc
 8011fb0:	08021508 	.word	0x08021508
 8011fb4:	08020f00 	.word	0x08020f00

08011fb8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b084      	sub	sp, #16
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
 8011fc0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011fc2:	683b      	ldr	r3, [r7, #0]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d106      	bne.n	8011fd6 <tcp_pcb_remove+0x1e>
 8011fc8:	4b3e      	ldr	r3, [pc, #248]	; (80120c4 <tcp_pcb_remove+0x10c>)
 8011fca:	f640 0283 	movw	r2, #2179	; 0x883
 8011fce:	493e      	ldr	r1, [pc, #248]	; (80120c8 <tcp_pcb_remove+0x110>)
 8011fd0:	483e      	ldr	r0, [pc, #248]	; (80120cc <tcp_pcb_remove+0x114>)
 8011fd2:	f008 ff09 	bl	801ade8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d106      	bne.n	8011fea <tcp_pcb_remove+0x32>
 8011fdc:	4b39      	ldr	r3, [pc, #228]	; (80120c4 <tcp_pcb_remove+0x10c>)
 8011fde:	f640 0284 	movw	r2, #2180	; 0x884
 8011fe2:	493b      	ldr	r1, [pc, #236]	; (80120d0 <tcp_pcb_remove+0x118>)
 8011fe4:	4839      	ldr	r0, [pc, #228]	; (80120cc <tcp_pcb_remove+0x114>)
 8011fe6:	f008 feff 	bl	801ade8 <iprintf>

  TCP_RMV(pcblist, pcb);
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	683a      	ldr	r2, [r7, #0]
 8011ff0:	429a      	cmp	r2, r3
 8011ff2:	d105      	bne.n	8012000 <tcp_pcb_remove+0x48>
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	68da      	ldr	r2, [r3, #12]
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	601a      	str	r2, [r3, #0]
 8011ffe:	e013      	b.n	8012028 <tcp_pcb_remove+0x70>
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	60fb      	str	r3, [r7, #12]
 8012006:	e00c      	b.n	8012022 <tcp_pcb_remove+0x6a>
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	68db      	ldr	r3, [r3, #12]
 801200c:	683a      	ldr	r2, [r7, #0]
 801200e:	429a      	cmp	r2, r3
 8012010:	d104      	bne.n	801201c <tcp_pcb_remove+0x64>
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	68da      	ldr	r2, [r3, #12]
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	60da      	str	r2, [r3, #12]
 801201a:	e005      	b.n	8012028 <tcp_pcb_remove+0x70>
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	68db      	ldr	r3, [r3, #12]
 8012020:	60fb      	str	r3, [r7, #12]
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d1ef      	bne.n	8012008 <tcp_pcb_remove+0x50>
 8012028:	683b      	ldr	r3, [r7, #0]
 801202a:	2200      	movs	r2, #0
 801202c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801202e:	6838      	ldr	r0, [r7, #0]
 8012030:	f7ff ff72 	bl	8011f18 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012034:	683b      	ldr	r3, [r7, #0]
 8012036:	7d1b      	ldrb	r3, [r3, #20]
 8012038:	2b0a      	cmp	r3, #10
 801203a:	d013      	beq.n	8012064 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801203c:	683b      	ldr	r3, [r7, #0]
 801203e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012040:	2b01      	cmp	r3, #1
 8012042:	d00f      	beq.n	8012064 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012044:	683b      	ldr	r3, [r7, #0]
 8012046:	8b5b      	ldrh	r3, [r3, #26]
 8012048:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801204c:	2b00      	cmp	r3, #0
 801204e:	d009      	beq.n	8012064 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8012050:	683b      	ldr	r3, [r7, #0]
 8012052:	8b5b      	ldrh	r3, [r3, #26]
 8012054:	f043 0302 	orr.w	r3, r3, #2
 8012058:	b29a      	uxth	r2, r3
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801205e:	6838      	ldr	r0, [r7, #0]
 8012060:	f003 fbc2 	bl	80157e8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012064:	683b      	ldr	r3, [r7, #0]
 8012066:	7d1b      	ldrb	r3, [r3, #20]
 8012068:	2b01      	cmp	r3, #1
 801206a:	d020      	beq.n	80120ae <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801206c:	683b      	ldr	r3, [r7, #0]
 801206e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012070:	2b00      	cmp	r3, #0
 8012072:	d006      	beq.n	8012082 <tcp_pcb_remove+0xca>
 8012074:	4b13      	ldr	r3, [pc, #76]	; (80120c4 <tcp_pcb_remove+0x10c>)
 8012076:	f640 0293 	movw	r2, #2195	; 0x893
 801207a:	4916      	ldr	r1, [pc, #88]	; (80120d4 <tcp_pcb_remove+0x11c>)
 801207c:	4813      	ldr	r0, [pc, #76]	; (80120cc <tcp_pcb_remove+0x114>)
 801207e:	f008 feb3 	bl	801ade8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012086:	2b00      	cmp	r3, #0
 8012088:	d006      	beq.n	8012098 <tcp_pcb_remove+0xe0>
 801208a:	4b0e      	ldr	r3, [pc, #56]	; (80120c4 <tcp_pcb_remove+0x10c>)
 801208c:	f640 0294 	movw	r2, #2196	; 0x894
 8012090:	4911      	ldr	r1, [pc, #68]	; (80120d8 <tcp_pcb_remove+0x120>)
 8012092:	480e      	ldr	r0, [pc, #56]	; (80120cc <tcp_pcb_remove+0x114>)
 8012094:	f008 fea8 	bl	801ade8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012098:	683b      	ldr	r3, [r7, #0]
 801209a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801209c:	2b00      	cmp	r3, #0
 801209e:	d006      	beq.n	80120ae <tcp_pcb_remove+0xf6>
 80120a0:	4b08      	ldr	r3, [pc, #32]	; (80120c4 <tcp_pcb_remove+0x10c>)
 80120a2:	f640 0296 	movw	r2, #2198	; 0x896
 80120a6:	490d      	ldr	r1, [pc, #52]	; (80120dc <tcp_pcb_remove+0x124>)
 80120a8:	4808      	ldr	r0, [pc, #32]	; (80120cc <tcp_pcb_remove+0x114>)
 80120aa:	f008 fe9d 	bl	801ade8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	2200      	movs	r2, #0
 80120b2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	2200      	movs	r2, #0
 80120b8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80120ba:	bf00      	nop
 80120bc:	3710      	adds	r7, #16
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}
 80120c2:	bf00      	nop
 80120c4:	08020ebc 	.word	0x08020ebc
 80120c8:	08021524 	.word	0x08021524
 80120cc:	08020f00 	.word	0x08020f00
 80120d0:	08021540 	.word	0x08021540
 80120d4:	08021560 	.word	0x08021560
 80120d8:	08021578 	.word	0x08021578
 80120dc:	08021594 	.word	0x08021594

080120e0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b082      	sub	sp, #8
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d106      	bne.n	80120fc <tcp_next_iss+0x1c>
 80120ee:	4b0a      	ldr	r3, [pc, #40]	; (8012118 <tcp_next_iss+0x38>)
 80120f0:	f640 02af 	movw	r2, #2223	; 0x8af
 80120f4:	4909      	ldr	r1, [pc, #36]	; (801211c <tcp_next_iss+0x3c>)
 80120f6:	480a      	ldr	r0, [pc, #40]	; (8012120 <tcp_next_iss+0x40>)
 80120f8:	f008 fe76 	bl	801ade8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80120fc:	4b09      	ldr	r3, [pc, #36]	; (8012124 <tcp_next_iss+0x44>)
 80120fe:	681a      	ldr	r2, [r3, #0]
 8012100:	4b09      	ldr	r3, [pc, #36]	; (8012128 <tcp_next_iss+0x48>)
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	4413      	add	r3, r2
 8012106:	4a07      	ldr	r2, [pc, #28]	; (8012124 <tcp_next_iss+0x44>)
 8012108:	6013      	str	r3, [r2, #0]
  return iss;
 801210a:	4b06      	ldr	r3, [pc, #24]	; (8012124 <tcp_next_iss+0x44>)
 801210c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801210e:	4618      	mov	r0, r3
 8012110:	3708      	adds	r7, #8
 8012112:	46bd      	mov	sp, r7
 8012114:	bd80      	pop	{r7, pc}
 8012116:	bf00      	nop
 8012118:	08020ebc 	.word	0x08020ebc
 801211c:	080215ac 	.word	0x080215ac
 8012120:	08020f00 	.word	0x08020f00
 8012124:	20000018 	.word	0x20000018
 8012128:	20007ca0 	.word	0x20007ca0

0801212c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b086      	sub	sp, #24
 8012130:	af00      	add	r7, sp, #0
 8012132:	4603      	mov	r3, r0
 8012134:	60b9      	str	r1, [r7, #8]
 8012136:	607a      	str	r2, [r7, #4]
 8012138:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d106      	bne.n	801214e <tcp_eff_send_mss_netif+0x22>
 8012140:	4b14      	ldr	r3, [pc, #80]	; (8012194 <tcp_eff_send_mss_netif+0x68>)
 8012142:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8012146:	4914      	ldr	r1, [pc, #80]	; (8012198 <tcp_eff_send_mss_netif+0x6c>)
 8012148:	4814      	ldr	r0, [pc, #80]	; (801219c <tcp_eff_send_mss_netif+0x70>)
 801214a:	f008 fe4d 	bl	801ade8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d101      	bne.n	8012158 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012154:	89fb      	ldrh	r3, [r7, #14]
 8012156:	e019      	b.n	801218c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8012158:	68bb      	ldr	r3, [r7, #8]
 801215a:	8c1b      	ldrh	r3, [r3, #32]
 801215c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801215e:	8afb      	ldrh	r3, [r7, #22]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d012      	beq.n	801218a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012164:	2328      	movs	r3, #40	; 0x28
 8012166:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012168:	8afa      	ldrh	r2, [r7, #22]
 801216a:	8abb      	ldrh	r3, [r7, #20]
 801216c:	429a      	cmp	r2, r3
 801216e:	d904      	bls.n	801217a <tcp_eff_send_mss_netif+0x4e>
 8012170:	8afa      	ldrh	r2, [r7, #22]
 8012172:	8abb      	ldrh	r3, [r7, #20]
 8012174:	1ad3      	subs	r3, r2, r3
 8012176:	b29b      	uxth	r3, r3
 8012178:	e000      	b.n	801217c <tcp_eff_send_mss_netif+0x50>
 801217a:	2300      	movs	r3, #0
 801217c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801217e:	8a7a      	ldrh	r2, [r7, #18]
 8012180:	89fb      	ldrh	r3, [r7, #14]
 8012182:	4293      	cmp	r3, r2
 8012184:	bf28      	it	cs
 8012186:	4613      	movcs	r3, r2
 8012188:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801218a:	89fb      	ldrh	r3, [r7, #14]
}
 801218c:	4618      	mov	r0, r3
 801218e:	3718      	adds	r7, #24
 8012190:	46bd      	mov	sp, r7
 8012192:	bd80      	pop	{r7, pc}
 8012194:	08020ebc 	.word	0x08020ebc
 8012198:	080215c8 	.word	0x080215c8
 801219c:	08020f00 	.word	0x08020f00

080121a0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b084      	sub	sp, #16
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
 80121a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d119      	bne.n	80121e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80121b4:	4b10      	ldr	r3, [pc, #64]	; (80121f8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80121b6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80121ba:	4910      	ldr	r1, [pc, #64]	; (80121fc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80121bc:	4810      	ldr	r0, [pc, #64]	; (8012200 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80121be:	f008 fe13 	bl	801ade8 <iprintf>

  while (pcb != NULL) {
 80121c2:	e011      	b.n	80121e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	681a      	ldr	r2, [r3, #0]
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	429a      	cmp	r2, r3
 80121ce:	d108      	bne.n	80121e2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	68db      	ldr	r3, [r3, #12]
 80121d4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80121d6:	68f8      	ldr	r0, [r7, #12]
 80121d8:	f7fe fd9e 	bl	8010d18 <tcp_abort>
      pcb = next;
 80121dc:	68bb      	ldr	r3, [r7, #8]
 80121de:	60fb      	str	r3, [r7, #12]
 80121e0:	e002      	b.n	80121e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	68db      	ldr	r3, [r3, #12]
 80121e6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d1ea      	bne.n	80121c4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80121ee:	bf00      	nop
 80121f0:	3710      	adds	r7, #16
 80121f2:	46bd      	mov	sp, r7
 80121f4:	bd80      	pop	{r7, pc}
 80121f6:	bf00      	nop
 80121f8:	08020ebc 	.word	0x08020ebc
 80121fc:	080215f0 	.word	0x080215f0
 8012200:	08020f00 	.word	0x08020f00

08012204 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012204:	b580      	push	{r7, lr}
 8012206:	b084      	sub	sp, #16
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
 801220c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d02a      	beq.n	801226a <tcp_netif_ip_addr_changed+0x66>
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d026      	beq.n	801226a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801221c:	4b15      	ldr	r3, [pc, #84]	; (8012274 <tcp_netif_ip_addr_changed+0x70>)
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	4619      	mov	r1, r3
 8012222:	6878      	ldr	r0, [r7, #4]
 8012224:	f7ff ffbc 	bl	80121a0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012228:	4b13      	ldr	r3, [pc, #76]	; (8012278 <tcp_netif_ip_addr_changed+0x74>)
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	4619      	mov	r1, r3
 801222e:	6878      	ldr	r0, [r7, #4]
 8012230:	f7ff ffb6 	bl	80121a0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d017      	beq.n	801226a <tcp_netif_ip_addr_changed+0x66>
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d013      	beq.n	801226a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012242:	4b0e      	ldr	r3, [pc, #56]	; (801227c <tcp_netif_ip_addr_changed+0x78>)
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	60fb      	str	r3, [r7, #12]
 8012248:	e00c      	b.n	8012264 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	681a      	ldr	r2, [r3, #0]
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	429a      	cmp	r2, r3
 8012254:	d103      	bne.n	801225e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012256:	683b      	ldr	r3, [r7, #0]
 8012258:	681a      	ldr	r2, [r3, #0]
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	68db      	ldr	r3, [r3, #12]
 8012262:	60fb      	str	r3, [r7, #12]
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d1ef      	bne.n	801224a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801226a:	bf00      	nop
 801226c:	3710      	adds	r7, #16
 801226e:	46bd      	mov	sp, r7
 8012270:	bd80      	pop	{r7, pc}
 8012272:	bf00      	nop
 8012274:	20007c9c 	.word	0x20007c9c
 8012278:	20007ca8 	.word	0x20007ca8
 801227c:	20007ca4 	.word	0x20007ca4

08012280 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b082      	sub	sp, #8
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801228c:	2b00      	cmp	r3, #0
 801228e:	d007      	beq.n	80122a0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012294:	4618      	mov	r0, r3
 8012296:	f7ff fb71 	bl	801197c <tcp_segs_free>
    pcb->ooseq = NULL;
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	2200      	movs	r2, #0
 801229e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80122a0:	bf00      	nop
 80122a2:	3708      	adds	r7, #8
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bd80      	pop	{r7, pc}

080122a8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80122a8:	b590      	push	{r4, r7, lr}
 80122aa:	b08d      	sub	sp, #52	; 0x34
 80122ac:	af04      	add	r7, sp, #16
 80122ae:	6078      	str	r0, [r7, #4]
 80122b0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d105      	bne.n	80122c4 <tcp_input+0x1c>
 80122b8:	4b9b      	ldr	r3, [pc, #620]	; (8012528 <tcp_input+0x280>)
 80122ba:	2283      	movs	r2, #131	; 0x83
 80122bc:	499b      	ldr	r1, [pc, #620]	; (801252c <tcp_input+0x284>)
 80122be:	489c      	ldr	r0, [pc, #624]	; (8012530 <tcp_input+0x288>)
 80122c0:	f008 fd92 	bl	801ade8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	685b      	ldr	r3, [r3, #4]
 80122c8:	4a9a      	ldr	r2, [pc, #616]	; (8012534 <tcp_input+0x28c>)
 80122ca:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	895b      	ldrh	r3, [r3, #10]
 80122d0:	2b13      	cmp	r3, #19
 80122d2:	f240 83c4 	bls.w	8012a5e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80122d6:	4b98      	ldr	r3, [pc, #608]	; (8012538 <tcp_input+0x290>)
 80122d8:	695a      	ldr	r2, [r3, #20]
 80122da:	4b97      	ldr	r3, [pc, #604]	; (8012538 <tcp_input+0x290>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	4619      	mov	r1, r3
 80122e0:	4610      	mov	r0, r2
 80122e2:	f006 fc47 	bl	8018b74 <ip4_addr_isbroadcast_u32>
 80122e6:	4603      	mov	r3, r0
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	f040 83ba 	bne.w	8012a62 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80122ee:	4b92      	ldr	r3, [pc, #584]	; (8012538 <tcp_input+0x290>)
 80122f0:	695b      	ldr	r3, [r3, #20]
 80122f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80122f6:	2be0      	cmp	r3, #224	; 0xe0
 80122f8:	f000 83b3 	beq.w	8012a62 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80122fc:	4b8d      	ldr	r3, [pc, #564]	; (8012534 <tcp_input+0x28c>)
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	899b      	ldrh	r3, [r3, #12]
 8012302:	b29b      	uxth	r3, r3
 8012304:	4618      	mov	r0, r3
 8012306:	f7fc fbe1 	bl	800eacc <lwip_htons>
 801230a:	4603      	mov	r3, r0
 801230c:	0b1b      	lsrs	r3, r3, #12
 801230e:	b29b      	uxth	r3, r3
 8012310:	b2db      	uxtb	r3, r3
 8012312:	009b      	lsls	r3, r3, #2
 8012314:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012316:	7cbb      	ldrb	r3, [r7, #18]
 8012318:	2b13      	cmp	r3, #19
 801231a:	f240 83a2 	bls.w	8012a62 <tcp_input+0x7ba>
 801231e:	7cbb      	ldrb	r3, [r7, #18]
 8012320:	b29a      	uxth	r2, r3
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	891b      	ldrh	r3, [r3, #8]
 8012326:	429a      	cmp	r2, r3
 8012328:	f200 839b 	bhi.w	8012a62 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801232c:	7cbb      	ldrb	r3, [r7, #18]
 801232e:	b29b      	uxth	r3, r3
 8012330:	3b14      	subs	r3, #20
 8012332:	b29a      	uxth	r2, r3
 8012334:	4b81      	ldr	r3, [pc, #516]	; (801253c <tcp_input+0x294>)
 8012336:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012338:	4b81      	ldr	r3, [pc, #516]	; (8012540 <tcp_input+0x298>)
 801233a:	2200      	movs	r2, #0
 801233c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	895a      	ldrh	r2, [r3, #10]
 8012342:	7cbb      	ldrb	r3, [r7, #18]
 8012344:	b29b      	uxth	r3, r3
 8012346:	429a      	cmp	r2, r3
 8012348:	d309      	bcc.n	801235e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801234a:	4b7c      	ldr	r3, [pc, #496]	; (801253c <tcp_input+0x294>)
 801234c:	881a      	ldrh	r2, [r3, #0]
 801234e:	4b7d      	ldr	r3, [pc, #500]	; (8012544 <tcp_input+0x29c>)
 8012350:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012352:	7cbb      	ldrb	r3, [r7, #18]
 8012354:	4619      	mov	r1, r3
 8012356:	6878      	ldr	r0, [r7, #4]
 8012358:	f7fd fe62 	bl	8010020 <pbuf_remove_header>
 801235c:	e04e      	b.n	80123fc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d105      	bne.n	8012372 <tcp_input+0xca>
 8012366:	4b70      	ldr	r3, [pc, #448]	; (8012528 <tcp_input+0x280>)
 8012368:	22c2      	movs	r2, #194	; 0xc2
 801236a:	4977      	ldr	r1, [pc, #476]	; (8012548 <tcp_input+0x2a0>)
 801236c:	4870      	ldr	r0, [pc, #448]	; (8012530 <tcp_input+0x288>)
 801236e:	f008 fd3b 	bl	801ade8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012372:	2114      	movs	r1, #20
 8012374:	6878      	ldr	r0, [r7, #4]
 8012376:	f7fd fe53 	bl	8010020 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	895a      	ldrh	r2, [r3, #10]
 801237e:	4b71      	ldr	r3, [pc, #452]	; (8012544 <tcp_input+0x29c>)
 8012380:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012382:	4b6e      	ldr	r3, [pc, #440]	; (801253c <tcp_input+0x294>)
 8012384:	881a      	ldrh	r2, [r3, #0]
 8012386:	4b6f      	ldr	r3, [pc, #444]	; (8012544 <tcp_input+0x29c>)
 8012388:	881b      	ldrh	r3, [r3, #0]
 801238a:	1ad3      	subs	r3, r2, r3
 801238c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801238e:	4b6d      	ldr	r3, [pc, #436]	; (8012544 <tcp_input+0x29c>)
 8012390:	881b      	ldrh	r3, [r3, #0]
 8012392:	4619      	mov	r1, r3
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f7fd fe43 	bl	8010020 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	895b      	ldrh	r3, [r3, #10]
 80123a0:	8a3a      	ldrh	r2, [r7, #16]
 80123a2:	429a      	cmp	r2, r3
 80123a4:	f200 835f 	bhi.w	8012a66 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	685b      	ldr	r3, [r3, #4]
 80123ae:	4a64      	ldr	r2, [pc, #400]	; (8012540 <tcp_input+0x298>)
 80123b0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	8a3a      	ldrh	r2, [r7, #16]
 80123b8:	4611      	mov	r1, r2
 80123ba:	4618      	mov	r0, r3
 80123bc:	f7fd fe30 	bl	8010020 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	891a      	ldrh	r2, [r3, #8]
 80123c4:	8a3b      	ldrh	r3, [r7, #16]
 80123c6:	1ad3      	subs	r3, r2, r3
 80123c8:	b29a      	uxth	r2, r3
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	895b      	ldrh	r3, [r3, #10]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d005      	beq.n	80123e2 <tcp_input+0x13a>
 80123d6:	4b54      	ldr	r3, [pc, #336]	; (8012528 <tcp_input+0x280>)
 80123d8:	22df      	movs	r2, #223	; 0xdf
 80123da:	495c      	ldr	r1, [pc, #368]	; (801254c <tcp_input+0x2a4>)
 80123dc:	4854      	ldr	r0, [pc, #336]	; (8012530 <tcp_input+0x288>)
 80123de:	f008 fd03 	bl	801ade8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	891a      	ldrh	r2, [r3, #8]
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	891b      	ldrh	r3, [r3, #8]
 80123ec:	429a      	cmp	r2, r3
 80123ee:	d005      	beq.n	80123fc <tcp_input+0x154>
 80123f0:	4b4d      	ldr	r3, [pc, #308]	; (8012528 <tcp_input+0x280>)
 80123f2:	22e0      	movs	r2, #224	; 0xe0
 80123f4:	4956      	ldr	r1, [pc, #344]	; (8012550 <tcp_input+0x2a8>)
 80123f6:	484e      	ldr	r0, [pc, #312]	; (8012530 <tcp_input+0x288>)
 80123f8:	f008 fcf6 	bl	801ade8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80123fc:	4b4d      	ldr	r3, [pc, #308]	; (8012534 <tcp_input+0x28c>)
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	881b      	ldrh	r3, [r3, #0]
 8012402:	b29a      	uxth	r2, r3
 8012404:	4b4b      	ldr	r3, [pc, #300]	; (8012534 <tcp_input+0x28c>)
 8012406:	681c      	ldr	r4, [r3, #0]
 8012408:	4610      	mov	r0, r2
 801240a:	f7fc fb5f 	bl	800eacc <lwip_htons>
 801240e:	4603      	mov	r3, r0
 8012410:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012412:	4b48      	ldr	r3, [pc, #288]	; (8012534 <tcp_input+0x28c>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	885b      	ldrh	r3, [r3, #2]
 8012418:	b29a      	uxth	r2, r3
 801241a:	4b46      	ldr	r3, [pc, #280]	; (8012534 <tcp_input+0x28c>)
 801241c:	681c      	ldr	r4, [r3, #0]
 801241e:	4610      	mov	r0, r2
 8012420:	f7fc fb54 	bl	800eacc <lwip_htons>
 8012424:	4603      	mov	r3, r0
 8012426:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012428:	4b42      	ldr	r3, [pc, #264]	; (8012534 <tcp_input+0x28c>)
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	685a      	ldr	r2, [r3, #4]
 801242e:	4b41      	ldr	r3, [pc, #260]	; (8012534 <tcp_input+0x28c>)
 8012430:	681c      	ldr	r4, [r3, #0]
 8012432:	4610      	mov	r0, r2
 8012434:	f7fc fb5f 	bl	800eaf6 <lwip_htonl>
 8012438:	4603      	mov	r3, r0
 801243a:	6063      	str	r3, [r4, #4]
 801243c:	6863      	ldr	r3, [r4, #4]
 801243e:	4a45      	ldr	r2, [pc, #276]	; (8012554 <tcp_input+0x2ac>)
 8012440:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012442:	4b3c      	ldr	r3, [pc, #240]	; (8012534 <tcp_input+0x28c>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	689a      	ldr	r2, [r3, #8]
 8012448:	4b3a      	ldr	r3, [pc, #232]	; (8012534 <tcp_input+0x28c>)
 801244a:	681c      	ldr	r4, [r3, #0]
 801244c:	4610      	mov	r0, r2
 801244e:	f7fc fb52 	bl	800eaf6 <lwip_htonl>
 8012452:	4603      	mov	r3, r0
 8012454:	60a3      	str	r3, [r4, #8]
 8012456:	68a3      	ldr	r3, [r4, #8]
 8012458:	4a3f      	ldr	r2, [pc, #252]	; (8012558 <tcp_input+0x2b0>)
 801245a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801245c:	4b35      	ldr	r3, [pc, #212]	; (8012534 <tcp_input+0x28c>)
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	89db      	ldrh	r3, [r3, #14]
 8012462:	b29a      	uxth	r2, r3
 8012464:	4b33      	ldr	r3, [pc, #204]	; (8012534 <tcp_input+0x28c>)
 8012466:	681c      	ldr	r4, [r3, #0]
 8012468:	4610      	mov	r0, r2
 801246a:	f7fc fb2f 	bl	800eacc <lwip_htons>
 801246e:	4603      	mov	r3, r0
 8012470:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012472:	4b30      	ldr	r3, [pc, #192]	; (8012534 <tcp_input+0x28c>)
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	899b      	ldrh	r3, [r3, #12]
 8012478:	b29b      	uxth	r3, r3
 801247a:	4618      	mov	r0, r3
 801247c:	f7fc fb26 	bl	800eacc <lwip_htons>
 8012480:	4603      	mov	r3, r0
 8012482:	b2db      	uxtb	r3, r3
 8012484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012488:	b2da      	uxtb	r2, r3
 801248a:	4b34      	ldr	r3, [pc, #208]	; (801255c <tcp_input+0x2b4>)
 801248c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	891a      	ldrh	r2, [r3, #8]
 8012492:	4b33      	ldr	r3, [pc, #204]	; (8012560 <tcp_input+0x2b8>)
 8012494:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012496:	4b31      	ldr	r3, [pc, #196]	; (801255c <tcp_input+0x2b4>)
 8012498:	781b      	ldrb	r3, [r3, #0]
 801249a:	f003 0303 	and.w	r3, r3, #3
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d00c      	beq.n	80124bc <tcp_input+0x214>
    tcplen++;
 80124a2:	4b2f      	ldr	r3, [pc, #188]	; (8012560 <tcp_input+0x2b8>)
 80124a4:	881b      	ldrh	r3, [r3, #0]
 80124a6:	3301      	adds	r3, #1
 80124a8:	b29a      	uxth	r2, r3
 80124aa:	4b2d      	ldr	r3, [pc, #180]	; (8012560 <tcp_input+0x2b8>)
 80124ac:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	891a      	ldrh	r2, [r3, #8]
 80124b2:	4b2b      	ldr	r3, [pc, #172]	; (8012560 <tcp_input+0x2b8>)
 80124b4:	881b      	ldrh	r3, [r3, #0]
 80124b6:	429a      	cmp	r2, r3
 80124b8:	f200 82d7 	bhi.w	8012a6a <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80124bc:	2300      	movs	r3, #0
 80124be:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80124c0:	4b28      	ldr	r3, [pc, #160]	; (8012564 <tcp_input+0x2bc>)
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	61fb      	str	r3, [r7, #28]
 80124c6:	e09d      	b.n	8012604 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80124c8:	69fb      	ldr	r3, [r7, #28]
 80124ca:	7d1b      	ldrb	r3, [r3, #20]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d105      	bne.n	80124dc <tcp_input+0x234>
 80124d0:	4b15      	ldr	r3, [pc, #84]	; (8012528 <tcp_input+0x280>)
 80124d2:	22fb      	movs	r2, #251	; 0xfb
 80124d4:	4924      	ldr	r1, [pc, #144]	; (8012568 <tcp_input+0x2c0>)
 80124d6:	4816      	ldr	r0, [pc, #88]	; (8012530 <tcp_input+0x288>)
 80124d8:	f008 fc86 	bl	801ade8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80124dc:	69fb      	ldr	r3, [r7, #28]
 80124de:	7d1b      	ldrb	r3, [r3, #20]
 80124e0:	2b0a      	cmp	r3, #10
 80124e2:	d105      	bne.n	80124f0 <tcp_input+0x248>
 80124e4:	4b10      	ldr	r3, [pc, #64]	; (8012528 <tcp_input+0x280>)
 80124e6:	22fc      	movs	r2, #252	; 0xfc
 80124e8:	4920      	ldr	r1, [pc, #128]	; (801256c <tcp_input+0x2c4>)
 80124ea:	4811      	ldr	r0, [pc, #68]	; (8012530 <tcp_input+0x288>)
 80124ec:	f008 fc7c 	bl	801ade8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80124f0:	69fb      	ldr	r3, [r7, #28]
 80124f2:	7d1b      	ldrb	r3, [r3, #20]
 80124f4:	2b01      	cmp	r3, #1
 80124f6:	d105      	bne.n	8012504 <tcp_input+0x25c>
 80124f8:	4b0b      	ldr	r3, [pc, #44]	; (8012528 <tcp_input+0x280>)
 80124fa:	22fd      	movs	r2, #253	; 0xfd
 80124fc:	491c      	ldr	r1, [pc, #112]	; (8012570 <tcp_input+0x2c8>)
 80124fe:	480c      	ldr	r0, [pc, #48]	; (8012530 <tcp_input+0x288>)
 8012500:	f008 fc72 	bl	801ade8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012504:	69fb      	ldr	r3, [r7, #28]
 8012506:	7a1b      	ldrb	r3, [r3, #8]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d033      	beq.n	8012574 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801250c:	69fb      	ldr	r3, [r7, #28]
 801250e:	7a1a      	ldrb	r2, [r3, #8]
 8012510:	4b09      	ldr	r3, [pc, #36]	; (8012538 <tcp_input+0x290>)
 8012512:	685b      	ldr	r3, [r3, #4]
 8012514:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012518:	3301      	adds	r3, #1
 801251a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801251c:	429a      	cmp	r2, r3
 801251e:	d029      	beq.n	8012574 <tcp_input+0x2cc>
      prev = pcb;
 8012520:	69fb      	ldr	r3, [r7, #28]
 8012522:	61bb      	str	r3, [r7, #24]
      continue;
 8012524:	e06b      	b.n	80125fe <tcp_input+0x356>
 8012526:	bf00      	nop
 8012528:	08021624 	.word	0x08021624
 801252c:	08021658 	.word	0x08021658
 8012530:	08021670 	.word	0x08021670
 8012534:	200008a4 	.word	0x200008a4
 8012538:	20004588 	.word	0x20004588
 801253c:	200008a8 	.word	0x200008a8
 8012540:	200008ac 	.word	0x200008ac
 8012544:	200008aa 	.word	0x200008aa
 8012548:	08021698 	.word	0x08021698
 801254c:	080216a8 	.word	0x080216a8
 8012550:	080216b4 	.word	0x080216b4
 8012554:	200008b4 	.word	0x200008b4
 8012558:	200008b8 	.word	0x200008b8
 801255c:	200008c0 	.word	0x200008c0
 8012560:	200008be 	.word	0x200008be
 8012564:	20007c9c 	.word	0x20007c9c
 8012568:	080216d4 	.word	0x080216d4
 801256c:	080216fc 	.word	0x080216fc
 8012570:	08021728 	.word	0x08021728
    }

    if (pcb->remote_port == tcphdr->src &&
 8012574:	69fb      	ldr	r3, [r7, #28]
 8012576:	8b1a      	ldrh	r2, [r3, #24]
 8012578:	4b94      	ldr	r3, [pc, #592]	; (80127cc <tcp_input+0x524>)
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	881b      	ldrh	r3, [r3, #0]
 801257e:	b29b      	uxth	r3, r3
 8012580:	429a      	cmp	r2, r3
 8012582:	d13a      	bne.n	80125fa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012584:	69fb      	ldr	r3, [r7, #28]
 8012586:	8ada      	ldrh	r2, [r3, #22]
 8012588:	4b90      	ldr	r3, [pc, #576]	; (80127cc <tcp_input+0x524>)
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	885b      	ldrh	r3, [r3, #2]
 801258e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012590:	429a      	cmp	r2, r3
 8012592:	d132      	bne.n	80125fa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012594:	69fb      	ldr	r3, [r7, #28]
 8012596:	685a      	ldr	r2, [r3, #4]
 8012598:	4b8d      	ldr	r3, [pc, #564]	; (80127d0 <tcp_input+0x528>)
 801259a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801259c:	429a      	cmp	r2, r3
 801259e:	d12c      	bne.n	80125fa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80125a0:	69fb      	ldr	r3, [r7, #28]
 80125a2:	681a      	ldr	r2, [r3, #0]
 80125a4:	4b8a      	ldr	r3, [pc, #552]	; (80127d0 <tcp_input+0x528>)
 80125a6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80125a8:	429a      	cmp	r2, r3
 80125aa:	d126      	bne.n	80125fa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80125ac:	69fb      	ldr	r3, [r7, #28]
 80125ae:	68db      	ldr	r3, [r3, #12]
 80125b0:	69fa      	ldr	r2, [r7, #28]
 80125b2:	429a      	cmp	r2, r3
 80125b4:	d106      	bne.n	80125c4 <tcp_input+0x31c>
 80125b6:	4b87      	ldr	r3, [pc, #540]	; (80127d4 <tcp_input+0x52c>)
 80125b8:	f240 120d 	movw	r2, #269	; 0x10d
 80125bc:	4986      	ldr	r1, [pc, #536]	; (80127d8 <tcp_input+0x530>)
 80125be:	4887      	ldr	r0, [pc, #540]	; (80127dc <tcp_input+0x534>)
 80125c0:	f008 fc12 	bl	801ade8 <iprintf>
      if (prev != NULL) {
 80125c4:	69bb      	ldr	r3, [r7, #24]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d00a      	beq.n	80125e0 <tcp_input+0x338>
        prev->next = pcb->next;
 80125ca:	69fb      	ldr	r3, [r7, #28]
 80125cc:	68da      	ldr	r2, [r3, #12]
 80125ce:	69bb      	ldr	r3, [r7, #24]
 80125d0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80125d2:	4b83      	ldr	r3, [pc, #524]	; (80127e0 <tcp_input+0x538>)
 80125d4:	681a      	ldr	r2, [r3, #0]
 80125d6:	69fb      	ldr	r3, [r7, #28]
 80125d8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80125da:	4a81      	ldr	r2, [pc, #516]	; (80127e0 <tcp_input+0x538>)
 80125dc:	69fb      	ldr	r3, [r7, #28]
 80125de:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80125e0:	69fb      	ldr	r3, [r7, #28]
 80125e2:	68db      	ldr	r3, [r3, #12]
 80125e4:	69fa      	ldr	r2, [r7, #28]
 80125e6:	429a      	cmp	r2, r3
 80125e8:	d111      	bne.n	801260e <tcp_input+0x366>
 80125ea:	4b7a      	ldr	r3, [pc, #488]	; (80127d4 <tcp_input+0x52c>)
 80125ec:	f240 1215 	movw	r2, #277	; 0x115
 80125f0:	497c      	ldr	r1, [pc, #496]	; (80127e4 <tcp_input+0x53c>)
 80125f2:	487a      	ldr	r0, [pc, #488]	; (80127dc <tcp_input+0x534>)
 80125f4:	f008 fbf8 	bl	801ade8 <iprintf>
      break;
 80125f8:	e009      	b.n	801260e <tcp_input+0x366>
    }
    prev = pcb;
 80125fa:	69fb      	ldr	r3, [r7, #28]
 80125fc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80125fe:	69fb      	ldr	r3, [r7, #28]
 8012600:	68db      	ldr	r3, [r3, #12]
 8012602:	61fb      	str	r3, [r7, #28]
 8012604:	69fb      	ldr	r3, [r7, #28]
 8012606:	2b00      	cmp	r3, #0
 8012608:	f47f af5e 	bne.w	80124c8 <tcp_input+0x220>
 801260c:	e000      	b.n	8012610 <tcp_input+0x368>
      break;
 801260e:	bf00      	nop
  }

  if (pcb == NULL) {
 8012610:	69fb      	ldr	r3, [r7, #28]
 8012612:	2b00      	cmp	r3, #0
 8012614:	f040 8095 	bne.w	8012742 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012618:	4b73      	ldr	r3, [pc, #460]	; (80127e8 <tcp_input+0x540>)
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	61fb      	str	r3, [r7, #28]
 801261e:	e03f      	b.n	80126a0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012620:	69fb      	ldr	r3, [r7, #28]
 8012622:	7d1b      	ldrb	r3, [r3, #20]
 8012624:	2b0a      	cmp	r3, #10
 8012626:	d006      	beq.n	8012636 <tcp_input+0x38e>
 8012628:	4b6a      	ldr	r3, [pc, #424]	; (80127d4 <tcp_input+0x52c>)
 801262a:	f240 121f 	movw	r2, #287	; 0x11f
 801262e:	496f      	ldr	r1, [pc, #444]	; (80127ec <tcp_input+0x544>)
 8012630:	486a      	ldr	r0, [pc, #424]	; (80127dc <tcp_input+0x534>)
 8012632:	f008 fbd9 	bl	801ade8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012636:	69fb      	ldr	r3, [r7, #28]
 8012638:	7a1b      	ldrb	r3, [r3, #8]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d009      	beq.n	8012652 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801263e:	69fb      	ldr	r3, [r7, #28]
 8012640:	7a1a      	ldrb	r2, [r3, #8]
 8012642:	4b63      	ldr	r3, [pc, #396]	; (80127d0 <tcp_input+0x528>)
 8012644:	685b      	ldr	r3, [r3, #4]
 8012646:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801264a:	3301      	adds	r3, #1
 801264c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801264e:	429a      	cmp	r2, r3
 8012650:	d122      	bne.n	8012698 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012652:	69fb      	ldr	r3, [r7, #28]
 8012654:	8b1a      	ldrh	r2, [r3, #24]
 8012656:	4b5d      	ldr	r3, [pc, #372]	; (80127cc <tcp_input+0x524>)
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	881b      	ldrh	r3, [r3, #0]
 801265c:	b29b      	uxth	r3, r3
 801265e:	429a      	cmp	r2, r3
 8012660:	d11b      	bne.n	801269a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012662:	69fb      	ldr	r3, [r7, #28]
 8012664:	8ada      	ldrh	r2, [r3, #22]
 8012666:	4b59      	ldr	r3, [pc, #356]	; (80127cc <tcp_input+0x524>)
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	885b      	ldrh	r3, [r3, #2]
 801266c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801266e:	429a      	cmp	r2, r3
 8012670:	d113      	bne.n	801269a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012672:	69fb      	ldr	r3, [r7, #28]
 8012674:	685a      	ldr	r2, [r3, #4]
 8012676:	4b56      	ldr	r3, [pc, #344]	; (80127d0 <tcp_input+0x528>)
 8012678:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801267a:	429a      	cmp	r2, r3
 801267c:	d10d      	bne.n	801269a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801267e:	69fb      	ldr	r3, [r7, #28]
 8012680:	681a      	ldr	r2, [r3, #0]
 8012682:	4b53      	ldr	r3, [pc, #332]	; (80127d0 <tcp_input+0x528>)
 8012684:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012686:	429a      	cmp	r2, r3
 8012688:	d107      	bne.n	801269a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801268a:	69f8      	ldr	r0, [r7, #28]
 801268c:	f000 fb52 	bl	8012d34 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012690:	6878      	ldr	r0, [r7, #4]
 8012692:	f7fd fd4b 	bl	801012c <pbuf_free>
        return;
 8012696:	e1ee      	b.n	8012a76 <tcp_input+0x7ce>
        continue;
 8012698:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801269a:	69fb      	ldr	r3, [r7, #28]
 801269c:	68db      	ldr	r3, [r3, #12]
 801269e:	61fb      	str	r3, [r7, #28]
 80126a0:	69fb      	ldr	r3, [r7, #28]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d1bc      	bne.n	8012620 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80126a6:	2300      	movs	r3, #0
 80126a8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80126aa:	4b51      	ldr	r3, [pc, #324]	; (80127f0 <tcp_input+0x548>)
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	617b      	str	r3, [r7, #20]
 80126b0:	e02a      	b.n	8012708 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80126b2:	697b      	ldr	r3, [r7, #20]
 80126b4:	7a1b      	ldrb	r3, [r3, #8]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d00c      	beq.n	80126d4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80126ba:	697b      	ldr	r3, [r7, #20]
 80126bc:	7a1a      	ldrb	r2, [r3, #8]
 80126be:	4b44      	ldr	r3, [pc, #272]	; (80127d0 <tcp_input+0x528>)
 80126c0:	685b      	ldr	r3, [r3, #4]
 80126c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80126c6:	3301      	adds	r3, #1
 80126c8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80126ca:	429a      	cmp	r2, r3
 80126cc:	d002      	beq.n	80126d4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80126ce:	697b      	ldr	r3, [r7, #20]
 80126d0:	61bb      	str	r3, [r7, #24]
        continue;
 80126d2:	e016      	b.n	8012702 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80126d4:	697b      	ldr	r3, [r7, #20]
 80126d6:	8ada      	ldrh	r2, [r3, #22]
 80126d8:	4b3c      	ldr	r3, [pc, #240]	; (80127cc <tcp_input+0x524>)
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	885b      	ldrh	r3, [r3, #2]
 80126de:	b29b      	uxth	r3, r3
 80126e0:	429a      	cmp	r2, r3
 80126e2:	d10c      	bne.n	80126fe <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80126e4:	697b      	ldr	r3, [r7, #20]
 80126e6:	681a      	ldr	r2, [r3, #0]
 80126e8:	4b39      	ldr	r3, [pc, #228]	; (80127d0 <tcp_input+0x528>)
 80126ea:	695b      	ldr	r3, [r3, #20]
 80126ec:	429a      	cmp	r2, r3
 80126ee:	d00f      	beq.n	8012710 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80126f0:	697b      	ldr	r3, [r7, #20]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d00d      	beq.n	8012712 <tcp_input+0x46a>
 80126f6:	697b      	ldr	r3, [r7, #20]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d009      	beq.n	8012712 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80126fe:	697b      	ldr	r3, [r7, #20]
 8012700:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012702:	697b      	ldr	r3, [r7, #20]
 8012704:	68db      	ldr	r3, [r3, #12]
 8012706:	617b      	str	r3, [r7, #20]
 8012708:	697b      	ldr	r3, [r7, #20]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d1d1      	bne.n	80126b2 <tcp_input+0x40a>
 801270e:	e000      	b.n	8012712 <tcp_input+0x46a>
            break;
 8012710:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012712:	697b      	ldr	r3, [r7, #20]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d014      	beq.n	8012742 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012718:	69bb      	ldr	r3, [r7, #24]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d00a      	beq.n	8012734 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801271e:	697b      	ldr	r3, [r7, #20]
 8012720:	68da      	ldr	r2, [r3, #12]
 8012722:	69bb      	ldr	r3, [r7, #24]
 8012724:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012726:	4b32      	ldr	r3, [pc, #200]	; (80127f0 <tcp_input+0x548>)
 8012728:	681a      	ldr	r2, [r3, #0]
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801272e:	4a30      	ldr	r2, [pc, #192]	; (80127f0 <tcp_input+0x548>)
 8012730:	697b      	ldr	r3, [r7, #20]
 8012732:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012734:	6978      	ldr	r0, [r7, #20]
 8012736:	f000 f9ff 	bl	8012b38 <tcp_listen_input>
      }
      pbuf_free(p);
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f7fd fcf6 	bl	801012c <pbuf_free>
      return;
 8012740:	e199      	b.n	8012a76 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012742:	69fb      	ldr	r3, [r7, #28]
 8012744:	2b00      	cmp	r3, #0
 8012746:	f000 8160 	beq.w	8012a0a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801274a:	4b2a      	ldr	r3, [pc, #168]	; (80127f4 <tcp_input+0x54c>)
 801274c:	2200      	movs	r2, #0
 801274e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	891a      	ldrh	r2, [r3, #8]
 8012754:	4b27      	ldr	r3, [pc, #156]	; (80127f4 <tcp_input+0x54c>)
 8012756:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012758:	4a26      	ldr	r2, [pc, #152]	; (80127f4 <tcp_input+0x54c>)
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801275e:	4b1b      	ldr	r3, [pc, #108]	; (80127cc <tcp_input+0x524>)
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	4a24      	ldr	r2, [pc, #144]	; (80127f4 <tcp_input+0x54c>)
 8012764:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012766:	4b24      	ldr	r3, [pc, #144]	; (80127f8 <tcp_input+0x550>)
 8012768:	2200      	movs	r2, #0
 801276a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801276c:	4b23      	ldr	r3, [pc, #140]	; (80127fc <tcp_input+0x554>)
 801276e:	2200      	movs	r2, #0
 8012770:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012772:	4b23      	ldr	r3, [pc, #140]	; (8012800 <tcp_input+0x558>)
 8012774:	2200      	movs	r2, #0
 8012776:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012778:	4b22      	ldr	r3, [pc, #136]	; (8012804 <tcp_input+0x55c>)
 801277a:	781b      	ldrb	r3, [r3, #0]
 801277c:	f003 0308 	and.w	r3, r3, #8
 8012780:	2b00      	cmp	r3, #0
 8012782:	d006      	beq.n	8012792 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	7b5b      	ldrb	r3, [r3, #13]
 8012788:	f043 0301 	orr.w	r3, r3, #1
 801278c:	b2da      	uxtb	r2, r3
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012792:	69fb      	ldr	r3, [r7, #28]
 8012794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012796:	2b00      	cmp	r3, #0
 8012798:	d038      	beq.n	801280c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801279a:	69f8      	ldr	r0, [r7, #28]
 801279c:	f7ff f872 	bl	8011884 <tcp_process_refused_data>
 80127a0:	4603      	mov	r3, r0
 80127a2:	f113 0f0d 	cmn.w	r3, #13
 80127a6:	d007      	beq.n	80127b8 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80127a8:	69fb      	ldr	r3, [r7, #28]
 80127aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d02d      	beq.n	801280c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80127b0:	4b15      	ldr	r3, [pc, #84]	; (8012808 <tcp_input+0x560>)
 80127b2:	881b      	ldrh	r3, [r3, #0]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d029      	beq.n	801280c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80127b8:	69fb      	ldr	r3, [r7, #28]
 80127ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80127bc:	2b00      	cmp	r3, #0
 80127be:	f040 8104 	bne.w	80129ca <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80127c2:	69f8      	ldr	r0, [r7, #28]
 80127c4:	f003 fe28 	bl	8016418 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80127c8:	e0ff      	b.n	80129ca <tcp_input+0x722>
 80127ca:	bf00      	nop
 80127cc:	200008a4 	.word	0x200008a4
 80127d0:	20004588 	.word	0x20004588
 80127d4:	08021624 	.word	0x08021624
 80127d8:	08021750 	.word	0x08021750
 80127dc:	08021670 	.word	0x08021670
 80127e0:	20007c9c 	.word	0x20007c9c
 80127e4:	0802177c 	.word	0x0802177c
 80127e8:	20007cac 	.word	0x20007cac
 80127ec:	080217a8 	.word	0x080217a8
 80127f0:	20007ca4 	.word	0x20007ca4
 80127f4:	20000894 	.word	0x20000894
 80127f8:	200008c4 	.word	0x200008c4
 80127fc:	200008c1 	.word	0x200008c1
 8012800:	200008bc 	.word	0x200008bc
 8012804:	200008c0 	.word	0x200008c0
 8012808:	200008be 	.word	0x200008be
      }
    }
    tcp_input_pcb = pcb;
 801280c:	4a9b      	ldr	r2, [pc, #620]	; (8012a7c <tcp_input+0x7d4>)
 801280e:	69fb      	ldr	r3, [r7, #28]
 8012810:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012812:	69f8      	ldr	r0, [r7, #28]
 8012814:	f000 fb0a 	bl	8012e2c <tcp_process>
 8012818:	4603      	mov	r3, r0
 801281a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801281c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012820:	f113 0f0d 	cmn.w	r3, #13
 8012824:	f000 80d3 	beq.w	80129ce <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8012828:	4b95      	ldr	r3, [pc, #596]	; (8012a80 <tcp_input+0x7d8>)
 801282a:	781b      	ldrb	r3, [r3, #0]
 801282c:	f003 0308 	and.w	r3, r3, #8
 8012830:	2b00      	cmp	r3, #0
 8012832:	d015      	beq.n	8012860 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012834:	69fb      	ldr	r3, [r7, #28]
 8012836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801283a:	2b00      	cmp	r3, #0
 801283c:	d008      	beq.n	8012850 <tcp_input+0x5a8>
 801283e:	69fb      	ldr	r3, [r7, #28]
 8012840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012844:	69fa      	ldr	r2, [r7, #28]
 8012846:	6912      	ldr	r2, [r2, #16]
 8012848:	f06f 010d 	mvn.w	r1, #13
 801284c:	4610      	mov	r0, r2
 801284e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012850:	69f9      	ldr	r1, [r7, #28]
 8012852:	488c      	ldr	r0, [pc, #560]	; (8012a84 <tcp_input+0x7dc>)
 8012854:	f7ff fbb0 	bl	8011fb8 <tcp_pcb_remove>
        tcp_free(pcb);
 8012858:	69f8      	ldr	r0, [r7, #28]
 801285a:	f7fd ff23 	bl	80106a4 <tcp_free>
 801285e:	e0c1      	b.n	80129e4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8012860:	2300      	movs	r3, #0
 8012862:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012864:	4b88      	ldr	r3, [pc, #544]	; (8012a88 <tcp_input+0x7e0>)
 8012866:	881b      	ldrh	r3, [r3, #0]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d01d      	beq.n	80128a8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801286c:	4b86      	ldr	r3, [pc, #536]	; (8012a88 <tcp_input+0x7e0>)
 801286e:	881b      	ldrh	r3, [r3, #0]
 8012870:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012872:	69fb      	ldr	r3, [r7, #28]
 8012874:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012878:	2b00      	cmp	r3, #0
 801287a:	d00a      	beq.n	8012892 <tcp_input+0x5ea>
 801287c:	69fb      	ldr	r3, [r7, #28]
 801287e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012882:	69fa      	ldr	r2, [r7, #28]
 8012884:	6910      	ldr	r0, [r2, #16]
 8012886:	89fa      	ldrh	r2, [r7, #14]
 8012888:	69f9      	ldr	r1, [r7, #28]
 801288a:	4798      	blx	r3
 801288c:	4603      	mov	r3, r0
 801288e:	74fb      	strb	r3, [r7, #19]
 8012890:	e001      	b.n	8012896 <tcp_input+0x5ee>
 8012892:	2300      	movs	r3, #0
 8012894:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012896:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801289a:	f113 0f0d 	cmn.w	r3, #13
 801289e:	f000 8098 	beq.w	80129d2 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80128a2:	4b79      	ldr	r3, [pc, #484]	; (8012a88 <tcp_input+0x7e0>)
 80128a4:	2200      	movs	r2, #0
 80128a6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80128a8:	69f8      	ldr	r0, [r7, #28]
 80128aa:	f000 f905 	bl	8012ab8 <tcp_input_delayed_close>
 80128ae:	4603      	mov	r3, r0
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	f040 8090 	bne.w	80129d6 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80128b6:	4b75      	ldr	r3, [pc, #468]	; (8012a8c <tcp_input+0x7e4>)
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d041      	beq.n	8012942 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80128be:	69fb      	ldr	r3, [r7, #28]
 80128c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d006      	beq.n	80128d4 <tcp_input+0x62c>
 80128c6:	4b72      	ldr	r3, [pc, #456]	; (8012a90 <tcp_input+0x7e8>)
 80128c8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80128cc:	4971      	ldr	r1, [pc, #452]	; (8012a94 <tcp_input+0x7ec>)
 80128ce:	4872      	ldr	r0, [pc, #456]	; (8012a98 <tcp_input+0x7f0>)
 80128d0:	f008 fa8a 	bl	801ade8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80128d4:	69fb      	ldr	r3, [r7, #28]
 80128d6:	8b5b      	ldrh	r3, [r3, #26]
 80128d8:	f003 0310 	and.w	r3, r3, #16
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d008      	beq.n	80128f2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80128e0:	4b6a      	ldr	r3, [pc, #424]	; (8012a8c <tcp_input+0x7e4>)
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	4618      	mov	r0, r3
 80128e6:	f7fd fc21 	bl	801012c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80128ea:	69f8      	ldr	r0, [r7, #28]
 80128ec:	f7fe fa14 	bl	8010d18 <tcp_abort>
            goto aborted;
 80128f0:	e078      	b.n	80129e4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80128f2:	69fb      	ldr	r3, [r7, #28]
 80128f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d00c      	beq.n	8012916 <tcp_input+0x66e>
 80128fc:	69fb      	ldr	r3, [r7, #28]
 80128fe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012902:	69fb      	ldr	r3, [r7, #28]
 8012904:	6918      	ldr	r0, [r3, #16]
 8012906:	4b61      	ldr	r3, [pc, #388]	; (8012a8c <tcp_input+0x7e4>)
 8012908:	681a      	ldr	r2, [r3, #0]
 801290a:	2300      	movs	r3, #0
 801290c:	69f9      	ldr	r1, [r7, #28]
 801290e:	47a0      	blx	r4
 8012910:	4603      	mov	r3, r0
 8012912:	74fb      	strb	r3, [r7, #19]
 8012914:	e008      	b.n	8012928 <tcp_input+0x680>
 8012916:	4b5d      	ldr	r3, [pc, #372]	; (8012a8c <tcp_input+0x7e4>)
 8012918:	681a      	ldr	r2, [r3, #0]
 801291a:	2300      	movs	r3, #0
 801291c:	69f9      	ldr	r1, [r7, #28]
 801291e:	2000      	movs	r0, #0
 8012920:	f7ff f884 	bl	8011a2c <tcp_recv_null>
 8012924:	4603      	mov	r3, r0
 8012926:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012928:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801292c:	f113 0f0d 	cmn.w	r3, #13
 8012930:	d053      	beq.n	80129da <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012932:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d003      	beq.n	8012942 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801293a:	4b54      	ldr	r3, [pc, #336]	; (8012a8c <tcp_input+0x7e4>)
 801293c:	681a      	ldr	r2, [r3, #0]
 801293e:	69fb      	ldr	r3, [r7, #28]
 8012940:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012942:	4b4f      	ldr	r3, [pc, #316]	; (8012a80 <tcp_input+0x7d8>)
 8012944:	781b      	ldrb	r3, [r3, #0]
 8012946:	f003 0320 	and.w	r3, r3, #32
 801294a:	2b00      	cmp	r3, #0
 801294c:	d030      	beq.n	80129b0 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801294e:	69fb      	ldr	r3, [r7, #28]
 8012950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012952:	2b00      	cmp	r3, #0
 8012954:	d009      	beq.n	801296a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012956:	69fb      	ldr	r3, [r7, #28]
 8012958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801295a:	7b5a      	ldrb	r2, [r3, #13]
 801295c:	69fb      	ldr	r3, [r7, #28]
 801295e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012960:	f042 0220 	orr.w	r2, r2, #32
 8012964:	b2d2      	uxtb	r2, r2
 8012966:	735a      	strb	r2, [r3, #13]
 8012968:	e022      	b.n	80129b0 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801296a:	69fb      	ldr	r3, [r7, #28]
 801296c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801296e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012972:	d005      	beq.n	8012980 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8012974:	69fb      	ldr	r3, [r7, #28]
 8012976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012978:	3301      	adds	r3, #1
 801297a:	b29a      	uxth	r2, r3
 801297c:	69fb      	ldr	r3, [r7, #28]
 801297e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012980:	69fb      	ldr	r3, [r7, #28]
 8012982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012986:	2b00      	cmp	r3, #0
 8012988:	d00b      	beq.n	80129a2 <tcp_input+0x6fa>
 801298a:	69fb      	ldr	r3, [r7, #28]
 801298c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012990:	69fb      	ldr	r3, [r7, #28]
 8012992:	6918      	ldr	r0, [r3, #16]
 8012994:	2300      	movs	r3, #0
 8012996:	2200      	movs	r2, #0
 8012998:	69f9      	ldr	r1, [r7, #28]
 801299a:	47a0      	blx	r4
 801299c:	4603      	mov	r3, r0
 801299e:	74fb      	strb	r3, [r7, #19]
 80129a0:	e001      	b.n	80129a6 <tcp_input+0x6fe>
 80129a2:	2300      	movs	r3, #0
 80129a4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80129a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80129aa:	f113 0f0d 	cmn.w	r3, #13
 80129ae:	d016      	beq.n	80129de <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80129b0:	4b32      	ldr	r3, [pc, #200]	; (8012a7c <tcp_input+0x7d4>)
 80129b2:	2200      	movs	r2, #0
 80129b4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80129b6:	69f8      	ldr	r0, [r7, #28]
 80129b8:	f000 f87e 	bl	8012ab8 <tcp_input_delayed_close>
 80129bc:	4603      	mov	r3, r0
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d10f      	bne.n	80129e2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80129c2:	69f8      	ldr	r0, [r7, #28]
 80129c4:	f002 ff10 	bl	80157e8 <tcp_output>
 80129c8:	e00c      	b.n	80129e4 <tcp_input+0x73c>
        goto aborted;
 80129ca:	bf00      	nop
 80129cc:	e00a      	b.n	80129e4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80129ce:	bf00      	nop
 80129d0:	e008      	b.n	80129e4 <tcp_input+0x73c>
              goto aborted;
 80129d2:	bf00      	nop
 80129d4:	e006      	b.n	80129e4 <tcp_input+0x73c>
          goto aborted;
 80129d6:	bf00      	nop
 80129d8:	e004      	b.n	80129e4 <tcp_input+0x73c>
            goto aborted;
 80129da:	bf00      	nop
 80129dc:	e002      	b.n	80129e4 <tcp_input+0x73c>
              goto aborted;
 80129de:	bf00      	nop
 80129e0:	e000      	b.n	80129e4 <tcp_input+0x73c>
          goto aborted;
 80129e2:	bf00      	nop
    tcp_input_pcb = NULL;
 80129e4:	4b25      	ldr	r3, [pc, #148]	; (8012a7c <tcp_input+0x7d4>)
 80129e6:	2200      	movs	r2, #0
 80129e8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80129ea:	4b28      	ldr	r3, [pc, #160]	; (8012a8c <tcp_input+0x7e4>)
 80129ec:	2200      	movs	r2, #0
 80129ee:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80129f0:	4b2a      	ldr	r3, [pc, #168]	; (8012a9c <tcp_input+0x7f4>)
 80129f2:	685b      	ldr	r3, [r3, #4]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d03d      	beq.n	8012a74 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 80129f8:	4b28      	ldr	r3, [pc, #160]	; (8012a9c <tcp_input+0x7f4>)
 80129fa:	685b      	ldr	r3, [r3, #4]
 80129fc:	4618      	mov	r0, r3
 80129fe:	f7fd fb95 	bl	801012c <pbuf_free>
      inseg.p = NULL;
 8012a02:	4b26      	ldr	r3, [pc, #152]	; (8012a9c <tcp_input+0x7f4>)
 8012a04:	2200      	movs	r2, #0
 8012a06:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012a08:	e034      	b.n	8012a74 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012a0a:	4b25      	ldr	r3, [pc, #148]	; (8012aa0 <tcp_input+0x7f8>)
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	899b      	ldrh	r3, [r3, #12]
 8012a10:	b29b      	uxth	r3, r3
 8012a12:	4618      	mov	r0, r3
 8012a14:	f7fc f85a 	bl	800eacc <lwip_htons>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	b2db      	uxtb	r3, r3
 8012a1c:	f003 0304 	and.w	r3, r3, #4
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d118      	bne.n	8012a56 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012a24:	4b1f      	ldr	r3, [pc, #124]	; (8012aa4 <tcp_input+0x7fc>)
 8012a26:	6819      	ldr	r1, [r3, #0]
 8012a28:	4b1f      	ldr	r3, [pc, #124]	; (8012aa8 <tcp_input+0x800>)
 8012a2a:	881b      	ldrh	r3, [r3, #0]
 8012a2c:	461a      	mov	r2, r3
 8012a2e:	4b1f      	ldr	r3, [pc, #124]	; (8012aac <tcp_input+0x804>)
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012a34:	4b1a      	ldr	r3, [pc, #104]	; (8012aa0 <tcp_input+0x7f8>)
 8012a36:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012a38:	885b      	ldrh	r3, [r3, #2]
 8012a3a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012a3c:	4a18      	ldr	r2, [pc, #96]	; (8012aa0 <tcp_input+0x7f8>)
 8012a3e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012a40:	8812      	ldrh	r2, [r2, #0]
 8012a42:	b292      	uxth	r2, r2
 8012a44:	9202      	str	r2, [sp, #8]
 8012a46:	9301      	str	r3, [sp, #4]
 8012a48:	4b19      	ldr	r3, [pc, #100]	; (8012ab0 <tcp_input+0x808>)
 8012a4a:	9300      	str	r3, [sp, #0]
 8012a4c:	4b19      	ldr	r3, [pc, #100]	; (8012ab4 <tcp_input+0x80c>)
 8012a4e:	4602      	mov	r2, r0
 8012a50:	2000      	movs	r0, #0
 8012a52:	f003 fc8f 	bl	8016374 <tcp_rst>
    pbuf_free(p);
 8012a56:	6878      	ldr	r0, [r7, #4]
 8012a58:	f7fd fb68 	bl	801012c <pbuf_free>
  return;
 8012a5c:	e00a      	b.n	8012a74 <tcp_input+0x7cc>
    goto dropped;
 8012a5e:	bf00      	nop
 8012a60:	e004      	b.n	8012a6c <tcp_input+0x7c4>
dropped:
 8012a62:	bf00      	nop
 8012a64:	e002      	b.n	8012a6c <tcp_input+0x7c4>
      goto dropped;
 8012a66:	bf00      	nop
 8012a68:	e000      	b.n	8012a6c <tcp_input+0x7c4>
      goto dropped;
 8012a6a:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012a6c:	6878      	ldr	r0, [r7, #4]
 8012a6e:	f7fd fb5d 	bl	801012c <pbuf_free>
 8012a72:	e000      	b.n	8012a76 <tcp_input+0x7ce>
  return;
 8012a74:	bf00      	nop
}
 8012a76:	3724      	adds	r7, #36	; 0x24
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	bd90      	pop	{r4, r7, pc}
 8012a7c:	20007cb0 	.word	0x20007cb0
 8012a80:	200008c1 	.word	0x200008c1
 8012a84:	20007c9c 	.word	0x20007c9c
 8012a88:	200008bc 	.word	0x200008bc
 8012a8c:	200008c4 	.word	0x200008c4
 8012a90:	08021624 	.word	0x08021624
 8012a94:	080217d8 	.word	0x080217d8
 8012a98:	08021670 	.word	0x08021670
 8012a9c:	20000894 	.word	0x20000894
 8012aa0:	200008a4 	.word	0x200008a4
 8012aa4:	200008b8 	.word	0x200008b8
 8012aa8:	200008be 	.word	0x200008be
 8012aac:	200008b4 	.word	0x200008b4
 8012ab0:	20004598 	.word	0x20004598
 8012ab4:	2000459c 	.word	0x2000459c

08012ab8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b082      	sub	sp, #8
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d106      	bne.n	8012ad4 <tcp_input_delayed_close+0x1c>
 8012ac6:	4b17      	ldr	r3, [pc, #92]	; (8012b24 <tcp_input_delayed_close+0x6c>)
 8012ac8:	f240 225a 	movw	r2, #602	; 0x25a
 8012acc:	4916      	ldr	r1, [pc, #88]	; (8012b28 <tcp_input_delayed_close+0x70>)
 8012ace:	4817      	ldr	r0, [pc, #92]	; (8012b2c <tcp_input_delayed_close+0x74>)
 8012ad0:	f008 f98a 	bl	801ade8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012ad4:	4b16      	ldr	r3, [pc, #88]	; (8012b30 <tcp_input_delayed_close+0x78>)
 8012ad6:	781b      	ldrb	r3, [r3, #0]
 8012ad8:	f003 0310 	and.w	r3, r3, #16
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d01c      	beq.n	8012b1a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	8b5b      	ldrh	r3, [r3, #26]
 8012ae4:	f003 0310 	and.w	r3, r3, #16
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d10d      	bne.n	8012b08 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d008      	beq.n	8012b08 <tcp_input_delayed_close+0x50>
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012afc:	687a      	ldr	r2, [r7, #4]
 8012afe:	6912      	ldr	r2, [r2, #16]
 8012b00:	f06f 010e 	mvn.w	r1, #14
 8012b04:	4610      	mov	r0, r2
 8012b06:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012b08:	6879      	ldr	r1, [r7, #4]
 8012b0a:	480a      	ldr	r0, [pc, #40]	; (8012b34 <tcp_input_delayed_close+0x7c>)
 8012b0c:	f7ff fa54 	bl	8011fb8 <tcp_pcb_remove>
    tcp_free(pcb);
 8012b10:	6878      	ldr	r0, [r7, #4]
 8012b12:	f7fd fdc7 	bl	80106a4 <tcp_free>
    return 1;
 8012b16:	2301      	movs	r3, #1
 8012b18:	e000      	b.n	8012b1c <tcp_input_delayed_close+0x64>
  }
  return 0;
 8012b1a:	2300      	movs	r3, #0
}
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	3708      	adds	r7, #8
 8012b20:	46bd      	mov	sp, r7
 8012b22:	bd80      	pop	{r7, pc}
 8012b24:	08021624 	.word	0x08021624
 8012b28:	080217f4 	.word	0x080217f4
 8012b2c:	08021670 	.word	0x08021670
 8012b30:	200008c1 	.word	0x200008c1
 8012b34:	20007c9c 	.word	0x20007c9c

08012b38 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012b38:	b590      	push	{r4, r7, lr}
 8012b3a:	b08b      	sub	sp, #44	; 0x2c
 8012b3c:	af04      	add	r7, sp, #16
 8012b3e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012b40:	4b6f      	ldr	r3, [pc, #444]	; (8012d00 <tcp_listen_input+0x1c8>)
 8012b42:	781b      	ldrb	r3, [r3, #0]
 8012b44:	f003 0304 	and.w	r3, r3, #4
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	f040 80d3 	bne.w	8012cf4 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d106      	bne.n	8012b62 <tcp_listen_input+0x2a>
 8012b54:	4b6b      	ldr	r3, [pc, #428]	; (8012d04 <tcp_listen_input+0x1cc>)
 8012b56:	f240 2281 	movw	r2, #641	; 0x281
 8012b5a:	496b      	ldr	r1, [pc, #428]	; (8012d08 <tcp_listen_input+0x1d0>)
 8012b5c:	486b      	ldr	r0, [pc, #428]	; (8012d0c <tcp_listen_input+0x1d4>)
 8012b5e:	f008 f943 	bl	801ade8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012b62:	4b67      	ldr	r3, [pc, #412]	; (8012d00 <tcp_listen_input+0x1c8>)
 8012b64:	781b      	ldrb	r3, [r3, #0]
 8012b66:	f003 0310 	and.w	r3, r3, #16
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d019      	beq.n	8012ba2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b6e:	4b68      	ldr	r3, [pc, #416]	; (8012d10 <tcp_listen_input+0x1d8>)
 8012b70:	6819      	ldr	r1, [r3, #0]
 8012b72:	4b68      	ldr	r3, [pc, #416]	; (8012d14 <tcp_listen_input+0x1dc>)
 8012b74:	881b      	ldrh	r3, [r3, #0]
 8012b76:	461a      	mov	r2, r3
 8012b78:	4b67      	ldr	r3, [pc, #412]	; (8012d18 <tcp_listen_input+0x1e0>)
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012b7e:	4b67      	ldr	r3, [pc, #412]	; (8012d1c <tcp_listen_input+0x1e4>)
 8012b80:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b82:	885b      	ldrh	r3, [r3, #2]
 8012b84:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012b86:	4a65      	ldr	r2, [pc, #404]	; (8012d1c <tcp_listen_input+0x1e4>)
 8012b88:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b8a:	8812      	ldrh	r2, [r2, #0]
 8012b8c:	b292      	uxth	r2, r2
 8012b8e:	9202      	str	r2, [sp, #8]
 8012b90:	9301      	str	r3, [sp, #4]
 8012b92:	4b63      	ldr	r3, [pc, #396]	; (8012d20 <tcp_listen_input+0x1e8>)
 8012b94:	9300      	str	r3, [sp, #0]
 8012b96:	4b63      	ldr	r3, [pc, #396]	; (8012d24 <tcp_listen_input+0x1ec>)
 8012b98:	4602      	mov	r2, r0
 8012b9a:	6878      	ldr	r0, [r7, #4]
 8012b9c:	f003 fbea 	bl	8016374 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012ba0:	e0aa      	b.n	8012cf8 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8012ba2:	4b57      	ldr	r3, [pc, #348]	; (8012d00 <tcp_listen_input+0x1c8>)
 8012ba4:	781b      	ldrb	r3, [r3, #0]
 8012ba6:	f003 0302 	and.w	r3, r3, #2
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	f000 80a4 	beq.w	8012cf8 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	7d5b      	ldrb	r3, [r3, #21]
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	f7ff f85d 	bl	8011c74 <tcp_alloc>
 8012bba:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012bbc:	697b      	ldr	r3, [r7, #20]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d111      	bne.n	8012be6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	699b      	ldr	r3, [r3, #24]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d00a      	beq.n	8012be0 <tcp_listen_input+0xa8>
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	699b      	ldr	r3, [r3, #24]
 8012bce:	687a      	ldr	r2, [r7, #4]
 8012bd0:	6910      	ldr	r0, [r2, #16]
 8012bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8012bd6:	2100      	movs	r1, #0
 8012bd8:	4798      	blx	r3
 8012bda:	4603      	mov	r3, r0
 8012bdc:	73bb      	strb	r3, [r7, #14]
      return;
 8012bde:	e08c      	b.n	8012cfa <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012be0:	23f0      	movs	r3, #240	; 0xf0
 8012be2:	73bb      	strb	r3, [r7, #14]
      return;
 8012be4:	e089      	b.n	8012cfa <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012be6:	4b50      	ldr	r3, [pc, #320]	; (8012d28 <tcp_listen_input+0x1f0>)
 8012be8:	695a      	ldr	r2, [r3, #20]
 8012bea:	697b      	ldr	r3, [r7, #20]
 8012bec:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012bee:	4b4e      	ldr	r3, [pc, #312]	; (8012d28 <tcp_listen_input+0x1f0>)
 8012bf0:	691a      	ldr	r2, [r3, #16]
 8012bf2:	697b      	ldr	r3, [r7, #20]
 8012bf4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	8ada      	ldrh	r2, [r3, #22]
 8012bfa:	697b      	ldr	r3, [r7, #20]
 8012bfc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8012bfe:	4b47      	ldr	r3, [pc, #284]	; (8012d1c <tcp_listen_input+0x1e4>)
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	881b      	ldrh	r3, [r3, #0]
 8012c04:	b29a      	uxth	r2, r3
 8012c06:	697b      	ldr	r3, [r7, #20]
 8012c08:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012c0a:	697b      	ldr	r3, [r7, #20]
 8012c0c:	2203      	movs	r2, #3
 8012c0e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012c10:	4b41      	ldr	r3, [pc, #260]	; (8012d18 <tcp_listen_input+0x1e0>)
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	1c5a      	adds	r2, r3, #1
 8012c16:	697b      	ldr	r3, [r7, #20]
 8012c18:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012c1a:	697b      	ldr	r3, [r7, #20]
 8012c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8012c22:	6978      	ldr	r0, [r7, #20]
 8012c24:	f7ff fa5c 	bl	80120e0 <tcp_next_iss>
 8012c28:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8012c2a:	697b      	ldr	r3, [r7, #20]
 8012c2c:	693a      	ldr	r2, [r7, #16]
 8012c2e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8012c30:	697b      	ldr	r3, [r7, #20]
 8012c32:	693a      	ldr	r2, [r7, #16]
 8012c34:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8012c36:	697b      	ldr	r3, [r7, #20]
 8012c38:	693a      	ldr	r2, [r7, #16]
 8012c3a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8012c3c:	697b      	ldr	r3, [r7, #20]
 8012c3e:	693a      	ldr	r2, [r7, #16]
 8012c40:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012c42:	4b35      	ldr	r3, [pc, #212]	; (8012d18 <tcp_listen_input+0x1e0>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	1e5a      	subs	r2, r3, #1
 8012c48:	697b      	ldr	r3, [r7, #20]
 8012c4a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	691a      	ldr	r2, [r3, #16]
 8012c50:	697b      	ldr	r3, [r7, #20]
 8012c52:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012c54:	697b      	ldr	r3, [r7, #20]
 8012c56:	687a      	ldr	r2, [r7, #4]
 8012c58:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	7a5b      	ldrb	r3, [r3, #9]
 8012c5e:	f003 030c 	and.w	r3, r3, #12
 8012c62:	b2da      	uxtb	r2, r3
 8012c64:	697b      	ldr	r3, [r7, #20]
 8012c66:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	7a1a      	ldrb	r2, [r3, #8]
 8012c6c:	697b      	ldr	r3, [r7, #20]
 8012c6e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012c70:	4b2e      	ldr	r3, [pc, #184]	; (8012d2c <tcp_listen_input+0x1f4>)
 8012c72:	681a      	ldr	r2, [r3, #0]
 8012c74:	697b      	ldr	r3, [r7, #20]
 8012c76:	60da      	str	r2, [r3, #12]
 8012c78:	4a2c      	ldr	r2, [pc, #176]	; (8012d2c <tcp_listen_input+0x1f4>)
 8012c7a:	697b      	ldr	r3, [r7, #20]
 8012c7c:	6013      	str	r3, [r2, #0]
 8012c7e:	f003 fd3b 	bl	80166f8 <tcp_timer_needed>
 8012c82:	4b2b      	ldr	r3, [pc, #172]	; (8012d30 <tcp_listen_input+0x1f8>)
 8012c84:	2201      	movs	r2, #1
 8012c86:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012c88:	6978      	ldr	r0, [r7, #20]
 8012c8a:	f001 fd8f 	bl	80147ac <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8012c8e:	4b23      	ldr	r3, [pc, #140]	; (8012d1c <tcp_listen_input+0x1e4>)
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	89db      	ldrh	r3, [r3, #14]
 8012c94:	b29a      	uxth	r2, r3
 8012c96:	697b      	ldr	r3, [r7, #20]
 8012c98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012c9c:	697b      	ldr	r3, [r7, #20]
 8012c9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012ca2:	697b      	ldr	r3, [r7, #20]
 8012ca4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012ca8:	697b      	ldr	r3, [r7, #20]
 8012caa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012cac:	697b      	ldr	r3, [r7, #20]
 8012cae:	3304      	adds	r3, #4
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f005 fccb 	bl	801864c <ip4_route>
 8012cb6:	4601      	mov	r1, r0
 8012cb8:	697b      	ldr	r3, [r7, #20]
 8012cba:	3304      	adds	r3, #4
 8012cbc:	461a      	mov	r2, r3
 8012cbe:	4620      	mov	r0, r4
 8012cc0:	f7ff fa34 	bl	801212c <tcp_eff_send_mss_netif>
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	461a      	mov	r2, r3
 8012cc8:	697b      	ldr	r3, [r7, #20]
 8012cca:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012ccc:	2112      	movs	r1, #18
 8012cce:	6978      	ldr	r0, [r7, #20]
 8012cd0:	f002 fc9c 	bl	801560c <tcp_enqueue_flags>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d004      	beq.n	8012cea <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8012ce0:	2100      	movs	r1, #0
 8012ce2:	6978      	ldr	r0, [r7, #20]
 8012ce4:	f7fd ff5a 	bl	8010b9c <tcp_abandon>
      return;
 8012ce8:	e007      	b.n	8012cfa <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8012cea:	6978      	ldr	r0, [r7, #20]
 8012cec:	f002 fd7c 	bl	80157e8 <tcp_output>
  return;
 8012cf0:	bf00      	nop
 8012cf2:	e001      	b.n	8012cf8 <tcp_listen_input+0x1c0>
    return;
 8012cf4:	bf00      	nop
 8012cf6:	e000      	b.n	8012cfa <tcp_listen_input+0x1c2>
  return;
 8012cf8:	bf00      	nop
}
 8012cfa:	371c      	adds	r7, #28
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	bd90      	pop	{r4, r7, pc}
 8012d00:	200008c0 	.word	0x200008c0
 8012d04:	08021624 	.word	0x08021624
 8012d08:	0802181c 	.word	0x0802181c
 8012d0c:	08021670 	.word	0x08021670
 8012d10:	200008b8 	.word	0x200008b8
 8012d14:	200008be 	.word	0x200008be
 8012d18:	200008b4 	.word	0x200008b4
 8012d1c:	200008a4 	.word	0x200008a4
 8012d20:	20004598 	.word	0x20004598
 8012d24:	2000459c 	.word	0x2000459c
 8012d28:	20004588 	.word	0x20004588
 8012d2c:	20007c9c 	.word	0x20007c9c
 8012d30:	20007c98 	.word	0x20007c98

08012d34 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b086      	sub	sp, #24
 8012d38:	af04      	add	r7, sp, #16
 8012d3a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012d3c:	4b30      	ldr	r3, [pc, #192]	; (8012e00 <tcp_timewait_input+0xcc>)
 8012d3e:	781b      	ldrb	r3, [r3, #0]
 8012d40:	f003 0304 	and.w	r3, r3, #4
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d154      	bne.n	8012df2 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d106      	bne.n	8012d5c <tcp_timewait_input+0x28>
 8012d4e:	4b2d      	ldr	r3, [pc, #180]	; (8012e04 <tcp_timewait_input+0xd0>)
 8012d50:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012d54:	492c      	ldr	r1, [pc, #176]	; (8012e08 <tcp_timewait_input+0xd4>)
 8012d56:	482d      	ldr	r0, [pc, #180]	; (8012e0c <tcp_timewait_input+0xd8>)
 8012d58:	f008 f846 	bl	801ade8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012d5c:	4b28      	ldr	r3, [pc, #160]	; (8012e00 <tcp_timewait_input+0xcc>)
 8012d5e:	781b      	ldrb	r3, [r3, #0]
 8012d60:	f003 0302 	and.w	r3, r3, #2
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d02a      	beq.n	8012dbe <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012d68:	4b29      	ldr	r3, [pc, #164]	; (8012e10 <tcp_timewait_input+0xdc>)
 8012d6a:	681a      	ldr	r2, [r3, #0]
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d70:	1ad3      	subs	r3, r2, r3
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	db2d      	blt.n	8012dd2 <tcp_timewait_input+0x9e>
 8012d76:	4b26      	ldr	r3, [pc, #152]	; (8012e10 <tcp_timewait_input+0xdc>)
 8012d78:	681a      	ldr	r2, [r3, #0]
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d7e:	6879      	ldr	r1, [r7, #4]
 8012d80:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012d82:	440b      	add	r3, r1
 8012d84:	1ad3      	subs	r3, r2, r3
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	dc23      	bgt.n	8012dd2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d8a:	4b22      	ldr	r3, [pc, #136]	; (8012e14 <tcp_timewait_input+0xe0>)
 8012d8c:	6819      	ldr	r1, [r3, #0]
 8012d8e:	4b22      	ldr	r3, [pc, #136]	; (8012e18 <tcp_timewait_input+0xe4>)
 8012d90:	881b      	ldrh	r3, [r3, #0]
 8012d92:	461a      	mov	r2, r3
 8012d94:	4b1e      	ldr	r3, [pc, #120]	; (8012e10 <tcp_timewait_input+0xdc>)
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d9a:	4b20      	ldr	r3, [pc, #128]	; (8012e1c <tcp_timewait_input+0xe8>)
 8012d9c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d9e:	885b      	ldrh	r3, [r3, #2]
 8012da0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012da2:	4a1e      	ldr	r2, [pc, #120]	; (8012e1c <tcp_timewait_input+0xe8>)
 8012da4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012da6:	8812      	ldrh	r2, [r2, #0]
 8012da8:	b292      	uxth	r2, r2
 8012daa:	9202      	str	r2, [sp, #8]
 8012dac:	9301      	str	r3, [sp, #4]
 8012dae:	4b1c      	ldr	r3, [pc, #112]	; (8012e20 <tcp_timewait_input+0xec>)
 8012db0:	9300      	str	r3, [sp, #0]
 8012db2:	4b1c      	ldr	r3, [pc, #112]	; (8012e24 <tcp_timewait_input+0xf0>)
 8012db4:	4602      	mov	r2, r0
 8012db6:	6878      	ldr	r0, [r7, #4]
 8012db8:	f003 fadc 	bl	8016374 <tcp_rst>
      return;
 8012dbc:	e01c      	b.n	8012df8 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8012dbe:	4b10      	ldr	r3, [pc, #64]	; (8012e00 <tcp_timewait_input+0xcc>)
 8012dc0:	781b      	ldrb	r3, [r3, #0]
 8012dc2:	f003 0301 	and.w	r3, r3, #1
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d003      	beq.n	8012dd2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012dca:	4b17      	ldr	r3, [pc, #92]	; (8012e28 <tcp_timewait_input+0xf4>)
 8012dcc:	681a      	ldr	r2, [r3, #0]
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012dd2:	4b11      	ldr	r3, [pc, #68]	; (8012e18 <tcp_timewait_input+0xe4>)
 8012dd4:	881b      	ldrh	r3, [r3, #0]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d00d      	beq.n	8012df6 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	8b5b      	ldrh	r3, [r3, #26]
 8012dde:	f043 0302 	orr.w	r3, r3, #2
 8012de2:	b29a      	uxth	r2, r3
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012de8:	6878      	ldr	r0, [r7, #4]
 8012dea:	f002 fcfd 	bl	80157e8 <tcp_output>
  }
  return;
 8012dee:	bf00      	nop
 8012df0:	e001      	b.n	8012df6 <tcp_timewait_input+0xc2>
    return;
 8012df2:	bf00      	nop
 8012df4:	e000      	b.n	8012df8 <tcp_timewait_input+0xc4>
  return;
 8012df6:	bf00      	nop
}
 8012df8:	3708      	adds	r7, #8
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd80      	pop	{r7, pc}
 8012dfe:	bf00      	nop
 8012e00:	200008c0 	.word	0x200008c0
 8012e04:	08021624 	.word	0x08021624
 8012e08:	0802183c 	.word	0x0802183c
 8012e0c:	08021670 	.word	0x08021670
 8012e10:	200008b4 	.word	0x200008b4
 8012e14:	200008b8 	.word	0x200008b8
 8012e18:	200008be 	.word	0x200008be
 8012e1c:	200008a4 	.word	0x200008a4
 8012e20:	20004598 	.word	0x20004598
 8012e24:	2000459c 	.word	0x2000459c
 8012e28:	20007ca0 	.word	0x20007ca0

08012e2c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012e2c:	b590      	push	{r4, r7, lr}
 8012e2e:	b08d      	sub	sp, #52	; 0x34
 8012e30:	af04      	add	r7, sp, #16
 8012e32:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012e34:	2300      	movs	r3, #0
 8012e36:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012e38:	2300      	movs	r3, #0
 8012e3a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d106      	bne.n	8012e50 <tcp_process+0x24>
 8012e42:	4ba5      	ldr	r3, [pc, #660]	; (80130d8 <tcp_process+0x2ac>)
 8012e44:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8012e48:	49a4      	ldr	r1, [pc, #656]	; (80130dc <tcp_process+0x2b0>)
 8012e4a:	48a5      	ldr	r0, [pc, #660]	; (80130e0 <tcp_process+0x2b4>)
 8012e4c:	f007 ffcc 	bl	801ade8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012e50:	4ba4      	ldr	r3, [pc, #656]	; (80130e4 <tcp_process+0x2b8>)
 8012e52:	781b      	ldrb	r3, [r3, #0]
 8012e54:	f003 0304 	and.w	r3, r3, #4
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d04e      	beq.n	8012efa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	7d1b      	ldrb	r3, [r3, #20]
 8012e60:	2b02      	cmp	r3, #2
 8012e62:	d108      	bne.n	8012e76 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012e68:	4b9f      	ldr	r3, [pc, #636]	; (80130e8 <tcp_process+0x2bc>)
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	429a      	cmp	r2, r3
 8012e6e:	d123      	bne.n	8012eb8 <tcp_process+0x8c>
        acceptable = 1;
 8012e70:	2301      	movs	r3, #1
 8012e72:	76fb      	strb	r3, [r7, #27]
 8012e74:	e020      	b.n	8012eb8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012e7a:	4b9c      	ldr	r3, [pc, #624]	; (80130ec <tcp_process+0x2c0>)
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	429a      	cmp	r2, r3
 8012e80:	d102      	bne.n	8012e88 <tcp_process+0x5c>
        acceptable = 1;
 8012e82:	2301      	movs	r3, #1
 8012e84:	76fb      	strb	r3, [r7, #27]
 8012e86:	e017      	b.n	8012eb8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012e88:	4b98      	ldr	r3, [pc, #608]	; (80130ec <tcp_process+0x2c0>)
 8012e8a:	681a      	ldr	r2, [r3, #0]
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e90:	1ad3      	subs	r3, r2, r3
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	db10      	blt.n	8012eb8 <tcp_process+0x8c>
 8012e96:	4b95      	ldr	r3, [pc, #596]	; (80130ec <tcp_process+0x2c0>)
 8012e98:	681a      	ldr	r2, [r3, #0]
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e9e:	6879      	ldr	r1, [r7, #4]
 8012ea0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012ea2:	440b      	add	r3, r1
 8012ea4:	1ad3      	subs	r3, r2, r3
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	dc06      	bgt.n	8012eb8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	8b5b      	ldrh	r3, [r3, #26]
 8012eae:	f043 0302 	orr.w	r3, r3, #2
 8012eb2:	b29a      	uxth	r2, r3
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012eb8:	7efb      	ldrb	r3, [r7, #27]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d01b      	beq.n	8012ef6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	7d1b      	ldrb	r3, [r3, #20]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d106      	bne.n	8012ed4 <tcp_process+0xa8>
 8012ec6:	4b84      	ldr	r3, [pc, #528]	; (80130d8 <tcp_process+0x2ac>)
 8012ec8:	f44f 724e 	mov.w	r2, #824	; 0x338
 8012ecc:	4988      	ldr	r1, [pc, #544]	; (80130f0 <tcp_process+0x2c4>)
 8012ece:	4884      	ldr	r0, [pc, #528]	; (80130e0 <tcp_process+0x2b4>)
 8012ed0:	f007 ff8a 	bl	801ade8 <iprintf>
      recv_flags |= TF_RESET;
 8012ed4:	4b87      	ldr	r3, [pc, #540]	; (80130f4 <tcp_process+0x2c8>)
 8012ed6:	781b      	ldrb	r3, [r3, #0]
 8012ed8:	f043 0308 	orr.w	r3, r3, #8
 8012edc:	b2da      	uxtb	r2, r3
 8012ede:	4b85      	ldr	r3, [pc, #532]	; (80130f4 <tcp_process+0x2c8>)
 8012ee0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	8b5b      	ldrh	r3, [r3, #26]
 8012ee6:	f023 0301 	bic.w	r3, r3, #1
 8012eea:	b29a      	uxth	r2, r3
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8012ef0:	f06f 030d 	mvn.w	r3, #13
 8012ef4:	e37a      	b.n	80135ec <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	e378      	b.n	80135ec <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012efa:	4b7a      	ldr	r3, [pc, #488]	; (80130e4 <tcp_process+0x2b8>)
 8012efc:	781b      	ldrb	r3, [r3, #0]
 8012efe:	f003 0302 	and.w	r3, r3, #2
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d010      	beq.n	8012f28 <tcp_process+0xfc>
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	7d1b      	ldrb	r3, [r3, #20]
 8012f0a:	2b02      	cmp	r3, #2
 8012f0c:	d00c      	beq.n	8012f28 <tcp_process+0xfc>
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	7d1b      	ldrb	r3, [r3, #20]
 8012f12:	2b03      	cmp	r3, #3
 8012f14:	d008      	beq.n	8012f28 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	8b5b      	ldrh	r3, [r3, #26]
 8012f1a:	f043 0302 	orr.w	r3, r3, #2
 8012f1e:	b29a      	uxth	r2, r3
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012f24:	2300      	movs	r3, #0
 8012f26:	e361      	b.n	80135ec <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	8b5b      	ldrh	r3, [r3, #26]
 8012f2c:	f003 0310 	and.w	r3, r3, #16
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d103      	bne.n	8012f3c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012f34:	4b70      	ldr	r3, [pc, #448]	; (80130f8 <tcp_process+0x2cc>)
 8012f36:	681a      	ldr	r2, [r3, #0]
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	2200      	movs	r2, #0
 8012f40:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	2200      	movs	r2, #0
 8012f48:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8012f4c:	6878      	ldr	r0, [r7, #4]
 8012f4e:	f001 fc2d 	bl	80147ac <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	7d1b      	ldrb	r3, [r3, #20]
 8012f56:	3b02      	subs	r3, #2
 8012f58:	2b07      	cmp	r3, #7
 8012f5a:	f200 8337 	bhi.w	80135cc <tcp_process+0x7a0>
 8012f5e:	a201      	add	r2, pc, #4	; (adr r2, 8012f64 <tcp_process+0x138>)
 8012f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f64:	08012f85 	.word	0x08012f85
 8012f68:	080131b5 	.word	0x080131b5
 8012f6c:	0801332d 	.word	0x0801332d
 8012f70:	08013357 	.word	0x08013357
 8012f74:	0801347b 	.word	0x0801347b
 8012f78:	0801332d 	.word	0x0801332d
 8012f7c:	08013507 	.word	0x08013507
 8012f80:	08013597 	.word	0x08013597
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012f84:	4b57      	ldr	r3, [pc, #348]	; (80130e4 <tcp_process+0x2b8>)
 8012f86:	781b      	ldrb	r3, [r3, #0]
 8012f88:	f003 0310 	and.w	r3, r3, #16
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	f000 80e4 	beq.w	801315a <tcp_process+0x32e>
 8012f92:	4b54      	ldr	r3, [pc, #336]	; (80130e4 <tcp_process+0x2b8>)
 8012f94:	781b      	ldrb	r3, [r3, #0]
 8012f96:	f003 0302 	and.w	r3, r3, #2
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	f000 80dd 	beq.w	801315a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012fa4:	1c5a      	adds	r2, r3, #1
 8012fa6:	4b50      	ldr	r3, [pc, #320]	; (80130e8 <tcp_process+0x2bc>)
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	429a      	cmp	r2, r3
 8012fac:	f040 80d5 	bne.w	801315a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012fb0:	4b4e      	ldr	r3, [pc, #312]	; (80130ec <tcp_process+0x2c0>)
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	1c5a      	adds	r2, r3, #1
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8012fc2:	4b49      	ldr	r3, [pc, #292]	; (80130e8 <tcp_process+0x2bc>)
 8012fc4:	681a      	ldr	r2, [r3, #0]
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8012fca:	4b4c      	ldr	r3, [pc, #304]	; (80130fc <tcp_process+0x2d0>)
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	89db      	ldrh	r3, [r3, #14]
 8012fd0:	b29a      	uxth	r2, r3
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012fe4:	4b41      	ldr	r3, [pc, #260]	; (80130ec <tcp_process+0x2c0>)
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	1e5a      	subs	r2, r3, #1
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	2204      	movs	r2, #4
 8012ff2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	3304      	adds	r3, #4
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f005 fb25 	bl	801864c <ip4_route>
 8013002:	4601      	mov	r1, r0
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	3304      	adds	r3, #4
 8013008:	461a      	mov	r2, r3
 801300a:	4620      	mov	r0, r4
 801300c:	f7ff f88e 	bl	801212c <tcp_eff_send_mss_netif>
 8013010:	4603      	mov	r3, r0
 8013012:	461a      	mov	r2, r3
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801301c:	009a      	lsls	r2, r3, #2
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013022:	005b      	lsls	r3, r3, #1
 8013024:	f241 111c 	movw	r1, #4380	; 0x111c
 8013028:	428b      	cmp	r3, r1
 801302a:	bf38      	it	cc
 801302c:	460b      	movcc	r3, r1
 801302e:	429a      	cmp	r2, r3
 8013030:	d204      	bcs.n	801303c <tcp_process+0x210>
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013036:	009b      	lsls	r3, r3, #2
 8013038:	b29b      	uxth	r3, r3
 801303a:	e00d      	b.n	8013058 <tcp_process+0x22c>
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013040:	005b      	lsls	r3, r3, #1
 8013042:	f241 121c 	movw	r2, #4380	; 0x111c
 8013046:	4293      	cmp	r3, r2
 8013048:	d904      	bls.n	8013054 <tcp_process+0x228>
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801304e:	005b      	lsls	r3, r3, #1
 8013050:	b29b      	uxth	r3, r3
 8013052:	e001      	b.n	8013058 <tcp_process+0x22c>
 8013054:	f241 131c 	movw	r3, #4380	; 0x111c
 8013058:	687a      	ldr	r2, [r7, #4]
 801305a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013064:	2b00      	cmp	r3, #0
 8013066:	d106      	bne.n	8013076 <tcp_process+0x24a>
 8013068:	4b1b      	ldr	r3, [pc, #108]	; (80130d8 <tcp_process+0x2ac>)
 801306a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801306e:	4924      	ldr	r1, [pc, #144]	; (8013100 <tcp_process+0x2d4>)
 8013070:	481b      	ldr	r0, [pc, #108]	; (80130e0 <tcp_process+0x2b4>)
 8013072:	f007 feb9 	bl	801ade8 <iprintf>
        --pcb->snd_queuelen;
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801307c:	3b01      	subs	r3, #1
 801307e:	b29a      	uxth	r2, r3
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801308a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801308c:	69fb      	ldr	r3, [r7, #28]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d111      	bne.n	80130b6 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013096:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8013098:	69fb      	ldr	r3, [r7, #28]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d106      	bne.n	80130ac <tcp_process+0x280>
 801309e:	4b0e      	ldr	r3, [pc, #56]	; (80130d8 <tcp_process+0x2ac>)
 80130a0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80130a4:	4917      	ldr	r1, [pc, #92]	; (8013104 <tcp_process+0x2d8>)
 80130a6:	480e      	ldr	r0, [pc, #56]	; (80130e0 <tcp_process+0x2b4>)
 80130a8:	f007 fe9e 	bl	801ade8 <iprintf>
          pcb->unsent = rseg->next;
 80130ac:	69fb      	ldr	r3, [r7, #28]
 80130ae:	681a      	ldr	r2, [r3, #0]
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	66da      	str	r2, [r3, #108]	; 0x6c
 80130b4:	e003      	b.n	80130be <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80130b6:	69fb      	ldr	r3, [r7, #28]
 80130b8:	681a      	ldr	r2, [r3, #0]
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80130be:	69f8      	ldr	r0, [r7, #28]
 80130c0:	f7fe fc70 	bl	80119a4 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d11d      	bne.n	8013108 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80130d2:	861a      	strh	r2, [r3, #48]	; 0x30
 80130d4:	e01f      	b.n	8013116 <tcp_process+0x2ea>
 80130d6:	bf00      	nop
 80130d8:	08021624 	.word	0x08021624
 80130dc:	0802185c 	.word	0x0802185c
 80130e0:	08021670 	.word	0x08021670
 80130e4:	200008c0 	.word	0x200008c0
 80130e8:	200008b8 	.word	0x200008b8
 80130ec:	200008b4 	.word	0x200008b4
 80130f0:	08021878 	.word	0x08021878
 80130f4:	200008c1 	.word	0x200008c1
 80130f8:	20007ca0 	.word	0x20007ca0
 80130fc:	200008a4 	.word	0x200008a4
 8013100:	08021898 	.word	0x08021898
 8013104:	080218b0 	.word	0x080218b0
        } else {
          pcb->rtime = 0;
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	2200      	movs	r2, #0
 801310c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	2200      	movs	r2, #0
 8013112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801311c:	2b00      	cmp	r3, #0
 801311e:	d00a      	beq.n	8013136 <tcp_process+0x30a>
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013126:	687a      	ldr	r2, [r7, #4]
 8013128:	6910      	ldr	r0, [r2, #16]
 801312a:	2200      	movs	r2, #0
 801312c:	6879      	ldr	r1, [r7, #4]
 801312e:	4798      	blx	r3
 8013130:	4603      	mov	r3, r0
 8013132:	76bb      	strb	r3, [r7, #26]
 8013134:	e001      	b.n	801313a <tcp_process+0x30e>
 8013136:	2300      	movs	r3, #0
 8013138:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801313a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801313e:	f113 0f0d 	cmn.w	r3, #13
 8013142:	d102      	bne.n	801314a <tcp_process+0x31e>
          return ERR_ABRT;
 8013144:	f06f 030c 	mvn.w	r3, #12
 8013148:	e250      	b.n	80135ec <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	8b5b      	ldrh	r3, [r3, #26]
 801314e:	f043 0302 	orr.w	r3, r3, #2
 8013152:	b29a      	uxth	r2, r3
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8013158:	e23a      	b.n	80135d0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801315a:	4b9d      	ldr	r3, [pc, #628]	; (80133d0 <tcp_process+0x5a4>)
 801315c:	781b      	ldrb	r3, [r3, #0]
 801315e:	f003 0310 	and.w	r3, r3, #16
 8013162:	2b00      	cmp	r3, #0
 8013164:	f000 8234 	beq.w	80135d0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013168:	4b9a      	ldr	r3, [pc, #616]	; (80133d4 <tcp_process+0x5a8>)
 801316a:	6819      	ldr	r1, [r3, #0]
 801316c:	4b9a      	ldr	r3, [pc, #616]	; (80133d8 <tcp_process+0x5ac>)
 801316e:	881b      	ldrh	r3, [r3, #0]
 8013170:	461a      	mov	r2, r3
 8013172:	4b9a      	ldr	r3, [pc, #616]	; (80133dc <tcp_process+0x5b0>)
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013178:	4b99      	ldr	r3, [pc, #612]	; (80133e0 <tcp_process+0x5b4>)
 801317a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801317c:	885b      	ldrh	r3, [r3, #2]
 801317e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013180:	4a97      	ldr	r2, [pc, #604]	; (80133e0 <tcp_process+0x5b4>)
 8013182:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013184:	8812      	ldrh	r2, [r2, #0]
 8013186:	b292      	uxth	r2, r2
 8013188:	9202      	str	r2, [sp, #8]
 801318a:	9301      	str	r3, [sp, #4]
 801318c:	4b95      	ldr	r3, [pc, #596]	; (80133e4 <tcp_process+0x5b8>)
 801318e:	9300      	str	r3, [sp, #0]
 8013190:	4b95      	ldr	r3, [pc, #596]	; (80133e8 <tcp_process+0x5bc>)
 8013192:	4602      	mov	r2, r0
 8013194:	6878      	ldr	r0, [r7, #4]
 8013196:	f003 f8ed 	bl	8016374 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80131a0:	2b05      	cmp	r3, #5
 80131a2:	f200 8215 	bhi.w	80135d0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	2200      	movs	r2, #0
 80131aa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80131ac:	6878      	ldr	r0, [r7, #4]
 80131ae:	f002 feab 	bl	8015f08 <tcp_rexmit_rto>
      break;
 80131b2:	e20d      	b.n	80135d0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80131b4:	4b86      	ldr	r3, [pc, #536]	; (80133d0 <tcp_process+0x5a4>)
 80131b6:	781b      	ldrb	r3, [r3, #0]
 80131b8:	f003 0310 	and.w	r3, r3, #16
 80131bc:	2b00      	cmp	r3, #0
 80131be:	f000 80a1 	beq.w	8013304 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80131c2:	4b84      	ldr	r3, [pc, #528]	; (80133d4 <tcp_process+0x5a8>)
 80131c4:	681a      	ldr	r2, [r3, #0]
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80131ca:	1ad3      	subs	r3, r2, r3
 80131cc:	3b01      	subs	r3, #1
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	db7e      	blt.n	80132d0 <tcp_process+0x4a4>
 80131d2:	4b80      	ldr	r3, [pc, #512]	; (80133d4 <tcp_process+0x5a8>)
 80131d4:	681a      	ldr	r2, [r3, #0]
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80131da:	1ad3      	subs	r3, r2, r3
 80131dc:	2b00      	cmp	r3, #0
 80131de:	dc77      	bgt.n	80132d0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	2204      	movs	r2, #4
 80131e4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d102      	bne.n	80131f4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80131ee:	23fa      	movs	r3, #250	; 0xfa
 80131f0:	76bb      	strb	r3, [r7, #26]
 80131f2:	e01d      	b.n	8013230 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80131f8:	699b      	ldr	r3, [r3, #24]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d106      	bne.n	801320c <tcp_process+0x3e0>
 80131fe:	4b7b      	ldr	r3, [pc, #492]	; (80133ec <tcp_process+0x5c0>)
 8013200:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8013204:	497a      	ldr	r1, [pc, #488]	; (80133f0 <tcp_process+0x5c4>)
 8013206:	487b      	ldr	r0, [pc, #492]	; (80133f4 <tcp_process+0x5c8>)
 8013208:	f007 fdee 	bl	801ade8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013210:	699b      	ldr	r3, [r3, #24]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d00a      	beq.n	801322c <tcp_process+0x400>
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801321a:	699b      	ldr	r3, [r3, #24]
 801321c:	687a      	ldr	r2, [r7, #4]
 801321e:	6910      	ldr	r0, [r2, #16]
 8013220:	2200      	movs	r2, #0
 8013222:	6879      	ldr	r1, [r7, #4]
 8013224:	4798      	blx	r3
 8013226:	4603      	mov	r3, r0
 8013228:	76bb      	strb	r3, [r7, #26]
 801322a:	e001      	b.n	8013230 <tcp_process+0x404>
 801322c:	23f0      	movs	r3, #240	; 0xf0
 801322e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013230:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d00a      	beq.n	801324e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8013238:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801323c:	f113 0f0d 	cmn.w	r3, #13
 8013240:	d002      	beq.n	8013248 <tcp_process+0x41c>
              tcp_abort(pcb);
 8013242:	6878      	ldr	r0, [r7, #4]
 8013244:	f7fd fd68 	bl	8010d18 <tcp_abort>
            }
            return ERR_ABRT;
 8013248:	f06f 030c 	mvn.w	r3, #12
 801324c:	e1ce      	b.n	80135ec <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801324e:	6878      	ldr	r0, [r7, #4]
 8013250:	f000 fae0 	bl	8013814 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013254:	4b68      	ldr	r3, [pc, #416]	; (80133f8 <tcp_process+0x5cc>)
 8013256:	881b      	ldrh	r3, [r3, #0]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d005      	beq.n	8013268 <tcp_process+0x43c>
            recv_acked--;
 801325c:	4b66      	ldr	r3, [pc, #408]	; (80133f8 <tcp_process+0x5cc>)
 801325e:	881b      	ldrh	r3, [r3, #0]
 8013260:	3b01      	subs	r3, #1
 8013262:	b29a      	uxth	r2, r3
 8013264:	4b64      	ldr	r3, [pc, #400]	; (80133f8 <tcp_process+0x5cc>)
 8013266:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801326c:	009a      	lsls	r2, r3, #2
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013272:	005b      	lsls	r3, r3, #1
 8013274:	f241 111c 	movw	r1, #4380	; 0x111c
 8013278:	428b      	cmp	r3, r1
 801327a:	bf38      	it	cc
 801327c:	460b      	movcc	r3, r1
 801327e:	429a      	cmp	r2, r3
 8013280:	d204      	bcs.n	801328c <tcp_process+0x460>
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013286:	009b      	lsls	r3, r3, #2
 8013288:	b29b      	uxth	r3, r3
 801328a:	e00d      	b.n	80132a8 <tcp_process+0x47c>
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013290:	005b      	lsls	r3, r3, #1
 8013292:	f241 121c 	movw	r2, #4380	; 0x111c
 8013296:	4293      	cmp	r3, r2
 8013298:	d904      	bls.n	80132a4 <tcp_process+0x478>
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801329e:	005b      	lsls	r3, r3, #1
 80132a0:	b29b      	uxth	r3, r3
 80132a2:	e001      	b.n	80132a8 <tcp_process+0x47c>
 80132a4:	f241 131c 	movw	r3, #4380	; 0x111c
 80132a8:	687a      	ldr	r2, [r7, #4]
 80132aa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80132ae:	4b53      	ldr	r3, [pc, #332]	; (80133fc <tcp_process+0x5d0>)
 80132b0:	781b      	ldrb	r3, [r3, #0]
 80132b2:	f003 0320 	and.w	r3, r3, #32
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d037      	beq.n	801332a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	8b5b      	ldrh	r3, [r3, #26]
 80132be:	f043 0302 	orr.w	r3, r3, #2
 80132c2:	b29a      	uxth	r2, r3
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2207      	movs	r2, #7
 80132cc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80132ce:	e02c      	b.n	801332a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132d0:	4b40      	ldr	r3, [pc, #256]	; (80133d4 <tcp_process+0x5a8>)
 80132d2:	6819      	ldr	r1, [r3, #0]
 80132d4:	4b40      	ldr	r3, [pc, #256]	; (80133d8 <tcp_process+0x5ac>)
 80132d6:	881b      	ldrh	r3, [r3, #0]
 80132d8:	461a      	mov	r2, r3
 80132da:	4b40      	ldr	r3, [pc, #256]	; (80133dc <tcp_process+0x5b0>)
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80132e0:	4b3f      	ldr	r3, [pc, #252]	; (80133e0 <tcp_process+0x5b4>)
 80132e2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132e4:	885b      	ldrh	r3, [r3, #2]
 80132e6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80132e8:	4a3d      	ldr	r2, [pc, #244]	; (80133e0 <tcp_process+0x5b4>)
 80132ea:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132ec:	8812      	ldrh	r2, [r2, #0]
 80132ee:	b292      	uxth	r2, r2
 80132f0:	9202      	str	r2, [sp, #8]
 80132f2:	9301      	str	r3, [sp, #4]
 80132f4:	4b3b      	ldr	r3, [pc, #236]	; (80133e4 <tcp_process+0x5b8>)
 80132f6:	9300      	str	r3, [sp, #0]
 80132f8:	4b3b      	ldr	r3, [pc, #236]	; (80133e8 <tcp_process+0x5bc>)
 80132fa:	4602      	mov	r2, r0
 80132fc:	6878      	ldr	r0, [r7, #4]
 80132fe:	f003 f839 	bl	8016374 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8013302:	e167      	b.n	80135d4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013304:	4b32      	ldr	r3, [pc, #200]	; (80133d0 <tcp_process+0x5a4>)
 8013306:	781b      	ldrb	r3, [r3, #0]
 8013308:	f003 0302 	and.w	r3, r3, #2
 801330c:	2b00      	cmp	r3, #0
 801330e:	f000 8161 	beq.w	80135d4 <tcp_process+0x7a8>
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013316:	1e5a      	subs	r2, r3, #1
 8013318:	4b30      	ldr	r3, [pc, #192]	; (80133dc <tcp_process+0x5b0>)
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	429a      	cmp	r2, r3
 801331e:	f040 8159 	bne.w	80135d4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8013322:	6878      	ldr	r0, [r7, #4]
 8013324:	f002 fe12 	bl	8015f4c <tcp_rexmit>
      break;
 8013328:	e154      	b.n	80135d4 <tcp_process+0x7a8>
 801332a:	e153      	b.n	80135d4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f000 fa71 	bl	8013814 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013332:	4b32      	ldr	r3, [pc, #200]	; (80133fc <tcp_process+0x5d0>)
 8013334:	781b      	ldrb	r3, [r3, #0]
 8013336:	f003 0320 	and.w	r3, r3, #32
 801333a:	2b00      	cmp	r3, #0
 801333c:	f000 814c 	beq.w	80135d8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	8b5b      	ldrh	r3, [r3, #26]
 8013344:	f043 0302 	orr.w	r3, r3, #2
 8013348:	b29a      	uxth	r2, r3
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	2207      	movs	r2, #7
 8013352:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013354:	e140      	b.n	80135d8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f000 fa5c 	bl	8013814 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801335c:	4b27      	ldr	r3, [pc, #156]	; (80133fc <tcp_process+0x5d0>)
 801335e:	781b      	ldrb	r3, [r3, #0]
 8013360:	f003 0320 	and.w	r3, r3, #32
 8013364:	2b00      	cmp	r3, #0
 8013366:	d071      	beq.n	801344c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013368:	4b19      	ldr	r3, [pc, #100]	; (80133d0 <tcp_process+0x5a4>)
 801336a:	781b      	ldrb	r3, [r3, #0]
 801336c:	f003 0310 	and.w	r3, r3, #16
 8013370:	2b00      	cmp	r3, #0
 8013372:	d060      	beq.n	8013436 <tcp_process+0x60a>
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013378:	4b16      	ldr	r3, [pc, #88]	; (80133d4 <tcp_process+0x5a8>)
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	429a      	cmp	r2, r3
 801337e:	d15a      	bne.n	8013436 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013384:	2b00      	cmp	r3, #0
 8013386:	d156      	bne.n	8013436 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	8b5b      	ldrh	r3, [r3, #26]
 801338c:	f043 0302 	orr.w	r3, r3, #2
 8013390:	b29a      	uxth	r2, r3
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013396:	6878      	ldr	r0, [r7, #4]
 8013398:	f7fe fdbe 	bl	8011f18 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801339c:	4b18      	ldr	r3, [pc, #96]	; (8013400 <tcp_process+0x5d4>)
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	687a      	ldr	r2, [r7, #4]
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d105      	bne.n	80133b2 <tcp_process+0x586>
 80133a6:	4b16      	ldr	r3, [pc, #88]	; (8013400 <tcp_process+0x5d4>)
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	68db      	ldr	r3, [r3, #12]
 80133ac:	4a14      	ldr	r2, [pc, #80]	; (8013400 <tcp_process+0x5d4>)
 80133ae:	6013      	str	r3, [r2, #0]
 80133b0:	e02e      	b.n	8013410 <tcp_process+0x5e4>
 80133b2:	4b13      	ldr	r3, [pc, #76]	; (8013400 <tcp_process+0x5d4>)
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	617b      	str	r3, [r7, #20]
 80133b8:	e027      	b.n	801340a <tcp_process+0x5de>
 80133ba:	697b      	ldr	r3, [r7, #20]
 80133bc:	68db      	ldr	r3, [r3, #12]
 80133be:	687a      	ldr	r2, [r7, #4]
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d11f      	bne.n	8013404 <tcp_process+0x5d8>
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	68da      	ldr	r2, [r3, #12]
 80133c8:	697b      	ldr	r3, [r7, #20]
 80133ca:	60da      	str	r2, [r3, #12]
 80133cc:	e020      	b.n	8013410 <tcp_process+0x5e4>
 80133ce:	bf00      	nop
 80133d0:	200008c0 	.word	0x200008c0
 80133d4:	200008b8 	.word	0x200008b8
 80133d8:	200008be 	.word	0x200008be
 80133dc:	200008b4 	.word	0x200008b4
 80133e0:	200008a4 	.word	0x200008a4
 80133e4:	20004598 	.word	0x20004598
 80133e8:	2000459c 	.word	0x2000459c
 80133ec:	08021624 	.word	0x08021624
 80133f0:	080218c4 	.word	0x080218c4
 80133f4:	08021670 	.word	0x08021670
 80133f8:	200008bc 	.word	0x200008bc
 80133fc:	200008c1 	.word	0x200008c1
 8013400:	20007c9c 	.word	0x20007c9c
 8013404:	697b      	ldr	r3, [r7, #20]
 8013406:	68db      	ldr	r3, [r3, #12]
 8013408:	617b      	str	r3, [r7, #20]
 801340a:	697b      	ldr	r3, [r7, #20]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d1d4      	bne.n	80133ba <tcp_process+0x58e>
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	2200      	movs	r2, #0
 8013414:	60da      	str	r2, [r3, #12]
 8013416:	4b77      	ldr	r3, [pc, #476]	; (80135f4 <tcp_process+0x7c8>)
 8013418:	2201      	movs	r2, #1
 801341a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	220a      	movs	r2, #10
 8013420:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013422:	4b75      	ldr	r3, [pc, #468]	; (80135f8 <tcp_process+0x7cc>)
 8013424:	681a      	ldr	r2, [r3, #0]
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	60da      	str	r2, [r3, #12]
 801342a:	4a73      	ldr	r2, [pc, #460]	; (80135f8 <tcp_process+0x7cc>)
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	6013      	str	r3, [r2, #0]
 8013430:	f003 f962 	bl	80166f8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013434:	e0d2      	b.n	80135dc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	8b5b      	ldrh	r3, [r3, #26]
 801343a:	f043 0302 	orr.w	r3, r3, #2
 801343e:	b29a      	uxth	r2, r3
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	2208      	movs	r2, #8
 8013448:	751a      	strb	r2, [r3, #20]
      break;
 801344a:	e0c7      	b.n	80135dc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801344c:	4b6b      	ldr	r3, [pc, #428]	; (80135fc <tcp_process+0x7d0>)
 801344e:	781b      	ldrb	r3, [r3, #0]
 8013450:	f003 0310 	and.w	r3, r3, #16
 8013454:	2b00      	cmp	r3, #0
 8013456:	f000 80c1 	beq.w	80135dc <tcp_process+0x7b0>
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801345e:	4b68      	ldr	r3, [pc, #416]	; (8013600 <tcp_process+0x7d4>)
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	429a      	cmp	r2, r3
 8013464:	f040 80ba 	bne.w	80135dc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801346c:	2b00      	cmp	r3, #0
 801346e:	f040 80b5 	bne.w	80135dc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	2206      	movs	r2, #6
 8013476:	751a      	strb	r2, [r3, #20]
      break;
 8013478:	e0b0      	b.n	80135dc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f000 f9ca 	bl	8013814 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013480:	4b60      	ldr	r3, [pc, #384]	; (8013604 <tcp_process+0x7d8>)
 8013482:	781b      	ldrb	r3, [r3, #0]
 8013484:	f003 0320 	and.w	r3, r3, #32
 8013488:	2b00      	cmp	r3, #0
 801348a:	f000 80a9 	beq.w	80135e0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	8b5b      	ldrh	r3, [r3, #26]
 8013492:	f043 0302 	orr.w	r3, r3, #2
 8013496:	b29a      	uxth	r2, r3
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801349c:	6878      	ldr	r0, [r7, #4]
 801349e:	f7fe fd3b 	bl	8011f18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80134a2:	4b59      	ldr	r3, [pc, #356]	; (8013608 <tcp_process+0x7dc>)
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	687a      	ldr	r2, [r7, #4]
 80134a8:	429a      	cmp	r2, r3
 80134aa:	d105      	bne.n	80134b8 <tcp_process+0x68c>
 80134ac:	4b56      	ldr	r3, [pc, #344]	; (8013608 <tcp_process+0x7dc>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	68db      	ldr	r3, [r3, #12]
 80134b2:	4a55      	ldr	r2, [pc, #340]	; (8013608 <tcp_process+0x7dc>)
 80134b4:	6013      	str	r3, [r2, #0]
 80134b6:	e013      	b.n	80134e0 <tcp_process+0x6b4>
 80134b8:	4b53      	ldr	r3, [pc, #332]	; (8013608 <tcp_process+0x7dc>)
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	613b      	str	r3, [r7, #16]
 80134be:	e00c      	b.n	80134da <tcp_process+0x6ae>
 80134c0:	693b      	ldr	r3, [r7, #16]
 80134c2:	68db      	ldr	r3, [r3, #12]
 80134c4:	687a      	ldr	r2, [r7, #4]
 80134c6:	429a      	cmp	r2, r3
 80134c8:	d104      	bne.n	80134d4 <tcp_process+0x6a8>
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	68da      	ldr	r2, [r3, #12]
 80134ce:	693b      	ldr	r3, [r7, #16]
 80134d0:	60da      	str	r2, [r3, #12]
 80134d2:	e005      	b.n	80134e0 <tcp_process+0x6b4>
 80134d4:	693b      	ldr	r3, [r7, #16]
 80134d6:	68db      	ldr	r3, [r3, #12]
 80134d8:	613b      	str	r3, [r7, #16]
 80134da:	693b      	ldr	r3, [r7, #16]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d1ef      	bne.n	80134c0 <tcp_process+0x694>
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	2200      	movs	r2, #0
 80134e4:	60da      	str	r2, [r3, #12]
 80134e6:	4b43      	ldr	r3, [pc, #268]	; (80135f4 <tcp_process+0x7c8>)
 80134e8:	2201      	movs	r2, #1
 80134ea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	220a      	movs	r2, #10
 80134f0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80134f2:	4b41      	ldr	r3, [pc, #260]	; (80135f8 <tcp_process+0x7cc>)
 80134f4:	681a      	ldr	r2, [r3, #0]
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	60da      	str	r2, [r3, #12]
 80134fa:	4a3f      	ldr	r2, [pc, #252]	; (80135f8 <tcp_process+0x7cc>)
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	6013      	str	r3, [r2, #0]
 8013500:	f003 f8fa 	bl	80166f8 <tcp_timer_needed>
      }
      break;
 8013504:	e06c      	b.n	80135e0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013506:	6878      	ldr	r0, [r7, #4]
 8013508:	f000 f984 	bl	8013814 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801350c:	4b3b      	ldr	r3, [pc, #236]	; (80135fc <tcp_process+0x7d0>)
 801350e:	781b      	ldrb	r3, [r3, #0]
 8013510:	f003 0310 	and.w	r3, r3, #16
 8013514:	2b00      	cmp	r3, #0
 8013516:	d065      	beq.n	80135e4 <tcp_process+0x7b8>
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801351c:	4b38      	ldr	r3, [pc, #224]	; (8013600 <tcp_process+0x7d4>)
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	429a      	cmp	r2, r3
 8013522:	d15f      	bne.n	80135e4 <tcp_process+0x7b8>
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013528:	2b00      	cmp	r3, #0
 801352a:	d15b      	bne.n	80135e4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801352c:	6878      	ldr	r0, [r7, #4]
 801352e:	f7fe fcf3 	bl	8011f18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013532:	4b35      	ldr	r3, [pc, #212]	; (8013608 <tcp_process+0x7dc>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	687a      	ldr	r2, [r7, #4]
 8013538:	429a      	cmp	r2, r3
 801353a:	d105      	bne.n	8013548 <tcp_process+0x71c>
 801353c:	4b32      	ldr	r3, [pc, #200]	; (8013608 <tcp_process+0x7dc>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	68db      	ldr	r3, [r3, #12]
 8013542:	4a31      	ldr	r2, [pc, #196]	; (8013608 <tcp_process+0x7dc>)
 8013544:	6013      	str	r3, [r2, #0]
 8013546:	e013      	b.n	8013570 <tcp_process+0x744>
 8013548:	4b2f      	ldr	r3, [pc, #188]	; (8013608 <tcp_process+0x7dc>)
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	60fb      	str	r3, [r7, #12]
 801354e:	e00c      	b.n	801356a <tcp_process+0x73e>
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	68db      	ldr	r3, [r3, #12]
 8013554:	687a      	ldr	r2, [r7, #4]
 8013556:	429a      	cmp	r2, r3
 8013558:	d104      	bne.n	8013564 <tcp_process+0x738>
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	68da      	ldr	r2, [r3, #12]
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	60da      	str	r2, [r3, #12]
 8013562:	e005      	b.n	8013570 <tcp_process+0x744>
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	68db      	ldr	r3, [r3, #12]
 8013568:	60fb      	str	r3, [r7, #12]
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d1ef      	bne.n	8013550 <tcp_process+0x724>
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	2200      	movs	r2, #0
 8013574:	60da      	str	r2, [r3, #12]
 8013576:	4b1f      	ldr	r3, [pc, #124]	; (80135f4 <tcp_process+0x7c8>)
 8013578:	2201      	movs	r2, #1
 801357a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	220a      	movs	r2, #10
 8013580:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013582:	4b1d      	ldr	r3, [pc, #116]	; (80135f8 <tcp_process+0x7cc>)
 8013584:	681a      	ldr	r2, [r3, #0]
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	60da      	str	r2, [r3, #12]
 801358a:	4a1b      	ldr	r2, [pc, #108]	; (80135f8 <tcp_process+0x7cc>)
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	6013      	str	r3, [r2, #0]
 8013590:	f003 f8b2 	bl	80166f8 <tcp_timer_needed>
      }
      break;
 8013594:	e026      	b.n	80135e4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013596:	6878      	ldr	r0, [r7, #4]
 8013598:	f000 f93c 	bl	8013814 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801359c:	4b17      	ldr	r3, [pc, #92]	; (80135fc <tcp_process+0x7d0>)
 801359e:	781b      	ldrb	r3, [r3, #0]
 80135a0:	f003 0310 	and.w	r3, r3, #16
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d01f      	beq.n	80135e8 <tcp_process+0x7bc>
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80135ac:	4b14      	ldr	r3, [pc, #80]	; (8013600 <tcp_process+0x7d4>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	429a      	cmp	r2, r3
 80135b2:	d119      	bne.n	80135e8 <tcp_process+0x7bc>
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d115      	bne.n	80135e8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80135bc:	4b11      	ldr	r3, [pc, #68]	; (8013604 <tcp_process+0x7d8>)
 80135be:	781b      	ldrb	r3, [r3, #0]
 80135c0:	f043 0310 	orr.w	r3, r3, #16
 80135c4:	b2da      	uxtb	r2, r3
 80135c6:	4b0f      	ldr	r3, [pc, #60]	; (8013604 <tcp_process+0x7d8>)
 80135c8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80135ca:	e00d      	b.n	80135e8 <tcp_process+0x7bc>
    default:
      break;
 80135cc:	bf00      	nop
 80135ce:	e00c      	b.n	80135ea <tcp_process+0x7be>
      break;
 80135d0:	bf00      	nop
 80135d2:	e00a      	b.n	80135ea <tcp_process+0x7be>
      break;
 80135d4:	bf00      	nop
 80135d6:	e008      	b.n	80135ea <tcp_process+0x7be>
      break;
 80135d8:	bf00      	nop
 80135da:	e006      	b.n	80135ea <tcp_process+0x7be>
      break;
 80135dc:	bf00      	nop
 80135de:	e004      	b.n	80135ea <tcp_process+0x7be>
      break;
 80135e0:	bf00      	nop
 80135e2:	e002      	b.n	80135ea <tcp_process+0x7be>
      break;
 80135e4:	bf00      	nop
 80135e6:	e000      	b.n	80135ea <tcp_process+0x7be>
      break;
 80135e8:	bf00      	nop
  }
  return ERR_OK;
 80135ea:	2300      	movs	r3, #0
}
 80135ec:	4618      	mov	r0, r3
 80135ee:	3724      	adds	r7, #36	; 0x24
 80135f0:	46bd      	mov	sp, r7
 80135f2:	bd90      	pop	{r4, r7, pc}
 80135f4:	20007c98 	.word	0x20007c98
 80135f8:	20007cac 	.word	0x20007cac
 80135fc:	200008c0 	.word	0x200008c0
 8013600:	200008b8 	.word	0x200008b8
 8013604:	200008c1 	.word	0x200008c1
 8013608:	20007c9c 	.word	0x20007c9c

0801360c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801360c:	b590      	push	{r4, r7, lr}
 801360e:	b085      	sub	sp, #20
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
 8013614:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d106      	bne.n	801362a <tcp_oos_insert_segment+0x1e>
 801361c:	4b3b      	ldr	r3, [pc, #236]	; (801370c <tcp_oos_insert_segment+0x100>)
 801361e:	f240 421f 	movw	r2, #1055	; 0x41f
 8013622:	493b      	ldr	r1, [pc, #236]	; (8013710 <tcp_oos_insert_segment+0x104>)
 8013624:	483b      	ldr	r0, [pc, #236]	; (8013714 <tcp_oos_insert_segment+0x108>)
 8013626:	f007 fbdf 	bl	801ade8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	68db      	ldr	r3, [r3, #12]
 801362e:	899b      	ldrh	r3, [r3, #12]
 8013630:	b29b      	uxth	r3, r3
 8013632:	4618      	mov	r0, r3
 8013634:	f7fb fa4a 	bl	800eacc <lwip_htons>
 8013638:	4603      	mov	r3, r0
 801363a:	b2db      	uxtb	r3, r3
 801363c:	f003 0301 	and.w	r3, r3, #1
 8013640:	2b00      	cmp	r3, #0
 8013642:	d028      	beq.n	8013696 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013644:	6838      	ldr	r0, [r7, #0]
 8013646:	f7fe f999 	bl	801197c <tcp_segs_free>
    next = NULL;
 801364a:	2300      	movs	r3, #0
 801364c:	603b      	str	r3, [r7, #0]
 801364e:	e056      	b.n	80136fe <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013650:	683b      	ldr	r3, [r7, #0]
 8013652:	68db      	ldr	r3, [r3, #12]
 8013654:	899b      	ldrh	r3, [r3, #12]
 8013656:	b29b      	uxth	r3, r3
 8013658:	4618      	mov	r0, r3
 801365a:	f7fb fa37 	bl	800eacc <lwip_htons>
 801365e:	4603      	mov	r3, r0
 8013660:	b2db      	uxtb	r3, r3
 8013662:	f003 0301 	and.w	r3, r3, #1
 8013666:	2b00      	cmp	r3, #0
 8013668:	d00d      	beq.n	8013686 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	68db      	ldr	r3, [r3, #12]
 801366e:	899b      	ldrh	r3, [r3, #12]
 8013670:	b29c      	uxth	r4, r3
 8013672:	2001      	movs	r0, #1
 8013674:	f7fb fa2a 	bl	800eacc <lwip_htons>
 8013678:	4603      	mov	r3, r0
 801367a:	461a      	mov	r2, r3
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	68db      	ldr	r3, [r3, #12]
 8013680:	4322      	orrs	r2, r4
 8013682:	b292      	uxth	r2, r2
 8013684:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013686:	683b      	ldr	r3, [r7, #0]
 8013688:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801368a:	683b      	ldr	r3, [r7, #0]
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013690:	68f8      	ldr	r0, [r7, #12]
 8013692:	f7fe f987 	bl	80119a4 <tcp_seg_free>
    while (next &&
 8013696:	683b      	ldr	r3, [r7, #0]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d00e      	beq.n	80136ba <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	891b      	ldrh	r3, [r3, #8]
 80136a0:	461a      	mov	r2, r3
 80136a2:	4b1d      	ldr	r3, [pc, #116]	; (8013718 <tcp_oos_insert_segment+0x10c>)
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	441a      	add	r2, r3
 80136a8:	683b      	ldr	r3, [r7, #0]
 80136aa:	68db      	ldr	r3, [r3, #12]
 80136ac:	685b      	ldr	r3, [r3, #4]
 80136ae:	6839      	ldr	r1, [r7, #0]
 80136b0:	8909      	ldrh	r1, [r1, #8]
 80136b2:	440b      	add	r3, r1
 80136b4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	daca      	bge.n	8013650 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80136ba:	683b      	ldr	r3, [r7, #0]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d01e      	beq.n	80136fe <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	891b      	ldrh	r3, [r3, #8]
 80136c4:	461a      	mov	r2, r3
 80136c6:	4b14      	ldr	r3, [pc, #80]	; (8013718 <tcp_oos_insert_segment+0x10c>)
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	441a      	add	r2, r3
 80136cc:	683b      	ldr	r3, [r7, #0]
 80136ce:	68db      	ldr	r3, [r3, #12]
 80136d0:	685b      	ldr	r3, [r3, #4]
 80136d2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	dd12      	ble.n	80136fe <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80136d8:	683b      	ldr	r3, [r7, #0]
 80136da:	68db      	ldr	r3, [r3, #12]
 80136dc:	685b      	ldr	r3, [r3, #4]
 80136de:	b29a      	uxth	r2, r3
 80136e0:	4b0d      	ldr	r3, [pc, #52]	; (8013718 <tcp_oos_insert_segment+0x10c>)
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	b29b      	uxth	r3, r3
 80136e6:	1ad3      	subs	r3, r2, r3
 80136e8:	b29a      	uxth	r2, r3
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	685a      	ldr	r2, [r3, #4]
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	891b      	ldrh	r3, [r3, #8]
 80136f6:	4619      	mov	r1, r3
 80136f8:	4610      	mov	r0, r2
 80136fa:	f7fc fb91 	bl	800fe20 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	683a      	ldr	r2, [r7, #0]
 8013702:	601a      	str	r2, [r3, #0]
}
 8013704:	bf00      	nop
 8013706:	3714      	adds	r7, #20
 8013708:	46bd      	mov	sp, r7
 801370a:	bd90      	pop	{r4, r7, pc}
 801370c:	08021624 	.word	0x08021624
 8013710:	080218e4 	.word	0x080218e4
 8013714:	08021670 	.word	0x08021670
 8013718:	200008b4 	.word	0x200008b4

0801371c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801371c:	b5b0      	push	{r4, r5, r7, lr}
 801371e:	b086      	sub	sp, #24
 8013720:	af00      	add	r7, sp, #0
 8013722:	60f8      	str	r0, [r7, #12]
 8013724:	60b9      	str	r1, [r7, #8]
 8013726:	607a      	str	r2, [r7, #4]
 8013728:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801372a:	e03e      	b.n	80137aa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801372c:	68bb      	ldr	r3, [r7, #8]
 801372e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013730:	68bb      	ldr	r3, [r7, #8]
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013736:	697b      	ldr	r3, [r7, #20]
 8013738:	685b      	ldr	r3, [r3, #4]
 801373a:	4618      	mov	r0, r3
 801373c:	f7fc fd84 	bl	8010248 <pbuf_clen>
 8013740:	4603      	mov	r3, r0
 8013742:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801374a:	8a7a      	ldrh	r2, [r7, #18]
 801374c:	429a      	cmp	r2, r3
 801374e:	d906      	bls.n	801375e <tcp_free_acked_segments+0x42>
 8013750:	4b2a      	ldr	r3, [pc, #168]	; (80137fc <tcp_free_acked_segments+0xe0>)
 8013752:	f240 4257 	movw	r2, #1111	; 0x457
 8013756:	492a      	ldr	r1, [pc, #168]	; (8013800 <tcp_free_acked_segments+0xe4>)
 8013758:	482a      	ldr	r0, [pc, #168]	; (8013804 <tcp_free_acked_segments+0xe8>)
 801375a:	f007 fb45 	bl	801ade8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013764:	8a7b      	ldrh	r3, [r7, #18]
 8013766:	1ad3      	subs	r3, r2, r3
 8013768:	b29a      	uxth	r2, r3
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	891a      	ldrh	r2, [r3, #8]
 8013774:	4b24      	ldr	r3, [pc, #144]	; (8013808 <tcp_free_acked_segments+0xec>)
 8013776:	881b      	ldrh	r3, [r3, #0]
 8013778:	4413      	add	r3, r2
 801377a:	b29a      	uxth	r2, r3
 801377c:	4b22      	ldr	r3, [pc, #136]	; (8013808 <tcp_free_acked_segments+0xec>)
 801377e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013780:	6978      	ldr	r0, [r7, #20]
 8013782:	f7fe f90f 	bl	80119a4 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801378c:	2b00      	cmp	r3, #0
 801378e:	d00c      	beq.n	80137aa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013790:	68bb      	ldr	r3, [r7, #8]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d109      	bne.n	80137aa <tcp_free_acked_segments+0x8e>
 8013796:	683b      	ldr	r3, [r7, #0]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d106      	bne.n	80137aa <tcp_free_acked_segments+0x8e>
 801379c:	4b17      	ldr	r3, [pc, #92]	; (80137fc <tcp_free_acked_segments+0xe0>)
 801379e:	f240 4262 	movw	r2, #1122	; 0x462
 80137a2:	491a      	ldr	r1, [pc, #104]	; (801380c <tcp_free_acked_segments+0xf0>)
 80137a4:	4817      	ldr	r0, [pc, #92]	; (8013804 <tcp_free_acked_segments+0xe8>)
 80137a6:	f007 fb1f 	bl	801ade8 <iprintf>
  while (seg_list != NULL &&
 80137aa:	68bb      	ldr	r3, [r7, #8]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d020      	beq.n	80137f2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80137b0:	68bb      	ldr	r3, [r7, #8]
 80137b2:	68db      	ldr	r3, [r3, #12]
 80137b4:	685b      	ldr	r3, [r3, #4]
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7fb f99d 	bl	800eaf6 <lwip_htonl>
 80137bc:	4604      	mov	r4, r0
 80137be:	68bb      	ldr	r3, [r7, #8]
 80137c0:	891b      	ldrh	r3, [r3, #8]
 80137c2:	461d      	mov	r5, r3
 80137c4:	68bb      	ldr	r3, [r7, #8]
 80137c6:	68db      	ldr	r3, [r3, #12]
 80137c8:	899b      	ldrh	r3, [r3, #12]
 80137ca:	b29b      	uxth	r3, r3
 80137cc:	4618      	mov	r0, r3
 80137ce:	f7fb f97d 	bl	800eacc <lwip_htons>
 80137d2:	4603      	mov	r3, r0
 80137d4:	b2db      	uxtb	r3, r3
 80137d6:	f003 0303 	and.w	r3, r3, #3
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d001      	beq.n	80137e2 <tcp_free_acked_segments+0xc6>
 80137de:	2301      	movs	r3, #1
 80137e0:	e000      	b.n	80137e4 <tcp_free_acked_segments+0xc8>
 80137e2:	2300      	movs	r3, #0
 80137e4:	442b      	add	r3, r5
 80137e6:	18e2      	adds	r2, r4, r3
 80137e8:	4b09      	ldr	r3, [pc, #36]	; (8013810 <tcp_free_acked_segments+0xf4>)
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	dd9c      	ble.n	801372c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80137f2:	68bb      	ldr	r3, [r7, #8]
}
 80137f4:	4618      	mov	r0, r3
 80137f6:	3718      	adds	r7, #24
 80137f8:	46bd      	mov	sp, r7
 80137fa:	bdb0      	pop	{r4, r5, r7, pc}
 80137fc:	08021624 	.word	0x08021624
 8013800:	0802190c 	.word	0x0802190c
 8013804:	08021670 	.word	0x08021670
 8013808:	200008bc 	.word	0x200008bc
 801380c:	08021934 	.word	0x08021934
 8013810:	200008b8 	.word	0x200008b8

08013814 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013814:	b5b0      	push	{r4, r5, r7, lr}
 8013816:	b094      	sub	sp, #80	; 0x50
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801381c:	2300      	movs	r3, #0
 801381e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d106      	bne.n	8013834 <tcp_receive+0x20>
 8013826:	4ba6      	ldr	r3, [pc, #664]	; (8013ac0 <tcp_receive+0x2ac>)
 8013828:	f240 427b 	movw	r2, #1147	; 0x47b
 801382c:	49a5      	ldr	r1, [pc, #660]	; (8013ac4 <tcp_receive+0x2b0>)
 801382e:	48a6      	ldr	r0, [pc, #664]	; (8013ac8 <tcp_receive+0x2b4>)
 8013830:	f007 fada 	bl	801ade8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	7d1b      	ldrb	r3, [r3, #20]
 8013838:	2b03      	cmp	r3, #3
 801383a:	d806      	bhi.n	801384a <tcp_receive+0x36>
 801383c:	4ba0      	ldr	r3, [pc, #640]	; (8013ac0 <tcp_receive+0x2ac>)
 801383e:	f240 427c 	movw	r2, #1148	; 0x47c
 8013842:	49a2      	ldr	r1, [pc, #648]	; (8013acc <tcp_receive+0x2b8>)
 8013844:	48a0      	ldr	r0, [pc, #640]	; (8013ac8 <tcp_receive+0x2b4>)
 8013846:	f007 facf 	bl	801ade8 <iprintf>

  if (flags & TCP_ACK) {
 801384a:	4ba1      	ldr	r3, [pc, #644]	; (8013ad0 <tcp_receive+0x2bc>)
 801384c:	781b      	ldrb	r3, [r3, #0]
 801384e:	f003 0310 	and.w	r3, r3, #16
 8013852:	2b00      	cmp	r3, #0
 8013854:	f000 8263 	beq.w	8013d1e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801385e:	461a      	mov	r2, r3
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013864:	4413      	add	r3, r2
 8013866:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801386c:	4b99      	ldr	r3, [pc, #612]	; (8013ad4 <tcp_receive+0x2c0>)
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	1ad3      	subs	r3, r2, r3
 8013872:	2b00      	cmp	r3, #0
 8013874:	db1b      	blt.n	80138ae <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801387a:	4b96      	ldr	r3, [pc, #600]	; (8013ad4 <tcp_receive+0x2c0>)
 801387c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801387e:	429a      	cmp	r2, r3
 8013880:	d106      	bne.n	8013890 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013886:	4b94      	ldr	r3, [pc, #592]	; (8013ad8 <tcp_receive+0x2c4>)
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	1ad3      	subs	r3, r2, r3
 801388c:	2b00      	cmp	r3, #0
 801388e:	db0e      	blt.n	80138ae <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013894:	4b90      	ldr	r3, [pc, #576]	; (8013ad8 <tcp_receive+0x2c4>)
 8013896:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013898:	429a      	cmp	r2, r3
 801389a:	d125      	bne.n	80138e8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801389c:	4b8f      	ldr	r3, [pc, #572]	; (8013adc <tcp_receive+0x2c8>)
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	89db      	ldrh	r3, [r3, #14]
 80138a2:	b29a      	uxth	r2, r3
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80138aa:	429a      	cmp	r2, r3
 80138ac:	d91c      	bls.n	80138e8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80138ae:	4b8b      	ldr	r3, [pc, #556]	; (8013adc <tcp_receive+0x2c8>)
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	89db      	ldrh	r3, [r3, #14]
 80138b4:	b29a      	uxth	r2, r3
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80138c8:	429a      	cmp	r2, r3
 80138ca:	d205      	bcs.n	80138d8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80138d8:	4b7e      	ldr	r3, [pc, #504]	; (8013ad4 <tcp_receive+0x2c0>)
 80138da:	681a      	ldr	r2, [r3, #0]
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80138e0:	4b7d      	ldr	r3, [pc, #500]	; (8013ad8 <tcp_receive+0x2c4>)
 80138e2:	681a      	ldr	r2, [r3, #0]
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80138e8:	4b7b      	ldr	r3, [pc, #492]	; (8013ad8 <tcp_receive+0x2c4>)
 80138ea:	681a      	ldr	r2, [r3, #0]
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138f0:	1ad3      	subs	r3, r2, r3
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	dc58      	bgt.n	80139a8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80138f6:	4b7a      	ldr	r3, [pc, #488]	; (8013ae0 <tcp_receive+0x2cc>)
 80138f8:	881b      	ldrh	r3, [r3, #0]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d14b      	bne.n	8013996 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013902:	687a      	ldr	r2, [r7, #4]
 8013904:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8013908:	4413      	add	r3, r2
 801390a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801390c:	429a      	cmp	r2, r3
 801390e:	d142      	bne.n	8013996 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013916:	2b00      	cmp	r3, #0
 8013918:	db3d      	blt.n	8013996 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801391e:	4b6e      	ldr	r3, [pc, #440]	; (8013ad8 <tcp_receive+0x2c4>)
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	429a      	cmp	r2, r3
 8013924:	d137      	bne.n	8013996 <tcp_receive+0x182>
              found_dupack = 1;
 8013926:	2301      	movs	r3, #1
 8013928:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013930:	2bff      	cmp	r3, #255	; 0xff
 8013932:	d007      	beq.n	8013944 <tcp_receive+0x130>
                ++pcb->dupacks;
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801393a:	3301      	adds	r3, #1
 801393c:	b2da      	uxtb	r2, r3
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801394a:	2b03      	cmp	r3, #3
 801394c:	d91b      	bls.n	8013986 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013958:	4413      	add	r3, r2
 801395a:	b29a      	uxth	r2, r3
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013962:	429a      	cmp	r2, r3
 8013964:	d30a      	bcc.n	801397c <tcp_receive+0x168>
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013970:	4413      	add	r3, r2
 8013972:	b29a      	uxth	r2, r3
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801397a:	e004      	b.n	8013986 <tcp_receive+0x172>
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013982:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801398c:	2b02      	cmp	r3, #2
 801398e:	d902      	bls.n	8013996 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013990:	6878      	ldr	r0, [r7, #4]
 8013992:	f002 fb47 	bl	8016024 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013998:	2b00      	cmp	r3, #0
 801399a:	f040 8160 	bne.w	8013c5e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	2200      	movs	r2, #0
 80139a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80139a6:	e15a      	b.n	8013c5e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80139a8:	4b4b      	ldr	r3, [pc, #300]	; (8013ad8 <tcp_receive+0x2c4>)
 80139aa:	681a      	ldr	r2, [r3, #0]
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139b0:	1ad3      	subs	r3, r2, r3
 80139b2:	3b01      	subs	r3, #1
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	f2c0 814d 	blt.w	8013c54 <tcp_receive+0x440>
 80139ba:	4b47      	ldr	r3, [pc, #284]	; (8013ad8 <tcp_receive+0x2c4>)
 80139bc:	681a      	ldr	r2, [r3, #0]
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80139c2:	1ad3      	subs	r3, r2, r3
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	f300 8145 	bgt.w	8013c54 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	8b5b      	ldrh	r3, [r3, #26]
 80139ce:	f003 0304 	and.w	r3, r3, #4
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d010      	beq.n	80139f8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	8b5b      	ldrh	r3, [r3, #26]
 80139da:	f023 0304 	bic.w	r3, r3, #4
 80139de:	b29a      	uxth	r2, r3
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	2200      	movs	r2, #0
 80139f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	2200      	movs	r2, #0
 80139fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013a06:	10db      	asrs	r3, r3, #3
 8013a08:	b21b      	sxth	r3, r3
 8013a0a:	b29a      	uxth	r2, r3
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013a12:	b29b      	uxth	r3, r3
 8013a14:	4413      	add	r3, r2
 8013a16:	b29b      	uxth	r3, r3
 8013a18:	b21a      	sxth	r2, r3
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013a20:	4b2d      	ldr	r3, [pc, #180]	; (8013ad8 <tcp_receive+0x2c4>)
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	b29a      	uxth	r2, r3
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a2a:	b29b      	uxth	r3, r3
 8013a2c:	1ad3      	subs	r3, r2, r3
 8013a2e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	2200      	movs	r2, #0
 8013a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8013a38:	4b27      	ldr	r3, [pc, #156]	; (8013ad8 <tcp_receive+0x2c4>)
 8013a3a:	681a      	ldr	r2, [r3, #0]
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	7d1b      	ldrb	r3, [r3, #20]
 8013a44:	2b03      	cmp	r3, #3
 8013a46:	f240 8096 	bls.w	8013b76 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013a56:	429a      	cmp	r2, r3
 8013a58:	d244      	bcs.n	8013ae4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	8b5b      	ldrh	r3, [r3, #26]
 8013a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d001      	beq.n	8013a6a <tcp_receive+0x256>
 8013a66:	2301      	movs	r3, #1
 8013a68:	e000      	b.n	8013a6c <tcp_receive+0x258>
 8013a6a:	2302      	movs	r3, #2
 8013a6c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013a70:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013a74:	b29a      	uxth	r2, r3
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013a7a:	fb12 f303 	smulbb	r3, r2, r3
 8013a7e:	b29b      	uxth	r3, r3
 8013a80:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013a82:	4293      	cmp	r3, r2
 8013a84:	bf28      	it	cs
 8013a86:	4613      	movcs	r3, r2
 8013a88:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013a90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013a92:	4413      	add	r3, r2
 8013a94:	b29a      	uxth	r2, r3
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	d309      	bcc.n	8013ab4 <tcp_receive+0x2a0>
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013aa6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013aa8:	4413      	add	r3, r2
 8013aaa:	b29a      	uxth	r2, r3
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013ab2:	e060      	b.n	8013b76 <tcp_receive+0x362>
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013aba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013abe:	e05a      	b.n	8013b76 <tcp_receive+0x362>
 8013ac0:	08021624 	.word	0x08021624
 8013ac4:	08021954 	.word	0x08021954
 8013ac8:	08021670 	.word	0x08021670
 8013acc:	08021970 	.word	0x08021970
 8013ad0:	200008c0 	.word	0x200008c0
 8013ad4:	200008b4 	.word	0x200008b4
 8013ad8:	200008b8 	.word	0x200008b8
 8013adc:	200008a4 	.word	0x200008a4
 8013ae0:	200008be 	.word	0x200008be
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013aea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013aec:	4413      	add	r3, r2
 8013aee:	b29a      	uxth	r2, r3
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013af6:	429a      	cmp	r2, r3
 8013af8:	d309      	bcc.n	8013b0e <tcp_receive+0x2fa>
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013b00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013b02:	4413      	add	r3, r2
 8013b04:	b29a      	uxth	r2, r3
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8013b0c:	e004      	b.n	8013b18 <tcp_receive+0x304>
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013b24:	429a      	cmp	r2, r3
 8013b26:	d326      	bcc.n	8013b76 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013b34:	1ad3      	subs	r3, r2, r3
 8013b36:	b29a      	uxth	r2, r3
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b48:	4413      	add	r3, r2
 8013b4a:	b29a      	uxth	r2, r3
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013b52:	429a      	cmp	r2, r3
 8013b54:	d30a      	bcc.n	8013b6c <tcp_receive+0x358>
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b60:	4413      	add	r3, r2
 8013b62:	b29a      	uxth	r2, r3
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013b6a:	e004      	b.n	8013b76 <tcp_receive+0x362>
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b72:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b7e:	4a98      	ldr	r2, [pc, #608]	; (8013de0 <tcp_receive+0x5cc>)
 8013b80:	6878      	ldr	r0, [r7, #4]
 8013b82:	f7ff fdcb 	bl	801371c <tcp_free_acked_segments>
 8013b86:	4602      	mov	r2, r0
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b94:	4a93      	ldr	r2, [pc, #588]	; (8013de4 <tcp_receive+0x5d0>)
 8013b96:	6878      	ldr	r0, [r7, #4]
 8013b98:	f7ff fdc0 	bl	801371c <tcp_free_acked_segments>
 8013b9c:	4602      	mov	r2, r0
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d104      	bne.n	8013bb4 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013bb0:	861a      	strh	r2, [r3, #48]	; 0x30
 8013bb2:	e002      	b.n	8013bba <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d103      	bne.n	8013bd0 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	2200      	movs	r2, #0
 8013bcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013bd6:	4b84      	ldr	r3, [pc, #528]	; (8013de8 <tcp_receive+0x5d4>)
 8013bd8:	881b      	ldrh	r3, [r3, #0]
 8013bda:	4413      	add	r3, r2
 8013bdc:	b29a      	uxth	r2, r3
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	8b5b      	ldrh	r3, [r3, #26]
 8013be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d035      	beq.n	8013c5c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d118      	bne.n	8013c2a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d00c      	beq.n	8013c1a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c08:	68db      	ldr	r3, [r3, #12]
 8013c0a:	685b      	ldr	r3, [r3, #4]
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f7fa ff72 	bl	800eaf6 <lwip_htonl>
 8013c12:	4603      	mov	r3, r0
 8013c14:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	dc20      	bgt.n	8013c5c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	8b5b      	ldrh	r3, [r3, #26]
 8013c1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013c22:	b29a      	uxth	r2, r3
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013c28:	e018      	b.n	8013c5c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c32:	68db      	ldr	r3, [r3, #12]
 8013c34:	685b      	ldr	r3, [r3, #4]
 8013c36:	4618      	mov	r0, r3
 8013c38:	f7fa ff5d 	bl	800eaf6 <lwip_htonl>
 8013c3c:	4603      	mov	r3, r0
 8013c3e:	1ae3      	subs	r3, r4, r3
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	dc0b      	bgt.n	8013c5c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	8b5b      	ldrh	r3, [r3, #26]
 8013c48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013c4c:	b29a      	uxth	r2, r3
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013c52:	e003      	b.n	8013c5c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013c54:	6878      	ldr	r0, [r7, #4]
 8013c56:	f002 fbdf 	bl	8016418 <tcp_send_empty_ack>
 8013c5a:	e000      	b.n	8013c5e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013c5c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d05b      	beq.n	8013d1e <tcp_receive+0x50a>
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013c6a:	4b60      	ldr	r3, [pc, #384]	; (8013dec <tcp_receive+0x5d8>)
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	1ad3      	subs	r3, r2, r3
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	da54      	bge.n	8013d1e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013c74:	4b5e      	ldr	r3, [pc, #376]	; (8013df0 <tcp_receive+0x5dc>)
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	b29a      	uxth	r2, r3
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c7e:	b29b      	uxth	r3, r3
 8013c80:	1ad3      	subs	r3, r2, r3
 8013c82:	b29b      	uxth	r3, r3
 8013c84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013c88:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013c92:	10db      	asrs	r3, r3, #3
 8013c94:	b21b      	sxth	r3, r3
 8013c96:	b29b      	uxth	r3, r3
 8013c98:	1ad3      	subs	r3, r2, r3
 8013c9a:	b29b      	uxth	r3, r3
 8013c9c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013ca6:	b29a      	uxth	r2, r3
 8013ca8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013cac:	4413      	add	r3, r2
 8013cae:	b29b      	uxth	r3, r3
 8013cb0:	b21a      	sxth	r2, r3
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8013cb6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	da05      	bge.n	8013cca <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8013cbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013cc2:	425b      	negs	r3, r3
 8013cc4:	b29b      	uxth	r3, r3
 8013cc6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8013cca:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013cd4:	109b      	asrs	r3, r3, #2
 8013cd6:	b21b      	sxth	r3, r3
 8013cd8:	b29b      	uxth	r3, r3
 8013cda:	1ad3      	subs	r3, r2, r3
 8013cdc:	b29b      	uxth	r3, r3
 8013cde:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013ce8:	b29a      	uxth	r2, r3
 8013cea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013cee:	4413      	add	r3, r2
 8013cf0:	b29b      	uxth	r3, r3
 8013cf2:	b21a      	sxth	r2, r3
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013cfe:	10db      	asrs	r3, r3, #3
 8013d00:	b21b      	sxth	r3, r3
 8013d02:	b29a      	uxth	r2, r3
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013d0a:	b29b      	uxth	r3, r3
 8013d0c:	4413      	add	r3, r2
 8013d0e:	b29b      	uxth	r3, r3
 8013d10:	b21a      	sxth	r2, r3
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013d1e:	4b35      	ldr	r3, [pc, #212]	; (8013df4 <tcp_receive+0x5e0>)
 8013d20:	881b      	ldrh	r3, [r3, #0]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	f000 84e1 	beq.w	80146ea <tcp_receive+0xed6>
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	7d1b      	ldrb	r3, [r3, #20]
 8013d2c:	2b06      	cmp	r3, #6
 8013d2e:	f200 84dc 	bhi.w	80146ea <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013d36:	4b30      	ldr	r3, [pc, #192]	; (8013df8 <tcp_receive+0x5e4>)
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	1ad3      	subs	r3, r2, r3
 8013d3c:	3b01      	subs	r3, #1
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	f2c0 808e 	blt.w	8013e60 <tcp_receive+0x64c>
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013d48:	4b2a      	ldr	r3, [pc, #168]	; (8013df4 <tcp_receive+0x5e0>)
 8013d4a:	881b      	ldrh	r3, [r3, #0]
 8013d4c:	4619      	mov	r1, r3
 8013d4e:	4b2a      	ldr	r3, [pc, #168]	; (8013df8 <tcp_receive+0x5e4>)
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	440b      	add	r3, r1
 8013d54:	1ad3      	subs	r3, r2, r3
 8013d56:	3301      	adds	r3, #1
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	f300 8081 	bgt.w	8013e60 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013d5e:	4b27      	ldr	r3, [pc, #156]	; (8013dfc <tcp_receive+0x5e8>)
 8013d60:	685b      	ldr	r3, [r3, #4]
 8013d62:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013d68:	4b23      	ldr	r3, [pc, #140]	; (8013df8 <tcp_receive+0x5e4>)
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	1ad3      	subs	r3, r2, r3
 8013d6e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013d70:	4b22      	ldr	r3, [pc, #136]	; (8013dfc <tcp_receive+0x5e8>)
 8013d72:	685b      	ldr	r3, [r3, #4]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d106      	bne.n	8013d86 <tcp_receive+0x572>
 8013d78:	4b21      	ldr	r3, [pc, #132]	; (8013e00 <tcp_receive+0x5ec>)
 8013d7a:	f240 5294 	movw	r2, #1428	; 0x594
 8013d7e:	4921      	ldr	r1, [pc, #132]	; (8013e04 <tcp_receive+0x5f0>)
 8013d80:	4821      	ldr	r0, [pc, #132]	; (8013e08 <tcp_receive+0x5f4>)
 8013d82:	f007 f831 	bl	801ade8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013d8c:	4293      	cmp	r3, r2
 8013d8e:	d906      	bls.n	8013d9e <tcp_receive+0x58a>
 8013d90:	4b1b      	ldr	r3, [pc, #108]	; (8013e00 <tcp_receive+0x5ec>)
 8013d92:	f240 5295 	movw	r2, #1429	; 0x595
 8013d96:	491d      	ldr	r1, [pc, #116]	; (8013e0c <tcp_receive+0x5f8>)
 8013d98:	481b      	ldr	r0, [pc, #108]	; (8013e08 <tcp_receive+0x5f4>)
 8013d9a:	f007 f825 	bl	801ade8 <iprintf>
      off = (u16_t)off32;
 8013d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013da4:	4b15      	ldr	r3, [pc, #84]	; (8013dfc <tcp_receive+0x5e8>)
 8013da6:	685b      	ldr	r3, [r3, #4]
 8013da8:	891b      	ldrh	r3, [r3, #8]
 8013daa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013dae:	429a      	cmp	r2, r3
 8013db0:	d906      	bls.n	8013dc0 <tcp_receive+0x5ac>
 8013db2:	4b13      	ldr	r3, [pc, #76]	; (8013e00 <tcp_receive+0x5ec>)
 8013db4:	f240 5297 	movw	r2, #1431	; 0x597
 8013db8:	4915      	ldr	r1, [pc, #84]	; (8013e10 <tcp_receive+0x5fc>)
 8013dba:	4813      	ldr	r0, [pc, #76]	; (8013e08 <tcp_receive+0x5f4>)
 8013dbc:	f007 f814 	bl	801ade8 <iprintf>
      inseg.len -= off;
 8013dc0:	4b0e      	ldr	r3, [pc, #56]	; (8013dfc <tcp_receive+0x5e8>)
 8013dc2:	891a      	ldrh	r2, [r3, #8]
 8013dc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013dc8:	1ad3      	subs	r3, r2, r3
 8013dca:	b29a      	uxth	r2, r3
 8013dcc:	4b0b      	ldr	r3, [pc, #44]	; (8013dfc <tcp_receive+0x5e8>)
 8013dce:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013dd0:	4b0a      	ldr	r3, [pc, #40]	; (8013dfc <tcp_receive+0x5e8>)
 8013dd2:	685b      	ldr	r3, [r3, #4]
 8013dd4:	891a      	ldrh	r2, [r3, #8]
 8013dd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013dda:	1ad3      	subs	r3, r2, r3
 8013ddc:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8013dde:	e029      	b.n	8013e34 <tcp_receive+0x620>
 8013de0:	0802198c 	.word	0x0802198c
 8013de4:	08021994 	.word	0x08021994
 8013de8:	200008bc 	.word	0x200008bc
 8013dec:	200008b8 	.word	0x200008b8
 8013df0:	20007ca0 	.word	0x20007ca0
 8013df4:	200008be 	.word	0x200008be
 8013df8:	200008b4 	.word	0x200008b4
 8013dfc:	20000894 	.word	0x20000894
 8013e00:	08021624 	.word	0x08021624
 8013e04:	0802199c 	.word	0x0802199c
 8013e08:	08021670 	.word	0x08021670
 8013e0c:	080219ac 	.word	0x080219ac
 8013e10:	080219bc 	.word	0x080219bc
        off -= p->len;
 8013e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e16:	895b      	ldrh	r3, [r3, #10]
 8013e18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013e1c:	1ad3      	subs	r3, r2, r3
 8013e1e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e24:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013e26:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8013e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8013e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e36:	895b      	ldrh	r3, [r3, #10]
 8013e38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013e3c:	429a      	cmp	r2, r3
 8013e3e:	d8e9      	bhi.n	8013e14 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013e40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013e44:	4619      	mov	r1, r3
 8013e46:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013e48:	f7fc f8ea 	bl	8010020 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e50:	4a91      	ldr	r2, [pc, #580]	; (8014098 <tcp_receive+0x884>)
 8013e52:	6013      	str	r3, [r2, #0]
 8013e54:	4b91      	ldr	r3, [pc, #580]	; (801409c <tcp_receive+0x888>)
 8013e56:	68db      	ldr	r3, [r3, #12]
 8013e58:	4a8f      	ldr	r2, [pc, #572]	; (8014098 <tcp_receive+0x884>)
 8013e5a:	6812      	ldr	r2, [r2, #0]
 8013e5c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013e5e:	e00d      	b.n	8013e7c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013e60:	4b8d      	ldr	r3, [pc, #564]	; (8014098 <tcp_receive+0x884>)
 8013e62:	681a      	ldr	r2, [r3, #0]
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e68:	1ad3      	subs	r3, r2, r3
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	da06      	bge.n	8013e7c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	8b5b      	ldrh	r3, [r3, #26]
 8013e72:	f043 0302 	orr.w	r3, r3, #2
 8013e76:	b29a      	uxth	r2, r3
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013e7c:	4b86      	ldr	r3, [pc, #536]	; (8014098 <tcp_receive+0x884>)
 8013e7e:	681a      	ldr	r2, [r3, #0]
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e84:	1ad3      	subs	r3, r2, r3
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	f2c0 842a 	blt.w	80146e0 <tcp_receive+0xecc>
 8013e8c:	4b82      	ldr	r3, [pc, #520]	; (8014098 <tcp_receive+0x884>)
 8013e8e:	681a      	ldr	r2, [r3, #0]
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e94:	6879      	ldr	r1, [r7, #4]
 8013e96:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013e98:	440b      	add	r3, r1
 8013e9a:	1ad3      	subs	r3, r2, r3
 8013e9c:	3301      	adds	r3, #1
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	f300 841e 	bgt.w	80146e0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013ea8:	4b7b      	ldr	r3, [pc, #492]	; (8014098 <tcp_receive+0x884>)
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	429a      	cmp	r2, r3
 8013eae:	f040 829a 	bne.w	80143e6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8013eb2:	4b7a      	ldr	r3, [pc, #488]	; (801409c <tcp_receive+0x888>)
 8013eb4:	891c      	ldrh	r4, [r3, #8]
 8013eb6:	4b79      	ldr	r3, [pc, #484]	; (801409c <tcp_receive+0x888>)
 8013eb8:	68db      	ldr	r3, [r3, #12]
 8013eba:	899b      	ldrh	r3, [r3, #12]
 8013ebc:	b29b      	uxth	r3, r3
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7fa fe04 	bl	800eacc <lwip_htons>
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	b2db      	uxtb	r3, r3
 8013ec8:	f003 0303 	and.w	r3, r3, #3
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d001      	beq.n	8013ed4 <tcp_receive+0x6c0>
 8013ed0:	2301      	movs	r3, #1
 8013ed2:	e000      	b.n	8013ed6 <tcp_receive+0x6c2>
 8013ed4:	2300      	movs	r3, #0
 8013ed6:	4423      	add	r3, r4
 8013ed8:	b29a      	uxth	r2, r3
 8013eda:	4b71      	ldr	r3, [pc, #452]	; (80140a0 <tcp_receive+0x88c>)
 8013edc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013ee2:	4b6f      	ldr	r3, [pc, #444]	; (80140a0 <tcp_receive+0x88c>)
 8013ee4:	881b      	ldrh	r3, [r3, #0]
 8013ee6:	429a      	cmp	r2, r3
 8013ee8:	d275      	bcs.n	8013fd6 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013eea:	4b6c      	ldr	r3, [pc, #432]	; (801409c <tcp_receive+0x888>)
 8013eec:	68db      	ldr	r3, [r3, #12]
 8013eee:	899b      	ldrh	r3, [r3, #12]
 8013ef0:	b29b      	uxth	r3, r3
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	f7fa fdea 	bl	800eacc <lwip_htons>
 8013ef8:	4603      	mov	r3, r0
 8013efa:	b2db      	uxtb	r3, r3
 8013efc:	f003 0301 	and.w	r3, r3, #1
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d01f      	beq.n	8013f44 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013f04:	4b65      	ldr	r3, [pc, #404]	; (801409c <tcp_receive+0x888>)
 8013f06:	68db      	ldr	r3, [r3, #12]
 8013f08:	899b      	ldrh	r3, [r3, #12]
 8013f0a:	b29b      	uxth	r3, r3
 8013f0c:	b21b      	sxth	r3, r3
 8013f0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013f12:	b21c      	sxth	r4, r3
 8013f14:	4b61      	ldr	r3, [pc, #388]	; (801409c <tcp_receive+0x888>)
 8013f16:	68db      	ldr	r3, [r3, #12]
 8013f18:	899b      	ldrh	r3, [r3, #12]
 8013f1a:	b29b      	uxth	r3, r3
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	f7fa fdd5 	bl	800eacc <lwip_htons>
 8013f22:	4603      	mov	r3, r0
 8013f24:	b2db      	uxtb	r3, r3
 8013f26:	b29b      	uxth	r3, r3
 8013f28:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013f2c:	b29b      	uxth	r3, r3
 8013f2e:	4618      	mov	r0, r3
 8013f30:	f7fa fdcc 	bl	800eacc <lwip_htons>
 8013f34:	4603      	mov	r3, r0
 8013f36:	b21b      	sxth	r3, r3
 8013f38:	4323      	orrs	r3, r4
 8013f3a:	b21a      	sxth	r2, r3
 8013f3c:	4b57      	ldr	r3, [pc, #348]	; (801409c <tcp_receive+0x888>)
 8013f3e:	68db      	ldr	r3, [r3, #12]
 8013f40:	b292      	uxth	r2, r2
 8013f42:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013f48:	4b54      	ldr	r3, [pc, #336]	; (801409c <tcp_receive+0x888>)
 8013f4a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013f4c:	4b53      	ldr	r3, [pc, #332]	; (801409c <tcp_receive+0x888>)
 8013f4e:	68db      	ldr	r3, [r3, #12]
 8013f50:	899b      	ldrh	r3, [r3, #12]
 8013f52:	b29b      	uxth	r3, r3
 8013f54:	4618      	mov	r0, r3
 8013f56:	f7fa fdb9 	bl	800eacc <lwip_htons>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	b2db      	uxtb	r3, r3
 8013f5e:	f003 0302 	and.w	r3, r3, #2
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d005      	beq.n	8013f72 <tcp_receive+0x75e>
            inseg.len -= 1;
 8013f66:	4b4d      	ldr	r3, [pc, #308]	; (801409c <tcp_receive+0x888>)
 8013f68:	891b      	ldrh	r3, [r3, #8]
 8013f6a:	3b01      	subs	r3, #1
 8013f6c:	b29a      	uxth	r2, r3
 8013f6e:	4b4b      	ldr	r3, [pc, #300]	; (801409c <tcp_receive+0x888>)
 8013f70:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013f72:	4b4a      	ldr	r3, [pc, #296]	; (801409c <tcp_receive+0x888>)
 8013f74:	685a      	ldr	r2, [r3, #4]
 8013f76:	4b49      	ldr	r3, [pc, #292]	; (801409c <tcp_receive+0x888>)
 8013f78:	891b      	ldrh	r3, [r3, #8]
 8013f7a:	4619      	mov	r1, r3
 8013f7c:	4610      	mov	r0, r2
 8013f7e:	f7fb ff4f 	bl	800fe20 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013f82:	4b46      	ldr	r3, [pc, #280]	; (801409c <tcp_receive+0x888>)
 8013f84:	891c      	ldrh	r4, [r3, #8]
 8013f86:	4b45      	ldr	r3, [pc, #276]	; (801409c <tcp_receive+0x888>)
 8013f88:	68db      	ldr	r3, [r3, #12]
 8013f8a:	899b      	ldrh	r3, [r3, #12]
 8013f8c:	b29b      	uxth	r3, r3
 8013f8e:	4618      	mov	r0, r3
 8013f90:	f7fa fd9c 	bl	800eacc <lwip_htons>
 8013f94:	4603      	mov	r3, r0
 8013f96:	b2db      	uxtb	r3, r3
 8013f98:	f003 0303 	and.w	r3, r3, #3
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d001      	beq.n	8013fa4 <tcp_receive+0x790>
 8013fa0:	2301      	movs	r3, #1
 8013fa2:	e000      	b.n	8013fa6 <tcp_receive+0x792>
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	4423      	add	r3, r4
 8013fa8:	b29a      	uxth	r2, r3
 8013faa:	4b3d      	ldr	r3, [pc, #244]	; (80140a0 <tcp_receive+0x88c>)
 8013fac:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013fae:	4b3c      	ldr	r3, [pc, #240]	; (80140a0 <tcp_receive+0x88c>)
 8013fb0:	881b      	ldrh	r3, [r3, #0]
 8013fb2:	461a      	mov	r2, r3
 8013fb4:	4b38      	ldr	r3, [pc, #224]	; (8014098 <tcp_receive+0x884>)
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	441a      	add	r2, r3
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fbe:	6879      	ldr	r1, [r7, #4]
 8013fc0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013fc2:	440b      	add	r3, r1
 8013fc4:	429a      	cmp	r2, r3
 8013fc6:	d006      	beq.n	8013fd6 <tcp_receive+0x7c2>
 8013fc8:	4b36      	ldr	r3, [pc, #216]	; (80140a4 <tcp_receive+0x890>)
 8013fca:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8013fce:	4936      	ldr	r1, [pc, #216]	; (80140a8 <tcp_receive+0x894>)
 8013fd0:	4836      	ldr	r0, [pc, #216]	; (80140ac <tcp_receive+0x898>)
 8013fd2:	f006 ff09 	bl	801ade8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	f000 80e7 	beq.w	80141ae <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013fe0:	4b2e      	ldr	r3, [pc, #184]	; (801409c <tcp_receive+0x888>)
 8013fe2:	68db      	ldr	r3, [r3, #12]
 8013fe4:	899b      	ldrh	r3, [r3, #12]
 8013fe6:	b29b      	uxth	r3, r3
 8013fe8:	4618      	mov	r0, r3
 8013fea:	f7fa fd6f 	bl	800eacc <lwip_htons>
 8013fee:	4603      	mov	r3, r0
 8013ff0:	b2db      	uxtb	r3, r3
 8013ff2:	f003 0301 	and.w	r3, r3, #1
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d010      	beq.n	801401c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013ffa:	e00a      	b.n	8014012 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014000:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014006:	681a      	ldr	r2, [r3, #0]
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801400c:	68f8      	ldr	r0, [r7, #12]
 801400e:	f7fd fcc9 	bl	80119a4 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014016:	2b00      	cmp	r3, #0
 8014018:	d1f0      	bne.n	8013ffc <tcp_receive+0x7e8>
 801401a:	e0c8      	b.n	80141ae <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014020:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8014022:	e052      	b.n	80140ca <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014026:	68db      	ldr	r3, [r3, #12]
 8014028:	899b      	ldrh	r3, [r3, #12]
 801402a:	b29b      	uxth	r3, r3
 801402c:	4618      	mov	r0, r3
 801402e:	f7fa fd4d 	bl	800eacc <lwip_htons>
 8014032:	4603      	mov	r3, r0
 8014034:	b2db      	uxtb	r3, r3
 8014036:	f003 0301 	and.w	r3, r3, #1
 801403a:	2b00      	cmp	r3, #0
 801403c:	d03d      	beq.n	80140ba <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801403e:	4b17      	ldr	r3, [pc, #92]	; (801409c <tcp_receive+0x888>)
 8014040:	68db      	ldr	r3, [r3, #12]
 8014042:	899b      	ldrh	r3, [r3, #12]
 8014044:	b29b      	uxth	r3, r3
 8014046:	4618      	mov	r0, r3
 8014048:	f7fa fd40 	bl	800eacc <lwip_htons>
 801404c:	4603      	mov	r3, r0
 801404e:	b2db      	uxtb	r3, r3
 8014050:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014054:	2b00      	cmp	r3, #0
 8014056:	d130      	bne.n	80140ba <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014058:	4b10      	ldr	r3, [pc, #64]	; (801409c <tcp_receive+0x888>)
 801405a:	68db      	ldr	r3, [r3, #12]
 801405c:	899b      	ldrh	r3, [r3, #12]
 801405e:	b29c      	uxth	r4, r3
 8014060:	2001      	movs	r0, #1
 8014062:	f7fa fd33 	bl	800eacc <lwip_htons>
 8014066:	4603      	mov	r3, r0
 8014068:	461a      	mov	r2, r3
 801406a:	4b0c      	ldr	r3, [pc, #48]	; (801409c <tcp_receive+0x888>)
 801406c:	68db      	ldr	r3, [r3, #12]
 801406e:	4322      	orrs	r2, r4
 8014070:	b292      	uxth	r2, r2
 8014072:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014074:	4b09      	ldr	r3, [pc, #36]	; (801409c <tcp_receive+0x888>)
 8014076:	891c      	ldrh	r4, [r3, #8]
 8014078:	4b08      	ldr	r3, [pc, #32]	; (801409c <tcp_receive+0x888>)
 801407a:	68db      	ldr	r3, [r3, #12]
 801407c:	899b      	ldrh	r3, [r3, #12]
 801407e:	b29b      	uxth	r3, r3
 8014080:	4618      	mov	r0, r3
 8014082:	f7fa fd23 	bl	800eacc <lwip_htons>
 8014086:	4603      	mov	r3, r0
 8014088:	b2db      	uxtb	r3, r3
 801408a:	f003 0303 	and.w	r3, r3, #3
 801408e:	2b00      	cmp	r3, #0
 8014090:	d00e      	beq.n	80140b0 <tcp_receive+0x89c>
 8014092:	2301      	movs	r3, #1
 8014094:	e00d      	b.n	80140b2 <tcp_receive+0x89e>
 8014096:	bf00      	nop
 8014098:	200008b4 	.word	0x200008b4
 801409c:	20000894 	.word	0x20000894
 80140a0:	200008be 	.word	0x200008be
 80140a4:	08021624 	.word	0x08021624
 80140a8:	080219cc 	.word	0x080219cc
 80140ac:	08021670 	.word	0x08021670
 80140b0:	2300      	movs	r3, #0
 80140b2:	4423      	add	r3, r4
 80140b4:	b29a      	uxth	r2, r3
 80140b6:	4b98      	ldr	r3, [pc, #608]	; (8014318 <tcp_receive+0xb04>)
 80140b8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80140ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140bc:	613b      	str	r3, [r7, #16]
              next = next->next;
 80140be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80140c4:	6938      	ldr	r0, [r7, #16]
 80140c6:	f7fd fc6d 	bl	80119a4 <tcp_seg_free>
            while (next &&
 80140ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d00e      	beq.n	80140ee <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80140d0:	4b91      	ldr	r3, [pc, #580]	; (8014318 <tcp_receive+0xb04>)
 80140d2:	881b      	ldrh	r3, [r3, #0]
 80140d4:	461a      	mov	r2, r3
 80140d6:	4b91      	ldr	r3, [pc, #580]	; (801431c <tcp_receive+0xb08>)
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	441a      	add	r2, r3
 80140dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140de:	68db      	ldr	r3, [r3, #12]
 80140e0:	685b      	ldr	r3, [r3, #4]
 80140e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80140e4:	8909      	ldrh	r1, [r1, #8]
 80140e6:	440b      	add	r3, r1
 80140e8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	da9a      	bge.n	8014024 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80140ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d059      	beq.n	80141a8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80140f4:	4b88      	ldr	r3, [pc, #544]	; (8014318 <tcp_receive+0xb04>)
 80140f6:	881b      	ldrh	r3, [r3, #0]
 80140f8:	461a      	mov	r2, r3
 80140fa:	4b88      	ldr	r3, [pc, #544]	; (801431c <tcp_receive+0xb08>)
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	441a      	add	r2, r3
 8014100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014102:	68db      	ldr	r3, [r3, #12]
 8014104:	685b      	ldr	r3, [r3, #4]
 8014106:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014108:	2b00      	cmp	r3, #0
 801410a:	dd4d      	ble.n	80141a8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801410c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801410e:	68db      	ldr	r3, [r3, #12]
 8014110:	685b      	ldr	r3, [r3, #4]
 8014112:	b29a      	uxth	r2, r3
 8014114:	4b81      	ldr	r3, [pc, #516]	; (801431c <tcp_receive+0xb08>)
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	b29b      	uxth	r3, r3
 801411a:	1ad3      	subs	r3, r2, r3
 801411c:	b29a      	uxth	r2, r3
 801411e:	4b80      	ldr	r3, [pc, #512]	; (8014320 <tcp_receive+0xb0c>)
 8014120:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014122:	4b7f      	ldr	r3, [pc, #508]	; (8014320 <tcp_receive+0xb0c>)
 8014124:	68db      	ldr	r3, [r3, #12]
 8014126:	899b      	ldrh	r3, [r3, #12]
 8014128:	b29b      	uxth	r3, r3
 801412a:	4618      	mov	r0, r3
 801412c:	f7fa fcce 	bl	800eacc <lwip_htons>
 8014130:	4603      	mov	r3, r0
 8014132:	b2db      	uxtb	r3, r3
 8014134:	f003 0302 	and.w	r3, r3, #2
 8014138:	2b00      	cmp	r3, #0
 801413a:	d005      	beq.n	8014148 <tcp_receive+0x934>
                inseg.len -= 1;
 801413c:	4b78      	ldr	r3, [pc, #480]	; (8014320 <tcp_receive+0xb0c>)
 801413e:	891b      	ldrh	r3, [r3, #8]
 8014140:	3b01      	subs	r3, #1
 8014142:	b29a      	uxth	r2, r3
 8014144:	4b76      	ldr	r3, [pc, #472]	; (8014320 <tcp_receive+0xb0c>)
 8014146:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8014148:	4b75      	ldr	r3, [pc, #468]	; (8014320 <tcp_receive+0xb0c>)
 801414a:	685a      	ldr	r2, [r3, #4]
 801414c:	4b74      	ldr	r3, [pc, #464]	; (8014320 <tcp_receive+0xb0c>)
 801414e:	891b      	ldrh	r3, [r3, #8]
 8014150:	4619      	mov	r1, r3
 8014152:	4610      	mov	r0, r2
 8014154:	f7fb fe64 	bl	800fe20 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014158:	4b71      	ldr	r3, [pc, #452]	; (8014320 <tcp_receive+0xb0c>)
 801415a:	891c      	ldrh	r4, [r3, #8]
 801415c:	4b70      	ldr	r3, [pc, #448]	; (8014320 <tcp_receive+0xb0c>)
 801415e:	68db      	ldr	r3, [r3, #12]
 8014160:	899b      	ldrh	r3, [r3, #12]
 8014162:	b29b      	uxth	r3, r3
 8014164:	4618      	mov	r0, r3
 8014166:	f7fa fcb1 	bl	800eacc <lwip_htons>
 801416a:	4603      	mov	r3, r0
 801416c:	b2db      	uxtb	r3, r3
 801416e:	f003 0303 	and.w	r3, r3, #3
 8014172:	2b00      	cmp	r3, #0
 8014174:	d001      	beq.n	801417a <tcp_receive+0x966>
 8014176:	2301      	movs	r3, #1
 8014178:	e000      	b.n	801417c <tcp_receive+0x968>
 801417a:	2300      	movs	r3, #0
 801417c:	4423      	add	r3, r4
 801417e:	b29a      	uxth	r2, r3
 8014180:	4b65      	ldr	r3, [pc, #404]	; (8014318 <tcp_receive+0xb04>)
 8014182:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014184:	4b64      	ldr	r3, [pc, #400]	; (8014318 <tcp_receive+0xb04>)
 8014186:	881b      	ldrh	r3, [r3, #0]
 8014188:	461a      	mov	r2, r3
 801418a:	4b64      	ldr	r3, [pc, #400]	; (801431c <tcp_receive+0xb08>)
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	441a      	add	r2, r3
 8014190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014192:	68db      	ldr	r3, [r3, #12]
 8014194:	685b      	ldr	r3, [r3, #4]
 8014196:	429a      	cmp	r2, r3
 8014198:	d006      	beq.n	80141a8 <tcp_receive+0x994>
 801419a:	4b62      	ldr	r3, [pc, #392]	; (8014324 <tcp_receive+0xb10>)
 801419c:	f240 52fd 	movw	r2, #1533	; 0x5fd
 80141a0:	4961      	ldr	r1, [pc, #388]	; (8014328 <tcp_receive+0xb14>)
 80141a2:	4862      	ldr	r0, [pc, #392]	; (801432c <tcp_receive+0xb18>)
 80141a4:	f006 fe20 	bl	801ade8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80141ac:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80141ae:	4b5a      	ldr	r3, [pc, #360]	; (8014318 <tcp_receive+0xb04>)
 80141b0:	881b      	ldrh	r3, [r3, #0]
 80141b2:	461a      	mov	r2, r3
 80141b4:	4b59      	ldr	r3, [pc, #356]	; (801431c <tcp_receive+0xb08>)
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	441a      	add	r2, r3
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80141c2:	4b55      	ldr	r3, [pc, #340]	; (8014318 <tcp_receive+0xb04>)
 80141c4:	881b      	ldrh	r3, [r3, #0]
 80141c6:	429a      	cmp	r2, r3
 80141c8:	d206      	bcs.n	80141d8 <tcp_receive+0x9c4>
 80141ca:	4b56      	ldr	r3, [pc, #344]	; (8014324 <tcp_receive+0xb10>)
 80141cc:	f240 6207 	movw	r2, #1543	; 0x607
 80141d0:	4957      	ldr	r1, [pc, #348]	; (8014330 <tcp_receive+0xb1c>)
 80141d2:	4856      	ldr	r0, [pc, #344]	; (801432c <tcp_receive+0xb18>)
 80141d4:	f006 fe08 	bl	801ade8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80141dc:	4b4e      	ldr	r3, [pc, #312]	; (8014318 <tcp_receive+0xb04>)
 80141de:	881b      	ldrh	r3, [r3, #0]
 80141e0:	1ad3      	subs	r3, r2, r3
 80141e2:	b29a      	uxth	r2, r3
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80141e8:	6878      	ldr	r0, [r7, #4]
 80141ea:	f7fc fda1 	bl	8010d30 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80141ee:	4b4c      	ldr	r3, [pc, #304]	; (8014320 <tcp_receive+0xb0c>)
 80141f0:	685b      	ldr	r3, [r3, #4]
 80141f2:	891b      	ldrh	r3, [r3, #8]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d006      	beq.n	8014206 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80141f8:	4b49      	ldr	r3, [pc, #292]	; (8014320 <tcp_receive+0xb0c>)
 80141fa:	685b      	ldr	r3, [r3, #4]
 80141fc:	4a4d      	ldr	r2, [pc, #308]	; (8014334 <tcp_receive+0xb20>)
 80141fe:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014200:	4b47      	ldr	r3, [pc, #284]	; (8014320 <tcp_receive+0xb0c>)
 8014202:	2200      	movs	r2, #0
 8014204:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014206:	4b46      	ldr	r3, [pc, #280]	; (8014320 <tcp_receive+0xb0c>)
 8014208:	68db      	ldr	r3, [r3, #12]
 801420a:	899b      	ldrh	r3, [r3, #12]
 801420c:	b29b      	uxth	r3, r3
 801420e:	4618      	mov	r0, r3
 8014210:	f7fa fc5c 	bl	800eacc <lwip_htons>
 8014214:	4603      	mov	r3, r0
 8014216:	b2db      	uxtb	r3, r3
 8014218:	f003 0301 	and.w	r3, r3, #1
 801421c:	2b00      	cmp	r3, #0
 801421e:	f000 80b8 	beq.w	8014392 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8014222:	4b45      	ldr	r3, [pc, #276]	; (8014338 <tcp_receive+0xb24>)
 8014224:	781b      	ldrb	r3, [r3, #0]
 8014226:	f043 0320 	orr.w	r3, r3, #32
 801422a:	b2da      	uxtb	r2, r3
 801422c:	4b42      	ldr	r3, [pc, #264]	; (8014338 <tcp_receive+0xb24>)
 801422e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014230:	e0af      	b.n	8014392 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014236:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801423c:	68db      	ldr	r3, [r3, #12]
 801423e:	685b      	ldr	r3, [r3, #4]
 8014240:	4a36      	ldr	r2, [pc, #216]	; (801431c <tcp_receive+0xb08>)
 8014242:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014244:	68bb      	ldr	r3, [r7, #8]
 8014246:	891b      	ldrh	r3, [r3, #8]
 8014248:	461c      	mov	r4, r3
 801424a:	68bb      	ldr	r3, [r7, #8]
 801424c:	68db      	ldr	r3, [r3, #12]
 801424e:	899b      	ldrh	r3, [r3, #12]
 8014250:	b29b      	uxth	r3, r3
 8014252:	4618      	mov	r0, r3
 8014254:	f7fa fc3a 	bl	800eacc <lwip_htons>
 8014258:	4603      	mov	r3, r0
 801425a:	b2db      	uxtb	r3, r3
 801425c:	f003 0303 	and.w	r3, r3, #3
 8014260:	2b00      	cmp	r3, #0
 8014262:	d001      	beq.n	8014268 <tcp_receive+0xa54>
 8014264:	2301      	movs	r3, #1
 8014266:	e000      	b.n	801426a <tcp_receive+0xa56>
 8014268:	2300      	movs	r3, #0
 801426a:	191a      	adds	r2, r3, r4
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014270:	441a      	add	r2, r3
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801427a:	461c      	mov	r4, r3
 801427c:	68bb      	ldr	r3, [r7, #8]
 801427e:	891b      	ldrh	r3, [r3, #8]
 8014280:	461d      	mov	r5, r3
 8014282:	68bb      	ldr	r3, [r7, #8]
 8014284:	68db      	ldr	r3, [r3, #12]
 8014286:	899b      	ldrh	r3, [r3, #12]
 8014288:	b29b      	uxth	r3, r3
 801428a:	4618      	mov	r0, r3
 801428c:	f7fa fc1e 	bl	800eacc <lwip_htons>
 8014290:	4603      	mov	r3, r0
 8014292:	b2db      	uxtb	r3, r3
 8014294:	f003 0303 	and.w	r3, r3, #3
 8014298:	2b00      	cmp	r3, #0
 801429a:	d001      	beq.n	80142a0 <tcp_receive+0xa8c>
 801429c:	2301      	movs	r3, #1
 801429e:	e000      	b.n	80142a2 <tcp_receive+0xa8e>
 80142a0:	2300      	movs	r3, #0
 80142a2:	442b      	add	r3, r5
 80142a4:	429c      	cmp	r4, r3
 80142a6:	d206      	bcs.n	80142b6 <tcp_receive+0xaa2>
 80142a8:	4b1e      	ldr	r3, [pc, #120]	; (8014324 <tcp_receive+0xb10>)
 80142aa:	f240 622c 	movw	r2, #1580	; 0x62c
 80142ae:	4923      	ldr	r1, [pc, #140]	; (801433c <tcp_receive+0xb28>)
 80142b0:	481e      	ldr	r0, [pc, #120]	; (801432c <tcp_receive+0xb18>)
 80142b2:	f006 fd99 	bl	801ade8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80142b6:	68bb      	ldr	r3, [r7, #8]
 80142b8:	891b      	ldrh	r3, [r3, #8]
 80142ba:	461c      	mov	r4, r3
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	68db      	ldr	r3, [r3, #12]
 80142c0:	899b      	ldrh	r3, [r3, #12]
 80142c2:	b29b      	uxth	r3, r3
 80142c4:	4618      	mov	r0, r3
 80142c6:	f7fa fc01 	bl	800eacc <lwip_htons>
 80142ca:	4603      	mov	r3, r0
 80142cc:	b2db      	uxtb	r3, r3
 80142ce:	f003 0303 	and.w	r3, r3, #3
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d001      	beq.n	80142da <tcp_receive+0xac6>
 80142d6:	2301      	movs	r3, #1
 80142d8:	e000      	b.n	80142dc <tcp_receive+0xac8>
 80142da:	2300      	movs	r3, #0
 80142dc:	1919      	adds	r1, r3, r4
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80142e2:	b28b      	uxth	r3, r1
 80142e4:	1ad3      	subs	r3, r2, r3
 80142e6:	b29a      	uxth	r2, r3
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80142ec:	6878      	ldr	r0, [r7, #4]
 80142ee:	f7fc fd1f 	bl	8010d30 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80142f2:	68bb      	ldr	r3, [r7, #8]
 80142f4:	685b      	ldr	r3, [r3, #4]
 80142f6:	891b      	ldrh	r3, [r3, #8]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d028      	beq.n	801434e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80142fc:	4b0d      	ldr	r3, [pc, #52]	; (8014334 <tcp_receive+0xb20>)
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d01d      	beq.n	8014340 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8014304:	4b0b      	ldr	r3, [pc, #44]	; (8014334 <tcp_receive+0xb20>)
 8014306:	681a      	ldr	r2, [r3, #0]
 8014308:	68bb      	ldr	r3, [r7, #8]
 801430a:	685b      	ldr	r3, [r3, #4]
 801430c:	4619      	mov	r1, r3
 801430e:	4610      	mov	r0, r2
 8014310:	f7fb ffda 	bl	80102c8 <pbuf_cat>
 8014314:	e018      	b.n	8014348 <tcp_receive+0xb34>
 8014316:	bf00      	nop
 8014318:	200008be 	.word	0x200008be
 801431c:	200008b4 	.word	0x200008b4
 8014320:	20000894 	.word	0x20000894
 8014324:	08021624 	.word	0x08021624
 8014328:	08021a04 	.word	0x08021a04
 801432c:	08021670 	.word	0x08021670
 8014330:	08021a40 	.word	0x08021a40
 8014334:	200008c4 	.word	0x200008c4
 8014338:	200008c1 	.word	0x200008c1
 801433c:	08021a60 	.word	0x08021a60
            } else {
              recv_data = cseg->p;
 8014340:	68bb      	ldr	r3, [r7, #8]
 8014342:	685b      	ldr	r3, [r3, #4]
 8014344:	4a70      	ldr	r2, [pc, #448]	; (8014508 <tcp_receive+0xcf4>)
 8014346:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014348:	68bb      	ldr	r3, [r7, #8]
 801434a:	2200      	movs	r2, #0
 801434c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801434e:	68bb      	ldr	r3, [r7, #8]
 8014350:	68db      	ldr	r3, [r3, #12]
 8014352:	899b      	ldrh	r3, [r3, #12]
 8014354:	b29b      	uxth	r3, r3
 8014356:	4618      	mov	r0, r3
 8014358:	f7fa fbb8 	bl	800eacc <lwip_htons>
 801435c:	4603      	mov	r3, r0
 801435e:	b2db      	uxtb	r3, r3
 8014360:	f003 0301 	and.w	r3, r3, #1
 8014364:	2b00      	cmp	r3, #0
 8014366:	d00d      	beq.n	8014384 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014368:	4b68      	ldr	r3, [pc, #416]	; (801450c <tcp_receive+0xcf8>)
 801436a:	781b      	ldrb	r3, [r3, #0]
 801436c:	f043 0320 	orr.w	r3, r3, #32
 8014370:	b2da      	uxtb	r2, r3
 8014372:	4b66      	ldr	r3, [pc, #408]	; (801450c <tcp_receive+0xcf8>)
 8014374:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	7d1b      	ldrb	r3, [r3, #20]
 801437a:	2b04      	cmp	r3, #4
 801437c:	d102      	bne.n	8014384 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	2207      	movs	r2, #7
 8014382:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014384:	68bb      	ldr	r3, [r7, #8]
 8014386:	681a      	ldr	r2, [r3, #0]
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801438c:	68b8      	ldr	r0, [r7, #8]
 801438e:	f7fd fb09 	bl	80119a4 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014396:	2b00      	cmp	r3, #0
 8014398:	d008      	beq.n	80143ac <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801439e:	68db      	ldr	r3, [r3, #12]
 80143a0:	685a      	ldr	r2, [r3, #4]
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80143a6:	429a      	cmp	r2, r3
 80143a8:	f43f af43 	beq.w	8014232 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	8b5b      	ldrh	r3, [r3, #26]
 80143b0:	f003 0301 	and.w	r3, r3, #1
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d00e      	beq.n	80143d6 <tcp_receive+0xbc2>
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	8b5b      	ldrh	r3, [r3, #26]
 80143bc:	f023 0301 	bic.w	r3, r3, #1
 80143c0:	b29a      	uxth	r2, r3
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	835a      	strh	r2, [r3, #26]
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	8b5b      	ldrh	r3, [r3, #26]
 80143ca:	f043 0302 	orr.w	r3, r3, #2
 80143ce:	b29a      	uxth	r2, r3
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80143d4:	e188      	b.n	80146e8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	8b5b      	ldrh	r3, [r3, #26]
 80143da:	f043 0301 	orr.w	r3, r3, #1
 80143de:	b29a      	uxth	r2, r3
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80143e4:	e180      	b.n	80146e8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d106      	bne.n	80143fc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80143ee:	4848      	ldr	r0, [pc, #288]	; (8014510 <tcp_receive+0xcfc>)
 80143f0:	f7fd faf0 	bl	80119d4 <tcp_seg_copy>
 80143f4:	4602      	mov	r2, r0
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	675a      	str	r2, [r3, #116]	; 0x74
 80143fa:	e16d      	b.n	80146d8 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80143fc:	2300      	movs	r3, #0
 80143fe:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014404:	63bb      	str	r3, [r7, #56]	; 0x38
 8014406:	e157      	b.n	80146b8 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8014408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801440a:	68db      	ldr	r3, [r3, #12]
 801440c:	685a      	ldr	r2, [r3, #4]
 801440e:	4b41      	ldr	r3, [pc, #260]	; (8014514 <tcp_receive+0xd00>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	429a      	cmp	r2, r3
 8014414:	d11d      	bne.n	8014452 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014416:	4b3e      	ldr	r3, [pc, #248]	; (8014510 <tcp_receive+0xcfc>)
 8014418:	891a      	ldrh	r2, [r3, #8]
 801441a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801441c:	891b      	ldrh	r3, [r3, #8]
 801441e:	429a      	cmp	r2, r3
 8014420:	f240 814f 	bls.w	80146c2 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014424:	483a      	ldr	r0, [pc, #232]	; (8014510 <tcp_receive+0xcfc>)
 8014426:	f7fd fad5 	bl	80119d4 <tcp_seg_copy>
 801442a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801442c:	697b      	ldr	r3, [r7, #20]
 801442e:	2b00      	cmp	r3, #0
 8014430:	f000 8149 	beq.w	80146c6 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8014434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014436:	2b00      	cmp	r3, #0
 8014438:	d003      	beq.n	8014442 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801443a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801443c:	697a      	ldr	r2, [r7, #20]
 801443e:	601a      	str	r2, [r3, #0]
 8014440:	e002      	b.n	8014448 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	697a      	ldr	r2, [r7, #20]
 8014446:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014448:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801444a:	6978      	ldr	r0, [r7, #20]
 801444c:	f7ff f8de 	bl	801360c <tcp_oos_insert_segment>
                }
                break;
 8014450:	e139      	b.n	80146c6 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014454:	2b00      	cmp	r3, #0
 8014456:	d117      	bne.n	8014488 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014458:	4b2e      	ldr	r3, [pc, #184]	; (8014514 <tcp_receive+0xd00>)
 801445a:	681a      	ldr	r2, [r3, #0]
 801445c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801445e:	68db      	ldr	r3, [r3, #12]
 8014460:	685b      	ldr	r3, [r3, #4]
 8014462:	1ad3      	subs	r3, r2, r3
 8014464:	2b00      	cmp	r3, #0
 8014466:	da57      	bge.n	8014518 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014468:	4829      	ldr	r0, [pc, #164]	; (8014510 <tcp_receive+0xcfc>)
 801446a:	f7fd fab3 	bl	80119d4 <tcp_seg_copy>
 801446e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014470:	69bb      	ldr	r3, [r7, #24]
 8014472:	2b00      	cmp	r3, #0
 8014474:	f000 8129 	beq.w	80146ca <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	69ba      	ldr	r2, [r7, #24]
 801447c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801447e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014480:	69b8      	ldr	r0, [r7, #24]
 8014482:	f7ff f8c3 	bl	801360c <tcp_oos_insert_segment>
                  }
                  break;
 8014486:	e120      	b.n	80146ca <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014488:	4b22      	ldr	r3, [pc, #136]	; (8014514 <tcp_receive+0xd00>)
 801448a:	681a      	ldr	r2, [r3, #0]
 801448c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801448e:	68db      	ldr	r3, [r3, #12]
 8014490:	685b      	ldr	r3, [r3, #4]
 8014492:	1ad3      	subs	r3, r2, r3
 8014494:	3b01      	subs	r3, #1
 8014496:	2b00      	cmp	r3, #0
 8014498:	db3e      	blt.n	8014518 <tcp_receive+0xd04>
 801449a:	4b1e      	ldr	r3, [pc, #120]	; (8014514 <tcp_receive+0xd00>)
 801449c:	681a      	ldr	r2, [r3, #0]
 801449e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144a0:	68db      	ldr	r3, [r3, #12]
 80144a2:	685b      	ldr	r3, [r3, #4]
 80144a4:	1ad3      	subs	r3, r2, r3
 80144a6:	3301      	adds	r3, #1
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	dc35      	bgt.n	8014518 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80144ac:	4818      	ldr	r0, [pc, #96]	; (8014510 <tcp_receive+0xcfc>)
 80144ae:	f7fd fa91 	bl	80119d4 <tcp_seg_copy>
 80144b2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80144b4:	69fb      	ldr	r3, [r7, #28]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	f000 8109 	beq.w	80146ce <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80144bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144be:	68db      	ldr	r3, [r3, #12]
 80144c0:	685b      	ldr	r3, [r3, #4]
 80144c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80144c4:	8912      	ldrh	r2, [r2, #8]
 80144c6:	441a      	add	r2, r3
 80144c8:	4b12      	ldr	r3, [pc, #72]	; (8014514 <tcp_receive+0xd00>)
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	1ad3      	subs	r3, r2, r3
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	dd12      	ble.n	80144f8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80144d2:	4b10      	ldr	r3, [pc, #64]	; (8014514 <tcp_receive+0xd00>)
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	b29a      	uxth	r2, r3
 80144d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144da:	68db      	ldr	r3, [r3, #12]
 80144dc:	685b      	ldr	r3, [r3, #4]
 80144de:	b29b      	uxth	r3, r3
 80144e0:	1ad3      	subs	r3, r2, r3
 80144e2:	b29a      	uxth	r2, r3
 80144e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144e6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80144e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144ea:	685a      	ldr	r2, [r3, #4]
 80144ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144ee:	891b      	ldrh	r3, [r3, #8]
 80144f0:	4619      	mov	r1, r3
 80144f2:	4610      	mov	r0, r2
 80144f4:	f7fb fc94 	bl	800fe20 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80144f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144fa:	69fa      	ldr	r2, [r7, #28]
 80144fc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80144fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014500:	69f8      	ldr	r0, [r7, #28]
 8014502:	f7ff f883 	bl	801360c <tcp_oos_insert_segment>
                  }
                  break;
 8014506:	e0e2      	b.n	80146ce <tcp_receive+0xeba>
 8014508:	200008c4 	.word	0x200008c4
 801450c:	200008c1 	.word	0x200008c1
 8014510:	20000894 	.word	0x20000894
 8014514:	200008b4 	.word	0x200008b4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801451a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801451c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	2b00      	cmp	r3, #0
 8014522:	f040 80c6 	bne.w	80146b2 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014526:	4b80      	ldr	r3, [pc, #512]	; (8014728 <tcp_receive+0xf14>)
 8014528:	681a      	ldr	r2, [r3, #0]
 801452a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801452c:	68db      	ldr	r3, [r3, #12]
 801452e:	685b      	ldr	r3, [r3, #4]
 8014530:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014532:	2b00      	cmp	r3, #0
 8014534:	f340 80bd 	ble.w	80146b2 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801453a:	68db      	ldr	r3, [r3, #12]
 801453c:	899b      	ldrh	r3, [r3, #12]
 801453e:	b29b      	uxth	r3, r3
 8014540:	4618      	mov	r0, r3
 8014542:	f7fa fac3 	bl	800eacc <lwip_htons>
 8014546:	4603      	mov	r3, r0
 8014548:	b2db      	uxtb	r3, r3
 801454a:	f003 0301 	and.w	r3, r3, #1
 801454e:	2b00      	cmp	r3, #0
 8014550:	f040 80bf 	bne.w	80146d2 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014554:	4875      	ldr	r0, [pc, #468]	; (801472c <tcp_receive+0xf18>)
 8014556:	f7fd fa3d 	bl	80119d4 <tcp_seg_copy>
 801455a:	4602      	mov	r2, r0
 801455c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801455e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	2b00      	cmp	r3, #0
 8014566:	f000 80b6 	beq.w	80146d6 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801456a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801456c:	68db      	ldr	r3, [r3, #12]
 801456e:	685b      	ldr	r3, [r3, #4]
 8014570:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014572:	8912      	ldrh	r2, [r2, #8]
 8014574:	441a      	add	r2, r3
 8014576:	4b6c      	ldr	r3, [pc, #432]	; (8014728 <tcp_receive+0xf14>)
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	1ad3      	subs	r3, r2, r3
 801457c:	2b00      	cmp	r3, #0
 801457e:	dd12      	ble.n	80145a6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014580:	4b69      	ldr	r3, [pc, #420]	; (8014728 <tcp_receive+0xf14>)
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	b29a      	uxth	r2, r3
 8014586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014588:	68db      	ldr	r3, [r3, #12]
 801458a:	685b      	ldr	r3, [r3, #4]
 801458c:	b29b      	uxth	r3, r3
 801458e:	1ad3      	subs	r3, r2, r3
 8014590:	b29a      	uxth	r2, r3
 8014592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014594:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014598:	685a      	ldr	r2, [r3, #4]
 801459a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801459c:	891b      	ldrh	r3, [r3, #8]
 801459e:	4619      	mov	r1, r3
 80145a0:	4610      	mov	r0, r2
 80145a2:	f7fb fc3d 	bl	800fe20 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80145a6:	4b62      	ldr	r3, [pc, #392]	; (8014730 <tcp_receive+0xf1c>)
 80145a8:	881b      	ldrh	r3, [r3, #0]
 80145aa:	461a      	mov	r2, r3
 80145ac:	4b5e      	ldr	r3, [pc, #376]	; (8014728 <tcp_receive+0xf14>)
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	441a      	add	r2, r3
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145b6:	6879      	ldr	r1, [r7, #4]
 80145b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80145ba:	440b      	add	r3, r1
 80145bc:	1ad3      	subs	r3, r2, r3
 80145be:	2b00      	cmp	r3, #0
 80145c0:	f340 8089 	ble.w	80146d6 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80145c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	68db      	ldr	r3, [r3, #12]
 80145ca:	899b      	ldrh	r3, [r3, #12]
 80145cc:	b29b      	uxth	r3, r3
 80145ce:	4618      	mov	r0, r3
 80145d0:	f7fa fa7c 	bl	800eacc <lwip_htons>
 80145d4:	4603      	mov	r3, r0
 80145d6:	b2db      	uxtb	r3, r3
 80145d8:	f003 0301 	and.w	r3, r3, #1
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d022      	beq.n	8014626 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80145e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	68db      	ldr	r3, [r3, #12]
 80145e6:	899b      	ldrh	r3, [r3, #12]
 80145e8:	b29b      	uxth	r3, r3
 80145ea:	b21b      	sxth	r3, r3
 80145ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80145f0:	b21c      	sxth	r4, r3
 80145f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	68db      	ldr	r3, [r3, #12]
 80145f8:	899b      	ldrh	r3, [r3, #12]
 80145fa:	b29b      	uxth	r3, r3
 80145fc:	4618      	mov	r0, r3
 80145fe:	f7fa fa65 	bl	800eacc <lwip_htons>
 8014602:	4603      	mov	r3, r0
 8014604:	b2db      	uxtb	r3, r3
 8014606:	b29b      	uxth	r3, r3
 8014608:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801460c:	b29b      	uxth	r3, r3
 801460e:	4618      	mov	r0, r3
 8014610:	f7fa fa5c 	bl	800eacc <lwip_htons>
 8014614:	4603      	mov	r3, r0
 8014616:	b21b      	sxth	r3, r3
 8014618:	4323      	orrs	r3, r4
 801461a:	b21a      	sxth	r2, r3
 801461c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	68db      	ldr	r3, [r3, #12]
 8014622:	b292      	uxth	r2, r2
 8014624:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801462a:	b29a      	uxth	r2, r3
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014630:	4413      	add	r3, r2
 8014632:	b299      	uxth	r1, r3
 8014634:	4b3c      	ldr	r3, [pc, #240]	; (8014728 <tcp_receive+0xf14>)
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	b29a      	uxth	r2, r3
 801463a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	1a8a      	subs	r2, r1, r2
 8014640:	b292      	uxth	r2, r2
 8014642:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	685a      	ldr	r2, [r3, #4]
 801464a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	891b      	ldrh	r3, [r3, #8]
 8014650:	4619      	mov	r1, r3
 8014652:	4610      	mov	r0, r2
 8014654:	f7fb fbe4 	bl	800fe20 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	891c      	ldrh	r4, [r3, #8]
 801465e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	68db      	ldr	r3, [r3, #12]
 8014664:	899b      	ldrh	r3, [r3, #12]
 8014666:	b29b      	uxth	r3, r3
 8014668:	4618      	mov	r0, r3
 801466a:	f7fa fa2f 	bl	800eacc <lwip_htons>
 801466e:	4603      	mov	r3, r0
 8014670:	b2db      	uxtb	r3, r3
 8014672:	f003 0303 	and.w	r3, r3, #3
 8014676:	2b00      	cmp	r3, #0
 8014678:	d001      	beq.n	801467e <tcp_receive+0xe6a>
 801467a:	2301      	movs	r3, #1
 801467c:	e000      	b.n	8014680 <tcp_receive+0xe6c>
 801467e:	2300      	movs	r3, #0
 8014680:	4423      	add	r3, r4
 8014682:	b29a      	uxth	r2, r3
 8014684:	4b2a      	ldr	r3, [pc, #168]	; (8014730 <tcp_receive+0xf1c>)
 8014686:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014688:	4b29      	ldr	r3, [pc, #164]	; (8014730 <tcp_receive+0xf1c>)
 801468a:	881b      	ldrh	r3, [r3, #0]
 801468c:	461a      	mov	r2, r3
 801468e:	4b26      	ldr	r3, [pc, #152]	; (8014728 <tcp_receive+0xf14>)
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	441a      	add	r2, r3
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014698:	6879      	ldr	r1, [r7, #4]
 801469a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801469c:	440b      	add	r3, r1
 801469e:	429a      	cmp	r2, r3
 80146a0:	d019      	beq.n	80146d6 <tcp_receive+0xec2>
 80146a2:	4b24      	ldr	r3, [pc, #144]	; (8014734 <tcp_receive+0xf20>)
 80146a4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80146a8:	4923      	ldr	r1, [pc, #140]	; (8014738 <tcp_receive+0xf24>)
 80146aa:	4824      	ldr	r0, [pc, #144]	; (801473c <tcp_receive+0xf28>)
 80146ac:	f006 fb9c 	bl	801ade8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80146b0:	e011      	b.n	80146d6 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80146b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80146b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	f47f aea4 	bne.w	8014408 <tcp_receive+0xbf4>
 80146c0:	e00a      	b.n	80146d8 <tcp_receive+0xec4>
                break;
 80146c2:	bf00      	nop
 80146c4:	e008      	b.n	80146d8 <tcp_receive+0xec4>
                break;
 80146c6:	bf00      	nop
 80146c8:	e006      	b.n	80146d8 <tcp_receive+0xec4>
                  break;
 80146ca:	bf00      	nop
 80146cc:	e004      	b.n	80146d8 <tcp_receive+0xec4>
                  break;
 80146ce:	bf00      	nop
 80146d0:	e002      	b.n	80146d8 <tcp_receive+0xec4>
                  break;
 80146d2:	bf00      	nop
 80146d4:	e000      	b.n	80146d8 <tcp_receive+0xec4>
                break;
 80146d6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80146d8:	6878      	ldr	r0, [r7, #4]
 80146da:	f001 fe9d 	bl	8016418 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80146de:	e003      	b.n	80146e8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80146e0:	6878      	ldr	r0, [r7, #4]
 80146e2:	f001 fe99 	bl	8016418 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80146e6:	e01a      	b.n	801471e <tcp_receive+0xf0a>
 80146e8:	e019      	b.n	801471e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80146ea:	4b0f      	ldr	r3, [pc, #60]	; (8014728 <tcp_receive+0xf14>)
 80146ec:	681a      	ldr	r2, [r3, #0]
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146f2:	1ad3      	subs	r3, r2, r3
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	db0a      	blt.n	801470e <tcp_receive+0xefa>
 80146f8:	4b0b      	ldr	r3, [pc, #44]	; (8014728 <tcp_receive+0xf14>)
 80146fa:	681a      	ldr	r2, [r3, #0]
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014700:	6879      	ldr	r1, [r7, #4]
 8014702:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014704:	440b      	add	r3, r1
 8014706:	1ad3      	subs	r3, r2, r3
 8014708:	3301      	adds	r3, #1
 801470a:	2b00      	cmp	r3, #0
 801470c:	dd07      	ble.n	801471e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	8b5b      	ldrh	r3, [r3, #26]
 8014712:	f043 0302 	orr.w	r3, r3, #2
 8014716:	b29a      	uxth	r2, r3
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801471c:	e7ff      	b.n	801471e <tcp_receive+0xf0a>
 801471e:	bf00      	nop
 8014720:	3750      	adds	r7, #80	; 0x50
 8014722:	46bd      	mov	sp, r7
 8014724:	bdb0      	pop	{r4, r5, r7, pc}
 8014726:	bf00      	nop
 8014728:	200008b4 	.word	0x200008b4
 801472c:	20000894 	.word	0x20000894
 8014730:	200008be 	.word	0x200008be
 8014734:	08021624 	.word	0x08021624
 8014738:	080219cc 	.word	0x080219cc
 801473c:	08021670 	.word	0x08021670

08014740 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014740:	b480      	push	{r7}
 8014742:	b083      	sub	sp, #12
 8014744:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014746:	4b15      	ldr	r3, [pc, #84]	; (801479c <tcp_get_next_optbyte+0x5c>)
 8014748:	881b      	ldrh	r3, [r3, #0]
 801474a:	1c5a      	adds	r2, r3, #1
 801474c:	b291      	uxth	r1, r2
 801474e:	4a13      	ldr	r2, [pc, #76]	; (801479c <tcp_get_next_optbyte+0x5c>)
 8014750:	8011      	strh	r1, [r2, #0]
 8014752:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014754:	4b12      	ldr	r3, [pc, #72]	; (80147a0 <tcp_get_next_optbyte+0x60>)
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d004      	beq.n	8014766 <tcp_get_next_optbyte+0x26>
 801475c:	4b11      	ldr	r3, [pc, #68]	; (80147a4 <tcp_get_next_optbyte+0x64>)
 801475e:	881b      	ldrh	r3, [r3, #0]
 8014760:	88fa      	ldrh	r2, [r7, #6]
 8014762:	429a      	cmp	r2, r3
 8014764:	d208      	bcs.n	8014778 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014766:	4b10      	ldr	r3, [pc, #64]	; (80147a8 <tcp_get_next_optbyte+0x68>)
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	3314      	adds	r3, #20
 801476c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801476e:	88fb      	ldrh	r3, [r7, #6]
 8014770:	683a      	ldr	r2, [r7, #0]
 8014772:	4413      	add	r3, r2
 8014774:	781b      	ldrb	r3, [r3, #0]
 8014776:	e00b      	b.n	8014790 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014778:	88fb      	ldrh	r3, [r7, #6]
 801477a:	b2da      	uxtb	r2, r3
 801477c:	4b09      	ldr	r3, [pc, #36]	; (80147a4 <tcp_get_next_optbyte+0x64>)
 801477e:	881b      	ldrh	r3, [r3, #0]
 8014780:	b2db      	uxtb	r3, r3
 8014782:	1ad3      	subs	r3, r2, r3
 8014784:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014786:	4b06      	ldr	r3, [pc, #24]	; (80147a0 <tcp_get_next_optbyte+0x60>)
 8014788:	681a      	ldr	r2, [r3, #0]
 801478a:	797b      	ldrb	r3, [r7, #5]
 801478c:	4413      	add	r3, r2
 801478e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014790:	4618      	mov	r0, r3
 8014792:	370c      	adds	r7, #12
 8014794:	46bd      	mov	sp, r7
 8014796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801479a:	4770      	bx	lr
 801479c:	200008b0 	.word	0x200008b0
 80147a0:	200008ac 	.word	0x200008ac
 80147a4:	200008aa 	.word	0x200008aa
 80147a8:	200008a4 	.word	0x200008a4

080147ac <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b084      	sub	sp, #16
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d106      	bne.n	80147c8 <tcp_parseopt+0x1c>
 80147ba:	4b31      	ldr	r3, [pc, #196]	; (8014880 <tcp_parseopt+0xd4>)
 80147bc:	f240 727d 	movw	r2, #1917	; 0x77d
 80147c0:	4930      	ldr	r1, [pc, #192]	; (8014884 <tcp_parseopt+0xd8>)
 80147c2:	4831      	ldr	r0, [pc, #196]	; (8014888 <tcp_parseopt+0xdc>)
 80147c4:	f006 fb10 	bl	801ade8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80147c8:	4b30      	ldr	r3, [pc, #192]	; (801488c <tcp_parseopt+0xe0>)
 80147ca:	881b      	ldrh	r3, [r3, #0]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d053      	beq.n	8014878 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80147d0:	4b2f      	ldr	r3, [pc, #188]	; (8014890 <tcp_parseopt+0xe4>)
 80147d2:	2200      	movs	r2, #0
 80147d4:	801a      	strh	r2, [r3, #0]
 80147d6:	e043      	b.n	8014860 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 80147d8:	f7ff ffb2 	bl	8014740 <tcp_get_next_optbyte>
 80147dc:	4603      	mov	r3, r0
 80147de:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80147e0:	7bfb      	ldrb	r3, [r7, #15]
 80147e2:	2b01      	cmp	r3, #1
 80147e4:	d03c      	beq.n	8014860 <tcp_parseopt+0xb4>
 80147e6:	2b02      	cmp	r3, #2
 80147e8:	d002      	beq.n	80147f0 <tcp_parseopt+0x44>
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d03f      	beq.n	801486e <tcp_parseopt+0xc2>
 80147ee:	e026      	b.n	801483e <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80147f0:	f7ff ffa6 	bl	8014740 <tcp_get_next_optbyte>
 80147f4:	4603      	mov	r3, r0
 80147f6:	2b04      	cmp	r3, #4
 80147f8:	d13b      	bne.n	8014872 <tcp_parseopt+0xc6>
 80147fa:	4b25      	ldr	r3, [pc, #148]	; (8014890 <tcp_parseopt+0xe4>)
 80147fc:	881b      	ldrh	r3, [r3, #0]
 80147fe:	3302      	adds	r3, #2
 8014800:	4a22      	ldr	r2, [pc, #136]	; (801488c <tcp_parseopt+0xe0>)
 8014802:	8812      	ldrh	r2, [r2, #0]
 8014804:	4293      	cmp	r3, r2
 8014806:	dc34      	bgt.n	8014872 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014808:	f7ff ff9a 	bl	8014740 <tcp_get_next_optbyte>
 801480c:	4603      	mov	r3, r0
 801480e:	b29b      	uxth	r3, r3
 8014810:	021b      	lsls	r3, r3, #8
 8014812:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014814:	f7ff ff94 	bl	8014740 <tcp_get_next_optbyte>
 8014818:	4603      	mov	r3, r0
 801481a:	b29a      	uxth	r2, r3
 801481c:	89bb      	ldrh	r3, [r7, #12]
 801481e:	4313      	orrs	r3, r2
 8014820:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014822:	89bb      	ldrh	r3, [r7, #12]
 8014824:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8014828:	d804      	bhi.n	8014834 <tcp_parseopt+0x88>
 801482a:	89bb      	ldrh	r3, [r7, #12]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d001      	beq.n	8014834 <tcp_parseopt+0x88>
 8014830:	89ba      	ldrh	r2, [r7, #12]
 8014832:	e001      	b.n	8014838 <tcp_parseopt+0x8c>
 8014834:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801483c:	e010      	b.n	8014860 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801483e:	f7ff ff7f 	bl	8014740 <tcp_get_next_optbyte>
 8014842:	4603      	mov	r3, r0
 8014844:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014846:	7afb      	ldrb	r3, [r7, #11]
 8014848:	2b01      	cmp	r3, #1
 801484a:	d914      	bls.n	8014876 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801484c:	7afb      	ldrb	r3, [r7, #11]
 801484e:	b29a      	uxth	r2, r3
 8014850:	4b0f      	ldr	r3, [pc, #60]	; (8014890 <tcp_parseopt+0xe4>)
 8014852:	881b      	ldrh	r3, [r3, #0]
 8014854:	4413      	add	r3, r2
 8014856:	b29b      	uxth	r3, r3
 8014858:	3b02      	subs	r3, #2
 801485a:	b29a      	uxth	r2, r3
 801485c:	4b0c      	ldr	r3, [pc, #48]	; (8014890 <tcp_parseopt+0xe4>)
 801485e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014860:	4b0b      	ldr	r3, [pc, #44]	; (8014890 <tcp_parseopt+0xe4>)
 8014862:	881a      	ldrh	r2, [r3, #0]
 8014864:	4b09      	ldr	r3, [pc, #36]	; (801488c <tcp_parseopt+0xe0>)
 8014866:	881b      	ldrh	r3, [r3, #0]
 8014868:	429a      	cmp	r2, r3
 801486a:	d3b5      	bcc.n	80147d8 <tcp_parseopt+0x2c>
 801486c:	e004      	b.n	8014878 <tcp_parseopt+0xcc>
          return;
 801486e:	bf00      	nop
 8014870:	e002      	b.n	8014878 <tcp_parseopt+0xcc>
            return;
 8014872:	bf00      	nop
 8014874:	e000      	b.n	8014878 <tcp_parseopt+0xcc>
            return;
 8014876:	bf00      	nop
      }
    }
  }
}
 8014878:	3710      	adds	r7, #16
 801487a:	46bd      	mov	sp, r7
 801487c:	bd80      	pop	{r7, pc}
 801487e:	bf00      	nop
 8014880:	08021624 	.word	0x08021624
 8014884:	08021a88 	.word	0x08021a88
 8014888:	08021670 	.word	0x08021670
 801488c:	200008a8 	.word	0x200008a8
 8014890:	200008b0 	.word	0x200008b0

08014894 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014894:	b480      	push	{r7}
 8014896:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014898:	4b05      	ldr	r3, [pc, #20]	; (80148b0 <tcp_trigger_input_pcb_close+0x1c>)
 801489a:	781b      	ldrb	r3, [r3, #0]
 801489c:	f043 0310 	orr.w	r3, r3, #16
 80148a0:	b2da      	uxtb	r2, r3
 80148a2:	4b03      	ldr	r3, [pc, #12]	; (80148b0 <tcp_trigger_input_pcb_close+0x1c>)
 80148a4:	701a      	strb	r2, [r3, #0]
}
 80148a6:	bf00      	nop
 80148a8:	46bd      	mov	sp, r7
 80148aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ae:	4770      	bx	lr
 80148b0:	200008c1 	.word	0x200008c1

080148b4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b084      	sub	sp, #16
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	60f8      	str	r0, [r7, #12]
 80148bc:	60b9      	str	r1, [r7, #8]
 80148be:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d00a      	beq.n	80148dc <tcp_route+0x28>
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	7a1b      	ldrb	r3, [r3, #8]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d006      	beq.n	80148dc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	7a1b      	ldrb	r3, [r3, #8]
 80148d2:	4618      	mov	r0, r3
 80148d4:	f7fb f8a0 	bl	800fa18 <netif_get_by_index>
 80148d8:	4603      	mov	r3, r0
 80148da:	e003      	b.n	80148e4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80148dc:	6878      	ldr	r0, [r7, #4]
 80148de:	f003 feb5 	bl	801864c <ip4_route>
 80148e2:	4603      	mov	r3, r0
  }
}
 80148e4:	4618      	mov	r0, r3
 80148e6:	3710      	adds	r7, #16
 80148e8:	46bd      	mov	sp, r7
 80148ea:	bd80      	pop	{r7, pc}

080148ec <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80148ec:	b590      	push	{r4, r7, lr}
 80148ee:	b087      	sub	sp, #28
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	60f8      	str	r0, [r7, #12]
 80148f4:	60b9      	str	r1, [r7, #8]
 80148f6:	603b      	str	r3, [r7, #0]
 80148f8:	4613      	mov	r3, r2
 80148fa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d105      	bne.n	801490e <tcp_create_segment+0x22>
 8014902:	4b44      	ldr	r3, [pc, #272]	; (8014a14 <tcp_create_segment+0x128>)
 8014904:	22a3      	movs	r2, #163	; 0xa3
 8014906:	4944      	ldr	r1, [pc, #272]	; (8014a18 <tcp_create_segment+0x12c>)
 8014908:	4844      	ldr	r0, [pc, #272]	; (8014a1c <tcp_create_segment+0x130>)
 801490a:	f006 fa6d 	bl	801ade8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801490e:	68bb      	ldr	r3, [r7, #8]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d105      	bne.n	8014920 <tcp_create_segment+0x34>
 8014914:	4b3f      	ldr	r3, [pc, #252]	; (8014a14 <tcp_create_segment+0x128>)
 8014916:	22a4      	movs	r2, #164	; 0xa4
 8014918:	4941      	ldr	r1, [pc, #260]	; (8014a20 <tcp_create_segment+0x134>)
 801491a:	4840      	ldr	r0, [pc, #256]	; (8014a1c <tcp_create_segment+0x130>)
 801491c:	f006 fa64 	bl	801ade8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014920:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014924:	009b      	lsls	r3, r3, #2
 8014926:	b2db      	uxtb	r3, r3
 8014928:	f003 0304 	and.w	r3, r3, #4
 801492c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801492e:	2003      	movs	r0, #3
 8014930:	f7fa fd82 	bl	800f438 <memp_malloc>
 8014934:	6138      	str	r0, [r7, #16]
 8014936:	693b      	ldr	r3, [r7, #16]
 8014938:	2b00      	cmp	r3, #0
 801493a:	d104      	bne.n	8014946 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801493c:	68b8      	ldr	r0, [r7, #8]
 801493e:	f7fb fbf5 	bl	801012c <pbuf_free>
    return NULL;
 8014942:	2300      	movs	r3, #0
 8014944:	e061      	b.n	8014a0a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8014946:	693b      	ldr	r3, [r7, #16]
 8014948:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801494c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801494e:	693b      	ldr	r3, [r7, #16]
 8014950:	2200      	movs	r2, #0
 8014952:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014954:	693b      	ldr	r3, [r7, #16]
 8014956:	68ba      	ldr	r2, [r7, #8]
 8014958:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801495a:	68bb      	ldr	r3, [r7, #8]
 801495c:	891a      	ldrh	r2, [r3, #8]
 801495e:	7dfb      	ldrb	r3, [r7, #23]
 8014960:	b29b      	uxth	r3, r3
 8014962:	429a      	cmp	r2, r3
 8014964:	d205      	bcs.n	8014972 <tcp_create_segment+0x86>
 8014966:	4b2b      	ldr	r3, [pc, #172]	; (8014a14 <tcp_create_segment+0x128>)
 8014968:	22b0      	movs	r2, #176	; 0xb0
 801496a:	492e      	ldr	r1, [pc, #184]	; (8014a24 <tcp_create_segment+0x138>)
 801496c:	482b      	ldr	r0, [pc, #172]	; (8014a1c <tcp_create_segment+0x130>)
 801496e:	f006 fa3b 	bl	801ade8 <iprintf>
  seg->len = p->tot_len - optlen;
 8014972:	68bb      	ldr	r3, [r7, #8]
 8014974:	891a      	ldrh	r2, [r3, #8]
 8014976:	7dfb      	ldrb	r3, [r7, #23]
 8014978:	b29b      	uxth	r3, r3
 801497a:	1ad3      	subs	r3, r2, r3
 801497c:	b29a      	uxth	r2, r3
 801497e:	693b      	ldr	r3, [r7, #16]
 8014980:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014982:	2114      	movs	r1, #20
 8014984:	68b8      	ldr	r0, [r7, #8]
 8014986:	f7fb fb3b 	bl	8010000 <pbuf_add_header>
 801498a:	4603      	mov	r3, r0
 801498c:	2b00      	cmp	r3, #0
 801498e:	d004      	beq.n	801499a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014990:	6938      	ldr	r0, [r7, #16]
 8014992:	f7fd f807 	bl	80119a4 <tcp_seg_free>
    return NULL;
 8014996:	2300      	movs	r3, #0
 8014998:	e037      	b.n	8014a0a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801499a:	693b      	ldr	r3, [r7, #16]
 801499c:	685b      	ldr	r3, [r3, #4]
 801499e:	685a      	ldr	r2, [r3, #4]
 80149a0:	693b      	ldr	r3, [r7, #16]
 80149a2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	8ada      	ldrh	r2, [r3, #22]
 80149a8:	693b      	ldr	r3, [r7, #16]
 80149aa:	68dc      	ldr	r4, [r3, #12]
 80149ac:	4610      	mov	r0, r2
 80149ae:	f7fa f88d 	bl	800eacc <lwip_htons>
 80149b2:	4603      	mov	r3, r0
 80149b4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	8b1a      	ldrh	r2, [r3, #24]
 80149ba:	693b      	ldr	r3, [r7, #16]
 80149bc:	68dc      	ldr	r4, [r3, #12]
 80149be:	4610      	mov	r0, r2
 80149c0:	f7fa f884 	bl	800eacc <lwip_htons>
 80149c4:	4603      	mov	r3, r0
 80149c6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80149c8:	693b      	ldr	r3, [r7, #16]
 80149ca:	68dc      	ldr	r4, [r3, #12]
 80149cc:	6838      	ldr	r0, [r7, #0]
 80149ce:	f7fa f892 	bl	800eaf6 <lwip_htonl>
 80149d2:	4603      	mov	r3, r0
 80149d4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80149d6:	7dfb      	ldrb	r3, [r7, #23]
 80149d8:	089b      	lsrs	r3, r3, #2
 80149da:	b2db      	uxtb	r3, r3
 80149dc:	b29b      	uxth	r3, r3
 80149de:	3305      	adds	r3, #5
 80149e0:	b29b      	uxth	r3, r3
 80149e2:	031b      	lsls	r3, r3, #12
 80149e4:	b29a      	uxth	r2, r3
 80149e6:	79fb      	ldrb	r3, [r7, #7]
 80149e8:	b29b      	uxth	r3, r3
 80149ea:	4313      	orrs	r3, r2
 80149ec:	b29a      	uxth	r2, r3
 80149ee:	693b      	ldr	r3, [r7, #16]
 80149f0:	68dc      	ldr	r4, [r3, #12]
 80149f2:	4610      	mov	r0, r2
 80149f4:	f7fa f86a 	bl	800eacc <lwip_htons>
 80149f8:	4603      	mov	r3, r0
 80149fa:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80149fc:	693b      	ldr	r3, [r7, #16]
 80149fe:	68db      	ldr	r3, [r3, #12]
 8014a00:	2200      	movs	r2, #0
 8014a02:	749a      	strb	r2, [r3, #18]
 8014a04:	2200      	movs	r2, #0
 8014a06:	74da      	strb	r2, [r3, #19]
  return seg;
 8014a08:	693b      	ldr	r3, [r7, #16]
}
 8014a0a:	4618      	mov	r0, r3
 8014a0c:	371c      	adds	r7, #28
 8014a0e:	46bd      	mov	sp, r7
 8014a10:	bd90      	pop	{r4, r7, pc}
 8014a12:	bf00      	nop
 8014a14:	08021aa4 	.word	0x08021aa4
 8014a18:	08021ad8 	.word	0x08021ad8
 8014a1c:	08021af8 	.word	0x08021af8
 8014a20:	08021b20 	.word	0x08021b20
 8014a24:	08021b44 	.word	0x08021b44

08014a28 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b086      	sub	sp, #24
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	607b      	str	r3, [r7, #4]
 8014a30:	4603      	mov	r3, r0
 8014a32:	73fb      	strb	r3, [r7, #15]
 8014a34:	460b      	mov	r3, r1
 8014a36:	81bb      	strh	r3, [r7, #12]
 8014a38:	4613      	mov	r3, r2
 8014a3a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8014a3c:	89bb      	ldrh	r3, [r7, #12]
 8014a3e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d105      	bne.n	8014a52 <tcp_pbuf_prealloc+0x2a>
 8014a46:	4b30      	ldr	r3, [pc, #192]	; (8014b08 <tcp_pbuf_prealloc+0xe0>)
 8014a48:	22e8      	movs	r2, #232	; 0xe8
 8014a4a:	4930      	ldr	r1, [pc, #192]	; (8014b0c <tcp_pbuf_prealloc+0xe4>)
 8014a4c:	4830      	ldr	r0, [pc, #192]	; (8014b10 <tcp_pbuf_prealloc+0xe8>)
 8014a4e:	f006 f9cb 	bl	801ade8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8014a52:	6a3b      	ldr	r3, [r7, #32]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d105      	bne.n	8014a64 <tcp_pbuf_prealloc+0x3c>
 8014a58:	4b2b      	ldr	r3, [pc, #172]	; (8014b08 <tcp_pbuf_prealloc+0xe0>)
 8014a5a:	22e9      	movs	r2, #233	; 0xe9
 8014a5c:	492d      	ldr	r1, [pc, #180]	; (8014b14 <tcp_pbuf_prealloc+0xec>)
 8014a5e:	482c      	ldr	r0, [pc, #176]	; (8014b10 <tcp_pbuf_prealloc+0xe8>)
 8014a60:	f006 f9c2 	bl	801ade8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8014a64:	89ba      	ldrh	r2, [r7, #12]
 8014a66:	897b      	ldrh	r3, [r7, #10]
 8014a68:	429a      	cmp	r2, r3
 8014a6a:	d221      	bcs.n	8014ab0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014a6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014a70:	f003 0302 	and.w	r3, r3, #2
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d111      	bne.n	8014a9c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8014a78:	6a3b      	ldr	r3, [r7, #32]
 8014a7a:	8b5b      	ldrh	r3, [r3, #26]
 8014a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d115      	bne.n	8014ab0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8014a84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d007      	beq.n	8014a9c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8014a8c:	6a3b      	ldr	r3, [r7, #32]
 8014a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d103      	bne.n	8014a9c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8014a94:	6a3b      	ldr	r3, [r7, #32]
 8014a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d009      	beq.n	8014ab0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8014a9c:	89bb      	ldrh	r3, [r7, #12]
 8014a9e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8014aa2:	f023 0203 	bic.w	r2, r3, #3
 8014aa6:	897b      	ldrh	r3, [r7, #10]
 8014aa8:	4293      	cmp	r3, r2
 8014aaa:	bf28      	it	cs
 8014aac:	4613      	movcs	r3, r2
 8014aae:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8014ab0:	8af9      	ldrh	r1, [r7, #22]
 8014ab2:	7bfb      	ldrb	r3, [r7, #15]
 8014ab4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014ab8:	4618      	mov	r0, r3
 8014aba:	f7fb f857 	bl	800fb6c <pbuf_alloc>
 8014abe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014ac0:	693b      	ldr	r3, [r7, #16]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d101      	bne.n	8014aca <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8014ac6:	2300      	movs	r3, #0
 8014ac8:	e019      	b.n	8014afe <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8014aca:	693b      	ldr	r3, [r7, #16]
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d006      	beq.n	8014ae0 <tcp_pbuf_prealloc+0xb8>
 8014ad2:	4b0d      	ldr	r3, [pc, #52]	; (8014b08 <tcp_pbuf_prealloc+0xe0>)
 8014ad4:	f240 120b 	movw	r2, #267	; 0x10b
 8014ad8:	490f      	ldr	r1, [pc, #60]	; (8014b18 <tcp_pbuf_prealloc+0xf0>)
 8014ada:	480d      	ldr	r0, [pc, #52]	; (8014b10 <tcp_pbuf_prealloc+0xe8>)
 8014adc:	f006 f984 	bl	801ade8 <iprintf>
  *oversize = p->len - length;
 8014ae0:	693b      	ldr	r3, [r7, #16]
 8014ae2:	895a      	ldrh	r2, [r3, #10]
 8014ae4:	89bb      	ldrh	r3, [r7, #12]
 8014ae6:	1ad3      	subs	r3, r2, r3
 8014ae8:	b29a      	uxth	r2, r3
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8014aee:	693b      	ldr	r3, [r7, #16]
 8014af0:	89ba      	ldrh	r2, [r7, #12]
 8014af2:	811a      	strh	r2, [r3, #8]
 8014af4:	693b      	ldr	r3, [r7, #16]
 8014af6:	891a      	ldrh	r2, [r3, #8]
 8014af8:	693b      	ldr	r3, [r7, #16]
 8014afa:	815a      	strh	r2, [r3, #10]
  return p;
 8014afc:	693b      	ldr	r3, [r7, #16]
}
 8014afe:	4618      	mov	r0, r3
 8014b00:	3718      	adds	r7, #24
 8014b02:	46bd      	mov	sp, r7
 8014b04:	bd80      	pop	{r7, pc}
 8014b06:	bf00      	nop
 8014b08:	08021aa4 	.word	0x08021aa4
 8014b0c:	08021b5c 	.word	0x08021b5c
 8014b10:	08021af8 	.word	0x08021af8
 8014b14:	08021b80 	.word	0x08021b80
 8014b18:	08021ba0 	.word	0x08021ba0

08014b1c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8014b1c:	b580      	push	{r7, lr}
 8014b1e:	b082      	sub	sp, #8
 8014b20:	af00      	add	r7, sp, #0
 8014b22:	6078      	str	r0, [r7, #4]
 8014b24:	460b      	mov	r3, r1
 8014b26:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d106      	bne.n	8014b3c <tcp_write_checks+0x20>
 8014b2e:	4b33      	ldr	r3, [pc, #204]	; (8014bfc <tcp_write_checks+0xe0>)
 8014b30:	f240 1233 	movw	r2, #307	; 0x133
 8014b34:	4932      	ldr	r1, [pc, #200]	; (8014c00 <tcp_write_checks+0xe4>)
 8014b36:	4833      	ldr	r0, [pc, #204]	; (8014c04 <tcp_write_checks+0xe8>)
 8014b38:	f006 f956 	bl	801ade8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	7d1b      	ldrb	r3, [r3, #20]
 8014b40:	2b04      	cmp	r3, #4
 8014b42:	d00e      	beq.n	8014b62 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8014b48:	2b07      	cmp	r3, #7
 8014b4a:	d00a      	beq.n	8014b62 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8014b50:	2b02      	cmp	r3, #2
 8014b52:	d006      	beq.n	8014b62 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8014b58:	2b03      	cmp	r3, #3
 8014b5a:	d002      	beq.n	8014b62 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8014b5c:	f06f 030a 	mvn.w	r3, #10
 8014b60:	e048      	b.n	8014bf4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8014b62:	887b      	ldrh	r3, [r7, #2]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d101      	bne.n	8014b6c <tcp_write_checks+0x50>
    return ERR_OK;
 8014b68:	2300      	movs	r3, #0
 8014b6a:	e043      	b.n	8014bf4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014b72:	887a      	ldrh	r2, [r7, #2]
 8014b74:	429a      	cmp	r2, r3
 8014b76:	d909      	bls.n	8014b8c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	8b5b      	ldrh	r3, [r3, #26]
 8014b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b80:	b29a      	uxth	r2, r3
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8014b86:	f04f 33ff 	mov.w	r3, #4294967295
 8014b8a:	e033      	b.n	8014bf4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014b92:	2b08      	cmp	r3, #8
 8014b94:	d909      	bls.n	8014baa <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	8b5b      	ldrh	r3, [r3, #26]
 8014b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b9e:	b29a      	uxth	r2, r3
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8014ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8014ba8:	e024      	b.n	8014bf4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d00f      	beq.n	8014bd4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d11a      	bne.n	8014bf2 <tcp_write_checks+0xd6>
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d116      	bne.n	8014bf2 <tcp_write_checks+0xd6>
 8014bc4:	4b0d      	ldr	r3, [pc, #52]	; (8014bfc <tcp_write_checks+0xe0>)
 8014bc6:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8014bca:	490f      	ldr	r1, [pc, #60]	; (8014c08 <tcp_write_checks+0xec>)
 8014bcc:	480d      	ldr	r0, [pc, #52]	; (8014c04 <tcp_write_checks+0xe8>)
 8014bce:	f006 f90b 	bl	801ade8 <iprintf>
 8014bd2:	e00e      	b.n	8014bf2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d103      	bne.n	8014be4 <tcp_write_checks+0xc8>
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d006      	beq.n	8014bf2 <tcp_write_checks+0xd6>
 8014be4:	4b05      	ldr	r3, [pc, #20]	; (8014bfc <tcp_write_checks+0xe0>)
 8014be6:	f240 1259 	movw	r2, #345	; 0x159
 8014bea:	4908      	ldr	r1, [pc, #32]	; (8014c0c <tcp_write_checks+0xf0>)
 8014bec:	4805      	ldr	r0, [pc, #20]	; (8014c04 <tcp_write_checks+0xe8>)
 8014bee:	f006 f8fb 	bl	801ade8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8014bf2:	2300      	movs	r3, #0
}
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	3708      	adds	r7, #8
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	bd80      	pop	{r7, pc}
 8014bfc:	08021aa4 	.word	0x08021aa4
 8014c00:	08021bb4 	.word	0x08021bb4
 8014c04:	08021af8 	.word	0x08021af8
 8014c08:	08021bd4 	.word	0x08021bd4
 8014c0c:	08021c10 	.word	0x08021c10

08014c10 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8014c10:	b590      	push	{r4, r7, lr}
 8014c12:	b09b      	sub	sp, #108	; 0x6c
 8014c14:	af04      	add	r7, sp, #16
 8014c16:	60f8      	str	r0, [r7, #12]
 8014c18:	60b9      	str	r1, [r7, #8]
 8014c1a:	4611      	mov	r1, r2
 8014c1c:	461a      	mov	r2, r3
 8014c1e:	460b      	mov	r3, r1
 8014c20:	80fb      	strh	r3, [r7, #6]
 8014c22:	4613      	mov	r3, r2
 8014c24:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8014c26:	2300      	movs	r3, #0
 8014c28:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8014c2a:	2300      	movs	r3, #0
 8014c2c:	653b      	str	r3, [r7, #80]	; 0x50
 8014c2e:	2300      	movs	r3, #0
 8014c30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014c32:	2300      	movs	r3, #0
 8014c34:	64bb      	str	r3, [r7, #72]	; 0x48
 8014c36:	2300      	movs	r3, #0
 8014c38:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8014c3a:	2300      	movs	r3, #0
 8014c3c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8014c40:	2300      	movs	r3, #0
 8014c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8014c46:	2300      	movs	r3, #0
 8014c48:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8014c4e:	2300      	movs	r3, #0
 8014c50:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d109      	bne.n	8014c6c <tcp_write+0x5c>
 8014c58:	4ba5      	ldr	r3, [pc, #660]	; (8014ef0 <tcp_write+0x2e0>)
 8014c5a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8014c5e:	49a5      	ldr	r1, [pc, #660]	; (8014ef4 <tcp_write+0x2e4>)
 8014c60:	48a5      	ldr	r0, [pc, #660]	; (8014ef8 <tcp_write+0x2e8>)
 8014c62:	f006 f8c1 	bl	801ade8 <iprintf>
 8014c66:	f06f 030f 	mvn.w	r3, #15
 8014c6a:	e32c      	b.n	80152c6 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014c72:	085b      	lsrs	r3, r3, #1
 8014c74:	b29a      	uxth	r2, r3
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014c7a:	4293      	cmp	r3, r2
 8014c7c:	bf28      	it	cs
 8014c7e:	4613      	movcs	r3, r2
 8014c80:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8014c82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d102      	bne.n	8014c8e <tcp_write+0x7e>
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014c8c:	e000      	b.n	8014c90 <tcp_write+0x80>
 8014c8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014c90:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8014c92:	68bb      	ldr	r3, [r7, #8]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d109      	bne.n	8014cac <tcp_write+0x9c>
 8014c98:	4b95      	ldr	r3, [pc, #596]	; (8014ef0 <tcp_write+0x2e0>)
 8014c9a:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8014c9e:	4997      	ldr	r1, [pc, #604]	; (8014efc <tcp_write+0x2ec>)
 8014ca0:	4895      	ldr	r0, [pc, #596]	; (8014ef8 <tcp_write+0x2e8>)
 8014ca2:	f006 f8a1 	bl	801ade8 <iprintf>
 8014ca6:	f06f 030f 	mvn.w	r3, #15
 8014caa:	e30c      	b.n	80152c6 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8014cac:	88fb      	ldrh	r3, [r7, #6]
 8014cae:	4619      	mov	r1, r3
 8014cb0:	68f8      	ldr	r0, [r7, #12]
 8014cb2:	f7ff ff33 	bl	8014b1c <tcp_write_checks>
 8014cb6:	4603      	mov	r3, r0
 8014cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8014cbc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d002      	beq.n	8014cca <tcp_write+0xba>
    return err;
 8014cc4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014cc8:	e2fd      	b.n	80152c6 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014cd0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	f000 80f7 	beq.w	8014ed2 <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ce8:	653b      	str	r3, [r7, #80]	; 0x50
 8014cea:	e002      	b.n	8014cf2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8014cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d1f8      	bne.n	8014cec <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8014cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cfc:	7a9b      	ldrb	r3, [r3, #10]
 8014cfe:	009b      	lsls	r3, r3, #2
 8014d00:	b29b      	uxth	r3, r3
 8014d02:	f003 0304 	and.w	r3, r3, #4
 8014d06:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8014d08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d0c:	891b      	ldrh	r3, [r3, #8]
 8014d0e:	4619      	mov	r1, r3
 8014d10:	8c3b      	ldrh	r3, [r7, #32]
 8014d12:	440b      	add	r3, r1
 8014d14:	429a      	cmp	r2, r3
 8014d16:	da06      	bge.n	8014d26 <tcp_write+0x116>
 8014d18:	4b75      	ldr	r3, [pc, #468]	; (8014ef0 <tcp_write+0x2e0>)
 8014d1a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8014d1e:	4978      	ldr	r1, [pc, #480]	; (8014f00 <tcp_write+0x2f0>)
 8014d20:	4875      	ldr	r0, [pc, #468]	; (8014ef8 <tcp_write+0x2e8>)
 8014d22:	f006 f861 	bl	801ade8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8014d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d28:	891a      	ldrh	r2, [r3, #8]
 8014d2a:	8c3b      	ldrh	r3, [r7, #32]
 8014d2c:	4413      	add	r3, r2
 8014d2e:	b29b      	uxth	r3, r3
 8014d30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014d32:	1ad3      	subs	r3, r2, r3
 8014d34:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014d3c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8014d3e:	8a7b      	ldrh	r3, [r7, #18]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d027      	beq.n	8014d94 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8014d44:	8a7b      	ldrh	r3, [r7, #18]
 8014d46:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014d48:	429a      	cmp	r2, r3
 8014d4a:	d206      	bcs.n	8014d5a <tcp_write+0x14a>
 8014d4c:	4b68      	ldr	r3, [pc, #416]	; (8014ef0 <tcp_write+0x2e0>)
 8014d4e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8014d52:	496c      	ldr	r1, [pc, #432]	; (8014f04 <tcp_write+0x2f4>)
 8014d54:	4868      	ldr	r0, [pc, #416]	; (8014ef8 <tcp_write+0x2e8>)
 8014d56:	f006 f847 	bl	801ade8 <iprintf>
      seg = last_unsent;
 8014d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8014d5e:	8a7b      	ldrh	r3, [r7, #18]
 8014d60:	88fa      	ldrh	r2, [r7, #6]
 8014d62:	429a      	cmp	r2, r3
 8014d64:	d901      	bls.n	8014d6a <tcp_write+0x15a>
 8014d66:	8a7b      	ldrh	r3, [r7, #18]
 8014d68:	e000      	b.n	8014d6c <tcp_write+0x15c>
 8014d6a:	88fb      	ldrh	r3, [r7, #6]
 8014d6c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014d6e:	4293      	cmp	r3, r2
 8014d70:	bfa8      	it	ge
 8014d72:	4613      	movge	r3, r2
 8014d74:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8014d76:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014d7a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014d7c:	4413      	add	r3, r2
 8014d7e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8014d82:	8a7a      	ldrh	r2, [r7, #18]
 8014d84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014d86:	1ad3      	subs	r3, r2, r3
 8014d88:	b29b      	uxth	r3, r3
 8014d8a:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8014d8c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014d8e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014d90:	1ad3      	subs	r3, r2, r3
 8014d92:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8014d94:	8a7b      	ldrh	r3, [r7, #18]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d00b      	beq.n	8014db2 <tcp_write+0x1a2>
 8014d9a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014d9e:	88fb      	ldrh	r3, [r7, #6]
 8014da0:	429a      	cmp	r2, r3
 8014da2:	d006      	beq.n	8014db2 <tcp_write+0x1a2>
 8014da4:	4b52      	ldr	r3, [pc, #328]	; (8014ef0 <tcp_write+0x2e0>)
 8014da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014daa:	4957      	ldr	r1, [pc, #348]	; (8014f08 <tcp_write+0x2f8>)
 8014dac:	4852      	ldr	r0, [pc, #328]	; (8014ef8 <tcp_write+0x2e8>)
 8014dae:	f006 f81b 	bl	801ade8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8014db2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014db6:	88fb      	ldrh	r3, [r7, #6]
 8014db8:	429a      	cmp	r2, r3
 8014dba:	f080 8168 	bcs.w	801508e <tcp_write+0x47e>
 8014dbe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	f000 8164 	beq.w	801508e <tcp_write+0x47e>
 8014dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014dc8:	891b      	ldrh	r3, [r3, #8]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	f000 815f 	beq.w	801508e <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8014dd0:	88fa      	ldrh	r2, [r7, #6]
 8014dd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014dd6:	1ad2      	subs	r2, r2, r3
 8014dd8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014dda:	4293      	cmp	r3, r2
 8014ddc:	bfa8      	it	ge
 8014dde:	4613      	movge	r3, r2
 8014de0:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8014de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014de4:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8014de6:	797b      	ldrb	r3, [r7, #5]
 8014de8:	f003 0301 	and.w	r3, r3, #1
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d027      	beq.n	8014e40 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8014df0:	f107 0012 	add.w	r0, r7, #18
 8014df4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014df6:	8bf9      	ldrh	r1, [r7, #30]
 8014df8:	2301      	movs	r3, #1
 8014dfa:	9302      	str	r3, [sp, #8]
 8014dfc:	797b      	ldrb	r3, [r7, #5]
 8014dfe:	9301      	str	r3, [sp, #4]
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	9300      	str	r3, [sp, #0]
 8014e04:	4603      	mov	r3, r0
 8014e06:	2000      	movs	r0, #0
 8014e08:	f7ff fe0e 	bl	8014a28 <tcp_pbuf_prealloc>
 8014e0c:	6578      	str	r0, [r7, #84]	; 0x54
 8014e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	f000 8226 	beq.w	8015262 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8014e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e18:	6858      	ldr	r0, [r3, #4]
 8014e1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014e1e:	68ba      	ldr	r2, [r7, #8]
 8014e20:	4413      	add	r3, r2
 8014e22:	8bfa      	ldrh	r2, [r7, #30]
 8014e24:	4619      	mov	r1, r3
 8014e26:	f005 f8f6 	bl	801a016 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8014e2a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014e2c:	f7fb fa0c 	bl	8010248 <pbuf_clen>
 8014e30:	4603      	mov	r3, r0
 8014e32:	461a      	mov	r2, r3
 8014e34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014e38:	4413      	add	r3, r2
 8014e3a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8014e3e:	e041      	b.n	8014ec4 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8014e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e42:	685b      	ldr	r3, [r3, #4]
 8014e44:	637b      	str	r3, [r7, #52]	; 0x34
 8014e46:	e002      	b.n	8014e4e <tcp_write+0x23e>
 8014e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8014e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d1f8      	bne.n	8014e48 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8014e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e58:	7b1b      	ldrb	r3, [r3, #12]
 8014e5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d115      	bne.n	8014e8e <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8014e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e64:	685b      	ldr	r3, [r3, #4]
 8014e66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014e68:	8952      	ldrh	r2, [r2, #10]
 8014e6a:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8014e6c:	68ba      	ldr	r2, [r7, #8]
 8014e6e:	429a      	cmp	r2, r3
 8014e70:	d10d      	bne.n	8014e8e <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8014e72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d006      	beq.n	8014e88 <tcp_write+0x278>
 8014e7a:	4b1d      	ldr	r3, [pc, #116]	; (8014ef0 <tcp_write+0x2e0>)
 8014e7c:	f240 2231 	movw	r2, #561	; 0x231
 8014e80:	4922      	ldr	r1, [pc, #136]	; (8014f0c <tcp_write+0x2fc>)
 8014e82:	481d      	ldr	r0, [pc, #116]	; (8014ef8 <tcp_write+0x2e8>)
 8014e84:	f005 ffb0 	bl	801ade8 <iprintf>
          extendlen = seglen;
 8014e88:	8bfb      	ldrh	r3, [r7, #30]
 8014e8a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8014e8c:	e01a      	b.n	8014ec4 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8014e8e:	8bfb      	ldrh	r3, [r7, #30]
 8014e90:	2201      	movs	r2, #1
 8014e92:	4619      	mov	r1, r3
 8014e94:	2000      	movs	r0, #0
 8014e96:	f7fa fe69 	bl	800fb6c <pbuf_alloc>
 8014e9a:	6578      	str	r0, [r7, #84]	; 0x54
 8014e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	f000 81e1 	beq.w	8015266 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8014ea4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014ea8:	68ba      	ldr	r2, [r7, #8]
 8014eaa:	441a      	add	r2, r3
 8014eac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014eae:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8014eb0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014eb2:	f7fb f9c9 	bl	8010248 <pbuf_clen>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	461a      	mov	r2, r3
 8014eba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014ebe:	4413      	add	r3, r2
 8014ec0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8014ec4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014ec8:	8bfb      	ldrh	r3, [r7, #30]
 8014eca:	4413      	add	r3, r2
 8014ecc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8014ed0:	e0dd      	b.n	801508e <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	f000 80d8 	beq.w	801508e <tcp_write+0x47e>
 8014ede:	4b04      	ldr	r3, [pc, #16]	; (8014ef0 <tcp_write+0x2e0>)
 8014ee0:	f240 224b 	movw	r2, #587	; 0x24b
 8014ee4:	490a      	ldr	r1, [pc, #40]	; (8014f10 <tcp_write+0x300>)
 8014ee6:	4804      	ldr	r0, [pc, #16]	; (8014ef8 <tcp_write+0x2e8>)
 8014ee8:	f005 ff7e 	bl	801ade8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8014eec:	e0cf      	b.n	801508e <tcp_write+0x47e>
 8014eee:	bf00      	nop
 8014ef0:	08021aa4 	.word	0x08021aa4
 8014ef4:	08021c44 	.word	0x08021c44
 8014ef8:	08021af8 	.word	0x08021af8
 8014efc:	08021c5c 	.word	0x08021c5c
 8014f00:	08021c90 	.word	0x08021c90
 8014f04:	08021ca8 	.word	0x08021ca8
 8014f08:	08021cc8 	.word	0x08021cc8
 8014f0c:	08021ce8 	.word	0x08021ce8
 8014f10:	08021d14 	.word	0x08021d14
    struct pbuf *p;
    u16_t left = len - pos;
 8014f14:	88fa      	ldrh	r2, [r7, #6]
 8014f16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014f1a:	1ad3      	subs	r3, r2, r3
 8014f1c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8014f1e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014f22:	b29b      	uxth	r3, r3
 8014f24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014f26:	1ad3      	subs	r3, r2, r3
 8014f28:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8014f2a:	8b7a      	ldrh	r2, [r7, #26]
 8014f2c:	8bbb      	ldrh	r3, [r7, #28]
 8014f2e:	4293      	cmp	r3, r2
 8014f30:	bf28      	it	cs
 8014f32:	4613      	movcs	r3, r2
 8014f34:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8014f36:	797b      	ldrb	r3, [r7, #5]
 8014f38:	f003 0301 	and.w	r3, r3, #1
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d036      	beq.n	8014fae <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8014f40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014f44:	b29a      	uxth	r2, r3
 8014f46:	8b3b      	ldrh	r3, [r7, #24]
 8014f48:	4413      	add	r3, r2
 8014f4a:	b299      	uxth	r1, r3
 8014f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	bf0c      	ite	eq
 8014f52:	2301      	moveq	r3, #1
 8014f54:	2300      	movne	r3, #0
 8014f56:	b2db      	uxtb	r3, r3
 8014f58:	f107 0012 	add.w	r0, r7, #18
 8014f5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014f5e:	9302      	str	r3, [sp, #8]
 8014f60:	797b      	ldrb	r3, [r7, #5]
 8014f62:	9301      	str	r3, [sp, #4]
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	9300      	str	r3, [sp, #0]
 8014f68:	4603      	mov	r3, r0
 8014f6a:	2036      	movs	r0, #54	; 0x36
 8014f6c:	f7ff fd5c 	bl	8014a28 <tcp_pbuf_prealloc>
 8014f70:	6338      	str	r0, [r7, #48]	; 0x30
 8014f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	f000 8178 	beq.w	801526a <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8014f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f7c:	895b      	ldrh	r3, [r3, #10]
 8014f7e:	8b3a      	ldrh	r2, [r7, #24]
 8014f80:	429a      	cmp	r2, r3
 8014f82:	d906      	bls.n	8014f92 <tcp_write+0x382>
 8014f84:	4b8c      	ldr	r3, [pc, #560]	; (80151b8 <tcp_write+0x5a8>)
 8014f86:	f240 2267 	movw	r2, #615	; 0x267
 8014f8a:	498c      	ldr	r1, [pc, #560]	; (80151bc <tcp_write+0x5ac>)
 8014f8c:	488c      	ldr	r0, [pc, #560]	; (80151c0 <tcp_write+0x5b0>)
 8014f8e:	f005 ff2b 	bl	801ade8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8014f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f94:	685a      	ldr	r2, [r3, #4]
 8014f96:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014f9a:	18d0      	adds	r0, r2, r3
 8014f9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014fa0:	68ba      	ldr	r2, [r7, #8]
 8014fa2:	4413      	add	r3, r2
 8014fa4:	8b3a      	ldrh	r2, [r7, #24]
 8014fa6:	4619      	mov	r1, r3
 8014fa8:	f005 f835 	bl	801a016 <memcpy>
 8014fac:	e02f      	b.n	801500e <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8014fae:	8a7b      	ldrh	r3, [r7, #18]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d006      	beq.n	8014fc2 <tcp_write+0x3b2>
 8014fb4:	4b80      	ldr	r3, [pc, #512]	; (80151b8 <tcp_write+0x5a8>)
 8014fb6:	f240 2271 	movw	r2, #625	; 0x271
 8014fba:	4982      	ldr	r1, [pc, #520]	; (80151c4 <tcp_write+0x5b4>)
 8014fbc:	4880      	ldr	r0, [pc, #512]	; (80151c0 <tcp_write+0x5b0>)
 8014fbe:	f005 ff13 	bl	801ade8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8014fc2:	8b3b      	ldrh	r3, [r7, #24]
 8014fc4:	2201      	movs	r2, #1
 8014fc6:	4619      	mov	r1, r3
 8014fc8:	2036      	movs	r0, #54	; 0x36
 8014fca:	f7fa fdcf 	bl	800fb6c <pbuf_alloc>
 8014fce:	6178      	str	r0, [r7, #20]
 8014fd0:	697b      	ldr	r3, [r7, #20]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	f000 814b 	beq.w	801526e <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8014fd8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014fdc:	68ba      	ldr	r2, [r7, #8]
 8014fde:	441a      	add	r2, r3
 8014fe0:	697b      	ldr	r3, [r7, #20]
 8014fe2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014fe4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014fe8:	b29b      	uxth	r3, r3
 8014fea:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014fee:	4619      	mov	r1, r3
 8014ff0:	2036      	movs	r0, #54	; 0x36
 8014ff2:	f7fa fdbb 	bl	800fb6c <pbuf_alloc>
 8014ff6:	6338      	str	r0, [r7, #48]	; 0x30
 8014ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d103      	bne.n	8015006 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8014ffe:	6978      	ldr	r0, [r7, #20]
 8015000:	f7fb f894 	bl	801012c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8015004:	e136      	b.n	8015274 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8015006:	6979      	ldr	r1, [r7, #20]
 8015008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801500a:	f7fb f95d 	bl	80102c8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801500e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015010:	f7fb f91a 	bl	8010248 <pbuf_clen>
 8015014:	4603      	mov	r3, r0
 8015016:	461a      	mov	r2, r3
 8015018:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801501c:	4413      	add	r3, r2
 801501e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8015022:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015026:	2b09      	cmp	r3, #9
 8015028:	d903      	bls.n	8015032 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801502a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801502c:	f7fb f87e 	bl	801012c <pbuf_free>
      goto memerr;
 8015030:	e120      	b.n	8015274 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8015036:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801503a:	441a      	add	r2, r3
 801503c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015040:	9300      	str	r3, [sp, #0]
 8015042:	4613      	mov	r3, r2
 8015044:	2200      	movs	r2, #0
 8015046:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015048:	68f8      	ldr	r0, [r7, #12]
 801504a:	f7ff fc4f 	bl	80148ec <tcp_create_segment>
 801504e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8015050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015052:	2b00      	cmp	r3, #0
 8015054:	f000 810d 	beq.w	8015272 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8015058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801505a:	2b00      	cmp	r3, #0
 801505c:	d102      	bne.n	8015064 <tcp_write+0x454>
      queue = seg;
 801505e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015060:	647b      	str	r3, [r7, #68]	; 0x44
 8015062:	e00c      	b.n	801507e <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8015064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015066:	2b00      	cmp	r3, #0
 8015068:	d106      	bne.n	8015078 <tcp_write+0x468>
 801506a:	4b53      	ldr	r3, [pc, #332]	; (80151b8 <tcp_write+0x5a8>)
 801506c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015070:	4955      	ldr	r1, [pc, #340]	; (80151c8 <tcp_write+0x5b8>)
 8015072:	4853      	ldr	r0, [pc, #332]	; (80151c0 <tcp_write+0x5b0>)
 8015074:	f005 feb8 	bl	801ade8 <iprintf>
      prev_seg->next = seg;
 8015078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801507a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801507c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801507e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015080:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8015082:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015086:	8b3b      	ldrh	r3, [r7, #24]
 8015088:	4413      	add	r3, r2
 801508a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801508e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015092:	88fb      	ldrh	r3, [r7, #6]
 8015094:	429a      	cmp	r2, r3
 8015096:	f4ff af3d 	bcc.w	8014f14 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801509a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801509c:	2b00      	cmp	r3, #0
 801509e:	d02c      	beq.n	80150fa <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80150a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150a2:	685b      	ldr	r3, [r3, #4]
 80150a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80150a6:	e01e      	b.n	80150e6 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 80150a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150aa:	891a      	ldrh	r2, [r3, #8]
 80150ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80150ae:	4413      	add	r3, r2
 80150b0:	b29a      	uxth	r2, r3
 80150b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150b4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80150b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d110      	bne.n	80150e0 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80150be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150c0:	685b      	ldr	r3, [r3, #4]
 80150c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80150c4:	8952      	ldrh	r2, [r2, #10]
 80150c6:	4413      	add	r3, r2
 80150c8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80150ca:	68b9      	ldr	r1, [r7, #8]
 80150cc:	4618      	mov	r0, r3
 80150ce:	f004 ffa2 	bl	801a016 <memcpy>
        p->len += oversize_used;
 80150d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150d4:	895a      	ldrh	r2, [r3, #10]
 80150d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80150d8:	4413      	add	r3, r2
 80150da:	b29a      	uxth	r2, r3
 80150dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150de:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80150e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80150e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d1dd      	bne.n	80150a8 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 80150ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150ee:	891a      	ldrh	r2, [r3, #8]
 80150f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80150f2:	4413      	add	r3, r2
 80150f4:	b29a      	uxth	r2, r3
 80150f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150f8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80150fa:	8a7a      	ldrh	r2, [r7, #18]
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8015102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015104:	2b00      	cmp	r3, #0
 8015106:	d018      	beq.n	801513a <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8015108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801510a:	2b00      	cmp	r3, #0
 801510c:	d106      	bne.n	801511c <tcp_write+0x50c>
 801510e:	4b2a      	ldr	r3, [pc, #168]	; (80151b8 <tcp_write+0x5a8>)
 8015110:	f240 22e1 	movw	r2, #737	; 0x2e1
 8015114:	492d      	ldr	r1, [pc, #180]	; (80151cc <tcp_write+0x5bc>)
 8015116:	482a      	ldr	r0, [pc, #168]	; (80151c0 <tcp_write+0x5b0>)
 8015118:	f005 fe66 	bl	801ade8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801511c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801511e:	685b      	ldr	r3, [r3, #4]
 8015120:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015122:	4618      	mov	r0, r3
 8015124:	f7fb f8d0 	bl	80102c8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8015128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801512a:	891a      	ldrh	r2, [r3, #8]
 801512c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801512e:	891b      	ldrh	r3, [r3, #8]
 8015130:	4413      	add	r3, r2
 8015132:	b29a      	uxth	r2, r3
 8015134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015136:	811a      	strh	r2, [r3, #8]
 8015138:	e037      	b.n	80151aa <tcp_write+0x59a>
  } else if (extendlen > 0) {
 801513a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801513c:	2b00      	cmp	r3, #0
 801513e:	d034      	beq.n	80151aa <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8015140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015142:	2b00      	cmp	r3, #0
 8015144:	d003      	beq.n	801514e <tcp_write+0x53e>
 8015146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015148:	685b      	ldr	r3, [r3, #4]
 801514a:	2b00      	cmp	r3, #0
 801514c:	d106      	bne.n	801515c <tcp_write+0x54c>
 801514e:	4b1a      	ldr	r3, [pc, #104]	; (80151b8 <tcp_write+0x5a8>)
 8015150:	f240 22e7 	movw	r2, #743	; 0x2e7
 8015154:	491e      	ldr	r1, [pc, #120]	; (80151d0 <tcp_write+0x5c0>)
 8015156:	481a      	ldr	r0, [pc, #104]	; (80151c0 <tcp_write+0x5b0>)
 8015158:	f005 fe46 	bl	801ade8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801515c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801515e:	685b      	ldr	r3, [r3, #4]
 8015160:	62bb      	str	r3, [r7, #40]	; 0x28
 8015162:	e009      	b.n	8015178 <tcp_write+0x568>
      p->tot_len += extendlen;
 8015164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015166:	891a      	ldrh	r2, [r3, #8]
 8015168:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801516a:	4413      	add	r3, r2
 801516c:	b29a      	uxth	r2, r3
 801516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015170:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8015172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	62bb      	str	r3, [r7, #40]	; 0x28
 8015178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d1f1      	bne.n	8015164 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8015180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015182:	891a      	ldrh	r2, [r3, #8]
 8015184:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015186:	4413      	add	r3, r2
 8015188:	b29a      	uxth	r2, r3
 801518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801518c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015190:	895a      	ldrh	r2, [r3, #10]
 8015192:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015194:	4413      	add	r3, r2
 8015196:	b29a      	uxth	r2, r3
 8015198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801519a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801519c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801519e:	891a      	ldrh	r2, [r3, #8]
 80151a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80151a2:	4413      	add	r3, r2
 80151a4:	b29a      	uxth	r2, r3
 80151a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151a8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80151aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d111      	bne.n	80151d4 <tcp_write+0x5c4>
    pcb->unsent = queue;
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80151b4:	66da      	str	r2, [r3, #108]	; 0x6c
 80151b6:	e010      	b.n	80151da <tcp_write+0x5ca>
 80151b8:	08021aa4 	.word	0x08021aa4
 80151bc:	08021d44 	.word	0x08021d44
 80151c0:	08021af8 	.word	0x08021af8
 80151c4:	08021d84 	.word	0x08021d84
 80151c8:	08021d94 	.word	0x08021d94
 80151cc:	08021da8 	.word	0x08021da8
 80151d0:	08021de0 	.word	0x08021de0
  } else {
    last_unsent->next = queue;
 80151d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80151d8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80151de:	88fb      	ldrh	r3, [r7, #6]
 80151e0:	441a      	add	r2, r3
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80151ec:	88fb      	ldrh	r3, [r7, #6]
 80151ee:	1ad3      	subs	r3, r2, r3
 80151f0:	b29a      	uxth	r2, r3
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80151fe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015208:	2b00      	cmp	r3, #0
 801520a:	d00e      	beq.n	801522a <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015210:	2b00      	cmp	r3, #0
 8015212:	d10a      	bne.n	801522a <tcp_write+0x61a>
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015218:	2b00      	cmp	r3, #0
 801521a:	d106      	bne.n	801522a <tcp_write+0x61a>
 801521c:	4b2c      	ldr	r3, [pc, #176]	; (80152d0 <tcp_write+0x6c0>)
 801521e:	f240 3213 	movw	r2, #787	; 0x313
 8015222:	492c      	ldr	r1, [pc, #176]	; (80152d4 <tcp_write+0x6c4>)
 8015224:	482c      	ldr	r0, [pc, #176]	; (80152d8 <tcp_write+0x6c8>)
 8015226:	f005 fddf 	bl	801ade8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801522a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801522c:	2b00      	cmp	r3, #0
 801522e:	d016      	beq.n	801525e <tcp_write+0x64e>
 8015230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015232:	68db      	ldr	r3, [r3, #12]
 8015234:	2b00      	cmp	r3, #0
 8015236:	d012      	beq.n	801525e <tcp_write+0x64e>
 8015238:	797b      	ldrb	r3, [r7, #5]
 801523a:	f003 0302 	and.w	r3, r3, #2
 801523e:	2b00      	cmp	r3, #0
 8015240:	d10d      	bne.n	801525e <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8015242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015244:	68db      	ldr	r3, [r3, #12]
 8015246:	899b      	ldrh	r3, [r3, #12]
 8015248:	b29c      	uxth	r4, r3
 801524a:	2008      	movs	r0, #8
 801524c:	f7f9 fc3e 	bl	800eacc <lwip_htons>
 8015250:	4603      	mov	r3, r0
 8015252:	461a      	mov	r2, r3
 8015254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015256:	68db      	ldr	r3, [r3, #12]
 8015258:	4322      	orrs	r2, r4
 801525a:	b292      	uxth	r2, r2
 801525c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801525e:	2300      	movs	r3, #0
 8015260:	e031      	b.n	80152c6 <tcp_write+0x6b6>
          goto memerr;
 8015262:	bf00      	nop
 8015264:	e006      	b.n	8015274 <tcp_write+0x664>
            goto memerr;
 8015266:	bf00      	nop
 8015268:	e004      	b.n	8015274 <tcp_write+0x664>
        goto memerr;
 801526a:	bf00      	nop
 801526c:	e002      	b.n	8015274 <tcp_write+0x664>
        goto memerr;
 801526e:	bf00      	nop
 8015270:	e000      	b.n	8015274 <tcp_write+0x664>
      goto memerr;
 8015272:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	8b5b      	ldrh	r3, [r3, #26]
 8015278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801527c:	b29a      	uxth	r2, r3
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8015282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015284:	2b00      	cmp	r3, #0
 8015286:	d002      	beq.n	801528e <tcp_write+0x67e>
    pbuf_free(concat_p);
 8015288:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801528a:	f7fa ff4f 	bl	801012c <pbuf_free>
  }
  if (queue != NULL) {
 801528e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015290:	2b00      	cmp	r3, #0
 8015292:	d002      	beq.n	801529a <tcp_write+0x68a>
    tcp_segs_free(queue);
 8015294:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015296:	f7fc fb71 	bl	801197c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d00e      	beq.n	80152c2 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d10a      	bne.n	80152c2 <tcp_write+0x6b2>
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d106      	bne.n	80152c2 <tcp_write+0x6b2>
 80152b4:	4b06      	ldr	r3, [pc, #24]	; (80152d0 <tcp_write+0x6c0>)
 80152b6:	f44f 724a 	mov.w	r2, #808	; 0x328
 80152ba:	4906      	ldr	r1, [pc, #24]	; (80152d4 <tcp_write+0x6c4>)
 80152bc:	4806      	ldr	r0, [pc, #24]	; (80152d8 <tcp_write+0x6c8>)
 80152be:	f005 fd93 	bl	801ade8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80152c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80152c6:	4618      	mov	r0, r3
 80152c8:	375c      	adds	r7, #92	; 0x5c
 80152ca:	46bd      	mov	sp, r7
 80152cc:	bd90      	pop	{r4, r7, pc}
 80152ce:	bf00      	nop
 80152d0:	08021aa4 	.word	0x08021aa4
 80152d4:	08021e18 	.word	0x08021e18
 80152d8:	08021af8 	.word	0x08021af8

080152dc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80152dc:	b590      	push	{r4, r7, lr}
 80152de:	b08b      	sub	sp, #44	; 0x2c
 80152e0:	af02      	add	r7, sp, #8
 80152e2:	6078      	str	r0, [r7, #4]
 80152e4:	460b      	mov	r3, r1
 80152e6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80152e8:	2300      	movs	r3, #0
 80152ea:	61fb      	str	r3, [r7, #28]
 80152ec:	2300      	movs	r3, #0
 80152ee:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80152f0:	2300      	movs	r3, #0
 80152f2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d106      	bne.n	8015308 <tcp_split_unsent_seg+0x2c>
 80152fa:	4b95      	ldr	r3, [pc, #596]	; (8015550 <tcp_split_unsent_seg+0x274>)
 80152fc:	f240 324b 	movw	r2, #843	; 0x34b
 8015300:	4994      	ldr	r1, [pc, #592]	; (8015554 <tcp_split_unsent_seg+0x278>)
 8015302:	4895      	ldr	r0, [pc, #596]	; (8015558 <tcp_split_unsent_seg+0x27c>)
 8015304:	f005 fd70 	bl	801ade8 <iprintf>

  useg = pcb->unsent;
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801530c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801530e:	697b      	ldr	r3, [r7, #20]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d102      	bne.n	801531a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8015314:	f04f 33ff 	mov.w	r3, #4294967295
 8015318:	e116      	b.n	8015548 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801531a:	887b      	ldrh	r3, [r7, #2]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d109      	bne.n	8015334 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8015320:	4b8b      	ldr	r3, [pc, #556]	; (8015550 <tcp_split_unsent_seg+0x274>)
 8015322:	f240 3253 	movw	r2, #851	; 0x353
 8015326:	498d      	ldr	r1, [pc, #564]	; (801555c <tcp_split_unsent_seg+0x280>)
 8015328:	488b      	ldr	r0, [pc, #556]	; (8015558 <tcp_split_unsent_seg+0x27c>)
 801532a:	f005 fd5d 	bl	801ade8 <iprintf>
    return ERR_VAL;
 801532e:	f06f 0305 	mvn.w	r3, #5
 8015332:	e109      	b.n	8015548 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8015334:	697b      	ldr	r3, [r7, #20]
 8015336:	891b      	ldrh	r3, [r3, #8]
 8015338:	887a      	ldrh	r2, [r7, #2]
 801533a:	429a      	cmp	r2, r3
 801533c:	d301      	bcc.n	8015342 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801533e:	2300      	movs	r3, #0
 8015340:	e102      	b.n	8015548 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015346:	887a      	ldrh	r2, [r7, #2]
 8015348:	429a      	cmp	r2, r3
 801534a:	d906      	bls.n	801535a <tcp_split_unsent_seg+0x7e>
 801534c:	4b80      	ldr	r3, [pc, #512]	; (8015550 <tcp_split_unsent_seg+0x274>)
 801534e:	f240 325b 	movw	r2, #859	; 0x35b
 8015352:	4983      	ldr	r1, [pc, #524]	; (8015560 <tcp_split_unsent_seg+0x284>)
 8015354:	4880      	ldr	r0, [pc, #512]	; (8015558 <tcp_split_unsent_seg+0x27c>)
 8015356:	f005 fd47 	bl	801ade8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801535a:	697b      	ldr	r3, [r7, #20]
 801535c:	891b      	ldrh	r3, [r3, #8]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d106      	bne.n	8015370 <tcp_split_unsent_seg+0x94>
 8015362:	4b7b      	ldr	r3, [pc, #492]	; (8015550 <tcp_split_unsent_seg+0x274>)
 8015364:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8015368:	497e      	ldr	r1, [pc, #504]	; (8015564 <tcp_split_unsent_seg+0x288>)
 801536a:	487b      	ldr	r0, [pc, #492]	; (8015558 <tcp_split_unsent_seg+0x27c>)
 801536c:	f005 fd3c 	bl	801ade8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8015370:	697b      	ldr	r3, [r7, #20]
 8015372:	7a9b      	ldrb	r3, [r3, #10]
 8015374:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8015376:	7bfb      	ldrb	r3, [r7, #15]
 8015378:	009b      	lsls	r3, r3, #2
 801537a:	b2db      	uxtb	r3, r3
 801537c:	f003 0304 	and.w	r3, r3, #4
 8015380:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8015382:	697b      	ldr	r3, [r7, #20]
 8015384:	891a      	ldrh	r2, [r3, #8]
 8015386:	887b      	ldrh	r3, [r7, #2]
 8015388:	1ad3      	subs	r3, r2, r3
 801538a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801538c:	7bbb      	ldrb	r3, [r7, #14]
 801538e:	b29a      	uxth	r2, r3
 8015390:	89bb      	ldrh	r3, [r7, #12]
 8015392:	4413      	add	r3, r2
 8015394:	b29b      	uxth	r3, r3
 8015396:	f44f 7220 	mov.w	r2, #640	; 0x280
 801539a:	4619      	mov	r1, r3
 801539c:	2036      	movs	r0, #54	; 0x36
 801539e:	f7fa fbe5 	bl	800fb6c <pbuf_alloc>
 80153a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80153a4:	693b      	ldr	r3, [r7, #16]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	f000 80b7 	beq.w	801551a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80153ac:	697b      	ldr	r3, [r7, #20]
 80153ae:	685b      	ldr	r3, [r3, #4]
 80153b0:	891a      	ldrh	r2, [r3, #8]
 80153b2:	697b      	ldr	r3, [r7, #20]
 80153b4:	891b      	ldrh	r3, [r3, #8]
 80153b6:	1ad3      	subs	r3, r2, r3
 80153b8:	b29a      	uxth	r2, r3
 80153ba:	887b      	ldrh	r3, [r7, #2]
 80153bc:	4413      	add	r3, r2
 80153be:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80153c0:	697b      	ldr	r3, [r7, #20]
 80153c2:	6858      	ldr	r0, [r3, #4]
 80153c4:	693b      	ldr	r3, [r7, #16]
 80153c6:	685a      	ldr	r2, [r3, #4]
 80153c8:	7bbb      	ldrb	r3, [r7, #14]
 80153ca:	18d1      	adds	r1, r2, r3
 80153cc:	897b      	ldrh	r3, [r7, #10]
 80153ce:	89ba      	ldrh	r2, [r7, #12]
 80153d0:	f7fb f8b2 	bl	8010538 <pbuf_copy_partial>
 80153d4:	4603      	mov	r3, r0
 80153d6:	461a      	mov	r2, r3
 80153d8:	89bb      	ldrh	r3, [r7, #12]
 80153da:	4293      	cmp	r3, r2
 80153dc:	f040 809f 	bne.w	801551e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80153e0:	697b      	ldr	r3, [r7, #20]
 80153e2:	68db      	ldr	r3, [r3, #12]
 80153e4:	899b      	ldrh	r3, [r3, #12]
 80153e6:	b29b      	uxth	r3, r3
 80153e8:	4618      	mov	r0, r3
 80153ea:	f7f9 fb6f 	bl	800eacc <lwip_htons>
 80153ee:	4603      	mov	r3, r0
 80153f0:	b2db      	uxtb	r3, r3
 80153f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80153f6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80153f8:	2300      	movs	r3, #0
 80153fa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80153fc:	7efb      	ldrb	r3, [r7, #27]
 80153fe:	f003 0308 	and.w	r3, r3, #8
 8015402:	2b00      	cmp	r3, #0
 8015404:	d007      	beq.n	8015416 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8015406:	7efb      	ldrb	r3, [r7, #27]
 8015408:	f023 0308 	bic.w	r3, r3, #8
 801540c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801540e:	7ebb      	ldrb	r3, [r7, #26]
 8015410:	f043 0308 	orr.w	r3, r3, #8
 8015414:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8015416:	7efb      	ldrb	r3, [r7, #27]
 8015418:	f003 0301 	and.w	r3, r3, #1
 801541c:	2b00      	cmp	r3, #0
 801541e:	d007      	beq.n	8015430 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8015420:	7efb      	ldrb	r3, [r7, #27]
 8015422:	f023 0301 	bic.w	r3, r3, #1
 8015426:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8015428:	7ebb      	ldrb	r3, [r7, #26]
 801542a:	f043 0301 	orr.w	r3, r3, #1
 801542e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8015430:	697b      	ldr	r3, [r7, #20]
 8015432:	68db      	ldr	r3, [r3, #12]
 8015434:	685b      	ldr	r3, [r3, #4]
 8015436:	4618      	mov	r0, r3
 8015438:	f7f9 fb5d 	bl	800eaf6 <lwip_htonl>
 801543c:	4602      	mov	r2, r0
 801543e:	887b      	ldrh	r3, [r7, #2]
 8015440:	18d1      	adds	r1, r2, r3
 8015442:	7eba      	ldrb	r2, [r7, #26]
 8015444:	7bfb      	ldrb	r3, [r7, #15]
 8015446:	9300      	str	r3, [sp, #0]
 8015448:	460b      	mov	r3, r1
 801544a:	6939      	ldr	r1, [r7, #16]
 801544c:	6878      	ldr	r0, [r7, #4]
 801544e:	f7ff fa4d 	bl	80148ec <tcp_create_segment>
 8015452:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8015454:	69fb      	ldr	r3, [r7, #28]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d063      	beq.n	8015522 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801545a:	697b      	ldr	r3, [r7, #20]
 801545c:	685b      	ldr	r3, [r3, #4]
 801545e:	4618      	mov	r0, r3
 8015460:	f7fa fef2 	bl	8010248 <pbuf_clen>
 8015464:	4603      	mov	r3, r0
 8015466:	461a      	mov	r2, r3
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801546e:	1a9b      	subs	r3, r3, r2
 8015470:	b29a      	uxth	r2, r3
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8015478:	697b      	ldr	r3, [r7, #20]
 801547a:	6858      	ldr	r0, [r3, #4]
 801547c:	697b      	ldr	r3, [r7, #20]
 801547e:	685b      	ldr	r3, [r3, #4]
 8015480:	891a      	ldrh	r2, [r3, #8]
 8015482:	89bb      	ldrh	r3, [r7, #12]
 8015484:	1ad3      	subs	r3, r2, r3
 8015486:	b29b      	uxth	r3, r3
 8015488:	4619      	mov	r1, r3
 801548a:	f7fa fcc9 	bl	800fe20 <pbuf_realloc>
  useg->len -= remainder;
 801548e:	697b      	ldr	r3, [r7, #20]
 8015490:	891a      	ldrh	r2, [r3, #8]
 8015492:	89bb      	ldrh	r3, [r7, #12]
 8015494:	1ad3      	subs	r3, r2, r3
 8015496:	b29a      	uxth	r2, r3
 8015498:	697b      	ldr	r3, [r7, #20]
 801549a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801549c:	697b      	ldr	r3, [r7, #20]
 801549e:	68db      	ldr	r3, [r3, #12]
 80154a0:	899b      	ldrh	r3, [r3, #12]
 80154a2:	b29c      	uxth	r4, r3
 80154a4:	7efb      	ldrb	r3, [r7, #27]
 80154a6:	b29b      	uxth	r3, r3
 80154a8:	4618      	mov	r0, r3
 80154aa:	f7f9 fb0f 	bl	800eacc <lwip_htons>
 80154ae:	4603      	mov	r3, r0
 80154b0:	461a      	mov	r2, r3
 80154b2:	697b      	ldr	r3, [r7, #20]
 80154b4:	68db      	ldr	r3, [r3, #12]
 80154b6:	4322      	orrs	r2, r4
 80154b8:	b292      	uxth	r2, r2
 80154ba:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80154bc:	697b      	ldr	r3, [r7, #20]
 80154be:	685b      	ldr	r3, [r3, #4]
 80154c0:	4618      	mov	r0, r3
 80154c2:	f7fa fec1 	bl	8010248 <pbuf_clen>
 80154c6:	4603      	mov	r3, r0
 80154c8:	461a      	mov	r2, r3
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80154d0:	4413      	add	r3, r2
 80154d2:	b29a      	uxth	r2, r3
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80154da:	69fb      	ldr	r3, [r7, #28]
 80154dc:	685b      	ldr	r3, [r3, #4]
 80154de:	4618      	mov	r0, r3
 80154e0:	f7fa feb2 	bl	8010248 <pbuf_clen>
 80154e4:	4603      	mov	r3, r0
 80154e6:	461a      	mov	r2, r3
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80154ee:	4413      	add	r3, r2
 80154f0:	b29a      	uxth	r2, r3
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80154f8:	697b      	ldr	r3, [r7, #20]
 80154fa:	681a      	ldr	r2, [r3, #0]
 80154fc:	69fb      	ldr	r3, [r7, #28]
 80154fe:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8015500:	697b      	ldr	r3, [r7, #20]
 8015502:	69fa      	ldr	r2, [r7, #28]
 8015504:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8015506:	69fb      	ldr	r3, [r7, #28]
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d103      	bne.n	8015516 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	2200      	movs	r2, #0
 8015512:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8015516:	2300      	movs	r3, #0
 8015518:	e016      	b.n	8015548 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801551a:	bf00      	nop
 801551c:	e002      	b.n	8015524 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801551e:	bf00      	nop
 8015520:	e000      	b.n	8015524 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015522:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8015524:	69fb      	ldr	r3, [r7, #28]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d006      	beq.n	8015538 <tcp_split_unsent_seg+0x25c>
 801552a:	4b09      	ldr	r3, [pc, #36]	; (8015550 <tcp_split_unsent_seg+0x274>)
 801552c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8015530:	490d      	ldr	r1, [pc, #52]	; (8015568 <tcp_split_unsent_seg+0x28c>)
 8015532:	4809      	ldr	r0, [pc, #36]	; (8015558 <tcp_split_unsent_seg+0x27c>)
 8015534:	f005 fc58 	bl	801ade8 <iprintf>
  if (p != NULL) {
 8015538:	693b      	ldr	r3, [r7, #16]
 801553a:	2b00      	cmp	r3, #0
 801553c:	d002      	beq.n	8015544 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801553e:	6938      	ldr	r0, [r7, #16]
 8015540:	f7fa fdf4 	bl	801012c <pbuf_free>
  }

  return ERR_MEM;
 8015544:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015548:	4618      	mov	r0, r3
 801554a:	3724      	adds	r7, #36	; 0x24
 801554c:	46bd      	mov	sp, r7
 801554e:	bd90      	pop	{r4, r7, pc}
 8015550:	08021aa4 	.word	0x08021aa4
 8015554:	08021e38 	.word	0x08021e38
 8015558:	08021af8 	.word	0x08021af8
 801555c:	08021e5c 	.word	0x08021e5c
 8015560:	08021e80 	.word	0x08021e80
 8015564:	08021e90 	.word	0x08021e90
 8015568:	08021ea0 	.word	0x08021ea0

0801556c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801556c:	b590      	push	{r4, r7, lr}
 801556e:	b085      	sub	sp, #20
 8015570:	af00      	add	r7, sp, #0
 8015572:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d106      	bne.n	8015588 <tcp_send_fin+0x1c>
 801557a:	4b21      	ldr	r3, [pc, #132]	; (8015600 <tcp_send_fin+0x94>)
 801557c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8015580:	4920      	ldr	r1, [pc, #128]	; (8015604 <tcp_send_fin+0x98>)
 8015582:	4821      	ldr	r0, [pc, #132]	; (8015608 <tcp_send_fin+0x9c>)
 8015584:	f005 fc30 	bl	801ade8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801558c:	2b00      	cmp	r3, #0
 801558e:	d02e      	beq.n	80155ee <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015594:	60fb      	str	r3, [r7, #12]
 8015596:	e002      	b.n	801559e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d1f8      	bne.n	8015598 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	68db      	ldr	r3, [r3, #12]
 80155aa:	899b      	ldrh	r3, [r3, #12]
 80155ac:	b29b      	uxth	r3, r3
 80155ae:	4618      	mov	r0, r3
 80155b0:	f7f9 fa8c 	bl	800eacc <lwip_htons>
 80155b4:	4603      	mov	r3, r0
 80155b6:	b2db      	uxtb	r3, r3
 80155b8:	f003 0307 	and.w	r3, r3, #7
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d116      	bne.n	80155ee <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	68db      	ldr	r3, [r3, #12]
 80155c4:	899b      	ldrh	r3, [r3, #12]
 80155c6:	b29c      	uxth	r4, r3
 80155c8:	2001      	movs	r0, #1
 80155ca:	f7f9 fa7f 	bl	800eacc <lwip_htons>
 80155ce:	4603      	mov	r3, r0
 80155d0:	461a      	mov	r2, r3
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	68db      	ldr	r3, [r3, #12]
 80155d6:	4322      	orrs	r2, r4
 80155d8:	b292      	uxth	r2, r2
 80155da:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	8b5b      	ldrh	r3, [r3, #26]
 80155e0:	f043 0320 	orr.w	r3, r3, #32
 80155e4:	b29a      	uxth	r2, r3
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80155ea:	2300      	movs	r3, #0
 80155ec:	e004      	b.n	80155f8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80155ee:	2101      	movs	r1, #1
 80155f0:	6878      	ldr	r0, [r7, #4]
 80155f2:	f000 f80b 	bl	801560c <tcp_enqueue_flags>
 80155f6:	4603      	mov	r3, r0
}
 80155f8:	4618      	mov	r0, r3
 80155fa:	3714      	adds	r7, #20
 80155fc:	46bd      	mov	sp, r7
 80155fe:	bd90      	pop	{r4, r7, pc}
 8015600:	08021aa4 	.word	0x08021aa4
 8015604:	08021eac 	.word	0x08021eac
 8015608:	08021af8 	.word	0x08021af8

0801560c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b08a      	sub	sp, #40	; 0x28
 8015610:	af02      	add	r7, sp, #8
 8015612:	6078      	str	r0, [r7, #4]
 8015614:	460b      	mov	r3, r1
 8015616:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015618:	2300      	movs	r3, #0
 801561a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801561c:	2300      	movs	r3, #0
 801561e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015620:	78fb      	ldrb	r3, [r7, #3]
 8015622:	f003 0303 	and.w	r3, r3, #3
 8015626:	2b00      	cmp	r3, #0
 8015628:	d106      	bne.n	8015638 <tcp_enqueue_flags+0x2c>
 801562a:	4b67      	ldr	r3, [pc, #412]	; (80157c8 <tcp_enqueue_flags+0x1bc>)
 801562c:	f240 4212 	movw	r2, #1042	; 0x412
 8015630:	4966      	ldr	r1, [pc, #408]	; (80157cc <tcp_enqueue_flags+0x1c0>)
 8015632:	4867      	ldr	r0, [pc, #412]	; (80157d0 <tcp_enqueue_flags+0x1c4>)
 8015634:	f005 fbd8 	bl	801ade8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d106      	bne.n	801564c <tcp_enqueue_flags+0x40>
 801563e:	4b62      	ldr	r3, [pc, #392]	; (80157c8 <tcp_enqueue_flags+0x1bc>)
 8015640:	f240 4213 	movw	r2, #1043	; 0x413
 8015644:	4963      	ldr	r1, [pc, #396]	; (80157d4 <tcp_enqueue_flags+0x1c8>)
 8015646:	4862      	ldr	r0, [pc, #392]	; (80157d0 <tcp_enqueue_flags+0x1c4>)
 8015648:	f005 fbce 	bl	801ade8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801564c:	78fb      	ldrb	r3, [r7, #3]
 801564e:	f003 0302 	and.w	r3, r3, #2
 8015652:	2b00      	cmp	r3, #0
 8015654:	d001      	beq.n	801565a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8015656:	2301      	movs	r3, #1
 8015658:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801565a:	7ffb      	ldrb	r3, [r7, #31]
 801565c:	009b      	lsls	r3, r3, #2
 801565e:	b2db      	uxtb	r3, r3
 8015660:	f003 0304 	and.w	r3, r3, #4
 8015664:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015666:	7dfb      	ldrb	r3, [r7, #23]
 8015668:	b29b      	uxth	r3, r3
 801566a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801566e:	4619      	mov	r1, r3
 8015670:	2036      	movs	r0, #54	; 0x36
 8015672:	f7fa fa7b 	bl	800fb6c <pbuf_alloc>
 8015676:	6138      	str	r0, [r7, #16]
 8015678:	693b      	ldr	r3, [r7, #16]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d109      	bne.n	8015692 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	8b5b      	ldrh	r3, [r3, #26]
 8015682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015686:	b29a      	uxth	r2, r3
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801568c:	f04f 33ff 	mov.w	r3, #4294967295
 8015690:	e095      	b.n	80157be <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8015692:	693b      	ldr	r3, [r7, #16]
 8015694:	895a      	ldrh	r2, [r3, #10]
 8015696:	7dfb      	ldrb	r3, [r7, #23]
 8015698:	b29b      	uxth	r3, r3
 801569a:	429a      	cmp	r2, r3
 801569c:	d206      	bcs.n	80156ac <tcp_enqueue_flags+0xa0>
 801569e:	4b4a      	ldr	r3, [pc, #296]	; (80157c8 <tcp_enqueue_flags+0x1bc>)
 80156a0:	f240 423a 	movw	r2, #1082	; 0x43a
 80156a4:	494c      	ldr	r1, [pc, #304]	; (80157d8 <tcp_enqueue_flags+0x1cc>)
 80156a6:	484a      	ldr	r0, [pc, #296]	; (80157d0 <tcp_enqueue_flags+0x1c4>)
 80156a8:	f005 fb9e 	bl	801ade8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80156b0:	78fa      	ldrb	r2, [r7, #3]
 80156b2:	7ffb      	ldrb	r3, [r7, #31]
 80156b4:	9300      	str	r3, [sp, #0]
 80156b6:	460b      	mov	r3, r1
 80156b8:	6939      	ldr	r1, [r7, #16]
 80156ba:	6878      	ldr	r0, [r7, #4]
 80156bc:	f7ff f916 	bl	80148ec <tcp_create_segment>
 80156c0:	60f8      	str	r0, [r7, #12]
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d109      	bne.n	80156dc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	8b5b      	ldrh	r3, [r3, #26]
 80156cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80156d0:	b29a      	uxth	r2, r3
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80156d6:	f04f 33ff 	mov.w	r3, #4294967295
 80156da:	e070      	b.n	80157be <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	68db      	ldr	r3, [r3, #12]
 80156e0:	f003 0303 	and.w	r3, r3, #3
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d006      	beq.n	80156f6 <tcp_enqueue_flags+0xea>
 80156e8:	4b37      	ldr	r3, [pc, #220]	; (80157c8 <tcp_enqueue_flags+0x1bc>)
 80156ea:	f240 4242 	movw	r2, #1090	; 0x442
 80156ee:	493b      	ldr	r1, [pc, #236]	; (80157dc <tcp_enqueue_flags+0x1d0>)
 80156f0:	4837      	ldr	r0, [pc, #220]	; (80157d0 <tcp_enqueue_flags+0x1c4>)
 80156f2:	f005 fb79 	bl	801ade8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	891b      	ldrh	r3, [r3, #8]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d006      	beq.n	801570c <tcp_enqueue_flags+0x100>
 80156fe:	4b32      	ldr	r3, [pc, #200]	; (80157c8 <tcp_enqueue_flags+0x1bc>)
 8015700:	f240 4243 	movw	r2, #1091	; 0x443
 8015704:	4936      	ldr	r1, [pc, #216]	; (80157e0 <tcp_enqueue_flags+0x1d4>)
 8015706:	4832      	ldr	r0, [pc, #200]	; (80157d0 <tcp_enqueue_flags+0x1c4>)
 8015708:	f005 fb6e 	bl	801ade8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015710:	2b00      	cmp	r3, #0
 8015712:	d103      	bne.n	801571c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	68fa      	ldr	r2, [r7, #12]
 8015718:	66da      	str	r2, [r3, #108]	; 0x6c
 801571a:	e00d      	b.n	8015738 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015720:	61bb      	str	r3, [r7, #24]
 8015722:	e002      	b.n	801572a <tcp_enqueue_flags+0x11e>
 8015724:	69bb      	ldr	r3, [r7, #24]
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	61bb      	str	r3, [r7, #24]
 801572a:	69bb      	ldr	r3, [r7, #24]
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d1f8      	bne.n	8015724 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8015732:	69bb      	ldr	r3, [r7, #24]
 8015734:	68fa      	ldr	r2, [r7, #12]
 8015736:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	2200      	movs	r2, #0
 801573c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015740:	78fb      	ldrb	r3, [r7, #3]
 8015742:	f003 0302 	and.w	r3, r3, #2
 8015746:	2b00      	cmp	r3, #0
 8015748:	d104      	bne.n	8015754 <tcp_enqueue_flags+0x148>
 801574a:	78fb      	ldrb	r3, [r7, #3]
 801574c:	f003 0301 	and.w	r3, r3, #1
 8015750:	2b00      	cmp	r3, #0
 8015752:	d004      	beq.n	801575e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015758:	1c5a      	adds	r2, r3, #1
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801575e:	78fb      	ldrb	r3, [r7, #3]
 8015760:	f003 0301 	and.w	r3, r3, #1
 8015764:	2b00      	cmp	r3, #0
 8015766:	d006      	beq.n	8015776 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	8b5b      	ldrh	r3, [r3, #26]
 801576c:	f043 0320 	orr.w	r3, r3, #32
 8015770:	b29a      	uxth	r2, r3
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	685b      	ldr	r3, [r3, #4]
 801577a:	4618      	mov	r0, r3
 801577c:	f7fa fd64 	bl	8010248 <pbuf_clen>
 8015780:	4603      	mov	r3, r0
 8015782:	461a      	mov	r2, r3
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801578a:	4413      	add	r3, r2
 801578c:	b29a      	uxth	r2, r3
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801579a:	2b00      	cmp	r3, #0
 801579c:	d00e      	beq.n	80157bc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d10a      	bne.n	80157bc <tcp_enqueue_flags+0x1b0>
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d106      	bne.n	80157bc <tcp_enqueue_flags+0x1b0>
 80157ae:	4b06      	ldr	r3, [pc, #24]	; (80157c8 <tcp_enqueue_flags+0x1bc>)
 80157b0:	f240 4266 	movw	r2, #1126	; 0x466
 80157b4:	490b      	ldr	r1, [pc, #44]	; (80157e4 <tcp_enqueue_flags+0x1d8>)
 80157b6:	4806      	ldr	r0, [pc, #24]	; (80157d0 <tcp_enqueue_flags+0x1c4>)
 80157b8:	f005 fb16 	bl	801ade8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80157bc:	2300      	movs	r3, #0
}
 80157be:	4618      	mov	r0, r3
 80157c0:	3720      	adds	r7, #32
 80157c2:	46bd      	mov	sp, r7
 80157c4:	bd80      	pop	{r7, pc}
 80157c6:	bf00      	nop
 80157c8:	08021aa4 	.word	0x08021aa4
 80157cc:	08021ec8 	.word	0x08021ec8
 80157d0:	08021af8 	.word	0x08021af8
 80157d4:	08021f20 	.word	0x08021f20
 80157d8:	08021f40 	.word	0x08021f40
 80157dc:	08021f7c 	.word	0x08021f7c
 80157e0:	08021f94 	.word	0x08021f94
 80157e4:	08021fc0 	.word	0x08021fc0

080157e8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80157e8:	b5b0      	push	{r4, r5, r7, lr}
 80157ea:	b08a      	sub	sp, #40	; 0x28
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d106      	bne.n	8015804 <tcp_output+0x1c>
 80157f6:	4ba0      	ldr	r3, [pc, #640]	; (8015a78 <tcp_output+0x290>)
 80157f8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80157fc:	499f      	ldr	r1, [pc, #636]	; (8015a7c <tcp_output+0x294>)
 80157fe:	48a0      	ldr	r0, [pc, #640]	; (8015a80 <tcp_output+0x298>)
 8015800:	f005 faf2 	bl	801ade8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	7d1b      	ldrb	r3, [r3, #20]
 8015808:	2b01      	cmp	r3, #1
 801580a:	d106      	bne.n	801581a <tcp_output+0x32>
 801580c:	4b9a      	ldr	r3, [pc, #616]	; (8015a78 <tcp_output+0x290>)
 801580e:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8015812:	499c      	ldr	r1, [pc, #624]	; (8015a84 <tcp_output+0x29c>)
 8015814:	489a      	ldr	r0, [pc, #616]	; (8015a80 <tcp_output+0x298>)
 8015816:	f005 fae7 	bl	801ade8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801581a:	4b9b      	ldr	r3, [pc, #620]	; (8015a88 <tcp_output+0x2a0>)
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	687a      	ldr	r2, [r7, #4]
 8015820:	429a      	cmp	r2, r3
 8015822:	d101      	bne.n	8015828 <tcp_output+0x40>
    return ERR_OK;
 8015824:	2300      	movs	r3, #0
 8015826:	e1d2      	b.n	8015bce <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015834:	429a      	cmp	r2, r3
 8015836:	d203      	bcs.n	8015840 <tcp_output+0x58>
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801583e:	e002      	b.n	8015846 <tcp_output+0x5e>
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015846:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801584c:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015850:	2b00      	cmp	r3, #0
 8015852:	d10b      	bne.n	801586c <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	8b5b      	ldrh	r3, [r3, #26]
 8015858:	f003 0302 	and.w	r3, r3, #2
 801585c:	2b00      	cmp	r3, #0
 801585e:	f000 81a9 	beq.w	8015bb4 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8015862:	6878      	ldr	r0, [r7, #4]
 8015864:	f000 fdd8 	bl	8016418 <tcp_send_empty_ack>
 8015868:	4603      	mov	r3, r0
 801586a:	e1b0      	b.n	8015bce <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801586c:	6879      	ldr	r1, [r7, #4]
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	3304      	adds	r3, #4
 8015872:	461a      	mov	r2, r3
 8015874:	6878      	ldr	r0, [r7, #4]
 8015876:	f7ff f81d 	bl	80148b4 <tcp_route>
 801587a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801587c:	697b      	ldr	r3, [r7, #20]
 801587e:	2b00      	cmp	r3, #0
 8015880:	d102      	bne.n	8015888 <tcp_output+0xa0>
    return ERR_RTE;
 8015882:	f06f 0303 	mvn.w	r3, #3
 8015886:	e1a2      	b.n	8015bce <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	2b00      	cmp	r3, #0
 801588c:	d003      	beq.n	8015896 <tcp_output+0xae>
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d111      	bne.n	80158ba <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015896:	697b      	ldr	r3, [r7, #20]
 8015898:	2b00      	cmp	r3, #0
 801589a:	d002      	beq.n	80158a2 <tcp_output+0xba>
 801589c:	697b      	ldr	r3, [r7, #20]
 801589e:	3304      	adds	r3, #4
 80158a0:	e000      	b.n	80158a4 <tcp_output+0xbc>
 80158a2:	2300      	movs	r3, #0
 80158a4:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80158a6:	693b      	ldr	r3, [r7, #16]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d102      	bne.n	80158b2 <tcp_output+0xca>
      return ERR_RTE;
 80158ac:	f06f 0303 	mvn.w	r3, #3
 80158b0:	e18d      	b.n	8015bce <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80158b2:	693b      	ldr	r3, [r7, #16]
 80158b4:	681a      	ldr	r2, [r3, #0]
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80158ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158bc:	68db      	ldr	r3, [r3, #12]
 80158be:	685b      	ldr	r3, [r3, #4]
 80158c0:	4618      	mov	r0, r3
 80158c2:	f7f9 f918 	bl	800eaf6 <lwip_htonl>
 80158c6:	4602      	mov	r2, r0
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80158cc:	1ad3      	subs	r3, r2, r3
 80158ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158d0:	8912      	ldrh	r2, [r2, #8]
 80158d2:	4413      	add	r3, r2
 80158d4:	69ba      	ldr	r2, [r7, #24]
 80158d6:	429a      	cmp	r2, r3
 80158d8:	d227      	bcs.n	801592a <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80158e0:	461a      	mov	r2, r3
 80158e2:	69bb      	ldr	r3, [r7, #24]
 80158e4:	4293      	cmp	r3, r2
 80158e6:	d114      	bne.n	8015912 <tcp_output+0x12a>
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d110      	bne.n	8015912 <tcp_output+0x12a>
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d10b      	bne.n	8015912 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	2200      	movs	r2, #0
 80158fe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	2201      	movs	r2, #1
 8015906:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	2200      	movs	r2, #0
 801590e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	8b5b      	ldrh	r3, [r3, #26]
 8015916:	f003 0302 	and.w	r3, r3, #2
 801591a:	2b00      	cmp	r3, #0
 801591c:	f000 814c 	beq.w	8015bb8 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8015920:	6878      	ldr	r0, [r7, #4]
 8015922:	f000 fd79 	bl	8016418 <tcp_send_empty_ack>
 8015926:	4603      	mov	r3, r0
 8015928:	e151      	b.n	8015bce <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	2200      	movs	r2, #0
 801592e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015936:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015938:	6a3b      	ldr	r3, [r7, #32]
 801593a:	2b00      	cmp	r3, #0
 801593c:	f000 811b 	beq.w	8015b76 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8015940:	e002      	b.n	8015948 <tcp_output+0x160>
 8015942:	6a3b      	ldr	r3, [r7, #32]
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	623b      	str	r3, [r7, #32]
 8015948:	6a3b      	ldr	r3, [r7, #32]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d1f8      	bne.n	8015942 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8015950:	e111      	b.n	8015b76 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015954:	68db      	ldr	r3, [r3, #12]
 8015956:	899b      	ldrh	r3, [r3, #12]
 8015958:	b29b      	uxth	r3, r3
 801595a:	4618      	mov	r0, r3
 801595c:	f7f9 f8b6 	bl	800eacc <lwip_htons>
 8015960:	4603      	mov	r3, r0
 8015962:	b2db      	uxtb	r3, r3
 8015964:	f003 0304 	and.w	r3, r3, #4
 8015968:	2b00      	cmp	r3, #0
 801596a:	d006      	beq.n	801597a <tcp_output+0x192>
 801596c:	4b42      	ldr	r3, [pc, #264]	; (8015a78 <tcp_output+0x290>)
 801596e:	f240 5237 	movw	r2, #1335	; 0x537
 8015972:	4946      	ldr	r1, [pc, #280]	; (8015a8c <tcp_output+0x2a4>)
 8015974:	4842      	ldr	r0, [pc, #264]	; (8015a80 <tcp_output+0x298>)
 8015976:	f005 fa37 	bl	801ade8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801597e:	2b00      	cmp	r3, #0
 8015980:	d01f      	beq.n	80159c2 <tcp_output+0x1da>
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	8b5b      	ldrh	r3, [r3, #26]
 8015986:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801598a:	2b00      	cmp	r3, #0
 801598c:	d119      	bne.n	80159c2 <tcp_output+0x1da>
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015992:	2b00      	cmp	r3, #0
 8015994:	d00b      	beq.n	80159ae <tcp_output+0x1c6>
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d110      	bne.n	80159c2 <tcp_output+0x1da>
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159a4:	891a      	ldrh	r2, [r3, #8]
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80159aa:	429a      	cmp	r2, r3
 80159ac:	d209      	bcs.n	80159c2 <tcp_output+0x1da>
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d004      	beq.n	80159c2 <tcp_output+0x1da>
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80159be:	2b08      	cmp	r3, #8
 80159c0:	d901      	bls.n	80159c6 <tcp_output+0x1de>
 80159c2:	2301      	movs	r3, #1
 80159c4:	e000      	b.n	80159c8 <tcp_output+0x1e0>
 80159c6:	2300      	movs	r3, #0
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d106      	bne.n	80159da <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	8b5b      	ldrh	r3, [r3, #26]
 80159d0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	f000 80e3 	beq.w	8015ba0 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	7d1b      	ldrb	r3, [r3, #20]
 80159de:	2b02      	cmp	r3, #2
 80159e0:	d00d      	beq.n	80159fe <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80159e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159e4:	68db      	ldr	r3, [r3, #12]
 80159e6:	899b      	ldrh	r3, [r3, #12]
 80159e8:	b29c      	uxth	r4, r3
 80159ea:	2010      	movs	r0, #16
 80159ec:	f7f9 f86e 	bl	800eacc <lwip_htons>
 80159f0:	4603      	mov	r3, r0
 80159f2:	461a      	mov	r2, r3
 80159f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159f6:	68db      	ldr	r3, [r3, #12]
 80159f8:	4322      	orrs	r2, r4
 80159fa:	b292      	uxth	r2, r2
 80159fc:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80159fe:	697a      	ldr	r2, [r7, #20]
 8015a00:	6879      	ldr	r1, [r7, #4]
 8015a02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015a04:	f000 f908 	bl	8015c18 <tcp_output_segment>
 8015a08:	4603      	mov	r3, r0
 8015a0a:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d009      	beq.n	8015a28 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	8b5b      	ldrh	r3, [r3, #26]
 8015a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a1c:	b29a      	uxth	r2, r3
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	835a      	strh	r2, [r3, #26]
      return err;
 8015a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a26:	e0d2      	b.n	8015bce <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a2a:	681a      	ldr	r2, [r3, #0]
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	7d1b      	ldrb	r3, [r3, #20]
 8015a34:	2b02      	cmp	r3, #2
 8015a36:	d006      	beq.n	8015a46 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	8b5b      	ldrh	r3, [r3, #26]
 8015a3c:	f023 0303 	bic.w	r3, r3, #3
 8015a40:	b29a      	uxth	r2, r3
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a48:	68db      	ldr	r3, [r3, #12]
 8015a4a:	685b      	ldr	r3, [r3, #4]
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	f7f9 f852 	bl	800eaf6 <lwip_htonl>
 8015a52:	4604      	mov	r4, r0
 8015a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a56:	891b      	ldrh	r3, [r3, #8]
 8015a58:	461d      	mov	r5, r3
 8015a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a5c:	68db      	ldr	r3, [r3, #12]
 8015a5e:	899b      	ldrh	r3, [r3, #12]
 8015a60:	b29b      	uxth	r3, r3
 8015a62:	4618      	mov	r0, r3
 8015a64:	f7f9 f832 	bl	800eacc <lwip_htons>
 8015a68:	4603      	mov	r3, r0
 8015a6a:	b2db      	uxtb	r3, r3
 8015a6c:	f003 0303 	and.w	r3, r3, #3
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d00d      	beq.n	8015a90 <tcp_output+0x2a8>
 8015a74:	2301      	movs	r3, #1
 8015a76:	e00c      	b.n	8015a92 <tcp_output+0x2aa>
 8015a78:	08021aa4 	.word	0x08021aa4
 8015a7c:	08021fe8 	.word	0x08021fe8
 8015a80:	08021af8 	.word	0x08021af8
 8015a84:	08022000 	.word	0x08022000
 8015a88:	20007cb0 	.word	0x20007cb0
 8015a8c:	08022028 	.word	0x08022028
 8015a90:	2300      	movs	r3, #0
 8015a92:	442b      	add	r3, r5
 8015a94:	4423      	add	r3, r4
 8015a96:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015a9c:	68bb      	ldr	r3, [r7, #8]
 8015a9e:	1ad3      	subs	r3, r2, r3
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	da02      	bge.n	8015aaa <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	68ba      	ldr	r2, [r7, #8]
 8015aa8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aac:	891b      	ldrh	r3, [r3, #8]
 8015aae:	461c      	mov	r4, r3
 8015ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ab2:	68db      	ldr	r3, [r3, #12]
 8015ab4:	899b      	ldrh	r3, [r3, #12]
 8015ab6:	b29b      	uxth	r3, r3
 8015ab8:	4618      	mov	r0, r3
 8015aba:	f7f9 f807 	bl	800eacc <lwip_htons>
 8015abe:	4603      	mov	r3, r0
 8015ac0:	b2db      	uxtb	r3, r3
 8015ac2:	f003 0303 	and.w	r3, r3, #3
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d001      	beq.n	8015ace <tcp_output+0x2e6>
 8015aca:	2301      	movs	r3, #1
 8015acc:	e000      	b.n	8015ad0 <tcp_output+0x2e8>
 8015ace:	2300      	movs	r3, #0
 8015ad0:	4423      	add	r3, r4
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d049      	beq.n	8015b6a <tcp_output+0x382>
      seg->next = NULL;
 8015ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ad8:	2200      	movs	r2, #0
 8015ada:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d105      	bne.n	8015af0 <tcp_output+0x308>
        pcb->unacked = seg;
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ae8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8015aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aec:	623b      	str	r3, [r7, #32]
 8015aee:	e03f      	b.n	8015b70 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015af2:	68db      	ldr	r3, [r3, #12]
 8015af4:	685b      	ldr	r3, [r3, #4]
 8015af6:	4618      	mov	r0, r3
 8015af8:	f7f8 fffd 	bl	800eaf6 <lwip_htonl>
 8015afc:	4604      	mov	r4, r0
 8015afe:	6a3b      	ldr	r3, [r7, #32]
 8015b00:	68db      	ldr	r3, [r3, #12]
 8015b02:	685b      	ldr	r3, [r3, #4]
 8015b04:	4618      	mov	r0, r3
 8015b06:	f7f8 fff6 	bl	800eaf6 <lwip_htonl>
 8015b0a:	4603      	mov	r3, r0
 8015b0c:	1ae3      	subs	r3, r4, r3
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	da24      	bge.n	8015b5c <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	3370      	adds	r3, #112	; 0x70
 8015b16:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015b18:	e002      	b.n	8015b20 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015b1a:	69fb      	ldr	r3, [r7, #28]
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015b20:	69fb      	ldr	r3, [r7, #28]
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d011      	beq.n	8015b4c <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015b28:	69fb      	ldr	r3, [r7, #28]
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	68db      	ldr	r3, [r3, #12]
 8015b2e:	685b      	ldr	r3, [r3, #4]
 8015b30:	4618      	mov	r0, r3
 8015b32:	f7f8 ffe0 	bl	800eaf6 <lwip_htonl>
 8015b36:	4604      	mov	r4, r0
 8015b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b3a:	68db      	ldr	r3, [r3, #12]
 8015b3c:	685b      	ldr	r3, [r3, #4]
 8015b3e:	4618      	mov	r0, r3
 8015b40:	f7f8 ffd9 	bl	800eaf6 <lwip_htonl>
 8015b44:	4603      	mov	r3, r0
 8015b46:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	dbe6      	blt.n	8015b1a <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8015b4c:	69fb      	ldr	r3, [r7, #28]
 8015b4e:	681a      	ldr	r2, [r3, #0]
 8015b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b52:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015b54:	69fb      	ldr	r3, [r7, #28]
 8015b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b58:	601a      	str	r2, [r3, #0]
 8015b5a:	e009      	b.n	8015b70 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015b5c:	6a3b      	ldr	r3, [r7, #32]
 8015b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b60:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015b62:	6a3b      	ldr	r3, [r7, #32]
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	623b      	str	r3, [r7, #32]
 8015b68:	e002      	b.n	8015b70 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015b6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b6c:	f7fb ff1a 	bl	80119a4 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b74:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8015b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d012      	beq.n	8015ba2 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b7e:	68db      	ldr	r3, [r3, #12]
 8015b80:	685b      	ldr	r3, [r3, #4]
 8015b82:	4618      	mov	r0, r3
 8015b84:	f7f8 ffb7 	bl	800eaf6 <lwip_htonl>
 8015b88:	4602      	mov	r2, r0
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b8e:	1ad3      	subs	r3, r2, r3
 8015b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b92:	8912      	ldrh	r2, [r2, #8]
 8015b94:	4413      	add	r3, r2
  while (seg != NULL &&
 8015b96:	69ba      	ldr	r2, [r7, #24]
 8015b98:	429a      	cmp	r2, r3
 8015b9a:	f4bf aeda 	bcs.w	8015952 <tcp_output+0x16a>
 8015b9e:	e000      	b.n	8015ba2 <tcp_output+0x3ba>
      break;
 8015ba0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d108      	bne.n	8015bbc <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	2200      	movs	r2, #0
 8015bae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8015bb2:	e004      	b.n	8015bbe <tcp_output+0x3d6>
    goto output_done;
 8015bb4:	bf00      	nop
 8015bb6:	e002      	b.n	8015bbe <tcp_output+0x3d6>
    goto output_done;
 8015bb8:	bf00      	nop
 8015bba:	e000      	b.n	8015bbe <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015bbc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	8b5b      	ldrh	r3, [r3, #26]
 8015bc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015bc6:	b29a      	uxth	r2, r3
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015bcc:	2300      	movs	r3, #0
}
 8015bce:	4618      	mov	r0, r3
 8015bd0:	3728      	adds	r7, #40	; 0x28
 8015bd2:	46bd      	mov	sp, r7
 8015bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8015bd6:	bf00      	nop

08015bd8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b082      	sub	sp, #8
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d106      	bne.n	8015bf4 <tcp_output_segment_busy+0x1c>
 8015be6:	4b09      	ldr	r3, [pc, #36]	; (8015c0c <tcp_output_segment_busy+0x34>)
 8015be8:	f240 529a 	movw	r2, #1434	; 0x59a
 8015bec:	4908      	ldr	r1, [pc, #32]	; (8015c10 <tcp_output_segment_busy+0x38>)
 8015bee:	4809      	ldr	r0, [pc, #36]	; (8015c14 <tcp_output_segment_busy+0x3c>)
 8015bf0:	f005 f8fa 	bl	801ade8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	685b      	ldr	r3, [r3, #4]
 8015bf8:	7b9b      	ldrb	r3, [r3, #14]
 8015bfa:	2b01      	cmp	r3, #1
 8015bfc:	d001      	beq.n	8015c02 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8015bfe:	2301      	movs	r3, #1
 8015c00:	e000      	b.n	8015c04 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8015c02:	2300      	movs	r3, #0
}
 8015c04:	4618      	mov	r0, r3
 8015c06:	3708      	adds	r7, #8
 8015c08:	46bd      	mov	sp, r7
 8015c0a:	bd80      	pop	{r7, pc}
 8015c0c:	08021aa4 	.word	0x08021aa4
 8015c10:	08022040 	.word	0x08022040
 8015c14:	08021af8 	.word	0x08021af8

08015c18 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015c18:	b5b0      	push	{r4, r5, r7, lr}
 8015c1a:	b08c      	sub	sp, #48	; 0x30
 8015c1c:	af04      	add	r7, sp, #16
 8015c1e:	60f8      	str	r0, [r7, #12]
 8015c20:	60b9      	str	r1, [r7, #8]
 8015c22:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d106      	bne.n	8015c38 <tcp_output_segment+0x20>
 8015c2a:	4b64      	ldr	r3, [pc, #400]	; (8015dbc <tcp_output_segment+0x1a4>)
 8015c2c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8015c30:	4963      	ldr	r1, [pc, #396]	; (8015dc0 <tcp_output_segment+0x1a8>)
 8015c32:	4864      	ldr	r0, [pc, #400]	; (8015dc4 <tcp_output_segment+0x1ac>)
 8015c34:	f005 f8d8 	bl	801ade8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015c38:	68bb      	ldr	r3, [r7, #8]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d106      	bne.n	8015c4c <tcp_output_segment+0x34>
 8015c3e:	4b5f      	ldr	r3, [pc, #380]	; (8015dbc <tcp_output_segment+0x1a4>)
 8015c40:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8015c44:	4960      	ldr	r1, [pc, #384]	; (8015dc8 <tcp_output_segment+0x1b0>)
 8015c46:	485f      	ldr	r0, [pc, #380]	; (8015dc4 <tcp_output_segment+0x1ac>)
 8015c48:	f005 f8ce 	bl	801ade8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d106      	bne.n	8015c60 <tcp_output_segment+0x48>
 8015c52:	4b5a      	ldr	r3, [pc, #360]	; (8015dbc <tcp_output_segment+0x1a4>)
 8015c54:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8015c58:	495c      	ldr	r1, [pc, #368]	; (8015dcc <tcp_output_segment+0x1b4>)
 8015c5a:	485a      	ldr	r0, [pc, #360]	; (8015dc4 <tcp_output_segment+0x1ac>)
 8015c5c:	f005 f8c4 	bl	801ade8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015c60:	68f8      	ldr	r0, [r7, #12]
 8015c62:	f7ff ffb9 	bl	8015bd8 <tcp_output_segment_busy>
 8015c66:	4603      	mov	r3, r0
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d001      	beq.n	8015c70 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015c6c:	2300      	movs	r3, #0
 8015c6e:	e0a0      	b.n	8015db2 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015c70:	68bb      	ldr	r3, [r7, #8]
 8015c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	68dc      	ldr	r4, [r3, #12]
 8015c78:	4610      	mov	r0, r2
 8015c7a:	f7f8 ff3c 	bl	800eaf6 <lwip_htonl>
 8015c7e:	4603      	mov	r3, r0
 8015c80:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015c82:	68bb      	ldr	r3, [r7, #8]
 8015c84:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	68dc      	ldr	r4, [r3, #12]
 8015c8a:	4610      	mov	r0, r2
 8015c8c:	f7f8 ff1e 	bl	800eacc <lwip_htons>
 8015c90:	4603      	mov	r3, r0
 8015c92:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015c94:	68bb      	ldr	r3, [r7, #8]
 8015c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c98:	68ba      	ldr	r2, [r7, #8]
 8015c9a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015c9c:	441a      	add	r2, r3
 8015c9e:	68bb      	ldr	r3, [r7, #8]
 8015ca0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	68db      	ldr	r3, [r3, #12]
 8015ca6:	3314      	adds	r3, #20
 8015ca8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	7a9b      	ldrb	r3, [r3, #10]
 8015cae:	f003 0301 	and.w	r3, r3, #1
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d015      	beq.n	8015ce2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015cb6:	68bb      	ldr	r3, [r7, #8]
 8015cb8:	3304      	adds	r3, #4
 8015cba:	461a      	mov	r2, r3
 8015cbc:	6879      	ldr	r1, [r7, #4]
 8015cbe:	f44f 7006 	mov.w	r0, #536	; 0x218
 8015cc2:	f7fc fa33 	bl	801212c <tcp_eff_send_mss_netif>
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015cca:	8b7b      	ldrh	r3, [r7, #26]
 8015ccc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015cd0:	4618      	mov	r0, r3
 8015cd2:	f7f8 ff10 	bl	800eaf6 <lwip_htonl>
 8015cd6:	4602      	mov	r2, r0
 8015cd8:	69fb      	ldr	r3, [r7, #28]
 8015cda:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015cdc:	69fb      	ldr	r3, [r7, #28]
 8015cde:	3304      	adds	r3, #4
 8015ce0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015ce2:	68bb      	ldr	r3, [r7, #8]
 8015ce4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	da02      	bge.n	8015cf2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015cec:	68bb      	ldr	r3, [r7, #8]
 8015cee:	2200      	movs	r2, #0
 8015cf0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8015cf2:	68bb      	ldr	r3, [r7, #8]
 8015cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d10c      	bne.n	8015d14 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015cfa:	4b35      	ldr	r3, [pc, #212]	; (8015dd0 <tcp_output_segment+0x1b8>)
 8015cfc:	681a      	ldr	r2, [r3, #0]
 8015cfe:	68bb      	ldr	r3, [r7, #8]
 8015d00:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	68db      	ldr	r3, [r3, #12]
 8015d06:	685b      	ldr	r3, [r3, #4]
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f7f8 fef4 	bl	800eaf6 <lwip_htonl>
 8015d0e:	4602      	mov	r2, r0
 8015d10:	68bb      	ldr	r3, [r7, #8]
 8015d12:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	68db      	ldr	r3, [r3, #12]
 8015d18:	461a      	mov	r2, r3
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	685b      	ldr	r3, [r3, #4]
 8015d1e:	685b      	ldr	r3, [r3, #4]
 8015d20:	1ad3      	subs	r3, r2, r3
 8015d22:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	685b      	ldr	r3, [r3, #4]
 8015d28:	8959      	ldrh	r1, [r3, #10]
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	685b      	ldr	r3, [r3, #4]
 8015d2e:	8b3a      	ldrh	r2, [r7, #24]
 8015d30:	1a8a      	subs	r2, r1, r2
 8015d32:	b292      	uxth	r2, r2
 8015d34:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	685b      	ldr	r3, [r3, #4]
 8015d3a:	8919      	ldrh	r1, [r3, #8]
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	685b      	ldr	r3, [r3, #4]
 8015d40:	8b3a      	ldrh	r2, [r7, #24]
 8015d42:	1a8a      	subs	r2, r1, r2
 8015d44:	b292      	uxth	r2, r2
 8015d46:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	685b      	ldr	r3, [r3, #4]
 8015d4c:	68fa      	ldr	r2, [r7, #12]
 8015d4e:	68d2      	ldr	r2, [r2, #12]
 8015d50:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	68db      	ldr	r3, [r3, #12]
 8015d56:	2200      	movs	r2, #0
 8015d58:	741a      	strb	r2, [r3, #16]
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	68db      	ldr	r3, [r3, #12]
 8015d62:	f103 0214 	add.w	r2, r3, #20
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	7a9b      	ldrb	r3, [r3, #10]
 8015d6a:	009b      	lsls	r3, r3, #2
 8015d6c:	f003 0304 	and.w	r3, r3, #4
 8015d70:	4413      	add	r3, r2
 8015d72:	69fa      	ldr	r2, [r7, #28]
 8015d74:	429a      	cmp	r2, r3
 8015d76:	d006      	beq.n	8015d86 <tcp_output_segment+0x16e>
 8015d78:	4b10      	ldr	r3, [pc, #64]	; (8015dbc <tcp_output_segment+0x1a4>)
 8015d7a:	f240 621c 	movw	r2, #1564	; 0x61c
 8015d7e:	4915      	ldr	r1, [pc, #84]	; (8015dd4 <tcp_output_segment+0x1bc>)
 8015d80:	4810      	ldr	r0, [pc, #64]	; (8015dc4 <tcp_output_segment+0x1ac>)
 8015d82:	f005 f831 	bl	801ade8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	6858      	ldr	r0, [r3, #4]
 8015d8a:	68b9      	ldr	r1, [r7, #8]
 8015d8c:	68bb      	ldr	r3, [r7, #8]
 8015d8e:	1d1c      	adds	r4, r3, #4
 8015d90:	68bb      	ldr	r3, [r7, #8]
 8015d92:	7add      	ldrb	r5, [r3, #11]
 8015d94:	68bb      	ldr	r3, [r7, #8]
 8015d96:	7a9b      	ldrb	r3, [r3, #10]
 8015d98:	687a      	ldr	r2, [r7, #4]
 8015d9a:	9202      	str	r2, [sp, #8]
 8015d9c:	2206      	movs	r2, #6
 8015d9e:	9201      	str	r2, [sp, #4]
 8015da0:	9300      	str	r3, [sp, #0]
 8015da2:	462b      	mov	r3, r5
 8015da4:	4622      	mov	r2, r4
 8015da6:	f002 fe0d 	bl	80189c4 <ip4_output_if>
 8015daa:	4603      	mov	r3, r0
 8015dac:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015dae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015db2:	4618      	mov	r0, r3
 8015db4:	3720      	adds	r7, #32
 8015db6:	46bd      	mov	sp, r7
 8015db8:	bdb0      	pop	{r4, r5, r7, pc}
 8015dba:	bf00      	nop
 8015dbc:	08021aa4 	.word	0x08021aa4
 8015dc0:	08022068 	.word	0x08022068
 8015dc4:	08021af8 	.word	0x08021af8
 8015dc8:	08022088 	.word	0x08022088
 8015dcc:	080220a8 	.word	0x080220a8
 8015dd0:	20007ca0 	.word	0x20007ca0
 8015dd4:	080220cc 	.word	0x080220cc

08015dd8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015dd8:	b5b0      	push	{r4, r5, r7, lr}
 8015dda:	b084      	sub	sp, #16
 8015ddc:	af00      	add	r7, sp, #0
 8015dde:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d106      	bne.n	8015df4 <tcp_rexmit_rto_prepare+0x1c>
 8015de6:	4b31      	ldr	r3, [pc, #196]	; (8015eac <tcp_rexmit_rto_prepare+0xd4>)
 8015de8:	f240 6263 	movw	r2, #1635	; 0x663
 8015dec:	4930      	ldr	r1, [pc, #192]	; (8015eb0 <tcp_rexmit_rto_prepare+0xd8>)
 8015dee:	4831      	ldr	r0, [pc, #196]	; (8015eb4 <tcp_rexmit_rto_prepare+0xdc>)
 8015df0:	f004 fffa 	bl	801ade8 <iprintf>

  if (pcb->unacked == NULL) {
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d102      	bne.n	8015e02 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015dfc:	f06f 0305 	mvn.w	r3, #5
 8015e00:	e050      	b.n	8015ea4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e06:	60fb      	str	r3, [r7, #12]
 8015e08:	e00b      	b.n	8015e22 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015e0a:	68f8      	ldr	r0, [r7, #12]
 8015e0c:	f7ff fee4 	bl	8015bd8 <tcp_output_segment_busy>
 8015e10:	4603      	mov	r3, r0
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d002      	beq.n	8015e1c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015e16:	f06f 0305 	mvn.w	r3, #5
 8015e1a:	e043      	b.n	8015ea4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	60fb      	str	r3, [r7, #12]
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d1ef      	bne.n	8015e0a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015e2a:	68f8      	ldr	r0, [r7, #12]
 8015e2c:	f7ff fed4 	bl	8015bd8 <tcp_output_segment_busy>
 8015e30:	4603      	mov	r3, r0
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d002      	beq.n	8015e3c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015e36:	f06f 0305 	mvn.w	r3, #5
 8015e3a:	e033      	b.n	8015ea4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015e40:	68fb      	ldr	r3, [r7, #12]
 8015e42:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	2200      	movs	r2, #0
 8015e50:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	8b5b      	ldrh	r3, [r3, #26]
 8015e56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015e5a:	b29a      	uxth	r2, r3
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	68db      	ldr	r3, [r3, #12]
 8015e64:	685b      	ldr	r3, [r3, #4]
 8015e66:	4618      	mov	r0, r3
 8015e68:	f7f8 fe45 	bl	800eaf6 <lwip_htonl>
 8015e6c:	4604      	mov	r4, r0
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	891b      	ldrh	r3, [r3, #8]
 8015e72:	461d      	mov	r5, r3
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	68db      	ldr	r3, [r3, #12]
 8015e78:	899b      	ldrh	r3, [r3, #12]
 8015e7a:	b29b      	uxth	r3, r3
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	f7f8 fe25 	bl	800eacc <lwip_htons>
 8015e82:	4603      	mov	r3, r0
 8015e84:	b2db      	uxtb	r3, r3
 8015e86:	f003 0303 	and.w	r3, r3, #3
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d001      	beq.n	8015e92 <tcp_rexmit_rto_prepare+0xba>
 8015e8e:	2301      	movs	r3, #1
 8015e90:	e000      	b.n	8015e94 <tcp_rexmit_rto_prepare+0xbc>
 8015e92:	2300      	movs	r3, #0
 8015e94:	442b      	add	r3, r5
 8015e96:	18e2      	adds	r2, r4, r3
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	2200      	movs	r2, #0
 8015ea0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015ea2:	2300      	movs	r3, #0
}
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	3710      	adds	r7, #16
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8015eac:	08021aa4 	.word	0x08021aa4
 8015eb0:	080220e0 	.word	0x080220e0
 8015eb4:	08021af8 	.word	0x08021af8

08015eb8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b082      	sub	sp, #8
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d106      	bne.n	8015ed4 <tcp_rexmit_rto_commit+0x1c>
 8015ec6:	4b0d      	ldr	r3, [pc, #52]	; (8015efc <tcp_rexmit_rto_commit+0x44>)
 8015ec8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015ecc:	490c      	ldr	r1, [pc, #48]	; (8015f00 <tcp_rexmit_rto_commit+0x48>)
 8015ece:	480d      	ldr	r0, [pc, #52]	; (8015f04 <tcp_rexmit_rto_commit+0x4c>)
 8015ed0:	f004 ff8a 	bl	801ade8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015eda:	2bff      	cmp	r3, #255	; 0xff
 8015edc:	d007      	beq.n	8015eee <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015ee4:	3301      	adds	r3, #1
 8015ee6:	b2da      	uxtb	r2, r3
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015eee:	6878      	ldr	r0, [r7, #4]
 8015ef0:	f7ff fc7a 	bl	80157e8 <tcp_output>
}
 8015ef4:	bf00      	nop
 8015ef6:	3708      	adds	r7, #8
 8015ef8:	46bd      	mov	sp, r7
 8015efa:	bd80      	pop	{r7, pc}
 8015efc:	08021aa4 	.word	0x08021aa4
 8015f00:	08022104 	.word	0x08022104
 8015f04:	08021af8 	.word	0x08021af8

08015f08 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b082      	sub	sp, #8
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d106      	bne.n	8015f24 <tcp_rexmit_rto+0x1c>
 8015f16:	4b0a      	ldr	r3, [pc, #40]	; (8015f40 <tcp_rexmit_rto+0x38>)
 8015f18:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8015f1c:	4909      	ldr	r1, [pc, #36]	; (8015f44 <tcp_rexmit_rto+0x3c>)
 8015f1e:	480a      	ldr	r0, [pc, #40]	; (8015f48 <tcp_rexmit_rto+0x40>)
 8015f20:	f004 ff62 	bl	801ade8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015f24:	6878      	ldr	r0, [r7, #4]
 8015f26:	f7ff ff57 	bl	8015dd8 <tcp_rexmit_rto_prepare>
 8015f2a:	4603      	mov	r3, r0
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d102      	bne.n	8015f36 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015f30:	6878      	ldr	r0, [r7, #4]
 8015f32:	f7ff ffc1 	bl	8015eb8 <tcp_rexmit_rto_commit>
  }
}
 8015f36:	bf00      	nop
 8015f38:	3708      	adds	r7, #8
 8015f3a:	46bd      	mov	sp, r7
 8015f3c:	bd80      	pop	{r7, pc}
 8015f3e:	bf00      	nop
 8015f40:	08021aa4 	.word	0x08021aa4
 8015f44:	08022128 	.word	0x08022128
 8015f48:	08021af8 	.word	0x08021af8

08015f4c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015f4c:	b590      	push	{r4, r7, lr}
 8015f4e:	b085      	sub	sp, #20
 8015f50:	af00      	add	r7, sp, #0
 8015f52:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d106      	bne.n	8015f68 <tcp_rexmit+0x1c>
 8015f5a:	4b2f      	ldr	r3, [pc, #188]	; (8016018 <tcp_rexmit+0xcc>)
 8015f5c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015f60:	492e      	ldr	r1, [pc, #184]	; (801601c <tcp_rexmit+0xd0>)
 8015f62:	482f      	ldr	r0, [pc, #188]	; (8016020 <tcp_rexmit+0xd4>)
 8015f64:	f004 ff40 	bl	801ade8 <iprintf>

  if (pcb->unacked == NULL) {
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d102      	bne.n	8015f76 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015f70:	f06f 0305 	mvn.w	r3, #5
 8015f74:	e04c      	b.n	8016010 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f7a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015f7c:	68b8      	ldr	r0, [r7, #8]
 8015f7e:	f7ff fe2b 	bl	8015bd8 <tcp_output_segment_busy>
 8015f82:	4603      	mov	r3, r0
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d002      	beq.n	8015f8e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015f88:	f06f 0305 	mvn.w	r3, #5
 8015f8c:	e040      	b.n	8016010 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015f8e:	68bb      	ldr	r3, [r7, #8]
 8015f90:	681a      	ldr	r2, [r3, #0]
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	336c      	adds	r3, #108	; 0x6c
 8015f9a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015f9c:	e002      	b.n	8015fa4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d011      	beq.n	8015fd0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	68db      	ldr	r3, [r3, #12]
 8015fb2:	685b      	ldr	r3, [r3, #4]
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	f7f8 fd9e 	bl	800eaf6 <lwip_htonl>
 8015fba:	4604      	mov	r4, r0
 8015fbc:	68bb      	ldr	r3, [r7, #8]
 8015fbe:	68db      	ldr	r3, [r3, #12]
 8015fc0:	685b      	ldr	r3, [r3, #4]
 8015fc2:	4618      	mov	r0, r3
 8015fc4:	f7f8 fd97 	bl	800eaf6 <lwip_htonl>
 8015fc8:	4603      	mov	r3, r0
 8015fca:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	dbe6      	blt.n	8015f9e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	681a      	ldr	r2, [r3, #0]
 8015fd4:	68bb      	ldr	r3, [r7, #8]
 8015fd6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	68ba      	ldr	r2, [r7, #8]
 8015fdc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015fde:	68bb      	ldr	r3, [r7, #8]
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d103      	bne.n	8015fee <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	2200      	movs	r2, #0
 8015fea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015ff4:	2bff      	cmp	r3, #255	; 0xff
 8015ff6:	d007      	beq.n	8016008 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015ffe:	3301      	adds	r3, #1
 8016000:	b2da      	uxtb	r2, r3
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	2200      	movs	r2, #0
 801600c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801600e:	2300      	movs	r3, #0
}
 8016010:	4618      	mov	r0, r3
 8016012:	3714      	adds	r7, #20
 8016014:	46bd      	mov	sp, r7
 8016016:	bd90      	pop	{r4, r7, pc}
 8016018:	08021aa4 	.word	0x08021aa4
 801601c:	08022144 	.word	0x08022144
 8016020:	08021af8 	.word	0x08021af8

08016024 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8016024:	b580      	push	{r7, lr}
 8016026:	b082      	sub	sp, #8
 8016028:	af00      	add	r7, sp, #0
 801602a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	2b00      	cmp	r3, #0
 8016030:	d106      	bne.n	8016040 <tcp_rexmit_fast+0x1c>
 8016032:	4b2f      	ldr	r3, [pc, #188]	; (80160f0 <tcp_rexmit_fast+0xcc>)
 8016034:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8016038:	492e      	ldr	r1, [pc, #184]	; (80160f4 <tcp_rexmit_fast+0xd0>)
 801603a:	482f      	ldr	r0, [pc, #188]	; (80160f8 <tcp_rexmit_fast+0xd4>)
 801603c:	f004 fed4 	bl	801ade8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016044:	2b00      	cmp	r3, #0
 8016046:	d04f      	beq.n	80160e8 <tcp_rexmit_fast+0xc4>
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	8b5b      	ldrh	r3, [r3, #26]
 801604c:	f003 0304 	and.w	r3, r3, #4
 8016050:	2b00      	cmp	r3, #0
 8016052:	d149      	bne.n	80160e8 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8016054:	6878      	ldr	r0, [r7, #4]
 8016056:	f7ff ff79 	bl	8015f4c <tcp_rexmit>
 801605a:	4603      	mov	r3, r0
 801605c:	2b00      	cmp	r3, #0
 801605e:	d143      	bne.n	80160e8 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801606c:	429a      	cmp	r2, r3
 801606e:	d208      	bcs.n	8016082 <tcp_rexmit_fast+0x5e>
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016076:	2b00      	cmp	r3, #0
 8016078:	da00      	bge.n	801607c <tcp_rexmit_fast+0x58>
 801607a:	3301      	adds	r3, #1
 801607c:	105b      	asrs	r3, r3, #1
 801607e:	b29b      	uxth	r3, r3
 8016080:	e007      	b.n	8016092 <tcp_rexmit_fast+0x6e>
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016088:	2b00      	cmp	r3, #0
 801608a:	da00      	bge.n	801608e <tcp_rexmit_fast+0x6a>
 801608c:	3301      	adds	r3, #1
 801608e:	105b      	asrs	r3, r3, #1
 8016090:	b29b      	uxth	r3, r3
 8016092:	687a      	ldr	r2, [r7, #4]
 8016094:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801609e:	461a      	mov	r2, r3
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160a4:	005b      	lsls	r3, r3, #1
 80160a6:	429a      	cmp	r2, r3
 80160a8:	d206      	bcs.n	80160b8 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160ae:	005b      	lsls	r3, r3, #1
 80160b0:	b29a      	uxth	r2, r3
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160c2:	4619      	mov	r1, r3
 80160c4:	0049      	lsls	r1, r1, #1
 80160c6:	440b      	add	r3, r1
 80160c8:	b29b      	uxth	r3, r3
 80160ca:	4413      	add	r3, r2
 80160cc:	b29a      	uxth	r2, r3
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	8b5b      	ldrh	r3, [r3, #26]
 80160d8:	f043 0304 	orr.w	r3, r3, #4
 80160dc:	b29a      	uxth	r2, r3
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	2200      	movs	r2, #0
 80160e6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80160e8:	bf00      	nop
 80160ea:	3708      	adds	r7, #8
 80160ec:	46bd      	mov	sp, r7
 80160ee:	bd80      	pop	{r7, pc}
 80160f0:	08021aa4 	.word	0x08021aa4
 80160f4:	0802215c 	.word	0x0802215c
 80160f8:	08021af8 	.word	0x08021af8

080160fc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80160fc:	b580      	push	{r7, lr}
 80160fe:	b086      	sub	sp, #24
 8016100:	af00      	add	r7, sp, #0
 8016102:	60f8      	str	r0, [r7, #12]
 8016104:	607b      	str	r3, [r7, #4]
 8016106:	460b      	mov	r3, r1
 8016108:	817b      	strh	r3, [r7, #10]
 801610a:	4613      	mov	r3, r2
 801610c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801610e:	897a      	ldrh	r2, [r7, #10]
 8016110:	893b      	ldrh	r3, [r7, #8]
 8016112:	4413      	add	r3, r2
 8016114:	b29b      	uxth	r3, r3
 8016116:	3314      	adds	r3, #20
 8016118:	b29b      	uxth	r3, r3
 801611a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801611e:	4619      	mov	r1, r3
 8016120:	2022      	movs	r0, #34	; 0x22
 8016122:	f7f9 fd23 	bl	800fb6c <pbuf_alloc>
 8016126:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8016128:	697b      	ldr	r3, [r7, #20]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d04e      	beq.n	80161cc <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801612e:	697b      	ldr	r3, [r7, #20]
 8016130:	895b      	ldrh	r3, [r3, #10]
 8016132:	461a      	mov	r2, r3
 8016134:	897b      	ldrh	r3, [r7, #10]
 8016136:	3314      	adds	r3, #20
 8016138:	429a      	cmp	r2, r3
 801613a:	da06      	bge.n	801614a <tcp_output_alloc_header_common+0x4e>
 801613c:	4b26      	ldr	r3, [pc, #152]	; (80161d8 <tcp_output_alloc_header_common+0xdc>)
 801613e:	f240 7224 	movw	r2, #1828	; 0x724
 8016142:	4926      	ldr	r1, [pc, #152]	; (80161dc <tcp_output_alloc_header_common+0xe0>)
 8016144:	4826      	ldr	r0, [pc, #152]	; (80161e0 <tcp_output_alloc_header_common+0xe4>)
 8016146:	f004 fe4f 	bl	801ade8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801614a:	697b      	ldr	r3, [r7, #20]
 801614c:	685b      	ldr	r3, [r3, #4]
 801614e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8016150:	8c3b      	ldrh	r3, [r7, #32]
 8016152:	4618      	mov	r0, r3
 8016154:	f7f8 fcba 	bl	800eacc <lwip_htons>
 8016158:	4603      	mov	r3, r0
 801615a:	461a      	mov	r2, r3
 801615c:	693b      	ldr	r3, [r7, #16]
 801615e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8016160:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016162:	4618      	mov	r0, r3
 8016164:	f7f8 fcb2 	bl	800eacc <lwip_htons>
 8016168:	4603      	mov	r3, r0
 801616a:	461a      	mov	r2, r3
 801616c:	693b      	ldr	r3, [r7, #16]
 801616e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8016170:	693b      	ldr	r3, [r7, #16]
 8016172:	687a      	ldr	r2, [r7, #4]
 8016174:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8016176:	68f8      	ldr	r0, [r7, #12]
 8016178:	f7f8 fcbd 	bl	800eaf6 <lwip_htonl>
 801617c:	4602      	mov	r2, r0
 801617e:	693b      	ldr	r3, [r7, #16]
 8016180:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8016182:	897b      	ldrh	r3, [r7, #10]
 8016184:	089b      	lsrs	r3, r3, #2
 8016186:	b29b      	uxth	r3, r3
 8016188:	3305      	adds	r3, #5
 801618a:	b29b      	uxth	r3, r3
 801618c:	031b      	lsls	r3, r3, #12
 801618e:	b29a      	uxth	r2, r3
 8016190:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016194:	b29b      	uxth	r3, r3
 8016196:	4313      	orrs	r3, r2
 8016198:	b29b      	uxth	r3, r3
 801619a:	4618      	mov	r0, r3
 801619c:	f7f8 fc96 	bl	800eacc <lwip_htons>
 80161a0:	4603      	mov	r3, r0
 80161a2:	461a      	mov	r2, r3
 80161a4:	693b      	ldr	r3, [r7, #16]
 80161a6:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80161a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80161aa:	4618      	mov	r0, r3
 80161ac:	f7f8 fc8e 	bl	800eacc <lwip_htons>
 80161b0:	4603      	mov	r3, r0
 80161b2:	461a      	mov	r2, r3
 80161b4:	693b      	ldr	r3, [r7, #16]
 80161b6:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80161b8:	693b      	ldr	r3, [r7, #16]
 80161ba:	2200      	movs	r2, #0
 80161bc:	741a      	strb	r2, [r3, #16]
 80161be:	2200      	movs	r2, #0
 80161c0:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80161c2:	693b      	ldr	r3, [r7, #16]
 80161c4:	2200      	movs	r2, #0
 80161c6:	749a      	strb	r2, [r3, #18]
 80161c8:	2200      	movs	r2, #0
 80161ca:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80161cc:	697b      	ldr	r3, [r7, #20]
}
 80161ce:	4618      	mov	r0, r3
 80161d0:	3718      	adds	r7, #24
 80161d2:	46bd      	mov	sp, r7
 80161d4:	bd80      	pop	{r7, pc}
 80161d6:	bf00      	nop
 80161d8:	08021aa4 	.word	0x08021aa4
 80161dc:	0802217c 	.word	0x0802217c
 80161e0:	08021af8 	.word	0x08021af8

080161e4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80161e4:	b5b0      	push	{r4, r5, r7, lr}
 80161e6:	b08a      	sub	sp, #40	; 0x28
 80161e8:	af04      	add	r7, sp, #16
 80161ea:	60f8      	str	r0, [r7, #12]
 80161ec:	607b      	str	r3, [r7, #4]
 80161ee:	460b      	mov	r3, r1
 80161f0:	817b      	strh	r3, [r7, #10]
 80161f2:	4613      	mov	r3, r2
 80161f4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d106      	bne.n	801620a <tcp_output_alloc_header+0x26>
 80161fc:	4b15      	ldr	r3, [pc, #84]	; (8016254 <tcp_output_alloc_header+0x70>)
 80161fe:	f240 7242 	movw	r2, #1858	; 0x742
 8016202:	4915      	ldr	r1, [pc, #84]	; (8016258 <tcp_output_alloc_header+0x74>)
 8016204:	4815      	ldr	r0, [pc, #84]	; (801625c <tcp_output_alloc_header+0x78>)
 8016206:	f004 fdef 	bl	801ade8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	8adb      	ldrh	r3, [r3, #22]
 8016212:	68fa      	ldr	r2, [r7, #12]
 8016214:	8b12      	ldrh	r2, [r2, #24]
 8016216:	68f9      	ldr	r1, [r7, #12]
 8016218:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801621a:	893d      	ldrh	r5, [r7, #8]
 801621c:	897c      	ldrh	r4, [r7, #10]
 801621e:	9103      	str	r1, [sp, #12]
 8016220:	2110      	movs	r1, #16
 8016222:	9102      	str	r1, [sp, #8]
 8016224:	9201      	str	r2, [sp, #4]
 8016226:	9300      	str	r3, [sp, #0]
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	462a      	mov	r2, r5
 801622c:	4621      	mov	r1, r4
 801622e:	f7ff ff65 	bl	80160fc <tcp_output_alloc_header_common>
 8016232:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8016234:	697b      	ldr	r3, [r7, #20]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d006      	beq.n	8016248 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801623e:	68fa      	ldr	r2, [r7, #12]
 8016240:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016242:	441a      	add	r2, r3
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8016248:	697b      	ldr	r3, [r7, #20]
}
 801624a:	4618      	mov	r0, r3
 801624c:	3718      	adds	r7, #24
 801624e:	46bd      	mov	sp, r7
 8016250:	bdb0      	pop	{r4, r5, r7, pc}
 8016252:	bf00      	nop
 8016254:	08021aa4 	.word	0x08021aa4
 8016258:	080221ac 	.word	0x080221ac
 801625c:	08021af8 	.word	0x08021af8

08016260 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8016260:	b580      	push	{r7, lr}
 8016262:	b088      	sub	sp, #32
 8016264:	af00      	add	r7, sp, #0
 8016266:	60f8      	str	r0, [r7, #12]
 8016268:	60b9      	str	r1, [r7, #8]
 801626a:	4611      	mov	r1, r2
 801626c:	461a      	mov	r2, r3
 801626e:	460b      	mov	r3, r1
 8016270:	71fb      	strb	r3, [r7, #7]
 8016272:	4613      	mov	r3, r2
 8016274:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8016276:	2300      	movs	r3, #0
 8016278:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801627a:	68bb      	ldr	r3, [r7, #8]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d106      	bne.n	801628e <tcp_output_fill_options+0x2e>
 8016280:	4b13      	ldr	r3, [pc, #76]	; (80162d0 <tcp_output_fill_options+0x70>)
 8016282:	f240 7256 	movw	r2, #1878	; 0x756
 8016286:	4913      	ldr	r1, [pc, #76]	; (80162d4 <tcp_output_fill_options+0x74>)
 8016288:	4813      	ldr	r0, [pc, #76]	; (80162d8 <tcp_output_fill_options+0x78>)
 801628a:	f004 fdad 	bl	801ade8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801628e:	68bb      	ldr	r3, [r7, #8]
 8016290:	685b      	ldr	r3, [r3, #4]
 8016292:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8016294:	69bb      	ldr	r3, [r7, #24]
 8016296:	3314      	adds	r3, #20
 8016298:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801629a:	69bb      	ldr	r3, [r7, #24]
 801629c:	f103 0214 	add.w	r2, r3, #20
 80162a0:	8bfb      	ldrh	r3, [r7, #30]
 80162a2:	009b      	lsls	r3, r3, #2
 80162a4:	4619      	mov	r1, r3
 80162a6:	79fb      	ldrb	r3, [r7, #7]
 80162a8:	009b      	lsls	r3, r3, #2
 80162aa:	f003 0304 	and.w	r3, r3, #4
 80162ae:	440b      	add	r3, r1
 80162b0:	4413      	add	r3, r2
 80162b2:	697a      	ldr	r2, [r7, #20]
 80162b4:	429a      	cmp	r2, r3
 80162b6:	d006      	beq.n	80162c6 <tcp_output_fill_options+0x66>
 80162b8:	4b05      	ldr	r3, [pc, #20]	; (80162d0 <tcp_output_fill_options+0x70>)
 80162ba:	f240 7275 	movw	r2, #1909	; 0x775
 80162be:	4907      	ldr	r1, [pc, #28]	; (80162dc <tcp_output_fill_options+0x7c>)
 80162c0:	4805      	ldr	r0, [pc, #20]	; (80162d8 <tcp_output_fill_options+0x78>)
 80162c2:	f004 fd91 	bl	801ade8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80162c6:	bf00      	nop
 80162c8:	3720      	adds	r7, #32
 80162ca:	46bd      	mov	sp, r7
 80162cc:	bd80      	pop	{r7, pc}
 80162ce:	bf00      	nop
 80162d0:	08021aa4 	.word	0x08021aa4
 80162d4:	080221d4 	.word	0x080221d4
 80162d8:	08021af8 	.word	0x08021af8
 80162dc:	080220cc 	.word	0x080220cc

080162e0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80162e0:	b580      	push	{r7, lr}
 80162e2:	b08a      	sub	sp, #40	; 0x28
 80162e4:	af04      	add	r7, sp, #16
 80162e6:	60f8      	str	r0, [r7, #12]
 80162e8:	60b9      	str	r1, [r7, #8]
 80162ea:	607a      	str	r2, [r7, #4]
 80162ec:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80162ee:	68bb      	ldr	r3, [r7, #8]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d106      	bne.n	8016302 <tcp_output_control_segment+0x22>
 80162f4:	4b1c      	ldr	r3, [pc, #112]	; (8016368 <tcp_output_control_segment+0x88>)
 80162f6:	f240 7287 	movw	r2, #1927	; 0x787
 80162fa:	491c      	ldr	r1, [pc, #112]	; (801636c <tcp_output_control_segment+0x8c>)
 80162fc:	481c      	ldr	r0, [pc, #112]	; (8016370 <tcp_output_control_segment+0x90>)
 80162fe:	f004 fd73 	bl	801ade8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8016302:	683a      	ldr	r2, [r7, #0]
 8016304:	6879      	ldr	r1, [r7, #4]
 8016306:	68f8      	ldr	r0, [r7, #12]
 8016308:	f7fe fad4 	bl	80148b4 <tcp_route>
 801630c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801630e:	693b      	ldr	r3, [r7, #16]
 8016310:	2b00      	cmp	r3, #0
 8016312:	d102      	bne.n	801631a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8016314:	23fc      	movs	r3, #252	; 0xfc
 8016316:	75fb      	strb	r3, [r7, #23]
 8016318:	e01c      	b.n	8016354 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	2b00      	cmp	r3, #0
 801631e:	d006      	beq.n	801632e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	7adb      	ldrb	r3, [r3, #11]
 8016324:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	7a9b      	ldrb	r3, [r3, #10]
 801632a:	757b      	strb	r3, [r7, #21]
 801632c:	e003      	b.n	8016336 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801632e:	23ff      	movs	r3, #255	; 0xff
 8016330:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8016332:	2300      	movs	r3, #0
 8016334:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8016336:	7dba      	ldrb	r2, [r7, #22]
 8016338:	693b      	ldr	r3, [r7, #16]
 801633a:	9302      	str	r3, [sp, #8]
 801633c:	2306      	movs	r3, #6
 801633e:	9301      	str	r3, [sp, #4]
 8016340:	7d7b      	ldrb	r3, [r7, #21]
 8016342:	9300      	str	r3, [sp, #0]
 8016344:	4613      	mov	r3, r2
 8016346:	683a      	ldr	r2, [r7, #0]
 8016348:	6879      	ldr	r1, [r7, #4]
 801634a:	68b8      	ldr	r0, [r7, #8]
 801634c:	f002 fb3a 	bl	80189c4 <ip4_output_if>
 8016350:	4603      	mov	r3, r0
 8016352:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8016354:	68b8      	ldr	r0, [r7, #8]
 8016356:	f7f9 fee9 	bl	801012c <pbuf_free>
  return err;
 801635a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801635e:	4618      	mov	r0, r3
 8016360:	3718      	adds	r7, #24
 8016362:	46bd      	mov	sp, r7
 8016364:	bd80      	pop	{r7, pc}
 8016366:	bf00      	nop
 8016368:	08021aa4 	.word	0x08021aa4
 801636c:	080221fc 	.word	0x080221fc
 8016370:	08021af8 	.word	0x08021af8

08016374 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8016374:	b590      	push	{r4, r7, lr}
 8016376:	b08b      	sub	sp, #44	; 0x2c
 8016378:	af04      	add	r7, sp, #16
 801637a:	60f8      	str	r0, [r7, #12]
 801637c:	60b9      	str	r1, [r7, #8]
 801637e:	607a      	str	r2, [r7, #4]
 8016380:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8016382:	683b      	ldr	r3, [r7, #0]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d106      	bne.n	8016396 <tcp_rst+0x22>
 8016388:	4b1f      	ldr	r3, [pc, #124]	; (8016408 <tcp_rst+0x94>)
 801638a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801638e:	491f      	ldr	r1, [pc, #124]	; (801640c <tcp_rst+0x98>)
 8016390:	481f      	ldr	r0, [pc, #124]	; (8016410 <tcp_rst+0x9c>)
 8016392:	f004 fd29 	bl	801ade8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8016396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016398:	2b00      	cmp	r3, #0
 801639a:	d106      	bne.n	80163aa <tcp_rst+0x36>
 801639c:	4b1a      	ldr	r3, [pc, #104]	; (8016408 <tcp_rst+0x94>)
 801639e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80163a2:	491c      	ldr	r1, [pc, #112]	; (8016414 <tcp_rst+0xa0>)
 80163a4:	481a      	ldr	r0, [pc, #104]	; (8016410 <tcp_rst+0x9c>)
 80163a6:	f004 fd1f 	bl	801ade8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80163aa:	2300      	movs	r3, #0
 80163ac:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80163ae:	f246 0308 	movw	r3, #24584	; 0x6008
 80163b2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80163b4:	7dfb      	ldrb	r3, [r7, #23]
 80163b6:	b29c      	uxth	r4, r3
 80163b8:	68b8      	ldr	r0, [r7, #8]
 80163ba:	f7f8 fb9c 	bl	800eaf6 <lwip_htonl>
 80163be:	4602      	mov	r2, r0
 80163c0:	8abb      	ldrh	r3, [r7, #20]
 80163c2:	9303      	str	r3, [sp, #12]
 80163c4:	2314      	movs	r3, #20
 80163c6:	9302      	str	r3, [sp, #8]
 80163c8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80163ca:	9301      	str	r3, [sp, #4]
 80163cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80163ce:	9300      	str	r3, [sp, #0]
 80163d0:	4613      	mov	r3, r2
 80163d2:	2200      	movs	r2, #0
 80163d4:	4621      	mov	r1, r4
 80163d6:	6878      	ldr	r0, [r7, #4]
 80163d8:	f7ff fe90 	bl	80160fc <tcp_output_alloc_header_common>
 80163dc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80163de:	693b      	ldr	r3, [r7, #16]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d00c      	beq.n	80163fe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80163e4:	7dfb      	ldrb	r3, [r7, #23]
 80163e6:	2200      	movs	r2, #0
 80163e8:	6939      	ldr	r1, [r7, #16]
 80163ea:	68f8      	ldr	r0, [r7, #12]
 80163ec:	f7ff ff38 	bl	8016260 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80163f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163f2:	683a      	ldr	r2, [r7, #0]
 80163f4:	6939      	ldr	r1, [r7, #16]
 80163f6:	68f8      	ldr	r0, [r7, #12]
 80163f8:	f7ff ff72 	bl	80162e0 <tcp_output_control_segment>
 80163fc:	e000      	b.n	8016400 <tcp_rst+0x8c>
    return;
 80163fe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016400:	371c      	adds	r7, #28
 8016402:	46bd      	mov	sp, r7
 8016404:	bd90      	pop	{r4, r7, pc}
 8016406:	bf00      	nop
 8016408:	08021aa4 	.word	0x08021aa4
 801640c:	08022228 	.word	0x08022228
 8016410:	08021af8 	.word	0x08021af8
 8016414:	08022244 	.word	0x08022244

08016418 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8016418:	b590      	push	{r4, r7, lr}
 801641a:	b087      	sub	sp, #28
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8016420:	2300      	movs	r3, #0
 8016422:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8016424:	2300      	movs	r3, #0
 8016426:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	2b00      	cmp	r3, #0
 801642c:	d106      	bne.n	801643c <tcp_send_empty_ack+0x24>
 801642e:	4b28      	ldr	r3, [pc, #160]	; (80164d0 <tcp_send_empty_ack+0xb8>)
 8016430:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8016434:	4927      	ldr	r1, [pc, #156]	; (80164d4 <tcp_send_empty_ack+0xbc>)
 8016436:	4828      	ldr	r0, [pc, #160]	; (80164d8 <tcp_send_empty_ack+0xc0>)
 8016438:	f004 fcd6 	bl	801ade8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801643c:	7dfb      	ldrb	r3, [r7, #23]
 801643e:	009b      	lsls	r3, r3, #2
 8016440:	b2db      	uxtb	r3, r3
 8016442:	f003 0304 	and.w	r3, r3, #4
 8016446:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8016448:	7d7b      	ldrb	r3, [r7, #21]
 801644a:	b29c      	uxth	r4, r3
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016450:	4618      	mov	r0, r3
 8016452:	f7f8 fb50 	bl	800eaf6 <lwip_htonl>
 8016456:	4603      	mov	r3, r0
 8016458:	2200      	movs	r2, #0
 801645a:	4621      	mov	r1, r4
 801645c:	6878      	ldr	r0, [r7, #4]
 801645e:	f7ff fec1 	bl	80161e4 <tcp_output_alloc_header>
 8016462:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016464:	693b      	ldr	r3, [r7, #16]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d109      	bne.n	801647e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	8b5b      	ldrh	r3, [r3, #26]
 801646e:	f043 0303 	orr.w	r3, r3, #3
 8016472:	b29a      	uxth	r2, r3
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8016478:	f06f 0301 	mvn.w	r3, #1
 801647c:	e023      	b.n	80164c6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801647e:	7dbb      	ldrb	r3, [r7, #22]
 8016480:	7dfa      	ldrb	r2, [r7, #23]
 8016482:	6939      	ldr	r1, [r7, #16]
 8016484:	6878      	ldr	r0, [r7, #4]
 8016486:	f7ff feeb 	bl	8016260 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801648a:	687a      	ldr	r2, [r7, #4]
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	3304      	adds	r3, #4
 8016490:	6939      	ldr	r1, [r7, #16]
 8016492:	6878      	ldr	r0, [r7, #4]
 8016494:	f7ff ff24 	bl	80162e0 <tcp_output_control_segment>
 8016498:	4603      	mov	r3, r0
 801649a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801649c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d007      	beq.n	80164b4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	8b5b      	ldrh	r3, [r3, #26]
 80164a8:	f043 0303 	orr.w	r3, r3, #3
 80164ac:	b29a      	uxth	r2, r3
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	835a      	strh	r2, [r3, #26]
 80164b2:	e006      	b.n	80164c2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	8b5b      	ldrh	r3, [r3, #26]
 80164b8:	f023 0303 	bic.w	r3, r3, #3
 80164bc:	b29a      	uxth	r2, r3
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80164c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80164c6:	4618      	mov	r0, r3
 80164c8:	371c      	adds	r7, #28
 80164ca:	46bd      	mov	sp, r7
 80164cc:	bd90      	pop	{r4, r7, pc}
 80164ce:	bf00      	nop
 80164d0:	08021aa4 	.word	0x08021aa4
 80164d4:	08022260 	.word	0x08022260
 80164d8:	08021af8 	.word	0x08021af8

080164dc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80164dc:	b590      	push	{r4, r7, lr}
 80164de:	b087      	sub	sp, #28
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80164e4:	2300      	movs	r3, #0
 80164e6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d106      	bne.n	80164fc <tcp_keepalive+0x20>
 80164ee:	4b18      	ldr	r3, [pc, #96]	; (8016550 <tcp_keepalive+0x74>)
 80164f0:	f640 0224 	movw	r2, #2084	; 0x824
 80164f4:	4917      	ldr	r1, [pc, #92]	; (8016554 <tcp_keepalive+0x78>)
 80164f6:	4818      	ldr	r0, [pc, #96]	; (8016558 <tcp_keepalive+0x7c>)
 80164f8:	f004 fc76 	bl	801ade8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80164fc:	7dfb      	ldrb	r3, [r7, #23]
 80164fe:	b29c      	uxth	r4, r3
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016504:	3b01      	subs	r3, #1
 8016506:	4618      	mov	r0, r3
 8016508:	f7f8 faf5 	bl	800eaf6 <lwip_htonl>
 801650c:	4603      	mov	r3, r0
 801650e:	2200      	movs	r2, #0
 8016510:	4621      	mov	r1, r4
 8016512:	6878      	ldr	r0, [r7, #4]
 8016514:	f7ff fe66 	bl	80161e4 <tcp_output_alloc_header>
 8016518:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801651a:	693b      	ldr	r3, [r7, #16]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d102      	bne.n	8016526 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8016520:	f04f 33ff 	mov.w	r3, #4294967295
 8016524:	e010      	b.n	8016548 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016526:	7dfb      	ldrb	r3, [r7, #23]
 8016528:	2200      	movs	r2, #0
 801652a:	6939      	ldr	r1, [r7, #16]
 801652c:	6878      	ldr	r0, [r7, #4]
 801652e:	f7ff fe97 	bl	8016260 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016532:	687a      	ldr	r2, [r7, #4]
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	3304      	adds	r3, #4
 8016538:	6939      	ldr	r1, [r7, #16]
 801653a:	6878      	ldr	r0, [r7, #4]
 801653c:	f7ff fed0 	bl	80162e0 <tcp_output_control_segment>
 8016540:	4603      	mov	r3, r0
 8016542:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016544:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016548:	4618      	mov	r0, r3
 801654a:	371c      	adds	r7, #28
 801654c:	46bd      	mov	sp, r7
 801654e:	bd90      	pop	{r4, r7, pc}
 8016550:	08021aa4 	.word	0x08021aa4
 8016554:	08022280 	.word	0x08022280
 8016558:	08021af8 	.word	0x08021af8

0801655c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801655c:	b590      	push	{r4, r7, lr}
 801655e:	b08b      	sub	sp, #44	; 0x2c
 8016560:	af00      	add	r7, sp, #0
 8016562:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016564:	2300      	movs	r3, #0
 8016566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	2b00      	cmp	r3, #0
 801656e:	d106      	bne.n	801657e <tcp_zero_window_probe+0x22>
 8016570:	4b4c      	ldr	r3, [pc, #304]	; (80166a4 <tcp_zero_window_probe+0x148>)
 8016572:	f640 024f 	movw	r2, #2127	; 0x84f
 8016576:	494c      	ldr	r1, [pc, #304]	; (80166a8 <tcp_zero_window_probe+0x14c>)
 8016578:	484c      	ldr	r0, [pc, #304]	; (80166ac <tcp_zero_window_probe+0x150>)
 801657a:	f004 fc35 	bl	801ade8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016582:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8016584:	6a3b      	ldr	r3, [r7, #32]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d101      	bne.n	801658e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801658a:	2300      	movs	r3, #0
 801658c:	e086      	b.n	801669c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016594:	2bff      	cmp	r3, #255	; 0xff
 8016596:	d007      	beq.n	80165a8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801659e:	3301      	adds	r3, #1
 80165a0:	b2da      	uxtb	r2, r3
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80165a8:	6a3b      	ldr	r3, [r7, #32]
 80165aa:	68db      	ldr	r3, [r3, #12]
 80165ac:	899b      	ldrh	r3, [r3, #12]
 80165ae:	b29b      	uxth	r3, r3
 80165b0:	4618      	mov	r0, r3
 80165b2:	f7f8 fa8b 	bl	800eacc <lwip_htons>
 80165b6:	4603      	mov	r3, r0
 80165b8:	b2db      	uxtb	r3, r3
 80165ba:	f003 0301 	and.w	r3, r3, #1
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d005      	beq.n	80165ce <tcp_zero_window_probe+0x72>
 80165c2:	6a3b      	ldr	r3, [r7, #32]
 80165c4:	891b      	ldrh	r3, [r3, #8]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d101      	bne.n	80165ce <tcp_zero_window_probe+0x72>
 80165ca:	2301      	movs	r3, #1
 80165cc:	e000      	b.n	80165d0 <tcp_zero_window_probe+0x74>
 80165ce:	2300      	movs	r3, #0
 80165d0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80165d2:	7ffb      	ldrb	r3, [r7, #31]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	bf0c      	ite	eq
 80165d8:	2301      	moveq	r3, #1
 80165da:	2300      	movne	r3, #0
 80165dc:	b2db      	uxtb	r3, r3
 80165de:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80165e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80165e4:	b299      	uxth	r1, r3
 80165e6:	6a3b      	ldr	r3, [r7, #32]
 80165e8:	68db      	ldr	r3, [r3, #12]
 80165ea:	685b      	ldr	r3, [r3, #4]
 80165ec:	8bba      	ldrh	r2, [r7, #28]
 80165ee:	6878      	ldr	r0, [r7, #4]
 80165f0:	f7ff fdf8 	bl	80161e4 <tcp_output_alloc_header>
 80165f4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80165f6:	69bb      	ldr	r3, [r7, #24]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d102      	bne.n	8016602 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80165fc:	f04f 33ff 	mov.w	r3, #4294967295
 8016600:	e04c      	b.n	801669c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016602:	69bb      	ldr	r3, [r7, #24]
 8016604:	685b      	ldr	r3, [r3, #4]
 8016606:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016608:	7ffb      	ldrb	r3, [r7, #31]
 801660a:	2b00      	cmp	r3, #0
 801660c:	d011      	beq.n	8016632 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801660e:	697b      	ldr	r3, [r7, #20]
 8016610:	899b      	ldrh	r3, [r3, #12]
 8016612:	b29b      	uxth	r3, r3
 8016614:	b21b      	sxth	r3, r3
 8016616:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801661a:	b21c      	sxth	r4, r3
 801661c:	2011      	movs	r0, #17
 801661e:	f7f8 fa55 	bl	800eacc <lwip_htons>
 8016622:	4603      	mov	r3, r0
 8016624:	b21b      	sxth	r3, r3
 8016626:	4323      	orrs	r3, r4
 8016628:	b21b      	sxth	r3, r3
 801662a:	b29a      	uxth	r2, r3
 801662c:	697b      	ldr	r3, [r7, #20]
 801662e:	819a      	strh	r2, [r3, #12]
 8016630:	e010      	b.n	8016654 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8016632:	69bb      	ldr	r3, [r7, #24]
 8016634:	685b      	ldr	r3, [r3, #4]
 8016636:	3314      	adds	r3, #20
 8016638:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801663a:	6a3b      	ldr	r3, [r7, #32]
 801663c:	6858      	ldr	r0, [r3, #4]
 801663e:	6a3b      	ldr	r3, [r7, #32]
 8016640:	685b      	ldr	r3, [r3, #4]
 8016642:	891a      	ldrh	r2, [r3, #8]
 8016644:	6a3b      	ldr	r3, [r7, #32]
 8016646:	891b      	ldrh	r3, [r3, #8]
 8016648:	1ad3      	subs	r3, r2, r3
 801664a:	b29b      	uxth	r3, r3
 801664c:	2201      	movs	r2, #1
 801664e:	6939      	ldr	r1, [r7, #16]
 8016650:	f7f9 ff72 	bl	8010538 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016654:	6a3b      	ldr	r3, [r7, #32]
 8016656:	68db      	ldr	r3, [r3, #12]
 8016658:	685b      	ldr	r3, [r3, #4]
 801665a:	4618      	mov	r0, r3
 801665c:	f7f8 fa4b 	bl	800eaf6 <lwip_htonl>
 8016660:	4603      	mov	r3, r0
 8016662:	3301      	adds	r3, #1
 8016664:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	1ad3      	subs	r3, r2, r3
 801666e:	2b00      	cmp	r3, #0
 8016670:	da02      	bge.n	8016678 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	68fa      	ldr	r2, [r7, #12]
 8016676:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801667c:	2200      	movs	r2, #0
 801667e:	69b9      	ldr	r1, [r7, #24]
 8016680:	6878      	ldr	r0, [r7, #4]
 8016682:	f7ff fded 	bl	8016260 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016686:	687a      	ldr	r2, [r7, #4]
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	3304      	adds	r3, #4
 801668c:	69b9      	ldr	r1, [r7, #24]
 801668e:	6878      	ldr	r0, [r7, #4]
 8016690:	f7ff fe26 	bl	80162e0 <tcp_output_control_segment>
 8016694:	4603      	mov	r3, r0
 8016696:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016698:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801669c:	4618      	mov	r0, r3
 801669e:	372c      	adds	r7, #44	; 0x2c
 80166a0:	46bd      	mov	sp, r7
 80166a2:	bd90      	pop	{r4, r7, pc}
 80166a4:	08021aa4 	.word	0x08021aa4
 80166a8:	0802229c 	.word	0x0802229c
 80166ac:	08021af8 	.word	0x08021af8

080166b0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80166b0:	b580      	push	{r7, lr}
 80166b2:	b082      	sub	sp, #8
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80166b8:	f7fa f82c 	bl	8010714 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80166bc:	4b0a      	ldr	r3, [pc, #40]	; (80166e8 <tcpip_tcp_timer+0x38>)
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d103      	bne.n	80166cc <tcpip_tcp_timer+0x1c>
 80166c4:	4b09      	ldr	r3, [pc, #36]	; (80166ec <tcpip_tcp_timer+0x3c>)
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d005      	beq.n	80166d8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80166cc:	2200      	movs	r2, #0
 80166ce:	4908      	ldr	r1, [pc, #32]	; (80166f0 <tcpip_tcp_timer+0x40>)
 80166d0:	20fa      	movs	r0, #250	; 0xfa
 80166d2:	f000 f8f1 	bl	80168b8 <sys_timeout>
 80166d6:	e002      	b.n	80166de <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80166d8:	4b06      	ldr	r3, [pc, #24]	; (80166f4 <tcpip_tcp_timer+0x44>)
 80166da:	2200      	movs	r2, #0
 80166dc:	601a      	str	r2, [r3, #0]
  }
}
 80166de:	bf00      	nop
 80166e0:	3708      	adds	r7, #8
 80166e2:	46bd      	mov	sp, r7
 80166e4:	bd80      	pop	{r7, pc}
 80166e6:	bf00      	nop
 80166e8:	20007c9c 	.word	0x20007c9c
 80166ec:	20007cac 	.word	0x20007cac
 80166f0:	080166b1 	.word	0x080166b1
 80166f4:	200008d0 	.word	0x200008d0

080166f8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80166fc:	4b0a      	ldr	r3, [pc, #40]	; (8016728 <tcp_timer_needed+0x30>)
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	2b00      	cmp	r3, #0
 8016702:	d10f      	bne.n	8016724 <tcp_timer_needed+0x2c>
 8016704:	4b09      	ldr	r3, [pc, #36]	; (801672c <tcp_timer_needed+0x34>)
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d103      	bne.n	8016714 <tcp_timer_needed+0x1c>
 801670c:	4b08      	ldr	r3, [pc, #32]	; (8016730 <tcp_timer_needed+0x38>)
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	2b00      	cmp	r3, #0
 8016712:	d007      	beq.n	8016724 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016714:	4b04      	ldr	r3, [pc, #16]	; (8016728 <tcp_timer_needed+0x30>)
 8016716:	2201      	movs	r2, #1
 8016718:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801671a:	2200      	movs	r2, #0
 801671c:	4905      	ldr	r1, [pc, #20]	; (8016734 <tcp_timer_needed+0x3c>)
 801671e:	20fa      	movs	r0, #250	; 0xfa
 8016720:	f000 f8ca 	bl	80168b8 <sys_timeout>
  }
}
 8016724:	bf00      	nop
 8016726:	bd80      	pop	{r7, pc}
 8016728:	200008d0 	.word	0x200008d0
 801672c:	20007c9c 	.word	0x20007c9c
 8016730:	20007cac 	.word	0x20007cac
 8016734:	080166b1 	.word	0x080166b1

08016738 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b086      	sub	sp, #24
 801673c:	af00      	add	r7, sp, #0
 801673e:	60f8      	str	r0, [r7, #12]
 8016740:	60b9      	str	r1, [r7, #8]
 8016742:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016744:	200a      	movs	r0, #10
 8016746:	f7f8 fe77 	bl	800f438 <memp_malloc>
 801674a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801674c:	693b      	ldr	r3, [r7, #16]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d109      	bne.n	8016766 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016752:	693b      	ldr	r3, [r7, #16]
 8016754:	2b00      	cmp	r3, #0
 8016756:	d151      	bne.n	80167fc <sys_timeout_abs+0xc4>
 8016758:	4b2a      	ldr	r3, [pc, #168]	; (8016804 <sys_timeout_abs+0xcc>)
 801675a:	22be      	movs	r2, #190	; 0xbe
 801675c:	492a      	ldr	r1, [pc, #168]	; (8016808 <sys_timeout_abs+0xd0>)
 801675e:	482b      	ldr	r0, [pc, #172]	; (801680c <sys_timeout_abs+0xd4>)
 8016760:	f004 fb42 	bl	801ade8 <iprintf>
    return;
 8016764:	e04a      	b.n	80167fc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8016766:	693b      	ldr	r3, [r7, #16]
 8016768:	2200      	movs	r2, #0
 801676a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801676c:	693b      	ldr	r3, [r7, #16]
 801676e:	68ba      	ldr	r2, [r7, #8]
 8016770:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016772:	693b      	ldr	r3, [r7, #16]
 8016774:	687a      	ldr	r2, [r7, #4]
 8016776:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016778:	693b      	ldr	r3, [r7, #16]
 801677a:	68fa      	ldr	r2, [r7, #12]
 801677c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801677e:	4b24      	ldr	r3, [pc, #144]	; (8016810 <sys_timeout_abs+0xd8>)
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	2b00      	cmp	r3, #0
 8016784:	d103      	bne.n	801678e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8016786:	4a22      	ldr	r2, [pc, #136]	; (8016810 <sys_timeout_abs+0xd8>)
 8016788:	693b      	ldr	r3, [r7, #16]
 801678a:	6013      	str	r3, [r2, #0]
    return;
 801678c:	e037      	b.n	80167fe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801678e:	693b      	ldr	r3, [r7, #16]
 8016790:	685a      	ldr	r2, [r3, #4]
 8016792:	4b1f      	ldr	r3, [pc, #124]	; (8016810 <sys_timeout_abs+0xd8>)
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	685b      	ldr	r3, [r3, #4]
 8016798:	1ad3      	subs	r3, r2, r3
 801679a:	0fdb      	lsrs	r3, r3, #31
 801679c:	f003 0301 	and.w	r3, r3, #1
 80167a0:	b2db      	uxtb	r3, r3
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d007      	beq.n	80167b6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80167a6:	4b1a      	ldr	r3, [pc, #104]	; (8016810 <sys_timeout_abs+0xd8>)
 80167a8:	681a      	ldr	r2, [r3, #0]
 80167aa:	693b      	ldr	r3, [r7, #16]
 80167ac:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80167ae:	4a18      	ldr	r2, [pc, #96]	; (8016810 <sys_timeout_abs+0xd8>)
 80167b0:	693b      	ldr	r3, [r7, #16]
 80167b2:	6013      	str	r3, [r2, #0]
 80167b4:	e023      	b.n	80167fe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80167b6:	4b16      	ldr	r3, [pc, #88]	; (8016810 <sys_timeout_abs+0xd8>)
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	617b      	str	r3, [r7, #20]
 80167bc:	e01a      	b.n	80167f4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80167be:	697b      	ldr	r3, [r7, #20]
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d00b      	beq.n	80167de <sys_timeout_abs+0xa6>
 80167c6:	693b      	ldr	r3, [r7, #16]
 80167c8:	685a      	ldr	r2, [r3, #4]
 80167ca:	697b      	ldr	r3, [r7, #20]
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	685b      	ldr	r3, [r3, #4]
 80167d0:	1ad3      	subs	r3, r2, r3
 80167d2:	0fdb      	lsrs	r3, r3, #31
 80167d4:	f003 0301 	and.w	r3, r3, #1
 80167d8:	b2db      	uxtb	r3, r3
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d007      	beq.n	80167ee <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80167de:	697b      	ldr	r3, [r7, #20]
 80167e0:	681a      	ldr	r2, [r3, #0]
 80167e2:	693b      	ldr	r3, [r7, #16]
 80167e4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80167e6:	697b      	ldr	r3, [r7, #20]
 80167e8:	693a      	ldr	r2, [r7, #16]
 80167ea:	601a      	str	r2, [r3, #0]
        break;
 80167ec:	e007      	b.n	80167fe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80167ee:	697b      	ldr	r3, [r7, #20]
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	617b      	str	r3, [r7, #20]
 80167f4:	697b      	ldr	r3, [r7, #20]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d1e1      	bne.n	80167be <sys_timeout_abs+0x86>
 80167fa:	e000      	b.n	80167fe <sys_timeout_abs+0xc6>
    return;
 80167fc:	bf00      	nop
      }
    }
  }
}
 80167fe:	3718      	adds	r7, #24
 8016800:	46bd      	mov	sp, r7
 8016802:	bd80      	pop	{r7, pc}
 8016804:	080222c0 	.word	0x080222c0
 8016808:	080222f4 	.word	0x080222f4
 801680c:	08022334 	.word	0x08022334
 8016810:	200008c8 	.word	0x200008c8

08016814 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016814:	b580      	push	{r7, lr}
 8016816:	b086      	sub	sp, #24
 8016818:	af00      	add	r7, sp, #0
 801681a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016820:	697b      	ldr	r3, [r7, #20]
 8016822:	685b      	ldr	r3, [r3, #4]
 8016824:	4798      	blx	r3

  now = sys_now();
 8016826:	f7f3 f80f 	bl	8009848 <sys_now>
 801682a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801682c:	697b      	ldr	r3, [r7, #20]
 801682e:	681a      	ldr	r2, [r3, #0]
 8016830:	4b0f      	ldr	r3, [pc, #60]	; (8016870 <lwip_cyclic_timer+0x5c>)
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	4413      	add	r3, r2
 8016836:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016838:	68fa      	ldr	r2, [r7, #12]
 801683a:	693b      	ldr	r3, [r7, #16]
 801683c:	1ad3      	subs	r3, r2, r3
 801683e:	0fdb      	lsrs	r3, r3, #31
 8016840:	f003 0301 	and.w	r3, r3, #1
 8016844:	b2db      	uxtb	r3, r3
 8016846:	2b00      	cmp	r3, #0
 8016848:	d009      	beq.n	801685e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801684a:	697b      	ldr	r3, [r7, #20]
 801684c:	681a      	ldr	r2, [r3, #0]
 801684e:	693b      	ldr	r3, [r7, #16]
 8016850:	4413      	add	r3, r2
 8016852:	687a      	ldr	r2, [r7, #4]
 8016854:	4907      	ldr	r1, [pc, #28]	; (8016874 <lwip_cyclic_timer+0x60>)
 8016856:	4618      	mov	r0, r3
 8016858:	f7ff ff6e 	bl	8016738 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801685c:	e004      	b.n	8016868 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801685e:	687a      	ldr	r2, [r7, #4]
 8016860:	4904      	ldr	r1, [pc, #16]	; (8016874 <lwip_cyclic_timer+0x60>)
 8016862:	68f8      	ldr	r0, [r7, #12]
 8016864:	f7ff ff68 	bl	8016738 <sys_timeout_abs>
}
 8016868:	bf00      	nop
 801686a:	3718      	adds	r7, #24
 801686c:	46bd      	mov	sp, r7
 801686e:	bd80      	pop	{r7, pc}
 8016870:	200008cc 	.word	0x200008cc
 8016874:	08016815 	.word	0x08016815

08016878 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016878:	b580      	push	{r7, lr}
 801687a:	b082      	sub	sp, #8
 801687c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801687e:	2301      	movs	r3, #1
 8016880:	607b      	str	r3, [r7, #4]
 8016882:	e00e      	b.n	80168a2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016884:	4a0a      	ldr	r2, [pc, #40]	; (80168b0 <sys_timeouts_init+0x38>)
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	00db      	lsls	r3, r3, #3
 8016890:	4a07      	ldr	r2, [pc, #28]	; (80168b0 <sys_timeouts_init+0x38>)
 8016892:	4413      	add	r3, r2
 8016894:	461a      	mov	r2, r3
 8016896:	4907      	ldr	r1, [pc, #28]	; (80168b4 <sys_timeouts_init+0x3c>)
 8016898:	f000 f80e 	bl	80168b8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	3301      	adds	r3, #1
 80168a0:	607b      	str	r3, [r7, #4]
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	2b02      	cmp	r3, #2
 80168a6:	d9ed      	bls.n	8016884 <sys_timeouts_init+0xc>
  }
}
 80168a8:	bf00      	nop
 80168aa:	3708      	adds	r7, #8
 80168ac:	46bd      	mov	sp, r7
 80168ae:	bd80      	pop	{r7, pc}
 80168b0:	080246e4 	.word	0x080246e4
 80168b4:	08016815 	.word	0x08016815

080168b8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b086      	sub	sp, #24
 80168bc:	af00      	add	r7, sp, #0
 80168be:	60f8      	str	r0, [r7, #12]
 80168c0:	60b9      	str	r1, [r7, #8]
 80168c2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80168ca:	d306      	bcc.n	80168da <sys_timeout+0x22>
 80168cc:	4b0a      	ldr	r3, [pc, #40]	; (80168f8 <sys_timeout+0x40>)
 80168ce:	f240 1229 	movw	r2, #297	; 0x129
 80168d2:	490a      	ldr	r1, [pc, #40]	; (80168fc <sys_timeout+0x44>)
 80168d4:	480a      	ldr	r0, [pc, #40]	; (8016900 <sys_timeout+0x48>)
 80168d6:	f004 fa87 	bl	801ade8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80168da:	f7f2 ffb5 	bl	8009848 <sys_now>
 80168de:	4602      	mov	r2, r0
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	4413      	add	r3, r2
 80168e4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80168e6:	687a      	ldr	r2, [r7, #4]
 80168e8:	68b9      	ldr	r1, [r7, #8]
 80168ea:	6978      	ldr	r0, [r7, #20]
 80168ec:	f7ff ff24 	bl	8016738 <sys_timeout_abs>
#endif
}
 80168f0:	bf00      	nop
 80168f2:	3718      	adds	r7, #24
 80168f4:	46bd      	mov	sp, r7
 80168f6:	bd80      	pop	{r7, pc}
 80168f8:	080222c0 	.word	0x080222c0
 80168fc:	0802235c 	.word	0x0802235c
 8016900:	08022334 	.word	0x08022334

08016904 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016904:	b580      	push	{r7, lr}
 8016906:	b084      	sub	sp, #16
 8016908:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801690a:	f7f2 ff9d 	bl	8009848 <sys_now>
 801690e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8016910:	4b17      	ldr	r3, [pc, #92]	; (8016970 <sys_check_timeouts+0x6c>)
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8016916:	68bb      	ldr	r3, [r7, #8]
 8016918:	2b00      	cmp	r3, #0
 801691a:	d022      	beq.n	8016962 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801691c:	68bb      	ldr	r3, [r7, #8]
 801691e:	685b      	ldr	r3, [r3, #4]
 8016920:	68fa      	ldr	r2, [r7, #12]
 8016922:	1ad3      	subs	r3, r2, r3
 8016924:	0fdb      	lsrs	r3, r3, #31
 8016926:	f003 0301 	and.w	r3, r3, #1
 801692a:	b2db      	uxtb	r3, r3
 801692c:	2b00      	cmp	r3, #0
 801692e:	d11a      	bne.n	8016966 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8016930:	68bb      	ldr	r3, [r7, #8]
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	4a0e      	ldr	r2, [pc, #56]	; (8016970 <sys_check_timeouts+0x6c>)
 8016936:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8016938:	68bb      	ldr	r3, [r7, #8]
 801693a:	689b      	ldr	r3, [r3, #8]
 801693c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801693e:	68bb      	ldr	r3, [r7, #8]
 8016940:	68db      	ldr	r3, [r3, #12]
 8016942:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8016944:	68bb      	ldr	r3, [r7, #8]
 8016946:	685b      	ldr	r3, [r3, #4]
 8016948:	4a0a      	ldr	r2, [pc, #40]	; (8016974 <sys_check_timeouts+0x70>)
 801694a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801694c:	68b9      	ldr	r1, [r7, #8]
 801694e:	200a      	movs	r0, #10
 8016950:	f7f8 fdc4 	bl	800f4dc <memp_free>
    if (handler != NULL) {
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d0da      	beq.n	8016910 <sys_check_timeouts+0xc>
      handler(arg);
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	6838      	ldr	r0, [r7, #0]
 801695e:	4798      	blx	r3
  do {
 8016960:	e7d6      	b.n	8016910 <sys_check_timeouts+0xc>
      return;
 8016962:	bf00      	nop
 8016964:	e000      	b.n	8016968 <sys_check_timeouts+0x64>
      return;
 8016966:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8016968:	3710      	adds	r7, #16
 801696a:	46bd      	mov	sp, r7
 801696c:	bd80      	pop	{r7, pc}
 801696e:	bf00      	nop
 8016970:	200008c8 	.word	0x200008c8
 8016974:	200008cc 	.word	0x200008cc

08016978 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8016978:	b580      	push	{r7, lr}
 801697a:	b082      	sub	sp, #8
 801697c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801697e:	4b16      	ldr	r3, [pc, #88]	; (80169d8 <sys_timeouts_sleeptime+0x60>)
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	2b00      	cmp	r3, #0
 8016984:	d102      	bne.n	801698c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8016986:	f04f 33ff 	mov.w	r3, #4294967295
 801698a:	e020      	b.n	80169ce <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801698c:	f7f2 ff5c 	bl	8009848 <sys_now>
 8016990:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8016992:	4b11      	ldr	r3, [pc, #68]	; (80169d8 <sys_timeouts_sleeptime+0x60>)
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	685a      	ldr	r2, [r3, #4]
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	1ad3      	subs	r3, r2, r3
 801699c:	0fdb      	lsrs	r3, r3, #31
 801699e:	f003 0301 	and.w	r3, r3, #1
 80169a2:	b2db      	uxtb	r3, r3
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d001      	beq.n	80169ac <sys_timeouts_sleeptime+0x34>
    return 0;
 80169a8:	2300      	movs	r3, #0
 80169aa:	e010      	b.n	80169ce <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80169ac:	4b0a      	ldr	r3, [pc, #40]	; (80169d8 <sys_timeouts_sleeptime+0x60>)
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	685a      	ldr	r2, [r3, #4]
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	1ad3      	subs	r3, r2, r3
 80169b6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80169b8:	683b      	ldr	r3, [r7, #0]
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	da06      	bge.n	80169cc <sys_timeouts_sleeptime+0x54>
 80169be:	4b07      	ldr	r3, [pc, #28]	; (80169dc <sys_timeouts_sleeptime+0x64>)
 80169c0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80169c4:	4906      	ldr	r1, [pc, #24]	; (80169e0 <sys_timeouts_sleeptime+0x68>)
 80169c6:	4807      	ldr	r0, [pc, #28]	; (80169e4 <sys_timeouts_sleeptime+0x6c>)
 80169c8:	f004 fa0e 	bl	801ade8 <iprintf>
    return ret;
 80169cc:	683b      	ldr	r3, [r7, #0]
  }
}
 80169ce:	4618      	mov	r0, r3
 80169d0:	3708      	adds	r7, #8
 80169d2:	46bd      	mov	sp, r7
 80169d4:	bd80      	pop	{r7, pc}
 80169d6:	bf00      	nop
 80169d8:	200008c8 	.word	0x200008c8
 80169dc:	080222c0 	.word	0x080222c0
 80169e0:	08022394 	.word	0x08022394
 80169e4:	08022334 	.word	0x08022334

080169e8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80169ec:	f004 fa78 	bl	801aee0 <rand>
 80169f0:	4603      	mov	r3, r0
 80169f2:	b29b      	uxth	r3, r3
 80169f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80169f8:	b29b      	uxth	r3, r3
 80169fa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80169fe:	b29a      	uxth	r2, r3
 8016a00:	4b01      	ldr	r3, [pc, #4]	; (8016a08 <udp_init+0x20>)
 8016a02:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016a04:	bf00      	nop
 8016a06:	bd80      	pop	{r7, pc}
 8016a08:	2000001c 	.word	0x2000001c

08016a0c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016a0c:	b480      	push	{r7}
 8016a0e:	b083      	sub	sp, #12
 8016a10:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8016a12:	2300      	movs	r3, #0
 8016a14:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8016a16:	4b17      	ldr	r3, [pc, #92]	; (8016a74 <udp_new_port+0x68>)
 8016a18:	881b      	ldrh	r3, [r3, #0]
 8016a1a:	1c5a      	adds	r2, r3, #1
 8016a1c:	b291      	uxth	r1, r2
 8016a1e:	4a15      	ldr	r2, [pc, #84]	; (8016a74 <udp_new_port+0x68>)
 8016a20:	8011      	strh	r1, [r2, #0]
 8016a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016a26:	4293      	cmp	r3, r2
 8016a28:	d103      	bne.n	8016a32 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8016a2a:	4b12      	ldr	r3, [pc, #72]	; (8016a74 <udp_new_port+0x68>)
 8016a2c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016a30:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016a32:	4b11      	ldr	r3, [pc, #68]	; (8016a78 <udp_new_port+0x6c>)
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	603b      	str	r3, [r7, #0]
 8016a38:	e011      	b.n	8016a5e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8016a3a:	683b      	ldr	r3, [r7, #0]
 8016a3c:	8a5a      	ldrh	r2, [r3, #18]
 8016a3e:	4b0d      	ldr	r3, [pc, #52]	; (8016a74 <udp_new_port+0x68>)
 8016a40:	881b      	ldrh	r3, [r3, #0]
 8016a42:	429a      	cmp	r2, r3
 8016a44:	d108      	bne.n	8016a58 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8016a46:	88fb      	ldrh	r3, [r7, #6]
 8016a48:	3301      	adds	r3, #1
 8016a4a:	80fb      	strh	r3, [r7, #6]
 8016a4c:	88fb      	ldrh	r3, [r7, #6]
 8016a4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016a52:	d3e0      	bcc.n	8016a16 <udp_new_port+0xa>
        return 0;
 8016a54:	2300      	movs	r3, #0
 8016a56:	e007      	b.n	8016a68 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016a58:	683b      	ldr	r3, [r7, #0]
 8016a5a:	68db      	ldr	r3, [r3, #12]
 8016a5c:	603b      	str	r3, [r7, #0]
 8016a5e:	683b      	ldr	r3, [r7, #0]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d1ea      	bne.n	8016a3a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8016a64:	4b03      	ldr	r3, [pc, #12]	; (8016a74 <udp_new_port+0x68>)
 8016a66:	881b      	ldrh	r3, [r3, #0]
}
 8016a68:	4618      	mov	r0, r3
 8016a6a:	370c      	adds	r7, #12
 8016a6c:	46bd      	mov	sp, r7
 8016a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a72:	4770      	bx	lr
 8016a74:	2000001c 	.word	0x2000001c
 8016a78:	20007cb4 	.word	0x20007cb4

08016a7c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016a7c:	b580      	push	{r7, lr}
 8016a7e:	b084      	sub	sp, #16
 8016a80:	af00      	add	r7, sp, #0
 8016a82:	60f8      	str	r0, [r7, #12]
 8016a84:	60b9      	str	r1, [r7, #8]
 8016a86:	4613      	mov	r3, r2
 8016a88:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d105      	bne.n	8016a9c <udp_input_local_match+0x20>
 8016a90:	4b27      	ldr	r3, [pc, #156]	; (8016b30 <udp_input_local_match+0xb4>)
 8016a92:	2287      	movs	r2, #135	; 0x87
 8016a94:	4927      	ldr	r1, [pc, #156]	; (8016b34 <udp_input_local_match+0xb8>)
 8016a96:	4828      	ldr	r0, [pc, #160]	; (8016b38 <udp_input_local_match+0xbc>)
 8016a98:	f004 f9a6 	bl	801ade8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016a9c:	68bb      	ldr	r3, [r7, #8]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d105      	bne.n	8016aae <udp_input_local_match+0x32>
 8016aa2:	4b23      	ldr	r3, [pc, #140]	; (8016b30 <udp_input_local_match+0xb4>)
 8016aa4:	2288      	movs	r2, #136	; 0x88
 8016aa6:	4925      	ldr	r1, [pc, #148]	; (8016b3c <udp_input_local_match+0xc0>)
 8016aa8:	4823      	ldr	r0, [pc, #140]	; (8016b38 <udp_input_local_match+0xbc>)
 8016aaa:	f004 f99d 	bl	801ade8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	7a1b      	ldrb	r3, [r3, #8]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d00b      	beq.n	8016ace <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	7a1a      	ldrb	r2, [r3, #8]
 8016aba:	4b21      	ldr	r3, [pc, #132]	; (8016b40 <udp_input_local_match+0xc4>)
 8016abc:	685b      	ldr	r3, [r3, #4]
 8016abe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016ac2:	3301      	adds	r3, #1
 8016ac4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016ac6:	429a      	cmp	r2, r3
 8016ac8:	d001      	beq.n	8016ace <udp_input_local_match+0x52>
    return 0;
 8016aca:	2300      	movs	r3, #0
 8016acc:	e02b      	b.n	8016b26 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016ace:	79fb      	ldrb	r3, [r7, #7]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d018      	beq.n	8016b06 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d013      	beq.n	8016b02 <udp_input_local_match+0x86>
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d00f      	beq.n	8016b02 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016ae2:	4b17      	ldr	r3, [pc, #92]	; (8016b40 <udp_input_local_match+0xc4>)
 8016ae4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016aea:	d00a      	beq.n	8016b02 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	681a      	ldr	r2, [r3, #0]
 8016af0:	4b13      	ldr	r3, [pc, #76]	; (8016b40 <udp_input_local_match+0xc4>)
 8016af2:	695b      	ldr	r3, [r3, #20]
 8016af4:	405a      	eors	r2, r3
 8016af6:	68bb      	ldr	r3, [r7, #8]
 8016af8:	3308      	adds	r3, #8
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d110      	bne.n	8016b24 <udp_input_local_match+0xa8>
          return 1;
 8016b02:	2301      	movs	r3, #1
 8016b04:	e00f      	b.n	8016b26 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d009      	beq.n	8016b20 <udp_input_local_match+0xa4>
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d005      	beq.n	8016b20 <udp_input_local_match+0xa4>
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	681a      	ldr	r2, [r3, #0]
 8016b18:	4b09      	ldr	r3, [pc, #36]	; (8016b40 <udp_input_local_match+0xc4>)
 8016b1a:	695b      	ldr	r3, [r3, #20]
 8016b1c:	429a      	cmp	r2, r3
 8016b1e:	d101      	bne.n	8016b24 <udp_input_local_match+0xa8>
        return 1;
 8016b20:	2301      	movs	r3, #1
 8016b22:	e000      	b.n	8016b26 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016b24:	2300      	movs	r3, #0
}
 8016b26:	4618      	mov	r0, r3
 8016b28:	3710      	adds	r7, #16
 8016b2a:	46bd      	mov	sp, r7
 8016b2c:	bd80      	pop	{r7, pc}
 8016b2e:	bf00      	nop
 8016b30:	080223a8 	.word	0x080223a8
 8016b34:	080223d8 	.word	0x080223d8
 8016b38:	080223fc 	.word	0x080223fc
 8016b3c:	08022424 	.word	0x08022424
 8016b40:	20004588 	.word	0x20004588

08016b44 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016b44:	b590      	push	{r4, r7, lr}
 8016b46:	b08d      	sub	sp, #52	; 0x34
 8016b48:	af02      	add	r7, sp, #8
 8016b4a:	6078      	str	r0, [r7, #4]
 8016b4c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016b4e:	2300      	movs	r3, #0
 8016b50:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d105      	bne.n	8016b64 <udp_input+0x20>
 8016b58:	4b7c      	ldr	r3, [pc, #496]	; (8016d4c <udp_input+0x208>)
 8016b5a:	22cf      	movs	r2, #207	; 0xcf
 8016b5c:	497c      	ldr	r1, [pc, #496]	; (8016d50 <udp_input+0x20c>)
 8016b5e:	487d      	ldr	r0, [pc, #500]	; (8016d54 <udp_input+0x210>)
 8016b60:	f004 f942 	bl	801ade8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016b64:	683b      	ldr	r3, [r7, #0]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d105      	bne.n	8016b76 <udp_input+0x32>
 8016b6a:	4b78      	ldr	r3, [pc, #480]	; (8016d4c <udp_input+0x208>)
 8016b6c:	22d0      	movs	r2, #208	; 0xd0
 8016b6e:	497a      	ldr	r1, [pc, #488]	; (8016d58 <udp_input+0x214>)
 8016b70:	4878      	ldr	r0, [pc, #480]	; (8016d54 <udp_input+0x210>)
 8016b72:	f004 f939 	bl	801ade8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	895b      	ldrh	r3, [r3, #10]
 8016b7a:	2b07      	cmp	r3, #7
 8016b7c:	d803      	bhi.n	8016b86 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016b7e:	6878      	ldr	r0, [r7, #4]
 8016b80:	f7f9 fad4 	bl	801012c <pbuf_free>
    goto end;
 8016b84:	e0de      	b.n	8016d44 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	685b      	ldr	r3, [r3, #4]
 8016b8a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016b8c:	4b73      	ldr	r3, [pc, #460]	; (8016d5c <udp_input+0x218>)
 8016b8e:	695a      	ldr	r2, [r3, #20]
 8016b90:	4b72      	ldr	r3, [pc, #456]	; (8016d5c <udp_input+0x218>)
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	4619      	mov	r1, r3
 8016b96:	4610      	mov	r0, r2
 8016b98:	f001 ffec 	bl	8018b74 <ip4_addr_isbroadcast_u32>
 8016b9c:	4603      	mov	r3, r0
 8016b9e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016ba0:	697b      	ldr	r3, [r7, #20]
 8016ba2:	881b      	ldrh	r3, [r3, #0]
 8016ba4:	b29b      	uxth	r3, r3
 8016ba6:	4618      	mov	r0, r3
 8016ba8:	f7f7 ff90 	bl	800eacc <lwip_htons>
 8016bac:	4603      	mov	r3, r0
 8016bae:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016bb0:	697b      	ldr	r3, [r7, #20]
 8016bb2:	885b      	ldrh	r3, [r3, #2]
 8016bb4:	b29b      	uxth	r3, r3
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	f7f7 ff88 	bl	800eacc <lwip_htons>
 8016bbc:	4603      	mov	r3, r0
 8016bbe:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016bc4:	2300      	movs	r3, #0
 8016bc6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016bc8:	2300      	movs	r3, #0
 8016bca:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016bcc:	4b64      	ldr	r3, [pc, #400]	; (8016d60 <udp_input+0x21c>)
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8016bd2:	e054      	b.n	8016c7e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bd6:	8a5b      	ldrh	r3, [r3, #18]
 8016bd8:	89fa      	ldrh	r2, [r7, #14]
 8016bda:	429a      	cmp	r2, r3
 8016bdc:	d14a      	bne.n	8016c74 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016bde:	7cfb      	ldrb	r3, [r7, #19]
 8016be0:	461a      	mov	r2, r3
 8016be2:	6839      	ldr	r1, [r7, #0]
 8016be4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016be6:	f7ff ff49 	bl	8016a7c <udp_input_local_match>
 8016bea:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d041      	beq.n	8016c74 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bf2:	7c1b      	ldrb	r3, [r3, #16]
 8016bf4:	f003 0304 	and.w	r3, r3, #4
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d11d      	bne.n	8016c38 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016bfc:	69fb      	ldr	r3, [r7, #28]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d102      	bne.n	8016c08 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c04:	61fb      	str	r3, [r7, #28]
 8016c06:	e017      	b.n	8016c38 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016c08:	7cfb      	ldrb	r3, [r7, #19]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d014      	beq.n	8016c38 <udp_input+0xf4>
 8016c0e:	4b53      	ldr	r3, [pc, #332]	; (8016d5c <udp_input+0x218>)
 8016c10:	695b      	ldr	r3, [r3, #20]
 8016c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c16:	d10f      	bne.n	8016c38 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016c18:	69fb      	ldr	r3, [r7, #28]
 8016c1a:	681a      	ldr	r2, [r3, #0]
 8016c1c:	683b      	ldr	r3, [r7, #0]
 8016c1e:	3304      	adds	r3, #4
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	429a      	cmp	r2, r3
 8016c24:	d008      	beq.n	8016c38 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c28:	681a      	ldr	r2, [r3, #0]
 8016c2a:	683b      	ldr	r3, [r7, #0]
 8016c2c:	3304      	adds	r3, #4
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	429a      	cmp	r2, r3
 8016c32:	d101      	bne.n	8016c38 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c36:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c3a:	8a9b      	ldrh	r3, [r3, #20]
 8016c3c:	8a3a      	ldrh	r2, [r7, #16]
 8016c3e:	429a      	cmp	r2, r3
 8016c40:	d118      	bne.n	8016c74 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c44:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d005      	beq.n	8016c56 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c4c:	685a      	ldr	r2, [r3, #4]
 8016c4e:	4b43      	ldr	r3, [pc, #268]	; (8016d5c <udp_input+0x218>)
 8016c50:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016c52:	429a      	cmp	r2, r3
 8016c54:	d10e      	bne.n	8016c74 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016c56:	6a3b      	ldr	r3, [r7, #32]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d014      	beq.n	8016c86 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c5e:	68da      	ldr	r2, [r3, #12]
 8016c60:	6a3b      	ldr	r3, [r7, #32]
 8016c62:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016c64:	4b3e      	ldr	r3, [pc, #248]	; (8016d60 <udp_input+0x21c>)
 8016c66:	681a      	ldr	r2, [r3, #0]
 8016c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c6a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016c6c:	4a3c      	ldr	r2, [pc, #240]	; (8016d60 <udp_input+0x21c>)
 8016c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c70:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016c72:	e008      	b.n	8016c86 <udp_input+0x142>
      }
    }

    prev = pcb;
 8016c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c76:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c7a:	68db      	ldr	r3, [r3, #12]
 8016c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8016c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d1a7      	bne.n	8016bd4 <udp_input+0x90>
 8016c84:	e000      	b.n	8016c88 <udp_input+0x144>
        break;
 8016c86:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d101      	bne.n	8016c92 <udp_input+0x14e>
    pcb = uncon_pcb;
 8016c8e:	69fb      	ldr	r3, [r7, #28]
 8016c90:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d002      	beq.n	8016c9e <udp_input+0x15a>
    for_us = 1;
 8016c98:	2301      	movs	r3, #1
 8016c9a:	76fb      	strb	r3, [r7, #27]
 8016c9c:	e00a      	b.n	8016cb4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016c9e:	683b      	ldr	r3, [r7, #0]
 8016ca0:	3304      	adds	r3, #4
 8016ca2:	681a      	ldr	r2, [r3, #0]
 8016ca4:	4b2d      	ldr	r3, [pc, #180]	; (8016d5c <udp_input+0x218>)
 8016ca6:	695b      	ldr	r3, [r3, #20]
 8016ca8:	429a      	cmp	r2, r3
 8016caa:	bf0c      	ite	eq
 8016cac:	2301      	moveq	r3, #1
 8016cae:	2300      	movne	r3, #0
 8016cb0:	b2db      	uxtb	r3, r3
 8016cb2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016cb4:	7efb      	ldrb	r3, [r7, #27]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d041      	beq.n	8016d3e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016cba:	2108      	movs	r1, #8
 8016cbc:	6878      	ldr	r0, [r7, #4]
 8016cbe:	f7f9 f9af 	bl	8010020 <pbuf_remove_header>
 8016cc2:	4603      	mov	r3, r0
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d00a      	beq.n	8016cde <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016cc8:	4b20      	ldr	r3, [pc, #128]	; (8016d4c <udp_input+0x208>)
 8016cca:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8016cce:	4925      	ldr	r1, [pc, #148]	; (8016d64 <udp_input+0x220>)
 8016cd0:	4820      	ldr	r0, [pc, #128]	; (8016d54 <udp_input+0x210>)
 8016cd2:	f004 f889 	bl	801ade8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016cd6:	6878      	ldr	r0, [r7, #4]
 8016cd8:	f7f9 fa28 	bl	801012c <pbuf_free>
      goto end;
 8016cdc:	e032      	b.n	8016d44 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d012      	beq.n	8016d0a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ce6:	699b      	ldr	r3, [r3, #24]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d00a      	beq.n	8016d02 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cee:	699c      	ldr	r4, [r3, #24]
 8016cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cf2:	69d8      	ldr	r0, [r3, #28]
 8016cf4:	8a3b      	ldrh	r3, [r7, #16]
 8016cf6:	9300      	str	r3, [sp, #0]
 8016cf8:	4b1b      	ldr	r3, [pc, #108]	; (8016d68 <udp_input+0x224>)
 8016cfa:	687a      	ldr	r2, [r7, #4]
 8016cfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016cfe:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016d00:	e021      	b.n	8016d46 <udp_input+0x202>
        pbuf_free(p);
 8016d02:	6878      	ldr	r0, [r7, #4]
 8016d04:	f7f9 fa12 	bl	801012c <pbuf_free>
        goto end;
 8016d08:	e01c      	b.n	8016d44 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016d0a:	7cfb      	ldrb	r3, [r7, #19]
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d112      	bne.n	8016d36 <udp_input+0x1f2>
 8016d10:	4b12      	ldr	r3, [pc, #72]	; (8016d5c <udp_input+0x218>)
 8016d12:	695b      	ldr	r3, [r3, #20]
 8016d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016d18:	2be0      	cmp	r3, #224	; 0xe0
 8016d1a:	d00c      	beq.n	8016d36 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016d1c:	4b0f      	ldr	r3, [pc, #60]	; (8016d5c <udp_input+0x218>)
 8016d1e:	899b      	ldrh	r3, [r3, #12]
 8016d20:	3308      	adds	r3, #8
 8016d22:	b29b      	uxth	r3, r3
 8016d24:	b21b      	sxth	r3, r3
 8016d26:	4619      	mov	r1, r3
 8016d28:	6878      	ldr	r0, [r7, #4]
 8016d2a:	f7f9 f9ec 	bl	8010106 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016d2e:	2103      	movs	r1, #3
 8016d30:	6878      	ldr	r0, [r7, #4]
 8016d32:	f001 fc01 	bl	8018538 <icmp_dest_unreach>
      pbuf_free(p);
 8016d36:	6878      	ldr	r0, [r7, #4]
 8016d38:	f7f9 f9f8 	bl	801012c <pbuf_free>
  return;
 8016d3c:	e003      	b.n	8016d46 <udp_input+0x202>
    pbuf_free(p);
 8016d3e:	6878      	ldr	r0, [r7, #4]
 8016d40:	f7f9 f9f4 	bl	801012c <pbuf_free>
  return;
 8016d44:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016d46:	372c      	adds	r7, #44	; 0x2c
 8016d48:	46bd      	mov	sp, r7
 8016d4a:	bd90      	pop	{r4, r7, pc}
 8016d4c:	080223a8 	.word	0x080223a8
 8016d50:	0802244c 	.word	0x0802244c
 8016d54:	080223fc 	.word	0x080223fc
 8016d58:	08022464 	.word	0x08022464
 8016d5c:	20004588 	.word	0x20004588
 8016d60:	20007cb4 	.word	0x20007cb4
 8016d64:	08022480 	.word	0x08022480
 8016d68:	20004598 	.word	0x20004598

08016d6c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8016d6c:	b580      	push	{r7, lr}
 8016d6e:	b082      	sub	sp, #8
 8016d70:	af00      	add	r7, sp, #0
 8016d72:	6078      	str	r0, [r7, #4]
 8016d74:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d109      	bne.n	8016d90 <udp_send+0x24>
 8016d7c:	4b11      	ldr	r3, [pc, #68]	; (8016dc4 <udp_send+0x58>)
 8016d7e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8016d82:	4911      	ldr	r1, [pc, #68]	; (8016dc8 <udp_send+0x5c>)
 8016d84:	4811      	ldr	r0, [pc, #68]	; (8016dcc <udp_send+0x60>)
 8016d86:	f004 f82f 	bl	801ade8 <iprintf>
 8016d8a:	f06f 030f 	mvn.w	r3, #15
 8016d8e:	e015      	b.n	8016dbc <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8016d90:	683b      	ldr	r3, [r7, #0]
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d109      	bne.n	8016daa <udp_send+0x3e>
 8016d96:	4b0b      	ldr	r3, [pc, #44]	; (8016dc4 <udp_send+0x58>)
 8016d98:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8016d9c:	490c      	ldr	r1, [pc, #48]	; (8016dd0 <udp_send+0x64>)
 8016d9e:	480b      	ldr	r0, [pc, #44]	; (8016dcc <udp_send+0x60>)
 8016da0:	f004 f822 	bl	801ade8 <iprintf>
 8016da4:	f06f 030f 	mvn.w	r3, #15
 8016da8:	e008      	b.n	8016dbc <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	1d1a      	adds	r2, r3, #4
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	8a9b      	ldrh	r3, [r3, #20]
 8016db2:	6839      	ldr	r1, [r7, #0]
 8016db4:	6878      	ldr	r0, [r7, #4]
 8016db6:	f000 f80d 	bl	8016dd4 <udp_sendto>
 8016dba:	4603      	mov	r3, r0
}
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	3708      	adds	r7, #8
 8016dc0:	46bd      	mov	sp, r7
 8016dc2:	bd80      	pop	{r7, pc}
 8016dc4:	080223a8 	.word	0x080223a8
 8016dc8:	0802249c 	.word	0x0802249c
 8016dcc:	080223fc 	.word	0x080223fc
 8016dd0:	080224b4 	.word	0x080224b4

08016dd4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8016dd4:	b580      	push	{r7, lr}
 8016dd6:	b088      	sub	sp, #32
 8016dd8:	af02      	add	r7, sp, #8
 8016dda:	60f8      	str	r0, [r7, #12]
 8016ddc:	60b9      	str	r1, [r7, #8]
 8016dde:	607a      	str	r2, [r7, #4]
 8016de0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d109      	bne.n	8016dfc <udp_sendto+0x28>
 8016de8:	4b23      	ldr	r3, [pc, #140]	; (8016e78 <udp_sendto+0xa4>)
 8016dea:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016dee:	4923      	ldr	r1, [pc, #140]	; (8016e7c <udp_sendto+0xa8>)
 8016df0:	4823      	ldr	r0, [pc, #140]	; (8016e80 <udp_sendto+0xac>)
 8016df2:	f003 fff9 	bl	801ade8 <iprintf>
 8016df6:	f06f 030f 	mvn.w	r3, #15
 8016dfa:	e038      	b.n	8016e6e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8016dfc:	68bb      	ldr	r3, [r7, #8]
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d109      	bne.n	8016e16 <udp_sendto+0x42>
 8016e02:	4b1d      	ldr	r3, [pc, #116]	; (8016e78 <udp_sendto+0xa4>)
 8016e04:	f240 2219 	movw	r2, #537	; 0x219
 8016e08:	491e      	ldr	r1, [pc, #120]	; (8016e84 <udp_sendto+0xb0>)
 8016e0a:	481d      	ldr	r0, [pc, #116]	; (8016e80 <udp_sendto+0xac>)
 8016e0c:	f003 ffec 	bl	801ade8 <iprintf>
 8016e10:	f06f 030f 	mvn.w	r3, #15
 8016e14:	e02b      	b.n	8016e6e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d109      	bne.n	8016e30 <udp_sendto+0x5c>
 8016e1c:	4b16      	ldr	r3, [pc, #88]	; (8016e78 <udp_sendto+0xa4>)
 8016e1e:	f240 221a 	movw	r2, #538	; 0x21a
 8016e22:	4919      	ldr	r1, [pc, #100]	; (8016e88 <udp_sendto+0xb4>)
 8016e24:	4816      	ldr	r0, [pc, #88]	; (8016e80 <udp_sendto+0xac>)
 8016e26:	f003 ffdf 	bl	801ade8 <iprintf>
 8016e2a:	f06f 030f 	mvn.w	r3, #15
 8016e2e:	e01e      	b.n	8016e6e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	7a1b      	ldrb	r3, [r3, #8]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d006      	beq.n	8016e46 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	7a1b      	ldrb	r3, [r3, #8]
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	f7f8 fdeb 	bl	800fa18 <netif_get_by_index>
 8016e42:	6178      	str	r0, [r7, #20]
 8016e44:	e003      	b.n	8016e4e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8016e46:	6878      	ldr	r0, [r7, #4]
 8016e48:	f001 fc00 	bl	801864c <ip4_route>
 8016e4c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8016e4e:	697b      	ldr	r3, [r7, #20]
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d102      	bne.n	8016e5a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8016e54:	f06f 0303 	mvn.w	r3, #3
 8016e58:	e009      	b.n	8016e6e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8016e5a:	887a      	ldrh	r2, [r7, #2]
 8016e5c:	697b      	ldr	r3, [r7, #20]
 8016e5e:	9300      	str	r3, [sp, #0]
 8016e60:	4613      	mov	r3, r2
 8016e62:	687a      	ldr	r2, [r7, #4]
 8016e64:	68b9      	ldr	r1, [r7, #8]
 8016e66:	68f8      	ldr	r0, [r7, #12]
 8016e68:	f000 f810 	bl	8016e8c <udp_sendto_if>
 8016e6c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016e6e:	4618      	mov	r0, r3
 8016e70:	3718      	adds	r7, #24
 8016e72:	46bd      	mov	sp, r7
 8016e74:	bd80      	pop	{r7, pc}
 8016e76:	bf00      	nop
 8016e78:	080223a8 	.word	0x080223a8
 8016e7c:	080224cc 	.word	0x080224cc
 8016e80:	080223fc 	.word	0x080223fc
 8016e84:	080224e4 	.word	0x080224e4
 8016e88:	08022500 	.word	0x08022500

08016e8c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b088      	sub	sp, #32
 8016e90:	af02      	add	r7, sp, #8
 8016e92:	60f8      	str	r0, [r7, #12]
 8016e94:	60b9      	str	r1, [r7, #8]
 8016e96:	607a      	str	r2, [r7, #4]
 8016e98:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d109      	bne.n	8016eb4 <udp_sendto_if+0x28>
 8016ea0:	4b2e      	ldr	r3, [pc, #184]	; (8016f5c <udp_sendto_if+0xd0>)
 8016ea2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016ea6:	492e      	ldr	r1, [pc, #184]	; (8016f60 <udp_sendto_if+0xd4>)
 8016ea8:	482e      	ldr	r0, [pc, #184]	; (8016f64 <udp_sendto_if+0xd8>)
 8016eaa:	f003 ff9d 	bl	801ade8 <iprintf>
 8016eae:	f06f 030f 	mvn.w	r3, #15
 8016eb2:	e04f      	b.n	8016f54 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8016eb4:	68bb      	ldr	r3, [r7, #8]
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d109      	bne.n	8016ece <udp_sendto_if+0x42>
 8016eba:	4b28      	ldr	r3, [pc, #160]	; (8016f5c <udp_sendto_if+0xd0>)
 8016ebc:	f240 2281 	movw	r2, #641	; 0x281
 8016ec0:	4929      	ldr	r1, [pc, #164]	; (8016f68 <udp_sendto_if+0xdc>)
 8016ec2:	4828      	ldr	r0, [pc, #160]	; (8016f64 <udp_sendto_if+0xd8>)
 8016ec4:	f003 ff90 	bl	801ade8 <iprintf>
 8016ec8:	f06f 030f 	mvn.w	r3, #15
 8016ecc:	e042      	b.n	8016f54 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d109      	bne.n	8016ee8 <udp_sendto_if+0x5c>
 8016ed4:	4b21      	ldr	r3, [pc, #132]	; (8016f5c <udp_sendto_if+0xd0>)
 8016ed6:	f240 2282 	movw	r2, #642	; 0x282
 8016eda:	4924      	ldr	r1, [pc, #144]	; (8016f6c <udp_sendto_if+0xe0>)
 8016edc:	4821      	ldr	r0, [pc, #132]	; (8016f64 <udp_sendto_if+0xd8>)
 8016ede:	f003 ff83 	bl	801ade8 <iprintf>
 8016ee2:	f06f 030f 	mvn.w	r3, #15
 8016ee6:	e035      	b.n	8016f54 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8016ee8:	6a3b      	ldr	r3, [r7, #32]
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d109      	bne.n	8016f02 <udp_sendto_if+0x76>
 8016eee:	4b1b      	ldr	r3, [pc, #108]	; (8016f5c <udp_sendto_if+0xd0>)
 8016ef0:	f240 2283 	movw	r2, #643	; 0x283
 8016ef4:	491e      	ldr	r1, [pc, #120]	; (8016f70 <udp_sendto_if+0xe4>)
 8016ef6:	481b      	ldr	r0, [pc, #108]	; (8016f64 <udp_sendto_if+0xd8>)
 8016ef8:	f003 ff76 	bl	801ade8 <iprintf>
 8016efc:	f06f 030f 	mvn.w	r3, #15
 8016f00:	e028      	b.n	8016f54 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016f02:	68fb      	ldr	r3, [r7, #12]
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d009      	beq.n	8016f1c <udp_sendto_if+0x90>
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d005      	beq.n	8016f1c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8016f10:	68fb      	ldr	r3, [r7, #12]
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016f18:	2be0      	cmp	r3, #224	; 0xe0
 8016f1a:	d103      	bne.n	8016f24 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8016f1c:	6a3b      	ldr	r3, [r7, #32]
 8016f1e:	3304      	adds	r3, #4
 8016f20:	617b      	str	r3, [r7, #20]
 8016f22:	e00b      	b.n	8016f3c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	681a      	ldr	r2, [r3, #0]
 8016f28:	6a3b      	ldr	r3, [r7, #32]
 8016f2a:	3304      	adds	r3, #4
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	429a      	cmp	r2, r3
 8016f30:	d002      	beq.n	8016f38 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8016f32:	f06f 0303 	mvn.w	r3, #3
 8016f36:	e00d      	b.n	8016f54 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8016f38:	68fb      	ldr	r3, [r7, #12]
 8016f3a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8016f3c:	887a      	ldrh	r2, [r7, #2]
 8016f3e:	697b      	ldr	r3, [r7, #20]
 8016f40:	9301      	str	r3, [sp, #4]
 8016f42:	6a3b      	ldr	r3, [r7, #32]
 8016f44:	9300      	str	r3, [sp, #0]
 8016f46:	4613      	mov	r3, r2
 8016f48:	687a      	ldr	r2, [r7, #4]
 8016f4a:	68b9      	ldr	r1, [r7, #8]
 8016f4c:	68f8      	ldr	r0, [r7, #12]
 8016f4e:	f000 f811 	bl	8016f74 <udp_sendto_if_src>
 8016f52:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016f54:	4618      	mov	r0, r3
 8016f56:	3718      	adds	r7, #24
 8016f58:	46bd      	mov	sp, r7
 8016f5a:	bd80      	pop	{r7, pc}
 8016f5c:	080223a8 	.word	0x080223a8
 8016f60:	0802251c 	.word	0x0802251c
 8016f64:	080223fc 	.word	0x080223fc
 8016f68:	08022538 	.word	0x08022538
 8016f6c:	08022554 	.word	0x08022554
 8016f70:	08022574 	.word	0x08022574

08016f74 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8016f74:	b580      	push	{r7, lr}
 8016f76:	b08c      	sub	sp, #48	; 0x30
 8016f78:	af04      	add	r7, sp, #16
 8016f7a:	60f8      	str	r0, [r7, #12]
 8016f7c:	60b9      	str	r1, [r7, #8]
 8016f7e:	607a      	str	r2, [r7, #4]
 8016f80:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d109      	bne.n	8016f9c <udp_sendto_if_src+0x28>
 8016f88:	4b65      	ldr	r3, [pc, #404]	; (8017120 <udp_sendto_if_src+0x1ac>)
 8016f8a:	f240 22d1 	movw	r2, #721	; 0x2d1
 8016f8e:	4965      	ldr	r1, [pc, #404]	; (8017124 <udp_sendto_if_src+0x1b0>)
 8016f90:	4865      	ldr	r0, [pc, #404]	; (8017128 <udp_sendto_if_src+0x1b4>)
 8016f92:	f003 ff29 	bl	801ade8 <iprintf>
 8016f96:	f06f 030f 	mvn.w	r3, #15
 8016f9a:	e0bc      	b.n	8017116 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8016f9c:	68bb      	ldr	r3, [r7, #8]
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d109      	bne.n	8016fb6 <udp_sendto_if_src+0x42>
 8016fa2:	4b5f      	ldr	r3, [pc, #380]	; (8017120 <udp_sendto_if_src+0x1ac>)
 8016fa4:	f240 22d2 	movw	r2, #722	; 0x2d2
 8016fa8:	4960      	ldr	r1, [pc, #384]	; (801712c <udp_sendto_if_src+0x1b8>)
 8016faa:	485f      	ldr	r0, [pc, #380]	; (8017128 <udp_sendto_if_src+0x1b4>)
 8016fac:	f003 ff1c 	bl	801ade8 <iprintf>
 8016fb0:	f06f 030f 	mvn.w	r3, #15
 8016fb4:	e0af      	b.n	8017116 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d109      	bne.n	8016fd0 <udp_sendto_if_src+0x5c>
 8016fbc:	4b58      	ldr	r3, [pc, #352]	; (8017120 <udp_sendto_if_src+0x1ac>)
 8016fbe:	f240 22d3 	movw	r2, #723	; 0x2d3
 8016fc2:	495b      	ldr	r1, [pc, #364]	; (8017130 <udp_sendto_if_src+0x1bc>)
 8016fc4:	4858      	ldr	r0, [pc, #352]	; (8017128 <udp_sendto_if_src+0x1b4>)
 8016fc6:	f003 ff0f 	bl	801ade8 <iprintf>
 8016fca:	f06f 030f 	mvn.w	r3, #15
 8016fce:	e0a2      	b.n	8017116 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8016fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d109      	bne.n	8016fea <udp_sendto_if_src+0x76>
 8016fd6:	4b52      	ldr	r3, [pc, #328]	; (8017120 <udp_sendto_if_src+0x1ac>)
 8016fd8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8016fdc:	4955      	ldr	r1, [pc, #340]	; (8017134 <udp_sendto_if_src+0x1c0>)
 8016fde:	4852      	ldr	r0, [pc, #328]	; (8017128 <udp_sendto_if_src+0x1b4>)
 8016fe0:	f003 ff02 	bl	801ade8 <iprintf>
 8016fe4:	f06f 030f 	mvn.w	r3, #15
 8016fe8:	e095      	b.n	8017116 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8016fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d109      	bne.n	8017004 <udp_sendto_if_src+0x90>
 8016ff0:	4b4b      	ldr	r3, [pc, #300]	; (8017120 <udp_sendto_if_src+0x1ac>)
 8016ff2:	f240 22d5 	movw	r2, #725	; 0x2d5
 8016ff6:	4950      	ldr	r1, [pc, #320]	; (8017138 <udp_sendto_if_src+0x1c4>)
 8016ff8:	484b      	ldr	r0, [pc, #300]	; (8017128 <udp_sendto_if_src+0x1b4>)
 8016ffa:	f003 fef5 	bl	801ade8 <iprintf>
 8016ffe:	f06f 030f 	mvn.w	r3, #15
 8017002:	e088      	b.n	8017116 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	8a5b      	ldrh	r3, [r3, #18]
 8017008:	2b00      	cmp	r3, #0
 801700a:	d10f      	bne.n	801702c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801700c:	68f9      	ldr	r1, [r7, #12]
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	8a5b      	ldrh	r3, [r3, #18]
 8017012:	461a      	mov	r2, r3
 8017014:	68f8      	ldr	r0, [r7, #12]
 8017016:	f000 f893 	bl	8017140 <udp_bind>
 801701a:	4603      	mov	r3, r0
 801701c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801701e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d002      	beq.n	801702c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8017026:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801702a:	e074      	b.n	8017116 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801702c:	68bb      	ldr	r3, [r7, #8]
 801702e:	891b      	ldrh	r3, [r3, #8]
 8017030:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8017034:	4293      	cmp	r3, r2
 8017036:	d902      	bls.n	801703e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8017038:	f04f 33ff 	mov.w	r3, #4294967295
 801703c:	e06b      	b.n	8017116 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801703e:	2108      	movs	r1, #8
 8017040:	68b8      	ldr	r0, [r7, #8]
 8017042:	f7f8 ffdd 	bl	8010000 <pbuf_add_header>
 8017046:	4603      	mov	r3, r0
 8017048:	2b00      	cmp	r3, #0
 801704a:	d015      	beq.n	8017078 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801704c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017050:	2108      	movs	r1, #8
 8017052:	2022      	movs	r0, #34	; 0x22
 8017054:	f7f8 fd8a 	bl	800fb6c <pbuf_alloc>
 8017058:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801705a:	69fb      	ldr	r3, [r7, #28]
 801705c:	2b00      	cmp	r3, #0
 801705e:	d102      	bne.n	8017066 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8017060:	f04f 33ff 	mov.w	r3, #4294967295
 8017064:	e057      	b.n	8017116 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8017066:	68bb      	ldr	r3, [r7, #8]
 8017068:	891b      	ldrh	r3, [r3, #8]
 801706a:	2b00      	cmp	r3, #0
 801706c:	d006      	beq.n	801707c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801706e:	68b9      	ldr	r1, [r7, #8]
 8017070:	69f8      	ldr	r0, [r7, #28]
 8017072:	f7f9 f97f 	bl	8010374 <pbuf_chain>
 8017076:	e001      	b.n	801707c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8017078:	68bb      	ldr	r3, [r7, #8]
 801707a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801707c:	69fb      	ldr	r3, [r7, #28]
 801707e:	895b      	ldrh	r3, [r3, #10]
 8017080:	2b07      	cmp	r3, #7
 8017082:	d806      	bhi.n	8017092 <udp_sendto_if_src+0x11e>
 8017084:	4b26      	ldr	r3, [pc, #152]	; (8017120 <udp_sendto_if_src+0x1ac>)
 8017086:	f240 320e 	movw	r2, #782	; 0x30e
 801708a:	492c      	ldr	r1, [pc, #176]	; (801713c <udp_sendto_if_src+0x1c8>)
 801708c:	4826      	ldr	r0, [pc, #152]	; (8017128 <udp_sendto_if_src+0x1b4>)
 801708e:	f003 feab 	bl	801ade8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8017092:	69fb      	ldr	r3, [r7, #28]
 8017094:	685b      	ldr	r3, [r3, #4]
 8017096:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	8a5b      	ldrh	r3, [r3, #18]
 801709c:	4618      	mov	r0, r3
 801709e:	f7f7 fd15 	bl	800eacc <lwip_htons>
 80170a2:	4603      	mov	r3, r0
 80170a4:	461a      	mov	r2, r3
 80170a6:	697b      	ldr	r3, [r7, #20]
 80170a8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80170aa:	887b      	ldrh	r3, [r7, #2]
 80170ac:	4618      	mov	r0, r3
 80170ae:	f7f7 fd0d 	bl	800eacc <lwip_htons>
 80170b2:	4603      	mov	r3, r0
 80170b4:	461a      	mov	r2, r3
 80170b6:	697b      	ldr	r3, [r7, #20]
 80170b8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80170ba:	697b      	ldr	r3, [r7, #20]
 80170bc:	2200      	movs	r2, #0
 80170be:	719a      	strb	r2, [r3, #6]
 80170c0:	2200      	movs	r2, #0
 80170c2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80170c4:	69fb      	ldr	r3, [r7, #28]
 80170c6:	891b      	ldrh	r3, [r3, #8]
 80170c8:	4618      	mov	r0, r3
 80170ca:	f7f7 fcff 	bl	800eacc <lwip_htons>
 80170ce:	4603      	mov	r3, r0
 80170d0:	461a      	mov	r2, r3
 80170d2:	697b      	ldr	r3, [r7, #20]
 80170d4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80170d6:	2311      	movs	r3, #17
 80170d8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	7adb      	ldrb	r3, [r3, #11]
 80170de:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	7a9b      	ldrb	r3, [r3, #10]
 80170e4:	7cb9      	ldrb	r1, [r7, #18]
 80170e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80170e8:	9202      	str	r2, [sp, #8]
 80170ea:	7cfa      	ldrb	r2, [r7, #19]
 80170ec:	9201      	str	r2, [sp, #4]
 80170ee:	9300      	str	r3, [sp, #0]
 80170f0:	460b      	mov	r3, r1
 80170f2:	687a      	ldr	r2, [r7, #4]
 80170f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80170f6:	69f8      	ldr	r0, [r7, #28]
 80170f8:	f001 fc8e 	bl	8018a18 <ip4_output_if_src>
 80170fc:	4603      	mov	r3, r0
 80170fe:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8017100:	69fa      	ldr	r2, [r7, #28]
 8017102:	68bb      	ldr	r3, [r7, #8]
 8017104:	429a      	cmp	r2, r3
 8017106:	d004      	beq.n	8017112 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8017108:	69f8      	ldr	r0, [r7, #28]
 801710a:	f7f9 f80f 	bl	801012c <pbuf_free>
    q = NULL;
 801710e:	2300      	movs	r3, #0
 8017110:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8017112:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8017116:	4618      	mov	r0, r3
 8017118:	3720      	adds	r7, #32
 801711a:	46bd      	mov	sp, r7
 801711c:	bd80      	pop	{r7, pc}
 801711e:	bf00      	nop
 8017120:	080223a8 	.word	0x080223a8
 8017124:	08022594 	.word	0x08022594
 8017128:	080223fc 	.word	0x080223fc
 801712c:	080225b4 	.word	0x080225b4
 8017130:	080225d4 	.word	0x080225d4
 8017134:	080225f8 	.word	0x080225f8
 8017138:	0802261c 	.word	0x0802261c
 801713c:	08022640 	.word	0x08022640

08017140 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017140:	b580      	push	{r7, lr}
 8017142:	b086      	sub	sp, #24
 8017144:	af00      	add	r7, sp, #0
 8017146:	60f8      	str	r0, [r7, #12]
 8017148:	60b9      	str	r1, [r7, #8]
 801714a:	4613      	mov	r3, r2
 801714c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801714e:	68bb      	ldr	r3, [r7, #8]
 8017150:	2b00      	cmp	r3, #0
 8017152:	d101      	bne.n	8017158 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8017154:	4b39      	ldr	r3, [pc, #228]	; (801723c <udp_bind+0xfc>)
 8017156:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	2b00      	cmp	r3, #0
 801715c:	d109      	bne.n	8017172 <udp_bind+0x32>
 801715e:	4b38      	ldr	r3, [pc, #224]	; (8017240 <udp_bind+0x100>)
 8017160:	f240 32b7 	movw	r2, #951	; 0x3b7
 8017164:	4937      	ldr	r1, [pc, #220]	; (8017244 <udp_bind+0x104>)
 8017166:	4838      	ldr	r0, [pc, #224]	; (8017248 <udp_bind+0x108>)
 8017168:	f003 fe3e 	bl	801ade8 <iprintf>
 801716c:	f06f 030f 	mvn.w	r3, #15
 8017170:	e060      	b.n	8017234 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8017172:	2300      	movs	r3, #0
 8017174:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017176:	4b35      	ldr	r3, [pc, #212]	; (801724c <udp_bind+0x10c>)
 8017178:	681b      	ldr	r3, [r3, #0]
 801717a:	617b      	str	r3, [r7, #20]
 801717c:	e009      	b.n	8017192 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801717e:	68fa      	ldr	r2, [r7, #12]
 8017180:	697b      	ldr	r3, [r7, #20]
 8017182:	429a      	cmp	r2, r3
 8017184:	d102      	bne.n	801718c <udp_bind+0x4c>
      rebind = 1;
 8017186:	2301      	movs	r3, #1
 8017188:	74fb      	strb	r3, [r7, #19]
      break;
 801718a:	e005      	b.n	8017198 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801718c:	697b      	ldr	r3, [r7, #20]
 801718e:	68db      	ldr	r3, [r3, #12]
 8017190:	617b      	str	r3, [r7, #20]
 8017192:	697b      	ldr	r3, [r7, #20]
 8017194:	2b00      	cmp	r3, #0
 8017196:	d1f2      	bne.n	801717e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8017198:	88fb      	ldrh	r3, [r7, #6]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d109      	bne.n	80171b2 <udp_bind+0x72>
    port = udp_new_port();
 801719e:	f7ff fc35 	bl	8016a0c <udp_new_port>
 80171a2:	4603      	mov	r3, r0
 80171a4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80171a6:	88fb      	ldrh	r3, [r7, #6]
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d12c      	bne.n	8017206 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80171ac:	f06f 0307 	mvn.w	r3, #7
 80171b0:	e040      	b.n	8017234 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80171b2:	4b26      	ldr	r3, [pc, #152]	; (801724c <udp_bind+0x10c>)
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	617b      	str	r3, [r7, #20]
 80171b8:	e022      	b.n	8017200 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80171ba:	68fa      	ldr	r2, [r7, #12]
 80171bc:	697b      	ldr	r3, [r7, #20]
 80171be:	429a      	cmp	r2, r3
 80171c0:	d01b      	beq.n	80171fa <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80171c2:	697b      	ldr	r3, [r7, #20]
 80171c4:	8a5b      	ldrh	r3, [r3, #18]
 80171c6:	88fa      	ldrh	r2, [r7, #6]
 80171c8:	429a      	cmp	r2, r3
 80171ca:	d116      	bne.n	80171fa <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80171cc:	697b      	ldr	r3, [r7, #20]
 80171ce:	681a      	ldr	r2, [r3, #0]
 80171d0:	68bb      	ldr	r3, [r7, #8]
 80171d2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80171d4:	429a      	cmp	r2, r3
 80171d6:	d00d      	beq.n	80171f4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80171d8:	68bb      	ldr	r3, [r7, #8]
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d00a      	beq.n	80171f4 <udp_bind+0xb4>
 80171de:	68bb      	ldr	r3, [r7, #8]
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d006      	beq.n	80171f4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80171e6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d003      	beq.n	80171f4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80171ec:	697b      	ldr	r3, [r7, #20]
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d102      	bne.n	80171fa <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80171f4:	f06f 0307 	mvn.w	r3, #7
 80171f8:	e01c      	b.n	8017234 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80171fa:	697b      	ldr	r3, [r7, #20]
 80171fc:	68db      	ldr	r3, [r3, #12]
 80171fe:	617b      	str	r3, [r7, #20]
 8017200:	697b      	ldr	r3, [r7, #20]
 8017202:	2b00      	cmp	r3, #0
 8017204:	d1d9      	bne.n	80171ba <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8017206:	68bb      	ldr	r3, [r7, #8]
 8017208:	2b00      	cmp	r3, #0
 801720a:	d002      	beq.n	8017212 <udp_bind+0xd2>
 801720c:	68bb      	ldr	r3, [r7, #8]
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	e000      	b.n	8017214 <udp_bind+0xd4>
 8017212:	2300      	movs	r3, #0
 8017214:	68fa      	ldr	r2, [r7, #12]
 8017216:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	88fa      	ldrh	r2, [r7, #6]
 801721c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801721e:	7cfb      	ldrb	r3, [r7, #19]
 8017220:	2b00      	cmp	r3, #0
 8017222:	d106      	bne.n	8017232 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8017224:	4b09      	ldr	r3, [pc, #36]	; (801724c <udp_bind+0x10c>)
 8017226:	681a      	ldr	r2, [r3, #0]
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801722c:	4a07      	ldr	r2, [pc, #28]	; (801724c <udp_bind+0x10c>)
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8017232:	2300      	movs	r3, #0
}
 8017234:	4618      	mov	r0, r3
 8017236:	3718      	adds	r7, #24
 8017238:	46bd      	mov	sp, r7
 801723a:	bd80      	pop	{r7, pc}
 801723c:	080246fc 	.word	0x080246fc
 8017240:	080223a8 	.word	0x080223a8
 8017244:	08022670 	.word	0x08022670
 8017248:	080223fc 	.word	0x080223fc
 801724c:	20007cb4 	.word	0x20007cb4

08017250 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017250:	b580      	push	{r7, lr}
 8017252:	b086      	sub	sp, #24
 8017254:	af00      	add	r7, sp, #0
 8017256:	60f8      	str	r0, [r7, #12]
 8017258:	60b9      	str	r1, [r7, #8]
 801725a:	4613      	mov	r3, r2
 801725c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d109      	bne.n	8017278 <udp_connect+0x28>
 8017264:	4b2c      	ldr	r3, [pc, #176]	; (8017318 <udp_connect+0xc8>)
 8017266:	f240 4235 	movw	r2, #1077	; 0x435
 801726a:	492c      	ldr	r1, [pc, #176]	; (801731c <udp_connect+0xcc>)
 801726c:	482c      	ldr	r0, [pc, #176]	; (8017320 <udp_connect+0xd0>)
 801726e:	f003 fdbb 	bl	801ade8 <iprintf>
 8017272:	f06f 030f 	mvn.w	r3, #15
 8017276:	e04b      	b.n	8017310 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8017278:	68bb      	ldr	r3, [r7, #8]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d109      	bne.n	8017292 <udp_connect+0x42>
 801727e:	4b26      	ldr	r3, [pc, #152]	; (8017318 <udp_connect+0xc8>)
 8017280:	f240 4236 	movw	r2, #1078	; 0x436
 8017284:	4927      	ldr	r1, [pc, #156]	; (8017324 <udp_connect+0xd4>)
 8017286:	4826      	ldr	r0, [pc, #152]	; (8017320 <udp_connect+0xd0>)
 8017288:	f003 fdae 	bl	801ade8 <iprintf>
 801728c:	f06f 030f 	mvn.w	r3, #15
 8017290:	e03e      	b.n	8017310 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	8a5b      	ldrh	r3, [r3, #18]
 8017296:	2b00      	cmp	r3, #0
 8017298:	d10f      	bne.n	80172ba <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801729a:	68f9      	ldr	r1, [r7, #12]
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	8a5b      	ldrh	r3, [r3, #18]
 80172a0:	461a      	mov	r2, r3
 80172a2:	68f8      	ldr	r0, [r7, #12]
 80172a4:	f7ff ff4c 	bl	8017140 <udp_bind>
 80172a8:	4603      	mov	r3, r0
 80172aa:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80172ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d002      	beq.n	80172ba <udp_connect+0x6a>
      return err;
 80172b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80172b8:	e02a      	b.n	8017310 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80172ba:	68bb      	ldr	r3, [r7, #8]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d002      	beq.n	80172c6 <udp_connect+0x76>
 80172c0:	68bb      	ldr	r3, [r7, #8]
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	e000      	b.n	80172c8 <udp_connect+0x78>
 80172c6:	2300      	movs	r3, #0
 80172c8:	68fa      	ldr	r2, [r7, #12]
 80172ca:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	88fa      	ldrh	r2, [r7, #6]
 80172d0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	7c1b      	ldrb	r3, [r3, #16]
 80172d6:	f043 0304 	orr.w	r3, r3, #4
 80172da:	b2da      	uxtb	r2, r3
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80172e0:	4b11      	ldr	r3, [pc, #68]	; (8017328 <udp_connect+0xd8>)
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	617b      	str	r3, [r7, #20]
 80172e6:	e008      	b.n	80172fa <udp_connect+0xaa>
    if (pcb == ipcb) {
 80172e8:	68fa      	ldr	r2, [r7, #12]
 80172ea:	697b      	ldr	r3, [r7, #20]
 80172ec:	429a      	cmp	r2, r3
 80172ee:	d101      	bne.n	80172f4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80172f0:	2300      	movs	r3, #0
 80172f2:	e00d      	b.n	8017310 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80172f4:	697b      	ldr	r3, [r7, #20]
 80172f6:	68db      	ldr	r3, [r3, #12]
 80172f8:	617b      	str	r3, [r7, #20]
 80172fa:	697b      	ldr	r3, [r7, #20]
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d1f3      	bne.n	80172e8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8017300:	4b09      	ldr	r3, [pc, #36]	; (8017328 <udp_connect+0xd8>)
 8017302:	681a      	ldr	r2, [r3, #0]
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8017308:	4a07      	ldr	r2, [pc, #28]	; (8017328 <udp_connect+0xd8>)
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801730e:	2300      	movs	r3, #0
}
 8017310:	4618      	mov	r0, r3
 8017312:	3718      	adds	r7, #24
 8017314:	46bd      	mov	sp, r7
 8017316:	bd80      	pop	{r7, pc}
 8017318:	080223a8 	.word	0x080223a8
 801731c:	08022688 	.word	0x08022688
 8017320:	080223fc 	.word	0x080223fc
 8017324:	080226a4 	.word	0x080226a4
 8017328:	20007cb4 	.word	0x20007cb4

0801732c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801732c:	b580      	push	{r7, lr}
 801732e:	b084      	sub	sp, #16
 8017330:	af00      	add	r7, sp, #0
 8017332:	60f8      	str	r0, [r7, #12]
 8017334:	60b9      	str	r1, [r7, #8]
 8017336:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	2b00      	cmp	r3, #0
 801733c:	d107      	bne.n	801734e <udp_recv+0x22>
 801733e:	4b08      	ldr	r3, [pc, #32]	; (8017360 <udp_recv+0x34>)
 8017340:	f240 428a 	movw	r2, #1162	; 0x48a
 8017344:	4907      	ldr	r1, [pc, #28]	; (8017364 <udp_recv+0x38>)
 8017346:	4808      	ldr	r0, [pc, #32]	; (8017368 <udp_recv+0x3c>)
 8017348:	f003 fd4e 	bl	801ade8 <iprintf>
 801734c:	e005      	b.n	801735a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	68ba      	ldr	r2, [r7, #8]
 8017352:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	687a      	ldr	r2, [r7, #4]
 8017358:	61da      	str	r2, [r3, #28]
}
 801735a:	3710      	adds	r7, #16
 801735c:	46bd      	mov	sp, r7
 801735e:	bd80      	pop	{r7, pc}
 8017360:	080223a8 	.word	0x080223a8
 8017364:	080226dc 	.word	0x080226dc
 8017368:	080223fc 	.word	0x080223fc

0801736c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801736c:	b580      	push	{r7, lr}
 801736e:	b084      	sub	sp, #16
 8017370:	af00      	add	r7, sp, #0
 8017372:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	2b00      	cmp	r3, #0
 8017378:	d107      	bne.n	801738a <udp_remove+0x1e>
 801737a:	4b19      	ldr	r3, [pc, #100]	; (80173e0 <udp_remove+0x74>)
 801737c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8017380:	4918      	ldr	r1, [pc, #96]	; (80173e4 <udp_remove+0x78>)
 8017382:	4819      	ldr	r0, [pc, #100]	; (80173e8 <udp_remove+0x7c>)
 8017384:	f003 fd30 	bl	801ade8 <iprintf>
 8017388:	e026      	b.n	80173d8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801738a:	4b18      	ldr	r3, [pc, #96]	; (80173ec <udp_remove+0x80>)
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	687a      	ldr	r2, [r7, #4]
 8017390:	429a      	cmp	r2, r3
 8017392:	d105      	bne.n	80173a0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8017394:	4b15      	ldr	r3, [pc, #84]	; (80173ec <udp_remove+0x80>)
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	68db      	ldr	r3, [r3, #12]
 801739a:	4a14      	ldr	r2, [pc, #80]	; (80173ec <udp_remove+0x80>)
 801739c:	6013      	str	r3, [r2, #0]
 801739e:	e017      	b.n	80173d0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80173a0:	4b12      	ldr	r3, [pc, #72]	; (80173ec <udp_remove+0x80>)
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	60fb      	str	r3, [r7, #12]
 80173a6:	e010      	b.n	80173ca <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	68db      	ldr	r3, [r3, #12]
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d009      	beq.n	80173c4 <udp_remove+0x58>
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	68db      	ldr	r3, [r3, #12]
 80173b4:	687a      	ldr	r2, [r7, #4]
 80173b6:	429a      	cmp	r2, r3
 80173b8:	d104      	bne.n	80173c4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	68da      	ldr	r2, [r3, #12]
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	60da      	str	r2, [r3, #12]
        break;
 80173c2:	e005      	b.n	80173d0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	68db      	ldr	r3, [r3, #12]
 80173c8:	60fb      	str	r3, [r7, #12]
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d1eb      	bne.n	80173a8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80173d0:	6879      	ldr	r1, [r7, #4]
 80173d2:	2000      	movs	r0, #0
 80173d4:	f7f8 f882 	bl	800f4dc <memp_free>
}
 80173d8:	3710      	adds	r7, #16
 80173da:	46bd      	mov	sp, r7
 80173dc:	bd80      	pop	{r7, pc}
 80173de:	bf00      	nop
 80173e0:	080223a8 	.word	0x080223a8
 80173e4:	080226f4 	.word	0x080226f4
 80173e8:	080223fc 	.word	0x080223fc
 80173ec:	20007cb4 	.word	0x20007cb4

080173f0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b082      	sub	sp, #8
 80173f4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80173f6:	2000      	movs	r0, #0
 80173f8:	f7f8 f81e 	bl	800f438 <memp_malloc>
 80173fc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	2b00      	cmp	r3, #0
 8017402:	d007      	beq.n	8017414 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8017404:	2220      	movs	r2, #32
 8017406:	2100      	movs	r1, #0
 8017408:	6878      	ldr	r0, [r7, #4]
 801740a:	f002 fe28 	bl	801a05e <memset>
    pcb->ttl = UDP_TTL;
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	22ff      	movs	r2, #255	; 0xff
 8017412:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8017414:	687b      	ldr	r3, [r7, #4]
}
 8017416:	4618      	mov	r0, r3
 8017418:	3708      	adds	r7, #8
 801741a:	46bd      	mov	sp, r7
 801741c:	bd80      	pop	{r7, pc}

0801741e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801741e:	b580      	push	{r7, lr}
 8017420:	b084      	sub	sp, #16
 8017422:	af00      	add	r7, sp, #0
 8017424:	4603      	mov	r3, r0
 8017426:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8017428:	f7ff ffe2 	bl	80173f0 <udp_new>
 801742c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801742e:	68fb      	ldr	r3, [r7, #12]
}
 8017430:	4618      	mov	r0, r3
 8017432:	3710      	adds	r7, #16
 8017434:	46bd      	mov	sp, r7
 8017436:	bd80      	pop	{r7, pc}

08017438 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017438:	b480      	push	{r7}
 801743a:	b085      	sub	sp, #20
 801743c:	af00      	add	r7, sp, #0
 801743e:	6078      	str	r0, [r7, #4]
 8017440:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	2b00      	cmp	r3, #0
 8017446:	d01e      	beq.n	8017486 <udp_netif_ip_addr_changed+0x4e>
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d01a      	beq.n	8017486 <udp_netif_ip_addr_changed+0x4e>
 8017450:	683b      	ldr	r3, [r7, #0]
 8017452:	2b00      	cmp	r3, #0
 8017454:	d017      	beq.n	8017486 <udp_netif_ip_addr_changed+0x4e>
 8017456:	683b      	ldr	r3, [r7, #0]
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	2b00      	cmp	r3, #0
 801745c:	d013      	beq.n	8017486 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801745e:	4b0d      	ldr	r3, [pc, #52]	; (8017494 <udp_netif_ip_addr_changed+0x5c>)
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	60fb      	str	r3, [r7, #12]
 8017464:	e00c      	b.n	8017480 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	681a      	ldr	r2, [r3, #0]
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	429a      	cmp	r2, r3
 8017470:	d103      	bne.n	801747a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8017472:	683b      	ldr	r3, [r7, #0]
 8017474:	681a      	ldr	r2, [r3, #0]
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	68db      	ldr	r3, [r3, #12]
 801747e:	60fb      	str	r3, [r7, #12]
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	2b00      	cmp	r3, #0
 8017484:	d1ef      	bne.n	8017466 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8017486:	bf00      	nop
 8017488:	3714      	adds	r7, #20
 801748a:	46bd      	mov	sp, r7
 801748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017490:	4770      	bx	lr
 8017492:	bf00      	nop
 8017494:	20007cb4 	.word	0x20007cb4

08017498 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8017498:	b580      	push	{r7, lr}
 801749a:	b082      	sub	sp, #8
 801749c:	af00      	add	r7, sp, #0
 801749e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80174a0:	4915      	ldr	r1, [pc, #84]	; (80174f8 <etharp_free_entry+0x60>)
 80174a2:	687a      	ldr	r2, [r7, #4]
 80174a4:	4613      	mov	r3, r2
 80174a6:	005b      	lsls	r3, r3, #1
 80174a8:	4413      	add	r3, r2
 80174aa:	00db      	lsls	r3, r3, #3
 80174ac:	440b      	add	r3, r1
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d013      	beq.n	80174dc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80174b4:	4910      	ldr	r1, [pc, #64]	; (80174f8 <etharp_free_entry+0x60>)
 80174b6:	687a      	ldr	r2, [r7, #4]
 80174b8:	4613      	mov	r3, r2
 80174ba:	005b      	lsls	r3, r3, #1
 80174bc:	4413      	add	r3, r2
 80174be:	00db      	lsls	r3, r3, #3
 80174c0:	440b      	add	r3, r1
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	4618      	mov	r0, r3
 80174c6:	f7f8 fe31 	bl	801012c <pbuf_free>
    arp_table[i].q = NULL;
 80174ca:	490b      	ldr	r1, [pc, #44]	; (80174f8 <etharp_free_entry+0x60>)
 80174cc:	687a      	ldr	r2, [r7, #4]
 80174ce:	4613      	mov	r3, r2
 80174d0:	005b      	lsls	r3, r3, #1
 80174d2:	4413      	add	r3, r2
 80174d4:	00db      	lsls	r3, r3, #3
 80174d6:	440b      	add	r3, r1
 80174d8:	2200      	movs	r2, #0
 80174da:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80174dc:	4906      	ldr	r1, [pc, #24]	; (80174f8 <etharp_free_entry+0x60>)
 80174de:	687a      	ldr	r2, [r7, #4]
 80174e0:	4613      	mov	r3, r2
 80174e2:	005b      	lsls	r3, r3, #1
 80174e4:	4413      	add	r3, r2
 80174e6:	00db      	lsls	r3, r3, #3
 80174e8:	440b      	add	r3, r1
 80174ea:	3314      	adds	r3, #20
 80174ec:	2200      	movs	r2, #0
 80174ee:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80174f0:	bf00      	nop
 80174f2:	3708      	adds	r7, #8
 80174f4:	46bd      	mov	sp, r7
 80174f6:	bd80      	pop	{r7, pc}
 80174f8:	200008d4 	.word	0x200008d4

080174fc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80174fc:	b580      	push	{r7, lr}
 80174fe:	b082      	sub	sp, #8
 8017500:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017502:	2300      	movs	r3, #0
 8017504:	607b      	str	r3, [r7, #4]
 8017506:	e096      	b.n	8017636 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8017508:	494f      	ldr	r1, [pc, #316]	; (8017648 <etharp_tmr+0x14c>)
 801750a:	687a      	ldr	r2, [r7, #4]
 801750c:	4613      	mov	r3, r2
 801750e:	005b      	lsls	r3, r3, #1
 8017510:	4413      	add	r3, r2
 8017512:	00db      	lsls	r3, r3, #3
 8017514:	440b      	add	r3, r1
 8017516:	3314      	adds	r3, #20
 8017518:	781b      	ldrb	r3, [r3, #0]
 801751a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801751c:	78fb      	ldrb	r3, [r7, #3]
 801751e:	2b00      	cmp	r3, #0
 8017520:	f000 8086 	beq.w	8017630 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8017524:	4948      	ldr	r1, [pc, #288]	; (8017648 <etharp_tmr+0x14c>)
 8017526:	687a      	ldr	r2, [r7, #4]
 8017528:	4613      	mov	r3, r2
 801752a:	005b      	lsls	r3, r3, #1
 801752c:	4413      	add	r3, r2
 801752e:	00db      	lsls	r3, r3, #3
 8017530:	440b      	add	r3, r1
 8017532:	3312      	adds	r3, #18
 8017534:	881b      	ldrh	r3, [r3, #0]
 8017536:	3301      	adds	r3, #1
 8017538:	b298      	uxth	r0, r3
 801753a:	4943      	ldr	r1, [pc, #268]	; (8017648 <etharp_tmr+0x14c>)
 801753c:	687a      	ldr	r2, [r7, #4]
 801753e:	4613      	mov	r3, r2
 8017540:	005b      	lsls	r3, r3, #1
 8017542:	4413      	add	r3, r2
 8017544:	00db      	lsls	r3, r3, #3
 8017546:	440b      	add	r3, r1
 8017548:	3312      	adds	r3, #18
 801754a:	4602      	mov	r2, r0
 801754c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801754e:	493e      	ldr	r1, [pc, #248]	; (8017648 <etharp_tmr+0x14c>)
 8017550:	687a      	ldr	r2, [r7, #4]
 8017552:	4613      	mov	r3, r2
 8017554:	005b      	lsls	r3, r3, #1
 8017556:	4413      	add	r3, r2
 8017558:	00db      	lsls	r3, r3, #3
 801755a:	440b      	add	r3, r1
 801755c:	3312      	adds	r3, #18
 801755e:	881b      	ldrh	r3, [r3, #0]
 8017560:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017564:	d215      	bcs.n	8017592 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017566:	4938      	ldr	r1, [pc, #224]	; (8017648 <etharp_tmr+0x14c>)
 8017568:	687a      	ldr	r2, [r7, #4]
 801756a:	4613      	mov	r3, r2
 801756c:	005b      	lsls	r3, r3, #1
 801756e:	4413      	add	r3, r2
 8017570:	00db      	lsls	r3, r3, #3
 8017572:	440b      	add	r3, r1
 8017574:	3314      	adds	r3, #20
 8017576:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017578:	2b01      	cmp	r3, #1
 801757a:	d10e      	bne.n	801759a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801757c:	4932      	ldr	r1, [pc, #200]	; (8017648 <etharp_tmr+0x14c>)
 801757e:	687a      	ldr	r2, [r7, #4]
 8017580:	4613      	mov	r3, r2
 8017582:	005b      	lsls	r3, r3, #1
 8017584:	4413      	add	r3, r2
 8017586:	00db      	lsls	r3, r3, #3
 8017588:	440b      	add	r3, r1
 801758a:	3312      	adds	r3, #18
 801758c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801758e:	2b04      	cmp	r3, #4
 8017590:	d903      	bls.n	801759a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8017592:	6878      	ldr	r0, [r7, #4]
 8017594:	f7ff ff80 	bl	8017498 <etharp_free_entry>
 8017598:	e04a      	b.n	8017630 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801759a:	492b      	ldr	r1, [pc, #172]	; (8017648 <etharp_tmr+0x14c>)
 801759c:	687a      	ldr	r2, [r7, #4]
 801759e:	4613      	mov	r3, r2
 80175a0:	005b      	lsls	r3, r3, #1
 80175a2:	4413      	add	r3, r2
 80175a4:	00db      	lsls	r3, r3, #3
 80175a6:	440b      	add	r3, r1
 80175a8:	3314      	adds	r3, #20
 80175aa:	781b      	ldrb	r3, [r3, #0]
 80175ac:	2b03      	cmp	r3, #3
 80175ae:	d10a      	bne.n	80175c6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80175b0:	4925      	ldr	r1, [pc, #148]	; (8017648 <etharp_tmr+0x14c>)
 80175b2:	687a      	ldr	r2, [r7, #4]
 80175b4:	4613      	mov	r3, r2
 80175b6:	005b      	lsls	r3, r3, #1
 80175b8:	4413      	add	r3, r2
 80175ba:	00db      	lsls	r3, r3, #3
 80175bc:	440b      	add	r3, r1
 80175be:	3314      	adds	r3, #20
 80175c0:	2204      	movs	r2, #4
 80175c2:	701a      	strb	r2, [r3, #0]
 80175c4:	e034      	b.n	8017630 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80175c6:	4920      	ldr	r1, [pc, #128]	; (8017648 <etharp_tmr+0x14c>)
 80175c8:	687a      	ldr	r2, [r7, #4]
 80175ca:	4613      	mov	r3, r2
 80175cc:	005b      	lsls	r3, r3, #1
 80175ce:	4413      	add	r3, r2
 80175d0:	00db      	lsls	r3, r3, #3
 80175d2:	440b      	add	r3, r1
 80175d4:	3314      	adds	r3, #20
 80175d6:	781b      	ldrb	r3, [r3, #0]
 80175d8:	2b04      	cmp	r3, #4
 80175da:	d10a      	bne.n	80175f2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80175dc:	491a      	ldr	r1, [pc, #104]	; (8017648 <etharp_tmr+0x14c>)
 80175de:	687a      	ldr	r2, [r7, #4]
 80175e0:	4613      	mov	r3, r2
 80175e2:	005b      	lsls	r3, r3, #1
 80175e4:	4413      	add	r3, r2
 80175e6:	00db      	lsls	r3, r3, #3
 80175e8:	440b      	add	r3, r1
 80175ea:	3314      	adds	r3, #20
 80175ec:	2202      	movs	r2, #2
 80175ee:	701a      	strb	r2, [r3, #0]
 80175f0:	e01e      	b.n	8017630 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80175f2:	4915      	ldr	r1, [pc, #84]	; (8017648 <etharp_tmr+0x14c>)
 80175f4:	687a      	ldr	r2, [r7, #4]
 80175f6:	4613      	mov	r3, r2
 80175f8:	005b      	lsls	r3, r3, #1
 80175fa:	4413      	add	r3, r2
 80175fc:	00db      	lsls	r3, r3, #3
 80175fe:	440b      	add	r3, r1
 8017600:	3314      	adds	r3, #20
 8017602:	781b      	ldrb	r3, [r3, #0]
 8017604:	2b01      	cmp	r3, #1
 8017606:	d113      	bne.n	8017630 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8017608:	490f      	ldr	r1, [pc, #60]	; (8017648 <etharp_tmr+0x14c>)
 801760a:	687a      	ldr	r2, [r7, #4]
 801760c:	4613      	mov	r3, r2
 801760e:	005b      	lsls	r3, r3, #1
 8017610:	4413      	add	r3, r2
 8017612:	00db      	lsls	r3, r3, #3
 8017614:	440b      	add	r3, r1
 8017616:	3308      	adds	r3, #8
 8017618:	6818      	ldr	r0, [r3, #0]
 801761a:	687a      	ldr	r2, [r7, #4]
 801761c:	4613      	mov	r3, r2
 801761e:	005b      	lsls	r3, r3, #1
 8017620:	4413      	add	r3, r2
 8017622:	00db      	lsls	r3, r3, #3
 8017624:	4a08      	ldr	r2, [pc, #32]	; (8017648 <etharp_tmr+0x14c>)
 8017626:	4413      	add	r3, r2
 8017628:	3304      	adds	r3, #4
 801762a:	4619      	mov	r1, r3
 801762c:	f000 fe6e 	bl	801830c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	3301      	adds	r3, #1
 8017634:	607b      	str	r3, [r7, #4]
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	2b09      	cmp	r3, #9
 801763a:	f77f af65 	ble.w	8017508 <etharp_tmr+0xc>
      }
    }
  }
}
 801763e:	bf00      	nop
 8017640:	3708      	adds	r7, #8
 8017642:	46bd      	mov	sp, r7
 8017644:	bd80      	pop	{r7, pc}
 8017646:	bf00      	nop
 8017648:	200008d4 	.word	0x200008d4

0801764c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801764c:	b580      	push	{r7, lr}
 801764e:	b08a      	sub	sp, #40	; 0x28
 8017650:	af00      	add	r7, sp, #0
 8017652:	60f8      	str	r0, [r7, #12]
 8017654:	460b      	mov	r3, r1
 8017656:	607a      	str	r2, [r7, #4]
 8017658:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801765a:	230a      	movs	r3, #10
 801765c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801765e:	230a      	movs	r3, #10
 8017660:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8017662:	230a      	movs	r3, #10
 8017664:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8017666:	2300      	movs	r3, #0
 8017668:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801766a:	230a      	movs	r3, #10
 801766c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801766e:	2300      	movs	r3, #0
 8017670:	83bb      	strh	r3, [r7, #28]
 8017672:	2300      	movs	r3, #0
 8017674:	837b      	strh	r3, [r7, #26]
 8017676:	2300      	movs	r3, #0
 8017678:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801767a:	2300      	movs	r3, #0
 801767c:	843b      	strh	r3, [r7, #32]
 801767e:	e0ae      	b.n	80177de <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8017680:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017684:	49a6      	ldr	r1, [pc, #664]	; (8017920 <etharp_find_entry+0x2d4>)
 8017686:	4613      	mov	r3, r2
 8017688:	005b      	lsls	r3, r3, #1
 801768a:	4413      	add	r3, r2
 801768c:	00db      	lsls	r3, r3, #3
 801768e:	440b      	add	r3, r1
 8017690:	3314      	adds	r3, #20
 8017692:	781b      	ldrb	r3, [r3, #0]
 8017694:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8017696:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801769a:	2b0a      	cmp	r3, #10
 801769c:	d105      	bne.n	80176aa <etharp_find_entry+0x5e>
 801769e:	7dfb      	ldrb	r3, [r7, #23]
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d102      	bne.n	80176aa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80176a4:	8c3b      	ldrh	r3, [r7, #32]
 80176a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80176a8:	e095      	b.n	80177d6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80176aa:	7dfb      	ldrb	r3, [r7, #23]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	f000 8092 	beq.w	80177d6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80176b2:	7dfb      	ldrb	r3, [r7, #23]
 80176b4:	2b01      	cmp	r3, #1
 80176b6:	d009      	beq.n	80176cc <etharp_find_entry+0x80>
 80176b8:	7dfb      	ldrb	r3, [r7, #23]
 80176ba:	2b01      	cmp	r3, #1
 80176bc:	d806      	bhi.n	80176cc <etharp_find_entry+0x80>
 80176be:	4b99      	ldr	r3, [pc, #612]	; (8017924 <etharp_find_entry+0x2d8>)
 80176c0:	f44f 7292 	mov.w	r2, #292	; 0x124
 80176c4:	4998      	ldr	r1, [pc, #608]	; (8017928 <etharp_find_entry+0x2dc>)
 80176c6:	4899      	ldr	r0, [pc, #612]	; (801792c <etharp_find_entry+0x2e0>)
 80176c8:	f003 fb8e 	bl	801ade8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d020      	beq.n	8017714 <etharp_find_entry+0xc8>
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	6819      	ldr	r1, [r3, #0]
 80176d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80176da:	4891      	ldr	r0, [pc, #580]	; (8017920 <etharp_find_entry+0x2d4>)
 80176dc:	4613      	mov	r3, r2
 80176de:	005b      	lsls	r3, r3, #1
 80176e0:	4413      	add	r3, r2
 80176e2:	00db      	lsls	r3, r3, #3
 80176e4:	4403      	add	r3, r0
 80176e6:	3304      	adds	r3, #4
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	4299      	cmp	r1, r3
 80176ec:	d112      	bne.n	8017714 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d00c      	beq.n	801770e <etharp_find_entry+0xc2>
 80176f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80176f8:	4989      	ldr	r1, [pc, #548]	; (8017920 <etharp_find_entry+0x2d4>)
 80176fa:	4613      	mov	r3, r2
 80176fc:	005b      	lsls	r3, r3, #1
 80176fe:	4413      	add	r3, r2
 8017700:	00db      	lsls	r3, r3, #3
 8017702:	440b      	add	r3, r1
 8017704:	3308      	adds	r3, #8
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	687a      	ldr	r2, [r7, #4]
 801770a:	429a      	cmp	r2, r3
 801770c:	d102      	bne.n	8017714 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801770e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017712:	e100      	b.n	8017916 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017714:	7dfb      	ldrb	r3, [r7, #23]
 8017716:	2b01      	cmp	r3, #1
 8017718:	d140      	bne.n	801779c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801771a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801771e:	4980      	ldr	r1, [pc, #512]	; (8017920 <etharp_find_entry+0x2d4>)
 8017720:	4613      	mov	r3, r2
 8017722:	005b      	lsls	r3, r3, #1
 8017724:	4413      	add	r3, r2
 8017726:	00db      	lsls	r3, r3, #3
 8017728:	440b      	add	r3, r1
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	2b00      	cmp	r3, #0
 801772e:	d01a      	beq.n	8017766 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8017730:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017734:	497a      	ldr	r1, [pc, #488]	; (8017920 <etharp_find_entry+0x2d4>)
 8017736:	4613      	mov	r3, r2
 8017738:	005b      	lsls	r3, r3, #1
 801773a:	4413      	add	r3, r2
 801773c:	00db      	lsls	r3, r3, #3
 801773e:	440b      	add	r3, r1
 8017740:	3312      	adds	r3, #18
 8017742:	881b      	ldrh	r3, [r3, #0]
 8017744:	8bba      	ldrh	r2, [r7, #28]
 8017746:	429a      	cmp	r2, r3
 8017748:	d845      	bhi.n	80177d6 <etharp_find_entry+0x18a>
            old_queue = i;
 801774a:	8c3b      	ldrh	r3, [r7, #32]
 801774c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801774e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017752:	4973      	ldr	r1, [pc, #460]	; (8017920 <etharp_find_entry+0x2d4>)
 8017754:	4613      	mov	r3, r2
 8017756:	005b      	lsls	r3, r3, #1
 8017758:	4413      	add	r3, r2
 801775a:	00db      	lsls	r3, r3, #3
 801775c:	440b      	add	r3, r1
 801775e:	3312      	adds	r3, #18
 8017760:	881b      	ldrh	r3, [r3, #0]
 8017762:	83bb      	strh	r3, [r7, #28]
 8017764:	e037      	b.n	80177d6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8017766:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801776a:	496d      	ldr	r1, [pc, #436]	; (8017920 <etharp_find_entry+0x2d4>)
 801776c:	4613      	mov	r3, r2
 801776e:	005b      	lsls	r3, r3, #1
 8017770:	4413      	add	r3, r2
 8017772:	00db      	lsls	r3, r3, #3
 8017774:	440b      	add	r3, r1
 8017776:	3312      	adds	r3, #18
 8017778:	881b      	ldrh	r3, [r3, #0]
 801777a:	8b7a      	ldrh	r2, [r7, #26]
 801777c:	429a      	cmp	r2, r3
 801777e:	d82a      	bhi.n	80177d6 <etharp_find_entry+0x18a>
            old_pending = i;
 8017780:	8c3b      	ldrh	r3, [r7, #32]
 8017782:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8017784:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017788:	4965      	ldr	r1, [pc, #404]	; (8017920 <etharp_find_entry+0x2d4>)
 801778a:	4613      	mov	r3, r2
 801778c:	005b      	lsls	r3, r3, #1
 801778e:	4413      	add	r3, r2
 8017790:	00db      	lsls	r3, r3, #3
 8017792:	440b      	add	r3, r1
 8017794:	3312      	adds	r3, #18
 8017796:	881b      	ldrh	r3, [r3, #0]
 8017798:	837b      	strh	r3, [r7, #26]
 801779a:	e01c      	b.n	80177d6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801779c:	7dfb      	ldrb	r3, [r7, #23]
 801779e:	2b01      	cmp	r3, #1
 80177a0:	d919      	bls.n	80177d6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80177a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80177a6:	495e      	ldr	r1, [pc, #376]	; (8017920 <etharp_find_entry+0x2d4>)
 80177a8:	4613      	mov	r3, r2
 80177aa:	005b      	lsls	r3, r3, #1
 80177ac:	4413      	add	r3, r2
 80177ae:	00db      	lsls	r3, r3, #3
 80177b0:	440b      	add	r3, r1
 80177b2:	3312      	adds	r3, #18
 80177b4:	881b      	ldrh	r3, [r3, #0]
 80177b6:	8b3a      	ldrh	r2, [r7, #24]
 80177b8:	429a      	cmp	r2, r3
 80177ba:	d80c      	bhi.n	80177d6 <etharp_find_entry+0x18a>
            old_stable = i;
 80177bc:	8c3b      	ldrh	r3, [r7, #32]
 80177be:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80177c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80177c4:	4956      	ldr	r1, [pc, #344]	; (8017920 <etharp_find_entry+0x2d4>)
 80177c6:	4613      	mov	r3, r2
 80177c8:	005b      	lsls	r3, r3, #1
 80177ca:	4413      	add	r3, r2
 80177cc:	00db      	lsls	r3, r3, #3
 80177ce:	440b      	add	r3, r1
 80177d0:	3312      	adds	r3, #18
 80177d2:	881b      	ldrh	r3, [r3, #0]
 80177d4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80177d6:	8c3b      	ldrh	r3, [r7, #32]
 80177d8:	3301      	adds	r3, #1
 80177da:	b29b      	uxth	r3, r3
 80177dc:	843b      	strh	r3, [r7, #32]
 80177de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80177e2:	2b09      	cmp	r3, #9
 80177e4:	f77f af4c 	ble.w	8017680 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80177e8:	7afb      	ldrb	r3, [r7, #11]
 80177ea:	f003 0302 	and.w	r3, r3, #2
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d108      	bne.n	8017804 <etharp_find_entry+0x1b8>
 80177f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80177f6:	2b0a      	cmp	r3, #10
 80177f8:	d107      	bne.n	801780a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80177fa:	7afb      	ldrb	r3, [r7, #11]
 80177fc:	f003 0301 	and.w	r3, r3, #1
 8017800:	2b00      	cmp	r3, #0
 8017802:	d102      	bne.n	801780a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8017804:	f04f 33ff 	mov.w	r3, #4294967295
 8017808:	e085      	b.n	8017916 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801780a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801780e:	2b09      	cmp	r3, #9
 8017810:	dc02      	bgt.n	8017818 <etharp_find_entry+0x1cc>
    i = empty;
 8017812:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017814:	843b      	strh	r3, [r7, #32]
 8017816:	e039      	b.n	801788c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017818:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801781c:	2b09      	cmp	r3, #9
 801781e:	dc14      	bgt.n	801784a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8017820:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017822:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017824:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017828:	493d      	ldr	r1, [pc, #244]	; (8017920 <etharp_find_entry+0x2d4>)
 801782a:	4613      	mov	r3, r2
 801782c:	005b      	lsls	r3, r3, #1
 801782e:	4413      	add	r3, r2
 8017830:	00db      	lsls	r3, r3, #3
 8017832:	440b      	add	r3, r1
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	2b00      	cmp	r3, #0
 8017838:	d018      	beq.n	801786c <etharp_find_entry+0x220>
 801783a:	4b3a      	ldr	r3, [pc, #232]	; (8017924 <etharp_find_entry+0x2d8>)
 801783c:	f240 126d 	movw	r2, #365	; 0x16d
 8017840:	493b      	ldr	r1, [pc, #236]	; (8017930 <etharp_find_entry+0x2e4>)
 8017842:	483a      	ldr	r0, [pc, #232]	; (801792c <etharp_find_entry+0x2e0>)
 8017844:	f003 fad0 	bl	801ade8 <iprintf>
 8017848:	e010      	b.n	801786c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801784a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801784e:	2b09      	cmp	r3, #9
 8017850:	dc02      	bgt.n	8017858 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8017852:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017854:	843b      	strh	r3, [r7, #32]
 8017856:	e009      	b.n	801786c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017858:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801785c:	2b09      	cmp	r3, #9
 801785e:	dc02      	bgt.n	8017866 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8017860:	8bfb      	ldrh	r3, [r7, #30]
 8017862:	843b      	strh	r3, [r7, #32]
 8017864:	e002      	b.n	801786c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8017866:	f04f 33ff 	mov.w	r3, #4294967295
 801786a:	e054      	b.n	8017916 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801786c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017870:	2b09      	cmp	r3, #9
 8017872:	dd06      	ble.n	8017882 <etharp_find_entry+0x236>
 8017874:	4b2b      	ldr	r3, [pc, #172]	; (8017924 <etharp_find_entry+0x2d8>)
 8017876:	f240 127f 	movw	r2, #383	; 0x17f
 801787a:	492e      	ldr	r1, [pc, #184]	; (8017934 <etharp_find_entry+0x2e8>)
 801787c:	482b      	ldr	r0, [pc, #172]	; (801792c <etharp_find_entry+0x2e0>)
 801787e:	f003 fab3 	bl	801ade8 <iprintf>
    etharp_free_entry(i);
 8017882:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017886:	4618      	mov	r0, r3
 8017888:	f7ff fe06 	bl	8017498 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801788c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017890:	2b09      	cmp	r3, #9
 8017892:	dd06      	ble.n	80178a2 <etharp_find_entry+0x256>
 8017894:	4b23      	ldr	r3, [pc, #140]	; (8017924 <etharp_find_entry+0x2d8>)
 8017896:	f240 1283 	movw	r2, #387	; 0x183
 801789a:	4926      	ldr	r1, [pc, #152]	; (8017934 <etharp_find_entry+0x2e8>)
 801789c:	4823      	ldr	r0, [pc, #140]	; (801792c <etharp_find_entry+0x2e0>)
 801789e:	f003 faa3 	bl	801ade8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80178a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80178a6:	491e      	ldr	r1, [pc, #120]	; (8017920 <etharp_find_entry+0x2d4>)
 80178a8:	4613      	mov	r3, r2
 80178aa:	005b      	lsls	r3, r3, #1
 80178ac:	4413      	add	r3, r2
 80178ae:	00db      	lsls	r3, r3, #3
 80178b0:	440b      	add	r3, r1
 80178b2:	3314      	adds	r3, #20
 80178b4:	781b      	ldrb	r3, [r3, #0]
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d006      	beq.n	80178c8 <etharp_find_entry+0x27c>
 80178ba:	4b1a      	ldr	r3, [pc, #104]	; (8017924 <etharp_find_entry+0x2d8>)
 80178bc:	f240 1285 	movw	r2, #389	; 0x185
 80178c0:	491d      	ldr	r1, [pc, #116]	; (8017938 <etharp_find_entry+0x2ec>)
 80178c2:	481a      	ldr	r0, [pc, #104]	; (801792c <etharp_find_entry+0x2e0>)
 80178c4:	f003 fa90 	bl	801ade8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d00b      	beq.n	80178e6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80178ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	6819      	ldr	r1, [r3, #0]
 80178d6:	4812      	ldr	r0, [pc, #72]	; (8017920 <etharp_find_entry+0x2d4>)
 80178d8:	4613      	mov	r3, r2
 80178da:	005b      	lsls	r3, r3, #1
 80178dc:	4413      	add	r3, r2
 80178de:	00db      	lsls	r3, r3, #3
 80178e0:	4403      	add	r3, r0
 80178e2:	3304      	adds	r3, #4
 80178e4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80178e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80178ea:	490d      	ldr	r1, [pc, #52]	; (8017920 <etharp_find_entry+0x2d4>)
 80178ec:	4613      	mov	r3, r2
 80178ee:	005b      	lsls	r3, r3, #1
 80178f0:	4413      	add	r3, r2
 80178f2:	00db      	lsls	r3, r3, #3
 80178f4:	440b      	add	r3, r1
 80178f6:	3312      	adds	r3, #18
 80178f8:	2200      	movs	r2, #0
 80178fa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80178fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017900:	4907      	ldr	r1, [pc, #28]	; (8017920 <etharp_find_entry+0x2d4>)
 8017902:	4613      	mov	r3, r2
 8017904:	005b      	lsls	r3, r3, #1
 8017906:	4413      	add	r3, r2
 8017908:	00db      	lsls	r3, r3, #3
 801790a:	440b      	add	r3, r1
 801790c:	3308      	adds	r3, #8
 801790e:	687a      	ldr	r2, [r7, #4]
 8017910:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8017912:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8017916:	4618      	mov	r0, r3
 8017918:	3728      	adds	r7, #40	; 0x28
 801791a:	46bd      	mov	sp, r7
 801791c:	bd80      	pop	{r7, pc}
 801791e:	bf00      	nop
 8017920:	200008d4 	.word	0x200008d4
 8017924:	0802270c 	.word	0x0802270c
 8017928:	08022744 	.word	0x08022744
 801792c:	08022784 	.word	0x08022784
 8017930:	080227ac 	.word	0x080227ac
 8017934:	080227c4 	.word	0x080227c4
 8017938:	080227d8 	.word	0x080227d8

0801793c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801793c:	b580      	push	{r7, lr}
 801793e:	b088      	sub	sp, #32
 8017940:	af02      	add	r7, sp, #8
 8017942:	60f8      	str	r0, [r7, #12]
 8017944:	60b9      	str	r1, [r7, #8]
 8017946:	607a      	str	r2, [r7, #4]
 8017948:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017950:	2b06      	cmp	r3, #6
 8017952:	d006      	beq.n	8017962 <etharp_update_arp_entry+0x26>
 8017954:	4b48      	ldr	r3, [pc, #288]	; (8017a78 <etharp_update_arp_entry+0x13c>)
 8017956:	f240 12a9 	movw	r2, #425	; 0x1a9
 801795a:	4948      	ldr	r1, [pc, #288]	; (8017a7c <etharp_update_arp_entry+0x140>)
 801795c:	4848      	ldr	r0, [pc, #288]	; (8017a80 <etharp_update_arp_entry+0x144>)
 801795e:	f003 fa43 	bl	801ade8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8017962:	68bb      	ldr	r3, [r7, #8]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d012      	beq.n	801798e <etharp_update_arp_entry+0x52>
 8017968:	68bb      	ldr	r3, [r7, #8]
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	2b00      	cmp	r3, #0
 801796e:	d00e      	beq.n	801798e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017970:	68bb      	ldr	r3, [r7, #8]
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	68f9      	ldr	r1, [r7, #12]
 8017976:	4618      	mov	r0, r3
 8017978:	f001 f8fc 	bl	8018b74 <ip4_addr_isbroadcast_u32>
 801797c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801797e:	2b00      	cmp	r3, #0
 8017980:	d105      	bne.n	801798e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8017982:	68bb      	ldr	r3, [r7, #8]
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801798a:	2be0      	cmp	r3, #224	; 0xe0
 801798c:	d102      	bne.n	8017994 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801798e:	f06f 030f 	mvn.w	r3, #15
 8017992:	e06c      	b.n	8017a6e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017994:	78fb      	ldrb	r3, [r7, #3]
 8017996:	68fa      	ldr	r2, [r7, #12]
 8017998:	4619      	mov	r1, r3
 801799a:	68b8      	ldr	r0, [r7, #8]
 801799c:	f7ff fe56 	bl	801764c <etharp_find_entry>
 80179a0:	4603      	mov	r3, r0
 80179a2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80179a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	da02      	bge.n	80179b2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80179ac:	8afb      	ldrh	r3, [r7, #22]
 80179ae:	b25b      	sxtb	r3, r3
 80179b0:	e05d      	b.n	8017a6e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80179b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80179b6:	4933      	ldr	r1, [pc, #204]	; (8017a84 <etharp_update_arp_entry+0x148>)
 80179b8:	4613      	mov	r3, r2
 80179ba:	005b      	lsls	r3, r3, #1
 80179bc:	4413      	add	r3, r2
 80179be:	00db      	lsls	r3, r3, #3
 80179c0:	440b      	add	r3, r1
 80179c2:	3314      	adds	r3, #20
 80179c4:	2202      	movs	r2, #2
 80179c6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80179c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80179cc:	492d      	ldr	r1, [pc, #180]	; (8017a84 <etharp_update_arp_entry+0x148>)
 80179ce:	4613      	mov	r3, r2
 80179d0:	005b      	lsls	r3, r3, #1
 80179d2:	4413      	add	r3, r2
 80179d4:	00db      	lsls	r3, r3, #3
 80179d6:	440b      	add	r3, r1
 80179d8:	3308      	adds	r3, #8
 80179da:	68fa      	ldr	r2, [r7, #12]
 80179dc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80179de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80179e2:	4613      	mov	r3, r2
 80179e4:	005b      	lsls	r3, r3, #1
 80179e6:	4413      	add	r3, r2
 80179e8:	00db      	lsls	r3, r3, #3
 80179ea:	3308      	adds	r3, #8
 80179ec:	4a25      	ldr	r2, [pc, #148]	; (8017a84 <etharp_update_arp_entry+0x148>)
 80179ee:	4413      	add	r3, r2
 80179f0:	3304      	adds	r3, #4
 80179f2:	2206      	movs	r2, #6
 80179f4:	6879      	ldr	r1, [r7, #4]
 80179f6:	4618      	mov	r0, r3
 80179f8:	f002 fb0d 	bl	801a016 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80179fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017a00:	4920      	ldr	r1, [pc, #128]	; (8017a84 <etharp_update_arp_entry+0x148>)
 8017a02:	4613      	mov	r3, r2
 8017a04:	005b      	lsls	r3, r3, #1
 8017a06:	4413      	add	r3, r2
 8017a08:	00db      	lsls	r3, r3, #3
 8017a0a:	440b      	add	r3, r1
 8017a0c:	3312      	adds	r3, #18
 8017a0e:	2200      	movs	r2, #0
 8017a10:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8017a12:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017a16:	491b      	ldr	r1, [pc, #108]	; (8017a84 <etharp_update_arp_entry+0x148>)
 8017a18:	4613      	mov	r3, r2
 8017a1a:	005b      	lsls	r3, r3, #1
 8017a1c:	4413      	add	r3, r2
 8017a1e:	00db      	lsls	r3, r3, #3
 8017a20:	440b      	add	r3, r1
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d021      	beq.n	8017a6c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017a28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017a2c:	4915      	ldr	r1, [pc, #84]	; (8017a84 <etharp_update_arp_entry+0x148>)
 8017a2e:	4613      	mov	r3, r2
 8017a30:	005b      	lsls	r3, r3, #1
 8017a32:	4413      	add	r3, r2
 8017a34:	00db      	lsls	r3, r3, #3
 8017a36:	440b      	add	r3, r1
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017a3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017a40:	4910      	ldr	r1, [pc, #64]	; (8017a84 <etharp_update_arp_entry+0x148>)
 8017a42:	4613      	mov	r3, r2
 8017a44:	005b      	lsls	r3, r3, #1
 8017a46:	4413      	add	r3, r2
 8017a48:	00db      	lsls	r3, r3, #3
 8017a4a:	440b      	add	r3, r1
 8017a4c:	2200      	movs	r2, #0
 8017a4e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8017a56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017a5a:	9300      	str	r3, [sp, #0]
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	6939      	ldr	r1, [r7, #16]
 8017a60:	68f8      	ldr	r0, [r7, #12]
 8017a62:	f001 ff8b 	bl	801997c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8017a66:	6938      	ldr	r0, [r7, #16]
 8017a68:	f7f8 fb60 	bl	801012c <pbuf_free>
  }
  return ERR_OK;
 8017a6c:	2300      	movs	r3, #0
}
 8017a6e:	4618      	mov	r0, r3
 8017a70:	3718      	adds	r7, #24
 8017a72:	46bd      	mov	sp, r7
 8017a74:	bd80      	pop	{r7, pc}
 8017a76:	bf00      	nop
 8017a78:	0802270c 	.word	0x0802270c
 8017a7c:	08022804 	.word	0x08022804
 8017a80:	08022784 	.word	0x08022784
 8017a84:	200008d4 	.word	0x200008d4

08017a88 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017a88:	b580      	push	{r7, lr}
 8017a8a:	b084      	sub	sp, #16
 8017a8c:	af00      	add	r7, sp, #0
 8017a8e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017a90:	2300      	movs	r3, #0
 8017a92:	60fb      	str	r3, [r7, #12]
 8017a94:	e01e      	b.n	8017ad4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8017a96:	4913      	ldr	r1, [pc, #76]	; (8017ae4 <etharp_cleanup_netif+0x5c>)
 8017a98:	68fa      	ldr	r2, [r7, #12]
 8017a9a:	4613      	mov	r3, r2
 8017a9c:	005b      	lsls	r3, r3, #1
 8017a9e:	4413      	add	r3, r2
 8017aa0:	00db      	lsls	r3, r3, #3
 8017aa2:	440b      	add	r3, r1
 8017aa4:	3314      	adds	r3, #20
 8017aa6:	781b      	ldrb	r3, [r3, #0]
 8017aa8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017aaa:	7afb      	ldrb	r3, [r7, #11]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d00e      	beq.n	8017ace <etharp_cleanup_netif+0x46>
 8017ab0:	490c      	ldr	r1, [pc, #48]	; (8017ae4 <etharp_cleanup_netif+0x5c>)
 8017ab2:	68fa      	ldr	r2, [r7, #12]
 8017ab4:	4613      	mov	r3, r2
 8017ab6:	005b      	lsls	r3, r3, #1
 8017ab8:	4413      	add	r3, r2
 8017aba:	00db      	lsls	r3, r3, #3
 8017abc:	440b      	add	r3, r1
 8017abe:	3308      	adds	r3, #8
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	687a      	ldr	r2, [r7, #4]
 8017ac4:	429a      	cmp	r2, r3
 8017ac6:	d102      	bne.n	8017ace <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017ac8:	68f8      	ldr	r0, [r7, #12]
 8017aca:	f7ff fce5 	bl	8017498 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	3301      	adds	r3, #1
 8017ad2:	60fb      	str	r3, [r7, #12]
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	2b09      	cmp	r3, #9
 8017ad8:	dddd      	ble.n	8017a96 <etharp_cleanup_netif+0xe>
    }
  }
}
 8017ada:	bf00      	nop
 8017adc:	3710      	adds	r7, #16
 8017ade:	46bd      	mov	sp, r7
 8017ae0:	bd80      	pop	{r7, pc}
 8017ae2:	bf00      	nop
 8017ae4:	200008d4 	.word	0x200008d4

08017ae8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017ae8:	b5b0      	push	{r4, r5, r7, lr}
 8017aea:	b08a      	sub	sp, #40	; 0x28
 8017aec:	af04      	add	r7, sp, #16
 8017aee:	6078      	str	r0, [r7, #4]
 8017af0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017af2:	683b      	ldr	r3, [r7, #0]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d107      	bne.n	8017b08 <etharp_input+0x20>
 8017af8:	4b3d      	ldr	r3, [pc, #244]	; (8017bf0 <etharp_input+0x108>)
 8017afa:	f240 228a 	movw	r2, #650	; 0x28a
 8017afe:	493d      	ldr	r1, [pc, #244]	; (8017bf4 <etharp_input+0x10c>)
 8017b00:	483d      	ldr	r0, [pc, #244]	; (8017bf8 <etharp_input+0x110>)
 8017b02:	f003 f971 	bl	801ade8 <iprintf>
 8017b06:	e06f      	b.n	8017be8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	685b      	ldr	r3, [r3, #4]
 8017b0c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017b0e:	693b      	ldr	r3, [r7, #16]
 8017b10:	881b      	ldrh	r3, [r3, #0]
 8017b12:	b29b      	uxth	r3, r3
 8017b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017b18:	d10c      	bne.n	8017b34 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017b1a:	693b      	ldr	r3, [r7, #16]
 8017b1c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017b1e:	2b06      	cmp	r3, #6
 8017b20:	d108      	bne.n	8017b34 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017b22:	693b      	ldr	r3, [r7, #16]
 8017b24:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017b26:	2b04      	cmp	r3, #4
 8017b28:	d104      	bne.n	8017b34 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017b2a:	693b      	ldr	r3, [r7, #16]
 8017b2c:	885b      	ldrh	r3, [r3, #2]
 8017b2e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017b30:	2b08      	cmp	r3, #8
 8017b32:	d003      	beq.n	8017b3c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017b34:	6878      	ldr	r0, [r7, #4]
 8017b36:	f7f8 faf9 	bl	801012c <pbuf_free>
    return;
 8017b3a:	e055      	b.n	8017be8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8017b3c:	693b      	ldr	r3, [r7, #16]
 8017b3e:	330e      	adds	r3, #14
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8017b44:	693b      	ldr	r3, [r7, #16]
 8017b46:	3318      	adds	r3, #24
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017b4c:	683b      	ldr	r3, [r7, #0]
 8017b4e:	3304      	adds	r3, #4
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d102      	bne.n	8017b5c <etharp_input+0x74>
    for_us = 0;
 8017b56:	2300      	movs	r3, #0
 8017b58:	75fb      	strb	r3, [r7, #23]
 8017b5a:	e009      	b.n	8017b70 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017b5c:	68ba      	ldr	r2, [r7, #8]
 8017b5e:	683b      	ldr	r3, [r7, #0]
 8017b60:	3304      	adds	r3, #4
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	429a      	cmp	r2, r3
 8017b66:	bf0c      	ite	eq
 8017b68:	2301      	moveq	r3, #1
 8017b6a:	2300      	movne	r3, #0
 8017b6c:	b2db      	uxtb	r3, r3
 8017b6e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8017b70:	693b      	ldr	r3, [r7, #16]
 8017b72:	f103 0208 	add.w	r2, r3, #8
 8017b76:	7dfb      	ldrb	r3, [r7, #23]
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d001      	beq.n	8017b80 <etharp_input+0x98>
 8017b7c:	2301      	movs	r3, #1
 8017b7e:	e000      	b.n	8017b82 <etharp_input+0x9a>
 8017b80:	2302      	movs	r3, #2
 8017b82:	f107 010c 	add.w	r1, r7, #12
 8017b86:	6838      	ldr	r0, [r7, #0]
 8017b88:	f7ff fed8 	bl	801793c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017b8c:	693b      	ldr	r3, [r7, #16]
 8017b8e:	88db      	ldrh	r3, [r3, #6]
 8017b90:	b29b      	uxth	r3, r3
 8017b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017b96:	d003      	beq.n	8017ba0 <etharp_input+0xb8>
 8017b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017b9c:	d01e      	beq.n	8017bdc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8017b9e:	e020      	b.n	8017be2 <etharp_input+0xfa>
      if (for_us) {
 8017ba0:	7dfb      	ldrb	r3, [r7, #23]
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d01c      	beq.n	8017be0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017ba6:	683b      	ldr	r3, [r7, #0]
 8017ba8:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8017bac:	693b      	ldr	r3, [r7, #16]
 8017bae:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8017bb2:	683b      	ldr	r3, [r7, #0]
 8017bb4:	f103 0522 	add.w	r5, r3, #34	; 0x22
 8017bb8:	683b      	ldr	r3, [r7, #0]
 8017bba:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017bbc:	693a      	ldr	r2, [r7, #16]
 8017bbe:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017bc0:	2102      	movs	r1, #2
 8017bc2:	9103      	str	r1, [sp, #12]
 8017bc4:	f107 010c 	add.w	r1, r7, #12
 8017bc8:	9102      	str	r1, [sp, #8]
 8017bca:	9201      	str	r2, [sp, #4]
 8017bcc:	9300      	str	r3, [sp, #0]
 8017bce:	462b      	mov	r3, r5
 8017bd0:	4622      	mov	r2, r4
 8017bd2:	4601      	mov	r1, r0
 8017bd4:	6838      	ldr	r0, [r7, #0]
 8017bd6:	f000 faeb 	bl	80181b0 <etharp_raw>
      break;
 8017bda:	e001      	b.n	8017be0 <etharp_input+0xf8>
      break;
 8017bdc:	bf00      	nop
 8017bde:	e000      	b.n	8017be2 <etharp_input+0xfa>
      break;
 8017be0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017be2:	6878      	ldr	r0, [r7, #4]
 8017be4:	f7f8 faa2 	bl	801012c <pbuf_free>
}
 8017be8:	3718      	adds	r7, #24
 8017bea:	46bd      	mov	sp, r7
 8017bec:	bdb0      	pop	{r4, r5, r7, pc}
 8017bee:	bf00      	nop
 8017bf0:	0802270c 	.word	0x0802270c
 8017bf4:	0802285c 	.word	0x0802285c
 8017bf8:	08022784 	.word	0x08022784

08017bfc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017bfc:	b580      	push	{r7, lr}
 8017bfe:	b086      	sub	sp, #24
 8017c00:	af02      	add	r7, sp, #8
 8017c02:	60f8      	str	r0, [r7, #12]
 8017c04:	60b9      	str	r1, [r7, #8]
 8017c06:	4613      	mov	r3, r2
 8017c08:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8017c0a:	79fa      	ldrb	r2, [r7, #7]
 8017c0c:	4944      	ldr	r1, [pc, #272]	; (8017d20 <etharp_output_to_arp_index+0x124>)
 8017c0e:	4613      	mov	r3, r2
 8017c10:	005b      	lsls	r3, r3, #1
 8017c12:	4413      	add	r3, r2
 8017c14:	00db      	lsls	r3, r3, #3
 8017c16:	440b      	add	r3, r1
 8017c18:	3314      	adds	r3, #20
 8017c1a:	781b      	ldrb	r3, [r3, #0]
 8017c1c:	2b01      	cmp	r3, #1
 8017c1e:	d806      	bhi.n	8017c2e <etharp_output_to_arp_index+0x32>
 8017c20:	4b40      	ldr	r3, [pc, #256]	; (8017d24 <etharp_output_to_arp_index+0x128>)
 8017c22:	f240 22ef 	movw	r2, #751	; 0x2ef
 8017c26:	4940      	ldr	r1, [pc, #256]	; (8017d28 <etharp_output_to_arp_index+0x12c>)
 8017c28:	4840      	ldr	r0, [pc, #256]	; (8017d2c <etharp_output_to_arp_index+0x130>)
 8017c2a:	f003 f8dd 	bl	801ade8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017c2e:	79fa      	ldrb	r2, [r7, #7]
 8017c30:	493b      	ldr	r1, [pc, #236]	; (8017d20 <etharp_output_to_arp_index+0x124>)
 8017c32:	4613      	mov	r3, r2
 8017c34:	005b      	lsls	r3, r3, #1
 8017c36:	4413      	add	r3, r2
 8017c38:	00db      	lsls	r3, r3, #3
 8017c3a:	440b      	add	r3, r1
 8017c3c:	3314      	adds	r3, #20
 8017c3e:	781b      	ldrb	r3, [r3, #0]
 8017c40:	2b02      	cmp	r3, #2
 8017c42:	d153      	bne.n	8017cec <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017c44:	79fa      	ldrb	r2, [r7, #7]
 8017c46:	4936      	ldr	r1, [pc, #216]	; (8017d20 <etharp_output_to_arp_index+0x124>)
 8017c48:	4613      	mov	r3, r2
 8017c4a:	005b      	lsls	r3, r3, #1
 8017c4c:	4413      	add	r3, r2
 8017c4e:	00db      	lsls	r3, r3, #3
 8017c50:	440b      	add	r3, r1
 8017c52:	3312      	adds	r3, #18
 8017c54:	881b      	ldrh	r3, [r3, #0]
 8017c56:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8017c5a:	d919      	bls.n	8017c90 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017c5c:	79fa      	ldrb	r2, [r7, #7]
 8017c5e:	4613      	mov	r3, r2
 8017c60:	005b      	lsls	r3, r3, #1
 8017c62:	4413      	add	r3, r2
 8017c64:	00db      	lsls	r3, r3, #3
 8017c66:	4a2e      	ldr	r2, [pc, #184]	; (8017d20 <etharp_output_to_arp_index+0x124>)
 8017c68:	4413      	add	r3, r2
 8017c6a:	3304      	adds	r3, #4
 8017c6c:	4619      	mov	r1, r3
 8017c6e:	68f8      	ldr	r0, [r7, #12]
 8017c70:	f000 fb4c 	bl	801830c <etharp_request>
 8017c74:	4603      	mov	r3, r0
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d138      	bne.n	8017cec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017c7a:	79fa      	ldrb	r2, [r7, #7]
 8017c7c:	4928      	ldr	r1, [pc, #160]	; (8017d20 <etharp_output_to_arp_index+0x124>)
 8017c7e:	4613      	mov	r3, r2
 8017c80:	005b      	lsls	r3, r3, #1
 8017c82:	4413      	add	r3, r2
 8017c84:	00db      	lsls	r3, r3, #3
 8017c86:	440b      	add	r3, r1
 8017c88:	3314      	adds	r3, #20
 8017c8a:	2203      	movs	r2, #3
 8017c8c:	701a      	strb	r2, [r3, #0]
 8017c8e:	e02d      	b.n	8017cec <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017c90:	79fa      	ldrb	r2, [r7, #7]
 8017c92:	4923      	ldr	r1, [pc, #140]	; (8017d20 <etharp_output_to_arp_index+0x124>)
 8017c94:	4613      	mov	r3, r2
 8017c96:	005b      	lsls	r3, r3, #1
 8017c98:	4413      	add	r3, r2
 8017c9a:	00db      	lsls	r3, r3, #3
 8017c9c:	440b      	add	r3, r1
 8017c9e:	3312      	adds	r3, #18
 8017ca0:	881b      	ldrh	r3, [r3, #0]
 8017ca2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8017ca6:	d321      	bcc.n	8017cec <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017ca8:	79fa      	ldrb	r2, [r7, #7]
 8017caa:	4613      	mov	r3, r2
 8017cac:	005b      	lsls	r3, r3, #1
 8017cae:	4413      	add	r3, r2
 8017cb0:	00db      	lsls	r3, r3, #3
 8017cb2:	4a1b      	ldr	r2, [pc, #108]	; (8017d20 <etharp_output_to_arp_index+0x124>)
 8017cb4:	4413      	add	r3, r2
 8017cb6:	1d19      	adds	r1, r3, #4
 8017cb8:	79fa      	ldrb	r2, [r7, #7]
 8017cba:	4613      	mov	r3, r2
 8017cbc:	005b      	lsls	r3, r3, #1
 8017cbe:	4413      	add	r3, r2
 8017cc0:	00db      	lsls	r3, r3, #3
 8017cc2:	3308      	adds	r3, #8
 8017cc4:	4a16      	ldr	r2, [pc, #88]	; (8017d20 <etharp_output_to_arp_index+0x124>)
 8017cc6:	4413      	add	r3, r2
 8017cc8:	3304      	adds	r3, #4
 8017cca:	461a      	mov	r2, r3
 8017ccc:	68f8      	ldr	r0, [r7, #12]
 8017cce:	f000 fafb 	bl	80182c8 <etharp_request_dst>
 8017cd2:	4603      	mov	r3, r0
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d109      	bne.n	8017cec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017cd8:	79fa      	ldrb	r2, [r7, #7]
 8017cda:	4911      	ldr	r1, [pc, #68]	; (8017d20 <etharp_output_to_arp_index+0x124>)
 8017cdc:	4613      	mov	r3, r2
 8017cde:	005b      	lsls	r3, r3, #1
 8017ce0:	4413      	add	r3, r2
 8017ce2:	00db      	lsls	r3, r3, #3
 8017ce4:	440b      	add	r3, r1
 8017ce6:	3314      	adds	r3, #20
 8017ce8:	2203      	movs	r2, #3
 8017cea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017cec:	68fb      	ldr	r3, [r7, #12]
 8017cee:	f103 0122 	add.w	r1, r3, #34	; 0x22
 8017cf2:	79fa      	ldrb	r2, [r7, #7]
 8017cf4:	4613      	mov	r3, r2
 8017cf6:	005b      	lsls	r3, r3, #1
 8017cf8:	4413      	add	r3, r2
 8017cfa:	00db      	lsls	r3, r3, #3
 8017cfc:	3308      	adds	r3, #8
 8017cfe:	4a08      	ldr	r2, [pc, #32]	; (8017d20 <etharp_output_to_arp_index+0x124>)
 8017d00:	4413      	add	r3, r2
 8017d02:	1d1a      	adds	r2, r3, #4
 8017d04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017d08:	9300      	str	r3, [sp, #0]
 8017d0a:	4613      	mov	r3, r2
 8017d0c:	460a      	mov	r2, r1
 8017d0e:	68b9      	ldr	r1, [r7, #8]
 8017d10:	68f8      	ldr	r0, [r7, #12]
 8017d12:	f001 fe33 	bl	801997c <ethernet_output>
 8017d16:	4603      	mov	r3, r0
}
 8017d18:	4618      	mov	r0, r3
 8017d1a:	3710      	adds	r7, #16
 8017d1c:	46bd      	mov	sp, r7
 8017d1e:	bd80      	pop	{r7, pc}
 8017d20:	200008d4 	.word	0x200008d4
 8017d24:	0802270c 	.word	0x0802270c
 8017d28:	0802287c 	.word	0x0802287c
 8017d2c:	08022784 	.word	0x08022784

08017d30 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017d30:	b580      	push	{r7, lr}
 8017d32:	b08a      	sub	sp, #40	; 0x28
 8017d34:	af02      	add	r7, sp, #8
 8017d36:	60f8      	str	r0, [r7, #12]
 8017d38:	60b9      	str	r1, [r7, #8]
 8017d3a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d106      	bne.n	8017d54 <etharp_output+0x24>
 8017d46:	4b73      	ldr	r3, [pc, #460]	; (8017f14 <etharp_output+0x1e4>)
 8017d48:	f240 321e 	movw	r2, #798	; 0x31e
 8017d4c:	4972      	ldr	r1, [pc, #456]	; (8017f18 <etharp_output+0x1e8>)
 8017d4e:	4873      	ldr	r0, [pc, #460]	; (8017f1c <etharp_output+0x1ec>)
 8017d50:	f003 f84a 	bl	801ade8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017d54:	68bb      	ldr	r3, [r7, #8]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d106      	bne.n	8017d68 <etharp_output+0x38>
 8017d5a:	4b6e      	ldr	r3, [pc, #440]	; (8017f14 <etharp_output+0x1e4>)
 8017d5c:	f240 321f 	movw	r2, #799	; 0x31f
 8017d60:	496f      	ldr	r1, [pc, #444]	; (8017f20 <etharp_output+0x1f0>)
 8017d62:	486e      	ldr	r0, [pc, #440]	; (8017f1c <etharp_output+0x1ec>)
 8017d64:	f003 f840 	bl	801ade8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d106      	bne.n	8017d7c <etharp_output+0x4c>
 8017d6e:	4b69      	ldr	r3, [pc, #420]	; (8017f14 <etharp_output+0x1e4>)
 8017d70:	f44f 7248 	mov.w	r2, #800	; 0x320
 8017d74:	496b      	ldr	r1, [pc, #428]	; (8017f24 <etharp_output+0x1f4>)
 8017d76:	4869      	ldr	r0, [pc, #420]	; (8017f1c <etharp_output+0x1ec>)
 8017d78:	f003 f836 	bl	801ade8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	68f9      	ldr	r1, [r7, #12]
 8017d82:	4618      	mov	r0, r3
 8017d84:	f000 fef6 	bl	8018b74 <ip4_addr_isbroadcast_u32>
 8017d88:	4603      	mov	r3, r0
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d002      	beq.n	8017d94 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017d8e:	4b66      	ldr	r3, [pc, #408]	; (8017f28 <etharp_output+0x1f8>)
 8017d90:	61fb      	str	r3, [r7, #28]
 8017d92:	e0af      	b.n	8017ef4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	681b      	ldr	r3, [r3, #0]
 8017d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017d9c:	2be0      	cmp	r3, #224	; 0xe0
 8017d9e:	d118      	bne.n	8017dd2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017da0:	2301      	movs	r3, #1
 8017da2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017da4:	2300      	movs	r3, #0
 8017da6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017da8:	235e      	movs	r3, #94	; 0x5e
 8017daa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	3301      	adds	r3, #1
 8017db0:	781b      	ldrb	r3, [r3, #0]
 8017db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017db6:	b2db      	uxtb	r3, r3
 8017db8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	3302      	adds	r3, #2
 8017dbe:	781b      	ldrb	r3, [r3, #0]
 8017dc0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	3303      	adds	r3, #3
 8017dc6:	781b      	ldrb	r3, [r3, #0]
 8017dc8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017dca:	f107 0310 	add.w	r3, r7, #16
 8017dce:	61fb      	str	r3, [r7, #28]
 8017dd0:	e090      	b.n	8017ef4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	681a      	ldr	r2, [r3, #0]
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	3304      	adds	r3, #4
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	405a      	eors	r2, r3
 8017dde:	68fb      	ldr	r3, [r7, #12]
 8017de0:	3308      	adds	r3, #8
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	4013      	ands	r3, r2
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d012      	beq.n	8017e10 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017df0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017df4:	4293      	cmp	r3, r2
 8017df6:	d00b      	beq.n	8017e10 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	330c      	adds	r3, #12
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d003      	beq.n	8017e0a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8017e02:	68fb      	ldr	r3, [r7, #12]
 8017e04:	330c      	adds	r3, #12
 8017e06:	61bb      	str	r3, [r7, #24]
 8017e08:	e002      	b.n	8017e10 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8017e0a:	f06f 0303 	mvn.w	r3, #3
 8017e0e:	e07d      	b.n	8017f0c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017e10:	4b46      	ldr	r3, [pc, #280]	; (8017f2c <etharp_output+0x1fc>)
 8017e12:	781b      	ldrb	r3, [r3, #0]
 8017e14:	4619      	mov	r1, r3
 8017e16:	4a46      	ldr	r2, [pc, #280]	; (8017f30 <etharp_output+0x200>)
 8017e18:	460b      	mov	r3, r1
 8017e1a:	005b      	lsls	r3, r3, #1
 8017e1c:	440b      	add	r3, r1
 8017e1e:	00db      	lsls	r3, r3, #3
 8017e20:	4413      	add	r3, r2
 8017e22:	3314      	adds	r3, #20
 8017e24:	781b      	ldrb	r3, [r3, #0]
 8017e26:	2b01      	cmp	r3, #1
 8017e28:	d925      	bls.n	8017e76 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017e2a:	4b40      	ldr	r3, [pc, #256]	; (8017f2c <etharp_output+0x1fc>)
 8017e2c:	781b      	ldrb	r3, [r3, #0]
 8017e2e:	4619      	mov	r1, r3
 8017e30:	4a3f      	ldr	r2, [pc, #252]	; (8017f30 <etharp_output+0x200>)
 8017e32:	460b      	mov	r3, r1
 8017e34:	005b      	lsls	r3, r3, #1
 8017e36:	440b      	add	r3, r1
 8017e38:	00db      	lsls	r3, r3, #3
 8017e3a:	4413      	add	r3, r2
 8017e3c:	3308      	adds	r3, #8
 8017e3e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017e40:	68fa      	ldr	r2, [r7, #12]
 8017e42:	429a      	cmp	r2, r3
 8017e44:	d117      	bne.n	8017e76 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8017e46:	69bb      	ldr	r3, [r7, #24]
 8017e48:	681a      	ldr	r2, [r3, #0]
 8017e4a:	4b38      	ldr	r3, [pc, #224]	; (8017f2c <etharp_output+0x1fc>)
 8017e4c:	781b      	ldrb	r3, [r3, #0]
 8017e4e:	4618      	mov	r0, r3
 8017e50:	4937      	ldr	r1, [pc, #220]	; (8017f30 <etharp_output+0x200>)
 8017e52:	4603      	mov	r3, r0
 8017e54:	005b      	lsls	r3, r3, #1
 8017e56:	4403      	add	r3, r0
 8017e58:	00db      	lsls	r3, r3, #3
 8017e5a:	440b      	add	r3, r1
 8017e5c:	3304      	adds	r3, #4
 8017e5e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017e60:	429a      	cmp	r2, r3
 8017e62:	d108      	bne.n	8017e76 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017e64:	4b31      	ldr	r3, [pc, #196]	; (8017f2c <etharp_output+0x1fc>)
 8017e66:	781b      	ldrb	r3, [r3, #0]
 8017e68:	461a      	mov	r2, r3
 8017e6a:	68b9      	ldr	r1, [r7, #8]
 8017e6c:	68f8      	ldr	r0, [r7, #12]
 8017e6e:	f7ff fec5 	bl	8017bfc <etharp_output_to_arp_index>
 8017e72:	4603      	mov	r3, r0
 8017e74:	e04a      	b.n	8017f0c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017e76:	2300      	movs	r3, #0
 8017e78:	75fb      	strb	r3, [r7, #23]
 8017e7a:	e031      	b.n	8017ee0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017e7c:	7dfa      	ldrb	r2, [r7, #23]
 8017e7e:	492c      	ldr	r1, [pc, #176]	; (8017f30 <etharp_output+0x200>)
 8017e80:	4613      	mov	r3, r2
 8017e82:	005b      	lsls	r3, r3, #1
 8017e84:	4413      	add	r3, r2
 8017e86:	00db      	lsls	r3, r3, #3
 8017e88:	440b      	add	r3, r1
 8017e8a:	3314      	adds	r3, #20
 8017e8c:	781b      	ldrb	r3, [r3, #0]
 8017e8e:	2b01      	cmp	r3, #1
 8017e90:	d923      	bls.n	8017eda <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8017e92:	7dfa      	ldrb	r2, [r7, #23]
 8017e94:	4926      	ldr	r1, [pc, #152]	; (8017f30 <etharp_output+0x200>)
 8017e96:	4613      	mov	r3, r2
 8017e98:	005b      	lsls	r3, r3, #1
 8017e9a:	4413      	add	r3, r2
 8017e9c:	00db      	lsls	r3, r3, #3
 8017e9e:	440b      	add	r3, r1
 8017ea0:	3308      	adds	r3, #8
 8017ea2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017ea4:	68fa      	ldr	r2, [r7, #12]
 8017ea6:	429a      	cmp	r2, r3
 8017ea8:	d117      	bne.n	8017eda <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017eaa:	69bb      	ldr	r3, [r7, #24]
 8017eac:	6819      	ldr	r1, [r3, #0]
 8017eae:	7dfa      	ldrb	r2, [r7, #23]
 8017eb0:	481f      	ldr	r0, [pc, #124]	; (8017f30 <etharp_output+0x200>)
 8017eb2:	4613      	mov	r3, r2
 8017eb4:	005b      	lsls	r3, r3, #1
 8017eb6:	4413      	add	r3, r2
 8017eb8:	00db      	lsls	r3, r3, #3
 8017eba:	4403      	add	r3, r0
 8017ebc:	3304      	adds	r3, #4
 8017ebe:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017ec0:	4299      	cmp	r1, r3
 8017ec2:	d10a      	bne.n	8017eda <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017ec4:	4a19      	ldr	r2, [pc, #100]	; (8017f2c <etharp_output+0x1fc>)
 8017ec6:	7dfb      	ldrb	r3, [r7, #23]
 8017ec8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017eca:	7dfb      	ldrb	r3, [r7, #23]
 8017ecc:	461a      	mov	r2, r3
 8017ece:	68b9      	ldr	r1, [r7, #8]
 8017ed0:	68f8      	ldr	r0, [r7, #12]
 8017ed2:	f7ff fe93 	bl	8017bfc <etharp_output_to_arp_index>
 8017ed6:	4603      	mov	r3, r0
 8017ed8:	e018      	b.n	8017f0c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017eda:	7dfb      	ldrb	r3, [r7, #23]
 8017edc:	3301      	adds	r3, #1
 8017ede:	75fb      	strb	r3, [r7, #23]
 8017ee0:	7dfb      	ldrb	r3, [r7, #23]
 8017ee2:	2b09      	cmp	r3, #9
 8017ee4:	d9ca      	bls.n	8017e7c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8017ee6:	68ba      	ldr	r2, [r7, #8]
 8017ee8:	69b9      	ldr	r1, [r7, #24]
 8017eea:	68f8      	ldr	r0, [r7, #12]
 8017eec:	f000 f822 	bl	8017f34 <etharp_query>
 8017ef0:	4603      	mov	r3, r0
 8017ef2:	e00b      	b.n	8017f0c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017ef4:	68fb      	ldr	r3, [r7, #12]
 8017ef6:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8017efa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017efe:	9300      	str	r3, [sp, #0]
 8017f00:	69fb      	ldr	r3, [r7, #28]
 8017f02:	68b9      	ldr	r1, [r7, #8]
 8017f04:	68f8      	ldr	r0, [r7, #12]
 8017f06:	f001 fd39 	bl	801997c <ethernet_output>
 8017f0a:	4603      	mov	r3, r0
}
 8017f0c:	4618      	mov	r0, r3
 8017f0e:	3720      	adds	r7, #32
 8017f10:	46bd      	mov	sp, r7
 8017f12:	bd80      	pop	{r7, pc}
 8017f14:	0802270c 	.word	0x0802270c
 8017f18:	0802285c 	.word	0x0802285c
 8017f1c:	08022784 	.word	0x08022784
 8017f20:	080228ac 	.word	0x080228ac
 8017f24:	0802284c 	.word	0x0802284c
 8017f28:	08024700 	.word	0x08024700
 8017f2c:	200009c4 	.word	0x200009c4
 8017f30:	200008d4 	.word	0x200008d4

08017f34 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017f34:	b580      	push	{r7, lr}
 8017f36:	b08c      	sub	sp, #48	; 0x30
 8017f38:	af02      	add	r7, sp, #8
 8017f3a:	60f8      	str	r0, [r7, #12]
 8017f3c:	60b9      	str	r1, [r7, #8]
 8017f3e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	3322      	adds	r3, #34	; 0x22
 8017f44:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8017f46:	23ff      	movs	r3, #255	; 0xff
 8017f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8017f4c:	2300      	movs	r3, #0
 8017f4e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017f50:	68bb      	ldr	r3, [r7, #8]
 8017f52:	681b      	ldr	r3, [r3, #0]
 8017f54:	68f9      	ldr	r1, [r7, #12]
 8017f56:	4618      	mov	r0, r3
 8017f58:	f000 fe0c 	bl	8018b74 <ip4_addr_isbroadcast_u32>
 8017f5c:	4603      	mov	r3, r0
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d10c      	bne.n	8017f7c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017f62:	68bb      	ldr	r3, [r7, #8]
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017f6a:	2be0      	cmp	r3, #224	; 0xe0
 8017f6c:	d006      	beq.n	8017f7c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017f6e:	68bb      	ldr	r3, [r7, #8]
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d003      	beq.n	8017f7c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017f74:	68bb      	ldr	r3, [r7, #8]
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d102      	bne.n	8017f82 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017f7c:	f06f 030f 	mvn.w	r3, #15
 8017f80:	e102      	b.n	8018188 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8017f82:	68fa      	ldr	r2, [r7, #12]
 8017f84:	2101      	movs	r1, #1
 8017f86:	68b8      	ldr	r0, [r7, #8]
 8017f88:	f7ff fb60 	bl	801764c <etharp_find_entry>
 8017f8c:	4603      	mov	r3, r0
 8017f8e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017f90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	da02      	bge.n	8017f9e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017f98:	8a7b      	ldrh	r3, [r7, #18]
 8017f9a:	b25b      	sxtb	r3, r3
 8017f9c:	e0f4      	b.n	8018188 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017f9e:	8a7b      	ldrh	r3, [r7, #18]
 8017fa0:	2b7e      	cmp	r3, #126	; 0x7e
 8017fa2:	d906      	bls.n	8017fb2 <etharp_query+0x7e>
 8017fa4:	4b7a      	ldr	r3, [pc, #488]	; (8018190 <etharp_query+0x25c>)
 8017fa6:	f240 32c1 	movw	r2, #961	; 0x3c1
 8017faa:	497a      	ldr	r1, [pc, #488]	; (8018194 <etharp_query+0x260>)
 8017fac:	487a      	ldr	r0, [pc, #488]	; (8018198 <etharp_query+0x264>)
 8017fae:	f002 ff1b 	bl	801ade8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8017fb2:	8a7b      	ldrh	r3, [r7, #18]
 8017fb4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8017fb6:	7c7a      	ldrb	r2, [r7, #17]
 8017fb8:	4978      	ldr	r1, [pc, #480]	; (801819c <etharp_query+0x268>)
 8017fba:	4613      	mov	r3, r2
 8017fbc:	005b      	lsls	r3, r3, #1
 8017fbe:	4413      	add	r3, r2
 8017fc0:	00db      	lsls	r3, r3, #3
 8017fc2:	440b      	add	r3, r1
 8017fc4:	3314      	adds	r3, #20
 8017fc6:	781b      	ldrb	r3, [r3, #0]
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d115      	bne.n	8017ff8 <etharp_query+0xc4>
    is_new_entry = 1;
 8017fcc:	2301      	movs	r3, #1
 8017fce:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017fd0:	7c7a      	ldrb	r2, [r7, #17]
 8017fd2:	4972      	ldr	r1, [pc, #456]	; (801819c <etharp_query+0x268>)
 8017fd4:	4613      	mov	r3, r2
 8017fd6:	005b      	lsls	r3, r3, #1
 8017fd8:	4413      	add	r3, r2
 8017fda:	00db      	lsls	r3, r3, #3
 8017fdc:	440b      	add	r3, r1
 8017fde:	3314      	adds	r3, #20
 8017fe0:	2201      	movs	r2, #1
 8017fe2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017fe4:	7c7a      	ldrb	r2, [r7, #17]
 8017fe6:	496d      	ldr	r1, [pc, #436]	; (801819c <etharp_query+0x268>)
 8017fe8:	4613      	mov	r3, r2
 8017fea:	005b      	lsls	r3, r3, #1
 8017fec:	4413      	add	r3, r2
 8017fee:	00db      	lsls	r3, r3, #3
 8017ff0:	440b      	add	r3, r1
 8017ff2:	3308      	adds	r3, #8
 8017ff4:	68fa      	ldr	r2, [r7, #12]
 8017ff6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017ff8:	7c7a      	ldrb	r2, [r7, #17]
 8017ffa:	4968      	ldr	r1, [pc, #416]	; (801819c <etharp_query+0x268>)
 8017ffc:	4613      	mov	r3, r2
 8017ffe:	005b      	lsls	r3, r3, #1
 8018000:	4413      	add	r3, r2
 8018002:	00db      	lsls	r3, r3, #3
 8018004:	440b      	add	r3, r1
 8018006:	3314      	adds	r3, #20
 8018008:	781b      	ldrb	r3, [r3, #0]
 801800a:	2b01      	cmp	r3, #1
 801800c:	d011      	beq.n	8018032 <etharp_query+0xfe>
 801800e:	7c7a      	ldrb	r2, [r7, #17]
 8018010:	4962      	ldr	r1, [pc, #392]	; (801819c <etharp_query+0x268>)
 8018012:	4613      	mov	r3, r2
 8018014:	005b      	lsls	r3, r3, #1
 8018016:	4413      	add	r3, r2
 8018018:	00db      	lsls	r3, r3, #3
 801801a:	440b      	add	r3, r1
 801801c:	3314      	adds	r3, #20
 801801e:	781b      	ldrb	r3, [r3, #0]
 8018020:	2b01      	cmp	r3, #1
 8018022:	d806      	bhi.n	8018032 <etharp_query+0xfe>
 8018024:	4b5a      	ldr	r3, [pc, #360]	; (8018190 <etharp_query+0x25c>)
 8018026:	f240 32cf 	movw	r2, #975	; 0x3cf
 801802a:	495d      	ldr	r1, [pc, #372]	; (80181a0 <etharp_query+0x26c>)
 801802c:	485a      	ldr	r0, [pc, #360]	; (8018198 <etharp_query+0x264>)
 801802e:	f002 fedb 	bl	801ade8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018032:	6a3b      	ldr	r3, [r7, #32]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d102      	bne.n	801803e <etharp_query+0x10a>
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	2b00      	cmp	r3, #0
 801803c:	d10c      	bne.n	8018058 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801803e:	68b9      	ldr	r1, [r7, #8]
 8018040:	68f8      	ldr	r0, [r7, #12]
 8018042:	f000 f963 	bl	801830c <etharp_request>
 8018046:	4603      	mov	r3, r0
 8018048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d102      	bne.n	8018058 <etharp_query+0x124>
      return result;
 8018052:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018056:	e097      	b.n	8018188 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	2b00      	cmp	r3, #0
 801805c:	d106      	bne.n	801806c <etharp_query+0x138>
 801805e:	4b4c      	ldr	r3, [pc, #304]	; (8018190 <etharp_query+0x25c>)
 8018060:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018064:	494f      	ldr	r1, [pc, #316]	; (80181a4 <etharp_query+0x270>)
 8018066:	484c      	ldr	r0, [pc, #304]	; (8018198 <etharp_query+0x264>)
 8018068:	f002 febe 	bl	801ade8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801806c:	7c7a      	ldrb	r2, [r7, #17]
 801806e:	494b      	ldr	r1, [pc, #300]	; (801819c <etharp_query+0x268>)
 8018070:	4613      	mov	r3, r2
 8018072:	005b      	lsls	r3, r3, #1
 8018074:	4413      	add	r3, r2
 8018076:	00db      	lsls	r3, r3, #3
 8018078:	440b      	add	r3, r1
 801807a:	3314      	adds	r3, #20
 801807c:	781b      	ldrb	r3, [r3, #0]
 801807e:	2b01      	cmp	r3, #1
 8018080:	d918      	bls.n	80180b4 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018082:	4a49      	ldr	r2, [pc, #292]	; (80181a8 <etharp_query+0x274>)
 8018084:	7c7b      	ldrb	r3, [r7, #17]
 8018086:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018088:	7c7a      	ldrb	r2, [r7, #17]
 801808a:	4613      	mov	r3, r2
 801808c:	005b      	lsls	r3, r3, #1
 801808e:	4413      	add	r3, r2
 8018090:	00db      	lsls	r3, r3, #3
 8018092:	3308      	adds	r3, #8
 8018094:	4a41      	ldr	r2, [pc, #260]	; (801819c <etharp_query+0x268>)
 8018096:	4413      	add	r3, r2
 8018098:	1d1a      	adds	r2, r3, #4
 801809a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801809e:	9300      	str	r3, [sp, #0]
 80180a0:	4613      	mov	r3, r2
 80180a2:	697a      	ldr	r2, [r7, #20]
 80180a4:	6879      	ldr	r1, [r7, #4]
 80180a6:	68f8      	ldr	r0, [r7, #12]
 80180a8:	f001 fc68 	bl	801997c <ethernet_output>
 80180ac:	4603      	mov	r3, r0
 80180ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80180b2:	e067      	b.n	8018184 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80180b4:	7c7a      	ldrb	r2, [r7, #17]
 80180b6:	4939      	ldr	r1, [pc, #228]	; (801819c <etharp_query+0x268>)
 80180b8:	4613      	mov	r3, r2
 80180ba:	005b      	lsls	r3, r3, #1
 80180bc:	4413      	add	r3, r2
 80180be:	00db      	lsls	r3, r3, #3
 80180c0:	440b      	add	r3, r1
 80180c2:	3314      	adds	r3, #20
 80180c4:	781b      	ldrb	r3, [r3, #0]
 80180c6:	2b01      	cmp	r3, #1
 80180c8:	d15c      	bne.n	8018184 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80180ca:	2300      	movs	r3, #0
 80180cc:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	61fb      	str	r3, [r7, #28]
    while (p) {
 80180d2:	e01c      	b.n	801810e <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80180d4:	69fb      	ldr	r3, [r7, #28]
 80180d6:	895a      	ldrh	r2, [r3, #10]
 80180d8:	69fb      	ldr	r3, [r7, #28]
 80180da:	891b      	ldrh	r3, [r3, #8]
 80180dc:	429a      	cmp	r2, r3
 80180de:	d10a      	bne.n	80180f6 <etharp_query+0x1c2>
 80180e0:	69fb      	ldr	r3, [r7, #28]
 80180e2:	681b      	ldr	r3, [r3, #0]
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d006      	beq.n	80180f6 <etharp_query+0x1c2>
 80180e8:	4b29      	ldr	r3, [pc, #164]	; (8018190 <etharp_query+0x25c>)
 80180ea:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80180ee:	492f      	ldr	r1, [pc, #188]	; (80181ac <etharp_query+0x278>)
 80180f0:	4829      	ldr	r0, [pc, #164]	; (8018198 <etharp_query+0x264>)
 80180f2:	f002 fe79 	bl	801ade8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80180f6:	69fb      	ldr	r3, [r7, #28]
 80180f8:	7b1b      	ldrb	r3, [r3, #12]
 80180fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d002      	beq.n	8018108 <etharp_query+0x1d4>
        copy_needed = 1;
 8018102:	2301      	movs	r3, #1
 8018104:	61bb      	str	r3, [r7, #24]
        break;
 8018106:	e005      	b.n	8018114 <etharp_query+0x1e0>
      }
      p = p->next;
 8018108:	69fb      	ldr	r3, [r7, #28]
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801810e:	69fb      	ldr	r3, [r7, #28]
 8018110:	2b00      	cmp	r3, #0
 8018112:	d1df      	bne.n	80180d4 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8018114:	69bb      	ldr	r3, [r7, #24]
 8018116:	2b00      	cmp	r3, #0
 8018118:	d007      	beq.n	801812a <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801811a:	687a      	ldr	r2, [r7, #4]
 801811c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018120:	200e      	movs	r0, #14
 8018122:	f7f8 fa7b 	bl	801061c <pbuf_clone>
 8018126:	61f8      	str	r0, [r7, #28]
 8018128:	e004      	b.n	8018134 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801812e:	69f8      	ldr	r0, [r7, #28]
 8018130:	f7f8 f8a2 	bl	8010278 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018134:	69fb      	ldr	r3, [r7, #28]
 8018136:	2b00      	cmp	r3, #0
 8018138:	d021      	beq.n	801817e <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801813a:	7c7a      	ldrb	r2, [r7, #17]
 801813c:	4917      	ldr	r1, [pc, #92]	; (801819c <etharp_query+0x268>)
 801813e:	4613      	mov	r3, r2
 8018140:	005b      	lsls	r3, r3, #1
 8018142:	4413      	add	r3, r2
 8018144:	00db      	lsls	r3, r3, #3
 8018146:	440b      	add	r3, r1
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	2b00      	cmp	r3, #0
 801814c:	d00a      	beq.n	8018164 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801814e:	7c7a      	ldrb	r2, [r7, #17]
 8018150:	4912      	ldr	r1, [pc, #72]	; (801819c <etharp_query+0x268>)
 8018152:	4613      	mov	r3, r2
 8018154:	005b      	lsls	r3, r3, #1
 8018156:	4413      	add	r3, r2
 8018158:	00db      	lsls	r3, r3, #3
 801815a:	440b      	add	r3, r1
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	4618      	mov	r0, r3
 8018160:	f7f7 ffe4 	bl	801012c <pbuf_free>
      }
      arp_table[i].q = p;
 8018164:	7c7a      	ldrb	r2, [r7, #17]
 8018166:	490d      	ldr	r1, [pc, #52]	; (801819c <etharp_query+0x268>)
 8018168:	4613      	mov	r3, r2
 801816a:	005b      	lsls	r3, r3, #1
 801816c:	4413      	add	r3, r2
 801816e:	00db      	lsls	r3, r3, #3
 8018170:	440b      	add	r3, r1
 8018172:	69fa      	ldr	r2, [r7, #28]
 8018174:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018176:	2300      	movs	r3, #0
 8018178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801817c:	e002      	b.n	8018184 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801817e:	23ff      	movs	r3, #255	; 0xff
 8018180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8018184:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8018188:	4618      	mov	r0, r3
 801818a:	3728      	adds	r7, #40	; 0x28
 801818c:	46bd      	mov	sp, r7
 801818e:	bd80      	pop	{r7, pc}
 8018190:	0802270c 	.word	0x0802270c
 8018194:	080228b8 	.word	0x080228b8
 8018198:	08022784 	.word	0x08022784
 801819c:	200008d4 	.word	0x200008d4
 80181a0:	080228c8 	.word	0x080228c8
 80181a4:	080228ac 	.word	0x080228ac
 80181a8:	200009c4 	.word	0x200009c4
 80181ac:	080228f0 	.word	0x080228f0

080181b0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80181b0:	b580      	push	{r7, lr}
 80181b2:	b08a      	sub	sp, #40	; 0x28
 80181b4:	af02      	add	r7, sp, #8
 80181b6:	60f8      	str	r0, [r7, #12]
 80181b8:	60b9      	str	r1, [r7, #8]
 80181ba:	607a      	str	r2, [r7, #4]
 80181bc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80181be:	2300      	movs	r3, #0
 80181c0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80181c2:	68fb      	ldr	r3, [r7, #12]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d106      	bne.n	80181d6 <etharp_raw+0x26>
 80181c8:	4b3a      	ldr	r3, [pc, #232]	; (80182b4 <etharp_raw+0x104>)
 80181ca:	f240 4257 	movw	r2, #1111	; 0x457
 80181ce:	493a      	ldr	r1, [pc, #232]	; (80182b8 <etharp_raw+0x108>)
 80181d0:	483a      	ldr	r0, [pc, #232]	; (80182bc <etharp_raw+0x10c>)
 80181d2:	f002 fe09 	bl	801ade8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80181d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80181da:	211c      	movs	r1, #28
 80181dc:	200e      	movs	r0, #14
 80181de:	f7f7 fcc5 	bl	800fb6c <pbuf_alloc>
 80181e2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80181e4:	69bb      	ldr	r3, [r7, #24]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d102      	bne.n	80181f0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80181ea:	f04f 33ff 	mov.w	r3, #4294967295
 80181ee:	e05d      	b.n	80182ac <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80181f0:	69bb      	ldr	r3, [r7, #24]
 80181f2:	895b      	ldrh	r3, [r3, #10]
 80181f4:	2b1b      	cmp	r3, #27
 80181f6:	d806      	bhi.n	8018206 <etharp_raw+0x56>
 80181f8:	4b2e      	ldr	r3, [pc, #184]	; (80182b4 <etharp_raw+0x104>)
 80181fa:	f240 4263 	movw	r2, #1123	; 0x463
 80181fe:	4930      	ldr	r1, [pc, #192]	; (80182c0 <etharp_raw+0x110>)
 8018200:	482e      	ldr	r0, [pc, #184]	; (80182bc <etharp_raw+0x10c>)
 8018202:	f002 fdf1 	bl	801ade8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018206:	69bb      	ldr	r3, [r7, #24]
 8018208:	685b      	ldr	r3, [r3, #4]
 801820a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801820c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801820e:	4618      	mov	r0, r3
 8018210:	f7f6 fc5c 	bl	800eacc <lwip_htons>
 8018214:	4603      	mov	r3, r0
 8018216:	461a      	mov	r2, r3
 8018218:	697b      	ldr	r3, [r7, #20]
 801821a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801821c:	68fb      	ldr	r3, [r7, #12]
 801821e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018222:	2b06      	cmp	r3, #6
 8018224:	d006      	beq.n	8018234 <etharp_raw+0x84>
 8018226:	4b23      	ldr	r3, [pc, #140]	; (80182b4 <etharp_raw+0x104>)
 8018228:	f240 426a 	movw	r2, #1130	; 0x46a
 801822c:	4925      	ldr	r1, [pc, #148]	; (80182c4 <etharp_raw+0x114>)
 801822e:	4823      	ldr	r0, [pc, #140]	; (80182bc <etharp_raw+0x10c>)
 8018230:	f002 fdda 	bl	801ade8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018234:	697b      	ldr	r3, [r7, #20]
 8018236:	3308      	adds	r3, #8
 8018238:	2206      	movs	r2, #6
 801823a:	6839      	ldr	r1, [r7, #0]
 801823c:	4618      	mov	r0, r3
 801823e:	f001 feea 	bl	801a016 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018242:	697b      	ldr	r3, [r7, #20]
 8018244:	3312      	adds	r3, #18
 8018246:	2206      	movs	r2, #6
 8018248:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801824a:	4618      	mov	r0, r3
 801824c:	f001 fee3 	bl	801a016 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018250:	697b      	ldr	r3, [r7, #20]
 8018252:	330e      	adds	r3, #14
 8018254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018256:	6812      	ldr	r2, [r2, #0]
 8018258:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801825a:	697b      	ldr	r3, [r7, #20]
 801825c:	3318      	adds	r3, #24
 801825e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018260:	6812      	ldr	r2, [r2, #0]
 8018262:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018264:	697b      	ldr	r3, [r7, #20]
 8018266:	2200      	movs	r2, #0
 8018268:	701a      	strb	r2, [r3, #0]
 801826a:	2200      	movs	r2, #0
 801826c:	f042 0201 	orr.w	r2, r2, #1
 8018270:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8018272:	697b      	ldr	r3, [r7, #20]
 8018274:	2200      	movs	r2, #0
 8018276:	f042 0208 	orr.w	r2, r2, #8
 801827a:	709a      	strb	r2, [r3, #2]
 801827c:	2200      	movs	r2, #0
 801827e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018280:	697b      	ldr	r3, [r7, #20]
 8018282:	2206      	movs	r2, #6
 8018284:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8018286:	697b      	ldr	r3, [r7, #20]
 8018288:	2204      	movs	r2, #4
 801828a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801828c:	f640 0306 	movw	r3, #2054	; 0x806
 8018290:	9300      	str	r3, [sp, #0]
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	68ba      	ldr	r2, [r7, #8]
 8018296:	69b9      	ldr	r1, [r7, #24]
 8018298:	68f8      	ldr	r0, [r7, #12]
 801829a:	f001 fb6f 	bl	801997c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801829e:	69b8      	ldr	r0, [r7, #24]
 80182a0:	f7f7 ff44 	bl	801012c <pbuf_free>
  p = NULL;
 80182a4:	2300      	movs	r3, #0
 80182a6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80182a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80182ac:	4618      	mov	r0, r3
 80182ae:	3720      	adds	r7, #32
 80182b0:	46bd      	mov	sp, r7
 80182b2:	bd80      	pop	{r7, pc}
 80182b4:	0802270c 	.word	0x0802270c
 80182b8:	0802285c 	.word	0x0802285c
 80182bc:	08022784 	.word	0x08022784
 80182c0:	0802290c 	.word	0x0802290c
 80182c4:	08022940 	.word	0x08022940

080182c8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80182c8:	b580      	push	{r7, lr}
 80182ca:	b088      	sub	sp, #32
 80182cc:	af04      	add	r7, sp, #16
 80182ce:	60f8      	str	r0, [r7, #12]
 80182d0:	60b9      	str	r1, [r7, #8]
 80182d2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80182d4:	68fb      	ldr	r3, [r7, #12]
 80182d6:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80182da:	68fb      	ldr	r3, [r7, #12]
 80182dc:	f103 0022 	add.w	r0, r3, #34	; 0x22
 80182e0:	68fb      	ldr	r3, [r7, #12]
 80182e2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80182e4:	2201      	movs	r2, #1
 80182e6:	9203      	str	r2, [sp, #12]
 80182e8:	68ba      	ldr	r2, [r7, #8]
 80182ea:	9202      	str	r2, [sp, #8]
 80182ec:	4a06      	ldr	r2, [pc, #24]	; (8018308 <etharp_request_dst+0x40>)
 80182ee:	9201      	str	r2, [sp, #4]
 80182f0:	9300      	str	r3, [sp, #0]
 80182f2:	4603      	mov	r3, r0
 80182f4:	687a      	ldr	r2, [r7, #4]
 80182f6:	68f8      	ldr	r0, [r7, #12]
 80182f8:	f7ff ff5a 	bl	80181b0 <etharp_raw>
 80182fc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80182fe:	4618      	mov	r0, r3
 8018300:	3710      	adds	r7, #16
 8018302:	46bd      	mov	sp, r7
 8018304:	bd80      	pop	{r7, pc}
 8018306:	bf00      	nop
 8018308:	08024708 	.word	0x08024708

0801830c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801830c:	b580      	push	{r7, lr}
 801830e:	b082      	sub	sp, #8
 8018310:	af00      	add	r7, sp, #0
 8018312:	6078      	str	r0, [r7, #4]
 8018314:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8018316:	4a05      	ldr	r2, [pc, #20]	; (801832c <etharp_request+0x20>)
 8018318:	6839      	ldr	r1, [r7, #0]
 801831a:	6878      	ldr	r0, [r7, #4]
 801831c:	f7ff ffd4 	bl	80182c8 <etharp_request_dst>
 8018320:	4603      	mov	r3, r0
}
 8018322:	4618      	mov	r0, r3
 8018324:	3708      	adds	r7, #8
 8018326:	46bd      	mov	sp, r7
 8018328:	bd80      	pop	{r7, pc}
 801832a:	bf00      	nop
 801832c:	08024700 	.word	0x08024700

08018330 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018330:	b580      	push	{r7, lr}
 8018332:	b08e      	sub	sp, #56	; 0x38
 8018334:	af04      	add	r7, sp, #16
 8018336:	6078      	str	r0, [r7, #4]
 8018338:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801833a:	4b79      	ldr	r3, [pc, #484]	; (8018520 <icmp_input+0x1f0>)
 801833c:	689b      	ldr	r3, [r3, #8]
 801833e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018342:	781b      	ldrb	r3, [r3, #0]
 8018344:	f003 030f 	and.w	r3, r3, #15
 8018348:	b2db      	uxtb	r3, r3
 801834a:	009b      	lsls	r3, r3, #2
 801834c:	b2db      	uxtb	r3, r3
 801834e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8018350:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018352:	2b13      	cmp	r3, #19
 8018354:	f240 80cd 	bls.w	80184f2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	895b      	ldrh	r3, [r3, #10]
 801835c:	2b03      	cmp	r3, #3
 801835e:	f240 80ca 	bls.w	80184f6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	685b      	ldr	r3, [r3, #4]
 8018366:	781b      	ldrb	r3, [r3, #0]
 8018368:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801836c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018370:	2b00      	cmp	r3, #0
 8018372:	f000 80b7 	beq.w	80184e4 <icmp_input+0x1b4>
 8018376:	2b08      	cmp	r3, #8
 8018378:	f040 80b7 	bne.w	80184ea <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801837c:	4b69      	ldr	r3, [pc, #420]	; (8018524 <icmp_input+0x1f4>)
 801837e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018380:	4b67      	ldr	r3, [pc, #412]	; (8018520 <icmp_input+0x1f0>)
 8018382:	695b      	ldr	r3, [r3, #20]
 8018384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018388:	2be0      	cmp	r3, #224	; 0xe0
 801838a:	f000 80bb 	beq.w	8018504 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801838e:	4b64      	ldr	r3, [pc, #400]	; (8018520 <icmp_input+0x1f0>)
 8018390:	695a      	ldr	r2, [r3, #20]
 8018392:	4b63      	ldr	r3, [pc, #396]	; (8018520 <icmp_input+0x1f0>)
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	4619      	mov	r1, r3
 8018398:	4610      	mov	r0, r2
 801839a:	f000 fbeb 	bl	8018b74 <ip4_addr_isbroadcast_u32>
 801839e:	4603      	mov	r3, r0
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	f040 80b1 	bne.w	8018508 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	891b      	ldrh	r3, [r3, #8]
 80183aa:	2b07      	cmp	r3, #7
 80183ac:	f240 80a5 	bls.w	80184fa <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80183b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80183b2:	330e      	adds	r3, #14
 80183b4:	4619      	mov	r1, r3
 80183b6:	6878      	ldr	r0, [r7, #4]
 80183b8:	f7f7 fe22 	bl	8010000 <pbuf_add_header>
 80183bc:	4603      	mov	r3, r0
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d04b      	beq.n	801845a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	891a      	ldrh	r2, [r3, #8]
 80183c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80183c8:	4413      	add	r3, r2
 80183ca:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	891b      	ldrh	r3, [r3, #8]
 80183d0:	8b7a      	ldrh	r2, [r7, #26]
 80183d2:	429a      	cmp	r2, r3
 80183d4:	f0c0 809a 	bcc.w	801850c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80183d8:	8b7b      	ldrh	r3, [r7, #26]
 80183da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80183de:	4619      	mov	r1, r3
 80183e0:	200e      	movs	r0, #14
 80183e2:	f7f7 fbc3 	bl	800fb6c <pbuf_alloc>
 80183e6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80183e8:	697b      	ldr	r3, [r7, #20]
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	f000 8090 	beq.w	8018510 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80183f0:	697b      	ldr	r3, [r7, #20]
 80183f2:	895b      	ldrh	r3, [r3, #10]
 80183f4:	461a      	mov	r2, r3
 80183f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80183f8:	3308      	adds	r3, #8
 80183fa:	429a      	cmp	r2, r3
 80183fc:	d203      	bcs.n	8018406 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80183fe:	6978      	ldr	r0, [r7, #20]
 8018400:	f7f7 fe94 	bl	801012c <pbuf_free>
          goto icmperr;
 8018404:	e085      	b.n	8018512 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8018406:	697b      	ldr	r3, [r7, #20]
 8018408:	685b      	ldr	r3, [r3, #4]
 801840a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801840c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801840e:	4618      	mov	r0, r3
 8018410:	f001 fe01 	bl	801a016 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8018414:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018416:	4619      	mov	r1, r3
 8018418:	6978      	ldr	r0, [r7, #20]
 801841a:	f7f7 fe01 	bl	8010020 <pbuf_remove_header>
 801841e:	4603      	mov	r3, r0
 8018420:	2b00      	cmp	r3, #0
 8018422:	d009      	beq.n	8018438 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8018424:	4b40      	ldr	r3, [pc, #256]	; (8018528 <icmp_input+0x1f8>)
 8018426:	22b6      	movs	r2, #182	; 0xb6
 8018428:	4940      	ldr	r1, [pc, #256]	; (801852c <icmp_input+0x1fc>)
 801842a:	4841      	ldr	r0, [pc, #260]	; (8018530 <icmp_input+0x200>)
 801842c:	f002 fcdc 	bl	801ade8 <iprintf>
          pbuf_free(r);
 8018430:	6978      	ldr	r0, [r7, #20]
 8018432:	f7f7 fe7b 	bl	801012c <pbuf_free>
          goto icmperr;
 8018436:	e06c      	b.n	8018512 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8018438:	6879      	ldr	r1, [r7, #4]
 801843a:	6978      	ldr	r0, [r7, #20]
 801843c:	f7f7 ffaa 	bl	8010394 <pbuf_copy>
 8018440:	4603      	mov	r3, r0
 8018442:	2b00      	cmp	r3, #0
 8018444:	d003      	beq.n	801844e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8018446:	6978      	ldr	r0, [r7, #20]
 8018448:	f7f7 fe70 	bl	801012c <pbuf_free>
          goto icmperr;
 801844c:	e061      	b.n	8018512 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801844e:	6878      	ldr	r0, [r7, #4]
 8018450:	f7f7 fe6c 	bl	801012c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8018454:	697b      	ldr	r3, [r7, #20]
 8018456:	607b      	str	r3, [r7, #4]
 8018458:	e00f      	b.n	801847a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801845a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801845c:	330e      	adds	r3, #14
 801845e:	4619      	mov	r1, r3
 8018460:	6878      	ldr	r0, [r7, #4]
 8018462:	f7f7 fddd 	bl	8010020 <pbuf_remove_header>
 8018466:	4603      	mov	r3, r0
 8018468:	2b00      	cmp	r3, #0
 801846a:	d006      	beq.n	801847a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801846c:	4b2e      	ldr	r3, [pc, #184]	; (8018528 <icmp_input+0x1f8>)
 801846e:	22c7      	movs	r2, #199	; 0xc7
 8018470:	4930      	ldr	r1, [pc, #192]	; (8018534 <icmp_input+0x204>)
 8018472:	482f      	ldr	r0, [pc, #188]	; (8018530 <icmp_input+0x200>)
 8018474:	f002 fcb8 	bl	801ade8 <iprintf>
          goto icmperr;
 8018478:	e04b      	b.n	8018512 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	685b      	ldr	r3, [r3, #4]
 801847e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8018480:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018482:	4619      	mov	r1, r3
 8018484:	6878      	ldr	r0, [r7, #4]
 8018486:	f7f7 fdbb 	bl	8010000 <pbuf_add_header>
 801848a:	4603      	mov	r3, r0
 801848c:	2b00      	cmp	r3, #0
 801848e:	d12b      	bne.n	80184e8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	685b      	ldr	r3, [r3, #4]
 8018494:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8018496:	69fb      	ldr	r3, [r7, #28]
 8018498:	681a      	ldr	r2, [r3, #0]
 801849a:	68fb      	ldr	r3, [r7, #12]
 801849c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801849e:	4b20      	ldr	r3, [pc, #128]	; (8018520 <icmp_input+0x1f0>)
 80184a0:	691a      	ldr	r2, [r3, #16]
 80184a2:	68fb      	ldr	r3, [r7, #12]
 80184a4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80184a6:	693b      	ldr	r3, [r7, #16]
 80184a8:	2200      	movs	r2, #0
 80184aa:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80184ac:	693b      	ldr	r3, [r7, #16]
 80184ae:	2200      	movs	r2, #0
 80184b0:	709a      	strb	r2, [r3, #2]
 80184b2:	2200      	movs	r2, #0
 80184b4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80184b6:	68fb      	ldr	r3, [r7, #12]
 80184b8:	22ff      	movs	r2, #255	; 0xff
 80184ba:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80184bc:	68fb      	ldr	r3, [r7, #12]
 80184be:	2200      	movs	r2, #0
 80184c0:	729a      	strb	r2, [r3, #10]
 80184c2:	2200      	movs	r2, #0
 80184c4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80184c6:	683b      	ldr	r3, [r7, #0]
 80184c8:	9302      	str	r3, [sp, #8]
 80184ca:	2301      	movs	r3, #1
 80184cc:	9301      	str	r3, [sp, #4]
 80184ce:	2300      	movs	r3, #0
 80184d0:	9300      	str	r3, [sp, #0]
 80184d2:	23ff      	movs	r3, #255	; 0xff
 80184d4:	2200      	movs	r2, #0
 80184d6:	69f9      	ldr	r1, [r7, #28]
 80184d8:	6878      	ldr	r0, [r7, #4]
 80184da:	f000 fa73 	bl	80189c4 <ip4_output_if>
 80184de:	4603      	mov	r3, r0
 80184e0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80184e2:	e001      	b.n	80184e8 <icmp_input+0x1b8>
      break;
 80184e4:	bf00      	nop
 80184e6:	e000      	b.n	80184ea <icmp_input+0x1ba>
      break;
 80184e8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80184ea:	6878      	ldr	r0, [r7, #4]
 80184ec:	f7f7 fe1e 	bl	801012c <pbuf_free>
  return;
 80184f0:	e013      	b.n	801851a <icmp_input+0x1ea>
    goto lenerr;
 80184f2:	bf00      	nop
 80184f4:	e002      	b.n	80184fc <icmp_input+0x1cc>
    goto lenerr;
 80184f6:	bf00      	nop
 80184f8:	e000      	b.n	80184fc <icmp_input+0x1cc>
        goto lenerr;
 80184fa:	bf00      	nop
lenerr:
  pbuf_free(p);
 80184fc:	6878      	ldr	r0, [r7, #4]
 80184fe:	f7f7 fe15 	bl	801012c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018502:	e00a      	b.n	801851a <icmp_input+0x1ea>
        goto icmperr;
 8018504:	bf00      	nop
 8018506:	e004      	b.n	8018512 <icmp_input+0x1e2>
        goto icmperr;
 8018508:	bf00      	nop
 801850a:	e002      	b.n	8018512 <icmp_input+0x1e2>
          goto icmperr;
 801850c:	bf00      	nop
 801850e:	e000      	b.n	8018512 <icmp_input+0x1e2>
          goto icmperr;
 8018510:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8018512:	6878      	ldr	r0, [r7, #4]
 8018514:	f7f7 fe0a 	bl	801012c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018518:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801851a:	3728      	adds	r7, #40	; 0x28
 801851c:	46bd      	mov	sp, r7
 801851e:	bd80      	pop	{r7, pc}
 8018520:	20004588 	.word	0x20004588
 8018524:	2000459c 	.word	0x2000459c
 8018528:	08022984 	.word	0x08022984
 801852c:	080229bc 	.word	0x080229bc
 8018530:	080229f4 	.word	0x080229f4
 8018534:	08022a1c 	.word	0x08022a1c

08018538 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8018538:	b580      	push	{r7, lr}
 801853a:	b082      	sub	sp, #8
 801853c:	af00      	add	r7, sp, #0
 801853e:	6078      	str	r0, [r7, #4]
 8018540:	460b      	mov	r3, r1
 8018542:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8018544:	78fb      	ldrb	r3, [r7, #3]
 8018546:	461a      	mov	r2, r3
 8018548:	2103      	movs	r1, #3
 801854a:	6878      	ldr	r0, [r7, #4]
 801854c:	f000 f814 	bl	8018578 <icmp_send_response>
}
 8018550:	bf00      	nop
 8018552:	3708      	adds	r7, #8
 8018554:	46bd      	mov	sp, r7
 8018556:	bd80      	pop	{r7, pc}

08018558 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8018558:	b580      	push	{r7, lr}
 801855a:	b082      	sub	sp, #8
 801855c:	af00      	add	r7, sp, #0
 801855e:	6078      	str	r0, [r7, #4]
 8018560:	460b      	mov	r3, r1
 8018562:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8018564:	78fb      	ldrb	r3, [r7, #3]
 8018566:	461a      	mov	r2, r3
 8018568:	210b      	movs	r1, #11
 801856a:	6878      	ldr	r0, [r7, #4]
 801856c:	f000 f804 	bl	8018578 <icmp_send_response>
}
 8018570:	bf00      	nop
 8018572:	3708      	adds	r7, #8
 8018574:	46bd      	mov	sp, r7
 8018576:	bd80      	pop	{r7, pc}

08018578 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8018578:	b580      	push	{r7, lr}
 801857a:	b08c      	sub	sp, #48	; 0x30
 801857c:	af04      	add	r7, sp, #16
 801857e:	6078      	str	r0, [r7, #4]
 8018580:	460b      	mov	r3, r1
 8018582:	70fb      	strb	r3, [r7, #3]
 8018584:	4613      	mov	r3, r2
 8018586:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8018588:	f44f 7220 	mov.w	r2, #640	; 0x280
 801858c:	2124      	movs	r1, #36	; 0x24
 801858e:	2022      	movs	r0, #34	; 0x22
 8018590:	f7f7 faec 	bl	800fb6c <pbuf_alloc>
 8018594:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8018596:	69fb      	ldr	r3, [r7, #28]
 8018598:	2b00      	cmp	r3, #0
 801859a:	d04c      	beq.n	8018636 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801859c:	69fb      	ldr	r3, [r7, #28]
 801859e:	895b      	ldrh	r3, [r3, #10]
 80185a0:	2b23      	cmp	r3, #35	; 0x23
 80185a2:	d806      	bhi.n	80185b2 <icmp_send_response+0x3a>
 80185a4:	4b26      	ldr	r3, [pc, #152]	; (8018640 <icmp_send_response+0xc8>)
 80185a6:	f240 1269 	movw	r2, #361	; 0x169
 80185aa:	4926      	ldr	r1, [pc, #152]	; (8018644 <icmp_send_response+0xcc>)
 80185ac:	4826      	ldr	r0, [pc, #152]	; (8018648 <icmp_send_response+0xd0>)
 80185ae:	f002 fc1b 	bl	801ade8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	685b      	ldr	r3, [r3, #4]
 80185b6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80185b8:	69fb      	ldr	r3, [r7, #28]
 80185ba:	685b      	ldr	r3, [r3, #4]
 80185bc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80185be:	697b      	ldr	r3, [r7, #20]
 80185c0:	78fa      	ldrb	r2, [r7, #3]
 80185c2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80185c4:	697b      	ldr	r3, [r7, #20]
 80185c6:	78ba      	ldrb	r2, [r7, #2]
 80185c8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80185ca:	697b      	ldr	r3, [r7, #20]
 80185cc:	2200      	movs	r2, #0
 80185ce:	711a      	strb	r2, [r3, #4]
 80185d0:	2200      	movs	r2, #0
 80185d2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80185d4:	697b      	ldr	r3, [r7, #20]
 80185d6:	2200      	movs	r2, #0
 80185d8:	719a      	strb	r2, [r3, #6]
 80185da:	2200      	movs	r2, #0
 80185dc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80185de:	69fb      	ldr	r3, [r7, #28]
 80185e0:	685b      	ldr	r3, [r3, #4]
 80185e2:	f103 0008 	add.w	r0, r3, #8
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	685b      	ldr	r3, [r3, #4]
 80185ea:	221c      	movs	r2, #28
 80185ec:	4619      	mov	r1, r3
 80185ee:	f001 fd12 	bl	801a016 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80185f2:	69bb      	ldr	r3, [r7, #24]
 80185f4:	68db      	ldr	r3, [r3, #12]
 80185f6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80185f8:	f107 030c 	add.w	r3, r7, #12
 80185fc:	4618      	mov	r0, r3
 80185fe:	f000 f825 	bl	801864c <ip4_route>
 8018602:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8018604:	693b      	ldr	r3, [r7, #16]
 8018606:	2b00      	cmp	r3, #0
 8018608:	d011      	beq.n	801862e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801860a:	697b      	ldr	r3, [r7, #20]
 801860c:	2200      	movs	r2, #0
 801860e:	709a      	strb	r2, [r3, #2]
 8018610:	2200      	movs	r2, #0
 8018612:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8018614:	f107 020c 	add.w	r2, r7, #12
 8018618:	693b      	ldr	r3, [r7, #16]
 801861a:	9302      	str	r3, [sp, #8]
 801861c:	2301      	movs	r3, #1
 801861e:	9301      	str	r3, [sp, #4]
 8018620:	2300      	movs	r3, #0
 8018622:	9300      	str	r3, [sp, #0]
 8018624:	23ff      	movs	r3, #255	; 0xff
 8018626:	2100      	movs	r1, #0
 8018628:	69f8      	ldr	r0, [r7, #28]
 801862a:	f000 f9cb 	bl	80189c4 <ip4_output_if>
  }
  pbuf_free(q);
 801862e:	69f8      	ldr	r0, [r7, #28]
 8018630:	f7f7 fd7c 	bl	801012c <pbuf_free>
 8018634:	e000      	b.n	8018638 <icmp_send_response+0xc0>
    return;
 8018636:	bf00      	nop
}
 8018638:	3720      	adds	r7, #32
 801863a:	46bd      	mov	sp, r7
 801863c:	bd80      	pop	{r7, pc}
 801863e:	bf00      	nop
 8018640:	08022984 	.word	0x08022984
 8018644:	08022a50 	.word	0x08022a50
 8018648:	080229f4 	.word	0x080229f4

0801864c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801864c:	b480      	push	{r7}
 801864e:	b085      	sub	sp, #20
 8018650:	af00      	add	r7, sp, #0
 8018652:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8018654:	4b33      	ldr	r3, [pc, #204]	; (8018724 <ip4_route+0xd8>)
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	60fb      	str	r3, [r7, #12]
 801865a:	e036      	b.n	80186ca <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8018662:	f003 0301 	and.w	r3, r3, #1
 8018666:	b2db      	uxtb	r3, r3
 8018668:	2b00      	cmp	r3, #0
 801866a:	d02b      	beq.n	80186c4 <ip4_route+0x78>
 801866c:	68fb      	ldr	r3, [r7, #12]
 801866e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8018672:	089b      	lsrs	r3, r3, #2
 8018674:	f003 0301 	and.w	r3, r3, #1
 8018678:	b2db      	uxtb	r3, r3
 801867a:	2b00      	cmp	r3, #0
 801867c:	d022      	beq.n	80186c4 <ip4_route+0x78>
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	3304      	adds	r3, #4
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	2b00      	cmp	r3, #0
 8018686:	d01d      	beq.n	80186c4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	681a      	ldr	r2, [r3, #0]
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	3304      	adds	r3, #4
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	405a      	eors	r2, r3
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	3308      	adds	r3, #8
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	4013      	ands	r3, r2
 801869c:	2b00      	cmp	r3, #0
 801869e:	d101      	bne.n	80186a4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80186a0:	68fb      	ldr	r3, [r7, #12]
 80186a2:	e038      	b.n	8018716 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80186aa:	f003 0302 	and.w	r3, r3, #2
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d108      	bne.n	80186c4 <ip4_route+0x78>
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	681a      	ldr	r2, [r3, #0]
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	330c      	adds	r3, #12
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	429a      	cmp	r2, r3
 80186be:	d101      	bne.n	80186c4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80186c0:	68fb      	ldr	r3, [r7, #12]
 80186c2:	e028      	b.n	8018716 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	60fb      	str	r3, [r7, #12]
 80186ca:	68fb      	ldr	r3, [r7, #12]
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d1c5      	bne.n	801865c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80186d0:	4b15      	ldr	r3, [pc, #84]	; (8018728 <ip4_route+0xdc>)
 80186d2:	681b      	ldr	r3, [r3, #0]
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d01a      	beq.n	801870e <ip4_route+0xc2>
 80186d8:	4b13      	ldr	r3, [pc, #76]	; (8018728 <ip4_route+0xdc>)
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80186e0:	f003 0301 	and.w	r3, r3, #1
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d012      	beq.n	801870e <ip4_route+0xc2>
 80186e8:	4b0f      	ldr	r3, [pc, #60]	; (8018728 <ip4_route+0xdc>)
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80186f0:	f003 0304 	and.w	r3, r3, #4
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d00a      	beq.n	801870e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80186f8:	4b0b      	ldr	r3, [pc, #44]	; (8018728 <ip4_route+0xdc>)
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	3304      	adds	r3, #4
 80186fe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018700:	2b00      	cmp	r3, #0
 8018702:	d004      	beq.n	801870e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	b2db      	uxtb	r3, r3
 801870a:	2b7f      	cmp	r3, #127	; 0x7f
 801870c:	d101      	bne.n	8018712 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801870e:	2300      	movs	r3, #0
 8018710:	e001      	b.n	8018716 <ip4_route+0xca>
  }

  return netif_default;
 8018712:	4b05      	ldr	r3, [pc, #20]	; (8018728 <ip4_route+0xdc>)
 8018714:	681b      	ldr	r3, [r3, #0]
}
 8018716:	4618      	mov	r0, r3
 8018718:	3714      	adds	r7, #20
 801871a:	46bd      	mov	sp, r7
 801871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018720:	4770      	bx	lr
 8018722:	bf00      	nop
 8018724:	20007c8c 	.word	0x20007c8c
 8018728:	20007c90 	.word	0x20007c90

0801872c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801872c:	b580      	push	{r7, lr}
 801872e:	b082      	sub	sp, #8
 8018730:	af00      	add	r7, sp, #0
 8018732:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801873a:	f003 0301 	and.w	r3, r3, #1
 801873e:	b2db      	uxtb	r3, r3
 8018740:	2b00      	cmp	r3, #0
 8018742:	d016      	beq.n	8018772 <ip4_input_accept+0x46>
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	3304      	adds	r3, #4
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	2b00      	cmp	r3, #0
 801874c:	d011      	beq.n	8018772 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801874e:	4b0b      	ldr	r3, [pc, #44]	; (801877c <ip4_input_accept+0x50>)
 8018750:	695a      	ldr	r2, [r3, #20]
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	3304      	adds	r3, #4
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	429a      	cmp	r2, r3
 801875a:	d008      	beq.n	801876e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801875c:	4b07      	ldr	r3, [pc, #28]	; (801877c <ip4_input_accept+0x50>)
 801875e:	695b      	ldr	r3, [r3, #20]
 8018760:	6879      	ldr	r1, [r7, #4]
 8018762:	4618      	mov	r0, r3
 8018764:	f000 fa06 	bl	8018b74 <ip4_addr_isbroadcast_u32>
 8018768:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801876a:	2b00      	cmp	r3, #0
 801876c:	d001      	beq.n	8018772 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801876e:	2301      	movs	r3, #1
 8018770:	e000      	b.n	8018774 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8018772:	2300      	movs	r3, #0
}
 8018774:	4618      	mov	r0, r3
 8018776:	3708      	adds	r7, #8
 8018778:	46bd      	mov	sp, r7
 801877a:	bd80      	pop	{r7, pc}
 801877c:	20004588 	.word	0x20004588

08018780 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018780:	b580      	push	{r7, lr}
 8018782:	b086      	sub	sp, #24
 8018784:	af00      	add	r7, sp, #0
 8018786:	6078      	str	r0, [r7, #4]
 8018788:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	685b      	ldr	r3, [r3, #4]
 801878e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8018790:	697b      	ldr	r3, [r7, #20]
 8018792:	781b      	ldrb	r3, [r3, #0]
 8018794:	091b      	lsrs	r3, r3, #4
 8018796:	b2db      	uxtb	r3, r3
 8018798:	2b04      	cmp	r3, #4
 801879a:	d004      	beq.n	80187a6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801879c:	6878      	ldr	r0, [r7, #4]
 801879e:	f7f7 fcc5 	bl	801012c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80187a2:	2300      	movs	r3, #0
 80187a4:	e105      	b.n	80189b2 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80187a6:	697b      	ldr	r3, [r7, #20]
 80187a8:	781b      	ldrb	r3, [r3, #0]
 80187aa:	f003 030f 	and.w	r3, r3, #15
 80187ae:	b2db      	uxtb	r3, r3
 80187b0:	009b      	lsls	r3, r3, #2
 80187b2:	b2db      	uxtb	r3, r3
 80187b4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80187b6:	697b      	ldr	r3, [r7, #20]
 80187b8:	885b      	ldrh	r3, [r3, #2]
 80187ba:	b29b      	uxth	r3, r3
 80187bc:	4618      	mov	r0, r3
 80187be:	f7f6 f985 	bl	800eacc <lwip_htons>
 80187c2:	4603      	mov	r3, r0
 80187c4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	891b      	ldrh	r3, [r3, #8]
 80187ca:	89ba      	ldrh	r2, [r7, #12]
 80187cc:	429a      	cmp	r2, r3
 80187ce:	d204      	bcs.n	80187da <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80187d0:	89bb      	ldrh	r3, [r7, #12]
 80187d2:	4619      	mov	r1, r3
 80187d4:	6878      	ldr	r0, [r7, #4]
 80187d6:	f7f7 fb23 	bl	800fe20 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	895b      	ldrh	r3, [r3, #10]
 80187de:	89fa      	ldrh	r2, [r7, #14]
 80187e0:	429a      	cmp	r2, r3
 80187e2:	d807      	bhi.n	80187f4 <ip4_input+0x74>
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	891b      	ldrh	r3, [r3, #8]
 80187e8:	89ba      	ldrh	r2, [r7, #12]
 80187ea:	429a      	cmp	r2, r3
 80187ec:	d802      	bhi.n	80187f4 <ip4_input+0x74>
 80187ee:	89fb      	ldrh	r3, [r7, #14]
 80187f0:	2b13      	cmp	r3, #19
 80187f2:	d804      	bhi.n	80187fe <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80187f4:	6878      	ldr	r0, [r7, #4]
 80187f6:	f7f7 fc99 	bl	801012c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80187fa:	2300      	movs	r3, #0
 80187fc:	e0d9      	b.n	80189b2 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80187fe:	697b      	ldr	r3, [r7, #20]
 8018800:	691b      	ldr	r3, [r3, #16]
 8018802:	4a6e      	ldr	r2, [pc, #440]	; (80189bc <ip4_input+0x23c>)
 8018804:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8018806:	697b      	ldr	r3, [r7, #20]
 8018808:	68db      	ldr	r3, [r3, #12]
 801880a:	4a6c      	ldr	r2, [pc, #432]	; (80189bc <ip4_input+0x23c>)
 801880c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801880e:	4b6b      	ldr	r3, [pc, #428]	; (80189bc <ip4_input+0x23c>)
 8018810:	695b      	ldr	r3, [r3, #20]
 8018812:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018816:	2be0      	cmp	r3, #224	; 0xe0
 8018818:	d112      	bne.n	8018840 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801881a:	683b      	ldr	r3, [r7, #0]
 801881c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8018820:	f003 0301 	and.w	r3, r3, #1
 8018824:	b2db      	uxtb	r3, r3
 8018826:	2b00      	cmp	r3, #0
 8018828:	d007      	beq.n	801883a <ip4_input+0xba>
 801882a:	683b      	ldr	r3, [r7, #0]
 801882c:	3304      	adds	r3, #4
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	2b00      	cmp	r3, #0
 8018832:	d002      	beq.n	801883a <ip4_input+0xba>
      netif = inp;
 8018834:	683b      	ldr	r3, [r7, #0]
 8018836:	613b      	str	r3, [r7, #16]
 8018838:	e02a      	b.n	8018890 <ip4_input+0x110>
    } else {
      netif = NULL;
 801883a:	2300      	movs	r3, #0
 801883c:	613b      	str	r3, [r7, #16]
 801883e:	e027      	b.n	8018890 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8018840:	6838      	ldr	r0, [r7, #0]
 8018842:	f7ff ff73 	bl	801872c <ip4_input_accept>
 8018846:	4603      	mov	r3, r0
 8018848:	2b00      	cmp	r3, #0
 801884a:	d002      	beq.n	8018852 <ip4_input+0xd2>
      netif = inp;
 801884c:	683b      	ldr	r3, [r7, #0]
 801884e:	613b      	str	r3, [r7, #16]
 8018850:	e01e      	b.n	8018890 <ip4_input+0x110>
    } else {
      netif = NULL;
 8018852:	2300      	movs	r3, #0
 8018854:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8018856:	4b59      	ldr	r3, [pc, #356]	; (80189bc <ip4_input+0x23c>)
 8018858:	695b      	ldr	r3, [r3, #20]
 801885a:	b2db      	uxtb	r3, r3
 801885c:	2b7f      	cmp	r3, #127	; 0x7f
 801885e:	d017      	beq.n	8018890 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8018860:	4b57      	ldr	r3, [pc, #348]	; (80189c0 <ip4_input+0x240>)
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	613b      	str	r3, [r7, #16]
 8018866:	e00e      	b.n	8018886 <ip4_input+0x106>
          if (netif == inp) {
 8018868:	693a      	ldr	r2, [r7, #16]
 801886a:	683b      	ldr	r3, [r7, #0]
 801886c:	429a      	cmp	r2, r3
 801886e:	d006      	beq.n	801887e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018870:	6938      	ldr	r0, [r7, #16]
 8018872:	f7ff ff5b 	bl	801872c <ip4_input_accept>
 8018876:	4603      	mov	r3, r0
 8018878:	2b00      	cmp	r3, #0
 801887a:	d108      	bne.n	801888e <ip4_input+0x10e>
 801887c:	e000      	b.n	8018880 <ip4_input+0x100>
            continue;
 801887e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018880:	693b      	ldr	r3, [r7, #16]
 8018882:	681b      	ldr	r3, [r3, #0]
 8018884:	613b      	str	r3, [r7, #16]
 8018886:	693b      	ldr	r3, [r7, #16]
 8018888:	2b00      	cmp	r3, #0
 801888a:	d1ed      	bne.n	8018868 <ip4_input+0xe8>
 801888c:	e000      	b.n	8018890 <ip4_input+0x110>
            break;
 801888e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018890:	4b4a      	ldr	r3, [pc, #296]	; (80189bc <ip4_input+0x23c>)
 8018892:	691b      	ldr	r3, [r3, #16]
 8018894:	6839      	ldr	r1, [r7, #0]
 8018896:	4618      	mov	r0, r3
 8018898:	f000 f96c 	bl	8018b74 <ip4_addr_isbroadcast_u32>
 801889c:	4603      	mov	r3, r0
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d105      	bne.n	80188ae <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80188a2:	4b46      	ldr	r3, [pc, #280]	; (80189bc <ip4_input+0x23c>)
 80188a4:	691b      	ldr	r3, [r3, #16]
 80188a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80188aa:	2be0      	cmp	r3, #224	; 0xe0
 80188ac:	d104      	bne.n	80188b8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80188ae:	6878      	ldr	r0, [r7, #4]
 80188b0:	f7f7 fc3c 	bl	801012c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80188b4:	2300      	movs	r3, #0
 80188b6:	e07c      	b.n	80189b2 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80188b8:	693b      	ldr	r3, [r7, #16]
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d104      	bne.n	80188c8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80188be:	6878      	ldr	r0, [r7, #4]
 80188c0:	f7f7 fc34 	bl	801012c <pbuf_free>
    return ERR_OK;
 80188c4:	2300      	movs	r3, #0
 80188c6:	e074      	b.n	80189b2 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80188c8:	697b      	ldr	r3, [r7, #20]
 80188ca:	88db      	ldrh	r3, [r3, #6]
 80188cc:	b29b      	uxth	r3, r3
 80188ce:	461a      	mov	r2, r3
 80188d0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80188d4:	4013      	ands	r3, r2
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	d00b      	beq.n	80188f2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80188da:	6878      	ldr	r0, [r7, #4]
 80188dc:	f000 fc90 	bl	8019200 <ip4_reass>
 80188e0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d101      	bne.n	80188ec <ip4_input+0x16c>
      return ERR_OK;
 80188e8:	2300      	movs	r3, #0
 80188ea:	e062      	b.n	80189b2 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	685b      	ldr	r3, [r3, #4]
 80188f0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80188f2:	4a32      	ldr	r2, [pc, #200]	; (80189bc <ip4_input+0x23c>)
 80188f4:	693b      	ldr	r3, [r7, #16]
 80188f6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80188f8:	4a30      	ldr	r2, [pc, #192]	; (80189bc <ip4_input+0x23c>)
 80188fa:	683b      	ldr	r3, [r7, #0]
 80188fc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80188fe:	4a2f      	ldr	r2, [pc, #188]	; (80189bc <ip4_input+0x23c>)
 8018900:	697b      	ldr	r3, [r7, #20]
 8018902:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8018904:	697b      	ldr	r3, [r7, #20]
 8018906:	781b      	ldrb	r3, [r3, #0]
 8018908:	f003 030f 	and.w	r3, r3, #15
 801890c:	b2db      	uxtb	r3, r3
 801890e:	009b      	lsls	r3, r3, #2
 8018910:	b2db      	uxtb	r3, r3
 8018912:	b29a      	uxth	r2, r3
 8018914:	4b29      	ldr	r3, [pc, #164]	; (80189bc <ip4_input+0x23c>)
 8018916:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8018918:	89fb      	ldrh	r3, [r7, #14]
 801891a:	4619      	mov	r1, r3
 801891c:	6878      	ldr	r0, [r7, #4]
 801891e:	f7f7 fb7f 	bl	8010020 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018922:	697b      	ldr	r3, [r7, #20]
 8018924:	7a5b      	ldrb	r3, [r3, #9]
 8018926:	2b06      	cmp	r3, #6
 8018928:	d009      	beq.n	801893e <ip4_input+0x1be>
 801892a:	2b11      	cmp	r3, #17
 801892c:	d002      	beq.n	8018934 <ip4_input+0x1b4>
 801892e:	2b01      	cmp	r3, #1
 8018930:	d00a      	beq.n	8018948 <ip4_input+0x1c8>
 8018932:	e00e      	b.n	8018952 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8018934:	6839      	ldr	r1, [r7, #0]
 8018936:	6878      	ldr	r0, [r7, #4]
 8018938:	f7fe f904 	bl	8016b44 <udp_input>
        break;
 801893c:	e026      	b.n	801898c <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801893e:	6839      	ldr	r1, [r7, #0]
 8018940:	6878      	ldr	r0, [r7, #4]
 8018942:	f7f9 fcb1 	bl	80122a8 <tcp_input>
        break;
 8018946:	e021      	b.n	801898c <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018948:	6839      	ldr	r1, [r7, #0]
 801894a:	6878      	ldr	r0, [r7, #4]
 801894c:	f7ff fcf0 	bl	8018330 <icmp_input>
        break;
 8018950:	e01c      	b.n	801898c <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018952:	4b1a      	ldr	r3, [pc, #104]	; (80189bc <ip4_input+0x23c>)
 8018954:	695b      	ldr	r3, [r3, #20]
 8018956:	6939      	ldr	r1, [r7, #16]
 8018958:	4618      	mov	r0, r3
 801895a:	f000 f90b 	bl	8018b74 <ip4_addr_isbroadcast_u32>
 801895e:	4603      	mov	r3, r0
 8018960:	2b00      	cmp	r3, #0
 8018962:	d10f      	bne.n	8018984 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018964:	4b15      	ldr	r3, [pc, #84]	; (80189bc <ip4_input+0x23c>)
 8018966:	695b      	ldr	r3, [r3, #20]
 8018968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801896c:	2be0      	cmp	r3, #224	; 0xe0
 801896e:	d009      	beq.n	8018984 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018970:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018974:	4619      	mov	r1, r3
 8018976:	6878      	ldr	r0, [r7, #4]
 8018978:	f7f7 fbc5 	bl	8010106 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801897c:	2102      	movs	r1, #2
 801897e:	6878      	ldr	r0, [r7, #4]
 8018980:	f7ff fdda 	bl	8018538 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8018984:	6878      	ldr	r0, [r7, #4]
 8018986:	f7f7 fbd1 	bl	801012c <pbuf_free>
        break;
 801898a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801898c:	4b0b      	ldr	r3, [pc, #44]	; (80189bc <ip4_input+0x23c>)
 801898e:	2200      	movs	r2, #0
 8018990:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018992:	4b0a      	ldr	r3, [pc, #40]	; (80189bc <ip4_input+0x23c>)
 8018994:	2200      	movs	r2, #0
 8018996:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018998:	4b08      	ldr	r3, [pc, #32]	; (80189bc <ip4_input+0x23c>)
 801899a:	2200      	movs	r2, #0
 801899c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801899e:	4b07      	ldr	r3, [pc, #28]	; (80189bc <ip4_input+0x23c>)
 80189a0:	2200      	movs	r2, #0
 80189a2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80189a4:	4b05      	ldr	r3, [pc, #20]	; (80189bc <ip4_input+0x23c>)
 80189a6:	2200      	movs	r2, #0
 80189a8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80189aa:	4b04      	ldr	r3, [pc, #16]	; (80189bc <ip4_input+0x23c>)
 80189ac:	2200      	movs	r2, #0
 80189ae:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80189b0:	2300      	movs	r3, #0
}
 80189b2:	4618      	mov	r0, r3
 80189b4:	3718      	adds	r7, #24
 80189b6:	46bd      	mov	sp, r7
 80189b8:	bd80      	pop	{r7, pc}
 80189ba:	bf00      	nop
 80189bc:	20004588 	.word	0x20004588
 80189c0:	20007c8c 	.word	0x20007c8c

080189c4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80189c4:	b580      	push	{r7, lr}
 80189c6:	b08a      	sub	sp, #40	; 0x28
 80189c8:	af04      	add	r7, sp, #16
 80189ca:	60f8      	str	r0, [r7, #12]
 80189cc:	60b9      	str	r1, [r7, #8]
 80189ce:	607a      	str	r2, [r7, #4]
 80189d0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80189d2:	68bb      	ldr	r3, [r7, #8]
 80189d4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d009      	beq.n	80189f0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80189dc:	68bb      	ldr	r3, [r7, #8]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d003      	beq.n	80189ea <ip4_output_if+0x26>
 80189e2:	68bb      	ldr	r3, [r7, #8]
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d102      	bne.n	80189f0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80189ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189ec:	3304      	adds	r3, #4
 80189ee:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80189f0:	78fa      	ldrb	r2, [r7, #3]
 80189f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189f4:	9302      	str	r3, [sp, #8]
 80189f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80189fa:	9301      	str	r3, [sp, #4]
 80189fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018a00:	9300      	str	r3, [sp, #0]
 8018a02:	4613      	mov	r3, r2
 8018a04:	687a      	ldr	r2, [r7, #4]
 8018a06:	6979      	ldr	r1, [r7, #20]
 8018a08:	68f8      	ldr	r0, [r7, #12]
 8018a0a:	f000 f805 	bl	8018a18 <ip4_output_if_src>
 8018a0e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018a10:	4618      	mov	r0, r3
 8018a12:	3718      	adds	r7, #24
 8018a14:	46bd      	mov	sp, r7
 8018a16:	bd80      	pop	{r7, pc}

08018a18 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8018a18:	b580      	push	{r7, lr}
 8018a1a:	b088      	sub	sp, #32
 8018a1c:	af00      	add	r7, sp, #0
 8018a1e:	60f8      	str	r0, [r7, #12]
 8018a20:	60b9      	str	r1, [r7, #8]
 8018a22:	607a      	str	r2, [r7, #4]
 8018a24:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8018a26:	68fb      	ldr	r3, [r7, #12]
 8018a28:	7b9b      	ldrb	r3, [r3, #14]
 8018a2a:	2b01      	cmp	r3, #1
 8018a2c:	d006      	beq.n	8018a3c <ip4_output_if_src+0x24>
 8018a2e:	4b4b      	ldr	r3, [pc, #300]	; (8018b5c <ip4_output_if_src+0x144>)
 8018a30:	f44f 7255 	mov.w	r2, #852	; 0x354
 8018a34:	494a      	ldr	r1, [pc, #296]	; (8018b60 <ip4_output_if_src+0x148>)
 8018a36:	484b      	ldr	r0, [pc, #300]	; (8018b64 <ip4_output_if_src+0x14c>)
 8018a38:	f002 f9d6 	bl	801ade8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d060      	beq.n	8018b04 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8018a42:	2314      	movs	r3, #20
 8018a44:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8018a46:	2114      	movs	r1, #20
 8018a48:	68f8      	ldr	r0, [r7, #12]
 8018a4a:	f7f7 fad9 	bl	8010000 <pbuf_add_header>
 8018a4e:	4603      	mov	r3, r0
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d002      	beq.n	8018a5a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018a54:	f06f 0301 	mvn.w	r3, #1
 8018a58:	e07c      	b.n	8018b54 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018a5a:	68fb      	ldr	r3, [r7, #12]
 8018a5c:	685b      	ldr	r3, [r3, #4]
 8018a5e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018a60:	68fb      	ldr	r3, [r7, #12]
 8018a62:	895b      	ldrh	r3, [r3, #10]
 8018a64:	2b13      	cmp	r3, #19
 8018a66:	d806      	bhi.n	8018a76 <ip4_output_if_src+0x5e>
 8018a68:	4b3c      	ldr	r3, [pc, #240]	; (8018b5c <ip4_output_if_src+0x144>)
 8018a6a:	f240 3289 	movw	r2, #905	; 0x389
 8018a6e:	493e      	ldr	r1, [pc, #248]	; (8018b68 <ip4_output_if_src+0x150>)
 8018a70:	483c      	ldr	r0, [pc, #240]	; (8018b64 <ip4_output_if_src+0x14c>)
 8018a72:	f002 f9b9 	bl	801ade8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8018a76:	69fb      	ldr	r3, [r7, #28]
 8018a78:	78fa      	ldrb	r2, [r7, #3]
 8018a7a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018a7c:	69fb      	ldr	r3, [r7, #28]
 8018a7e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018a82:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	681a      	ldr	r2, [r3, #0]
 8018a88:	69fb      	ldr	r3, [r7, #28]
 8018a8a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018a8c:	8b7b      	ldrh	r3, [r7, #26]
 8018a8e:	089b      	lsrs	r3, r3, #2
 8018a90:	b29b      	uxth	r3, r3
 8018a92:	b2db      	uxtb	r3, r3
 8018a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a98:	b2da      	uxtb	r2, r3
 8018a9a:	69fb      	ldr	r3, [r7, #28]
 8018a9c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018a9e:	69fb      	ldr	r3, [r7, #28]
 8018aa0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018aa4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	891b      	ldrh	r3, [r3, #8]
 8018aaa:	4618      	mov	r0, r3
 8018aac:	f7f6 f80e 	bl	800eacc <lwip_htons>
 8018ab0:	4603      	mov	r3, r0
 8018ab2:	461a      	mov	r2, r3
 8018ab4:	69fb      	ldr	r3, [r7, #28]
 8018ab6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018ab8:	69fb      	ldr	r3, [r7, #28]
 8018aba:	2200      	movs	r2, #0
 8018abc:	719a      	strb	r2, [r3, #6]
 8018abe:	2200      	movs	r2, #0
 8018ac0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018ac2:	4b2a      	ldr	r3, [pc, #168]	; (8018b6c <ip4_output_if_src+0x154>)
 8018ac4:	881b      	ldrh	r3, [r3, #0]
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	f7f6 f800 	bl	800eacc <lwip_htons>
 8018acc:	4603      	mov	r3, r0
 8018ace:	461a      	mov	r2, r3
 8018ad0:	69fb      	ldr	r3, [r7, #28]
 8018ad2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018ad4:	4b25      	ldr	r3, [pc, #148]	; (8018b6c <ip4_output_if_src+0x154>)
 8018ad6:	881b      	ldrh	r3, [r3, #0]
 8018ad8:	3301      	adds	r3, #1
 8018ada:	b29a      	uxth	r2, r3
 8018adc:	4b23      	ldr	r3, [pc, #140]	; (8018b6c <ip4_output_if_src+0x154>)
 8018ade:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018ae0:	68bb      	ldr	r3, [r7, #8]
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d104      	bne.n	8018af0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8018ae6:	4b22      	ldr	r3, [pc, #136]	; (8018b70 <ip4_output_if_src+0x158>)
 8018ae8:	681a      	ldr	r2, [r3, #0]
 8018aea:	69fb      	ldr	r3, [r7, #28]
 8018aec:	60da      	str	r2, [r3, #12]
 8018aee:	e003      	b.n	8018af8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018af0:	68bb      	ldr	r3, [r7, #8]
 8018af2:	681a      	ldr	r2, [r3, #0]
 8018af4:	69fb      	ldr	r3, [r7, #28]
 8018af6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8018af8:	69fb      	ldr	r3, [r7, #28]
 8018afa:	2200      	movs	r2, #0
 8018afc:	729a      	strb	r2, [r3, #10]
 8018afe:	2200      	movs	r2, #0
 8018b00:	72da      	strb	r2, [r3, #11]
 8018b02:	e00f      	b.n	8018b24 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8018b04:	68fb      	ldr	r3, [r7, #12]
 8018b06:	895b      	ldrh	r3, [r3, #10]
 8018b08:	2b13      	cmp	r3, #19
 8018b0a:	d802      	bhi.n	8018b12 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018b0c:	f06f 0301 	mvn.w	r3, #1
 8018b10:	e020      	b.n	8018b54 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8018b12:	68fb      	ldr	r3, [r7, #12]
 8018b14:	685b      	ldr	r3, [r3, #4]
 8018b16:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018b18:	69fb      	ldr	r3, [r7, #28]
 8018b1a:	691b      	ldr	r3, [r3, #16]
 8018b1c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018b1e:	f107 0314 	add.w	r3, r7, #20
 8018b22:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8018b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b26:	8c1b      	ldrh	r3, [r3, #32]
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d00c      	beq.n	8018b46 <ip4_output_if_src+0x12e>
 8018b2c:	68fb      	ldr	r3, [r7, #12]
 8018b2e:	891a      	ldrh	r2, [r3, #8]
 8018b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b32:	8c1b      	ldrh	r3, [r3, #32]
 8018b34:	429a      	cmp	r2, r3
 8018b36:	d906      	bls.n	8018b46 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8018b38:	687a      	ldr	r2, [r7, #4]
 8018b3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018b3c:	68f8      	ldr	r0, [r7, #12]
 8018b3e:	f000 fd4b 	bl	80195d8 <ip4_frag>
 8018b42:	4603      	mov	r3, r0
 8018b44:	e006      	b.n	8018b54 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8018b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b48:	695b      	ldr	r3, [r3, #20]
 8018b4a:	687a      	ldr	r2, [r7, #4]
 8018b4c:	68f9      	ldr	r1, [r7, #12]
 8018b4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018b50:	4798      	blx	r3
 8018b52:	4603      	mov	r3, r0
}
 8018b54:	4618      	mov	r0, r3
 8018b56:	3720      	adds	r7, #32
 8018b58:	46bd      	mov	sp, r7
 8018b5a:	bd80      	pop	{r7, pc}
 8018b5c:	08022a7c 	.word	0x08022a7c
 8018b60:	08022ab0 	.word	0x08022ab0
 8018b64:	08022abc 	.word	0x08022abc
 8018b68:	08022ae4 	.word	0x08022ae4
 8018b6c:	200009c6 	.word	0x200009c6
 8018b70:	080246fc 	.word	0x080246fc

08018b74 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018b74:	b480      	push	{r7}
 8018b76:	b085      	sub	sp, #20
 8018b78:	af00      	add	r7, sp, #0
 8018b7a:	6078      	str	r0, [r7, #4]
 8018b7c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b88:	d002      	beq.n	8018b90 <ip4_addr_isbroadcast_u32+0x1c>
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d101      	bne.n	8018b94 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018b90:	2301      	movs	r3, #1
 8018b92:	e02a      	b.n	8018bea <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018b94:	683b      	ldr	r3, [r7, #0]
 8018b96:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8018b9a:	f003 0302 	and.w	r3, r3, #2
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d101      	bne.n	8018ba6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8018ba2:	2300      	movs	r3, #0
 8018ba4:	e021      	b.n	8018bea <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8018ba6:	683b      	ldr	r3, [r7, #0]
 8018ba8:	3304      	adds	r3, #4
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	687a      	ldr	r2, [r7, #4]
 8018bae:	429a      	cmp	r2, r3
 8018bb0:	d101      	bne.n	8018bb6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8018bb2:	2300      	movs	r3, #0
 8018bb4:	e019      	b.n	8018bea <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8018bb6:	68fa      	ldr	r2, [r7, #12]
 8018bb8:	683b      	ldr	r3, [r7, #0]
 8018bba:	3304      	adds	r3, #4
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	405a      	eors	r2, r3
 8018bc0:	683b      	ldr	r3, [r7, #0]
 8018bc2:	3308      	adds	r3, #8
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	4013      	ands	r3, r2
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d10d      	bne.n	8018be8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018bcc:	683b      	ldr	r3, [r7, #0]
 8018bce:	3308      	adds	r3, #8
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	43da      	mvns	r2, r3
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018bd8:	683b      	ldr	r3, [r7, #0]
 8018bda:	3308      	adds	r3, #8
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018be0:	429a      	cmp	r2, r3
 8018be2:	d101      	bne.n	8018be8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8018be4:	2301      	movs	r3, #1
 8018be6:	e000      	b.n	8018bea <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018be8:	2300      	movs	r3, #0
  }
}
 8018bea:	4618      	mov	r0, r3
 8018bec:	3714      	adds	r7, #20
 8018bee:	46bd      	mov	sp, r7
 8018bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bf4:	4770      	bx	lr
	...

08018bf8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	b084      	sub	sp, #16
 8018bfc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018bfe:	2300      	movs	r3, #0
 8018c00:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8018c02:	4b12      	ldr	r3, [pc, #72]	; (8018c4c <ip_reass_tmr+0x54>)
 8018c04:	681b      	ldr	r3, [r3, #0]
 8018c06:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018c08:	e018      	b.n	8018c3c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8018c0a:	68fb      	ldr	r3, [r7, #12]
 8018c0c:	7fdb      	ldrb	r3, [r3, #31]
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d00b      	beq.n	8018c2a <ip_reass_tmr+0x32>
      r->timer--;
 8018c12:	68fb      	ldr	r3, [r7, #12]
 8018c14:	7fdb      	ldrb	r3, [r3, #31]
 8018c16:	3b01      	subs	r3, #1
 8018c18:	b2da      	uxtb	r2, r3
 8018c1a:	68fb      	ldr	r3, [r7, #12]
 8018c1c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018c1e:	68fb      	ldr	r3, [r7, #12]
 8018c20:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018c22:	68fb      	ldr	r3, [r7, #12]
 8018c24:	681b      	ldr	r3, [r3, #0]
 8018c26:	60fb      	str	r3, [r7, #12]
 8018c28:	e008      	b.n	8018c3c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018c2a:	68fb      	ldr	r3, [r7, #12]
 8018c2c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018c2e:	68fb      	ldr	r3, [r7, #12]
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018c34:	68b9      	ldr	r1, [r7, #8]
 8018c36:	6878      	ldr	r0, [r7, #4]
 8018c38:	f000 f80a 	bl	8018c50 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018c3c:	68fb      	ldr	r3, [r7, #12]
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d1e3      	bne.n	8018c0a <ip_reass_tmr+0x12>
    }
  }
}
 8018c42:	bf00      	nop
 8018c44:	3710      	adds	r7, #16
 8018c46:	46bd      	mov	sp, r7
 8018c48:	bd80      	pop	{r7, pc}
 8018c4a:	bf00      	nop
 8018c4c:	200009c8 	.word	0x200009c8

08018c50 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018c50:	b580      	push	{r7, lr}
 8018c52:	b088      	sub	sp, #32
 8018c54:	af00      	add	r7, sp, #0
 8018c56:	6078      	str	r0, [r7, #4]
 8018c58:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018c5a:	2300      	movs	r3, #0
 8018c5c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018c5e:	683a      	ldr	r2, [r7, #0]
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	429a      	cmp	r2, r3
 8018c64:	d105      	bne.n	8018c72 <ip_reass_free_complete_datagram+0x22>
 8018c66:	4b45      	ldr	r3, [pc, #276]	; (8018d7c <ip_reass_free_complete_datagram+0x12c>)
 8018c68:	22ab      	movs	r2, #171	; 0xab
 8018c6a:	4945      	ldr	r1, [pc, #276]	; (8018d80 <ip_reass_free_complete_datagram+0x130>)
 8018c6c:	4845      	ldr	r0, [pc, #276]	; (8018d84 <ip_reass_free_complete_datagram+0x134>)
 8018c6e:	f002 f8bb 	bl	801ade8 <iprintf>
  if (prev != NULL) {
 8018c72:	683b      	ldr	r3, [r7, #0]
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d00a      	beq.n	8018c8e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018c78:	683b      	ldr	r3, [r7, #0]
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	687a      	ldr	r2, [r7, #4]
 8018c7e:	429a      	cmp	r2, r3
 8018c80:	d005      	beq.n	8018c8e <ip_reass_free_complete_datagram+0x3e>
 8018c82:	4b3e      	ldr	r3, [pc, #248]	; (8018d7c <ip_reass_free_complete_datagram+0x12c>)
 8018c84:	22ad      	movs	r2, #173	; 0xad
 8018c86:	4940      	ldr	r1, [pc, #256]	; (8018d88 <ip_reass_free_complete_datagram+0x138>)
 8018c88:	483e      	ldr	r0, [pc, #248]	; (8018d84 <ip_reass_free_complete_datagram+0x134>)
 8018c8a:	f002 f8ad 	bl	801ade8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	685b      	ldr	r3, [r3, #4]
 8018c92:	685b      	ldr	r3, [r3, #4]
 8018c94:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018c96:	697b      	ldr	r3, [r7, #20]
 8018c98:	889b      	ldrh	r3, [r3, #4]
 8018c9a:	b29b      	uxth	r3, r3
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d12a      	bne.n	8018cf6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	685b      	ldr	r3, [r3, #4]
 8018ca4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018ca6:	697b      	ldr	r3, [r7, #20]
 8018ca8:	681a      	ldr	r2, [r3, #0]
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018cae:	69bb      	ldr	r3, [r7, #24]
 8018cb0:	6858      	ldr	r0, [r3, #4]
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	3308      	adds	r3, #8
 8018cb6:	2214      	movs	r2, #20
 8018cb8:	4619      	mov	r1, r3
 8018cba:	f001 f9ac 	bl	801a016 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018cbe:	2101      	movs	r1, #1
 8018cc0:	69b8      	ldr	r0, [r7, #24]
 8018cc2:	f7ff fc49 	bl	8018558 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8018cc6:	69b8      	ldr	r0, [r7, #24]
 8018cc8:	f7f7 fabe 	bl	8010248 <pbuf_clen>
 8018ccc:	4603      	mov	r3, r0
 8018cce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018cd0:	8bfa      	ldrh	r2, [r7, #30]
 8018cd2:	8a7b      	ldrh	r3, [r7, #18]
 8018cd4:	4413      	add	r3, r2
 8018cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018cda:	db05      	blt.n	8018ce8 <ip_reass_free_complete_datagram+0x98>
 8018cdc:	4b27      	ldr	r3, [pc, #156]	; (8018d7c <ip_reass_free_complete_datagram+0x12c>)
 8018cde:	22bc      	movs	r2, #188	; 0xbc
 8018ce0:	492a      	ldr	r1, [pc, #168]	; (8018d8c <ip_reass_free_complete_datagram+0x13c>)
 8018ce2:	4828      	ldr	r0, [pc, #160]	; (8018d84 <ip_reass_free_complete_datagram+0x134>)
 8018ce4:	f002 f880 	bl	801ade8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018ce8:	8bfa      	ldrh	r2, [r7, #30]
 8018cea:	8a7b      	ldrh	r3, [r7, #18]
 8018cec:	4413      	add	r3, r2
 8018cee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018cf0:	69b8      	ldr	r0, [r7, #24]
 8018cf2:	f7f7 fa1b 	bl	801012c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	685b      	ldr	r3, [r3, #4]
 8018cfa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018cfc:	e01f      	b.n	8018d3e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018cfe:	69bb      	ldr	r3, [r7, #24]
 8018d00:	685b      	ldr	r3, [r3, #4]
 8018d02:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018d04:	69bb      	ldr	r3, [r7, #24]
 8018d06:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018d08:	697b      	ldr	r3, [r7, #20]
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018d0e:	68f8      	ldr	r0, [r7, #12]
 8018d10:	f7f7 fa9a 	bl	8010248 <pbuf_clen>
 8018d14:	4603      	mov	r3, r0
 8018d16:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018d18:	8bfa      	ldrh	r2, [r7, #30]
 8018d1a:	8a7b      	ldrh	r3, [r7, #18]
 8018d1c:	4413      	add	r3, r2
 8018d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018d22:	db05      	blt.n	8018d30 <ip_reass_free_complete_datagram+0xe0>
 8018d24:	4b15      	ldr	r3, [pc, #84]	; (8018d7c <ip_reass_free_complete_datagram+0x12c>)
 8018d26:	22cc      	movs	r2, #204	; 0xcc
 8018d28:	4918      	ldr	r1, [pc, #96]	; (8018d8c <ip_reass_free_complete_datagram+0x13c>)
 8018d2a:	4816      	ldr	r0, [pc, #88]	; (8018d84 <ip_reass_free_complete_datagram+0x134>)
 8018d2c:	f002 f85c 	bl	801ade8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018d30:	8bfa      	ldrh	r2, [r7, #30]
 8018d32:	8a7b      	ldrh	r3, [r7, #18]
 8018d34:	4413      	add	r3, r2
 8018d36:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018d38:	68f8      	ldr	r0, [r7, #12]
 8018d3a:	f7f7 f9f7 	bl	801012c <pbuf_free>
  while (p != NULL) {
 8018d3e:	69bb      	ldr	r3, [r7, #24]
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d1dc      	bne.n	8018cfe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018d44:	6839      	ldr	r1, [r7, #0]
 8018d46:	6878      	ldr	r0, [r7, #4]
 8018d48:	f000 f8c2 	bl	8018ed0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018d4c:	4b10      	ldr	r3, [pc, #64]	; (8018d90 <ip_reass_free_complete_datagram+0x140>)
 8018d4e:	881b      	ldrh	r3, [r3, #0]
 8018d50:	8bfa      	ldrh	r2, [r7, #30]
 8018d52:	429a      	cmp	r2, r3
 8018d54:	d905      	bls.n	8018d62 <ip_reass_free_complete_datagram+0x112>
 8018d56:	4b09      	ldr	r3, [pc, #36]	; (8018d7c <ip_reass_free_complete_datagram+0x12c>)
 8018d58:	22d2      	movs	r2, #210	; 0xd2
 8018d5a:	490e      	ldr	r1, [pc, #56]	; (8018d94 <ip_reass_free_complete_datagram+0x144>)
 8018d5c:	4809      	ldr	r0, [pc, #36]	; (8018d84 <ip_reass_free_complete_datagram+0x134>)
 8018d5e:	f002 f843 	bl	801ade8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8018d62:	4b0b      	ldr	r3, [pc, #44]	; (8018d90 <ip_reass_free_complete_datagram+0x140>)
 8018d64:	881a      	ldrh	r2, [r3, #0]
 8018d66:	8bfb      	ldrh	r3, [r7, #30]
 8018d68:	1ad3      	subs	r3, r2, r3
 8018d6a:	b29a      	uxth	r2, r3
 8018d6c:	4b08      	ldr	r3, [pc, #32]	; (8018d90 <ip_reass_free_complete_datagram+0x140>)
 8018d6e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018d70:	8bfb      	ldrh	r3, [r7, #30]
}
 8018d72:	4618      	mov	r0, r3
 8018d74:	3720      	adds	r7, #32
 8018d76:	46bd      	mov	sp, r7
 8018d78:	bd80      	pop	{r7, pc}
 8018d7a:	bf00      	nop
 8018d7c:	08022b14 	.word	0x08022b14
 8018d80:	08022b50 	.word	0x08022b50
 8018d84:	08022b5c 	.word	0x08022b5c
 8018d88:	08022b84 	.word	0x08022b84
 8018d8c:	08022b98 	.word	0x08022b98
 8018d90:	200009cc 	.word	0x200009cc
 8018d94:	08022bb8 	.word	0x08022bb8

08018d98 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018d98:	b580      	push	{r7, lr}
 8018d9a:	b08a      	sub	sp, #40	; 0x28
 8018d9c:	af00      	add	r7, sp, #0
 8018d9e:	6078      	str	r0, [r7, #4]
 8018da0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018da2:	2300      	movs	r3, #0
 8018da4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018da6:	2300      	movs	r3, #0
 8018da8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018daa:	2300      	movs	r3, #0
 8018dac:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018dae:	2300      	movs	r3, #0
 8018db0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018db2:	2300      	movs	r3, #0
 8018db4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018db6:	4b28      	ldr	r3, [pc, #160]	; (8018e58 <ip_reass_remove_oldest_datagram+0xc0>)
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018dbc:	e030      	b.n	8018e20 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dc0:	695a      	ldr	r2, [r3, #20]
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	68db      	ldr	r3, [r3, #12]
 8018dc6:	429a      	cmp	r2, r3
 8018dc8:	d10c      	bne.n	8018de4 <ip_reass_remove_oldest_datagram+0x4c>
 8018dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dcc:	699a      	ldr	r2, [r3, #24]
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	691b      	ldr	r3, [r3, #16]
 8018dd2:	429a      	cmp	r2, r3
 8018dd4:	d106      	bne.n	8018de4 <ip_reass_remove_oldest_datagram+0x4c>
 8018dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dd8:	899a      	ldrh	r2, [r3, #12]
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	889b      	ldrh	r3, [r3, #4]
 8018dde:	b29b      	uxth	r3, r3
 8018de0:	429a      	cmp	r2, r3
 8018de2:	d014      	beq.n	8018e0e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018de4:	693b      	ldr	r3, [r7, #16]
 8018de6:	3301      	adds	r3, #1
 8018de8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8018dea:	6a3b      	ldr	r3, [r7, #32]
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	d104      	bne.n	8018dfa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018df2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018df4:	69fb      	ldr	r3, [r7, #28]
 8018df6:	61bb      	str	r3, [r7, #24]
 8018df8:	e009      	b.n	8018e0e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dfc:	7fda      	ldrb	r2, [r3, #31]
 8018dfe:	6a3b      	ldr	r3, [r7, #32]
 8018e00:	7fdb      	ldrb	r3, [r3, #31]
 8018e02:	429a      	cmp	r2, r3
 8018e04:	d803      	bhi.n	8018e0e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8018e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e08:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018e0a:	69fb      	ldr	r3, [r7, #28]
 8018e0c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e10:	681b      	ldr	r3, [r3, #0]
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d001      	beq.n	8018e1a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8018e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e18:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d1cb      	bne.n	8018dbe <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8018e26:	6a3b      	ldr	r3, [r7, #32]
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	d008      	beq.n	8018e3e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018e2c:	69b9      	ldr	r1, [r7, #24]
 8018e2e:	6a38      	ldr	r0, [r7, #32]
 8018e30:	f7ff ff0e 	bl	8018c50 <ip_reass_free_complete_datagram>
 8018e34:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8018e36:	697a      	ldr	r2, [r7, #20]
 8018e38:	68fb      	ldr	r3, [r7, #12]
 8018e3a:	4413      	add	r3, r2
 8018e3c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018e3e:	697a      	ldr	r2, [r7, #20]
 8018e40:	683b      	ldr	r3, [r7, #0]
 8018e42:	429a      	cmp	r2, r3
 8018e44:	da02      	bge.n	8018e4c <ip_reass_remove_oldest_datagram+0xb4>
 8018e46:	693b      	ldr	r3, [r7, #16]
 8018e48:	2b01      	cmp	r3, #1
 8018e4a:	dcac      	bgt.n	8018da6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018e4c:	697b      	ldr	r3, [r7, #20]
}
 8018e4e:	4618      	mov	r0, r3
 8018e50:	3728      	adds	r7, #40	; 0x28
 8018e52:	46bd      	mov	sp, r7
 8018e54:	bd80      	pop	{r7, pc}
 8018e56:	bf00      	nop
 8018e58:	200009c8 	.word	0x200009c8

08018e5c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018e5c:	b580      	push	{r7, lr}
 8018e5e:	b084      	sub	sp, #16
 8018e60:	af00      	add	r7, sp, #0
 8018e62:	6078      	str	r0, [r7, #4]
 8018e64:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018e66:	2004      	movs	r0, #4
 8018e68:	f7f6 fae6 	bl	800f438 <memp_malloc>
 8018e6c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018e6e:	68fb      	ldr	r3, [r7, #12]
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d110      	bne.n	8018e96 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018e74:	6839      	ldr	r1, [r7, #0]
 8018e76:	6878      	ldr	r0, [r7, #4]
 8018e78:	f7ff ff8e 	bl	8018d98 <ip_reass_remove_oldest_datagram>
 8018e7c:	4602      	mov	r2, r0
 8018e7e:	683b      	ldr	r3, [r7, #0]
 8018e80:	4293      	cmp	r3, r2
 8018e82:	dc03      	bgt.n	8018e8c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018e84:	2004      	movs	r0, #4
 8018e86:	f7f6 fad7 	bl	800f438 <memp_malloc>
 8018e8a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018e8c:	68fb      	ldr	r3, [r7, #12]
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d101      	bne.n	8018e96 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8018e92:	2300      	movs	r3, #0
 8018e94:	e016      	b.n	8018ec4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018e96:	2220      	movs	r2, #32
 8018e98:	2100      	movs	r1, #0
 8018e9a:	68f8      	ldr	r0, [r7, #12]
 8018e9c:	f001 f8df 	bl	801a05e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	220f      	movs	r2, #15
 8018ea4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018ea6:	4b09      	ldr	r3, [pc, #36]	; (8018ecc <ip_reass_enqueue_new_datagram+0x70>)
 8018ea8:	681a      	ldr	r2, [r3, #0]
 8018eaa:	68fb      	ldr	r3, [r7, #12]
 8018eac:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018eae:	4a07      	ldr	r2, [pc, #28]	; (8018ecc <ip_reass_enqueue_new_datagram+0x70>)
 8018eb0:	68fb      	ldr	r3, [r7, #12]
 8018eb2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018eb4:	68fb      	ldr	r3, [r7, #12]
 8018eb6:	3308      	adds	r3, #8
 8018eb8:	2214      	movs	r2, #20
 8018eba:	6879      	ldr	r1, [r7, #4]
 8018ebc:	4618      	mov	r0, r3
 8018ebe:	f001 f8aa 	bl	801a016 <memcpy>
  return ipr;
 8018ec2:	68fb      	ldr	r3, [r7, #12]
}
 8018ec4:	4618      	mov	r0, r3
 8018ec6:	3710      	adds	r7, #16
 8018ec8:	46bd      	mov	sp, r7
 8018eca:	bd80      	pop	{r7, pc}
 8018ecc:	200009c8 	.word	0x200009c8

08018ed0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018ed0:	b580      	push	{r7, lr}
 8018ed2:	b082      	sub	sp, #8
 8018ed4:	af00      	add	r7, sp, #0
 8018ed6:	6078      	str	r0, [r7, #4]
 8018ed8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018eda:	4b10      	ldr	r3, [pc, #64]	; (8018f1c <ip_reass_dequeue_datagram+0x4c>)
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	687a      	ldr	r2, [r7, #4]
 8018ee0:	429a      	cmp	r2, r3
 8018ee2:	d104      	bne.n	8018eee <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	4a0c      	ldr	r2, [pc, #48]	; (8018f1c <ip_reass_dequeue_datagram+0x4c>)
 8018eea:	6013      	str	r3, [r2, #0]
 8018eec:	e00d      	b.n	8018f0a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8018eee:	683b      	ldr	r3, [r7, #0]
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d106      	bne.n	8018f02 <ip_reass_dequeue_datagram+0x32>
 8018ef4:	4b0a      	ldr	r3, [pc, #40]	; (8018f20 <ip_reass_dequeue_datagram+0x50>)
 8018ef6:	f240 1245 	movw	r2, #325	; 0x145
 8018efa:	490a      	ldr	r1, [pc, #40]	; (8018f24 <ip_reass_dequeue_datagram+0x54>)
 8018efc:	480a      	ldr	r0, [pc, #40]	; (8018f28 <ip_reass_dequeue_datagram+0x58>)
 8018efe:	f001 ff73 	bl	801ade8 <iprintf>
    prev->next = ipr->next;
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	681a      	ldr	r2, [r3, #0]
 8018f06:	683b      	ldr	r3, [r7, #0]
 8018f08:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8018f0a:	6879      	ldr	r1, [r7, #4]
 8018f0c:	2004      	movs	r0, #4
 8018f0e:	f7f6 fae5 	bl	800f4dc <memp_free>
}
 8018f12:	bf00      	nop
 8018f14:	3708      	adds	r7, #8
 8018f16:	46bd      	mov	sp, r7
 8018f18:	bd80      	pop	{r7, pc}
 8018f1a:	bf00      	nop
 8018f1c:	200009c8 	.word	0x200009c8
 8018f20:	08022b14 	.word	0x08022b14
 8018f24:	08022bdc 	.word	0x08022bdc
 8018f28:	08022b5c 	.word	0x08022b5c

08018f2c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018f2c:	b580      	push	{r7, lr}
 8018f2e:	b08c      	sub	sp, #48	; 0x30
 8018f30:	af00      	add	r7, sp, #0
 8018f32:	60f8      	str	r0, [r7, #12]
 8018f34:	60b9      	str	r1, [r7, #8]
 8018f36:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018f38:	2300      	movs	r3, #0
 8018f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018f3c:	2301      	movs	r3, #1
 8018f3e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018f40:	68bb      	ldr	r3, [r7, #8]
 8018f42:	685b      	ldr	r3, [r3, #4]
 8018f44:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018f46:	69fb      	ldr	r3, [r7, #28]
 8018f48:	885b      	ldrh	r3, [r3, #2]
 8018f4a:	b29b      	uxth	r3, r3
 8018f4c:	4618      	mov	r0, r3
 8018f4e:	f7f5 fdbd 	bl	800eacc <lwip_htons>
 8018f52:	4603      	mov	r3, r0
 8018f54:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8018f56:	69fb      	ldr	r3, [r7, #28]
 8018f58:	781b      	ldrb	r3, [r3, #0]
 8018f5a:	f003 030f 	and.w	r3, r3, #15
 8018f5e:	b2db      	uxtb	r3, r3
 8018f60:	009b      	lsls	r3, r3, #2
 8018f62:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018f64:	7e7b      	ldrb	r3, [r7, #25]
 8018f66:	b29b      	uxth	r3, r3
 8018f68:	8b7a      	ldrh	r2, [r7, #26]
 8018f6a:	429a      	cmp	r2, r3
 8018f6c:	d202      	bcs.n	8018f74 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8018f72:	e135      	b.n	80191e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018f74:	7e7b      	ldrb	r3, [r7, #25]
 8018f76:	b29b      	uxth	r3, r3
 8018f78:	8b7a      	ldrh	r2, [r7, #26]
 8018f7a:	1ad3      	subs	r3, r2, r3
 8018f7c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018f7e:	69fb      	ldr	r3, [r7, #28]
 8018f80:	88db      	ldrh	r3, [r3, #6]
 8018f82:	b29b      	uxth	r3, r3
 8018f84:	4618      	mov	r0, r3
 8018f86:	f7f5 fda1 	bl	800eacc <lwip_htons>
 8018f8a:	4603      	mov	r3, r0
 8018f8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018f90:	b29b      	uxth	r3, r3
 8018f92:	00db      	lsls	r3, r3, #3
 8018f94:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8018f96:	68bb      	ldr	r3, [r7, #8]
 8018f98:	685b      	ldr	r3, [r3, #4]
 8018f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f9e:	2200      	movs	r2, #0
 8018fa0:	701a      	strb	r2, [r3, #0]
 8018fa2:	2200      	movs	r2, #0
 8018fa4:	705a      	strb	r2, [r3, #1]
 8018fa6:	2200      	movs	r2, #0
 8018fa8:	709a      	strb	r2, [r3, #2]
 8018faa:	2200      	movs	r2, #0
 8018fac:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fb0:	8afa      	ldrh	r2, [r7, #22]
 8018fb2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018fb4:	8afa      	ldrh	r2, [r7, #22]
 8018fb6:	8b7b      	ldrh	r3, [r7, #26]
 8018fb8:	4413      	add	r3, r2
 8018fba:	b29a      	uxth	r2, r3
 8018fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fbe:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fc2:	88db      	ldrh	r3, [r3, #6]
 8018fc4:	b29b      	uxth	r3, r3
 8018fc6:	8afa      	ldrh	r2, [r7, #22]
 8018fc8:	429a      	cmp	r2, r3
 8018fca:	d902      	bls.n	8018fd2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8018fd0:	e106      	b.n	80191e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	685b      	ldr	r3, [r3, #4]
 8018fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8018fd8:	e068      	b.n	80190ac <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fdc:	685b      	ldr	r3, [r3, #4]
 8018fde:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fe2:	889b      	ldrh	r3, [r3, #4]
 8018fe4:	b29a      	uxth	r2, r3
 8018fe6:	693b      	ldr	r3, [r7, #16]
 8018fe8:	889b      	ldrh	r3, [r3, #4]
 8018fea:	b29b      	uxth	r3, r3
 8018fec:	429a      	cmp	r2, r3
 8018fee:	d235      	bcs.n	801905c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018ff4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8018ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ff8:	2b00      	cmp	r3, #0
 8018ffa:	d020      	beq.n	801903e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ffe:	889b      	ldrh	r3, [r3, #4]
 8019000:	b29a      	uxth	r2, r3
 8019002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019004:	88db      	ldrh	r3, [r3, #6]
 8019006:	b29b      	uxth	r3, r3
 8019008:	429a      	cmp	r2, r3
 801900a:	d307      	bcc.n	801901c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801900c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801900e:	88db      	ldrh	r3, [r3, #6]
 8019010:	b29a      	uxth	r2, r3
 8019012:	693b      	ldr	r3, [r7, #16]
 8019014:	889b      	ldrh	r3, [r3, #4]
 8019016:	b29b      	uxth	r3, r3
 8019018:	429a      	cmp	r2, r3
 801901a:	d902      	bls.n	8019022 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801901c:	f04f 33ff 	mov.w	r3, #4294967295
 8019020:	e0de      	b.n	80191e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019024:	68ba      	ldr	r2, [r7, #8]
 8019026:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801902a:	88db      	ldrh	r3, [r3, #6]
 801902c:	b29a      	uxth	r2, r3
 801902e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019030:	889b      	ldrh	r3, [r3, #4]
 8019032:	b29b      	uxth	r3, r3
 8019034:	429a      	cmp	r2, r3
 8019036:	d03d      	beq.n	80190b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019038:	2300      	movs	r3, #0
 801903a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801903c:	e03a      	b.n	80190b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801903e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019040:	88db      	ldrh	r3, [r3, #6]
 8019042:	b29a      	uxth	r2, r3
 8019044:	693b      	ldr	r3, [r7, #16]
 8019046:	889b      	ldrh	r3, [r3, #4]
 8019048:	b29b      	uxth	r3, r3
 801904a:	429a      	cmp	r2, r3
 801904c:	d902      	bls.n	8019054 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801904e:	f04f 33ff 	mov.w	r3, #4294967295
 8019052:	e0c5      	b.n	80191e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019054:	68fb      	ldr	r3, [r7, #12]
 8019056:	68ba      	ldr	r2, [r7, #8]
 8019058:	605a      	str	r2, [r3, #4]
      break;
 801905a:	e02b      	b.n	80190b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801905c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801905e:	889b      	ldrh	r3, [r3, #4]
 8019060:	b29a      	uxth	r2, r3
 8019062:	693b      	ldr	r3, [r7, #16]
 8019064:	889b      	ldrh	r3, [r3, #4]
 8019066:	b29b      	uxth	r3, r3
 8019068:	429a      	cmp	r2, r3
 801906a:	d102      	bne.n	8019072 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801906c:	f04f 33ff 	mov.w	r3, #4294967295
 8019070:	e0b6      	b.n	80191e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019074:	889b      	ldrh	r3, [r3, #4]
 8019076:	b29a      	uxth	r2, r3
 8019078:	693b      	ldr	r3, [r7, #16]
 801907a:	88db      	ldrh	r3, [r3, #6]
 801907c:	b29b      	uxth	r3, r3
 801907e:	429a      	cmp	r2, r3
 8019080:	d202      	bcs.n	8019088 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019082:	f04f 33ff 	mov.w	r3, #4294967295
 8019086:	e0ab      	b.n	80191e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801908a:	2b00      	cmp	r3, #0
 801908c:	d009      	beq.n	80190a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801908e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019090:	88db      	ldrh	r3, [r3, #6]
 8019092:	b29a      	uxth	r2, r3
 8019094:	693b      	ldr	r3, [r7, #16]
 8019096:	889b      	ldrh	r3, [r3, #4]
 8019098:	b29b      	uxth	r3, r3
 801909a:	429a      	cmp	r2, r3
 801909c:	d001      	beq.n	80190a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801909e:	2300      	movs	r3, #0
 80190a0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80190a2:	693b      	ldr	r3, [r7, #16]
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80190a8:	693b      	ldr	r3, [r7, #16]
 80190aa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80190ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d193      	bne.n	8018fda <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80190b2:	e000      	b.n	80190b6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80190b4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80190b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	d12d      	bne.n	8019118 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80190bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d01c      	beq.n	80190fc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80190c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190c4:	88db      	ldrh	r3, [r3, #6]
 80190c6:	b29a      	uxth	r2, r3
 80190c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190ca:	889b      	ldrh	r3, [r3, #4]
 80190cc:	b29b      	uxth	r3, r3
 80190ce:	429a      	cmp	r2, r3
 80190d0:	d906      	bls.n	80190e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80190d2:	4b45      	ldr	r3, [pc, #276]	; (80191e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80190d4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80190d8:	4944      	ldr	r1, [pc, #272]	; (80191ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80190da:	4845      	ldr	r0, [pc, #276]	; (80191f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80190dc:	f001 fe84 	bl	801ade8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80190e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190e2:	68ba      	ldr	r2, [r7, #8]
 80190e4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80190e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190e8:	88db      	ldrh	r3, [r3, #6]
 80190ea:	b29a      	uxth	r2, r3
 80190ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190ee:	889b      	ldrh	r3, [r3, #4]
 80190f0:	b29b      	uxth	r3, r3
 80190f2:	429a      	cmp	r2, r3
 80190f4:	d010      	beq.n	8019118 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80190f6:	2300      	movs	r3, #0
 80190f8:	623b      	str	r3, [r7, #32]
 80190fa:	e00d      	b.n	8019118 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80190fc:	68fb      	ldr	r3, [r7, #12]
 80190fe:	685b      	ldr	r3, [r3, #4]
 8019100:	2b00      	cmp	r3, #0
 8019102:	d006      	beq.n	8019112 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019104:	4b38      	ldr	r3, [pc, #224]	; (80191e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019106:	f240 12bf 	movw	r2, #447	; 0x1bf
 801910a:	493a      	ldr	r1, [pc, #232]	; (80191f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801910c:	4838      	ldr	r0, [pc, #224]	; (80191f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801910e:	f001 fe6b 	bl	801ade8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019112:	68fb      	ldr	r3, [r7, #12]
 8019114:	68ba      	ldr	r2, [r7, #8]
 8019116:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	2b00      	cmp	r3, #0
 801911c:	d105      	bne.n	801912a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	7f9b      	ldrb	r3, [r3, #30]
 8019122:	f003 0301 	and.w	r3, r3, #1
 8019126:	2b00      	cmp	r3, #0
 8019128:	d059      	beq.n	80191de <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801912a:	6a3b      	ldr	r3, [r7, #32]
 801912c:	2b00      	cmp	r3, #0
 801912e:	d04f      	beq.n	80191d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	685b      	ldr	r3, [r3, #4]
 8019134:	2b00      	cmp	r3, #0
 8019136:	d006      	beq.n	8019146 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	685b      	ldr	r3, [r3, #4]
 801913c:	685b      	ldr	r3, [r3, #4]
 801913e:	889b      	ldrh	r3, [r3, #4]
 8019140:	b29b      	uxth	r3, r3
 8019142:	2b00      	cmp	r3, #0
 8019144:	d002      	beq.n	801914c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8019146:	2300      	movs	r3, #0
 8019148:	623b      	str	r3, [r7, #32]
 801914a:	e041      	b.n	80191d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801914c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801914e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019156:	e012      	b.n	801917e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8019158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801915a:	685b      	ldr	r3, [r3, #4]
 801915c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801915e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019160:	88db      	ldrh	r3, [r3, #6]
 8019162:	b29a      	uxth	r2, r3
 8019164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019166:	889b      	ldrh	r3, [r3, #4]
 8019168:	b29b      	uxth	r3, r3
 801916a:	429a      	cmp	r2, r3
 801916c:	d002      	beq.n	8019174 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801916e:	2300      	movs	r3, #0
 8019170:	623b      	str	r3, [r7, #32]
            break;
 8019172:	e007      	b.n	8019184 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019176:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8019178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801917e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019180:	2b00      	cmp	r3, #0
 8019182:	d1e9      	bne.n	8019158 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019184:	6a3b      	ldr	r3, [r7, #32]
 8019186:	2b00      	cmp	r3, #0
 8019188:	d022      	beq.n	80191d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801918a:	68fb      	ldr	r3, [r7, #12]
 801918c:	685b      	ldr	r3, [r3, #4]
 801918e:	2b00      	cmp	r3, #0
 8019190:	d106      	bne.n	80191a0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019192:	4b15      	ldr	r3, [pc, #84]	; (80191e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019194:	f240 12df 	movw	r2, #479	; 0x1df
 8019198:	4917      	ldr	r1, [pc, #92]	; (80191f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801919a:	4815      	ldr	r0, [pc, #84]	; (80191f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801919c:	f001 fe24 	bl	801ade8 <iprintf>
          LWIP_ASSERT("sanity check",
 80191a0:	68fb      	ldr	r3, [r7, #12]
 80191a2:	685b      	ldr	r3, [r3, #4]
 80191a4:	685b      	ldr	r3, [r3, #4]
 80191a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80191a8:	429a      	cmp	r2, r3
 80191aa:	d106      	bne.n	80191ba <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80191ac:	4b0e      	ldr	r3, [pc, #56]	; (80191e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80191ae:	f240 12e1 	movw	r2, #481	; 0x1e1
 80191b2:	4911      	ldr	r1, [pc, #68]	; (80191f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80191b4:	480e      	ldr	r0, [pc, #56]	; (80191f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80191b6:	f001 fe17 	bl	801ade8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80191ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d006      	beq.n	80191d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80191c2:	4b09      	ldr	r3, [pc, #36]	; (80191e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80191c4:	f240 12e3 	movw	r2, #483	; 0x1e3
 80191c8:	490c      	ldr	r1, [pc, #48]	; (80191fc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80191ca:	4809      	ldr	r0, [pc, #36]	; (80191f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80191cc:	f001 fe0c 	bl	801ade8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80191d0:	6a3b      	ldr	r3, [r7, #32]
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	bf14      	ite	ne
 80191d6:	2301      	movne	r3, #1
 80191d8:	2300      	moveq	r3, #0
 80191da:	b2db      	uxtb	r3, r3
 80191dc:	e000      	b.n	80191e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80191de:	2300      	movs	r3, #0
}
 80191e0:	4618      	mov	r0, r3
 80191e2:	3730      	adds	r7, #48	; 0x30
 80191e4:	46bd      	mov	sp, r7
 80191e6:	bd80      	pop	{r7, pc}
 80191e8:	08022b14 	.word	0x08022b14
 80191ec:	08022bf8 	.word	0x08022bf8
 80191f0:	08022b5c 	.word	0x08022b5c
 80191f4:	08022c18 	.word	0x08022c18
 80191f8:	08022c50 	.word	0x08022c50
 80191fc:	08022c60 	.word	0x08022c60

08019200 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8019200:	b580      	push	{r7, lr}
 8019202:	b08e      	sub	sp, #56	; 0x38
 8019204:	af00      	add	r7, sp, #0
 8019206:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	685b      	ldr	r3, [r3, #4]
 801920c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801920e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019210:	781b      	ldrb	r3, [r3, #0]
 8019212:	f003 030f 	and.w	r3, r3, #15
 8019216:	b2db      	uxtb	r3, r3
 8019218:	009b      	lsls	r3, r3, #2
 801921a:	b2db      	uxtb	r3, r3
 801921c:	2b14      	cmp	r3, #20
 801921e:	f040 8167 	bne.w	80194f0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8019222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019224:	88db      	ldrh	r3, [r3, #6]
 8019226:	b29b      	uxth	r3, r3
 8019228:	4618      	mov	r0, r3
 801922a:	f7f5 fc4f 	bl	800eacc <lwip_htons>
 801922e:	4603      	mov	r3, r0
 8019230:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019234:	b29b      	uxth	r3, r3
 8019236:	00db      	lsls	r3, r3, #3
 8019238:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801923a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801923c:	885b      	ldrh	r3, [r3, #2]
 801923e:	b29b      	uxth	r3, r3
 8019240:	4618      	mov	r0, r3
 8019242:	f7f5 fc43 	bl	800eacc <lwip_htons>
 8019246:	4603      	mov	r3, r0
 8019248:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801924a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801924c:	781b      	ldrb	r3, [r3, #0]
 801924e:	f003 030f 	and.w	r3, r3, #15
 8019252:	b2db      	uxtb	r3, r3
 8019254:	009b      	lsls	r3, r3, #2
 8019256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801925a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801925e:	b29b      	uxth	r3, r3
 8019260:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019262:	429a      	cmp	r2, r3
 8019264:	f0c0 8146 	bcc.w	80194f4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8019268:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801926c:	b29b      	uxth	r3, r3
 801926e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019270:	1ad3      	subs	r3, r2, r3
 8019272:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019274:	6878      	ldr	r0, [r7, #4]
 8019276:	f7f6 ffe7 	bl	8010248 <pbuf_clen>
 801927a:	4603      	mov	r3, r0
 801927c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801927e:	4ba3      	ldr	r3, [pc, #652]	; (801950c <ip4_reass+0x30c>)
 8019280:	881b      	ldrh	r3, [r3, #0]
 8019282:	461a      	mov	r2, r3
 8019284:	8c3b      	ldrh	r3, [r7, #32]
 8019286:	4413      	add	r3, r2
 8019288:	2b0a      	cmp	r3, #10
 801928a:	dd10      	ble.n	80192ae <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801928c:	8c3b      	ldrh	r3, [r7, #32]
 801928e:	4619      	mov	r1, r3
 8019290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019292:	f7ff fd81 	bl	8018d98 <ip_reass_remove_oldest_datagram>
 8019296:	4603      	mov	r3, r0
 8019298:	2b00      	cmp	r3, #0
 801929a:	f000 812d 	beq.w	80194f8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801929e:	4b9b      	ldr	r3, [pc, #620]	; (801950c <ip4_reass+0x30c>)
 80192a0:	881b      	ldrh	r3, [r3, #0]
 80192a2:	461a      	mov	r2, r3
 80192a4:	8c3b      	ldrh	r3, [r7, #32]
 80192a6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80192a8:	2b0a      	cmp	r3, #10
 80192aa:	f300 8125 	bgt.w	80194f8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80192ae:	4b98      	ldr	r3, [pc, #608]	; (8019510 <ip4_reass+0x310>)
 80192b0:	681b      	ldr	r3, [r3, #0]
 80192b2:	633b      	str	r3, [r7, #48]	; 0x30
 80192b4:	e015      	b.n	80192e2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80192b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192b8:	695a      	ldr	r2, [r3, #20]
 80192ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192bc:	68db      	ldr	r3, [r3, #12]
 80192be:	429a      	cmp	r2, r3
 80192c0:	d10c      	bne.n	80192dc <ip4_reass+0xdc>
 80192c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192c4:	699a      	ldr	r2, [r3, #24]
 80192c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192c8:	691b      	ldr	r3, [r3, #16]
 80192ca:	429a      	cmp	r2, r3
 80192cc:	d106      	bne.n	80192dc <ip4_reass+0xdc>
 80192ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192d0:	899a      	ldrh	r2, [r3, #12]
 80192d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192d4:	889b      	ldrh	r3, [r3, #4]
 80192d6:	b29b      	uxth	r3, r3
 80192d8:	429a      	cmp	r2, r3
 80192da:	d006      	beq.n	80192ea <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80192dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	633b      	str	r3, [r7, #48]	; 0x30
 80192e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d1e6      	bne.n	80192b6 <ip4_reass+0xb6>
 80192e8:	e000      	b.n	80192ec <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80192ea:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80192ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d109      	bne.n	8019306 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80192f2:	8c3b      	ldrh	r3, [r7, #32]
 80192f4:	4619      	mov	r1, r3
 80192f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80192f8:	f7ff fdb0 	bl	8018e5c <ip_reass_enqueue_new_datagram>
 80192fc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80192fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019300:	2b00      	cmp	r3, #0
 8019302:	d11c      	bne.n	801933e <ip4_reass+0x13e>
      goto nullreturn;
 8019304:	e0f9      	b.n	80194fa <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019308:	88db      	ldrh	r3, [r3, #6]
 801930a:	b29b      	uxth	r3, r3
 801930c:	4618      	mov	r0, r3
 801930e:	f7f5 fbdd 	bl	800eacc <lwip_htons>
 8019312:	4603      	mov	r3, r0
 8019314:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019318:	2b00      	cmp	r3, #0
 801931a:	d110      	bne.n	801933e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801931c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801931e:	89db      	ldrh	r3, [r3, #14]
 8019320:	4618      	mov	r0, r3
 8019322:	f7f5 fbd3 	bl	800eacc <lwip_htons>
 8019326:	4603      	mov	r3, r0
 8019328:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801932c:	2b00      	cmp	r3, #0
 801932e:	d006      	beq.n	801933e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8019330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019332:	3308      	adds	r3, #8
 8019334:	2214      	movs	r2, #20
 8019336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019338:	4618      	mov	r0, r3
 801933a:	f000 fe6c 	bl	801a016 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801933e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019340:	88db      	ldrh	r3, [r3, #6]
 8019342:	b29b      	uxth	r3, r3
 8019344:	f003 0320 	and.w	r3, r3, #32
 8019348:	2b00      	cmp	r3, #0
 801934a:	bf0c      	ite	eq
 801934c:	2301      	moveq	r3, #1
 801934e:	2300      	movne	r3, #0
 8019350:	b2db      	uxtb	r3, r3
 8019352:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8019354:	69fb      	ldr	r3, [r7, #28]
 8019356:	2b00      	cmp	r3, #0
 8019358:	d00e      	beq.n	8019378 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801935a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801935c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801935e:	4413      	add	r3, r2
 8019360:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8019362:	8b7a      	ldrh	r2, [r7, #26]
 8019364:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019366:	429a      	cmp	r2, r3
 8019368:	f0c0 80a0 	bcc.w	80194ac <ip4_reass+0x2ac>
 801936c:	8b7b      	ldrh	r3, [r7, #26]
 801936e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8019372:	4293      	cmp	r3, r2
 8019374:	f200 809a 	bhi.w	80194ac <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8019378:	69fa      	ldr	r2, [r7, #28]
 801937a:	6879      	ldr	r1, [r7, #4]
 801937c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801937e:	f7ff fdd5 	bl	8018f2c <ip_reass_chain_frag_into_datagram_and_validate>
 8019382:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019384:	697b      	ldr	r3, [r7, #20]
 8019386:	f1b3 3fff 	cmp.w	r3, #4294967295
 801938a:	f000 8091 	beq.w	80194b0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801938e:	4b5f      	ldr	r3, [pc, #380]	; (801950c <ip4_reass+0x30c>)
 8019390:	881a      	ldrh	r2, [r3, #0]
 8019392:	8c3b      	ldrh	r3, [r7, #32]
 8019394:	4413      	add	r3, r2
 8019396:	b29a      	uxth	r2, r3
 8019398:	4b5c      	ldr	r3, [pc, #368]	; (801950c <ip4_reass+0x30c>)
 801939a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801939c:	69fb      	ldr	r3, [r7, #28]
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d00d      	beq.n	80193be <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80193a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80193a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80193a6:	4413      	add	r3, r2
 80193a8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80193aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193ac:	8a7a      	ldrh	r2, [r7, #18]
 80193ae:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80193b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193b2:	7f9b      	ldrb	r3, [r3, #30]
 80193b4:	f043 0301 	orr.w	r3, r3, #1
 80193b8:	b2da      	uxtb	r2, r3
 80193ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193bc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80193be:	697b      	ldr	r3, [r7, #20]
 80193c0:	2b01      	cmp	r3, #1
 80193c2:	d171      	bne.n	80194a8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80193c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193c6:	8b9b      	ldrh	r3, [r3, #28]
 80193c8:	3314      	adds	r3, #20
 80193ca:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80193cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193ce:	685b      	ldr	r3, [r3, #4]
 80193d0:	685b      	ldr	r3, [r3, #4]
 80193d2:	681b      	ldr	r3, [r3, #0]
 80193d4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80193d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193d8:	685b      	ldr	r3, [r3, #4]
 80193da:	685b      	ldr	r3, [r3, #4]
 80193dc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80193de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193e0:	3308      	adds	r3, #8
 80193e2:	2214      	movs	r2, #20
 80193e4:	4619      	mov	r1, r3
 80193e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80193e8:	f000 fe15 	bl	801a016 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80193ec:	8a3b      	ldrh	r3, [r7, #16]
 80193ee:	4618      	mov	r0, r3
 80193f0:	f7f5 fb6c 	bl	800eacc <lwip_htons>
 80193f4:	4603      	mov	r3, r0
 80193f6:	461a      	mov	r2, r3
 80193f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193fa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80193fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193fe:	2200      	movs	r2, #0
 8019400:	719a      	strb	r2, [r3, #6]
 8019402:	2200      	movs	r2, #0
 8019404:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8019406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019408:	2200      	movs	r2, #0
 801940a:	729a      	strb	r2, [r3, #10]
 801940c:	2200      	movs	r2, #0
 801940e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8019410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019412:	685b      	ldr	r3, [r3, #4]
 8019414:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8019416:	e00d      	b.n	8019434 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8019418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801941a:	685b      	ldr	r3, [r3, #4]
 801941c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801941e:	2114      	movs	r1, #20
 8019420:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8019422:	f7f6 fdfd 	bl	8010020 <pbuf_remove_header>
      pbuf_cat(p, r);
 8019426:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019428:	6878      	ldr	r0, [r7, #4]
 801942a:	f7f6 ff4d 	bl	80102c8 <pbuf_cat>
      r = iprh->next_pbuf;
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8019434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019436:	2b00      	cmp	r3, #0
 8019438:	d1ee      	bne.n	8019418 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801943a:	4b35      	ldr	r3, [pc, #212]	; (8019510 <ip4_reass+0x310>)
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019440:	429a      	cmp	r2, r3
 8019442:	d102      	bne.n	801944a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8019444:	2300      	movs	r3, #0
 8019446:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019448:	e010      	b.n	801946c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801944a:	4b31      	ldr	r3, [pc, #196]	; (8019510 <ip4_reass+0x310>)
 801944c:	681b      	ldr	r3, [r3, #0]
 801944e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019450:	e007      	b.n	8019462 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8019452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019454:	681b      	ldr	r3, [r3, #0]
 8019456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019458:	429a      	cmp	r2, r3
 801945a:	d006      	beq.n	801946a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801945c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019464:	2b00      	cmp	r3, #0
 8019466:	d1f4      	bne.n	8019452 <ip4_reass+0x252>
 8019468:	e000      	b.n	801946c <ip4_reass+0x26c>
          break;
 801946a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801946c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801946e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019470:	f7ff fd2e 	bl	8018ed0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8019474:	6878      	ldr	r0, [r7, #4]
 8019476:	f7f6 fee7 	bl	8010248 <pbuf_clen>
 801947a:	4603      	mov	r3, r0
 801947c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801947e:	4b23      	ldr	r3, [pc, #140]	; (801950c <ip4_reass+0x30c>)
 8019480:	881b      	ldrh	r3, [r3, #0]
 8019482:	8c3a      	ldrh	r2, [r7, #32]
 8019484:	429a      	cmp	r2, r3
 8019486:	d906      	bls.n	8019496 <ip4_reass+0x296>
 8019488:	4b22      	ldr	r3, [pc, #136]	; (8019514 <ip4_reass+0x314>)
 801948a:	f240 229b 	movw	r2, #667	; 0x29b
 801948e:	4922      	ldr	r1, [pc, #136]	; (8019518 <ip4_reass+0x318>)
 8019490:	4822      	ldr	r0, [pc, #136]	; (801951c <ip4_reass+0x31c>)
 8019492:	f001 fca9 	bl	801ade8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8019496:	4b1d      	ldr	r3, [pc, #116]	; (801950c <ip4_reass+0x30c>)
 8019498:	881a      	ldrh	r2, [r3, #0]
 801949a:	8c3b      	ldrh	r3, [r7, #32]
 801949c:	1ad3      	subs	r3, r2, r3
 801949e:	b29a      	uxth	r2, r3
 80194a0:	4b1a      	ldr	r3, [pc, #104]	; (801950c <ip4_reass+0x30c>)
 80194a2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	e02c      	b.n	8019502 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80194a8:	2300      	movs	r3, #0
 80194aa:	e02a      	b.n	8019502 <ip4_reass+0x302>

nullreturn_ipr:
 80194ac:	bf00      	nop
 80194ae:	e000      	b.n	80194b2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80194b0:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80194b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	d106      	bne.n	80194c6 <ip4_reass+0x2c6>
 80194b8:	4b16      	ldr	r3, [pc, #88]	; (8019514 <ip4_reass+0x314>)
 80194ba:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80194be:	4918      	ldr	r1, [pc, #96]	; (8019520 <ip4_reass+0x320>)
 80194c0:	4816      	ldr	r0, [pc, #88]	; (801951c <ip4_reass+0x31c>)
 80194c2:	f001 fc91 	bl	801ade8 <iprintf>
  if (ipr->p == NULL) {
 80194c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194c8:	685b      	ldr	r3, [r3, #4]
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	d114      	bne.n	80194f8 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80194ce:	4b10      	ldr	r3, [pc, #64]	; (8019510 <ip4_reass+0x310>)
 80194d0:	681b      	ldr	r3, [r3, #0]
 80194d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80194d4:	429a      	cmp	r2, r3
 80194d6:	d006      	beq.n	80194e6 <ip4_reass+0x2e6>
 80194d8:	4b0e      	ldr	r3, [pc, #56]	; (8019514 <ip4_reass+0x314>)
 80194da:	f240 22ab 	movw	r2, #683	; 0x2ab
 80194de:	4911      	ldr	r1, [pc, #68]	; (8019524 <ip4_reass+0x324>)
 80194e0:	480e      	ldr	r0, [pc, #56]	; (801951c <ip4_reass+0x31c>)
 80194e2:	f001 fc81 	bl	801ade8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80194e6:	2100      	movs	r1, #0
 80194e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80194ea:	f7ff fcf1 	bl	8018ed0 <ip_reass_dequeue_datagram>
 80194ee:	e004      	b.n	80194fa <ip4_reass+0x2fa>
    goto nullreturn;
 80194f0:	bf00      	nop
 80194f2:	e002      	b.n	80194fa <ip4_reass+0x2fa>
    goto nullreturn;
 80194f4:	bf00      	nop
 80194f6:	e000      	b.n	80194fa <ip4_reass+0x2fa>
  }

nullreturn:
 80194f8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80194fa:	6878      	ldr	r0, [r7, #4]
 80194fc:	f7f6 fe16 	bl	801012c <pbuf_free>
  return NULL;
 8019500:	2300      	movs	r3, #0
}
 8019502:	4618      	mov	r0, r3
 8019504:	3738      	adds	r7, #56	; 0x38
 8019506:	46bd      	mov	sp, r7
 8019508:	bd80      	pop	{r7, pc}
 801950a:	bf00      	nop
 801950c:	200009cc 	.word	0x200009cc
 8019510:	200009c8 	.word	0x200009c8
 8019514:	08022b14 	.word	0x08022b14
 8019518:	08022c84 	.word	0x08022c84
 801951c:	08022b5c 	.word	0x08022b5c
 8019520:	08022ca0 	.word	0x08022ca0
 8019524:	08022cac 	.word	0x08022cac

08019528 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8019528:	b580      	push	{r7, lr}
 801952a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801952c:	2005      	movs	r0, #5
 801952e:	f7f5 ff83 	bl	800f438 <memp_malloc>
 8019532:	4603      	mov	r3, r0
}
 8019534:	4618      	mov	r0, r3
 8019536:	bd80      	pop	{r7, pc}

08019538 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8019538:	b580      	push	{r7, lr}
 801953a:	b082      	sub	sp, #8
 801953c:	af00      	add	r7, sp, #0
 801953e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	2b00      	cmp	r3, #0
 8019544:	d106      	bne.n	8019554 <ip_frag_free_pbuf_custom_ref+0x1c>
 8019546:	4b07      	ldr	r3, [pc, #28]	; (8019564 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8019548:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801954c:	4906      	ldr	r1, [pc, #24]	; (8019568 <ip_frag_free_pbuf_custom_ref+0x30>)
 801954e:	4807      	ldr	r0, [pc, #28]	; (801956c <ip_frag_free_pbuf_custom_ref+0x34>)
 8019550:	f001 fc4a 	bl	801ade8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8019554:	6879      	ldr	r1, [r7, #4]
 8019556:	2005      	movs	r0, #5
 8019558:	f7f5 ffc0 	bl	800f4dc <memp_free>
}
 801955c:	bf00      	nop
 801955e:	3708      	adds	r7, #8
 8019560:	46bd      	mov	sp, r7
 8019562:	bd80      	pop	{r7, pc}
 8019564:	08022b14 	.word	0x08022b14
 8019568:	08022ccc 	.word	0x08022ccc
 801956c:	08022b5c 	.word	0x08022b5c

08019570 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019570:	b580      	push	{r7, lr}
 8019572:	b084      	sub	sp, #16
 8019574:	af00      	add	r7, sp, #0
 8019576:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801957c:	68fb      	ldr	r3, [r7, #12]
 801957e:	2b00      	cmp	r3, #0
 8019580:	d106      	bne.n	8019590 <ipfrag_free_pbuf_custom+0x20>
 8019582:	4b11      	ldr	r3, [pc, #68]	; (80195c8 <ipfrag_free_pbuf_custom+0x58>)
 8019584:	f240 22ce 	movw	r2, #718	; 0x2ce
 8019588:	4910      	ldr	r1, [pc, #64]	; (80195cc <ipfrag_free_pbuf_custom+0x5c>)
 801958a:	4811      	ldr	r0, [pc, #68]	; (80195d0 <ipfrag_free_pbuf_custom+0x60>)
 801958c:	f001 fc2c 	bl	801ade8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019590:	68fa      	ldr	r2, [r7, #12]
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	429a      	cmp	r2, r3
 8019596:	d006      	beq.n	80195a6 <ipfrag_free_pbuf_custom+0x36>
 8019598:	4b0b      	ldr	r3, [pc, #44]	; (80195c8 <ipfrag_free_pbuf_custom+0x58>)
 801959a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801959e:	490d      	ldr	r1, [pc, #52]	; (80195d4 <ipfrag_free_pbuf_custom+0x64>)
 80195a0:	480b      	ldr	r0, [pc, #44]	; (80195d0 <ipfrag_free_pbuf_custom+0x60>)
 80195a2:	f001 fc21 	bl	801ade8 <iprintf>
  if (pcr->original != NULL) {
 80195a6:	68fb      	ldr	r3, [r7, #12]
 80195a8:	695b      	ldr	r3, [r3, #20]
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d004      	beq.n	80195b8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80195ae:	68fb      	ldr	r3, [r7, #12]
 80195b0:	695b      	ldr	r3, [r3, #20]
 80195b2:	4618      	mov	r0, r3
 80195b4:	f7f6 fdba 	bl	801012c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80195b8:	68f8      	ldr	r0, [r7, #12]
 80195ba:	f7ff ffbd 	bl	8019538 <ip_frag_free_pbuf_custom_ref>
}
 80195be:	bf00      	nop
 80195c0:	3710      	adds	r7, #16
 80195c2:	46bd      	mov	sp, r7
 80195c4:	bd80      	pop	{r7, pc}
 80195c6:	bf00      	nop
 80195c8:	08022b14 	.word	0x08022b14
 80195cc:	08022cd8 	.word	0x08022cd8
 80195d0:	08022b5c 	.word	0x08022b5c
 80195d4:	08022ce4 	.word	0x08022ce4

080195d8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80195d8:	b580      	push	{r7, lr}
 80195da:	b094      	sub	sp, #80	; 0x50
 80195dc:	af02      	add	r7, sp, #8
 80195de:	60f8      	str	r0, [r7, #12]
 80195e0:	60b9      	str	r1, [r7, #8]
 80195e2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80195e4:	2300      	movs	r3, #0
 80195e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80195ea:	68bb      	ldr	r3, [r7, #8]
 80195ec:	8c1b      	ldrh	r3, [r3, #32]
 80195ee:	3b14      	subs	r3, #20
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	da00      	bge.n	80195f6 <ip4_frag+0x1e>
 80195f4:	3307      	adds	r3, #7
 80195f6:	10db      	asrs	r3, r3, #3
 80195f8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80195fa:	2314      	movs	r3, #20
 80195fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80195fe:	68fb      	ldr	r3, [r7, #12]
 8019600:	685b      	ldr	r3, [r3, #4]
 8019602:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8019604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019606:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8019608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801960a:	781b      	ldrb	r3, [r3, #0]
 801960c:	f003 030f 	and.w	r3, r3, #15
 8019610:	b2db      	uxtb	r3, r3
 8019612:	009b      	lsls	r3, r3, #2
 8019614:	b2db      	uxtb	r3, r3
 8019616:	2b14      	cmp	r3, #20
 8019618:	d002      	beq.n	8019620 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801961a:	f06f 0305 	mvn.w	r3, #5
 801961e:	e10f      	b.n	8019840 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	895b      	ldrh	r3, [r3, #10]
 8019624:	2b13      	cmp	r3, #19
 8019626:	d809      	bhi.n	801963c <ip4_frag+0x64>
 8019628:	4b87      	ldr	r3, [pc, #540]	; (8019848 <ip4_frag+0x270>)
 801962a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801962e:	4987      	ldr	r1, [pc, #540]	; (801984c <ip4_frag+0x274>)
 8019630:	4887      	ldr	r0, [pc, #540]	; (8019850 <ip4_frag+0x278>)
 8019632:	f001 fbd9 	bl	801ade8 <iprintf>
 8019636:	f06f 0305 	mvn.w	r3, #5
 801963a:	e101      	b.n	8019840 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801963c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801963e:	88db      	ldrh	r3, [r3, #6]
 8019640:	b29b      	uxth	r3, r3
 8019642:	4618      	mov	r0, r3
 8019644:	f7f5 fa42 	bl	800eacc <lwip_htons>
 8019648:	4603      	mov	r3, r0
 801964a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801964c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801964e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019652:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8019656:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801965c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801965e:	68fb      	ldr	r3, [r7, #12]
 8019660:	891b      	ldrh	r3, [r3, #8]
 8019662:	3b14      	subs	r3, #20
 8019664:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8019668:	e0e0      	b.n	801982c <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801966a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801966c:	00db      	lsls	r3, r3, #3
 801966e:	b29b      	uxth	r3, r3
 8019670:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019674:	4293      	cmp	r3, r2
 8019676:	bf28      	it	cs
 8019678:	4613      	movcs	r3, r2
 801967a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801967c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019680:	2114      	movs	r1, #20
 8019682:	200e      	movs	r0, #14
 8019684:	f7f6 fa72 	bl	800fb6c <pbuf_alloc>
 8019688:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801968a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801968c:	2b00      	cmp	r3, #0
 801968e:	f000 80d4 	beq.w	801983a <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019694:	895b      	ldrh	r3, [r3, #10]
 8019696:	2b13      	cmp	r3, #19
 8019698:	d806      	bhi.n	80196a8 <ip4_frag+0xd0>
 801969a:	4b6b      	ldr	r3, [pc, #428]	; (8019848 <ip4_frag+0x270>)
 801969c:	f240 3225 	movw	r2, #805	; 0x325
 80196a0:	496c      	ldr	r1, [pc, #432]	; (8019854 <ip4_frag+0x27c>)
 80196a2:	486b      	ldr	r0, [pc, #428]	; (8019850 <ip4_frag+0x278>)
 80196a4:	f001 fba0 	bl	801ade8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80196a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196aa:	685b      	ldr	r3, [r3, #4]
 80196ac:	2214      	movs	r2, #20
 80196ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80196b0:	4618      	mov	r0, r3
 80196b2:	f000 fcb0 	bl	801a016 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80196b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196b8:	685b      	ldr	r3, [r3, #4]
 80196ba:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80196bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80196be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80196c2:	e064      	b.n	801978e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80196c4:	68fb      	ldr	r3, [r7, #12]
 80196c6:	895a      	ldrh	r2, [r3, #10]
 80196c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80196ca:	1ad3      	subs	r3, r2, r3
 80196cc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80196ce:	68fb      	ldr	r3, [r7, #12]
 80196d0:	895b      	ldrh	r3, [r3, #10]
 80196d2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80196d4:	429a      	cmp	r2, r3
 80196d6:	d906      	bls.n	80196e6 <ip4_frag+0x10e>
 80196d8:	4b5b      	ldr	r3, [pc, #364]	; (8019848 <ip4_frag+0x270>)
 80196da:	f240 322d 	movw	r2, #813	; 0x32d
 80196de:	495e      	ldr	r1, [pc, #376]	; (8019858 <ip4_frag+0x280>)
 80196e0:	485b      	ldr	r0, [pc, #364]	; (8019850 <ip4_frag+0x278>)
 80196e2:	f001 fb81 	bl	801ade8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80196e6:	8bfa      	ldrh	r2, [r7, #30]
 80196e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80196ec:	4293      	cmp	r3, r2
 80196ee:	bf28      	it	cs
 80196f0:	4613      	movcs	r3, r2
 80196f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80196f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d105      	bne.n	801970a <ip4_frag+0x132>
        poff = 0;
 80196fe:	2300      	movs	r3, #0
 8019700:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	681b      	ldr	r3, [r3, #0]
 8019706:	60fb      	str	r3, [r7, #12]
        continue;
 8019708:	e041      	b.n	801978e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801970a:	f7ff ff0d 	bl	8019528 <ip_frag_alloc_pbuf_custom_ref>
 801970e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8019710:	69bb      	ldr	r3, [r7, #24]
 8019712:	2b00      	cmp	r3, #0
 8019714:	d103      	bne.n	801971e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8019716:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019718:	f7f6 fd08 	bl	801012c <pbuf_free>
        goto memerr;
 801971c:	e08e      	b.n	801983c <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801971e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019720:	68fb      	ldr	r3, [r7, #12]
 8019722:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019724:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019726:	4413      	add	r3, r2
 8019728:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801972c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8019730:	9201      	str	r2, [sp, #4]
 8019732:	9300      	str	r3, [sp, #0]
 8019734:	4603      	mov	r3, r0
 8019736:	2241      	movs	r2, #65	; 0x41
 8019738:	2000      	movs	r0, #0
 801973a:	f7f6 fb3d 	bl	800fdb8 <pbuf_alloced_custom>
 801973e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019740:	697b      	ldr	r3, [r7, #20]
 8019742:	2b00      	cmp	r3, #0
 8019744:	d106      	bne.n	8019754 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8019746:	69b8      	ldr	r0, [r7, #24]
 8019748:	f7ff fef6 	bl	8019538 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801974c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801974e:	f7f6 fced 	bl	801012c <pbuf_free>
        goto memerr;
 8019752:	e073      	b.n	801983c <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8019754:	68f8      	ldr	r0, [r7, #12]
 8019756:	f7f6 fd8f 	bl	8010278 <pbuf_ref>
      pcr->original = p;
 801975a:	69bb      	ldr	r3, [r7, #24]
 801975c:	68fa      	ldr	r2, [r7, #12]
 801975e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019760:	69bb      	ldr	r3, [r7, #24]
 8019762:	4a3e      	ldr	r2, [pc, #248]	; (801985c <ip4_frag+0x284>)
 8019764:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8019766:	6979      	ldr	r1, [r7, #20]
 8019768:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801976a:	f7f6 fdad 	bl	80102c8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801976e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8019772:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019776:	1ad3      	subs	r3, r2, r3
 8019778:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801977c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019780:	2b00      	cmp	r3, #0
 8019782:	d004      	beq.n	801978e <ip4_frag+0x1b6>
        poff = 0;
 8019784:	2300      	movs	r3, #0
 8019786:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019788:	68fb      	ldr	r3, [r7, #12]
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801978e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019792:	2b00      	cmp	r3, #0
 8019794:	d196      	bne.n	80196c4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8019796:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019798:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801979c:	4413      	add	r3, r2
 801979e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80197a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80197a4:	68bb      	ldr	r3, [r7, #8]
 80197a6:	8c1b      	ldrh	r3, [r3, #32]
 80197a8:	3b14      	subs	r3, #20
 80197aa:	429a      	cmp	r2, r3
 80197ac:	bfd4      	ite	le
 80197ae:	2301      	movle	r3, #1
 80197b0:	2300      	movgt	r3, #0
 80197b2:	b2db      	uxtb	r3, r3
 80197b4:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80197b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80197ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80197be:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80197c0:	6a3b      	ldr	r3, [r7, #32]
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	d002      	beq.n	80197cc <ip4_frag+0x1f4>
 80197c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	d003      	beq.n	80197d4 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80197cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80197ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80197d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80197d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80197d6:	4618      	mov	r0, r3
 80197d8:	f7f5 f978 	bl	800eacc <lwip_htons>
 80197dc:	4603      	mov	r3, r0
 80197de:	461a      	mov	r2, r3
 80197e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197e2:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80197e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80197e6:	3314      	adds	r3, #20
 80197e8:	b29b      	uxth	r3, r3
 80197ea:	4618      	mov	r0, r3
 80197ec:	f7f5 f96e 	bl	800eacc <lwip_htons>
 80197f0:	4603      	mov	r3, r0
 80197f2:	461a      	mov	r2, r3
 80197f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197f6:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80197f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197fa:	2200      	movs	r2, #0
 80197fc:	729a      	strb	r2, [r3, #10]
 80197fe:	2200      	movs	r2, #0
 8019800:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8019802:	68bb      	ldr	r3, [r7, #8]
 8019804:	695b      	ldr	r3, [r3, #20]
 8019806:	687a      	ldr	r2, [r7, #4]
 8019808:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801980a:	68b8      	ldr	r0, [r7, #8]
 801980c:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801980e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019810:	f7f6 fc8c 	bl	801012c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8019814:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019818:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801981a:	1ad3      	subs	r3, r2, r3
 801981c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8019820:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8019824:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019826:	4413      	add	r3, r2
 8019828:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801982c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019830:	2b00      	cmp	r3, #0
 8019832:	f47f af1a 	bne.w	801966a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019836:	2300      	movs	r3, #0
 8019838:	e002      	b.n	8019840 <ip4_frag+0x268>
      goto memerr;
 801983a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801983c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019840:	4618      	mov	r0, r3
 8019842:	3748      	adds	r7, #72	; 0x48
 8019844:	46bd      	mov	sp, r7
 8019846:	bd80      	pop	{r7, pc}
 8019848:	08022b14 	.word	0x08022b14
 801984c:	08022cf0 	.word	0x08022cf0
 8019850:	08022b5c 	.word	0x08022b5c
 8019854:	08022d0c 	.word	0x08022d0c
 8019858:	08022d2c 	.word	0x08022d2c
 801985c:	08019571 	.word	0x08019571

08019860 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019860:	b580      	push	{r7, lr}
 8019862:	b086      	sub	sp, #24
 8019864:	af00      	add	r7, sp, #0
 8019866:	6078      	str	r0, [r7, #4]
 8019868:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801986a:	230e      	movs	r3, #14
 801986c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	895b      	ldrh	r3, [r3, #10]
 8019872:	2b0e      	cmp	r3, #14
 8019874:	d96e      	bls.n	8019954 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	7bdb      	ldrb	r3, [r3, #15]
 801987a:	2b00      	cmp	r3, #0
 801987c:	d106      	bne.n	801988c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801987e:	683b      	ldr	r3, [r7, #0]
 8019880:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019884:	3301      	adds	r3, #1
 8019886:	b2da      	uxtb	r2, r3
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	685b      	ldr	r3, [r3, #4]
 8019890:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8019892:	693b      	ldr	r3, [r7, #16]
 8019894:	7b1a      	ldrb	r2, [r3, #12]
 8019896:	7b5b      	ldrb	r3, [r3, #13]
 8019898:	021b      	lsls	r3, r3, #8
 801989a:	4313      	orrs	r3, r2
 801989c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801989e:	693b      	ldr	r3, [r7, #16]
 80198a0:	781b      	ldrb	r3, [r3, #0]
 80198a2:	f003 0301 	and.w	r3, r3, #1
 80198a6:	2b00      	cmp	r3, #0
 80198a8:	d023      	beq.n	80198f2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80198aa:	693b      	ldr	r3, [r7, #16]
 80198ac:	781b      	ldrb	r3, [r3, #0]
 80198ae:	2b01      	cmp	r3, #1
 80198b0:	d10f      	bne.n	80198d2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80198b2:	693b      	ldr	r3, [r7, #16]
 80198b4:	785b      	ldrb	r3, [r3, #1]
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	d11b      	bne.n	80198f2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80198ba:	693b      	ldr	r3, [r7, #16]
 80198bc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80198be:	2b5e      	cmp	r3, #94	; 0x5e
 80198c0:	d117      	bne.n	80198f2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	7b5b      	ldrb	r3, [r3, #13]
 80198c6:	f043 0310 	orr.w	r3, r3, #16
 80198ca:	b2da      	uxtb	r2, r3
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	735a      	strb	r2, [r3, #13]
 80198d0:	e00f      	b.n	80198f2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80198d2:	693b      	ldr	r3, [r7, #16]
 80198d4:	2206      	movs	r2, #6
 80198d6:	4928      	ldr	r1, [pc, #160]	; (8019978 <ethernet_input+0x118>)
 80198d8:	4618      	mov	r0, r3
 80198da:	f000 fb8d 	bl	8019ff8 <memcmp>
 80198de:	4603      	mov	r3, r0
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d106      	bne.n	80198f2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	7b5b      	ldrb	r3, [r3, #13]
 80198e8:	f043 0308 	orr.w	r3, r3, #8
 80198ec:	b2da      	uxtb	r2, r3
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80198f2:	89fb      	ldrh	r3, [r7, #14]
 80198f4:	2b08      	cmp	r3, #8
 80198f6:	d003      	beq.n	8019900 <ethernet_input+0xa0>
 80198f8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80198fc:	d014      	beq.n	8019928 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80198fe:	e032      	b.n	8019966 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019900:	683b      	ldr	r3, [r7, #0]
 8019902:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019906:	f003 0308 	and.w	r3, r3, #8
 801990a:	2b00      	cmp	r3, #0
 801990c:	d024      	beq.n	8019958 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801990e:	8afb      	ldrh	r3, [r7, #22]
 8019910:	4619      	mov	r1, r3
 8019912:	6878      	ldr	r0, [r7, #4]
 8019914:	f7f6 fb84 	bl	8010020 <pbuf_remove_header>
 8019918:	4603      	mov	r3, r0
 801991a:	2b00      	cmp	r3, #0
 801991c:	d11e      	bne.n	801995c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801991e:	6839      	ldr	r1, [r7, #0]
 8019920:	6878      	ldr	r0, [r7, #4]
 8019922:	f7fe ff2d 	bl	8018780 <ip4_input>
      break;
 8019926:	e013      	b.n	8019950 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019928:	683b      	ldr	r3, [r7, #0]
 801992a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801992e:	f003 0308 	and.w	r3, r3, #8
 8019932:	2b00      	cmp	r3, #0
 8019934:	d014      	beq.n	8019960 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019936:	8afb      	ldrh	r3, [r7, #22]
 8019938:	4619      	mov	r1, r3
 801993a:	6878      	ldr	r0, [r7, #4]
 801993c:	f7f6 fb70 	bl	8010020 <pbuf_remove_header>
 8019940:	4603      	mov	r3, r0
 8019942:	2b00      	cmp	r3, #0
 8019944:	d10e      	bne.n	8019964 <ethernet_input+0x104>
        etharp_input(p, netif);
 8019946:	6839      	ldr	r1, [r7, #0]
 8019948:	6878      	ldr	r0, [r7, #4]
 801994a:	f7fe f8cd 	bl	8017ae8 <etharp_input>
      break;
 801994e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019950:	2300      	movs	r3, #0
 8019952:	e00c      	b.n	801996e <ethernet_input+0x10e>
    goto free_and_return;
 8019954:	bf00      	nop
 8019956:	e006      	b.n	8019966 <ethernet_input+0x106>
        goto free_and_return;
 8019958:	bf00      	nop
 801995a:	e004      	b.n	8019966 <ethernet_input+0x106>
        goto free_and_return;
 801995c:	bf00      	nop
 801995e:	e002      	b.n	8019966 <ethernet_input+0x106>
        goto free_and_return;
 8019960:	bf00      	nop
 8019962:	e000      	b.n	8019966 <ethernet_input+0x106>
        goto free_and_return;
 8019964:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019966:	6878      	ldr	r0, [r7, #4]
 8019968:	f7f6 fbe0 	bl	801012c <pbuf_free>
  return ERR_OK;
 801996c:	2300      	movs	r3, #0
}
 801996e:	4618      	mov	r0, r3
 8019970:	3718      	adds	r7, #24
 8019972:	46bd      	mov	sp, r7
 8019974:	bd80      	pop	{r7, pc}
 8019976:	bf00      	nop
 8019978:	08024700 	.word	0x08024700

0801997c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801997c:	b580      	push	{r7, lr}
 801997e:	b086      	sub	sp, #24
 8019980:	af00      	add	r7, sp, #0
 8019982:	60f8      	str	r0, [r7, #12]
 8019984:	60b9      	str	r1, [r7, #8]
 8019986:	607a      	str	r2, [r7, #4]
 8019988:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801998a:	8c3b      	ldrh	r3, [r7, #32]
 801998c:	4618      	mov	r0, r3
 801998e:	f7f5 f89d 	bl	800eacc <lwip_htons>
 8019992:	4603      	mov	r3, r0
 8019994:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8019996:	210e      	movs	r1, #14
 8019998:	68b8      	ldr	r0, [r7, #8]
 801999a:	f7f6 fb31 	bl	8010000 <pbuf_add_header>
 801999e:	4603      	mov	r3, r0
 80199a0:	2b00      	cmp	r3, #0
 80199a2:	d125      	bne.n	80199f0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80199a4:	68bb      	ldr	r3, [r7, #8]
 80199a6:	685b      	ldr	r3, [r3, #4]
 80199a8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80199aa:	693b      	ldr	r3, [r7, #16]
 80199ac:	8afa      	ldrh	r2, [r7, #22]
 80199ae:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80199b0:	693b      	ldr	r3, [r7, #16]
 80199b2:	2206      	movs	r2, #6
 80199b4:	6839      	ldr	r1, [r7, #0]
 80199b6:	4618      	mov	r0, r3
 80199b8:	f000 fb2d 	bl	801a016 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80199bc:	693b      	ldr	r3, [r7, #16]
 80199be:	3306      	adds	r3, #6
 80199c0:	2206      	movs	r2, #6
 80199c2:	6879      	ldr	r1, [r7, #4]
 80199c4:	4618      	mov	r0, r3
 80199c6:	f000 fb26 	bl	801a016 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80199ca:	68fb      	ldr	r3, [r7, #12]
 80199cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80199d0:	2b06      	cmp	r3, #6
 80199d2:	d006      	beq.n	80199e2 <ethernet_output+0x66>
 80199d4:	4b0a      	ldr	r3, [pc, #40]	; (8019a00 <ethernet_output+0x84>)
 80199d6:	f240 1233 	movw	r2, #307	; 0x133
 80199da:	490a      	ldr	r1, [pc, #40]	; (8019a04 <ethernet_output+0x88>)
 80199dc:	480a      	ldr	r0, [pc, #40]	; (8019a08 <ethernet_output+0x8c>)
 80199de:	f001 fa03 	bl	801ade8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80199e2:	68fb      	ldr	r3, [r7, #12]
 80199e4:	699b      	ldr	r3, [r3, #24]
 80199e6:	68b9      	ldr	r1, [r7, #8]
 80199e8:	68f8      	ldr	r0, [r7, #12]
 80199ea:	4798      	blx	r3
 80199ec:	4603      	mov	r3, r0
 80199ee:	e002      	b.n	80199f6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80199f0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80199f2:	f06f 0301 	mvn.w	r3, #1
}
 80199f6:	4618      	mov	r0, r3
 80199f8:	3718      	adds	r7, #24
 80199fa:	46bd      	mov	sp, r7
 80199fc:	bd80      	pop	{r7, pc}
 80199fe:	bf00      	nop
 8019a00:	08022d3c 	.word	0x08022d3c
 8019a04:	08022d74 	.word	0x08022d74
 8019a08:	08022da8 	.word	0x08022da8

08019a0c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019a0c:	b580      	push	{r7, lr}
 8019a0e:	b086      	sub	sp, #24
 8019a10:	af00      	add	r7, sp, #0
 8019a12:	6078      	str	r0, [r7, #4]
 8019a14:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8019a16:	683b      	ldr	r3, [r7, #0]
 8019a18:	60bb      	str	r3, [r7, #8]
 8019a1a:	2304      	movs	r3, #4
 8019a1c:	60fb      	str	r3, [r7, #12]
 8019a1e:	2300      	movs	r3, #0
 8019a20:	613b      	str	r3, [r7, #16]
 8019a22:	2300      	movs	r3, #0
 8019a24:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8019a26:	f107 0308 	add.w	r3, r7, #8
 8019a2a:	2100      	movs	r1, #0
 8019a2c:	4618      	mov	r0, r3
 8019a2e:	f7f0 f926 	bl	8009c7e <osMessageCreate>
 8019a32:	4602      	mov	r2, r0
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	681b      	ldr	r3, [r3, #0]
 8019a3c:	2b00      	cmp	r3, #0
 8019a3e:	d102      	bne.n	8019a46 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8019a40:	f04f 33ff 	mov.w	r3, #4294967295
 8019a44:	e000      	b.n	8019a48 <sys_mbox_new+0x3c>

  return ERR_OK;
 8019a46:	2300      	movs	r3, #0
}
 8019a48:	4618      	mov	r0, r3
 8019a4a:	3718      	adds	r7, #24
 8019a4c:	46bd      	mov	sp, r7
 8019a4e:	bd80      	pop	{r7, pc}

08019a50 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8019a50:	b580      	push	{r7, lr}
 8019a52:	b082      	sub	sp, #8
 8019a54:	af00      	add	r7, sp, #0
 8019a56:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	681b      	ldr	r3, [r3, #0]
 8019a5c:	4618      	mov	r0, r3
 8019a5e:	f7f0 f9eb 	bl	8009e38 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	4618      	mov	r0, r3
 8019a68:	f7f0 f9fc 	bl	8009e64 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8019a6c:	bf00      	nop
 8019a6e:	3708      	adds	r7, #8
 8019a70:	46bd      	mov	sp, r7
 8019a72:	bd80      	pop	{r7, pc}

08019a74 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019a74:	b580      	push	{r7, lr}
 8019a76:	b084      	sub	sp, #16
 8019a78:	af00      	add	r7, sp, #0
 8019a7a:	6078      	str	r0, [r7, #4]
 8019a7c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	681b      	ldr	r3, [r3, #0]
 8019a82:	6839      	ldr	r1, [r7, #0]
 8019a84:	2200      	movs	r2, #0
 8019a86:	4618      	mov	r0, r3
 8019a88:	f7f0 f922 	bl	8009cd0 <osMessagePut>
 8019a8c:	4603      	mov	r3, r0
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d102      	bne.n	8019a98 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8019a92:	2300      	movs	r3, #0
 8019a94:	73fb      	strb	r3, [r7, #15]
 8019a96:	e001      	b.n	8019a9c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8019a98:	23ff      	movs	r3, #255	; 0xff
 8019a9a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8019a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019aa0:	4618      	mov	r0, r3
 8019aa2:	3710      	adds	r7, #16
 8019aa4:	46bd      	mov	sp, r7
 8019aa6:	bd80      	pop	{r7, pc}

08019aa8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8019aa8:	b580      	push	{r7, lr}
 8019aaa:	b08c      	sub	sp, #48	; 0x30
 8019aac:	af00      	add	r7, sp, #0
 8019aae:	61f8      	str	r0, [r7, #28]
 8019ab0:	61b9      	str	r1, [r7, #24]
 8019ab2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8019ab4:	f7ef ff00 	bl	80098b8 <osKernelSysTick>
 8019ab8:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8019aba:	697b      	ldr	r3, [r7, #20]
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d017      	beq.n	8019af0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8019ac0:	69fb      	ldr	r3, [r7, #28]
 8019ac2:	6819      	ldr	r1, [r3, #0]
 8019ac4:	f107 0320 	add.w	r3, r7, #32
 8019ac8:	697a      	ldr	r2, [r7, #20]
 8019aca:	4618      	mov	r0, r3
 8019acc:	f7f0 f940 	bl	8009d50 <osMessageGet>

    if(event.status == osEventMessage)
 8019ad0:	6a3b      	ldr	r3, [r7, #32]
 8019ad2:	2b10      	cmp	r3, #16
 8019ad4:	d109      	bne.n	8019aea <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8019ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ad8:	461a      	mov	r2, r3
 8019ada:	69bb      	ldr	r3, [r7, #24]
 8019adc:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8019ade:	f7ef feeb 	bl	80098b8 <osKernelSysTick>
 8019ae2:	4602      	mov	r2, r0
 8019ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ae6:	1ad3      	subs	r3, r2, r3
 8019ae8:	e019      	b.n	8019b1e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019aea:	f04f 33ff 	mov.w	r3, #4294967295
 8019aee:	e016      	b.n	8019b1e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8019af0:	69fb      	ldr	r3, [r7, #28]
 8019af2:	6819      	ldr	r1, [r3, #0]
 8019af4:	463b      	mov	r3, r7
 8019af6:	f04f 32ff 	mov.w	r2, #4294967295
 8019afa:	4618      	mov	r0, r3
 8019afc:	f7f0 f928 	bl	8009d50 <osMessageGet>
 8019b00:	f107 0320 	add.w	r3, r7, #32
 8019b04:	463a      	mov	r2, r7
 8019b06:	ca07      	ldmia	r2, {r0, r1, r2}
 8019b08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8019b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b0e:	461a      	mov	r2, r3
 8019b10:	69bb      	ldr	r3, [r7, #24]
 8019b12:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8019b14:	f7ef fed0 	bl	80098b8 <osKernelSysTick>
 8019b18:	4602      	mov	r2, r0
 8019b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b1c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8019b1e:	4618      	mov	r0, r3
 8019b20:	3730      	adds	r7, #48	; 0x30
 8019b22:	46bd      	mov	sp, r7
 8019b24:	bd80      	pop	{r7, pc}

08019b26 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8019b26:	b580      	push	{r7, lr}
 8019b28:	b086      	sub	sp, #24
 8019b2a:	af00      	add	r7, sp, #0
 8019b2c:	6078      	str	r0, [r7, #4]
 8019b2e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	6819      	ldr	r1, [r3, #0]
 8019b34:	f107 030c 	add.w	r3, r7, #12
 8019b38:	2200      	movs	r2, #0
 8019b3a:	4618      	mov	r0, r3
 8019b3c:	f7f0 f908 	bl	8009d50 <osMessageGet>

  if(event.status == osEventMessage)
 8019b40:	68fb      	ldr	r3, [r7, #12]
 8019b42:	2b10      	cmp	r3, #16
 8019b44:	d105      	bne.n	8019b52 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8019b46:	693b      	ldr	r3, [r7, #16]
 8019b48:	461a      	mov	r2, r3
 8019b4a:	683b      	ldr	r3, [r7, #0]
 8019b4c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8019b4e:	2300      	movs	r3, #0
 8019b50:	e001      	b.n	8019b56 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8019b52:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8019b56:	4618      	mov	r0, r3
 8019b58:	3718      	adds	r7, #24
 8019b5a:	46bd      	mov	sp, r7
 8019b5c:	bd80      	pop	{r7, pc}

08019b5e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8019b5e:	b480      	push	{r7}
 8019b60:	b083      	sub	sp, #12
 8019b62:	af00      	add	r7, sp, #0
 8019b64:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d101      	bne.n	8019b72 <sys_mbox_valid+0x14>
    return 0;
 8019b6e:	2300      	movs	r3, #0
 8019b70:	e000      	b.n	8019b74 <sys_mbox_valid+0x16>
  else
    return 1;
 8019b72:	2301      	movs	r3, #1
}
 8019b74:	4618      	mov	r0, r3
 8019b76:	370c      	adds	r7, #12
 8019b78:	46bd      	mov	sp, r7
 8019b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b7e:	4770      	bx	lr

08019b80 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8019b80:	b480      	push	{r7}
 8019b82:	b083      	sub	sp, #12
 8019b84:	af00      	add	r7, sp, #0
 8019b86:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	2200      	movs	r2, #0
 8019b8c:	601a      	str	r2, [r3, #0]
}
 8019b8e:	bf00      	nop
 8019b90:	370c      	adds	r7, #12
 8019b92:	46bd      	mov	sp, r7
 8019b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b98:	4770      	bx	lr

08019b9a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8019b9a:	b580      	push	{r7, lr}
 8019b9c:	b084      	sub	sp, #16
 8019b9e:	af00      	add	r7, sp, #0
 8019ba0:	6078      	str	r0, [r7, #4]
 8019ba2:	460b      	mov	r3, r1
 8019ba4:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8019ba6:	2300      	movs	r3, #0
 8019ba8:	60bb      	str	r3, [r7, #8]
 8019baa:	2300      	movs	r3, #0
 8019bac:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8019bae:	f107 0308 	add.w	r3, r7, #8
 8019bb2:	2101      	movs	r1, #1
 8019bb4:	4618      	mov	r0, r3
 8019bb6:	f7ef ff97 	bl	8009ae8 <osSemaphoreCreate>
 8019bba:	4602      	mov	r2, r0
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	d102      	bne.n	8019bce <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8019bcc:	e009      	b.n	8019be2 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8019bce:	78fb      	ldrb	r3, [r7, #3]
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	d105      	bne.n	8019be0 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	2100      	movs	r1, #0
 8019bda:	4618      	mov	r0, r3
 8019bdc:	f7ef ffb8 	bl	8009b50 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8019be0:	2300      	movs	r3, #0
}
 8019be2:	4618      	mov	r0, r3
 8019be4:	3710      	adds	r7, #16
 8019be6:	46bd      	mov	sp, r7
 8019be8:	bd80      	pop	{r7, pc}

08019bea <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8019bea:	b580      	push	{r7, lr}
 8019bec:	b084      	sub	sp, #16
 8019bee:	af00      	add	r7, sp, #0
 8019bf0:	6078      	str	r0, [r7, #4]
 8019bf2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8019bf4:	f7ef fe60 	bl	80098b8 <osKernelSysTick>
 8019bf8:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8019bfa:	683b      	ldr	r3, [r7, #0]
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d011      	beq.n	8019c24 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	681b      	ldr	r3, [r3, #0]
 8019c04:	6839      	ldr	r1, [r7, #0]
 8019c06:	4618      	mov	r0, r3
 8019c08:	f7ef ffa2 	bl	8009b50 <osSemaphoreWait>
 8019c0c:	4603      	mov	r3, r0
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d105      	bne.n	8019c1e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8019c12:	f7ef fe51 	bl	80098b8 <osKernelSysTick>
 8019c16:	4602      	mov	r2, r0
 8019c18:	68fb      	ldr	r3, [r7, #12]
 8019c1a:	1ad3      	subs	r3, r2, r3
 8019c1c:	e012      	b.n	8019c44 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8019c22:	e00f      	b.n	8019c44 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8019c24:	bf00      	nop
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	f04f 31ff 	mov.w	r1, #4294967295
 8019c2e:	4618      	mov	r0, r3
 8019c30:	f7ef ff8e 	bl	8009b50 <osSemaphoreWait>
 8019c34:	4603      	mov	r3, r0
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	d1f5      	bne.n	8019c26 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8019c3a:	f7ef fe3d 	bl	80098b8 <osKernelSysTick>
 8019c3e:	4602      	mov	r2, r0
 8019c40:	68fb      	ldr	r3, [r7, #12]
 8019c42:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8019c44:	4618      	mov	r0, r3
 8019c46:	3710      	adds	r7, #16
 8019c48:	46bd      	mov	sp, r7
 8019c4a:	bd80      	pop	{r7, pc}

08019c4c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8019c4c:	b580      	push	{r7, lr}
 8019c4e:	b082      	sub	sp, #8
 8019c50:	af00      	add	r7, sp, #0
 8019c52:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	681b      	ldr	r3, [r3, #0]
 8019c58:	4618      	mov	r0, r3
 8019c5a:	f7ef ffc7 	bl	8009bec <osSemaphoreRelease>
}
 8019c5e:	bf00      	nop
 8019c60:	3708      	adds	r7, #8
 8019c62:	46bd      	mov	sp, r7
 8019c64:	bd80      	pop	{r7, pc}

08019c66 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8019c66:	b580      	push	{r7, lr}
 8019c68:	b082      	sub	sp, #8
 8019c6a:	af00      	add	r7, sp, #0
 8019c6c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	681b      	ldr	r3, [r3, #0]
 8019c72:	4618      	mov	r0, r3
 8019c74:	f7ef fff0 	bl	8009c58 <osSemaphoreDelete>
}
 8019c78:	bf00      	nop
 8019c7a:	3708      	adds	r7, #8
 8019c7c:	46bd      	mov	sp, r7
 8019c7e:	bd80      	pop	{r7, pc}

08019c80 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8019c80:	b480      	push	{r7}
 8019c82:	b083      	sub	sp, #12
 8019c84:	af00      	add	r7, sp, #0
 8019c86:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	681b      	ldr	r3, [r3, #0]
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	d101      	bne.n	8019c94 <sys_sem_valid+0x14>
    return 0;
 8019c90:	2300      	movs	r3, #0
 8019c92:	e000      	b.n	8019c96 <sys_sem_valid+0x16>
  else
    return 1;
 8019c94:	2301      	movs	r3, #1
}
 8019c96:	4618      	mov	r0, r3
 8019c98:	370c      	adds	r7, #12
 8019c9a:	46bd      	mov	sp, r7
 8019c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ca0:	4770      	bx	lr

08019ca2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8019ca2:	b480      	push	{r7}
 8019ca4:	b083      	sub	sp, #12
 8019ca6:	af00      	add	r7, sp, #0
 8019ca8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	2200      	movs	r2, #0
 8019cae:	601a      	str	r2, [r3, #0]
}
 8019cb0:	bf00      	nop
 8019cb2:	370c      	adds	r7, #12
 8019cb4:	46bd      	mov	sp, r7
 8019cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cba:	4770      	bx	lr

08019cbc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8019cbc:	b580      	push	{r7, lr}
 8019cbe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8019cc0:	4803      	ldr	r0, [pc, #12]	; (8019cd0 <sys_init+0x14>)
 8019cc2:	f7ef fe75 	bl	80099b0 <osMutexCreate>
 8019cc6:	4602      	mov	r2, r0
 8019cc8:	4b02      	ldr	r3, [pc, #8]	; (8019cd4 <sys_init+0x18>)
 8019cca:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8019ccc:	bf00      	nop
 8019cce:	bd80      	pop	{r7, pc}
 8019cd0:	08024710 	.word	0x08024710
 8019cd4:	20007cbc 	.word	0x20007cbc

08019cd8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019cd8:	b580      	push	{r7, lr}
 8019cda:	b084      	sub	sp, #16
 8019cdc:	af00      	add	r7, sp, #0
 8019cde:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8019ce0:	2300      	movs	r3, #0
 8019ce2:	60bb      	str	r3, [r7, #8]
 8019ce4:	2300      	movs	r3, #0
 8019ce6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8019ce8:	f107 0308 	add.w	r3, r7, #8
 8019cec:	4618      	mov	r0, r3
 8019cee:	f7ef fe5f 	bl	80099b0 <osMutexCreate>
 8019cf2:	4602      	mov	r2, r0
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d102      	bne.n	8019d06 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019d00:	f04f 33ff 	mov.w	r3, #4294967295
 8019d04:	e000      	b.n	8019d08 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019d06:	2300      	movs	r3, #0
}
 8019d08:	4618      	mov	r0, r3
 8019d0a:	3710      	adds	r7, #16
 8019d0c:	46bd      	mov	sp, r7
 8019d0e:	bd80      	pop	{r7, pc}

08019d10 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019d10:	b580      	push	{r7, lr}
 8019d12:	b082      	sub	sp, #8
 8019d14:	af00      	add	r7, sp, #0
 8019d16:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	681b      	ldr	r3, [r3, #0]
 8019d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8019d20:	4618      	mov	r0, r3
 8019d22:	f7ef fe5d 	bl	80099e0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8019d26:	bf00      	nop
 8019d28:	3708      	adds	r7, #8
 8019d2a:	46bd      	mov	sp, r7
 8019d2c:	bd80      	pop	{r7, pc}

08019d2e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8019d2e:	b580      	push	{r7, lr}
 8019d30:	b082      	sub	sp, #8
 8019d32:	af00      	add	r7, sp, #0
 8019d34:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	681b      	ldr	r3, [r3, #0]
 8019d3a:	4618      	mov	r0, r3
 8019d3c:	f7ef fe9e 	bl	8009a7c <osMutexRelease>
}
 8019d40:	bf00      	nop
 8019d42:	3708      	adds	r7, #8
 8019d44:	46bd      	mov	sp, r7
 8019d46:	bd80      	pop	{r7, pc}

08019d48 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019d48:	b580      	push	{r7, lr}
 8019d4a:	b08c      	sub	sp, #48	; 0x30
 8019d4c:	af00      	add	r7, sp, #0
 8019d4e:	60f8      	str	r0, [r7, #12]
 8019d50:	60b9      	str	r1, [r7, #8]
 8019d52:	607a      	str	r2, [r7, #4]
 8019d54:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8019d56:	f107 0314 	add.w	r3, r7, #20
 8019d5a:	2200      	movs	r2, #0
 8019d5c:	601a      	str	r2, [r3, #0]
 8019d5e:	605a      	str	r2, [r3, #4]
 8019d60:	609a      	str	r2, [r3, #8]
 8019d62:	60da      	str	r2, [r3, #12]
 8019d64:	611a      	str	r2, [r3, #16]
 8019d66:	615a      	str	r2, [r3, #20]
 8019d68:	619a      	str	r2, [r3, #24]
 8019d6a:	68fb      	ldr	r3, [r7, #12]
 8019d6c:	617b      	str	r3, [r7, #20]
 8019d6e:	68bb      	ldr	r3, [r7, #8]
 8019d70:	61bb      	str	r3, [r7, #24]
 8019d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d74:	b21b      	sxth	r3, r3
 8019d76:	83bb      	strh	r3, [r7, #28]
 8019d78:	683b      	ldr	r3, [r7, #0]
 8019d7a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8019d7c:	f107 0314 	add.w	r3, r7, #20
 8019d80:	6879      	ldr	r1, [r7, #4]
 8019d82:	4618      	mov	r0, r3
 8019d84:	f7ef fda8 	bl	80098d8 <osThreadCreate>
 8019d88:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8019d8a:	4618      	mov	r0, r3
 8019d8c:	3730      	adds	r7, #48	; 0x30
 8019d8e:	46bd      	mov	sp, r7
 8019d90:	bd80      	pop	{r7, pc}
	...

08019d94 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019d94:	b580      	push	{r7, lr}
 8019d96:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8019d98:	4b04      	ldr	r3, [pc, #16]	; (8019dac <sys_arch_protect+0x18>)
 8019d9a:	681b      	ldr	r3, [r3, #0]
 8019d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8019da0:	4618      	mov	r0, r3
 8019da2:	f7ef fe1d 	bl	80099e0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8019da6:	2301      	movs	r3, #1
}
 8019da8:	4618      	mov	r0, r3
 8019daa:	bd80      	pop	{r7, pc}
 8019dac:	20007cbc 	.word	0x20007cbc

08019db0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019db0:	b580      	push	{r7, lr}
 8019db2:	b082      	sub	sp, #8
 8019db4:	af00      	add	r7, sp, #0
 8019db6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019db8:	4b04      	ldr	r3, [pc, #16]	; (8019dcc <sys_arch_unprotect+0x1c>)
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	4618      	mov	r0, r3
 8019dbe:	f7ef fe5d 	bl	8009a7c <osMutexRelease>
}
 8019dc2:	bf00      	nop
 8019dc4:	3708      	adds	r7, #8
 8019dc6:	46bd      	mov	sp, r7
 8019dc8:	bd80      	pop	{r7, pc}
 8019dca:	bf00      	nop
 8019dcc:	20007cbc 	.word	0x20007cbc

08019dd0 <std>:
 8019dd0:	2300      	movs	r3, #0
 8019dd2:	b510      	push	{r4, lr}
 8019dd4:	4604      	mov	r4, r0
 8019dd6:	e9c0 3300 	strd	r3, r3, [r0]
 8019dda:	6083      	str	r3, [r0, #8]
 8019ddc:	8181      	strh	r1, [r0, #12]
 8019dde:	6643      	str	r3, [r0, #100]	; 0x64
 8019de0:	81c2      	strh	r2, [r0, #14]
 8019de2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019de6:	6183      	str	r3, [r0, #24]
 8019de8:	4619      	mov	r1, r3
 8019dea:	2208      	movs	r2, #8
 8019dec:	305c      	adds	r0, #92	; 0x5c
 8019dee:	f000 f936 	bl	801a05e <memset>
 8019df2:	4b05      	ldr	r3, [pc, #20]	; (8019e08 <std+0x38>)
 8019df4:	6263      	str	r3, [r4, #36]	; 0x24
 8019df6:	4b05      	ldr	r3, [pc, #20]	; (8019e0c <std+0x3c>)
 8019df8:	62a3      	str	r3, [r4, #40]	; 0x28
 8019dfa:	4b05      	ldr	r3, [pc, #20]	; (8019e10 <std+0x40>)
 8019dfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019dfe:	4b05      	ldr	r3, [pc, #20]	; (8019e14 <std+0x44>)
 8019e00:	6224      	str	r4, [r4, #32]
 8019e02:	6323      	str	r3, [r4, #48]	; 0x30
 8019e04:	bd10      	pop	{r4, pc}
 8019e06:	bf00      	nop
 8019e08:	0801b069 	.word	0x0801b069
 8019e0c:	0801b08b 	.word	0x0801b08b
 8019e10:	0801b0c3 	.word	0x0801b0c3
 8019e14:	0801b0e7 	.word	0x0801b0e7

08019e18 <_cleanup_r>:
 8019e18:	4901      	ldr	r1, [pc, #4]	; (8019e20 <_cleanup_r+0x8>)
 8019e1a:	f000 b885 	b.w	8019f28 <_fwalk_reent>
 8019e1e:	bf00      	nop
 8019e20:	0801cced 	.word	0x0801cced

08019e24 <__sfmoreglue>:
 8019e24:	b570      	push	{r4, r5, r6, lr}
 8019e26:	1e4a      	subs	r2, r1, #1
 8019e28:	2568      	movs	r5, #104	; 0x68
 8019e2a:	4355      	muls	r5, r2
 8019e2c:	460e      	mov	r6, r1
 8019e2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019e32:	f000 f96b 	bl	801a10c <_malloc_r>
 8019e36:	4604      	mov	r4, r0
 8019e38:	b140      	cbz	r0, 8019e4c <__sfmoreglue+0x28>
 8019e3a:	2100      	movs	r1, #0
 8019e3c:	e9c0 1600 	strd	r1, r6, [r0]
 8019e40:	300c      	adds	r0, #12
 8019e42:	60a0      	str	r0, [r4, #8]
 8019e44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019e48:	f000 f909 	bl	801a05e <memset>
 8019e4c:	4620      	mov	r0, r4
 8019e4e:	bd70      	pop	{r4, r5, r6, pc}

08019e50 <__sinit>:
 8019e50:	6983      	ldr	r3, [r0, #24]
 8019e52:	b510      	push	{r4, lr}
 8019e54:	4604      	mov	r4, r0
 8019e56:	bb33      	cbnz	r3, 8019ea6 <__sinit+0x56>
 8019e58:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8019e5c:	6503      	str	r3, [r0, #80]	; 0x50
 8019e5e:	4b12      	ldr	r3, [pc, #72]	; (8019ea8 <__sinit+0x58>)
 8019e60:	4a12      	ldr	r2, [pc, #72]	; (8019eac <__sinit+0x5c>)
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	6282      	str	r2, [r0, #40]	; 0x28
 8019e66:	4298      	cmp	r0, r3
 8019e68:	bf04      	itt	eq
 8019e6a:	2301      	moveq	r3, #1
 8019e6c:	6183      	streq	r3, [r0, #24]
 8019e6e:	f000 f81f 	bl	8019eb0 <__sfp>
 8019e72:	6060      	str	r0, [r4, #4]
 8019e74:	4620      	mov	r0, r4
 8019e76:	f000 f81b 	bl	8019eb0 <__sfp>
 8019e7a:	60a0      	str	r0, [r4, #8]
 8019e7c:	4620      	mov	r0, r4
 8019e7e:	f000 f817 	bl	8019eb0 <__sfp>
 8019e82:	2200      	movs	r2, #0
 8019e84:	60e0      	str	r0, [r4, #12]
 8019e86:	2104      	movs	r1, #4
 8019e88:	6860      	ldr	r0, [r4, #4]
 8019e8a:	f7ff ffa1 	bl	8019dd0 <std>
 8019e8e:	2201      	movs	r2, #1
 8019e90:	2109      	movs	r1, #9
 8019e92:	68a0      	ldr	r0, [r4, #8]
 8019e94:	f7ff ff9c 	bl	8019dd0 <std>
 8019e98:	2202      	movs	r2, #2
 8019e9a:	2112      	movs	r1, #18
 8019e9c:	68e0      	ldr	r0, [r4, #12]
 8019e9e:	f7ff ff97 	bl	8019dd0 <std>
 8019ea2:	2301      	movs	r3, #1
 8019ea4:	61a3      	str	r3, [r4, #24]
 8019ea6:	bd10      	pop	{r4, pc}
 8019ea8:	08024778 	.word	0x08024778
 8019eac:	08019e19 	.word	0x08019e19

08019eb0 <__sfp>:
 8019eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019eb2:	4b1b      	ldr	r3, [pc, #108]	; (8019f20 <__sfp+0x70>)
 8019eb4:	681e      	ldr	r6, [r3, #0]
 8019eb6:	69b3      	ldr	r3, [r6, #24]
 8019eb8:	4607      	mov	r7, r0
 8019eba:	b913      	cbnz	r3, 8019ec2 <__sfp+0x12>
 8019ebc:	4630      	mov	r0, r6
 8019ebe:	f7ff ffc7 	bl	8019e50 <__sinit>
 8019ec2:	3648      	adds	r6, #72	; 0x48
 8019ec4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019ec8:	3b01      	subs	r3, #1
 8019eca:	d503      	bpl.n	8019ed4 <__sfp+0x24>
 8019ecc:	6833      	ldr	r3, [r6, #0]
 8019ece:	b133      	cbz	r3, 8019ede <__sfp+0x2e>
 8019ed0:	6836      	ldr	r6, [r6, #0]
 8019ed2:	e7f7      	b.n	8019ec4 <__sfp+0x14>
 8019ed4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019ed8:	b16d      	cbz	r5, 8019ef6 <__sfp+0x46>
 8019eda:	3468      	adds	r4, #104	; 0x68
 8019edc:	e7f4      	b.n	8019ec8 <__sfp+0x18>
 8019ede:	2104      	movs	r1, #4
 8019ee0:	4638      	mov	r0, r7
 8019ee2:	f7ff ff9f 	bl	8019e24 <__sfmoreglue>
 8019ee6:	6030      	str	r0, [r6, #0]
 8019ee8:	2800      	cmp	r0, #0
 8019eea:	d1f1      	bne.n	8019ed0 <__sfp+0x20>
 8019eec:	230c      	movs	r3, #12
 8019eee:	603b      	str	r3, [r7, #0]
 8019ef0:	4604      	mov	r4, r0
 8019ef2:	4620      	mov	r0, r4
 8019ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ef6:	4b0b      	ldr	r3, [pc, #44]	; (8019f24 <__sfp+0x74>)
 8019ef8:	6665      	str	r5, [r4, #100]	; 0x64
 8019efa:	e9c4 5500 	strd	r5, r5, [r4]
 8019efe:	60a5      	str	r5, [r4, #8]
 8019f00:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8019f04:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8019f08:	2208      	movs	r2, #8
 8019f0a:	4629      	mov	r1, r5
 8019f0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019f10:	f000 f8a5 	bl	801a05e <memset>
 8019f14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019f18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019f1c:	e7e9      	b.n	8019ef2 <__sfp+0x42>
 8019f1e:	bf00      	nop
 8019f20:	08024778 	.word	0x08024778
 8019f24:	ffff0001 	.word	0xffff0001

08019f28 <_fwalk_reent>:
 8019f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f2c:	4680      	mov	r8, r0
 8019f2e:	4689      	mov	r9, r1
 8019f30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019f34:	2600      	movs	r6, #0
 8019f36:	b914      	cbnz	r4, 8019f3e <_fwalk_reent+0x16>
 8019f38:	4630      	mov	r0, r6
 8019f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f3e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8019f42:	3f01      	subs	r7, #1
 8019f44:	d501      	bpl.n	8019f4a <_fwalk_reent+0x22>
 8019f46:	6824      	ldr	r4, [r4, #0]
 8019f48:	e7f5      	b.n	8019f36 <_fwalk_reent+0xe>
 8019f4a:	89ab      	ldrh	r3, [r5, #12]
 8019f4c:	2b01      	cmp	r3, #1
 8019f4e:	d907      	bls.n	8019f60 <_fwalk_reent+0x38>
 8019f50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019f54:	3301      	adds	r3, #1
 8019f56:	d003      	beq.n	8019f60 <_fwalk_reent+0x38>
 8019f58:	4629      	mov	r1, r5
 8019f5a:	4640      	mov	r0, r8
 8019f5c:	47c8      	blx	r9
 8019f5e:	4306      	orrs	r6, r0
 8019f60:	3568      	adds	r5, #104	; 0x68
 8019f62:	e7ee      	b.n	8019f42 <_fwalk_reent+0x1a>

08019f64 <__libc_init_array>:
 8019f64:	b570      	push	{r4, r5, r6, lr}
 8019f66:	4e0d      	ldr	r6, [pc, #52]	; (8019f9c <__libc_init_array+0x38>)
 8019f68:	4c0d      	ldr	r4, [pc, #52]	; (8019fa0 <__libc_init_array+0x3c>)
 8019f6a:	1ba4      	subs	r4, r4, r6
 8019f6c:	10a4      	asrs	r4, r4, #2
 8019f6e:	2500      	movs	r5, #0
 8019f70:	42a5      	cmp	r5, r4
 8019f72:	d109      	bne.n	8019f88 <__libc_init_array+0x24>
 8019f74:	4e0b      	ldr	r6, [pc, #44]	; (8019fa4 <__libc_init_array+0x40>)
 8019f76:	4c0c      	ldr	r4, [pc, #48]	; (8019fa8 <__libc_init_array+0x44>)
 8019f78:	f005 f80a 	bl	801ef90 <_init>
 8019f7c:	1ba4      	subs	r4, r4, r6
 8019f7e:	10a4      	asrs	r4, r4, #2
 8019f80:	2500      	movs	r5, #0
 8019f82:	42a5      	cmp	r5, r4
 8019f84:	d105      	bne.n	8019f92 <__libc_init_array+0x2e>
 8019f86:	bd70      	pop	{r4, r5, r6, pc}
 8019f88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019f8c:	4798      	blx	r3
 8019f8e:	3501      	adds	r5, #1
 8019f90:	e7ee      	b.n	8019f70 <__libc_init_array+0xc>
 8019f92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019f96:	4798      	blx	r3
 8019f98:	3501      	adds	r5, #1
 8019f9a:	e7f2      	b.n	8019f82 <__libc_init_array+0x1e>
 8019f9c:	08024a80 	.word	0x08024a80
 8019fa0:	08024a80 	.word	0x08024a80
 8019fa4:	08024a80 	.word	0x08024a80
 8019fa8:	08024a84 	.word	0x08024a84

08019fac <__locale_ctype_ptr_l>:
 8019fac:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8019fb0:	4770      	bx	lr
	...

08019fb4 <malloc>:
 8019fb4:	4b02      	ldr	r3, [pc, #8]	; (8019fc0 <malloc+0xc>)
 8019fb6:	4601      	mov	r1, r0
 8019fb8:	6818      	ldr	r0, [r3, #0]
 8019fba:	f000 b8a7 	b.w	801a10c <_malloc_r>
 8019fbe:	bf00      	nop
 8019fc0:	20000020 	.word	0x20000020

08019fc4 <free>:
 8019fc4:	4b02      	ldr	r3, [pc, #8]	; (8019fd0 <free+0xc>)
 8019fc6:	4601      	mov	r1, r0
 8019fc8:	6818      	ldr	r0, [r3, #0]
 8019fca:	f000 b851 	b.w	801a070 <_free_r>
 8019fce:	bf00      	nop
 8019fd0:	20000020 	.word	0x20000020

08019fd4 <__ascii_mbtowc>:
 8019fd4:	b082      	sub	sp, #8
 8019fd6:	b901      	cbnz	r1, 8019fda <__ascii_mbtowc+0x6>
 8019fd8:	a901      	add	r1, sp, #4
 8019fda:	b142      	cbz	r2, 8019fee <__ascii_mbtowc+0x1a>
 8019fdc:	b14b      	cbz	r3, 8019ff2 <__ascii_mbtowc+0x1e>
 8019fde:	7813      	ldrb	r3, [r2, #0]
 8019fe0:	600b      	str	r3, [r1, #0]
 8019fe2:	7812      	ldrb	r2, [r2, #0]
 8019fe4:	1c10      	adds	r0, r2, #0
 8019fe6:	bf18      	it	ne
 8019fe8:	2001      	movne	r0, #1
 8019fea:	b002      	add	sp, #8
 8019fec:	4770      	bx	lr
 8019fee:	4610      	mov	r0, r2
 8019ff0:	e7fb      	b.n	8019fea <__ascii_mbtowc+0x16>
 8019ff2:	f06f 0001 	mvn.w	r0, #1
 8019ff6:	e7f8      	b.n	8019fea <__ascii_mbtowc+0x16>

08019ff8 <memcmp>:
 8019ff8:	b530      	push	{r4, r5, lr}
 8019ffa:	2400      	movs	r4, #0
 8019ffc:	42a2      	cmp	r2, r4
 8019ffe:	d101      	bne.n	801a004 <memcmp+0xc>
 801a000:	2000      	movs	r0, #0
 801a002:	e007      	b.n	801a014 <memcmp+0x1c>
 801a004:	5d03      	ldrb	r3, [r0, r4]
 801a006:	3401      	adds	r4, #1
 801a008:	190d      	adds	r5, r1, r4
 801a00a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801a00e:	42ab      	cmp	r3, r5
 801a010:	d0f4      	beq.n	8019ffc <memcmp+0x4>
 801a012:	1b58      	subs	r0, r3, r5
 801a014:	bd30      	pop	{r4, r5, pc}

0801a016 <memcpy>:
 801a016:	b510      	push	{r4, lr}
 801a018:	1e43      	subs	r3, r0, #1
 801a01a:	440a      	add	r2, r1
 801a01c:	4291      	cmp	r1, r2
 801a01e:	d100      	bne.n	801a022 <memcpy+0xc>
 801a020:	bd10      	pop	{r4, pc}
 801a022:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a026:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a02a:	e7f7      	b.n	801a01c <memcpy+0x6>

0801a02c <memmove>:
 801a02c:	4288      	cmp	r0, r1
 801a02e:	b510      	push	{r4, lr}
 801a030:	eb01 0302 	add.w	r3, r1, r2
 801a034:	d807      	bhi.n	801a046 <memmove+0x1a>
 801a036:	1e42      	subs	r2, r0, #1
 801a038:	4299      	cmp	r1, r3
 801a03a:	d00a      	beq.n	801a052 <memmove+0x26>
 801a03c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a040:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a044:	e7f8      	b.n	801a038 <memmove+0xc>
 801a046:	4283      	cmp	r3, r0
 801a048:	d9f5      	bls.n	801a036 <memmove+0xa>
 801a04a:	1881      	adds	r1, r0, r2
 801a04c:	1ad2      	subs	r2, r2, r3
 801a04e:	42d3      	cmn	r3, r2
 801a050:	d100      	bne.n	801a054 <memmove+0x28>
 801a052:	bd10      	pop	{r4, pc}
 801a054:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a058:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a05c:	e7f7      	b.n	801a04e <memmove+0x22>

0801a05e <memset>:
 801a05e:	4402      	add	r2, r0
 801a060:	4603      	mov	r3, r0
 801a062:	4293      	cmp	r3, r2
 801a064:	d100      	bne.n	801a068 <memset+0xa>
 801a066:	4770      	bx	lr
 801a068:	f803 1b01 	strb.w	r1, [r3], #1
 801a06c:	e7f9      	b.n	801a062 <memset+0x4>
	...

0801a070 <_free_r>:
 801a070:	b538      	push	{r3, r4, r5, lr}
 801a072:	4605      	mov	r5, r0
 801a074:	2900      	cmp	r1, #0
 801a076:	d045      	beq.n	801a104 <_free_r+0x94>
 801a078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a07c:	1f0c      	subs	r4, r1, #4
 801a07e:	2b00      	cmp	r3, #0
 801a080:	bfb8      	it	lt
 801a082:	18e4      	addlt	r4, r4, r3
 801a084:	f7f2 fb4e 	bl	800c724 <__malloc_lock>
 801a088:	4a1f      	ldr	r2, [pc, #124]	; (801a108 <_free_r+0x98>)
 801a08a:	6813      	ldr	r3, [r2, #0]
 801a08c:	4610      	mov	r0, r2
 801a08e:	b933      	cbnz	r3, 801a09e <_free_r+0x2e>
 801a090:	6063      	str	r3, [r4, #4]
 801a092:	6014      	str	r4, [r2, #0]
 801a094:	4628      	mov	r0, r5
 801a096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a09a:	f7f2 bb6d 	b.w	800c778 <__malloc_unlock>
 801a09e:	42a3      	cmp	r3, r4
 801a0a0:	d90c      	bls.n	801a0bc <_free_r+0x4c>
 801a0a2:	6821      	ldr	r1, [r4, #0]
 801a0a4:	1862      	adds	r2, r4, r1
 801a0a6:	4293      	cmp	r3, r2
 801a0a8:	bf04      	itt	eq
 801a0aa:	681a      	ldreq	r2, [r3, #0]
 801a0ac:	685b      	ldreq	r3, [r3, #4]
 801a0ae:	6063      	str	r3, [r4, #4]
 801a0b0:	bf04      	itt	eq
 801a0b2:	1852      	addeq	r2, r2, r1
 801a0b4:	6022      	streq	r2, [r4, #0]
 801a0b6:	6004      	str	r4, [r0, #0]
 801a0b8:	e7ec      	b.n	801a094 <_free_r+0x24>
 801a0ba:	4613      	mov	r3, r2
 801a0bc:	685a      	ldr	r2, [r3, #4]
 801a0be:	b10a      	cbz	r2, 801a0c4 <_free_r+0x54>
 801a0c0:	42a2      	cmp	r2, r4
 801a0c2:	d9fa      	bls.n	801a0ba <_free_r+0x4a>
 801a0c4:	6819      	ldr	r1, [r3, #0]
 801a0c6:	1858      	adds	r0, r3, r1
 801a0c8:	42a0      	cmp	r0, r4
 801a0ca:	d10b      	bne.n	801a0e4 <_free_r+0x74>
 801a0cc:	6820      	ldr	r0, [r4, #0]
 801a0ce:	4401      	add	r1, r0
 801a0d0:	1858      	adds	r0, r3, r1
 801a0d2:	4282      	cmp	r2, r0
 801a0d4:	6019      	str	r1, [r3, #0]
 801a0d6:	d1dd      	bne.n	801a094 <_free_r+0x24>
 801a0d8:	6810      	ldr	r0, [r2, #0]
 801a0da:	6852      	ldr	r2, [r2, #4]
 801a0dc:	605a      	str	r2, [r3, #4]
 801a0de:	4401      	add	r1, r0
 801a0e0:	6019      	str	r1, [r3, #0]
 801a0e2:	e7d7      	b.n	801a094 <_free_r+0x24>
 801a0e4:	d902      	bls.n	801a0ec <_free_r+0x7c>
 801a0e6:	230c      	movs	r3, #12
 801a0e8:	602b      	str	r3, [r5, #0]
 801a0ea:	e7d3      	b.n	801a094 <_free_r+0x24>
 801a0ec:	6820      	ldr	r0, [r4, #0]
 801a0ee:	1821      	adds	r1, r4, r0
 801a0f0:	428a      	cmp	r2, r1
 801a0f2:	bf04      	itt	eq
 801a0f4:	6811      	ldreq	r1, [r2, #0]
 801a0f6:	6852      	ldreq	r2, [r2, #4]
 801a0f8:	6062      	str	r2, [r4, #4]
 801a0fa:	bf04      	itt	eq
 801a0fc:	1809      	addeq	r1, r1, r0
 801a0fe:	6021      	streq	r1, [r4, #0]
 801a100:	605c      	str	r4, [r3, #4]
 801a102:	e7c7      	b.n	801a094 <_free_r+0x24>
 801a104:	bd38      	pop	{r3, r4, r5, pc}
 801a106:	bf00      	nop
 801a108:	200009d0 	.word	0x200009d0

0801a10c <_malloc_r>:
 801a10c:	b570      	push	{r4, r5, r6, lr}
 801a10e:	1ccd      	adds	r5, r1, #3
 801a110:	f025 0503 	bic.w	r5, r5, #3
 801a114:	3508      	adds	r5, #8
 801a116:	2d0c      	cmp	r5, #12
 801a118:	bf38      	it	cc
 801a11a:	250c      	movcc	r5, #12
 801a11c:	2d00      	cmp	r5, #0
 801a11e:	4606      	mov	r6, r0
 801a120:	db01      	blt.n	801a126 <_malloc_r+0x1a>
 801a122:	42a9      	cmp	r1, r5
 801a124:	d903      	bls.n	801a12e <_malloc_r+0x22>
 801a126:	230c      	movs	r3, #12
 801a128:	6033      	str	r3, [r6, #0]
 801a12a:	2000      	movs	r0, #0
 801a12c:	bd70      	pop	{r4, r5, r6, pc}
 801a12e:	f7f2 faf9 	bl	800c724 <__malloc_lock>
 801a132:	4a21      	ldr	r2, [pc, #132]	; (801a1b8 <_malloc_r+0xac>)
 801a134:	6814      	ldr	r4, [r2, #0]
 801a136:	4621      	mov	r1, r4
 801a138:	b991      	cbnz	r1, 801a160 <_malloc_r+0x54>
 801a13a:	4c20      	ldr	r4, [pc, #128]	; (801a1bc <_malloc_r+0xb0>)
 801a13c:	6823      	ldr	r3, [r4, #0]
 801a13e:	b91b      	cbnz	r3, 801a148 <_malloc_r+0x3c>
 801a140:	4630      	mov	r0, r6
 801a142:	f7f2 fa93 	bl	800c66c <_sbrk_r>
 801a146:	6020      	str	r0, [r4, #0]
 801a148:	4629      	mov	r1, r5
 801a14a:	4630      	mov	r0, r6
 801a14c:	f7f2 fa8e 	bl	800c66c <_sbrk_r>
 801a150:	1c43      	adds	r3, r0, #1
 801a152:	d124      	bne.n	801a19e <_malloc_r+0x92>
 801a154:	230c      	movs	r3, #12
 801a156:	6033      	str	r3, [r6, #0]
 801a158:	4630      	mov	r0, r6
 801a15a:	f7f2 fb0d 	bl	800c778 <__malloc_unlock>
 801a15e:	e7e4      	b.n	801a12a <_malloc_r+0x1e>
 801a160:	680b      	ldr	r3, [r1, #0]
 801a162:	1b5b      	subs	r3, r3, r5
 801a164:	d418      	bmi.n	801a198 <_malloc_r+0x8c>
 801a166:	2b0b      	cmp	r3, #11
 801a168:	d90f      	bls.n	801a18a <_malloc_r+0x7e>
 801a16a:	600b      	str	r3, [r1, #0]
 801a16c:	50cd      	str	r5, [r1, r3]
 801a16e:	18cc      	adds	r4, r1, r3
 801a170:	4630      	mov	r0, r6
 801a172:	f7f2 fb01 	bl	800c778 <__malloc_unlock>
 801a176:	f104 000b 	add.w	r0, r4, #11
 801a17a:	1d23      	adds	r3, r4, #4
 801a17c:	f020 0007 	bic.w	r0, r0, #7
 801a180:	1ac3      	subs	r3, r0, r3
 801a182:	d0d3      	beq.n	801a12c <_malloc_r+0x20>
 801a184:	425a      	negs	r2, r3
 801a186:	50e2      	str	r2, [r4, r3]
 801a188:	e7d0      	b.n	801a12c <_malloc_r+0x20>
 801a18a:	428c      	cmp	r4, r1
 801a18c:	684b      	ldr	r3, [r1, #4]
 801a18e:	bf16      	itet	ne
 801a190:	6063      	strne	r3, [r4, #4]
 801a192:	6013      	streq	r3, [r2, #0]
 801a194:	460c      	movne	r4, r1
 801a196:	e7eb      	b.n	801a170 <_malloc_r+0x64>
 801a198:	460c      	mov	r4, r1
 801a19a:	6849      	ldr	r1, [r1, #4]
 801a19c:	e7cc      	b.n	801a138 <_malloc_r+0x2c>
 801a19e:	1cc4      	adds	r4, r0, #3
 801a1a0:	f024 0403 	bic.w	r4, r4, #3
 801a1a4:	42a0      	cmp	r0, r4
 801a1a6:	d005      	beq.n	801a1b4 <_malloc_r+0xa8>
 801a1a8:	1a21      	subs	r1, r4, r0
 801a1aa:	4630      	mov	r0, r6
 801a1ac:	f7f2 fa5e 	bl	800c66c <_sbrk_r>
 801a1b0:	3001      	adds	r0, #1
 801a1b2:	d0cf      	beq.n	801a154 <_malloc_r+0x48>
 801a1b4:	6025      	str	r5, [r4, #0]
 801a1b6:	e7db      	b.n	801a170 <_malloc_r+0x64>
 801a1b8:	200009d0 	.word	0x200009d0
 801a1bc:	200009d4 	.word	0x200009d4

0801a1c0 <__cvt>:
 801a1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a1c2:	ed2d 8b02 	vpush	{d8}
 801a1c6:	eeb0 8b40 	vmov.f64	d8, d0
 801a1ca:	b085      	sub	sp, #20
 801a1cc:	4617      	mov	r7, r2
 801a1ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801a1d0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801a1d2:	ee18 2a90 	vmov	r2, s17
 801a1d6:	f025 0520 	bic.w	r5, r5, #32
 801a1da:	2a00      	cmp	r2, #0
 801a1dc:	bfb6      	itet	lt
 801a1de:	222d      	movlt	r2, #45	; 0x2d
 801a1e0:	2200      	movge	r2, #0
 801a1e2:	eeb1 8b40 	vneglt.f64	d8, d0
 801a1e6:	2d46      	cmp	r5, #70	; 0x46
 801a1e8:	460c      	mov	r4, r1
 801a1ea:	701a      	strb	r2, [r3, #0]
 801a1ec:	d004      	beq.n	801a1f8 <__cvt+0x38>
 801a1ee:	2d45      	cmp	r5, #69	; 0x45
 801a1f0:	d100      	bne.n	801a1f4 <__cvt+0x34>
 801a1f2:	3401      	adds	r4, #1
 801a1f4:	2102      	movs	r1, #2
 801a1f6:	e000      	b.n	801a1fa <__cvt+0x3a>
 801a1f8:	2103      	movs	r1, #3
 801a1fa:	ab03      	add	r3, sp, #12
 801a1fc:	9301      	str	r3, [sp, #4]
 801a1fe:	ab02      	add	r3, sp, #8
 801a200:	9300      	str	r3, [sp, #0]
 801a202:	4622      	mov	r2, r4
 801a204:	4633      	mov	r3, r6
 801a206:	eeb0 0b48 	vmov.f64	d0, d8
 801a20a:	f001 ff9d 	bl	801c148 <_dtoa_r>
 801a20e:	2d47      	cmp	r5, #71	; 0x47
 801a210:	d101      	bne.n	801a216 <__cvt+0x56>
 801a212:	07fb      	lsls	r3, r7, #31
 801a214:	d51e      	bpl.n	801a254 <__cvt+0x94>
 801a216:	2d46      	cmp	r5, #70	; 0x46
 801a218:	eb00 0304 	add.w	r3, r0, r4
 801a21c:	d10c      	bne.n	801a238 <__cvt+0x78>
 801a21e:	7802      	ldrb	r2, [r0, #0]
 801a220:	2a30      	cmp	r2, #48	; 0x30
 801a222:	d107      	bne.n	801a234 <__cvt+0x74>
 801a224:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a22c:	bf1c      	itt	ne
 801a22e:	f1c4 0401 	rsbne	r4, r4, #1
 801a232:	6034      	strne	r4, [r6, #0]
 801a234:	6832      	ldr	r2, [r6, #0]
 801a236:	4413      	add	r3, r2
 801a238:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a23c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a240:	d007      	beq.n	801a252 <__cvt+0x92>
 801a242:	2130      	movs	r1, #48	; 0x30
 801a244:	9a03      	ldr	r2, [sp, #12]
 801a246:	429a      	cmp	r2, r3
 801a248:	d204      	bcs.n	801a254 <__cvt+0x94>
 801a24a:	1c54      	adds	r4, r2, #1
 801a24c:	9403      	str	r4, [sp, #12]
 801a24e:	7011      	strb	r1, [r2, #0]
 801a250:	e7f8      	b.n	801a244 <__cvt+0x84>
 801a252:	9303      	str	r3, [sp, #12]
 801a254:	9b03      	ldr	r3, [sp, #12]
 801a256:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a258:	1a1b      	subs	r3, r3, r0
 801a25a:	6013      	str	r3, [r2, #0]
 801a25c:	b005      	add	sp, #20
 801a25e:	ecbd 8b02 	vpop	{d8}
 801a262:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a264 <__exponent>:
 801a264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a266:	2900      	cmp	r1, #0
 801a268:	4604      	mov	r4, r0
 801a26a:	bfba      	itte	lt
 801a26c:	4249      	neglt	r1, r1
 801a26e:	232d      	movlt	r3, #45	; 0x2d
 801a270:	232b      	movge	r3, #43	; 0x2b
 801a272:	2909      	cmp	r1, #9
 801a274:	f804 2b02 	strb.w	r2, [r4], #2
 801a278:	7043      	strb	r3, [r0, #1]
 801a27a:	dd20      	ble.n	801a2be <__exponent+0x5a>
 801a27c:	f10d 0307 	add.w	r3, sp, #7
 801a280:	461f      	mov	r7, r3
 801a282:	260a      	movs	r6, #10
 801a284:	fb91 f5f6 	sdiv	r5, r1, r6
 801a288:	fb06 1115 	mls	r1, r6, r5, r1
 801a28c:	3130      	adds	r1, #48	; 0x30
 801a28e:	2d09      	cmp	r5, #9
 801a290:	f803 1c01 	strb.w	r1, [r3, #-1]
 801a294:	f103 32ff 	add.w	r2, r3, #4294967295
 801a298:	4629      	mov	r1, r5
 801a29a:	dc09      	bgt.n	801a2b0 <__exponent+0x4c>
 801a29c:	3130      	adds	r1, #48	; 0x30
 801a29e:	3b02      	subs	r3, #2
 801a2a0:	f802 1c01 	strb.w	r1, [r2, #-1]
 801a2a4:	42bb      	cmp	r3, r7
 801a2a6:	4622      	mov	r2, r4
 801a2a8:	d304      	bcc.n	801a2b4 <__exponent+0x50>
 801a2aa:	1a10      	subs	r0, r2, r0
 801a2ac:	b003      	add	sp, #12
 801a2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a2b0:	4613      	mov	r3, r2
 801a2b2:	e7e7      	b.n	801a284 <__exponent+0x20>
 801a2b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a2b8:	f804 2b01 	strb.w	r2, [r4], #1
 801a2bc:	e7f2      	b.n	801a2a4 <__exponent+0x40>
 801a2be:	2330      	movs	r3, #48	; 0x30
 801a2c0:	4419      	add	r1, r3
 801a2c2:	7083      	strb	r3, [r0, #2]
 801a2c4:	1d02      	adds	r2, r0, #4
 801a2c6:	70c1      	strb	r1, [r0, #3]
 801a2c8:	e7ef      	b.n	801a2aa <__exponent+0x46>
 801a2ca:	0000      	movs	r0, r0
 801a2cc:	0000      	movs	r0, r0
	...

0801a2d0 <_printf_float>:
 801a2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2d4:	b08d      	sub	sp, #52	; 0x34
 801a2d6:	460c      	mov	r4, r1
 801a2d8:	4616      	mov	r6, r2
 801a2da:	461f      	mov	r7, r3
 801a2dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801a2e0:	4605      	mov	r5, r0
 801a2e2:	f003 f855 	bl	801d390 <_localeconv_r>
 801a2e6:	f8d0 b000 	ldr.w	fp, [r0]
 801a2ea:	4658      	mov	r0, fp
 801a2ec:	f7e5 ffa8 	bl	8000240 <strlen>
 801a2f0:	2300      	movs	r3, #0
 801a2f2:	930a      	str	r3, [sp, #40]	; 0x28
 801a2f4:	f8d8 3000 	ldr.w	r3, [r8]
 801a2f8:	9005      	str	r0, [sp, #20]
 801a2fa:	3307      	adds	r3, #7
 801a2fc:	f023 0307 	bic.w	r3, r3, #7
 801a300:	f103 0108 	add.w	r1, r3, #8
 801a304:	f894 9018 	ldrb.w	r9, [r4, #24]
 801a308:	6822      	ldr	r2, [r4, #0]
 801a30a:	f8c8 1000 	str.w	r1, [r8]
 801a30e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a312:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801a316:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 801a5a0 <_printf_float+0x2d0>
 801a31a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801a31e:	eeb0 6bc0 	vabs.f64	d6, d0
 801a322:	eeb4 6b47 	vcmp.f64	d6, d7
 801a326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a32a:	dd24      	ble.n	801a376 <_printf_float+0xa6>
 801a32c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801a330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a334:	d502      	bpl.n	801a33c <_printf_float+0x6c>
 801a336:	232d      	movs	r3, #45	; 0x2d
 801a338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a33c:	499a      	ldr	r1, [pc, #616]	; (801a5a8 <_printf_float+0x2d8>)
 801a33e:	4b9b      	ldr	r3, [pc, #620]	; (801a5ac <_printf_float+0x2dc>)
 801a340:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801a344:	bf8c      	ite	hi
 801a346:	4688      	movhi	r8, r1
 801a348:	4698      	movls	r8, r3
 801a34a:	f022 0204 	bic.w	r2, r2, #4
 801a34e:	2303      	movs	r3, #3
 801a350:	6123      	str	r3, [r4, #16]
 801a352:	6022      	str	r2, [r4, #0]
 801a354:	f04f 0a00 	mov.w	sl, #0
 801a358:	9700      	str	r7, [sp, #0]
 801a35a:	4633      	mov	r3, r6
 801a35c:	aa0b      	add	r2, sp, #44	; 0x2c
 801a35e:	4621      	mov	r1, r4
 801a360:	4628      	mov	r0, r5
 801a362:	f000 f9e1 	bl	801a728 <_printf_common>
 801a366:	3001      	adds	r0, #1
 801a368:	f040 8089 	bne.w	801a47e <_printf_float+0x1ae>
 801a36c:	f04f 30ff 	mov.w	r0, #4294967295
 801a370:	b00d      	add	sp, #52	; 0x34
 801a372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a376:	eeb4 0b40 	vcmp.f64	d0, d0
 801a37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a37e:	d702      	bvc.n	801a386 <_printf_float+0xb6>
 801a380:	498b      	ldr	r1, [pc, #556]	; (801a5b0 <_printf_float+0x2e0>)
 801a382:	4b8c      	ldr	r3, [pc, #560]	; (801a5b4 <_printf_float+0x2e4>)
 801a384:	e7dc      	b.n	801a340 <_printf_float+0x70>
 801a386:	6861      	ldr	r1, [r4, #4]
 801a388:	1c4b      	adds	r3, r1, #1
 801a38a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801a38e:	ab0a      	add	r3, sp, #40	; 0x28
 801a390:	a809      	add	r0, sp, #36	; 0x24
 801a392:	d13b      	bne.n	801a40c <_printf_float+0x13c>
 801a394:	2106      	movs	r1, #6
 801a396:	6061      	str	r1, [r4, #4]
 801a398:	f04f 0c00 	mov.w	ip, #0
 801a39c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801a3a0:	e9cd 0900 	strd	r0, r9, [sp]
 801a3a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a3a8:	6022      	str	r2, [r4, #0]
 801a3aa:	6861      	ldr	r1, [r4, #4]
 801a3ac:	4628      	mov	r0, r5
 801a3ae:	f7ff ff07 	bl	801a1c0 <__cvt>
 801a3b2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 801a3b6:	2b47      	cmp	r3, #71	; 0x47
 801a3b8:	4680      	mov	r8, r0
 801a3ba:	d109      	bne.n	801a3d0 <_printf_float+0x100>
 801a3bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a3be:	1cd8      	adds	r0, r3, #3
 801a3c0:	db02      	blt.n	801a3c8 <_printf_float+0xf8>
 801a3c2:	6862      	ldr	r2, [r4, #4]
 801a3c4:	4293      	cmp	r3, r2
 801a3c6:	dd47      	ble.n	801a458 <_printf_float+0x188>
 801a3c8:	f1a9 0902 	sub.w	r9, r9, #2
 801a3cc:	fa5f f989 	uxtb.w	r9, r9
 801a3d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801a3d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a3d6:	d824      	bhi.n	801a422 <_printf_float+0x152>
 801a3d8:	3901      	subs	r1, #1
 801a3da:	464a      	mov	r2, r9
 801a3dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a3e0:	9109      	str	r1, [sp, #36]	; 0x24
 801a3e2:	f7ff ff3f 	bl	801a264 <__exponent>
 801a3e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a3e8:	1813      	adds	r3, r2, r0
 801a3ea:	2a01      	cmp	r2, #1
 801a3ec:	4682      	mov	sl, r0
 801a3ee:	6123      	str	r3, [r4, #16]
 801a3f0:	dc02      	bgt.n	801a3f8 <_printf_float+0x128>
 801a3f2:	6822      	ldr	r2, [r4, #0]
 801a3f4:	07d1      	lsls	r1, r2, #31
 801a3f6:	d501      	bpl.n	801a3fc <_printf_float+0x12c>
 801a3f8:	3301      	adds	r3, #1
 801a3fa:	6123      	str	r3, [r4, #16]
 801a3fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a400:	2b00      	cmp	r3, #0
 801a402:	d0a9      	beq.n	801a358 <_printf_float+0x88>
 801a404:	232d      	movs	r3, #45	; 0x2d
 801a406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a40a:	e7a5      	b.n	801a358 <_printf_float+0x88>
 801a40c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 801a410:	f000 8178 	beq.w	801a704 <_printf_float+0x434>
 801a414:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801a418:	d1be      	bne.n	801a398 <_printf_float+0xc8>
 801a41a:	2900      	cmp	r1, #0
 801a41c:	d1bc      	bne.n	801a398 <_printf_float+0xc8>
 801a41e:	2101      	movs	r1, #1
 801a420:	e7b9      	b.n	801a396 <_printf_float+0xc6>
 801a422:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801a426:	d119      	bne.n	801a45c <_printf_float+0x18c>
 801a428:	2900      	cmp	r1, #0
 801a42a:	6863      	ldr	r3, [r4, #4]
 801a42c:	dd0c      	ble.n	801a448 <_printf_float+0x178>
 801a42e:	6121      	str	r1, [r4, #16]
 801a430:	b913      	cbnz	r3, 801a438 <_printf_float+0x168>
 801a432:	6822      	ldr	r2, [r4, #0]
 801a434:	07d2      	lsls	r2, r2, #31
 801a436:	d502      	bpl.n	801a43e <_printf_float+0x16e>
 801a438:	3301      	adds	r3, #1
 801a43a:	440b      	add	r3, r1
 801a43c:	6123      	str	r3, [r4, #16]
 801a43e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a440:	65a3      	str	r3, [r4, #88]	; 0x58
 801a442:	f04f 0a00 	mov.w	sl, #0
 801a446:	e7d9      	b.n	801a3fc <_printf_float+0x12c>
 801a448:	b913      	cbnz	r3, 801a450 <_printf_float+0x180>
 801a44a:	6822      	ldr	r2, [r4, #0]
 801a44c:	07d0      	lsls	r0, r2, #31
 801a44e:	d501      	bpl.n	801a454 <_printf_float+0x184>
 801a450:	3302      	adds	r3, #2
 801a452:	e7f3      	b.n	801a43c <_printf_float+0x16c>
 801a454:	2301      	movs	r3, #1
 801a456:	e7f1      	b.n	801a43c <_printf_float+0x16c>
 801a458:	f04f 0967 	mov.w	r9, #103	; 0x67
 801a45c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801a460:	4293      	cmp	r3, r2
 801a462:	db05      	blt.n	801a470 <_printf_float+0x1a0>
 801a464:	6822      	ldr	r2, [r4, #0]
 801a466:	6123      	str	r3, [r4, #16]
 801a468:	07d1      	lsls	r1, r2, #31
 801a46a:	d5e8      	bpl.n	801a43e <_printf_float+0x16e>
 801a46c:	3301      	adds	r3, #1
 801a46e:	e7e5      	b.n	801a43c <_printf_float+0x16c>
 801a470:	2b00      	cmp	r3, #0
 801a472:	bfd4      	ite	le
 801a474:	f1c3 0302 	rsble	r3, r3, #2
 801a478:	2301      	movgt	r3, #1
 801a47a:	4413      	add	r3, r2
 801a47c:	e7de      	b.n	801a43c <_printf_float+0x16c>
 801a47e:	6823      	ldr	r3, [r4, #0]
 801a480:	055a      	lsls	r2, r3, #21
 801a482:	d407      	bmi.n	801a494 <_printf_float+0x1c4>
 801a484:	6923      	ldr	r3, [r4, #16]
 801a486:	4642      	mov	r2, r8
 801a488:	4631      	mov	r1, r6
 801a48a:	4628      	mov	r0, r5
 801a48c:	47b8      	blx	r7
 801a48e:	3001      	adds	r0, #1
 801a490:	d12a      	bne.n	801a4e8 <_printf_float+0x218>
 801a492:	e76b      	b.n	801a36c <_printf_float+0x9c>
 801a494:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801a498:	f240 80de 	bls.w	801a658 <_printf_float+0x388>
 801a49c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801a4a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4a8:	d133      	bne.n	801a512 <_printf_float+0x242>
 801a4aa:	2301      	movs	r3, #1
 801a4ac:	4a42      	ldr	r2, [pc, #264]	; (801a5b8 <_printf_float+0x2e8>)
 801a4ae:	4631      	mov	r1, r6
 801a4b0:	4628      	mov	r0, r5
 801a4b2:	47b8      	blx	r7
 801a4b4:	3001      	adds	r0, #1
 801a4b6:	f43f af59 	beq.w	801a36c <_printf_float+0x9c>
 801a4ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a4be:	429a      	cmp	r2, r3
 801a4c0:	db02      	blt.n	801a4c8 <_printf_float+0x1f8>
 801a4c2:	6823      	ldr	r3, [r4, #0]
 801a4c4:	07d8      	lsls	r0, r3, #31
 801a4c6:	d50f      	bpl.n	801a4e8 <_printf_float+0x218>
 801a4c8:	9b05      	ldr	r3, [sp, #20]
 801a4ca:	465a      	mov	r2, fp
 801a4cc:	4631      	mov	r1, r6
 801a4ce:	4628      	mov	r0, r5
 801a4d0:	47b8      	blx	r7
 801a4d2:	3001      	adds	r0, #1
 801a4d4:	f43f af4a 	beq.w	801a36c <_printf_float+0x9c>
 801a4d8:	f04f 0800 	mov.w	r8, #0
 801a4dc:	f104 091a 	add.w	r9, r4, #26
 801a4e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a4e2:	3b01      	subs	r3, #1
 801a4e4:	4543      	cmp	r3, r8
 801a4e6:	dc09      	bgt.n	801a4fc <_printf_float+0x22c>
 801a4e8:	6823      	ldr	r3, [r4, #0]
 801a4ea:	079b      	lsls	r3, r3, #30
 801a4ec:	f100 8105 	bmi.w	801a6fa <_printf_float+0x42a>
 801a4f0:	68e0      	ldr	r0, [r4, #12]
 801a4f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a4f4:	4298      	cmp	r0, r3
 801a4f6:	bfb8      	it	lt
 801a4f8:	4618      	movlt	r0, r3
 801a4fa:	e739      	b.n	801a370 <_printf_float+0xa0>
 801a4fc:	2301      	movs	r3, #1
 801a4fe:	464a      	mov	r2, r9
 801a500:	4631      	mov	r1, r6
 801a502:	4628      	mov	r0, r5
 801a504:	47b8      	blx	r7
 801a506:	3001      	adds	r0, #1
 801a508:	f43f af30 	beq.w	801a36c <_printf_float+0x9c>
 801a50c:	f108 0801 	add.w	r8, r8, #1
 801a510:	e7e6      	b.n	801a4e0 <_printf_float+0x210>
 801a512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a514:	2b00      	cmp	r3, #0
 801a516:	dc2b      	bgt.n	801a570 <_printf_float+0x2a0>
 801a518:	2301      	movs	r3, #1
 801a51a:	4a27      	ldr	r2, [pc, #156]	; (801a5b8 <_printf_float+0x2e8>)
 801a51c:	4631      	mov	r1, r6
 801a51e:	4628      	mov	r0, r5
 801a520:	47b8      	blx	r7
 801a522:	3001      	adds	r0, #1
 801a524:	f43f af22 	beq.w	801a36c <_printf_float+0x9c>
 801a528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a52a:	b923      	cbnz	r3, 801a536 <_printf_float+0x266>
 801a52c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a52e:	b913      	cbnz	r3, 801a536 <_printf_float+0x266>
 801a530:	6823      	ldr	r3, [r4, #0]
 801a532:	07d9      	lsls	r1, r3, #31
 801a534:	d5d8      	bpl.n	801a4e8 <_printf_float+0x218>
 801a536:	9b05      	ldr	r3, [sp, #20]
 801a538:	465a      	mov	r2, fp
 801a53a:	4631      	mov	r1, r6
 801a53c:	4628      	mov	r0, r5
 801a53e:	47b8      	blx	r7
 801a540:	3001      	adds	r0, #1
 801a542:	f43f af13 	beq.w	801a36c <_printf_float+0x9c>
 801a546:	f04f 0900 	mov.w	r9, #0
 801a54a:	f104 0a1a 	add.w	sl, r4, #26
 801a54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a550:	425b      	negs	r3, r3
 801a552:	454b      	cmp	r3, r9
 801a554:	dc01      	bgt.n	801a55a <_printf_float+0x28a>
 801a556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a558:	e795      	b.n	801a486 <_printf_float+0x1b6>
 801a55a:	2301      	movs	r3, #1
 801a55c:	4652      	mov	r2, sl
 801a55e:	4631      	mov	r1, r6
 801a560:	4628      	mov	r0, r5
 801a562:	47b8      	blx	r7
 801a564:	3001      	adds	r0, #1
 801a566:	f43f af01 	beq.w	801a36c <_printf_float+0x9c>
 801a56a:	f109 0901 	add.w	r9, r9, #1
 801a56e:	e7ee      	b.n	801a54e <_printf_float+0x27e>
 801a570:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a572:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a574:	429a      	cmp	r2, r3
 801a576:	bfa8      	it	ge
 801a578:	461a      	movge	r2, r3
 801a57a:	2a00      	cmp	r2, #0
 801a57c:	4691      	mov	r9, r2
 801a57e:	dd07      	ble.n	801a590 <_printf_float+0x2c0>
 801a580:	4613      	mov	r3, r2
 801a582:	4631      	mov	r1, r6
 801a584:	4642      	mov	r2, r8
 801a586:	4628      	mov	r0, r5
 801a588:	47b8      	blx	r7
 801a58a:	3001      	adds	r0, #1
 801a58c:	f43f aeee 	beq.w	801a36c <_printf_float+0x9c>
 801a590:	f104 031a 	add.w	r3, r4, #26
 801a594:	f04f 0a00 	mov.w	sl, #0
 801a598:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a59c:	9307      	str	r3, [sp, #28]
 801a59e:	e017      	b.n	801a5d0 <_printf_float+0x300>
 801a5a0:	ffffffff 	.word	0xffffffff
 801a5a4:	7fefffff 	.word	0x7fefffff
 801a5a8:	0802478a 	.word	0x0802478a
 801a5ac:	08024786 	.word	0x08024786
 801a5b0:	08024792 	.word	0x08024792
 801a5b4:	0802478e 	.word	0x0802478e
 801a5b8:	08024796 	.word	0x08024796
 801a5bc:	2301      	movs	r3, #1
 801a5be:	9a07      	ldr	r2, [sp, #28]
 801a5c0:	4631      	mov	r1, r6
 801a5c2:	4628      	mov	r0, r5
 801a5c4:	47b8      	blx	r7
 801a5c6:	3001      	adds	r0, #1
 801a5c8:	f43f aed0 	beq.w	801a36c <_printf_float+0x9c>
 801a5cc:	f10a 0a01 	add.w	sl, sl, #1
 801a5d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a5d2:	9306      	str	r3, [sp, #24]
 801a5d4:	eba3 0309 	sub.w	r3, r3, r9
 801a5d8:	4553      	cmp	r3, sl
 801a5da:	dcef      	bgt.n	801a5bc <_printf_float+0x2ec>
 801a5dc:	9b06      	ldr	r3, [sp, #24]
 801a5de:	4498      	add	r8, r3
 801a5e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a5e4:	429a      	cmp	r2, r3
 801a5e6:	db15      	blt.n	801a614 <_printf_float+0x344>
 801a5e8:	6823      	ldr	r3, [r4, #0]
 801a5ea:	07da      	lsls	r2, r3, #31
 801a5ec:	d412      	bmi.n	801a614 <_printf_float+0x344>
 801a5ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a5f0:	9a06      	ldr	r2, [sp, #24]
 801a5f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a5f4:	1a9a      	subs	r2, r3, r2
 801a5f6:	eba3 0a01 	sub.w	sl, r3, r1
 801a5fa:	4592      	cmp	sl, r2
 801a5fc:	bfa8      	it	ge
 801a5fe:	4692      	movge	sl, r2
 801a600:	f1ba 0f00 	cmp.w	sl, #0
 801a604:	dc0e      	bgt.n	801a624 <_printf_float+0x354>
 801a606:	f04f 0800 	mov.w	r8, #0
 801a60a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a60e:	f104 091a 	add.w	r9, r4, #26
 801a612:	e019      	b.n	801a648 <_printf_float+0x378>
 801a614:	9b05      	ldr	r3, [sp, #20]
 801a616:	465a      	mov	r2, fp
 801a618:	4631      	mov	r1, r6
 801a61a:	4628      	mov	r0, r5
 801a61c:	47b8      	blx	r7
 801a61e:	3001      	adds	r0, #1
 801a620:	d1e5      	bne.n	801a5ee <_printf_float+0x31e>
 801a622:	e6a3      	b.n	801a36c <_printf_float+0x9c>
 801a624:	4653      	mov	r3, sl
 801a626:	4642      	mov	r2, r8
 801a628:	4631      	mov	r1, r6
 801a62a:	4628      	mov	r0, r5
 801a62c:	47b8      	blx	r7
 801a62e:	3001      	adds	r0, #1
 801a630:	d1e9      	bne.n	801a606 <_printf_float+0x336>
 801a632:	e69b      	b.n	801a36c <_printf_float+0x9c>
 801a634:	2301      	movs	r3, #1
 801a636:	464a      	mov	r2, r9
 801a638:	4631      	mov	r1, r6
 801a63a:	4628      	mov	r0, r5
 801a63c:	47b8      	blx	r7
 801a63e:	3001      	adds	r0, #1
 801a640:	f43f ae94 	beq.w	801a36c <_printf_float+0x9c>
 801a644:	f108 0801 	add.w	r8, r8, #1
 801a648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a64c:	1a9b      	subs	r3, r3, r2
 801a64e:	eba3 030a 	sub.w	r3, r3, sl
 801a652:	4543      	cmp	r3, r8
 801a654:	dcee      	bgt.n	801a634 <_printf_float+0x364>
 801a656:	e747      	b.n	801a4e8 <_printf_float+0x218>
 801a658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a65a:	2a01      	cmp	r2, #1
 801a65c:	dc01      	bgt.n	801a662 <_printf_float+0x392>
 801a65e:	07db      	lsls	r3, r3, #31
 801a660:	d539      	bpl.n	801a6d6 <_printf_float+0x406>
 801a662:	2301      	movs	r3, #1
 801a664:	4642      	mov	r2, r8
 801a666:	4631      	mov	r1, r6
 801a668:	4628      	mov	r0, r5
 801a66a:	47b8      	blx	r7
 801a66c:	3001      	adds	r0, #1
 801a66e:	f43f ae7d 	beq.w	801a36c <_printf_float+0x9c>
 801a672:	9b05      	ldr	r3, [sp, #20]
 801a674:	465a      	mov	r2, fp
 801a676:	4631      	mov	r1, r6
 801a678:	4628      	mov	r0, r5
 801a67a:	47b8      	blx	r7
 801a67c:	3001      	adds	r0, #1
 801a67e:	f108 0801 	add.w	r8, r8, #1
 801a682:	f43f ae73 	beq.w	801a36c <_printf_float+0x9c>
 801a686:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801a68a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a68c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a694:	f103 33ff 	add.w	r3, r3, #4294967295
 801a698:	d018      	beq.n	801a6cc <_printf_float+0x3fc>
 801a69a:	4642      	mov	r2, r8
 801a69c:	4631      	mov	r1, r6
 801a69e:	4628      	mov	r0, r5
 801a6a0:	47b8      	blx	r7
 801a6a2:	3001      	adds	r0, #1
 801a6a4:	d10e      	bne.n	801a6c4 <_printf_float+0x3f4>
 801a6a6:	e661      	b.n	801a36c <_printf_float+0x9c>
 801a6a8:	2301      	movs	r3, #1
 801a6aa:	464a      	mov	r2, r9
 801a6ac:	4631      	mov	r1, r6
 801a6ae:	4628      	mov	r0, r5
 801a6b0:	47b8      	blx	r7
 801a6b2:	3001      	adds	r0, #1
 801a6b4:	f43f ae5a 	beq.w	801a36c <_printf_float+0x9c>
 801a6b8:	f108 0801 	add.w	r8, r8, #1
 801a6bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a6be:	3b01      	subs	r3, #1
 801a6c0:	4543      	cmp	r3, r8
 801a6c2:	dcf1      	bgt.n	801a6a8 <_printf_float+0x3d8>
 801a6c4:	4653      	mov	r3, sl
 801a6c6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a6ca:	e6dd      	b.n	801a488 <_printf_float+0x1b8>
 801a6cc:	f04f 0800 	mov.w	r8, #0
 801a6d0:	f104 091a 	add.w	r9, r4, #26
 801a6d4:	e7f2      	b.n	801a6bc <_printf_float+0x3ec>
 801a6d6:	2301      	movs	r3, #1
 801a6d8:	e7df      	b.n	801a69a <_printf_float+0x3ca>
 801a6da:	2301      	movs	r3, #1
 801a6dc:	464a      	mov	r2, r9
 801a6de:	4631      	mov	r1, r6
 801a6e0:	4628      	mov	r0, r5
 801a6e2:	47b8      	blx	r7
 801a6e4:	3001      	adds	r0, #1
 801a6e6:	f43f ae41 	beq.w	801a36c <_printf_float+0x9c>
 801a6ea:	f108 0801 	add.w	r8, r8, #1
 801a6ee:	68e3      	ldr	r3, [r4, #12]
 801a6f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a6f2:	1a9b      	subs	r3, r3, r2
 801a6f4:	4543      	cmp	r3, r8
 801a6f6:	dcf0      	bgt.n	801a6da <_printf_float+0x40a>
 801a6f8:	e6fa      	b.n	801a4f0 <_printf_float+0x220>
 801a6fa:	f04f 0800 	mov.w	r8, #0
 801a6fe:	f104 0919 	add.w	r9, r4, #25
 801a702:	e7f4      	b.n	801a6ee <_printf_float+0x41e>
 801a704:	2900      	cmp	r1, #0
 801a706:	f43f ae8a 	beq.w	801a41e <_printf_float+0x14e>
 801a70a:	f04f 0c00 	mov.w	ip, #0
 801a70e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801a712:	e9cd 0900 	strd	r0, r9, [sp]
 801a716:	6022      	str	r2, [r4, #0]
 801a718:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a71c:	4628      	mov	r0, r5
 801a71e:	f7ff fd4f 	bl	801a1c0 <__cvt>
 801a722:	4680      	mov	r8, r0
 801a724:	e64a      	b.n	801a3bc <_printf_float+0xec>
 801a726:	bf00      	nop

0801a728 <_printf_common>:
 801a728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a72c:	4691      	mov	r9, r2
 801a72e:	461f      	mov	r7, r3
 801a730:	688a      	ldr	r2, [r1, #8]
 801a732:	690b      	ldr	r3, [r1, #16]
 801a734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a738:	4293      	cmp	r3, r2
 801a73a:	bfb8      	it	lt
 801a73c:	4613      	movlt	r3, r2
 801a73e:	f8c9 3000 	str.w	r3, [r9]
 801a742:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a746:	4606      	mov	r6, r0
 801a748:	460c      	mov	r4, r1
 801a74a:	b112      	cbz	r2, 801a752 <_printf_common+0x2a>
 801a74c:	3301      	adds	r3, #1
 801a74e:	f8c9 3000 	str.w	r3, [r9]
 801a752:	6823      	ldr	r3, [r4, #0]
 801a754:	0699      	lsls	r1, r3, #26
 801a756:	bf42      	ittt	mi
 801a758:	f8d9 3000 	ldrmi.w	r3, [r9]
 801a75c:	3302      	addmi	r3, #2
 801a75e:	f8c9 3000 	strmi.w	r3, [r9]
 801a762:	6825      	ldr	r5, [r4, #0]
 801a764:	f015 0506 	ands.w	r5, r5, #6
 801a768:	d107      	bne.n	801a77a <_printf_common+0x52>
 801a76a:	f104 0a19 	add.w	sl, r4, #25
 801a76e:	68e3      	ldr	r3, [r4, #12]
 801a770:	f8d9 2000 	ldr.w	r2, [r9]
 801a774:	1a9b      	subs	r3, r3, r2
 801a776:	42ab      	cmp	r3, r5
 801a778:	dc28      	bgt.n	801a7cc <_printf_common+0xa4>
 801a77a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801a77e:	6822      	ldr	r2, [r4, #0]
 801a780:	3300      	adds	r3, #0
 801a782:	bf18      	it	ne
 801a784:	2301      	movne	r3, #1
 801a786:	0692      	lsls	r2, r2, #26
 801a788:	d42d      	bmi.n	801a7e6 <_printf_common+0xbe>
 801a78a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a78e:	4639      	mov	r1, r7
 801a790:	4630      	mov	r0, r6
 801a792:	47c0      	blx	r8
 801a794:	3001      	adds	r0, #1
 801a796:	d020      	beq.n	801a7da <_printf_common+0xb2>
 801a798:	6823      	ldr	r3, [r4, #0]
 801a79a:	68e5      	ldr	r5, [r4, #12]
 801a79c:	f8d9 2000 	ldr.w	r2, [r9]
 801a7a0:	f003 0306 	and.w	r3, r3, #6
 801a7a4:	2b04      	cmp	r3, #4
 801a7a6:	bf08      	it	eq
 801a7a8:	1aad      	subeq	r5, r5, r2
 801a7aa:	68a3      	ldr	r3, [r4, #8]
 801a7ac:	6922      	ldr	r2, [r4, #16]
 801a7ae:	bf0c      	ite	eq
 801a7b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a7b4:	2500      	movne	r5, #0
 801a7b6:	4293      	cmp	r3, r2
 801a7b8:	bfc4      	itt	gt
 801a7ba:	1a9b      	subgt	r3, r3, r2
 801a7bc:	18ed      	addgt	r5, r5, r3
 801a7be:	f04f 0900 	mov.w	r9, #0
 801a7c2:	341a      	adds	r4, #26
 801a7c4:	454d      	cmp	r5, r9
 801a7c6:	d11a      	bne.n	801a7fe <_printf_common+0xd6>
 801a7c8:	2000      	movs	r0, #0
 801a7ca:	e008      	b.n	801a7de <_printf_common+0xb6>
 801a7cc:	2301      	movs	r3, #1
 801a7ce:	4652      	mov	r2, sl
 801a7d0:	4639      	mov	r1, r7
 801a7d2:	4630      	mov	r0, r6
 801a7d4:	47c0      	blx	r8
 801a7d6:	3001      	adds	r0, #1
 801a7d8:	d103      	bne.n	801a7e2 <_printf_common+0xba>
 801a7da:	f04f 30ff 	mov.w	r0, #4294967295
 801a7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7e2:	3501      	adds	r5, #1
 801a7e4:	e7c3      	b.n	801a76e <_printf_common+0x46>
 801a7e6:	18e1      	adds	r1, r4, r3
 801a7e8:	1c5a      	adds	r2, r3, #1
 801a7ea:	2030      	movs	r0, #48	; 0x30
 801a7ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a7f0:	4422      	add	r2, r4
 801a7f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a7f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a7fa:	3302      	adds	r3, #2
 801a7fc:	e7c5      	b.n	801a78a <_printf_common+0x62>
 801a7fe:	2301      	movs	r3, #1
 801a800:	4622      	mov	r2, r4
 801a802:	4639      	mov	r1, r7
 801a804:	4630      	mov	r0, r6
 801a806:	47c0      	blx	r8
 801a808:	3001      	adds	r0, #1
 801a80a:	d0e6      	beq.n	801a7da <_printf_common+0xb2>
 801a80c:	f109 0901 	add.w	r9, r9, #1
 801a810:	e7d8      	b.n	801a7c4 <_printf_common+0x9c>
	...

0801a814 <_printf_i>:
 801a814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a818:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801a81c:	460c      	mov	r4, r1
 801a81e:	7e09      	ldrb	r1, [r1, #24]
 801a820:	b085      	sub	sp, #20
 801a822:	296e      	cmp	r1, #110	; 0x6e
 801a824:	4617      	mov	r7, r2
 801a826:	4606      	mov	r6, r0
 801a828:	4698      	mov	r8, r3
 801a82a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a82c:	f000 80b3 	beq.w	801a996 <_printf_i+0x182>
 801a830:	d822      	bhi.n	801a878 <_printf_i+0x64>
 801a832:	2963      	cmp	r1, #99	; 0x63
 801a834:	d036      	beq.n	801a8a4 <_printf_i+0x90>
 801a836:	d80a      	bhi.n	801a84e <_printf_i+0x3a>
 801a838:	2900      	cmp	r1, #0
 801a83a:	f000 80b9 	beq.w	801a9b0 <_printf_i+0x19c>
 801a83e:	2958      	cmp	r1, #88	; 0x58
 801a840:	f000 8083 	beq.w	801a94a <_printf_i+0x136>
 801a844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a848:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801a84c:	e032      	b.n	801a8b4 <_printf_i+0xa0>
 801a84e:	2964      	cmp	r1, #100	; 0x64
 801a850:	d001      	beq.n	801a856 <_printf_i+0x42>
 801a852:	2969      	cmp	r1, #105	; 0x69
 801a854:	d1f6      	bne.n	801a844 <_printf_i+0x30>
 801a856:	6820      	ldr	r0, [r4, #0]
 801a858:	6813      	ldr	r3, [r2, #0]
 801a85a:	0605      	lsls	r5, r0, #24
 801a85c:	f103 0104 	add.w	r1, r3, #4
 801a860:	d52a      	bpl.n	801a8b8 <_printf_i+0xa4>
 801a862:	681b      	ldr	r3, [r3, #0]
 801a864:	6011      	str	r1, [r2, #0]
 801a866:	2b00      	cmp	r3, #0
 801a868:	da03      	bge.n	801a872 <_printf_i+0x5e>
 801a86a:	222d      	movs	r2, #45	; 0x2d
 801a86c:	425b      	negs	r3, r3
 801a86e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801a872:	486f      	ldr	r0, [pc, #444]	; (801aa30 <_printf_i+0x21c>)
 801a874:	220a      	movs	r2, #10
 801a876:	e039      	b.n	801a8ec <_printf_i+0xd8>
 801a878:	2973      	cmp	r1, #115	; 0x73
 801a87a:	f000 809d 	beq.w	801a9b8 <_printf_i+0x1a4>
 801a87e:	d808      	bhi.n	801a892 <_printf_i+0x7e>
 801a880:	296f      	cmp	r1, #111	; 0x6f
 801a882:	d020      	beq.n	801a8c6 <_printf_i+0xb2>
 801a884:	2970      	cmp	r1, #112	; 0x70
 801a886:	d1dd      	bne.n	801a844 <_printf_i+0x30>
 801a888:	6823      	ldr	r3, [r4, #0]
 801a88a:	f043 0320 	orr.w	r3, r3, #32
 801a88e:	6023      	str	r3, [r4, #0]
 801a890:	e003      	b.n	801a89a <_printf_i+0x86>
 801a892:	2975      	cmp	r1, #117	; 0x75
 801a894:	d017      	beq.n	801a8c6 <_printf_i+0xb2>
 801a896:	2978      	cmp	r1, #120	; 0x78
 801a898:	d1d4      	bne.n	801a844 <_printf_i+0x30>
 801a89a:	2378      	movs	r3, #120	; 0x78
 801a89c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a8a0:	4864      	ldr	r0, [pc, #400]	; (801aa34 <_printf_i+0x220>)
 801a8a2:	e055      	b.n	801a950 <_printf_i+0x13c>
 801a8a4:	6813      	ldr	r3, [r2, #0]
 801a8a6:	1d19      	adds	r1, r3, #4
 801a8a8:	681b      	ldr	r3, [r3, #0]
 801a8aa:	6011      	str	r1, [r2, #0]
 801a8ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a8b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a8b4:	2301      	movs	r3, #1
 801a8b6:	e08c      	b.n	801a9d2 <_printf_i+0x1be>
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	6011      	str	r1, [r2, #0]
 801a8bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a8c0:	bf18      	it	ne
 801a8c2:	b21b      	sxthne	r3, r3
 801a8c4:	e7cf      	b.n	801a866 <_printf_i+0x52>
 801a8c6:	6813      	ldr	r3, [r2, #0]
 801a8c8:	6825      	ldr	r5, [r4, #0]
 801a8ca:	1d18      	adds	r0, r3, #4
 801a8cc:	6010      	str	r0, [r2, #0]
 801a8ce:	0628      	lsls	r0, r5, #24
 801a8d0:	d501      	bpl.n	801a8d6 <_printf_i+0xc2>
 801a8d2:	681b      	ldr	r3, [r3, #0]
 801a8d4:	e002      	b.n	801a8dc <_printf_i+0xc8>
 801a8d6:	0668      	lsls	r0, r5, #25
 801a8d8:	d5fb      	bpl.n	801a8d2 <_printf_i+0xbe>
 801a8da:	881b      	ldrh	r3, [r3, #0]
 801a8dc:	4854      	ldr	r0, [pc, #336]	; (801aa30 <_printf_i+0x21c>)
 801a8de:	296f      	cmp	r1, #111	; 0x6f
 801a8e0:	bf14      	ite	ne
 801a8e2:	220a      	movne	r2, #10
 801a8e4:	2208      	moveq	r2, #8
 801a8e6:	2100      	movs	r1, #0
 801a8e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a8ec:	6865      	ldr	r5, [r4, #4]
 801a8ee:	60a5      	str	r5, [r4, #8]
 801a8f0:	2d00      	cmp	r5, #0
 801a8f2:	f2c0 8095 	blt.w	801aa20 <_printf_i+0x20c>
 801a8f6:	6821      	ldr	r1, [r4, #0]
 801a8f8:	f021 0104 	bic.w	r1, r1, #4
 801a8fc:	6021      	str	r1, [r4, #0]
 801a8fe:	2b00      	cmp	r3, #0
 801a900:	d13d      	bne.n	801a97e <_printf_i+0x16a>
 801a902:	2d00      	cmp	r5, #0
 801a904:	f040 808e 	bne.w	801aa24 <_printf_i+0x210>
 801a908:	4665      	mov	r5, ip
 801a90a:	2a08      	cmp	r2, #8
 801a90c:	d10b      	bne.n	801a926 <_printf_i+0x112>
 801a90e:	6823      	ldr	r3, [r4, #0]
 801a910:	07db      	lsls	r3, r3, #31
 801a912:	d508      	bpl.n	801a926 <_printf_i+0x112>
 801a914:	6923      	ldr	r3, [r4, #16]
 801a916:	6862      	ldr	r2, [r4, #4]
 801a918:	429a      	cmp	r2, r3
 801a91a:	bfde      	ittt	le
 801a91c:	2330      	movle	r3, #48	; 0x30
 801a91e:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a922:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a926:	ebac 0305 	sub.w	r3, ip, r5
 801a92a:	6123      	str	r3, [r4, #16]
 801a92c:	f8cd 8000 	str.w	r8, [sp]
 801a930:	463b      	mov	r3, r7
 801a932:	aa03      	add	r2, sp, #12
 801a934:	4621      	mov	r1, r4
 801a936:	4630      	mov	r0, r6
 801a938:	f7ff fef6 	bl	801a728 <_printf_common>
 801a93c:	3001      	adds	r0, #1
 801a93e:	d14d      	bne.n	801a9dc <_printf_i+0x1c8>
 801a940:	f04f 30ff 	mov.w	r0, #4294967295
 801a944:	b005      	add	sp, #20
 801a946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a94a:	4839      	ldr	r0, [pc, #228]	; (801aa30 <_printf_i+0x21c>)
 801a94c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801a950:	6813      	ldr	r3, [r2, #0]
 801a952:	6821      	ldr	r1, [r4, #0]
 801a954:	1d1d      	adds	r5, r3, #4
 801a956:	681b      	ldr	r3, [r3, #0]
 801a958:	6015      	str	r5, [r2, #0]
 801a95a:	060a      	lsls	r2, r1, #24
 801a95c:	d50b      	bpl.n	801a976 <_printf_i+0x162>
 801a95e:	07ca      	lsls	r2, r1, #31
 801a960:	bf44      	itt	mi
 801a962:	f041 0120 	orrmi.w	r1, r1, #32
 801a966:	6021      	strmi	r1, [r4, #0]
 801a968:	b91b      	cbnz	r3, 801a972 <_printf_i+0x15e>
 801a96a:	6822      	ldr	r2, [r4, #0]
 801a96c:	f022 0220 	bic.w	r2, r2, #32
 801a970:	6022      	str	r2, [r4, #0]
 801a972:	2210      	movs	r2, #16
 801a974:	e7b7      	b.n	801a8e6 <_printf_i+0xd2>
 801a976:	064d      	lsls	r5, r1, #25
 801a978:	bf48      	it	mi
 801a97a:	b29b      	uxthmi	r3, r3
 801a97c:	e7ef      	b.n	801a95e <_printf_i+0x14a>
 801a97e:	4665      	mov	r5, ip
 801a980:	fbb3 f1f2 	udiv	r1, r3, r2
 801a984:	fb02 3311 	mls	r3, r2, r1, r3
 801a988:	5cc3      	ldrb	r3, [r0, r3]
 801a98a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801a98e:	460b      	mov	r3, r1
 801a990:	2900      	cmp	r1, #0
 801a992:	d1f5      	bne.n	801a980 <_printf_i+0x16c>
 801a994:	e7b9      	b.n	801a90a <_printf_i+0xf6>
 801a996:	6813      	ldr	r3, [r2, #0]
 801a998:	6825      	ldr	r5, [r4, #0]
 801a99a:	6961      	ldr	r1, [r4, #20]
 801a99c:	1d18      	adds	r0, r3, #4
 801a99e:	6010      	str	r0, [r2, #0]
 801a9a0:	0628      	lsls	r0, r5, #24
 801a9a2:	681b      	ldr	r3, [r3, #0]
 801a9a4:	d501      	bpl.n	801a9aa <_printf_i+0x196>
 801a9a6:	6019      	str	r1, [r3, #0]
 801a9a8:	e002      	b.n	801a9b0 <_printf_i+0x19c>
 801a9aa:	066a      	lsls	r2, r5, #25
 801a9ac:	d5fb      	bpl.n	801a9a6 <_printf_i+0x192>
 801a9ae:	8019      	strh	r1, [r3, #0]
 801a9b0:	2300      	movs	r3, #0
 801a9b2:	6123      	str	r3, [r4, #16]
 801a9b4:	4665      	mov	r5, ip
 801a9b6:	e7b9      	b.n	801a92c <_printf_i+0x118>
 801a9b8:	6813      	ldr	r3, [r2, #0]
 801a9ba:	1d19      	adds	r1, r3, #4
 801a9bc:	6011      	str	r1, [r2, #0]
 801a9be:	681d      	ldr	r5, [r3, #0]
 801a9c0:	6862      	ldr	r2, [r4, #4]
 801a9c2:	2100      	movs	r1, #0
 801a9c4:	4628      	mov	r0, r5
 801a9c6:	f7e5 fc43 	bl	8000250 <memchr>
 801a9ca:	b108      	cbz	r0, 801a9d0 <_printf_i+0x1bc>
 801a9cc:	1b40      	subs	r0, r0, r5
 801a9ce:	6060      	str	r0, [r4, #4]
 801a9d0:	6863      	ldr	r3, [r4, #4]
 801a9d2:	6123      	str	r3, [r4, #16]
 801a9d4:	2300      	movs	r3, #0
 801a9d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a9da:	e7a7      	b.n	801a92c <_printf_i+0x118>
 801a9dc:	6923      	ldr	r3, [r4, #16]
 801a9de:	462a      	mov	r2, r5
 801a9e0:	4639      	mov	r1, r7
 801a9e2:	4630      	mov	r0, r6
 801a9e4:	47c0      	blx	r8
 801a9e6:	3001      	adds	r0, #1
 801a9e8:	d0aa      	beq.n	801a940 <_printf_i+0x12c>
 801a9ea:	6823      	ldr	r3, [r4, #0]
 801a9ec:	079b      	lsls	r3, r3, #30
 801a9ee:	d413      	bmi.n	801aa18 <_printf_i+0x204>
 801a9f0:	68e0      	ldr	r0, [r4, #12]
 801a9f2:	9b03      	ldr	r3, [sp, #12]
 801a9f4:	4298      	cmp	r0, r3
 801a9f6:	bfb8      	it	lt
 801a9f8:	4618      	movlt	r0, r3
 801a9fa:	e7a3      	b.n	801a944 <_printf_i+0x130>
 801a9fc:	2301      	movs	r3, #1
 801a9fe:	464a      	mov	r2, r9
 801aa00:	4639      	mov	r1, r7
 801aa02:	4630      	mov	r0, r6
 801aa04:	47c0      	blx	r8
 801aa06:	3001      	adds	r0, #1
 801aa08:	d09a      	beq.n	801a940 <_printf_i+0x12c>
 801aa0a:	3501      	adds	r5, #1
 801aa0c:	68e3      	ldr	r3, [r4, #12]
 801aa0e:	9a03      	ldr	r2, [sp, #12]
 801aa10:	1a9b      	subs	r3, r3, r2
 801aa12:	42ab      	cmp	r3, r5
 801aa14:	dcf2      	bgt.n	801a9fc <_printf_i+0x1e8>
 801aa16:	e7eb      	b.n	801a9f0 <_printf_i+0x1dc>
 801aa18:	2500      	movs	r5, #0
 801aa1a:	f104 0919 	add.w	r9, r4, #25
 801aa1e:	e7f5      	b.n	801aa0c <_printf_i+0x1f8>
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d1ac      	bne.n	801a97e <_printf_i+0x16a>
 801aa24:	7803      	ldrb	r3, [r0, #0]
 801aa26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801aa2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801aa2e:	e76c      	b.n	801a90a <_printf_i+0xf6>
 801aa30:	08024798 	.word	0x08024798
 801aa34:	080247a9 	.word	0x080247a9

0801aa38 <_scanf_float>:
 801aa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa3c:	469a      	mov	sl, r3
 801aa3e:	688b      	ldr	r3, [r1, #8]
 801aa40:	4616      	mov	r6, r2
 801aa42:	1e5a      	subs	r2, r3, #1
 801aa44:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801aa48:	b087      	sub	sp, #28
 801aa4a:	bf83      	ittte	hi
 801aa4c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 801aa50:	189b      	addhi	r3, r3, r2
 801aa52:	9301      	strhi	r3, [sp, #4]
 801aa54:	2300      	movls	r3, #0
 801aa56:	bf86      	itte	hi
 801aa58:	f240 135d 	movwhi	r3, #349	; 0x15d
 801aa5c:	608b      	strhi	r3, [r1, #8]
 801aa5e:	9301      	strls	r3, [sp, #4]
 801aa60:	680b      	ldr	r3, [r1, #0]
 801aa62:	4688      	mov	r8, r1
 801aa64:	f04f 0b00 	mov.w	fp, #0
 801aa68:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801aa6c:	f848 3b1c 	str.w	r3, [r8], #28
 801aa70:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801aa74:	4607      	mov	r7, r0
 801aa76:	460c      	mov	r4, r1
 801aa78:	4645      	mov	r5, r8
 801aa7a:	465a      	mov	r2, fp
 801aa7c:	46d9      	mov	r9, fp
 801aa7e:	f8cd b008 	str.w	fp, [sp, #8]
 801aa82:	68a1      	ldr	r1, [r4, #8]
 801aa84:	b181      	cbz	r1, 801aaa8 <_scanf_float+0x70>
 801aa86:	6833      	ldr	r3, [r6, #0]
 801aa88:	781b      	ldrb	r3, [r3, #0]
 801aa8a:	2b49      	cmp	r3, #73	; 0x49
 801aa8c:	d071      	beq.n	801ab72 <_scanf_float+0x13a>
 801aa8e:	d84d      	bhi.n	801ab2c <_scanf_float+0xf4>
 801aa90:	2b39      	cmp	r3, #57	; 0x39
 801aa92:	d840      	bhi.n	801ab16 <_scanf_float+0xde>
 801aa94:	2b31      	cmp	r3, #49	; 0x31
 801aa96:	f080 8088 	bcs.w	801abaa <_scanf_float+0x172>
 801aa9a:	2b2d      	cmp	r3, #45	; 0x2d
 801aa9c:	f000 8090 	beq.w	801abc0 <_scanf_float+0x188>
 801aaa0:	d815      	bhi.n	801aace <_scanf_float+0x96>
 801aaa2:	2b2b      	cmp	r3, #43	; 0x2b
 801aaa4:	f000 808c 	beq.w	801abc0 <_scanf_float+0x188>
 801aaa8:	f1b9 0f00 	cmp.w	r9, #0
 801aaac:	d003      	beq.n	801aab6 <_scanf_float+0x7e>
 801aaae:	6823      	ldr	r3, [r4, #0]
 801aab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801aab4:	6023      	str	r3, [r4, #0]
 801aab6:	3a01      	subs	r2, #1
 801aab8:	2a01      	cmp	r2, #1
 801aaba:	f200 80ea 	bhi.w	801ac92 <_scanf_float+0x25a>
 801aabe:	4545      	cmp	r5, r8
 801aac0:	f200 80dc 	bhi.w	801ac7c <_scanf_float+0x244>
 801aac4:	2601      	movs	r6, #1
 801aac6:	4630      	mov	r0, r6
 801aac8:	b007      	add	sp, #28
 801aaca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aace:	2b2e      	cmp	r3, #46	; 0x2e
 801aad0:	f000 809f 	beq.w	801ac12 <_scanf_float+0x1da>
 801aad4:	2b30      	cmp	r3, #48	; 0x30
 801aad6:	d1e7      	bne.n	801aaa8 <_scanf_float+0x70>
 801aad8:	6820      	ldr	r0, [r4, #0]
 801aada:	f410 7f80 	tst.w	r0, #256	; 0x100
 801aade:	d064      	beq.n	801abaa <_scanf_float+0x172>
 801aae0:	9b01      	ldr	r3, [sp, #4]
 801aae2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801aae6:	6020      	str	r0, [r4, #0]
 801aae8:	f109 0901 	add.w	r9, r9, #1
 801aaec:	b11b      	cbz	r3, 801aaf6 <_scanf_float+0xbe>
 801aaee:	3b01      	subs	r3, #1
 801aaf0:	3101      	adds	r1, #1
 801aaf2:	9301      	str	r3, [sp, #4]
 801aaf4:	60a1      	str	r1, [r4, #8]
 801aaf6:	68a3      	ldr	r3, [r4, #8]
 801aaf8:	3b01      	subs	r3, #1
 801aafa:	60a3      	str	r3, [r4, #8]
 801aafc:	6923      	ldr	r3, [r4, #16]
 801aafe:	3301      	adds	r3, #1
 801ab00:	6123      	str	r3, [r4, #16]
 801ab02:	6873      	ldr	r3, [r6, #4]
 801ab04:	3b01      	subs	r3, #1
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	6073      	str	r3, [r6, #4]
 801ab0a:	f340 80ac 	ble.w	801ac66 <_scanf_float+0x22e>
 801ab0e:	6833      	ldr	r3, [r6, #0]
 801ab10:	3301      	adds	r3, #1
 801ab12:	6033      	str	r3, [r6, #0]
 801ab14:	e7b5      	b.n	801aa82 <_scanf_float+0x4a>
 801ab16:	2b45      	cmp	r3, #69	; 0x45
 801ab18:	f000 8085 	beq.w	801ac26 <_scanf_float+0x1ee>
 801ab1c:	2b46      	cmp	r3, #70	; 0x46
 801ab1e:	d06a      	beq.n	801abf6 <_scanf_float+0x1be>
 801ab20:	2b41      	cmp	r3, #65	; 0x41
 801ab22:	d1c1      	bne.n	801aaa8 <_scanf_float+0x70>
 801ab24:	2a01      	cmp	r2, #1
 801ab26:	d1bf      	bne.n	801aaa8 <_scanf_float+0x70>
 801ab28:	2202      	movs	r2, #2
 801ab2a:	e046      	b.n	801abba <_scanf_float+0x182>
 801ab2c:	2b65      	cmp	r3, #101	; 0x65
 801ab2e:	d07a      	beq.n	801ac26 <_scanf_float+0x1ee>
 801ab30:	d818      	bhi.n	801ab64 <_scanf_float+0x12c>
 801ab32:	2b54      	cmp	r3, #84	; 0x54
 801ab34:	d066      	beq.n	801ac04 <_scanf_float+0x1cc>
 801ab36:	d811      	bhi.n	801ab5c <_scanf_float+0x124>
 801ab38:	2b4e      	cmp	r3, #78	; 0x4e
 801ab3a:	d1b5      	bne.n	801aaa8 <_scanf_float+0x70>
 801ab3c:	2a00      	cmp	r2, #0
 801ab3e:	d146      	bne.n	801abce <_scanf_float+0x196>
 801ab40:	f1b9 0f00 	cmp.w	r9, #0
 801ab44:	d145      	bne.n	801abd2 <_scanf_float+0x19a>
 801ab46:	6821      	ldr	r1, [r4, #0]
 801ab48:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801ab4c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801ab50:	d13f      	bne.n	801abd2 <_scanf_float+0x19a>
 801ab52:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801ab56:	6021      	str	r1, [r4, #0]
 801ab58:	2201      	movs	r2, #1
 801ab5a:	e02e      	b.n	801abba <_scanf_float+0x182>
 801ab5c:	2b59      	cmp	r3, #89	; 0x59
 801ab5e:	d01e      	beq.n	801ab9e <_scanf_float+0x166>
 801ab60:	2b61      	cmp	r3, #97	; 0x61
 801ab62:	e7de      	b.n	801ab22 <_scanf_float+0xea>
 801ab64:	2b6e      	cmp	r3, #110	; 0x6e
 801ab66:	d0e9      	beq.n	801ab3c <_scanf_float+0x104>
 801ab68:	d815      	bhi.n	801ab96 <_scanf_float+0x15e>
 801ab6a:	2b66      	cmp	r3, #102	; 0x66
 801ab6c:	d043      	beq.n	801abf6 <_scanf_float+0x1be>
 801ab6e:	2b69      	cmp	r3, #105	; 0x69
 801ab70:	d19a      	bne.n	801aaa8 <_scanf_float+0x70>
 801ab72:	f1bb 0f00 	cmp.w	fp, #0
 801ab76:	d138      	bne.n	801abea <_scanf_float+0x1b2>
 801ab78:	f1b9 0f00 	cmp.w	r9, #0
 801ab7c:	d197      	bne.n	801aaae <_scanf_float+0x76>
 801ab7e:	6821      	ldr	r1, [r4, #0]
 801ab80:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801ab84:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801ab88:	d195      	bne.n	801aab6 <_scanf_float+0x7e>
 801ab8a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801ab8e:	6021      	str	r1, [r4, #0]
 801ab90:	f04f 0b01 	mov.w	fp, #1
 801ab94:	e011      	b.n	801abba <_scanf_float+0x182>
 801ab96:	2b74      	cmp	r3, #116	; 0x74
 801ab98:	d034      	beq.n	801ac04 <_scanf_float+0x1cc>
 801ab9a:	2b79      	cmp	r3, #121	; 0x79
 801ab9c:	d184      	bne.n	801aaa8 <_scanf_float+0x70>
 801ab9e:	f1bb 0f07 	cmp.w	fp, #7
 801aba2:	d181      	bne.n	801aaa8 <_scanf_float+0x70>
 801aba4:	f04f 0b08 	mov.w	fp, #8
 801aba8:	e007      	b.n	801abba <_scanf_float+0x182>
 801abaa:	eb12 0f0b 	cmn.w	r2, fp
 801abae:	f47f af7b 	bne.w	801aaa8 <_scanf_float+0x70>
 801abb2:	6821      	ldr	r1, [r4, #0]
 801abb4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 801abb8:	6021      	str	r1, [r4, #0]
 801abba:	702b      	strb	r3, [r5, #0]
 801abbc:	3501      	adds	r5, #1
 801abbe:	e79a      	b.n	801aaf6 <_scanf_float+0xbe>
 801abc0:	6821      	ldr	r1, [r4, #0]
 801abc2:	0608      	lsls	r0, r1, #24
 801abc4:	f57f af70 	bpl.w	801aaa8 <_scanf_float+0x70>
 801abc8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801abcc:	e7f4      	b.n	801abb8 <_scanf_float+0x180>
 801abce:	2a02      	cmp	r2, #2
 801abd0:	d047      	beq.n	801ac62 <_scanf_float+0x22a>
 801abd2:	f1bb 0f01 	cmp.w	fp, #1
 801abd6:	d003      	beq.n	801abe0 <_scanf_float+0x1a8>
 801abd8:	f1bb 0f04 	cmp.w	fp, #4
 801abdc:	f47f af64 	bne.w	801aaa8 <_scanf_float+0x70>
 801abe0:	f10b 0b01 	add.w	fp, fp, #1
 801abe4:	fa5f fb8b 	uxtb.w	fp, fp
 801abe8:	e7e7      	b.n	801abba <_scanf_float+0x182>
 801abea:	f1bb 0f03 	cmp.w	fp, #3
 801abee:	d0f7      	beq.n	801abe0 <_scanf_float+0x1a8>
 801abf0:	f1bb 0f05 	cmp.w	fp, #5
 801abf4:	e7f2      	b.n	801abdc <_scanf_float+0x1a4>
 801abf6:	f1bb 0f02 	cmp.w	fp, #2
 801abfa:	f47f af55 	bne.w	801aaa8 <_scanf_float+0x70>
 801abfe:	f04f 0b03 	mov.w	fp, #3
 801ac02:	e7da      	b.n	801abba <_scanf_float+0x182>
 801ac04:	f1bb 0f06 	cmp.w	fp, #6
 801ac08:	f47f af4e 	bne.w	801aaa8 <_scanf_float+0x70>
 801ac0c:	f04f 0b07 	mov.w	fp, #7
 801ac10:	e7d3      	b.n	801abba <_scanf_float+0x182>
 801ac12:	6821      	ldr	r1, [r4, #0]
 801ac14:	0588      	lsls	r0, r1, #22
 801ac16:	f57f af47 	bpl.w	801aaa8 <_scanf_float+0x70>
 801ac1a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801ac1e:	6021      	str	r1, [r4, #0]
 801ac20:	f8cd 9008 	str.w	r9, [sp, #8]
 801ac24:	e7c9      	b.n	801abba <_scanf_float+0x182>
 801ac26:	6821      	ldr	r1, [r4, #0]
 801ac28:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 801ac2c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801ac30:	d006      	beq.n	801ac40 <_scanf_float+0x208>
 801ac32:	0548      	lsls	r0, r1, #21
 801ac34:	f57f af38 	bpl.w	801aaa8 <_scanf_float+0x70>
 801ac38:	f1b9 0f00 	cmp.w	r9, #0
 801ac3c:	f43f af3b 	beq.w	801aab6 <_scanf_float+0x7e>
 801ac40:	0588      	lsls	r0, r1, #22
 801ac42:	bf58      	it	pl
 801ac44:	9802      	ldrpl	r0, [sp, #8]
 801ac46:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801ac4a:	bf58      	it	pl
 801ac4c:	eba9 0000 	subpl.w	r0, r9, r0
 801ac50:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801ac54:	bf58      	it	pl
 801ac56:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801ac5a:	6021      	str	r1, [r4, #0]
 801ac5c:	f04f 0900 	mov.w	r9, #0
 801ac60:	e7ab      	b.n	801abba <_scanf_float+0x182>
 801ac62:	2203      	movs	r2, #3
 801ac64:	e7a9      	b.n	801abba <_scanf_float+0x182>
 801ac66:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801ac6a:	9205      	str	r2, [sp, #20]
 801ac6c:	4631      	mov	r1, r6
 801ac6e:	4638      	mov	r0, r7
 801ac70:	4798      	blx	r3
 801ac72:	9a05      	ldr	r2, [sp, #20]
 801ac74:	2800      	cmp	r0, #0
 801ac76:	f43f af04 	beq.w	801aa82 <_scanf_float+0x4a>
 801ac7a:	e715      	b.n	801aaa8 <_scanf_float+0x70>
 801ac7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ac80:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801ac84:	4632      	mov	r2, r6
 801ac86:	4638      	mov	r0, r7
 801ac88:	4798      	blx	r3
 801ac8a:	6923      	ldr	r3, [r4, #16]
 801ac8c:	3b01      	subs	r3, #1
 801ac8e:	6123      	str	r3, [r4, #16]
 801ac90:	e715      	b.n	801aabe <_scanf_float+0x86>
 801ac92:	f10b 33ff 	add.w	r3, fp, #4294967295
 801ac96:	2b06      	cmp	r3, #6
 801ac98:	d80a      	bhi.n	801acb0 <_scanf_float+0x278>
 801ac9a:	f1bb 0f02 	cmp.w	fp, #2
 801ac9e:	d966      	bls.n	801ad6e <_scanf_float+0x336>
 801aca0:	f1ab 0b03 	sub.w	fp, fp, #3
 801aca4:	fa5f fb8b 	uxtb.w	fp, fp
 801aca8:	eba5 0b0b 	sub.w	fp, r5, fp
 801acac:	455d      	cmp	r5, fp
 801acae:	d149      	bne.n	801ad44 <_scanf_float+0x30c>
 801acb0:	6823      	ldr	r3, [r4, #0]
 801acb2:	05da      	lsls	r2, r3, #23
 801acb4:	d51f      	bpl.n	801acf6 <_scanf_float+0x2be>
 801acb6:	055b      	lsls	r3, r3, #21
 801acb8:	d466      	bmi.n	801ad88 <_scanf_float+0x350>
 801acba:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801acbe:	6923      	ldr	r3, [r4, #16]
 801acc0:	2965      	cmp	r1, #101	; 0x65
 801acc2:	f103 33ff 	add.w	r3, r3, #4294967295
 801acc6:	f105 3bff 	add.w	fp, r5, #4294967295
 801acca:	6123      	str	r3, [r4, #16]
 801accc:	d00d      	beq.n	801acea <_scanf_float+0x2b2>
 801acce:	2945      	cmp	r1, #69	; 0x45
 801acd0:	d00b      	beq.n	801acea <_scanf_float+0x2b2>
 801acd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801acd6:	4632      	mov	r2, r6
 801acd8:	4638      	mov	r0, r7
 801acda:	4798      	blx	r3
 801acdc:	6923      	ldr	r3, [r4, #16]
 801acde:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801ace2:	3b01      	subs	r3, #1
 801ace4:	f1a5 0b02 	sub.w	fp, r5, #2
 801ace8:	6123      	str	r3, [r4, #16]
 801acea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801acee:	4632      	mov	r2, r6
 801acf0:	4638      	mov	r0, r7
 801acf2:	4798      	blx	r3
 801acf4:	465d      	mov	r5, fp
 801acf6:	6826      	ldr	r6, [r4, #0]
 801acf8:	f016 0610 	ands.w	r6, r6, #16
 801acfc:	d170      	bne.n	801ade0 <_scanf_float+0x3a8>
 801acfe:	702e      	strb	r6, [r5, #0]
 801ad00:	6823      	ldr	r3, [r4, #0]
 801ad02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801ad06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ad0a:	d140      	bne.n	801ad8e <_scanf_float+0x356>
 801ad0c:	9b02      	ldr	r3, [sp, #8]
 801ad0e:	eba9 0303 	sub.w	r3, r9, r3
 801ad12:	425a      	negs	r2, r3
 801ad14:	2b00      	cmp	r3, #0
 801ad16:	d147      	bne.n	801ada8 <_scanf_float+0x370>
 801ad18:	2200      	movs	r2, #0
 801ad1a:	4638      	mov	r0, r7
 801ad1c:	4641      	mov	r1, r8
 801ad1e:	f000 fff7 	bl	801bd10 <_strtod_r>
 801ad22:	6820      	ldr	r0, [r4, #0]
 801ad24:	f8da 3000 	ldr.w	r3, [sl]
 801ad28:	f010 0f02 	tst.w	r0, #2
 801ad2c:	f103 0204 	add.w	r2, r3, #4
 801ad30:	f8ca 2000 	str.w	r2, [sl]
 801ad34:	d043      	beq.n	801adbe <_scanf_float+0x386>
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	ed83 0b00 	vstr	d0, [r3]
 801ad3c:	68e3      	ldr	r3, [r4, #12]
 801ad3e:	3301      	adds	r3, #1
 801ad40:	60e3      	str	r3, [r4, #12]
 801ad42:	e6c0      	b.n	801aac6 <_scanf_float+0x8e>
 801ad44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ad48:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801ad4c:	4632      	mov	r2, r6
 801ad4e:	4638      	mov	r0, r7
 801ad50:	4798      	blx	r3
 801ad52:	6923      	ldr	r3, [r4, #16]
 801ad54:	3b01      	subs	r3, #1
 801ad56:	6123      	str	r3, [r4, #16]
 801ad58:	e7a8      	b.n	801acac <_scanf_float+0x274>
 801ad5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ad5e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801ad62:	4632      	mov	r2, r6
 801ad64:	4638      	mov	r0, r7
 801ad66:	4798      	blx	r3
 801ad68:	6923      	ldr	r3, [r4, #16]
 801ad6a:	3b01      	subs	r3, #1
 801ad6c:	6123      	str	r3, [r4, #16]
 801ad6e:	4545      	cmp	r5, r8
 801ad70:	d8f3      	bhi.n	801ad5a <_scanf_float+0x322>
 801ad72:	e6a7      	b.n	801aac4 <_scanf_float+0x8c>
 801ad74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ad78:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801ad7c:	4632      	mov	r2, r6
 801ad7e:	4638      	mov	r0, r7
 801ad80:	4798      	blx	r3
 801ad82:	6923      	ldr	r3, [r4, #16]
 801ad84:	3b01      	subs	r3, #1
 801ad86:	6123      	str	r3, [r4, #16]
 801ad88:	4545      	cmp	r5, r8
 801ad8a:	d8f3      	bhi.n	801ad74 <_scanf_float+0x33c>
 801ad8c:	e69a      	b.n	801aac4 <_scanf_float+0x8c>
 801ad8e:	9b03      	ldr	r3, [sp, #12]
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	d0c1      	beq.n	801ad18 <_scanf_float+0x2e0>
 801ad94:	9904      	ldr	r1, [sp, #16]
 801ad96:	230a      	movs	r3, #10
 801ad98:	4632      	mov	r2, r6
 801ad9a:	3101      	adds	r1, #1
 801ad9c:	4638      	mov	r0, r7
 801ad9e:	f001 f843 	bl	801be28 <_strtol_r>
 801ada2:	9b03      	ldr	r3, [sp, #12]
 801ada4:	9d04      	ldr	r5, [sp, #16]
 801ada6:	1ac2      	subs	r2, r0, r3
 801ada8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801adac:	429d      	cmp	r5, r3
 801adae:	bf28      	it	cs
 801adb0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 801adb4:	490b      	ldr	r1, [pc, #44]	; (801ade4 <_scanf_float+0x3ac>)
 801adb6:	4628      	mov	r0, r5
 801adb8:	f000 f936 	bl	801b028 <siprintf>
 801adbc:	e7ac      	b.n	801ad18 <_scanf_float+0x2e0>
 801adbe:	f010 0004 	ands.w	r0, r0, #4
 801adc2:	d1b8      	bne.n	801ad36 <_scanf_float+0x2fe>
 801adc4:	eeb4 0b40 	vcmp.f64	d0, d0
 801adc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adcc:	681d      	ldr	r5, [r3, #0]
 801adce:	d704      	bvc.n	801adda <_scanf_float+0x3a2>
 801add0:	f000 f924 	bl	801b01c <nanf>
 801add4:	ed85 0a00 	vstr	s0, [r5]
 801add8:	e7b0      	b.n	801ad3c <_scanf_float+0x304>
 801adda:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801adde:	e7f9      	b.n	801add4 <_scanf_float+0x39c>
 801ade0:	2600      	movs	r6, #0
 801ade2:	e670      	b.n	801aac6 <_scanf_float+0x8e>
 801ade4:	080247ba 	.word	0x080247ba

0801ade8 <iprintf>:
 801ade8:	b40f      	push	{r0, r1, r2, r3}
 801adea:	4b0a      	ldr	r3, [pc, #40]	; (801ae14 <iprintf+0x2c>)
 801adec:	b513      	push	{r0, r1, r4, lr}
 801adee:	681c      	ldr	r4, [r3, #0]
 801adf0:	b124      	cbz	r4, 801adfc <iprintf+0x14>
 801adf2:	69a3      	ldr	r3, [r4, #24]
 801adf4:	b913      	cbnz	r3, 801adfc <iprintf+0x14>
 801adf6:	4620      	mov	r0, r4
 801adf8:	f7ff f82a 	bl	8019e50 <__sinit>
 801adfc:	ab05      	add	r3, sp, #20
 801adfe:	9a04      	ldr	r2, [sp, #16]
 801ae00:	68a1      	ldr	r1, [r4, #8]
 801ae02:	9301      	str	r3, [sp, #4]
 801ae04:	4620      	mov	r0, r4
 801ae06:	f003 f8d1 	bl	801dfac <_vfiprintf_r>
 801ae0a:	b002      	add	sp, #8
 801ae0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ae10:	b004      	add	sp, #16
 801ae12:	4770      	bx	lr
 801ae14:	20000020 	.word	0x20000020

0801ae18 <_puts_r>:
 801ae18:	b570      	push	{r4, r5, r6, lr}
 801ae1a:	460e      	mov	r6, r1
 801ae1c:	4605      	mov	r5, r0
 801ae1e:	b118      	cbz	r0, 801ae28 <_puts_r+0x10>
 801ae20:	6983      	ldr	r3, [r0, #24]
 801ae22:	b90b      	cbnz	r3, 801ae28 <_puts_r+0x10>
 801ae24:	f7ff f814 	bl	8019e50 <__sinit>
 801ae28:	69ab      	ldr	r3, [r5, #24]
 801ae2a:	68ac      	ldr	r4, [r5, #8]
 801ae2c:	b913      	cbnz	r3, 801ae34 <_puts_r+0x1c>
 801ae2e:	4628      	mov	r0, r5
 801ae30:	f7ff f80e 	bl	8019e50 <__sinit>
 801ae34:	4b23      	ldr	r3, [pc, #140]	; (801aec4 <_puts_r+0xac>)
 801ae36:	429c      	cmp	r4, r3
 801ae38:	d117      	bne.n	801ae6a <_puts_r+0x52>
 801ae3a:	686c      	ldr	r4, [r5, #4]
 801ae3c:	89a3      	ldrh	r3, [r4, #12]
 801ae3e:	071b      	lsls	r3, r3, #28
 801ae40:	d51d      	bpl.n	801ae7e <_puts_r+0x66>
 801ae42:	6923      	ldr	r3, [r4, #16]
 801ae44:	b1db      	cbz	r3, 801ae7e <_puts_r+0x66>
 801ae46:	3e01      	subs	r6, #1
 801ae48:	68a3      	ldr	r3, [r4, #8]
 801ae4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ae4e:	3b01      	subs	r3, #1
 801ae50:	60a3      	str	r3, [r4, #8]
 801ae52:	b9e9      	cbnz	r1, 801ae90 <_puts_r+0x78>
 801ae54:	2b00      	cmp	r3, #0
 801ae56:	da2e      	bge.n	801aeb6 <_puts_r+0x9e>
 801ae58:	4622      	mov	r2, r4
 801ae5a:	210a      	movs	r1, #10
 801ae5c:	4628      	mov	r0, r5
 801ae5e:	f000 fff5 	bl	801be4c <__swbuf_r>
 801ae62:	3001      	adds	r0, #1
 801ae64:	d011      	beq.n	801ae8a <_puts_r+0x72>
 801ae66:	200a      	movs	r0, #10
 801ae68:	e011      	b.n	801ae8e <_puts_r+0x76>
 801ae6a:	4b17      	ldr	r3, [pc, #92]	; (801aec8 <_puts_r+0xb0>)
 801ae6c:	429c      	cmp	r4, r3
 801ae6e:	d101      	bne.n	801ae74 <_puts_r+0x5c>
 801ae70:	68ac      	ldr	r4, [r5, #8]
 801ae72:	e7e3      	b.n	801ae3c <_puts_r+0x24>
 801ae74:	4b15      	ldr	r3, [pc, #84]	; (801aecc <_puts_r+0xb4>)
 801ae76:	429c      	cmp	r4, r3
 801ae78:	bf08      	it	eq
 801ae7a:	68ec      	ldreq	r4, [r5, #12]
 801ae7c:	e7de      	b.n	801ae3c <_puts_r+0x24>
 801ae7e:	4621      	mov	r1, r4
 801ae80:	4628      	mov	r0, r5
 801ae82:	f001 f855 	bl	801bf30 <__swsetup_r>
 801ae86:	2800      	cmp	r0, #0
 801ae88:	d0dd      	beq.n	801ae46 <_puts_r+0x2e>
 801ae8a:	f04f 30ff 	mov.w	r0, #4294967295
 801ae8e:	bd70      	pop	{r4, r5, r6, pc}
 801ae90:	2b00      	cmp	r3, #0
 801ae92:	da04      	bge.n	801ae9e <_puts_r+0x86>
 801ae94:	69a2      	ldr	r2, [r4, #24]
 801ae96:	429a      	cmp	r2, r3
 801ae98:	dc06      	bgt.n	801aea8 <_puts_r+0x90>
 801ae9a:	290a      	cmp	r1, #10
 801ae9c:	d004      	beq.n	801aea8 <_puts_r+0x90>
 801ae9e:	6823      	ldr	r3, [r4, #0]
 801aea0:	1c5a      	adds	r2, r3, #1
 801aea2:	6022      	str	r2, [r4, #0]
 801aea4:	7019      	strb	r1, [r3, #0]
 801aea6:	e7cf      	b.n	801ae48 <_puts_r+0x30>
 801aea8:	4622      	mov	r2, r4
 801aeaa:	4628      	mov	r0, r5
 801aeac:	f000 ffce 	bl	801be4c <__swbuf_r>
 801aeb0:	3001      	adds	r0, #1
 801aeb2:	d1c9      	bne.n	801ae48 <_puts_r+0x30>
 801aeb4:	e7e9      	b.n	801ae8a <_puts_r+0x72>
 801aeb6:	6823      	ldr	r3, [r4, #0]
 801aeb8:	200a      	movs	r0, #10
 801aeba:	1c5a      	adds	r2, r3, #1
 801aebc:	6022      	str	r2, [r4, #0]
 801aebe:	7018      	strb	r0, [r3, #0]
 801aec0:	e7e5      	b.n	801ae8e <_puts_r+0x76>
 801aec2:	bf00      	nop
 801aec4:	08024738 	.word	0x08024738
 801aec8:	08024758 	.word	0x08024758
 801aecc:	08024718 	.word	0x08024718

0801aed0 <puts>:
 801aed0:	4b02      	ldr	r3, [pc, #8]	; (801aedc <puts+0xc>)
 801aed2:	4601      	mov	r1, r0
 801aed4:	6818      	ldr	r0, [r3, #0]
 801aed6:	f7ff bf9f 	b.w	801ae18 <_puts_r>
 801aeda:	bf00      	nop
 801aedc:	20000020 	.word	0x20000020

0801aee0 <rand>:
 801aee0:	b538      	push	{r3, r4, r5, lr}
 801aee2:	4b13      	ldr	r3, [pc, #76]	; (801af30 <rand+0x50>)
 801aee4:	681c      	ldr	r4, [r3, #0]
 801aee6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801aee8:	b97b      	cbnz	r3, 801af0a <rand+0x2a>
 801aeea:	2018      	movs	r0, #24
 801aeec:	f7ff f862 	bl	8019fb4 <malloc>
 801aef0:	4a10      	ldr	r2, [pc, #64]	; (801af34 <rand+0x54>)
 801aef2:	4b11      	ldr	r3, [pc, #68]	; (801af38 <rand+0x58>)
 801aef4:	63a0      	str	r0, [r4, #56]	; 0x38
 801aef6:	e9c0 2300 	strd	r2, r3, [r0]
 801aefa:	4b10      	ldr	r3, [pc, #64]	; (801af3c <rand+0x5c>)
 801aefc:	6083      	str	r3, [r0, #8]
 801aefe:	230b      	movs	r3, #11
 801af00:	8183      	strh	r3, [r0, #12]
 801af02:	2201      	movs	r2, #1
 801af04:	2300      	movs	r3, #0
 801af06:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801af0a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801af0c:	480c      	ldr	r0, [pc, #48]	; (801af40 <rand+0x60>)
 801af0e:	690a      	ldr	r2, [r1, #16]
 801af10:	694b      	ldr	r3, [r1, #20]
 801af12:	4c0c      	ldr	r4, [pc, #48]	; (801af44 <rand+0x64>)
 801af14:	4350      	muls	r0, r2
 801af16:	fb04 0003 	mla	r0, r4, r3, r0
 801af1a:	fba2 2304 	umull	r2, r3, r2, r4
 801af1e:	4403      	add	r3, r0
 801af20:	1c54      	adds	r4, r2, #1
 801af22:	f143 0500 	adc.w	r5, r3, #0
 801af26:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801af2a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801af2e:	bd38      	pop	{r3, r4, r5, pc}
 801af30:	20000020 	.word	0x20000020
 801af34:	abcd330e 	.word	0xabcd330e
 801af38:	e66d1234 	.word	0xe66d1234
 801af3c:	0005deec 	.word	0x0005deec
 801af40:	5851f42d 	.word	0x5851f42d
 801af44:	4c957f2d 	.word	0x4c957f2d

0801af48 <cleanup_glue>:
 801af48:	b538      	push	{r3, r4, r5, lr}
 801af4a:	460c      	mov	r4, r1
 801af4c:	6809      	ldr	r1, [r1, #0]
 801af4e:	4605      	mov	r5, r0
 801af50:	b109      	cbz	r1, 801af56 <cleanup_glue+0xe>
 801af52:	f7ff fff9 	bl	801af48 <cleanup_glue>
 801af56:	4621      	mov	r1, r4
 801af58:	4628      	mov	r0, r5
 801af5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801af5e:	f7ff b887 	b.w	801a070 <_free_r>
	...

0801af64 <_reclaim_reent>:
 801af64:	4b2c      	ldr	r3, [pc, #176]	; (801b018 <_reclaim_reent+0xb4>)
 801af66:	681b      	ldr	r3, [r3, #0]
 801af68:	4283      	cmp	r3, r0
 801af6a:	b570      	push	{r4, r5, r6, lr}
 801af6c:	4604      	mov	r4, r0
 801af6e:	d051      	beq.n	801b014 <_reclaim_reent+0xb0>
 801af70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801af72:	b143      	cbz	r3, 801af86 <_reclaim_reent+0x22>
 801af74:	68db      	ldr	r3, [r3, #12]
 801af76:	2b00      	cmp	r3, #0
 801af78:	d14a      	bne.n	801b010 <_reclaim_reent+0xac>
 801af7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801af7c:	6819      	ldr	r1, [r3, #0]
 801af7e:	b111      	cbz	r1, 801af86 <_reclaim_reent+0x22>
 801af80:	4620      	mov	r0, r4
 801af82:	f7ff f875 	bl	801a070 <_free_r>
 801af86:	6961      	ldr	r1, [r4, #20]
 801af88:	b111      	cbz	r1, 801af90 <_reclaim_reent+0x2c>
 801af8a:	4620      	mov	r0, r4
 801af8c:	f7ff f870 	bl	801a070 <_free_r>
 801af90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801af92:	b111      	cbz	r1, 801af9a <_reclaim_reent+0x36>
 801af94:	4620      	mov	r0, r4
 801af96:	f7ff f86b 	bl	801a070 <_free_r>
 801af9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801af9c:	b111      	cbz	r1, 801afa4 <_reclaim_reent+0x40>
 801af9e:	4620      	mov	r0, r4
 801afa0:	f7ff f866 	bl	801a070 <_free_r>
 801afa4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801afa6:	b111      	cbz	r1, 801afae <_reclaim_reent+0x4a>
 801afa8:	4620      	mov	r0, r4
 801afaa:	f7ff f861 	bl	801a070 <_free_r>
 801afae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801afb0:	b111      	cbz	r1, 801afb8 <_reclaim_reent+0x54>
 801afb2:	4620      	mov	r0, r4
 801afb4:	f7ff f85c 	bl	801a070 <_free_r>
 801afb8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801afba:	b111      	cbz	r1, 801afc2 <_reclaim_reent+0x5e>
 801afbc:	4620      	mov	r0, r4
 801afbe:	f7ff f857 	bl	801a070 <_free_r>
 801afc2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801afc4:	b111      	cbz	r1, 801afcc <_reclaim_reent+0x68>
 801afc6:	4620      	mov	r0, r4
 801afc8:	f7ff f852 	bl	801a070 <_free_r>
 801afcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801afce:	b111      	cbz	r1, 801afd6 <_reclaim_reent+0x72>
 801afd0:	4620      	mov	r0, r4
 801afd2:	f7ff f84d 	bl	801a070 <_free_r>
 801afd6:	69a3      	ldr	r3, [r4, #24]
 801afd8:	b1e3      	cbz	r3, 801b014 <_reclaim_reent+0xb0>
 801afda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801afdc:	4620      	mov	r0, r4
 801afde:	4798      	blx	r3
 801afe0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801afe2:	b1b9      	cbz	r1, 801b014 <_reclaim_reent+0xb0>
 801afe4:	4620      	mov	r0, r4
 801afe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801afea:	f7ff bfad 	b.w	801af48 <cleanup_glue>
 801afee:	5949      	ldr	r1, [r1, r5]
 801aff0:	b941      	cbnz	r1, 801b004 <_reclaim_reent+0xa0>
 801aff2:	3504      	adds	r5, #4
 801aff4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801aff6:	2d80      	cmp	r5, #128	; 0x80
 801aff8:	68d9      	ldr	r1, [r3, #12]
 801affa:	d1f8      	bne.n	801afee <_reclaim_reent+0x8a>
 801affc:	4620      	mov	r0, r4
 801affe:	f7ff f837 	bl	801a070 <_free_r>
 801b002:	e7ba      	b.n	801af7a <_reclaim_reent+0x16>
 801b004:	680e      	ldr	r6, [r1, #0]
 801b006:	4620      	mov	r0, r4
 801b008:	f7ff f832 	bl	801a070 <_free_r>
 801b00c:	4631      	mov	r1, r6
 801b00e:	e7ef      	b.n	801aff0 <_reclaim_reent+0x8c>
 801b010:	2500      	movs	r5, #0
 801b012:	e7ef      	b.n	801aff4 <_reclaim_reent+0x90>
 801b014:	bd70      	pop	{r4, r5, r6, pc}
 801b016:	bf00      	nop
 801b018:	20000020 	.word	0x20000020

0801b01c <nanf>:
 801b01c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b024 <nanf+0x8>
 801b020:	4770      	bx	lr
 801b022:	bf00      	nop
 801b024:	7fc00000 	.word	0x7fc00000

0801b028 <siprintf>:
 801b028:	b40e      	push	{r1, r2, r3}
 801b02a:	b500      	push	{lr}
 801b02c:	b09c      	sub	sp, #112	; 0x70
 801b02e:	ab1d      	add	r3, sp, #116	; 0x74
 801b030:	9002      	str	r0, [sp, #8]
 801b032:	9006      	str	r0, [sp, #24]
 801b034:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b038:	4809      	ldr	r0, [pc, #36]	; (801b060 <siprintf+0x38>)
 801b03a:	9107      	str	r1, [sp, #28]
 801b03c:	9104      	str	r1, [sp, #16]
 801b03e:	4909      	ldr	r1, [pc, #36]	; (801b064 <siprintf+0x3c>)
 801b040:	f853 2b04 	ldr.w	r2, [r3], #4
 801b044:	9105      	str	r1, [sp, #20]
 801b046:	6800      	ldr	r0, [r0, #0]
 801b048:	9301      	str	r3, [sp, #4]
 801b04a:	a902      	add	r1, sp, #8
 801b04c:	f002 fe8c 	bl	801dd68 <_svfiprintf_r>
 801b050:	9b02      	ldr	r3, [sp, #8]
 801b052:	2200      	movs	r2, #0
 801b054:	701a      	strb	r2, [r3, #0]
 801b056:	b01c      	add	sp, #112	; 0x70
 801b058:	f85d eb04 	ldr.w	lr, [sp], #4
 801b05c:	b003      	add	sp, #12
 801b05e:	4770      	bx	lr
 801b060:	20000020 	.word	0x20000020
 801b064:	ffff0208 	.word	0xffff0208

0801b068 <__sread>:
 801b068:	b510      	push	{r4, lr}
 801b06a:	460c      	mov	r4, r1
 801b06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b070:	f003 f8b2 	bl	801e1d8 <_read_r>
 801b074:	2800      	cmp	r0, #0
 801b076:	bfab      	itete	ge
 801b078:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b07a:	89a3      	ldrhlt	r3, [r4, #12]
 801b07c:	181b      	addge	r3, r3, r0
 801b07e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b082:	bfac      	ite	ge
 801b084:	6563      	strge	r3, [r4, #84]	; 0x54
 801b086:	81a3      	strhlt	r3, [r4, #12]
 801b088:	bd10      	pop	{r4, pc}

0801b08a <__swrite>:
 801b08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b08e:	461f      	mov	r7, r3
 801b090:	898b      	ldrh	r3, [r1, #12]
 801b092:	05db      	lsls	r3, r3, #23
 801b094:	4605      	mov	r5, r0
 801b096:	460c      	mov	r4, r1
 801b098:	4616      	mov	r6, r2
 801b09a:	d505      	bpl.n	801b0a8 <__swrite+0x1e>
 801b09c:	2302      	movs	r3, #2
 801b09e:	2200      	movs	r2, #0
 801b0a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b0a4:	f002 f982 	bl	801d3ac <_lseek_r>
 801b0a8:	89a3      	ldrh	r3, [r4, #12]
 801b0aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b0ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b0b2:	81a3      	strh	r3, [r4, #12]
 801b0b4:	4632      	mov	r2, r6
 801b0b6:	463b      	mov	r3, r7
 801b0b8:	4628      	mov	r0, r5
 801b0ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b0be:	f000 bf25 	b.w	801bf0c <_write_r>

0801b0c2 <__sseek>:
 801b0c2:	b510      	push	{r4, lr}
 801b0c4:	460c      	mov	r4, r1
 801b0c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b0ca:	f002 f96f 	bl	801d3ac <_lseek_r>
 801b0ce:	1c43      	adds	r3, r0, #1
 801b0d0:	89a3      	ldrh	r3, [r4, #12]
 801b0d2:	bf15      	itete	ne
 801b0d4:	6560      	strne	r0, [r4, #84]	; 0x54
 801b0d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b0da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b0de:	81a3      	strheq	r3, [r4, #12]
 801b0e0:	bf18      	it	ne
 801b0e2:	81a3      	strhne	r3, [r4, #12]
 801b0e4:	bd10      	pop	{r4, pc}

0801b0e6 <__sclose>:
 801b0e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b0ea:	f000 bf8f 	b.w	801c00c <_close_r>

0801b0ee <strncmp>:
 801b0ee:	b510      	push	{r4, lr}
 801b0f0:	b16a      	cbz	r2, 801b10e <strncmp+0x20>
 801b0f2:	3901      	subs	r1, #1
 801b0f4:	1884      	adds	r4, r0, r2
 801b0f6:	f810 3b01 	ldrb.w	r3, [r0], #1
 801b0fa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801b0fe:	4293      	cmp	r3, r2
 801b100:	d103      	bne.n	801b10a <strncmp+0x1c>
 801b102:	42a0      	cmp	r0, r4
 801b104:	d001      	beq.n	801b10a <strncmp+0x1c>
 801b106:	2b00      	cmp	r3, #0
 801b108:	d1f5      	bne.n	801b0f6 <strncmp+0x8>
 801b10a:	1a98      	subs	r0, r3, r2
 801b10c:	bd10      	pop	{r4, pc}
 801b10e:	4610      	mov	r0, r2
 801b110:	e7fc      	b.n	801b10c <strncmp+0x1e>

0801b112 <strstr>:
 801b112:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b114:	7803      	ldrb	r3, [r0, #0]
 801b116:	b17b      	cbz	r3, 801b138 <strstr+0x26>
 801b118:	4604      	mov	r4, r0
 801b11a:	7823      	ldrb	r3, [r4, #0]
 801b11c:	4620      	mov	r0, r4
 801b11e:	1c66      	adds	r6, r4, #1
 801b120:	b17b      	cbz	r3, 801b142 <strstr+0x30>
 801b122:	1e4a      	subs	r2, r1, #1
 801b124:	1e63      	subs	r3, r4, #1
 801b126:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801b12a:	b14d      	cbz	r5, 801b140 <strstr+0x2e>
 801b12c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801b130:	42af      	cmp	r7, r5
 801b132:	4634      	mov	r4, r6
 801b134:	d0f7      	beq.n	801b126 <strstr+0x14>
 801b136:	e7f0      	b.n	801b11a <strstr+0x8>
 801b138:	780b      	ldrb	r3, [r1, #0]
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	bf18      	it	ne
 801b13e:	2000      	movne	r0, #0
 801b140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b142:	4618      	mov	r0, r3
 801b144:	e7fc      	b.n	801b140 <strstr+0x2e>

0801b146 <sulp>:
 801b146:	b570      	push	{r4, r5, r6, lr}
 801b148:	4604      	mov	r4, r0
 801b14a:	460d      	mov	r5, r1
 801b14c:	4616      	mov	r6, r2
 801b14e:	ec45 4b10 	vmov	d0, r4, r5
 801b152:	f002 fc6d 	bl	801da30 <__ulp>
 801b156:	b17e      	cbz	r6, 801b178 <sulp+0x32>
 801b158:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801b15c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b160:	2b00      	cmp	r3, #0
 801b162:	dd09      	ble.n	801b178 <sulp+0x32>
 801b164:	051b      	lsls	r3, r3, #20
 801b166:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801b16a:	2000      	movs	r0, #0
 801b16c:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801b170:	ec41 0b17 	vmov	d7, r0, r1
 801b174:	ee20 0b07 	vmul.f64	d0, d0, d7
 801b178:	bd70      	pop	{r4, r5, r6, pc}
 801b17a:	0000      	movs	r0, r0
 801b17c:	0000      	movs	r0, r0
	...

0801b180 <_strtod_l>:
 801b180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b184:	ed2d 8b0c 	vpush	{d8-d13}
 801b188:	4698      	mov	r8, r3
 801b18a:	b09d      	sub	sp, #116	; 0x74
 801b18c:	2300      	movs	r3, #0
 801b18e:	4604      	mov	r4, r0
 801b190:	4640      	mov	r0, r8
 801b192:	460e      	mov	r6, r1
 801b194:	9214      	str	r2, [sp, #80]	; 0x50
 801b196:	9318      	str	r3, [sp, #96]	; 0x60
 801b198:	f002 f8f8 	bl	801d38c <__localeconv_l>
 801b19c:	4681      	mov	r9, r0
 801b19e:	6800      	ldr	r0, [r0, #0]
 801b1a0:	f7e5 f84e 	bl	8000240 <strlen>
 801b1a4:	f04f 0a00 	mov.w	sl, #0
 801b1a8:	4607      	mov	r7, r0
 801b1aa:	f04f 0b00 	mov.w	fp, #0
 801b1ae:	9617      	str	r6, [sp, #92]	; 0x5c
 801b1b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b1b2:	781a      	ldrb	r2, [r3, #0]
 801b1b4:	2a0d      	cmp	r2, #13
 801b1b6:	d834      	bhi.n	801b222 <_strtod_l+0xa2>
 801b1b8:	2a09      	cmp	r2, #9
 801b1ba:	d238      	bcs.n	801b22e <_strtod_l+0xae>
 801b1bc:	2a00      	cmp	r2, #0
 801b1be:	d040      	beq.n	801b242 <_strtod_l+0xc2>
 801b1c0:	2300      	movs	r3, #0
 801b1c2:	930d      	str	r3, [sp, #52]	; 0x34
 801b1c4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801b1c6:	782b      	ldrb	r3, [r5, #0]
 801b1c8:	2b30      	cmp	r3, #48	; 0x30
 801b1ca:	f040 80b3 	bne.w	801b334 <_strtod_l+0x1b4>
 801b1ce:	786b      	ldrb	r3, [r5, #1]
 801b1d0:	2b58      	cmp	r3, #88	; 0x58
 801b1d2:	d001      	beq.n	801b1d8 <_strtod_l+0x58>
 801b1d4:	2b78      	cmp	r3, #120	; 0x78
 801b1d6:	d169      	bne.n	801b2ac <_strtod_l+0x12c>
 801b1d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b1da:	9301      	str	r3, [sp, #4]
 801b1dc:	ab18      	add	r3, sp, #96	; 0x60
 801b1de:	9300      	str	r3, [sp, #0]
 801b1e0:	f8cd 8008 	str.w	r8, [sp, #8]
 801b1e4:	ab19      	add	r3, sp, #100	; 0x64
 801b1e6:	4a8f      	ldr	r2, [pc, #572]	; (801b424 <_strtod_l+0x2a4>)
 801b1e8:	a917      	add	r1, sp, #92	; 0x5c
 801b1ea:	4620      	mov	r0, r4
 801b1ec:	f001 fdf7 	bl	801cdde <__gethex>
 801b1f0:	f010 0607 	ands.w	r6, r0, #7
 801b1f4:	4607      	mov	r7, r0
 801b1f6:	d005      	beq.n	801b204 <_strtod_l+0x84>
 801b1f8:	2e06      	cmp	r6, #6
 801b1fa:	d12c      	bne.n	801b256 <_strtod_l+0xd6>
 801b1fc:	3501      	adds	r5, #1
 801b1fe:	2300      	movs	r3, #0
 801b200:	9517      	str	r5, [sp, #92]	; 0x5c
 801b202:	930d      	str	r3, [sp, #52]	; 0x34
 801b204:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b206:	2b00      	cmp	r3, #0
 801b208:	f040 855e 	bne.w	801bcc8 <_strtod_l+0xb48>
 801b20c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b20e:	b1eb      	cbz	r3, 801b24c <_strtod_l+0xcc>
 801b210:	ec4b ab17 	vmov	d7, sl, fp
 801b214:	eeb1 0b47 	vneg.f64	d0, d7
 801b218:	b01d      	add	sp, #116	; 0x74
 801b21a:	ecbd 8b0c 	vpop	{d8-d13}
 801b21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b222:	2a2b      	cmp	r2, #43	; 0x2b
 801b224:	d015      	beq.n	801b252 <_strtod_l+0xd2>
 801b226:	2a2d      	cmp	r2, #45	; 0x2d
 801b228:	d004      	beq.n	801b234 <_strtod_l+0xb4>
 801b22a:	2a20      	cmp	r2, #32
 801b22c:	d1c8      	bne.n	801b1c0 <_strtod_l+0x40>
 801b22e:	3301      	adds	r3, #1
 801b230:	9317      	str	r3, [sp, #92]	; 0x5c
 801b232:	e7bd      	b.n	801b1b0 <_strtod_l+0x30>
 801b234:	2201      	movs	r2, #1
 801b236:	920d      	str	r2, [sp, #52]	; 0x34
 801b238:	1c5a      	adds	r2, r3, #1
 801b23a:	9217      	str	r2, [sp, #92]	; 0x5c
 801b23c:	785b      	ldrb	r3, [r3, #1]
 801b23e:	2b00      	cmp	r3, #0
 801b240:	d1c0      	bne.n	801b1c4 <_strtod_l+0x44>
 801b242:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b244:	9617      	str	r6, [sp, #92]	; 0x5c
 801b246:	2b00      	cmp	r3, #0
 801b248:	f040 853c 	bne.w	801bcc4 <_strtod_l+0xb44>
 801b24c:	ec4b ab10 	vmov	d0, sl, fp
 801b250:	e7e2      	b.n	801b218 <_strtod_l+0x98>
 801b252:	2200      	movs	r2, #0
 801b254:	e7ef      	b.n	801b236 <_strtod_l+0xb6>
 801b256:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b258:	b13a      	cbz	r2, 801b26a <_strtod_l+0xea>
 801b25a:	2135      	movs	r1, #53	; 0x35
 801b25c:	a81a      	add	r0, sp, #104	; 0x68
 801b25e:	f002 fce0 	bl	801dc22 <__copybits>
 801b262:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b264:	4620      	mov	r0, r4
 801b266:	f002 f94b 	bl	801d500 <_Bfree>
 801b26a:	3e01      	subs	r6, #1
 801b26c:	2e04      	cmp	r6, #4
 801b26e:	d806      	bhi.n	801b27e <_strtod_l+0xfe>
 801b270:	e8df f006 	tbb	[pc, r6]
 801b274:	1714030a 	.word	0x1714030a
 801b278:	0a          	.byte	0x0a
 801b279:	00          	.byte	0x00
 801b27a:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801b27e:	073b      	lsls	r3, r7, #28
 801b280:	d5c0      	bpl.n	801b204 <_strtod_l+0x84>
 801b282:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801b286:	e7bd      	b.n	801b204 <_strtod_l+0x84>
 801b288:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801b28c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801b28e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801b292:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801b296:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801b29a:	e7f0      	b.n	801b27e <_strtod_l+0xfe>
 801b29c:	f8df b188 	ldr.w	fp, [pc, #392]	; 801b428 <_strtod_l+0x2a8>
 801b2a0:	e7ed      	b.n	801b27e <_strtod_l+0xfe>
 801b2a2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801b2a6:	f04f 3aff 	mov.w	sl, #4294967295
 801b2aa:	e7e8      	b.n	801b27e <_strtod_l+0xfe>
 801b2ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b2ae:	1c5a      	adds	r2, r3, #1
 801b2b0:	9217      	str	r2, [sp, #92]	; 0x5c
 801b2b2:	785b      	ldrb	r3, [r3, #1]
 801b2b4:	2b30      	cmp	r3, #48	; 0x30
 801b2b6:	d0f9      	beq.n	801b2ac <_strtod_l+0x12c>
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	d0a3      	beq.n	801b204 <_strtod_l+0x84>
 801b2bc:	2301      	movs	r3, #1
 801b2be:	930a      	str	r3, [sp, #40]	; 0x28
 801b2c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b2c2:	930c      	str	r3, [sp, #48]	; 0x30
 801b2c4:	2300      	movs	r3, #0
 801b2c6:	9306      	str	r3, [sp, #24]
 801b2c8:	9308      	str	r3, [sp, #32]
 801b2ca:	461d      	mov	r5, r3
 801b2cc:	220a      	movs	r2, #10
 801b2ce:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801b2d0:	f890 8000 	ldrb.w	r8, [r0]
 801b2d4:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 801b2d8:	b2d9      	uxtb	r1, r3
 801b2da:	2909      	cmp	r1, #9
 801b2dc:	d92c      	bls.n	801b338 <_strtod_l+0x1b8>
 801b2de:	463a      	mov	r2, r7
 801b2e0:	f8d9 1000 	ldr.w	r1, [r9]
 801b2e4:	f7ff ff03 	bl	801b0ee <strncmp>
 801b2e8:	2800      	cmp	r0, #0
 801b2ea:	d035      	beq.n	801b358 <_strtod_l+0x1d8>
 801b2ec:	2000      	movs	r0, #0
 801b2ee:	4642      	mov	r2, r8
 801b2f0:	462b      	mov	r3, r5
 801b2f2:	4601      	mov	r1, r0
 801b2f4:	9004      	str	r0, [sp, #16]
 801b2f6:	2a65      	cmp	r2, #101	; 0x65
 801b2f8:	d001      	beq.n	801b2fe <_strtod_l+0x17e>
 801b2fa:	2a45      	cmp	r2, #69	; 0x45
 801b2fc:	d117      	bne.n	801b32e <_strtod_l+0x1ae>
 801b2fe:	b923      	cbnz	r3, 801b30a <_strtod_l+0x18a>
 801b300:	b910      	cbnz	r0, 801b308 <_strtod_l+0x188>
 801b302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b304:	2b00      	cmp	r3, #0
 801b306:	d09c      	beq.n	801b242 <_strtod_l+0xc2>
 801b308:	2300      	movs	r3, #0
 801b30a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801b30c:	1c72      	adds	r2, r6, #1
 801b30e:	9217      	str	r2, [sp, #92]	; 0x5c
 801b310:	7872      	ldrb	r2, [r6, #1]
 801b312:	2a2b      	cmp	r2, #43	; 0x2b
 801b314:	f000 8082 	beq.w	801b41c <_strtod_l+0x29c>
 801b318:	2a2d      	cmp	r2, #45	; 0x2d
 801b31a:	d079      	beq.n	801b410 <_strtod_l+0x290>
 801b31c:	f04f 0e00 	mov.w	lr, #0
 801b320:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801b324:	f1bc 0f09 	cmp.w	ip, #9
 801b328:	f240 8086 	bls.w	801b438 <_strtod_l+0x2b8>
 801b32c:	9617      	str	r6, [sp, #92]	; 0x5c
 801b32e:	f04f 0800 	mov.w	r8, #0
 801b332:	e0a8      	b.n	801b486 <_strtod_l+0x306>
 801b334:	2300      	movs	r3, #0
 801b336:	e7c2      	b.n	801b2be <_strtod_l+0x13e>
 801b338:	2d08      	cmp	r5, #8
 801b33a:	bfd5      	itete	le
 801b33c:	9908      	ldrle	r1, [sp, #32]
 801b33e:	9906      	ldrgt	r1, [sp, #24]
 801b340:	fb02 3301 	mlale	r3, r2, r1, r3
 801b344:	fb02 3301 	mlagt	r3, r2, r1, r3
 801b348:	f100 0001 	add.w	r0, r0, #1
 801b34c:	bfd4      	ite	le
 801b34e:	9308      	strle	r3, [sp, #32]
 801b350:	9306      	strgt	r3, [sp, #24]
 801b352:	3501      	adds	r5, #1
 801b354:	9017      	str	r0, [sp, #92]	; 0x5c
 801b356:	e7ba      	b.n	801b2ce <_strtod_l+0x14e>
 801b358:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b35a:	19da      	adds	r2, r3, r7
 801b35c:	9217      	str	r2, [sp, #92]	; 0x5c
 801b35e:	5dda      	ldrb	r2, [r3, r7]
 801b360:	2d00      	cmp	r5, #0
 801b362:	d038      	beq.n	801b3d6 <_strtod_l+0x256>
 801b364:	4601      	mov	r1, r0
 801b366:	462b      	mov	r3, r5
 801b368:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801b36c:	2f09      	cmp	r7, #9
 801b36e:	d913      	bls.n	801b398 <_strtod_l+0x218>
 801b370:	2701      	movs	r7, #1
 801b372:	9704      	str	r7, [sp, #16]
 801b374:	e7bf      	b.n	801b2f6 <_strtod_l+0x176>
 801b376:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b378:	1c5a      	adds	r2, r3, #1
 801b37a:	9217      	str	r2, [sp, #92]	; 0x5c
 801b37c:	785a      	ldrb	r2, [r3, #1]
 801b37e:	3001      	adds	r0, #1
 801b380:	2a30      	cmp	r2, #48	; 0x30
 801b382:	d0f8      	beq.n	801b376 <_strtod_l+0x1f6>
 801b384:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801b388:	2b08      	cmp	r3, #8
 801b38a:	f200 84a2 	bhi.w	801bcd2 <_strtod_l+0xb52>
 801b38e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b390:	930c      	str	r3, [sp, #48]	; 0x30
 801b392:	4601      	mov	r1, r0
 801b394:	2000      	movs	r0, #0
 801b396:	4603      	mov	r3, r0
 801b398:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 801b39c:	f100 0701 	add.w	r7, r0, #1
 801b3a0:	d013      	beq.n	801b3ca <_strtod_l+0x24a>
 801b3a2:	4439      	add	r1, r7
 801b3a4:	eb00 0e03 	add.w	lr, r0, r3
 801b3a8:	461f      	mov	r7, r3
 801b3aa:	f04f 0c0a 	mov.w	ip, #10
 801b3ae:	45be      	cmp	lr, r7
 801b3b0:	d113      	bne.n	801b3da <_strtod_l+0x25a>
 801b3b2:	181f      	adds	r7, r3, r0
 801b3b4:	2f08      	cmp	r7, #8
 801b3b6:	f103 0301 	add.w	r3, r3, #1
 801b3ba:	4403      	add	r3, r0
 801b3bc:	dc1d      	bgt.n	801b3fa <_strtod_l+0x27a>
 801b3be:	9a08      	ldr	r2, [sp, #32]
 801b3c0:	200a      	movs	r0, #10
 801b3c2:	fb00 8202 	mla	r2, r0, r2, r8
 801b3c6:	9208      	str	r2, [sp, #32]
 801b3c8:	2700      	movs	r7, #0
 801b3ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b3cc:	1c50      	adds	r0, r2, #1
 801b3ce:	9017      	str	r0, [sp, #92]	; 0x5c
 801b3d0:	7852      	ldrb	r2, [r2, #1]
 801b3d2:	4638      	mov	r0, r7
 801b3d4:	e7c8      	b.n	801b368 <_strtod_l+0x1e8>
 801b3d6:	4628      	mov	r0, r5
 801b3d8:	e7d2      	b.n	801b380 <_strtod_l+0x200>
 801b3da:	2f08      	cmp	r7, #8
 801b3dc:	f107 0701 	add.w	r7, r7, #1
 801b3e0:	dc04      	bgt.n	801b3ec <_strtod_l+0x26c>
 801b3e2:	9a08      	ldr	r2, [sp, #32]
 801b3e4:	fb0c f202 	mul.w	r2, ip, r2
 801b3e8:	9208      	str	r2, [sp, #32]
 801b3ea:	e7e0      	b.n	801b3ae <_strtod_l+0x22e>
 801b3ec:	2f10      	cmp	r7, #16
 801b3ee:	bfde      	ittt	le
 801b3f0:	9a06      	ldrle	r2, [sp, #24]
 801b3f2:	fb0c f202 	mulle.w	r2, ip, r2
 801b3f6:	9206      	strle	r2, [sp, #24]
 801b3f8:	e7d9      	b.n	801b3ae <_strtod_l+0x22e>
 801b3fa:	2b10      	cmp	r3, #16
 801b3fc:	bfdf      	itttt	le
 801b3fe:	9a06      	ldrle	r2, [sp, #24]
 801b400:	200a      	movle	r0, #10
 801b402:	fb00 8202 	mlale	r2, r0, r2, r8
 801b406:	9206      	strle	r2, [sp, #24]
 801b408:	e7de      	b.n	801b3c8 <_strtod_l+0x248>
 801b40a:	2301      	movs	r3, #1
 801b40c:	9304      	str	r3, [sp, #16]
 801b40e:	e777      	b.n	801b300 <_strtod_l+0x180>
 801b410:	f04f 0e01 	mov.w	lr, #1
 801b414:	1cb2      	adds	r2, r6, #2
 801b416:	9217      	str	r2, [sp, #92]	; 0x5c
 801b418:	78b2      	ldrb	r2, [r6, #2]
 801b41a:	e781      	b.n	801b320 <_strtod_l+0x1a0>
 801b41c:	f04f 0e00 	mov.w	lr, #0
 801b420:	e7f8      	b.n	801b414 <_strtod_l+0x294>
 801b422:	bf00      	nop
 801b424:	080247c0 	.word	0x080247c0
 801b428:	7ff00000 	.word	0x7ff00000
 801b42c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b42e:	f102 0c01 	add.w	ip, r2, #1
 801b432:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 801b436:	7852      	ldrb	r2, [r2, #1]
 801b438:	2a30      	cmp	r2, #48	; 0x30
 801b43a:	d0f7      	beq.n	801b42c <_strtod_l+0x2ac>
 801b43c:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 801b440:	f1bc 0f08 	cmp.w	ip, #8
 801b444:	f63f af73 	bhi.w	801b32e <_strtod_l+0x1ae>
 801b448:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 801b44c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b44e:	920e      	str	r2, [sp, #56]	; 0x38
 801b450:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b452:	f102 0c01 	add.w	ip, r2, #1
 801b456:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 801b45a:	7852      	ldrb	r2, [r2, #1]
 801b45c:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 801b460:	f1b9 0f09 	cmp.w	r9, #9
 801b464:	d939      	bls.n	801b4da <_strtod_l+0x35a>
 801b466:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801b468:	ebac 0c07 	sub.w	ip, ip, r7
 801b46c:	f1bc 0f08 	cmp.w	ip, #8
 801b470:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 801b474:	dc37      	bgt.n	801b4e6 <_strtod_l+0x366>
 801b476:	45e0      	cmp	r8, ip
 801b478:	bfa8      	it	ge
 801b47a:	46e0      	movge	r8, ip
 801b47c:	f1be 0f00 	cmp.w	lr, #0
 801b480:	d001      	beq.n	801b486 <_strtod_l+0x306>
 801b482:	f1c8 0800 	rsb	r8, r8, #0
 801b486:	2b00      	cmp	r3, #0
 801b488:	d151      	bne.n	801b52e <_strtod_l+0x3ae>
 801b48a:	2800      	cmp	r0, #0
 801b48c:	f47f aeba 	bne.w	801b204 <_strtod_l+0x84>
 801b490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b492:	2b00      	cmp	r3, #0
 801b494:	f47f aeb6 	bne.w	801b204 <_strtod_l+0x84>
 801b498:	9b04      	ldr	r3, [sp, #16]
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	f47f aed1 	bne.w	801b242 <_strtod_l+0xc2>
 801b4a0:	2a4e      	cmp	r2, #78	; 0x4e
 801b4a2:	d027      	beq.n	801b4f4 <_strtod_l+0x374>
 801b4a4:	dc21      	bgt.n	801b4ea <_strtod_l+0x36a>
 801b4a6:	2a49      	cmp	r2, #73	; 0x49
 801b4a8:	f47f aecb 	bne.w	801b242 <_strtod_l+0xc2>
 801b4ac:	499a      	ldr	r1, [pc, #616]	; (801b718 <_strtod_l+0x598>)
 801b4ae:	a817      	add	r0, sp, #92	; 0x5c
 801b4b0:	f001 fec8 	bl	801d244 <__match>
 801b4b4:	2800      	cmp	r0, #0
 801b4b6:	f43f aec4 	beq.w	801b242 <_strtod_l+0xc2>
 801b4ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b4bc:	4997      	ldr	r1, [pc, #604]	; (801b71c <_strtod_l+0x59c>)
 801b4be:	3b01      	subs	r3, #1
 801b4c0:	a817      	add	r0, sp, #92	; 0x5c
 801b4c2:	9317      	str	r3, [sp, #92]	; 0x5c
 801b4c4:	f001 febe 	bl	801d244 <__match>
 801b4c8:	b910      	cbnz	r0, 801b4d0 <_strtod_l+0x350>
 801b4ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b4cc:	3301      	adds	r3, #1
 801b4ce:	9317      	str	r3, [sp, #92]	; 0x5c
 801b4d0:	f8df b260 	ldr.w	fp, [pc, #608]	; 801b734 <_strtod_l+0x5b4>
 801b4d4:	f04f 0a00 	mov.w	sl, #0
 801b4d8:	e694      	b.n	801b204 <_strtod_l+0x84>
 801b4da:	270a      	movs	r7, #10
 801b4dc:	fb07 2808 	mla	r8, r7, r8, r2
 801b4e0:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 801b4e4:	e7b4      	b.n	801b450 <_strtod_l+0x2d0>
 801b4e6:	46e0      	mov	r8, ip
 801b4e8:	e7c8      	b.n	801b47c <_strtod_l+0x2fc>
 801b4ea:	2a69      	cmp	r2, #105	; 0x69
 801b4ec:	d0de      	beq.n	801b4ac <_strtod_l+0x32c>
 801b4ee:	2a6e      	cmp	r2, #110	; 0x6e
 801b4f0:	f47f aea7 	bne.w	801b242 <_strtod_l+0xc2>
 801b4f4:	498a      	ldr	r1, [pc, #552]	; (801b720 <_strtod_l+0x5a0>)
 801b4f6:	a817      	add	r0, sp, #92	; 0x5c
 801b4f8:	f001 fea4 	bl	801d244 <__match>
 801b4fc:	2800      	cmp	r0, #0
 801b4fe:	f43f aea0 	beq.w	801b242 <_strtod_l+0xc2>
 801b502:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b504:	781b      	ldrb	r3, [r3, #0]
 801b506:	2b28      	cmp	r3, #40	; 0x28
 801b508:	d10e      	bne.n	801b528 <_strtod_l+0x3a8>
 801b50a:	aa1a      	add	r2, sp, #104	; 0x68
 801b50c:	4985      	ldr	r1, [pc, #532]	; (801b724 <_strtod_l+0x5a4>)
 801b50e:	a817      	add	r0, sp, #92	; 0x5c
 801b510:	f001 feac 	bl	801d26c <__hexnan>
 801b514:	2805      	cmp	r0, #5
 801b516:	d107      	bne.n	801b528 <_strtod_l+0x3a8>
 801b518:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b51a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801b51e:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801b522:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801b526:	e66d      	b.n	801b204 <_strtod_l+0x84>
 801b528:	f8df b20c 	ldr.w	fp, [pc, #524]	; 801b738 <_strtod_l+0x5b8>
 801b52c:	e7d2      	b.n	801b4d4 <_strtod_l+0x354>
 801b52e:	eddd 7a08 	vldr	s15, [sp, #32]
 801b532:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801b536:	eba8 0201 	sub.w	r2, r8, r1
 801b53a:	2d00      	cmp	r5, #0
 801b53c:	bf08      	it	eq
 801b53e:	461d      	moveq	r5, r3
 801b540:	2b10      	cmp	r3, #16
 801b542:	9204      	str	r2, [sp, #16]
 801b544:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801b548:	461a      	mov	r2, r3
 801b54a:	bfa8      	it	ge
 801b54c:	2210      	movge	r2, #16
 801b54e:	2b09      	cmp	r3, #9
 801b550:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801b554:	dc14      	bgt.n	801b580 <_strtod_l+0x400>
 801b556:	9904      	ldr	r1, [sp, #16]
 801b558:	2900      	cmp	r1, #0
 801b55a:	f43f ae53 	beq.w	801b204 <_strtod_l+0x84>
 801b55e:	9904      	ldr	r1, [sp, #16]
 801b560:	dd72      	ble.n	801b648 <_strtod_l+0x4c8>
 801b562:	2916      	cmp	r1, #22
 801b564:	dc5a      	bgt.n	801b61c <_strtod_l+0x49c>
 801b566:	4970      	ldr	r1, [pc, #448]	; (801b728 <_strtod_l+0x5a8>)
 801b568:	9b04      	ldr	r3, [sp, #16]
 801b56a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b56e:	ed91 7b00 	vldr	d7, [r1]
 801b572:	ec4b ab16 	vmov	d6, sl, fp
 801b576:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b57a:	ec5b ab17 	vmov	sl, fp, d7
 801b57e:	e641      	b.n	801b204 <_strtod_l+0x84>
 801b580:	4969      	ldr	r1, [pc, #420]	; (801b728 <_strtod_l+0x5a8>)
 801b582:	eddd 7a06 	vldr	s15, [sp, #24]
 801b586:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801b58a:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 801b58e:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 801b592:	2b0f      	cmp	r3, #15
 801b594:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801b598:	eea5 7b06 	vfma.f64	d7, d5, d6
 801b59c:	ec5b ab17 	vmov	sl, fp, d7
 801b5a0:	ddd9      	ble.n	801b556 <_strtod_l+0x3d6>
 801b5a2:	9904      	ldr	r1, [sp, #16]
 801b5a4:	1a9a      	subs	r2, r3, r2
 801b5a6:	440a      	add	r2, r1
 801b5a8:	2a00      	cmp	r2, #0
 801b5aa:	f340 8096 	ble.w	801b6da <_strtod_l+0x55a>
 801b5ae:	f012 000f 	ands.w	r0, r2, #15
 801b5b2:	d00a      	beq.n	801b5ca <_strtod_l+0x44a>
 801b5b4:	495c      	ldr	r1, [pc, #368]	; (801b728 <_strtod_l+0x5a8>)
 801b5b6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801b5ba:	ed91 7b00 	vldr	d7, [r1]
 801b5be:	ec4b ab16 	vmov	d6, sl, fp
 801b5c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b5c6:	ec5b ab17 	vmov	sl, fp, d7
 801b5ca:	f032 020f 	bics.w	r2, r2, #15
 801b5ce:	d072      	beq.n	801b6b6 <_strtod_l+0x536>
 801b5d0:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801b5d4:	dd45      	ble.n	801b662 <_strtod_l+0x4e2>
 801b5d6:	2500      	movs	r5, #0
 801b5d8:	46a8      	mov	r8, r5
 801b5da:	9506      	str	r5, [sp, #24]
 801b5dc:	46a9      	mov	r9, r5
 801b5de:	2322      	movs	r3, #34	; 0x22
 801b5e0:	f8df b150 	ldr.w	fp, [pc, #336]	; 801b734 <_strtod_l+0x5b4>
 801b5e4:	6023      	str	r3, [r4, #0]
 801b5e6:	f04f 0a00 	mov.w	sl, #0
 801b5ea:	9b06      	ldr	r3, [sp, #24]
 801b5ec:	2b00      	cmp	r3, #0
 801b5ee:	f43f ae09 	beq.w	801b204 <_strtod_l+0x84>
 801b5f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b5f4:	4620      	mov	r0, r4
 801b5f6:	f001 ff83 	bl	801d500 <_Bfree>
 801b5fa:	4649      	mov	r1, r9
 801b5fc:	4620      	mov	r0, r4
 801b5fe:	f001 ff7f 	bl	801d500 <_Bfree>
 801b602:	4641      	mov	r1, r8
 801b604:	4620      	mov	r0, r4
 801b606:	f001 ff7b 	bl	801d500 <_Bfree>
 801b60a:	9906      	ldr	r1, [sp, #24]
 801b60c:	4620      	mov	r0, r4
 801b60e:	f001 ff77 	bl	801d500 <_Bfree>
 801b612:	4629      	mov	r1, r5
 801b614:	4620      	mov	r0, r4
 801b616:	f001 ff73 	bl	801d500 <_Bfree>
 801b61a:	e5f3      	b.n	801b204 <_strtod_l+0x84>
 801b61c:	9804      	ldr	r0, [sp, #16]
 801b61e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801b622:	4281      	cmp	r1, r0
 801b624:	dbbd      	blt.n	801b5a2 <_strtod_l+0x422>
 801b626:	4a40      	ldr	r2, [pc, #256]	; (801b728 <_strtod_l+0x5a8>)
 801b628:	f1c3 030f 	rsb	r3, r3, #15
 801b62c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801b630:	ed91 7b00 	vldr	d7, [r1]
 801b634:	ec4b ab16 	vmov	d6, sl, fp
 801b638:	1ac3      	subs	r3, r0, r3
 801b63a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801b63e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b642:	ed92 6b00 	vldr	d6, [r2]
 801b646:	e796      	b.n	801b576 <_strtod_l+0x3f6>
 801b648:	3116      	adds	r1, #22
 801b64a:	dbaa      	blt.n	801b5a2 <_strtod_l+0x422>
 801b64c:	4936      	ldr	r1, [pc, #216]	; (801b728 <_strtod_l+0x5a8>)
 801b64e:	9b04      	ldr	r3, [sp, #16]
 801b650:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 801b654:	ed91 7b00 	vldr	d7, [r1]
 801b658:	ec4b ab16 	vmov	d6, sl, fp
 801b65c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801b660:	e78b      	b.n	801b57a <_strtod_l+0x3fa>
 801b662:	e9cd ab06 	strd	sl, fp, [sp, #24]
 801b666:	2000      	movs	r0, #0
 801b668:	4e30      	ldr	r6, [pc, #192]	; (801b72c <_strtod_l+0x5ac>)
 801b66a:	1112      	asrs	r2, r2, #4
 801b66c:	4601      	mov	r1, r0
 801b66e:	2a01      	cmp	r2, #1
 801b670:	dc23      	bgt.n	801b6ba <_strtod_l+0x53a>
 801b672:	b108      	cbz	r0, 801b678 <_strtod_l+0x4f8>
 801b674:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 801b678:	4a2c      	ldr	r2, [pc, #176]	; (801b72c <_strtod_l+0x5ac>)
 801b67a:	482d      	ldr	r0, [pc, #180]	; (801b730 <_strtod_l+0x5b0>)
 801b67c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801b680:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801b684:	ed91 7b00 	vldr	d7, [r1]
 801b688:	ec4b ab16 	vmov	d6, sl, fp
 801b68c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b690:	ed8d 7b06 	vstr	d7, [sp, #24]
 801b694:	9907      	ldr	r1, [sp, #28]
 801b696:	4a27      	ldr	r2, [pc, #156]	; (801b734 <_strtod_l+0x5b4>)
 801b698:	400a      	ands	r2, r1
 801b69a:	4282      	cmp	r2, r0
 801b69c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 801b6a0:	d899      	bhi.n	801b5d6 <_strtod_l+0x456>
 801b6a2:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801b6a6:	4282      	cmp	r2, r0
 801b6a8:	bf86      	itte	hi
 801b6aa:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 801b73c <_strtod_l+0x5bc>
 801b6ae:	f04f 3aff 	movhi.w	sl, #4294967295
 801b6b2:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 801b6b6:	2700      	movs	r7, #0
 801b6b8:	e070      	b.n	801b79c <_strtod_l+0x61c>
 801b6ba:	07d7      	lsls	r7, r2, #31
 801b6bc:	d50a      	bpl.n	801b6d4 <_strtod_l+0x554>
 801b6be:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 801b6c2:	ed90 7b00 	vldr	d7, [r0]
 801b6c6:	ed9d 6b06 	vldr	d6, [sp, #24]
 801b6ca:	ee26 7b07 	vmul.f64	d7, d6, d7
 801b6ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 801b6d2:	2001      	movs	r0, #1
 801b6d4:	3101      	adds	r1, #1
 801b6d6:	1052      	asrs	r2, r2, #1
 801b6d8:	e7c9      	b.n	801b66e <_strtod_l+0x4ee>
 801b6da:	d0ec      	beq.n	801b6b6 <_strtod_l+0x536>
 801b6dc:	4252      	negs	r2, r2
 801b6de:	f012 000f 	ands.w	r0, r2, #15
 801b6e2:	d00a      	beq.n	801b6fa <_strtod_l+0x57a>
 801b6e4:	4910      	ldr	r1, [pc, #64]	; (801b728 <_strtod_l+0x5a8>)
 801b6e6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801b6ea:	ed91 7b00 	vldr	d7, [r1]
 801b6ee:	ec4b ab16 	vmov	d6, sl, fp
 801b6f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801b6f6:	ec5b ab17 	vmov	sl, fp, d7
 801b6fa:	1112      	asrs	r2, r2, #4
 801b6fc:	d0db      	beq.n	801b6b6 <_strtod_l+0x536>
 801b6fe:	2a1f      	cmp	r2, #31
 801b700:	dd1e      	ble.n	801b740 <_strtod_l+0x5c0>
 801b702:	2500      	movs	r5, #0
 801b704:	46a8      	mov	r8, r5
 801b706:	9506      	str	r5, [sp, #24]
 801b708:	46a9      	mov	r9, r5
 801b70a:	2322      	movs	r3, #34	; 0x22
 801b70c:	f04f 0a00 	mov.w	sl, #0
 801b710:	f04f 0b00 	mov.w	fp, #0
 801b714:	6023      	str	r3, [r4, #0]
 801b716:	e768      	b.n	801b5ea <_strtod_l+0x46a>
 801b718:	0802478b 	.word	0x0802478b
 801b71c:	08024914 	.word	0x08024914
 801b720:	08024793 	.word	0x08024793
 801b724:	080247d4 	.word	0x080247d4
 801b728:	08024948 	.word	0x08024948
 801b72c:	08024920 	.word	0x08024920
 801b730:	7ca00000 	.word	0x7ca00000
 801b734:	7ff00000 	.word	0x7ff00000
 801b738:	fff80000 	.word	0xfff80000
 801b73c:	7fefffff 	.word	0x7fefffff
 801b740:	e9cd ab06 	strd	sl, fp, [sp, #24]
 801b744:	f012 0710 	ands.w	r7, r2, #16
 801b748:	49ab      	ldr	r1, [pc, #684]	; (801b9f8 <_strtod_l+0x878>)
 801b74a:	bf18      	it	ne
 801b74c:	276a      	movne	r7, #106	; 0x6a
 801b74e:	2000      	movs	r0, #0
 801b750:	2a00      	cmp	r2, #0
 801b752:	f300 8113 	bgt.w	801b97c <_strtod_l+0x7fc>
 801b756:	b108      	cbz	r0, 801b75c <_strtod_l+0x5dc>
 801b758:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 801b75c:	b1bf      	cbz	r7, 801b78e <_strtod_l+0x60e>
 801b75e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801b762:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 801b766:	2a00      	cmp	r2, #0
 801b768:	4659      	mov	r1, fp
 801b76a:	dd10      	ble.n	801b78e <_strtod_l+0x60e>
 801b76c:	2a1f      	cmp	r2, #31
 801b76e:	f340 8113 	ble.w	801b998 <_strtod_l+0x818>
 801b772:	2a34      	cmp	r2, #52	; 0x34
 801b774:	bfde      	ittt	le
 801b776:	3a20      	suble	r2, #32
 801b778:	f04f 30ff 	movle.w	r0, #4294967295
 801b77c:	fa00 f202 	lslle.w	r2, r0, r2
 801b780:	f04f 0a00 	mov.w	sl, #0
 801b784:	bfcc      	ite	gt
 801b786:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801b78a:	ea02 0b01 	andle.w	fp, r2, r1
 801b78e:	ec4b ab17 	vmov	d7, sl, fp
 801b792:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b79a:	d0b2      	beq.n	801b702 <_strtod_l+0x582>
 801b79c:	9a08      	ldr	r2, [sp, #32]
 801b79e:	9200      	str	r2, [sp, #0]
 801b7a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b7a2:	462a      	mov	r2, r5
 801b7a4:	4620      	mov	r0, r4
 801b7a6:	f001 fefd 	bl	801d5a4 <__s2b>
 801b7aa:	9006      	str	r0, [sp, #24]
 801b7ac:	2800      	cmp	r0, #0
 801b7ae:	f43f af12 	beq.w	801b5d6 <_strtod_l+0x456>
 801b7b2:	9a04      	ldr	r2, [sp, #16]
 801b7b4:	9b04      	ldr	r3, [sp, #16]
 801b7b6:	2a00      	cmp	r2, #0
 801b7b8:	f1c3 0300 	rsb	r3, r3, #0
 801b7bc:	ed9f 9b88 	vldr	d9, [pc, #544]	; 801b9e0 <_strtod_l+0x860>
 801b7c0:	bfa8      	it	ge
 801b7c2:	2300      	movge	r3, #0
 801b7c4:	ed9f ab88 	vldr	d10, [pc, #544]	; 801b9e8 <_strtod_l+0x868>
 801b7c8:	ed9f bb89 	vldr	d11, [pc, #548]	; 801b9f0 <_strtod_l+0x870>
 801b7cc:	930e      	str	r3, [sp, #56]	; 0x38
 801b7ce:	2500      	movs	r5, #0
 801b7d0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801b7d4:	9310      	str	r3, [sp, #64]	; 0x40
 801b7d6:	46a8      	mov	r8, r5
 801b7d8:	9b06      	ldr	r3, [sp, #24]
 801b7da:	4620      	mov	r0, r4
 801b7dc:	6859      	ldr	r1, [r3, #4]
 801b7de:	f001 fe5b 	bl	801d498 <_Balloc>
 801b7e2:	4681      	mov	r9, r0
 801b7e4:	2800      	cmp	r0, #0
 801b7e6:	f43f aefa 	beq.w	801b5de <_strtod_l+0x45e>
 801b7ea:	9b06      	ldr	r3, [sp, #24]
 801b7ec:	691a      	ldr	r2, [r3, #16]
 801b7ee:	3202      	adds	r2, #2
 801b7f0:	f103 010c 	add.w	r1, r3, #12
 801b7f4:	0092      	lsls	r2, r2, #2
 801b7f6:	300c      	adds	r0, #12
 801b7f8:	f7fe fc0d 	bl	801a016 <memcpy>
 801b7fc:	aa1a      	add	r2, sp, #104	; 0x68
 801b7fe:	a919      	add	r1, sp, #100	; 0x64
 801b800:	ec4b ab10 	vmov	d0, sl, fp
 801b804:	4620      	mov	r0, r4
 801b806:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801b80a:	f002 f987 	bl	801db1c <__d2b>
 801b80e:	9018      	str	r0, [sp, #96]	; 0x60
 801b810:	2800      	cmp	r0, #0
 801b812:	f43f aee4 	beq.w	801b5de <_strtod_l+0x45e>
 801b816:	2101      	movs	r1, #1
 801b818:	4620      	mov	r0, r4
 801b81a:	f001 ff4f 	bl	801d6bc <__i2b>
 801b81e:	4680      	mov	r8, r0
 801b820:	2800      	cmp	r0, #0
 801b822:	f43f aedc 	beq.w	801b5de <_strtod_l+0x45e>
 801b826:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801b828:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b82a:	2e00      	cmp	r6, #0
 801b82c:	bfb1      	iteee	lt
 801b82e:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 801b830:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801b832:	9810      	ldrge	r0, [sp, #64]	; 0x40
 801b834:	18f3      	addge	r3, r6, r3
 801b836:	bfba      	itte	lt
 801b838:	1b98      	sublt	r0, r3, r6
 801b83a:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801b83c:	9308      	strge	r3, [sp, #32]
 801b83e:	eba6 0607 	sub.w	r6, r6, r7
 801b842:	bfb8      	it	lt
 801b844:	9308      	strlt	r3, [sp, #32]
 801b846:	4416      	add	r6, r2
 801b848:	4b6c      	ldr	r3, [pc, #432]	; (801b9fc <_strtod_l+0x87c>)
 801b84a:	3e01      	subs	r6, #1
 801b84c:	429e      	cmp	r6, r3
 801b84e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801b852:	f280 80b4 	bge.w	801b9be <_strtod_l+0x83e>
 801b856:	1b9b      	subs	r3, r3, r6
 801b858:	2b1f      	cmp	r3, #31
 801b85a:	eba2 0203 	sub.w	r2, r2, r3
 801b85e:	f04f 0101 	mov.w	r1, #1
 801b862:	f300 80a0 	bgt.w	801b9a6 <_strtod_l+0x826>
 801b866:	fa01 f303 	lsl.w	r3, r1, r3
 801b86a:	9311      	str	r3, [sp, #68]	; 0x44
 801b86c:	2300      	movs	r3, #0
 801b86e:	930f      	str	r3, [sp, #60]	; 0x3c
 801b870:	9b08      	ldr	r3, [sp, #32]
 801b872:	4413      	add	r3, r2
 801b874:	4402      	add	r2, r0
 801b876:	18be      	adds	r6, r7, r2
 801b878:	9a08      	ldr	r2, [sp, #32]
 801b87a:	429a      	cmp	r2, r3
 801b87c:	bfa8      	it	ge
 801b87e:	461a      	movge	r2, r3
 801b880:	42b2      	cmp	r2, r6
 801b882:	bfa8      	it	ge
 801b884:	4632      	movge	r2, r6
 801b886:	2a00      	cmp	r2, #0
 801b888:	dd04      	ble.n	801b894 <_strtod_l+0x714>
 801b88a:	9908      	ldr	r1, [sp, #32]
 801b88c:	1a9b      	subs	r3, r3, r2
 801b88e:	1ab6      	subs	r6, r6, r2
 801b890:	1a8a      	subs	r2, r1, r2
 801b892:	9208      	str	r2, [sp, #32]
 801b894:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b896:	b1c2      	cbz	r2, 801b8ca <_strtod_l+0x74a>
 801b898:	4641      	mov	r1, r8
 801b89a:	4620      	mov	r0, r4
 801b89c:	9315      	str	r3, [sp, #84]	; 0x54
 801b89e:	f001 ffad 	bl	801d7fc <__pow5mult>
 801b8a2:	4680      	mov	r8, r0
 801b8a4:	2800      	cmp	r0, #0
 801b8a6:	f43f ae9a 	beq.w	801b5de <_strtod_l+0x45e>
 801b8aa:	4601      	mov	r1, r0
 801b8ac:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b8ae:	4620      	mov	r0, r4
 801b8b0:	f001 ff0d 	bl	801d6ce <__multiply>
 801b8b4:	900c      	str	r0, [sp, #48]	; 0x30
 801b8b6:	2800      	cmp	r0, #0
 801b8b8:	f43f ae91 	beq.w	801b5de <_strtod_l+0x45e>
 801b8bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b8be:	4620      	mov	r0, r4
 801b8c0:	f001 fe1e 	bl	801d500 <_Bfree>
 801b8c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b8c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b8c8:	9218      	str	r2, [sp, #96]	; 0x60
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	dc7c      	bgt.n	801b9c8 <_strtod_l+0x848>
 801b8ce:	9b04      	ldr	r3, [sp, #16]
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	dd08      	ble.n	801b8e6 <_strtod_l+0x766>
 801b8d4:	4649      	mov	r1, r9
 801b8d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b8d8:	4620      	mov	r0, r4
 801b8da:	f001 ff8f 	bl	801d7fc <__pow5mult>
 801b8de:	4681      	mov	r9, r0
 801b8e0:	2800      	cmp	r0, #0
 801b8e2:	f43f ae7c 	beq.w	801b5de <_strtod_l+0x45e>
 801b8e6:	2e00      	cmp	r6, #0
 801b8e8:	dd08      	ble.n	801b8fc <_strtod_l+0x77c>
 801b8ea:	4649      	mov	r1, r9
 801b8ec:	4632      	mov	r2, r6
 801b8ee:	4620      	mov	r0, r4
 801b8f0:	f001 ffd2 	bl	801d898 <__lshift>
 801b8f4:	4681      	mov	r9, r0
 801b8f6:	2800      	cmp	r0, #0
 801b8f8:	f43f ae71 	beq.w	801b5de <_strtod_l+0x45e>
 801b8fc:	9b08      	ldr	r3, [sp, #32]
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	dd08      	ble.n	801b914 <_strtod_l+0x794>
 801b902:	4641      	mov	r1, r8
 801b904:	461a      	mov	r2, r3
 801b906:	4620      	mov	r0, r4
 801b908:	f001 ffc6 	bl	801d898 <__lshift>
 801b90c:	4680      	mov	r8, r0
 801b90e:	2800      	cmp	r0, #0
 801b910:	f43f ae65 	beq.w	801b5de <_strtod_l+0x45e>
 801b914:	464a      	mov	r2, r9
 801b916:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b918:	4620      	mov	r0, r4
 801b91a:	f002 f82b 	bl	801d974 <__mdiff>
 801b91e:	4605      	mov	r5, r0
 801b920:	2800      	cmp	r0, #0
 801b922:	f43f ae5c 	beq.w	801b5de <_strtod_l+0x45e>
 801b926:	68c3      	ldr	r3, [r0, #12]
 801b928:	930c      	str	r3, [sp, #48]	; 0x30
 801b92a:	2300      	movs	r3, #0
 801b92c:	60c3      	str	r3, [r0, #12]
 801b92e:	4641      	mov	r1, r8
 801b930:	f002 f806 	bl	801d940 <__mcmp>
 801b934:	2800      	cmp	r0, #0
 801b936:	da63      	bge.n	801ba00 <_strtod_l+0x880>
 801b938:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b93a:	b9e3      	cbnz	r3, 801b976 <_strtod_l+0x7f6>
 801b93c:	f1ba 0f00 	cmp.w	sl, #0
 801b940:	d119      	bne.n	801b976 <_strtod_l+0x7f6>
 801b942:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b946:	b9b3      	cbnz	r3, 801b976 <_strtod_l+0x7f6>
 801b948:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b94c:	0d1b      	lsrs	r3, r3, #20
 801b94e:	051b      	lsls	r3, r3, #20
 801b950:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801b954:	d90f      	bls.n	801b976 <_strtod_l+0x7f6>
 801b956:	696b      	ldr	r3, [r5, #20]
 801b958:	b913      	cbnz	r3, 801b960 <_strtod_l+0x7e0>
 801b95a:	692b      	ldr	r3, [r5, #16]
 801b95c:	2b01      	cmp	r3, #1
 801b95e:	dd0a      	ble.n	801b976 <_strtod_l+0x7f6>
 801b960:	4629      	mov	r1, r5
 801b962:	2201      	movs	r2, #1
 801b964:	4620      	mov	r0, r4
 801b966:	f001 ff97 	bl	801d898 <__lshift>
 801b96a:	4641      	mov	r1, r8
 801b96c:	4605      	mov	r5, r0
 801b96e:	f001 ffe7 	bl	801d940 <__mcmp>
 801b972:	2800      	cmp	r0, #0
 801b974:	dc75      	bgt.n	801ba62 <_strtod_l+0x8e2>
 801b976:	2f00      	cmp	r7, #0
 801b978:	d17f      	bne.n	801ba7a <_strtod_l+0x8fa>
 801b97a:	e63a      	b.n	801b5f2 <_strtod_l+0x472>
 801b97c:	07d6      	lsls	r6, r2, #31
 801b97e:	d508      	bpl.n	801b992 <_strtod_l+0x812>
 801b980:	ed9d 6b06 	vldr	d6, [sp, #24]
 801b984:	ed91 7b00 	vldr	d7, [r1]
 801b988:	ee26 7b07 	vmul.f64	d7, d6, d7
 801b98c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801b990:	2001      	movs	r0, #1
 801b992:	1052      	asrs	r2, r2, #1
 801b994:	3108      	adds	r1, #8
 801b996:	e6db      	b.n	801b750 <_strtod_l+0x5d0>
 801b998:	f04f 31ff 	mov.w	r1, #4294967295
 801b99c:	fa01 f202 	lsl.w	r2, r1, r2
 801b9a0:	ea02 0a0a 	and.w	sl, r2, sl
 801b9a4:	e6f3      	b.n	801b78e <_strtod_l+0x60e>
 801b9a6:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801b9aa:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801b9ae:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801b9b2:	36e2      	adds	r6, #226	; 0xe2
 801b9b4:	fa01 f306 	lsl.w	r3, r1, r6
 801b9b8:	930f      	str	r3, [sp, #60]	; 0x3c
 801b9ba:	9111      	str	r1, [sp, #68]	; 0x44
 801b9bc:	e758      	b.n	801b870 <_strtod_l+0x6f0>
 801b9be:	2300      	movs	r3, #0
 801b9c0:	930f      	str	r3, [sp, #60]	; 0x3c
 801b9c2:	2301      	movs	r3, #1
 801b9c4:	9311      	str	r3, [sp, #68]	; 0x44
 801b9c6:	e753      	b.n	801b870 <_strtod_l+0x6f0>
 801b9c8:	461a      	mov	r2, r3
 801b9ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b9cc:	4620      	mov	r0, r4
 801b9ce:	f001 ff63 	bl	801d898 <__lshift>
 801b9d2:	9018      	str	r0, [sp, #96]	; 0x60
 801b9d4:	2800      	cmp	r0, #0
 801b9d6:	f47f af7a 	bne.w	801b8ce <_strtod_l+0x74e>
 801b9da:	e600      	b.n	801b5de <_strtod_l+0x45e>
 801b9dc:	f3af 8000 	nop.w
 801b9e0:	94a03595 	.word	0x94a03595
 801b9e4:	3fdfffff 	.word	0x3fdfffff
 801b9e8:	35afe535 	.word	0x35afe535
 801b9ec:	3fe00000 	.word	0x3fe00000
 801b9f0:	94a03595 	.word	0x94a03595
 801b9f4:	3fcfffff 	.word	0x3fcfffff
 801b9f8:	080247e8 	.word	0x080247e8
 801b9fc:	fffffc02 	.word	0xfffffc02
 801ba00:	f8cd b020 	str.w	fp, [sp, #32]
 801ba04:	f040 8085 	bne.w	801bb12 <_strtod_l+0x992>
 801ba08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ba0a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ba0e:	b322      	cbz	r2, 801ba5a <_strtod_l+0x8da>
 801ba10:	4ab7      	ldr	r2, [pc, #732]	; (801bcf0 <_strtod_l+0xb70>)
 801ba12:	4293      	cmp	r3, r2
 801ba14:	d154      	bne.n	801bac0 <_strtod_l+0x940>
 801ba16:	4651      	mov	r1, sl
 801ba18:	b1e7      	cbz	r7, 801ba54 <_strtod_l+0x8d4>
 801ba1a:	4bb6      	ldr	r3, [pc, #728]	; (801bcf4 <_strtod_l+0xb74>)
 801ba1c:	465a      	mov	r2, fp
 801ba1e:	4013      	ands	r3, r2
 801ba20:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801ba24:	f04f 32ff 	mov.w	r2, #4294967295
 801ba28:	d803      	bhi.n	801ba32 <_strtod_l+0x8b2>
 801ba2a:	0d1b      	lsrs	r3, r3, #20
 801ba2c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801ba30:	409a      	lsls	r2, r3
 801ba32:	4291      	cmp	r1, r2
 801ba34:	d144      	bne.n	801bac0 <_strtod_l+0x940>
 801ba36:	4bb0      	ldr	r3, [pc, #704]	; (801bcf8 <_strtod_l+0xb78>)
 801ba38:	9a08      	ldr	r2, [sp, #32]
 801ba3a:	429a      	cmp	r2, r3
 801ba3c:	d102      	bne.n	801ba44 <_strtod_l+0x8c4>
 801ba3e:	3101      	adds	r1, #1
 801ba40:	f43f adcd 	beq.w	801b5de <_strtod_l+0x45e>
 801ba44:	4bab      	ldr	r3, [pc, #684]	; (801bcf4 <_strtod_l+0xb74>)
 801ba46:	9a08      	ldr	r2, [sp, #32]
 801ba48:	401a      	ands	r2, r3
 801ba4a:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 801ba4e:	f04f 0a00 	mov.w	sl, #0
 801ba52:	e790      	b.n	801b976 <_strtod_l+0x7f6>
 801ba54:	f04f 32ff 	mov.w	r2, #4294967295
 801ba58:	e7eb      	b.n	801ba32 <_strtod_l+0x8b2>
 801ba5a:	bb8b      	cbnz	r3, 801bac0 <_strtod_l+0x940>
 801ba5c:	f1ba 0f00 	cmp.w	sl, #0
 801ba60:	d12e      	bne.n	801bac0 <_strtod_l+0x940>
 801ba62:	465b      	mov	r3, fp
 801ba64:	4aa3      	ldr	r2, [pc, #652]	; (801bcf4 <_strtod_l+0xb74>)
 801ba66:	b30f      	cbz	r7, 801baac <_strtod_l+0x92c>
 801ba68:	ea02 010b 	and.w	r1, r2, fp
 801ba6c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801ba70:	dc1c      	bgt.n	801baac <_strtod_l+0x92c>
 801ba72:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801ba76:	f77f ae48 	ble.w	801b70a <_strtod_l+0x58a>
 801ba7a:	4aa0      	ldr	r2, [pc, #640]	; (801bcfc <_strtod_l+0xb7c>)
 801ba7c:	2300      	movs	r3, #0
 801ba7e:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 801ba82:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 801ba86:	ec4b ab17 	vmov	d7, sl, fp
 801ba8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ba8e:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ba92:	9b05      	ldr	r3, [sp, #20]
 801ba94:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801ba98:	2b00      	cmp	r3, #0
 801ba9a:	f47f adaa 	bne.w	801b5f2 <_strtod_l+0x472>
 801ba9e:	9b04      	ldr	r3, [sp, #16]
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	f47f ada6 	bne.w	801b5f2 <_strtod_l+0x472>
 801baa6:	2322      	movs	r3, #34	; 0x22
 801baa8:	6023      	str	r3, [r4, #0]
 801baaa:	e5a2      	b.n	801b5f2 <_strtod_l+0x472>
 801baac:	4013      	ands	r3, r2
 801baae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801bab2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801bab6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801baba:	f04f 3aff 	mov.w	sl, #4294967295
 801babe:	e75a      	b.n	801b976 <_strtod_l+0x7f6>
 801bac0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bac2:	b18b      	cbz	r3, 801bae8 <_strtod_l+0x968>
 801bac4:	9a08      	ldr	r2, [sp, #32]
 801bac6:	4213      	tst	r3, r2
 801bac8:	f43f af55 	beq.w	801b976 <_strtod_l+0x7f6>
 801bacc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bace:	463a      	mov	r2, r7
 801bad0:	4650      	mov	r0, sl
 801bad2:	4659      	mov	r1, fp
 801bad4:	b163      	cbz	r3, 801baf0 <_strtod_l+0x970>
 801bad6:	f7ff fb36 	bl	801b146 <sulp>
 801bada:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 801bade:	ee37 7b00 	vadd.f64	d7, d7, d0
 801bae2:	ec5b ab17 	vmov	sl, fp, d7
 801bae6:	e746      	b.n	801b976 <_strtod_l+0x7f6>
 801bae8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801baea:	ea13 0f0a 	tst.w	r3, sl
 801baee:	e7eb      	b.n	801bac8 <_strtod_l+0x948>
 801baf0:	f7ff fb29 	bl	801b146 <sulp>
 801baf4:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 801baf8:	ee37 7b40 	vsub.f64	d7, d7, d0
 801bafc:	ed8d 7b04 	vstr	d7, [sp, #16]
 801bb00:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801bb04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb08:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801bb0c:	f43f adfd 	beq.w	801b70a <_strtod_l+0x58a>
 801bb10:	e731      	b.n	801b976 <_strtod_l+0x7f6>
 801bb12:	4641      	mov	r1, r8
 801bb14:	4628      	mov	r0, r5
 801bb16:	f002 f850 	bl	801dbba <__ratio>
 801bb1a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801bb1e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801bb22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb26:	d869      	bhi.n	801bbfc <_strtod_l+0xa7c>
 801bb28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bb2a:	2b00      	cmp	r3, #0
 801bb2c:	d045      	beq.n	801bbba <_strtod_l+0xa3a>
 801bb2e:	4b74      	ldr	r3, [pc, #464]	; (801bd00 <_strtod_l+0xb80>)
 801bb30:	2200      	movs	r2, #0
 801bb32:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 801bb36:	9808      	ldr	r0, [sp, #32]
 801bb38:	496e      	ldr	r1, [pc, #440]	; (801bcf4 <_strtod_l+0xb74>)
 801bb3a:	ea00 0601 	and.w	r6, r0, r1
 801bb3e:	4871      	ldr	r0, [pc, #452]	; (801bd04 <_strtod_l+0xb84>)
 801bb40:	4286      	cmp	r6, r0
 801bb42:	f040 8089 	bne.w	801bc58 <_strtod_l+0xad8>
 801bb46:	910f      	str	r1, [sp, #60]	; 0x3c
 801bb48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bb4c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 801bb50:	9908      	ldr	r1, [sp, #32]
 801bb52:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 801bb56:	ec4b ab10 	vmov	d0, sl, fp
 801bb5a:	ec43 2b1c 	vmov	d12, r2, r3
 801bb5e:	f001 ff67 	bl	801da30 <__ulp>
 801bb62:	ec4b ab1d 	vmov	d13, sl, fp
 801bb66:	eeac db00 	vfma.f64	d13, d12, d0
 801bb6a:	ed8d db08 	vstr	d13, [sp, #32]
 801bb6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801bb72:	4a65      	ldr	r2, [pc, #404]	; (801bd08 <_strtod_l+0xb88>)
 801bb74:	4019      	ands	r1, r3
 801bb76:	4291      	cmp	r1, r2
 801bb78:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 801bb7c:	d948      	bls.n	801bc10 <_strtod_l+0xa90>
 801bb7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bb80:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801bb84:	4293      	cmp	r3, r2
 801bb86:	d103      	bne.n	801bb90 <_strtod_l+0xa10>
 801bb88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bb8a:	3301      	adds	r3, #1
 801bb8c:	f43f ad27 	beq.w	801b5de <_strtod_l+0x45e>
 801bb90:	f8df b164 	ldr.w	fp, [pc, #356]	; 801bcf8 <_strtod_l+0xb78>
 801bb94:	f04f 3aff 	mov.w	sl, #4294967295
 801bb98:	9918      	ldr	r1, [sp, #96]	; 0x60
 801bb9a:	4620      	mov	r0, r4
 801bb9c:	f001 fcb0 	bl	801d500 <_Bfree>
 801bba0:	4649      	mov	r1, r9
 801bba2:	4620      	mov	r0, r4
 801bba4:	f001 fcac 	bl	801d500 <_Bfree>
 801bba8:	4641      	mov	r1, r8
 801bbaa:	4620      	mov	r0, r4
 801bbac:	f001 fca8 	bl	801d500 <_Bfree>
 801bbb0:	4629      	mov	r1, r5
 801bbb2:	4620      	mov	r0, r4
 801bbb4:	f001 fca4 	bl	801d500 <_Bfree>
 801bbb8:	e60e      	b.n	801b7d8 <_strtod_l+0x658>
 801bbba:	f1ba 0f00 	cmp.w	sl, #0
 801bbbe:	d113      	bne.n	801bbe8 <_strtod_l+0xa68>
 801bbc0:	9b08      	ldr	r3, [sp, #32]
 801bbc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bbc6:	b9b3      	cbnz	r3, 801bbf6 <_strtod_l+0xa76>
 801bbc8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801bbcc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801bbd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbd4:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801bbd8:	d401      	bmi.n	801bbde <_strtod_l+0xa5e>
 801bbda:	ee20 8b08 	vmul.f64	d8, d0, d8
 801bbde:	eeb1 7b48 	vneg.f64	d7, d8
 801bbe2:	ec53 2b17 	vmov	r2, r3, d7
 801bbe6:	e7a6      	b.n	801bb36 <_strtod_l+0x9b6>
 801bbe8:	f1ba 0f01 	cmp.w	sl, #1
 801bbec:	d103      	bne.n	801bbf6 <_strtod_l+0xa76>
 801bbee:	9b08      	ldr	r3, [sp, #32]
 801bbf0:	2b00      	cmp	r3, #0
 801bbf2:	f43f ad8a 	beq.w	801b70a <_strtod_l+0x58a>
 801bbf6:	2200      	movs	r2, #0
 801bbf8:	4b44      	ldr	r3, [pc, #272]	; (801bd0c <_strtod_l+0xb8c>)
 801bbfa:	e79a      	b.n	801bb32 <_strtod_l+0x9b2>
 801bbfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bbfe:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801bc02:	ee20 8b08 	vmul.f64	d8, d0, d8
 801bc06:	2b00      	cmp	r3, #0
 801bc08:	d0e9      	beq.n	801bbde <_strtod_l+0xa5e>
 801bc0a:	ec53 2b18 	vmov	r2, r3, d8
 801bc0e:	e792      	b.n	801bb36 <_strtod_l+0x9b6>
 801bc10:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801bc14:	2f00      	cmp	r7, #0
 801bc16:	d1bf      	bne.n	801bb98 <_strtod_l+0xa18>
 801bc18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bc1c:	0d1b      	lsrs	r3, r3, #20
 801bc1e:	051b      	lsls	r3, r3, #20
 801bc20:	429e      	cmp	r6, r3
 801bc22:	d1b9      	bne.n	801bb98 <_strtod_l+0xa18>
 801bc24:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 801bc28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bc2a:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 801bc2e:	ee38 8b40 	vsub.f64	d8, d8, d0
 801bc32:	b92b      	cbnz	r3, 801bc40 <_strtod_l+0xac0>
 801bc34:	f1ba 0f00 	cmp.w	sl, #0
 801bc38:	d102      	bne.n	801bc40 <_strtod_l+0xac0>
 801bc3a:	f3cb 0213 	ubfx	r2, fp, #0, #20
 801bc3e:	b3d2      	cbz	r2, 801bcb6 <_strtod_l+0xb36>
 801bc40:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801bc44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc48:	f53f acd3 	bmi.w	801b5f2 <_strtod_l+0x472>
 801bc4c:	eeb4 8bca 	vcmpe.f64	d8, d10
 801bc50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc54:	dda0      	ble.n	801bb98 <_strtod_l+0xa18>
 801bc56:	e4cc      	b.n	801b5f2 <_strtod_l+0x472>
 801bc58:	b1ef      	cbz	r7, 801bc96 <_strtod_l+0xb16>
 801bc5a:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 801bc5e:	d81a      	bhi.n	801bc96 <_strtod_l+0xb16>
 801bc60:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801bce8 <_strtod_l+0xb68>
 801bc64:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801bc68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc6c:	d810      	bhi.n	801bc90 <_strtod_l+0xb10>
 801bc6e:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 801bc72:	ee17 3a90 	vmov	r3, s15
 801bc76:	2b00      	cmp	r3, #0
 801bc78:	bf08      	it	eq
 801bc7a:	2301      	moveq	r3, #1
 801bc7c:	ee07 3a90 	vmov	s15, r3
 801bc80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bc82:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 801bc86:	b99b      	cbnz	r3, 801bcb0 <_strtod_l+0xb30>
 801bc88:	eeb1 7b48 	vneg.f64	d7, d8
 801bc8c:	ec53 2b17 	vmov	r2, r3, d7
 801bc90:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 801bc94:	1b8b      	subs	r3, r1, r6
 801bc96:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801bc9a:	ec43 2b1c 	vmov	d12, r2, r3
 801bc9e:	f001 fec7 	bl	801da30 <__ulp>
 801bca2:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 801bca6:	eeac 7b00 	vfma.f64	d7, d12, d0
 801bcaa:	ec5b ab17 	vmov	sl, fp, d7
 801bcae:	e7b1      	b.n	801bc14 <_strtod_l+0xa94>
 801bcb0:	ec53 2b18 	vmov	r2, r3, d8
 801bcb4:	e7ec      	b.n	801bc90 <_strtod_l+0xb10>
 801bcb6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801bcba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bcbe:	f57f af6b 	bpl.w	801bb98 <_strtod_l+0xa18>
 801bcc2:	e496      	b.n	801b5f2 <_strtod_l+0x472>
 801bcc4:	2300      	movs	r3, #0
 801bcc6:	930d      	str	r3, [sp, #52]	; 0x34
 801bcc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bcca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bccc:	6013      	str	r3, [r2, #0]
 801bcce:	f7ff ba9d 	b.w	801b20c <_strtod_l+0x8c>
 801bcd2:	2a65      	cmp	r2, #101	; 0x65
 801bcd4:	f04f 0100 	mov.w	r1, #0
 801bcd8:	f43f ab97 	beq.w	801b40a <_strtod_l+0x28a>
 801bcdc:	2701      	movs	r7, #1
 801bcde:	460b      	mov	r3, r1
 801bce0:	9704      	str	r7, [sp, #16]
 801bce2:	f7ff bb0a 	b.w	801b2fa <_strtod_l+0x17a>
 801bce6:	bf00      	nop
 801bce8:	ffc00000 	.word	0xffc00000
 801bcec:	41dfffff 	.word	0x41dfffff
 801bcf0:	000fffff 	.word	0x000fffff
 801bcf4:	7ff00000 	.word	0x7ff00000
 801bcf8:	7fefffff 	.word	0x7fefffff
 801bcfc:	39500000 	.word	0x39500000
 801bd00:	3ff00000 	.word	0x3ff00000
 801bd04:	7fe00000 	.word	0x7fe00000
 801bd08:	7c9fffff 	.word	0x7c9fffff
 801bd0c:	bff00000 	.word	0xbff00000

0801bd10 <_strtod_r>:
 801bd10:	4b05      	ldr	r3, [pc, #20]	; (801bd28 <_strtod_r+0x18>)
 801bd12:	681b      	ldr	r3, [r3, #0]
 801bd14:	b410      	push	{r4}
 801bd16:	6a1b      	ldr	r3, [r3, #32]
 801bd18:	4c04      	ldr	r4, [pc, #16]	; (801bd2c <_strtod_r+0x1c>)
 801bd1a:	2b00      	cmp	r3, #0
 801bd1c:	bf08      	it	eq
 801bd1e:	4623      	moveq	r3, r4
 801bd20:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bd24:	f7ff ba2c 	b.w	801b180 <_strtod_l>
 801bd28:	20000020 	.word	0x20000020
 801bd2c:	20000084 	.word	0x20000084

0801bd30 <_strtol_l.isra.0>:
 801bd30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd34:	4680      	mov	r8, r0
 801bd36:	4689      	mov	r9, r1
 801bd38:	4692      	mov	sl, r2
 801bd3a:	461e      	mov	r6, r3
 801bd3c:	460f      	mov	r7, r1
 801bd3e:	463d      	mov	r5, r7
 801bd40:	9808      	ldr	r0, [sp, #32]
 801bd42:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bd46:	f7fe f931 	bl	8019fac <__locale_ctype_ptr_l>
 801bd4a:	4420      	add	r0, r4
 801bd4c:	7843      	ldrb	r3, [r0, #1]
 801bd4e:	f013 0308 	ands.w	r3, r3, #8
 801bd52:	d132      	bne.n	801bdba <_strtol_l.isra.0+0x8a>
 801bd54:	2c2d      	cmp	r4, #45	; 0x2d
 801bd56:	d132      	bne.n	801bdbe <_strtol_l.isra.0+0x8e>
 801bd58:	787c      	ldrb	r4, [r7, #1]
 801bd5a:	1cbd      	adds	r5, r7, #2
 801bd5c:	2201      	movs	r2, #1
 801bd5e:	2e00      	cmp	r6, #0
 801bd60:	d05d      	beq.n	801be1e <_strtol_l.isra.0+0xee>
 801bd62:	2e10      	cmp	r6, #16
 801bd64:	d109      	bne.n	801bd7a <_strtol_l.isra.0+0x4a>
 801bd66:	2c30      	cmp	r4, #48	; 0x30
 801bd68:	d107      	bne.n	801bd7a <_strtol_l.isra.0+0x4a>
 801bd6a:	782b      	ldrb	r3, [r5, #0]
 801bd6c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801bd70:	2b58      	cmp	r3, #88	; 0x58
 801bd72:	d14f      	bne.n	801be14 <_strtol_l.isra.0+0xe4>
 801bd74:	786c      	ldrb	r4, [r5, #1]
 801bd76:	2610      	movs	r6, #16
 801bd78:	3502      	adds	r5, #2
 801bd7a:	2a00      	cmp	r2, #0
 801bd7c:	bf14      	ite	ne
 801bd7e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801bd82:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801bd86:	2700      	movs	r7, #0
 801bd88:	fbb1 fcf6 	udiv	ip, r1, r6
 801bd8c:	4638      	mov	r0, r7
 801bd8e:	fb06 1e1c 	mls	lr, r6, ip, r1
 801bd92:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801bd96:	2b09      	cmp	r3, #9
 801bd98:	d817      	bhi.n	801bdca <_strtol_l.isra.0+0x9a>
 801bd9a:	461c      	mov	r4, r3
 801bd9c:	42a6      	cmp	r6, r4
 801bd9e:	dd23      	ble.n	801bde8 <_strtol_l.isra.0+0xb8>
 801bda0:	1c7b      	adds	r3, r7, #1
 801bda2:	d007      	beq.n	801bdb4 <_strtol_l.isra.0+0x84>
 801bda4:	4584      	cmp	ip, r0
 801bda6:	d31c      	bcc.n	801bde2 <_strtol_l.isra.0+0xb2>
 801bda8:	d101      	bne.n	801bdae <_strtol_l.isra.0+0x7e>
 801bdaa:	45a6      	cmp	lr, r4
 801bdac:	db19      	blt.n	801bde2 <_strtol_l.isra.0+0xb2>
 801bdae:	fb00 4006 	mla	r0, r0, r6, r4
 801bdb2:	2701      	movs	r7, #1
 801bdb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bdb8:	e7eb      	b.n	801bd92 <_strtol_l.isra.0+0x62>
 801bdba:	462f      	mov	r7, r5
 801bdbc:	e7bf      	b.n	801bd3e <_strtol_l.isra.0+0xe>
 801bdbe:	2c2b      	cmp	r4, #43	; 0x2b
 801bdc0:	bf04      	itt	eq
 801bdc2:	1cbd      	addeq	r5, r7, #2
 801bdc4:	787c      	ldrbeq	r4, [r7, #1]
 801bdc6:	461a      	mov	r2, r3
 801bdc8:	e7c9      	b.n	801bd5e <_strtol_l.isra.0+0x2e>
 801bdca:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801bdce:	2b19      	cmp	r3, #25
 801bdd0:	d801      	bhi.n	801bdd6 <_strtol_l.isra.0+0xa6>
 801bdd2:	3c37      	subs	r4, #55	; 0x37
 801bdd4:	e7e2      	b.n	801bd9c <_strtol_l.isra.0+0x6c>
 801bdd6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801bdda:	2b19      	cmp	r3, #25
 801bddc:	d804      	bhi.n	801bde8 <_strtol_l.isra.0+0xb8>
 801bdde:	3c57      	subs	r4, #87	; 0x57
 801bde0:	e7dc      	b.n	801bd9c <_strtol_l.isra.0+0x6c>
 801bde2:	f04f 37ff 	mov.w	r7, #4294967295
 801bde6:	e7e5      	b.n	801bdb4 <_strtol_l.isra.0+0x84>
 801bde8:	1c7b      	adds	r3, r7, #1
 801bdea:	d108      	bne.n	801bdfe <_strtol_l.isra.0+0xce>
 801bdec:	2322      	movs	r3, #34	; 0x22
 801bdee:	f8c8 3000 	str.w	r3, [r8]
 801bdf2:	4608      	mov	r0, r1
 801bdf4:	f1ba 0f00 	cmp.w	sl, #0
 801bdf8:	d107      	bne.n	801be0a <_strtol_l.isra.0+0xda>
 801bdfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bdfe:	b102      	cbz	r2, 801be02 <_strtol_l.isra.0+0xd2>
 801be00:	4240      	negs	r0, r0
 801be02:	f1ba 0f00 	cmp.w	sl, #0
 801be06:	d0f8      	beq.n	801bdfa <_strtol_l.isra.0+0xca>
 801be08:	b10f      	cbz	r7, 801be0e <_strtol_l.isra.0+0xde>
 801be0a:	f105 39ff 	add.w	r9, r5, #4294967295
 801be0e:	f8ca 9000 	str.w	r9, [sl]
 801be12:	e7f2      	b.n	801bdfa <_strtol_l.isra.0+0xca>
 801be14:	2430      	movs	r4, #48	; 0x30
 801be16:	2e00      	cmp	r6, #0
 801be18:	d1af      	bne.n	801bd7a <_strtol_l.isra.0+0x4a>
 801be1a:	2608      	movs	r6, #8
 801be1c:	e7ad      	b.n	801bd7a <_strtol_l.isra.0+0x4a>
 801be1e:	2c30      	cmp	r4, #48	; 0x30
 801be20:	d0a3      	beq.n	801bd6a <_strtol_l.isra.0+0x3a>
 801be22:	260a      	movs	r6, #10
 801be24:	e7a9      	b.n	801bd7a <_strtol_l.isra.0+0x4a>
	...

0801be28 <_strtol_r>:
 801be28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801be2a:	4c06      	ldr	r4, [pc, #24]	; (801be44 <_strtol_r+0x1c>)
 801be2c:	4d06      	ldr	r5, [pc, #24]	; (801be48 <_strtol_r+0x20>)
 801be2e:	6824      	ldr	r4, [r4, #0]
 801be30:	6a24      	ldr	r4, [r4, #32]
 801be32:	2c00      	cmp	r4, #0
 801be34:	bf08      	it	eq
 801be36:	462c      	moveq	r4, r5
 801be38:	9400      	str	r4, [sp, #0]
 801be3a:	f7ff ff79 	bl	801bd30 <_strtol_l.isra.0>
 801be3e:	b003      	add	sp, #12
 801be40:	bd30      	pop	{r4, r5, pc}
 801be42:	bf00      	nop
 801be44:	20000020 	.word	0x20000020
 801be48:	20000084 	.word	0x20000084

0801be4c <__swbuf_r>:
 801be4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be4e:	460e      	mov	r6, r1
 801be50:	4614      	mov	r4, r2
 801be52:	4605      	mov	r5, r0
 801be54:	b118      	cbz	r0, 801be5e <__swbuf_r+0x12>
 801be56:	6983      	ldr	r3, [r0, #24]
 801be58:	b90b      	cbnz	r3, 801be5e <__swbuf_r+0x12>
 801be5a:	f7fd fff9 	bl	8019e50 <__sinit>
 801be5e:	4b21      	ldr	r3, [pc, #132]	; (801bee4 <__swbuf_r+0x98>)
 801be60:	429c      	cmp	r4, r3
 801be62:	d12a      	bne.n	801beba <__swbuf_r+0x6e>
 801be64:	686c      	ldr	r4, [r5, #4]
 801be66:	69a3      	ldr	r3, [r4, #24]
 801be68:	60a3      	str	r3, [r4, #8]
 801be6a:	89a3      	ldrh	r3, [r4, #12]
 801be6c:	071a      	lsls	r2, r3, #28
 801be6e:	d52e      	bpl.n	801bece <__swbuf_r+0x82>
 801be70:	6923      	ldr	r3, [r4, #16]
 801be72:	b363      	cbz	r3, 801bece <__swbuf_r+0x82>
 801be74:	6923      	ldr	r3, [r4, #16]
 801be76:	6820      	ldr	r0, [r4, #0]
 801be78:	1ac0      	subs	r0, r0, r3
 801be7a:	6963      	ldr	r3, [r4, #20]
 801be7c:	b2f6      	uxtb	r6, r6
 801be7e:	4283      	cmp	r3, r0
 801be80:	4637      	mov	r7, r6
 801be82:	dc04      	bgt.n	801be8e <__swbuf_r+0x42>
 801be84:	4621      	mov	r1, r4
 801be86:	4628      	mov	r0, r5
 801be88:	f000 ff30 	bl	801ccec <_fflush_r>
 801be8c:	bb28      	cbnz	r0, 801beda <__swbuf_r+0x8e>
 801be8e:	68a3      	ldr	r3, [r4, #8]
 801be90:	3b01      	subs	r3, #1
 801be92:	60a3      	str	r3, [r4, #8]
 801be94:	6823      	ldr	r3, [r4, #0]
 801be96:	1c5a      	adds	r2, r3, #1
 801be98:	6022      	str	r2, [r4, #0]
 801be9a:	701e      	strb	r6, [r3, #0]
 801be9c:	6963      	ldr	r3, [r4, #20]
 801be9e:	3001      	adds	r0, #1
 801bea0:	4283      	cmp	r3, r0
 801bea2:	d004      	beq.n	801beae <__swbuf_r+0x62>
 801bea4:	89a3      	ldrh	r3, [r4, #12]
 801bea6:	07db      	lsls	r3, r3, #31
 801bea8:	d519      	bpl.n	801bede <__swbuf_r+0x92>
 801beaa:	2e0a      	cmp	r6, #10
 801beac:	d117      	bne.n	801bede <__swbuf_r+0x92>
 801beae:	4621      	mov	r1, r4
 801beb0:	4628      	mov	r0, r5
 801beb2:	f000 ff1b 	bl	801ccec <_fflush_r>
 801beb6:	b190      	cbz	r0, 801bede <__swbuf_r+0x92>
 801beb8:	e00f      	b.n	801beda <__swbuf_r+0x8e>
 801beba:	4b0b      	ldr	r3, [pc, #44]	; (801bee8 <__swbuf_r+0x9c>)
 801bebc:	429c      	cmp	r4, r3
 801bebe:	d101      	bne.n	801bec4 <__swbuf_r+0x78>
 801bec0:	68ac      	ldr	r4, [r5, #8]
 801bec2:	e7d0      	b.n	801be66 <__swbuf_r+0x1a>
 801bec4:	4b09      	ldr	r3, [pc, #36]	; (801beec <__swbuf_r+0xa0>)
 801bec6:	429c      	cmp	r4, r3
 801bec8:	bf08      	it	eq
 801beca:	68ec      	ldreq	r4, [r5, #12]
 801becc:	e7cb      	b.n	801be66 <__swbuf_r+0x1a>
 801bece:	4621      	mov	r1, r4
 801bed0:	4628      	mov	r0, r5
 801bed2:	f000 f82d 	bl	801bf30 <__swsetup_r>
 801bed6:	2800      	cmp	r0, #0
 801bed8:	d0cc      	beq.n	801be74 <__swbuf_r+0x28>
 801beda:	f04f 37ff 	mov.w	r7, #4294967295
 801bede:	4638      	mov	r0, r7
 801bee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bee2:	bf00      	nop
 801bee4:	08024738 	.word	0x08024738
 801bee8:	08024758 	.word	0x08024758
 801beec:	08024718 	.word	0x08024718

0801bef0 <__ascii_wctomb>:
 801bef0:	b149      	cbz	r1, 801bf06 <__ascii_wctomb+0x16>
 801bef2:	2aff      	cmp	r2, #255	; 0xff
 801bef4:	bf85      	ittet	hi
 801bef6:	238a      	movhi	r3, #138	; 0x8a
 801bef8:	6003      	strhi	r3, [r0, #0]
 801befa:	700a      	strbls	r2, [r1, #0]
 801befc:	f04f 30ff 	movhi.w	r0, #4294967295
 801bf00:	bf98      	it	ls
 801bf02:	2001      	movls	r0, #1
 801bf04:	4770      	bx	lr
 801bf06:	4608      	mov	r0, r1
 801bf08:	4770      	bx	lr
	...

0801bf0c <_write_r>:
 801bf0c:	b538      	push	{r3, r4, r5, lr}
 801bf0e:	4c07      	ldr	r4, [pc, #28]	; (801bf2c <_write_r+0x20>)
 801bf10:	4605      	mov	r5, r0
 801bf12:	4608      	mov	r0, r1
 801bf14:	4611      	mov	r1, r2
 801bf16:	2200      	movs	r2, #0
 801bf18:	6022      	str	r2, [r4, #0]
 801bf1a:	461a      	mov	r2, r3
 801bf1c:	f7e7 fe1d 	bl	8003b5a <_write>
 801bf20:	1c43      	adds	r3, r0, #1
 801bf22:	d102      	bne.n	801bf2a <_write_r+0x1e>
 801bf24:	6823      	ldr	r3, [r4, #0]
 801bf26:	b103      	cbz	r3, 801bf2a <_write_r+0x1e>
 801bf28:	602b      	str	r3, [r5, #0]
 801bf2a:	bd38      	pop	{r3, r4, r5, pc}
 801bf2c:	20007cb8 	.word	0x20007cb8

0801bf30 <__swsetup_r>:
 801bf30:	4b32      	ldr	r3, [pc, #200]	; (801bffc <__swsetup_r+0xcc>)
 801bf32:	b570      	push	{r4, r5, r6, lr}
 801bf34:	681d      	ldr	r5, [r3, #0]
 801bf36:	4606      	mov	r6, r0
 801bf38:	460c      	mov	r4, r1
 801bf3a:	b125      	cbz	r5, 801bf46 <__swsetup_r+0x16>
 801bf3c:	69ab      	ldr	r3, [r5, #24]
 801bf3e:	b913      	cbnz	r3, 801bf46 <__swsetup_r+0x16>
 801bf40:	4628      	mov	r0, r5
 801bf42:	f7fd ff85 	bl	8019e50 <__sinit>
 801bf46:	4b2e      	ldr	r3, [pc, #184]	; (801c000 <__swsetup_r+0xd0>)
 801bf48:	429c      	cmp	r4, r3
 801bf4a:	d10f      	bne.n	801bf6c <__swsetup_r+0x3c>
 801bf4c:	686c      	ldr	r4, [r5, #4]
 801bf4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bf52:	b29a      	uxth	r2, r3
 801bf54:	0715      	lsls	r5, r2, #28
 801bf56:	d42c      	bmi.n	801bfb2 <__swsetup_r+0x82>
 801bf58:	06d0      	lsls	r0, r2, #27
 801bf5a:	d411      	bmi.n	801bf80 <__swsetup_r+0x50>
 801bf5c:	2209      	movs	r2, #9
 801bf5e:	6032      	str	r2, [r6, #0]
 801bf60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bf64:	81a3      	strh	r3, [r4, #12]
 801bf66:	f04f 30ff 	mov.w	r0, #4294967295
 801bf6a:	e03e      	b.n	801bfea <__swsetup_r+0xba>
 801bf6c:	4b25      	ldr	r3, [pc, #148]	; (801c004 <__swsetup_r+0xd4>)
 801bf6e:	429c      	cmp	r4, r3
 801bf70:	d101      	bne.n	801bf76 <__swsetup_r+0x46>
 801bf72:	68ac      	ldr	r4, [r5, #8]
 801bf74:	e7eb      	b.n	801bf4e <__swsetup_r+0x1e>
 801bf76:	4b24      	ldr	r3, [pc, #144]	; (801c008 <__swsetup_r+0xd8>)
 801bf78:	429c      	cmp	r4, r3
 801bf7a:	bf08      	it	eq
 801bf7c:	68ec      	ldreq	r4, [r5, #12]
 801bf7e:	e7e6      	b.n	801bf4e <__swsetup_r+0x1e>
 801bf80:	0751      	lsls	r1, r2, #29
 801bf82:	d512      	bpl.n	801bfaa <__swsetup_r+0x7a>
 801bf84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bf86:	b141      	cbz	r1, 801bf9a <__swsetup_r+0x6a>
 801bf88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bf8c:	4299      	cmp	r1, r3
 801bf8e:	d002      	beq.n	801bf96 <__swsetup_r+0x66>
 801bf90:	4630      	mov	r0, r6
 801bf92:	f7fe f86d 	bl	801a070 <_free_r>
 801bf96:	2300      	movs	r3, #0
 801bf98:	6363      	str	r3, [r4, #52]	; 0x34
 801bf9a:	89a3      	ldrh	r3, [r4, #12]
 801bf9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bfa0:	81a3      	strh	r3, [r4, #12]
 801bfa2:	2300      	movs	r3, #0
 801bfa4:	6063      	str	r3, [r4, #4]
 801bfa6:	6923      	ldr	r3, [r4, #16]
 801bfa8:	6023      	str	r3, [r4, #0]
 801bfaa:	89a3      	ldrh	r3, [r4, #12]
 801bfac:	f043 0308 	orr.w	r3, r3, #8
 801bfb0:	81a3      	strh	r3, [r4, #12]
 801bfb2:	6923      	ldr	r3, [r4, #16]
 801bfb4:	b94b      	cbnz	r3, 801bfca <__swsetup_r+0x9a>
 801bfb6:	89a3      	ldrh	r3, [r4, #12]
 801bfb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bfbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bfc0:	d003      	beq.n	801bfca <__swsetup_r+0x9a>
 801bfc2:	4621      	mov	r1, r4
 801bfc4:	4630      	mov	r0, r6
 801bfc6:	f001 fa27 	bl	801d418 <__smakebuf_r>
 801bfca:	89a2      	ldrh	r2, [r4, #12]
 801bfcc:	f012 0301 	ands.w	r3, r2, #1
 801bfd0:	d00c      	beq.n	801bfec <__swsetup_r+0xbc>
 801bfd2:	2300      	movs	r3, #0
 801bfd4:	60a3      	str	r3, [r4, #8]
 801bfd6:	6963      	ldr	r3, [r4, #20]
 801bfd8:	425b      	negs	r3, r3
 801bfda:	61a3      	str	r3, [r4, #24]
 801bfdc:	6923      	ldr	r3, [r4, #16]
 801bfde:	b953      	cbnz	r3, 801bff6 <__swsetup_r+0xc6>
 801bfe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bfe4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801bfe8:	d1ba      	bne.n	801bf60 <__swsetup_r+0x30>
 801bfea:	bd70      	pop	{r4, r5, r6, pc}
 801bfec:	0792      	lsls	r2, r2, #30
 801bfee:	bf58      	it	pl
 801bff0:	6963      	ldrpl	r3, [r4, #20]
 801bff2:	60a3      	str	r3, [r4, #8]
 801bff4:	e7f2      	b.n	801bfdc <__swsetup_r+0xac>
 801bff6:	2000      	movs	r0, #0
 801bff8:	e7f7      	b.n	801bfea <__swsetup_r+0xba>
 801bffa:	bf00      	nop
 801bffc:	20000020 	.word	0x20000020
 801c000:	08024738 	.word	0x08024738
 801c004:	08024758 	.word	0x08024758
 801c008:	08024718 	.word	0x08024718

0801c00c <_close_r>:
 801c00c:	b538      	push	{r3, r4, r5, lr}
 801c00e:	4c06      	ldr	r4, [pc, #24]	; (801c028 <_close_r+0x1c>)
 801c010:	2300      	movs	r3, #0
 801c012:	4605      	mov	r5, r0
 801c014:	4608      	mov	r0, r1
 801c016:	6023      	str	r3, [r4, #0]
 801c018:	f7e7 fdbb 	bl	8003b92 <_close>
 801c01c:	1c43      	adds	r3, r0, #1
 801c01e:	d102      	bne.n	801c026 <_close_r+0x1a>
 801c020:	6823      	ldr	r3, [r4, #0]
 801c022:	b103      	cbz	r3, 801c026 <_close_r+0x1a>
 801c024:	602b      	str	r3, [r5, #0]
 801c026:	bd38      	pop	{r3, r4, r5, pc}
 801c028:	20007cb8 	.word	0x20007cb8

0801c02c <quorem>:
 801c02c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c030:	6903      	ldr	r3, [r0, #16]
 801c032:	690c      	ldr	r4, [r1, #16]
 801c034:	42a3      	cmp	r3, r4
 801c036:	4680      	mov	r8, r0
 801c038:	f2c0 8082 	blt.w	801c140 <quorem+0x114>
 801c03c:	3c01      	subs	r4, #1
 801c03e:	f101 0714 	add.w	r7, r1, #20
 801c042:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801c046:	f100 0614 	add.w	r6, r0, #20
 801c04a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801c04e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801c052:	eb06 030c 	add.w	r3, r6, ip
 801c056:	3501      	adds	r5, #1
 801c058:	eb07 090c 	add.w	r9, r7, ip
 801c05c:	9301      	str	r3, [sp, #4]
 801c05e:	fbb0 f5f5 	udiv	r5, r0, r5
 801c062:	b395      	cbz	r5, 801c0ca <quorem+0x9e>
 801c064:	f04f 0a00 	mov.w	sl, #0
 801c068:	4638      	mov	r0, r7
 801c06a:	46b6      	mov	lr, r6
 801c06c:	46d3      	mov	fp, sl
 801c06e:	f850 2b04 	ldr.w	r2, [r0], #4
 801c072:	b293      	uxth	r3, r2
 801c074:	fb05 a303 	mla	r3, r5, r3, sl
 801c078:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c07c:	b29b      	uxth	r3, r3
 801c07e:	ebab 0303 	sub.w	r3, fp, r3
 801c082:	0c12      	lsrs	r2, r2, #16
 801c084:	f8de b000 	ldr.w	fp, [lr]
 801c088:	fb05 a202 	mla	r2, r5, r2, sl
 801c08c:	fa13 f38b 	uxtah	r3, r3, fp
 801c090:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801c094:	fa1f fb82 	uxth.w	fp, r2
 801c098:	f8de 2000 	ldr.w	r2, [lr]
 801c09c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801c0a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c0a4:	b29b      	uxth	r3, r3
 801c0a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c0aa:	4581      	cmp	r9, r0
 801c0ac:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801c0b0:	f84e 3b04 	str.w	r3, [lr], #4
 801c0b4:	d2db      	bcs.n	801c06e <quorem+0x42>
 801c0b6:	f856 300c 	ldr.w	r3, [r6, ip]
 801c0ba:	b933      	cbnz	r3, 801c0ca <quorem+0x9e>
 801c0bc:	9b01      	ldr	r3, [sp, #4]
 801c0be:	3b04      	subs	r3, #4
 801c0c0:	429e      	cmp	r6, r3
 801c0c2:	461a      	mov	r2, r3
 801c0c4:	d330      	bcc.n	801c128 <quorem+0xfc>
 801c0c6:	f8c8 4010 	str.w	r4, [r8, #16]
 801c0ca:	4640      	mov	r0, r8
 801c0cc:	f001 fc38 	bl	801d940 <__mcmp>
 801c0d0:	2800      	cmp	r0, #0
 801c0d2:	db25      	blt.n	801c120 <quorem+0xf4>
 801c0d4:	3501      	adds	r5, #1
 801c0d6:	4630      	mov	r0, r6
 801c0d8:	f04f 0c00 	mov.w	ip, #0
 801c0dc:	f857 2b04 	ldr.w	r2, [r7], #4
 801c0e0:	f8d0 e000 	ldr.w	lr, [r0]
 801c0e4:	b293      	uxth	r3, r2
 801c0e6:	ebac 0303 	sub.w	r3, ip, r3
 801c0ea:	0c12      	lsrs	r2, r2, #16
 801c0ec:	fa13 f38e 	uxtah	r3, r3, lr
 801c0f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c0f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c0f8:	b29b      	uxth	r3, r3
 801c0fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c0fe:	45b9      	cmp	r9, r7
 801c100:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c104:	f840 3b04 	str.w	r3, [r0], #4
 801c108:	d2e8      	bcs.n	801c0dc <quorem+0xb0>
 801c10a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801c10e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801c112:	b92a      	cbnz	r2, 801c120 <quorem+0xf4>
 801c114:	3b04      	subs	r3, #4
 801c116:	429e      	cmp	r6, r3
 801c118:	461a      	mov	r2, r3
 801c11a:	d30b      	bcc.n	801c134 <quorem+0x108>
 801c11c:	f8c8 4010 	str.w	r4, [r8, #16]
 801c120:	4628      	mov	r0, r5
 801c122:	b003      	add	sp, #12
 801c124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c128:	6812      	ldr	r2, [r2, #0]
 801c12a:	3b04      	subs	r3, #4
 801c12c:	2a00      	cmp	r2, #0
 801c12e:	d1ca      	bne.n	801c0c6 <quorem+0x9a>
 801c130:	3c01      	subs	r4, #1
 801c132:	e7c5      	b.n	801c0c0 <quorem+0x94>
 801c134:	6812      	ldr	r2, [r2, #0]
 801c136:	3b04      	subs	r3, #4
 801c138:	2a00      	cmp	r2, #0
 801c13a:	d1ef      	bne.n	801c11c <quorem+0xf0>
 801c13c:	3c01      	subs	r4, #1
 801c13e:	e7ea      	b.n	801c116 <quorem+0xea>
 801c140:	2000      	movs	r0, #0
 801c142:	e7ee      	b.n	801c122 <quorem+0xf6>
 801c144:	0000      	movs	r0, r0
	...

0801c148 <_dtoa_r>:
 801c148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c14c:	ec57 6b10 	vmov	r6, r7, d0
 801c150:	b095      	sub	sp, #84	; 0x54
 801c152:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c154:	9108      	str	r1, [sp, #32]
 801c156:	4604      	mov	r4, r0
 801c158:	920a      	str	r2, [sp, #40]	; 0x28
 801c15a:	9311      	str	r3, [sp, #68]	; 0x44
 801c15c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 801c160:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801c164:	b93d      	cbnz	r5, 801c176 <_dtoa_r+0x2e>
 801c166:	2010      	movs	r0, #16
 801c168:	f7fd ff24 	bl	8019fb4 <malloc>
 801c16c:	6260      	str	r0, [r4, #36]	; 0x24
 801c16e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c172:	6005      	str	r5, [r0, #0]
 801c174:	60c5      	str	r5, [r0, #12]
 801c176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c178:	6819      	ldr	r1, [r3, #0]
 801c17a:	b151      	cbz	r1, 801c192 <_dtoa_r+0x4a>
 801c17c:	685a      	ldr	r2, [r3, #4]
 801c17e:	604a      	str	r2, [r1, #4]
 801c180:	2301      	movs	r3, #1
 801c182:	4093      	lsls	r3, r2
 801c184:	608b      	str	r3, [r1, #8]
 801c186:	4620      	mov	r0, r4
 801c188:	f001 f9ba 	bl	801d500 <_Bfree>
 801c18c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c18e:	2200      	movs	r2, #0
 801c190:	601a      	str	r2, [r3, #0]
 801c192:	1e3b      	subs	r3, r7, #0
 801c194:	bfb9      	ittee	lt
 801c196:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c19a:	9303      	strlt	r3, [sp, #12]
 801c19c:	2300      	movge	r3, #0
 801c19e:	f8c8 3000 	strge.w	r3, [r8]
 801c1a2:	9d03      	ldr	r5, [sp, #12]
 801c1a4:	4bac      	ldr	r3, [pc, #688]	; (801c458 <_dtoa_r+0x310>)
 801c1a6:	bfbc      	itt	lt
 801c1a8:	2201      	movlt	r2, #1
 801c1aa:	f8c8 2000 	strlt.w	r2, [r8]
 801c1ae:	43ab      	bics	r3, r5
 801c1b0:	d11b      	bne.n	801c1ea <_dtoa_r+0xa2>
 801c1b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c1b4:	f242 730f 	movw	r3, #9999	; 0x270f
 801c1b8:	6013      	str	r3, [r2, #0]
 801c1ba:	9b02      	ldr	r3, [sp, #8]
 801c1bc:	b923      	cbnz	r3, 801c1c8 <_dtoa_r+0x80>
 801c1be:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801c1c2:	2d00      	cmp	r5, #0
 801c1c4:	f000 84dd 	beq.w	801cb82 <_dtoa_r+0xa3a>
 801c1c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c1ca:	b953      	cbnz	r3, 801c1e2 <_dtoa_r+0x9a>
 801c1cc:	4ba3      	ldr	r3, [pc, #652]	; (801c45c <_dtoa_r+0x314>)
 801c1ce:	e020      	b.n	801c212 <_dtoa_r+0xca>
 801c1d0:	4ba3      	ldr	r3, [pc, #652]	; (801c460 <_dtoa_r+0x318>)
 801c1d2:	9304      	str	r3, [sp, #16]
 801c1d4:	3308      	adds	r3, #8
 801c1d6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801c1d8:	6013      	str	r3, [r2, #0]
 801c1da:	9804      	ldr	r0, [sp, #16]
 801c1dc:	b015      	add	sp, #84	; 0x54
 801c1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1e2:	4b9e      	ldr	r3, [pc, #632]	; (801c45c <_dtoa_r+0x314>)
 801c1e4:	9304      	str	r3, [sp, #16]
 801c1e6:	3303      	adds	r3, #3
 801c1e8:	e7f5      	b.n	801c1d6 <_dtoa_r+0x8e>
 801c1ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c1ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1f6:	ed8d 7b04 	vstr	d7, [sp, #16]
 801c1fa:	d10c      	bne.n	801c216 <_dtoa_r+0xce>
 801c1fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c1fe:	2301      	movs	r3, #1
 801c200:	6013      	str	r3, [r2, #0]
 801c202:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c204:	2b00      	cmp	r3, #0
 801c206:	f000 84b9 	beq.w	801cb7c <_dtoa_r+0xa34>
 801c20a:	4b96      	ldr	r3, [pc, #600]	; (801c464 <_dtoa_r+0x31c>)
 801c20c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801c20e:	6013      	str	r3, [r2, #0]
 801c210:	3b01      	subs	r3, #1
 801c212:	9304      	str	r3, [sp, #16]
 801c214:	e7e1      	b.n	801c1da <_dtoa_r+0x92>
 801c216:	a913      	add	r1, sp, #76	; 0x4c
 801c218:	aa12      	add	r2, sp, #72	; 0x48
 801c21a:	ed9d 0b04 	vldr	d0, [sp, #16]
 801c21e:	4620      	mov	r0, r4
 801c220:	f001 fc7c 	bl	801db1c <__d2b>
 801c224:	f3c5 560a 	ubfx	r6, r5, #20, #11
 801c228:	9001      	str	r0, [sp, #4]
 801c22a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c22c:	2e00      	cmp	r6, #0
 801c22e:	d046      	beq.n	801c2be <_dtoa_r+0x176>
 801c230:	9805      	ldr	r0, [sp, #20]
 801c232:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801c236:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c23a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 801c23e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801c242:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 801c246:	2700      	movs	r7, #0
 801c248:	ee07 aa90 	vmov	s15, sl
 801c24c:	ec43 2b16 	vmov	d6, r2, r3
 801c250:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801c254:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 801c440 <_dtoa_r+0x2f8>
 801c258:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801c25c:	ee36 7b47 	vsub.f64	d7, d6, d7
 801c260:	ed9f 6b79 	vldr	d6, [pc, #484]	; 801c448 <_dtoa_r+0x300>
 801c264:	eea7 6b04 	vfma.f64	d6, d7, d4
 801c268:	eeb0 7b46 	vmov.f64	d7, d6
 801c26c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 801c450 <_dtoa_r+0x308>
 801c270:	eea5 7b06 	vfma.f64	d7, d5, d6
 801c274:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801c278:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801c27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c280:	ee16 ba90 	vmov	fp, s13
 801c284:	d508      	bpl.n	801c298 <_dtoa_r+0x150>
 801c286:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801c28a:	eeb4 6b47 	vcmp.f64	d6, d7
 801c28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c292:	bf18      	it	ne
 801c294:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801c298:	f1bb 0f16 	cmp.w	fp, #22
 801c29c:	d834      	bhi.n	801c308 <_dtoa_r+0x1c0>
 801c29e:	4b72      	ldr	r3, [pc, #456]	; (801c468 <_dtoa_r+0x320>)
 801c2a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c2a4:	ed93 7b00 	vldr	d7, [r3]
 801c2a8:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c2ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2b4:	dd01      	ble.n	801c2ba <_dtoa_r+0x172>
 801c2b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c2ba:	2300      	movs	r3, #0
 801c2bc:	e025      	b.n	801c30a <_dtoa_r+0x1c2>
 801c2be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c2c0:	eb01 0a03 	add.w	sl, r1, r3
 801c2c4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 801c2c8:	2b20      	cmp	r3, #32
 801c2ca:	dd17      	ble.n	801c2fc <_dtoa_r+0x1b4>
 801c2cc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801c2d0:	9a02      	ldr	r2, [sp, #8]
 801c2d2:	409d      	lsls	r5, r3
 801c2d4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 801c2d8:	fa22 f303 	lsr.w	r3, r2, r3
 801c2dc:	432b      	orrs	r3, r5
 801c2de:	ee07 3a90 	vmov	s15, r3
 801c2e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801c2e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c2ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 801c2ee:	9805      	ldr	r0, [sp, #20]
 801c2f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c2f4:	2701      	movs	r7, #1
 801c2f6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 801c2fa:	e7a5      	b.n	801c248 <_dtoa_r+0x100>
 801c2fc:	9a02      	ldr	r2, [sp, #8]
 801c2fe:	f1c3 0320 	rsb	r3, r3, #32
 801c302:	fa02 f303 	lsl.w	r3, r2, r3
 801c306:	e7ea      	b.n	801c2de <_dtoa_r+0x196>
 801c308:	2301      	movs	r3, #1
 801c30a:	eba1 0a0a 	sub.w	sl, r1, sl
 801c30e:	9310      	str	r3, [sp, #64]	; 0x40
 801c310:	f1ba 0301 	subs.w	r3, sl, #1
 801c314:	9307      	str	r3, [sp, #28]
 801c316:	bf43      	ittte	mi
 801c318:	2300      	movmi	r3, #0
 801c31a:	f1ca 0a01 	rsbmi	sl, sl, #1
 801c31e:	9307      	strmi	r3, [sp, #28]
 801c320:	f04f 0a00 	movpl.w	sl, #0
 801c324:	f1bb 0f00 	cmp.w	fp, #0
 801c328:	db19      	blt.n	801c35e <_dtoa_r+0x216>
 801c32a:	9b07      	ldr	r3, [sp, #28]
 801c32c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801c330:	445b      	add	r3, fp
 801c332:	9307      	str	r3, [sp, #28]
 801c334:	f04f 0800 	mov.w	r8, #0
 801c338:	9b08      	ldr	r3, [sp, #32]
 801c33a:	2b09      	cmp	r3, #9
 801c33c:	d866      	bhi.n	801c40c <_dtoa_r+0x2c4>
 801c33e:	2b05      	cmp	r3, #5
 801c340:	bfc4      	itt	gt
 801c342:	3b04      	subgt	r3, #4
 801c344:	9308      	strgt	r3, [sp, #32]
 801c346:	9b08      	ldr	r3, [sp, #32]
 801c348:	f1a3 0302 	sub.w	r3, r3, #2
 801c34c:	bfcc      	ite	gt
 801c34e:	2500      	movgt	r5, #0
 801c350:	2501      	movle	r5, #1
 801c352:	2b03      	cmp	r3, #3
 801c354:	d866      	bhi.n	801c424 <_dtoa_r+0x2dc>
 801c356:	e8df f003 	tbb	[pc, r3]
 801c35a:	5755      	.short	0x5755
 801c35c:	4909      	.short	0x4909
 801c35e:	2300      	movs	r3, #0
 801c360:	ebaa 0a0b 	sub.w	sl, sl, fp
 801c364:	f1cb 0800 	rsb	r8, fp, #0
 801c368:	930b      	str	r3, [sp, #44]	; 0x2c
 801c36a:	e7e5      	b.n	801c338 <_dtoa_r+0x1f0>
 801c36c:	2301      	movs	r3, #1
 801c36e:	9309      	str	r3, [sp, #36]	; 0x24
 801c370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c372:	2b00      	cmp	r3, #0
 801c374:	dd59      	ble.n	801c42a <_dtoa_r+0x2e2>
 801c376:	9306      	str	r3, [sp, #24]
 801c378:	4699      	mov	r9, r3
 801c37a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c37c:	2200      	movs	r2, #0
 801c37e:	6072      	str	r2, [r6, #4]
 801c380:	2204      	movs	r2, #4
 801c382:	f102 0014 	add.w	r0, r2, #20
 801c386:	4298      	cmp	r0, r3
 801c388:	6871      	ldr	r1, [r6, #4]
 801c38a:	d953      	bls.n	801c434 <_dtoa_r+0x2ec>
 801c38c:	4620      	mov	r0, r4
 801c38e:	f001 f883 	bl	801d498 <_Balloc>
 801c392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c394:	6030      	str	r0, [r6, #0]
 801c396:	681b      	ldr	r3, [r3, #0]
 801c398:	9304      	str	r3, [sp, #16]
 801c39a:	f1b9 0f0e 	cmp.w	r9, #14
 801c39e:	f200 80c2 	bhi.w	801c526 <_dtoa_r+0x3de>
 801c3a2:	2d00      	cmp	r5, #0
 801c3a4:	f000 80bf 	beq.w	801c526 <_dtoa_r+0x3de>
 801c3a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c3ac:	f1bb 0f00 	cmp.w	fp, #0
 801c3b0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801c3b4:	f340 80e6 	ble.w	801c584 <_dtoa_r+0x43c>
 801c3b8:	4a2b      	ldr	r2, [pc, #172]	; (801c468 <_dtoa_r+0x320>)
 801c3ba:	f00b 030f 	and.w	r3, fp, #15
 801c3be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801c3c2:	ed93 7b00 	vldr	d7, [r3]
 801c3c6:	ea4f 132b 	mov.w	r3, fp, asr #4
 801c3ca:	06da      	lsls	r2, r3, #27
 801c3cc:	f140 80d8 	bpl.w	801c580 <_dtoa_r+0x438>
 801c3d0:	4a26      	ldr	r2, [pc, #152]	; (801c46c <_dtoa_r+0x324>)
 801c3d2:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 801c3d6:	ed92 6b08 	vldr	d6, [r2, #32]
 801c3da:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801c3de:	ed8d 6b02 	vstr	d6, [sp, #8]
 801c3e2:	f003 030f 	and.w	r3, r3, #15
 801c3e6:	2203      	movs	r2, #3
 801c3e8:	4920      	ldr	r1, [pc, #128]	; (801c46c <_dtoa_r+0x324>)
 801c3ea:	e04a      	b.n	801c482 <_dtoa_r+0x33a>
 801c3ec:	2301      	movs	r3, #1
 801c3ee:	9309      	str	r3, [sp, #36]	; 0x24
 801c3f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c3f2:	445b      	add	r3, fp
 801c3f4:	f103 0901 	add.w	r9, r3, #1
 801c3f8:	9306      	str	r3, [sp, #24]
 801c3fa:	464b      	mov	r3, r9
 801c3fc:	2b01      	cmp	r3, #1
 801c3fe:	bfb8      	it	lt
 801c400:	2301      	movlt	r3, #1
 801c402:	e7ba      	b.n	801c37a <_dtoa_r+0x232>
 801c404:	2300      	movs	r3, #0
 801c406:	e7b2      	b.n	801c36e <_dtoa_r+0x226>
 801c408:	2300      	movs	r3, #0
 801c40a:	e7f0      	b.n	801c3ee <_dtoa_r+0x2a6>
 801c40c:	2501      	movs	r5, #1
 801c40e:	2300      	movs	r3, #0
 801c410:	e9cd 3508 	strd	r3, r5, [sp, #32]
 801c414:	f04f 33ff 	mov.w	r3, #4294967295
 801c418:	9306      	str	r3, [sp, #24]
 801c41a:	4699      	mov	r9, r3
 801c41c:	2200      	movs	r2, #0
 801c41e:	2312      	movs	r3, #18
 801c420:	920a      	str	r2, [sp, #40]	; 0x28
 801c422:	e7aa      	b.n	801c37a <_dtoa_r+0x232>
 801c424:	2301      	movs	r3, #1
 801c426:	9309      	str	r3, [sp, #36]	; 0x24
 801c428:	e7f4      	b.n	801c414 <_dtoa_r+0x2cc>
 801c42a:	2301      	movs	r3, #1
 801c42c:	9306      	str	r3, [sp, #24]
 801c42e:	4699      	mov	r9, r3
 801c430:	461a      	mov	r2, r3
 801c432:	e7f5      	b.n	801c420 <_dtoa_r+0x2d8>
 801c434:	3101      	adds	r1, #1
 801c436:	6071      	str	r1, [r6, #4]
 801c438:	0052      	lsls	r2, r2, #1
 801c43a:	e7a2      	b.n	801c382 <_dtoa_r+0x23a>
 801c43c:	f3af 8000 	nop.w
 801c440:	636f4361 	.word	0x636f4361
 801c444:	3fd287a7 	.word	0x3fd287a7
 801c448:	8b60c8b3 	.word	0x8b60c8b3
 801c44c:	3fc68a28 	.word	0x3fc68a28
 801c450:	509f79fb 	.word	0x509f79fb
 801c454:	3fd34413 	.word	0x3fd34413
 801c458:	7ff00000 	.word	0x7ff00000
 801c45c:	0802491a 	.word	0x0802491a
 801c460:	08024911 	.word	0x08024911
 801c464:	08024797 	.word	0x08024797
 801c468:	08024948 	.word	0x08024948
 801c46c:	08024920 	.word	0x08024920
 801c470:	07de      	lsls	r6, r3, #31
 801c472:	d504      	bpl.n	801c47e <_dtoa_r+0x336>
 801c474:	ed91 6b00 	vldr	d6, [r1]
 801c478:	3201      	adds	r2, #1
 801c47a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c47e:	105b      	asrs	r3, r3, #1
 801c480:	3108      	adds	r1, #8
 801c482:	2b00      	cmp	r3, #0
 801c484:	d1f4      	bne.n	801c470 <_dtoa_r+0x328>
 801c486:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c48a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c48e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c492:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c494:	2b00      	cmp	r3, #0
 801c496:	f000 80a7 	beq.w	801c5e8 <_dtoa_r+0x4a0>
 801c49a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801c49e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c4a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4aa:	f140 809d 	bpl.w	801c5e8 <_dtoa_r+0x4a0>
 801c4ae:	f1b9 0f00 	cmp.w	r9, #0
 801c4b2:	f000 8099 	beq.w	801c5e8 <_dtoa_r+0x4a0>
 801c4b6:	9b06      	ldr	r3, [sp, #24]
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	dd30      	ble.n	801c51e <_dtoa_r+0x3d6>
 801c4bc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801c4c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c4c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c4c8:	9d06      	ldr	r5, [sp, #24]
 801c4ca:	f10b 33ff 	add.w	r3, fp, #4294967295
 801c4ce:	3201      	adds	r2, #1
 801c4d0:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c4d4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801c4d8:	ee07 2a90 	vmov	s15, r2
 801c4dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801c4e0:	eea7 5b06 	vfma.f64	d5, d7, d6
 801c4e4:	ed8d 5b02 	vstr	d5, [sp, #8]
 801c4e8:	9a03      	ldr	r2, [sp, #12]
 801c4ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c4ee:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 801c4f2:	2d00      	cmp	r5, #0
 801c4f4:	d17b      	bne.n	801c5ee <_dtoa_r+0x4a6>
 801c4f6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801c4fa:	ee36 6b47 	vsub.f64	d6, d6, d7
 801c4fe:	ec41 0b17 	vmov	d7, r0, r1
 801c502:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c50a:	f300 8253 	bgt.w	801c9b4 <_dtoa_r+0x86c>
 801c50e:	eeb1 7b47 	vneg.f64	d7, d7
 801c512:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c51a:	f100 8249 	bmi.w	801c9b0 <_dtoa_r+0x868>
 801c51e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801c522:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c526:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c528:	2b00      	cmp	r3, #0
 801c52a:	f2c0 8119 	blt.w	801c760 <_dtoa_r+0x618>
 801c52e:	f1bb 0f0e 	cmp.w	fp, #14
 801c532:	f300 8115 	bgt.w	801c760 <_dtoa_r+0x618>
 801c536:	4bc3      	ldr	r3, [pc, #780]	; (801c844 <_dtoa_r+0x6fc>)
 801c538:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c53c:	ed93 6b00 	vldr	d6, [r3]
 801c540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c542:	2b00      	cmp	r3, #0
 801c544:	f280 80ba 	bge.w	801c6bc <_dtoa_r+0x574>
 801c548:	f1b9 0f00 	cmp.w	r9, #0
 801c54c:	f300 80b6 	bgt.w	801c6bc <_dtoa_r+0x574>
 801c550:	f040 822d 	bne.w	801c9ae <_dtoa_r+0x866>
 801c554:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801c558:	ee26 6b07 	vmul.f64	d6, d6, d7
 801c55c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c560:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c568:	464d      	mov	r5, r9
 801c56a:	464f      	mov	r7, r9
 801c56c:	f280 8204 	bge.w	801c978 <_dtoa_r+0x830>
 801c570:	9b04      	ldr	r3, [sp, #16]
 801c572:	9a04      	ldr	r2, [sp, #16]
 801c574:	1c5e      	adds	r6, r3, #1
 801c576:	2331      	movs	r3, #49	; 0x31
 801c578:	7013      	strb	r3, [r2, #0]
 801c57a:	f10b 0b01 	add.w	fp, fp, #1
 801c57e:	e1ff      	b.n	801c980 <_dtoa_r+0x838>
 801c580:	2202      	movs	r2, #2
 801c582:	e731      	b.n	801c3e8 <_dtoa_r+0x2a0>
 801c584:	d02e      	beq.n	801c5e4 <_dtoa_r+0x49c>
 801c586:	f1cb 0300 	rsb	r3, fp, #0
 801c58a:	4aae      	ldr	r2, [pc, #696]	; (801c844 <_dtoa_r+0x6fc>)
 801c58c:	f003 010f 	and.w	r1, r3, #15
 801c590:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801c594:	ed92 7b00 	vldr	d7, [r2]
 801c598:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 801c59c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c5a0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801c5a4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801c5a8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801c5ac:	49a6      	ldr	r1, [pc, #664]	; (801c848 <_dtoa_r+0x700>)
 801c5ae:	111b      	asrs	r3, r3, #4
 801c5b0:	2000      	movs	r0, #0
 801c5b2:	2202      	movs	r2, #2
 801c5b4:	b93b      	cbnz	r3, 801c5c6 <_dtoa_r+0x47e>
 801c5b6:	2800      	cmp	r0, #0
 801c5b8:	f43f af6b 	beq.w	801c492 <_dtoa_r+0x34a>
 801c5bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c5c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c5c4:	e765      	b.n	801c492 <_dtoa_r+0x34a>
 801c5c6:	07dd      	lsls	r5, r3, #31
 801c5c8:	d509      	bpl.n	801c5de <_dtoa_r+0x496>
 801c5ca:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801c5ce:	ed91 7b00 	vldr	d7, [r1]
 801c5d2:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c5d6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801c5da:	3201      	adds	r2, #1
 801c5dc:	2001      	movs	r0, #1
 801c5de:	105b      	asrs	r3, r3, #1
 801c5e0:	3108      	adds	r1, #8
 801c5e2:	e7e7      	b.n	801c5b4 <_dtoa_r+0x46c>
 801c5e4:	2202      	movs	r2, #2
 801c5e6:	e754      	b.n	801c492 <_dtoa_r+0x34a>
 801c5e8:	465b      	mov	r3, fp
 801c5ea:	464d      	mov	r5, r9
 801c5ec:	e770      	b.n	801c4d0 <_dtoa_r+0x388>
 801c5ee:	4a95      	ldr	r2, [pc, #596]	; (801c844 <_dtoa_r+0x6fc>)
 801c5f0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 801c5f4:	ed12 4b02 	vldr	d4, [r2, #-8]
 801c5f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c5fa:	ec41 0b17 	vmov	d7, r0, r1
 801c5fe:	b35a      	cbz	r2, 801c658 <_dtoa_r+0x510>
 801c600:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801c604:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801c608:	9e04      	ldr	r6, [sp, #16]
 801c60a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801c60e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801c612:	ee35 7b47 	vsub.f64	d7, d5, d7
 801c616:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801c61a:	ee14 2a90 	vmov	r2, s9
 801c61e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801c622:	3230      	adds	r2, #48	; 0x30
 801c624:	ee36 6b45 	vsub.f64	d6, d6, d5
 801c628:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c630:	f806 2b01 	strb.w	r2, [r6], #1
 801c634:	d43b      	bmi.n	801c6ae <_dtoa_r+0x566>
 801c636:	ee32 5b46 	vsub.f64	d5, d2, d6
 801c63a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801c63e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c642:	d472      	bmi.n	801c72a <_dtoa_r+0x5e2>
 801c644:	9a04      	ldr	r2, [sp, #16]
 801c646:	1ab2      	subs	r2, r6, r2
 801c648:	4295      	cmp	r5, r2
 801c64a:	f77f af68 	ble.w	801c51e <_dtoa_r+0x3d6>
 801c64e:	ee27 7b03 	vmul.f64	d7, d7, d3
 801c652:	ee26 6b03 	vmul.f64	d6, d6, d3
 801c656:	e7de      	b.n	801c616 <_dtoa_r+0x4ce>
 801c658:	9a04      	ldr	r2, [sp, #16]
 801c65a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801c65e:	1956      	adds	r6, r2, r5
 801c660:	4611      	mov	r1, r2
 801c662:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801c666:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801c66a:	ee14 2a90 	vmov	r2, s9
 801c66e:	3230      	adds	r2, #48	; 0x30
 801c670:	f801 2b01 	strb.w	r2, [r1], #1
 801c674:	42b1      	cmp	r1, r6
 801c676:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801c67a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801c67e:	d11a      	bne.n	801c6b6 <_dtoa_r+0x56e>
 801c680:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801c684:	ee37 4b05 	vadd.f64	d4, d7, d5
 801c688:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801c68c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c690:	dc4b      	bgt.n	801c72a <_dtoa_r+0x5e2>
 801c692:	ee35 7b47 	vsub.f64	d7, d5, d7
 801c696:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c69e:	f57f af3e 	bpl.w	801c51e <_dtoa_r+0x3d6>
 801c6a2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801c6a6:	2a30      	cmp	r2, #48	; 0x30
 801c6a8:	f106 31ff 	add.w	r1, r6, #4294967295
 801c6ac:	d001      	beq.n	801c6b2 <_dtoa_r+0x56a>
 801c6ae:	469b      	mov	fp, r3
 801c6b0:	e02a      	b.n	801c708 <_dtoa_r+0x5c0>
 801c6b2:	460e      	mov	r6, r1
 801c6b4:	e7f5      	b.n	801c6a2 <_dtoa_r+0x55a>
 801c6b6:	ee26 6b03 	vmul.f64	d6, d6, d3
 801c6ba:	e7d4      	b.n	801c666 <_dtoa_r+0x51e>
 801c6bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c6c0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801c6c4:	9e04      	ldr	r6, [sp, #16]
 801c6c6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801c6ca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801c6ce:	ee15 3a10 	vmov	r3, s10
 801c6d2:	3330      	adds	r3, #48	; 0x30
 801c6d4:	f806 3b01 	strb.w	r3, [r6], #1
 801c6d8:	9b04      	ldr	r3, [sp, #16]
 801c6da:	1af3      	subs	r3, r6, r3
 801c6dc:	4599      	cmp	r9, r3
 801c6de:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801c6e2:	eea3 7b46 	vfms.f64	d7, d3, d6
 801c6e6:	d133      	bne.n	801c750 <_dtoa_r+0x608>
 801c6e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 801c6ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6f4:	dc18      	bgt.n	801c728 <_dtoa_r+0x5e0>
 801c6f6:	eeb4 7b46 	vcmp.f64	d7, d6
 801c6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6fe:	d103      	bne.n	801c708 <_dtoa_r+0x5c0>
 801c700:	ee15 3a10 	vmov	r3, s10
 801c704:	07db      	lsls	r3, r3, #31
 801c706:	d40f      	bmi.n	801c728 <_dtoa_r+0x5e0>
 801c708:	9901      	ldr	r1, [sp, #4]
 801c70a:	4620      	mov	r0, r4
 801c70c:	f000 fef8 	bl	801d500 <_Bfree>
 801c710:	2300      	movs	r3, #0
 801c712:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c714:	7033      	strb	r3, [r6, #0]
 801c716:	f10b 0301 	add.w	r3, fp, #1
 801c71a:	6013      	str	r3, [r2, #0]
 801c71c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c71e:	2b00      	cmp	r3, #0
 801c720:	f43f ad5b 	beq.w	801c1da <_dtoa_r+0x92>
 801c724:	601e      	str	r6, [r3, #0]
 801c726:	e558      	b.n	801c1da <_dtoa_r+0x92>
 801c728:	465b      	mov	r3, fp
 801c72a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801c72e:	2939      	cmp	r1, #57	; 0x39
 801c730:	f106 32ff 	add.w	r2, r6, #4294967295
 801c734:	d106      	bne.n	801c744 <_dtoa_r+0x5fc>
 801c736:	9904      	ldr	r1, [sp, #16]
 801c738:	4291      	cmp	r1, r2
 801c73a:	d107      	bne.n	801c74c <_dtoa_r+0x604>
 801c73c:	2230      	movs	r2, #48	; 0x30
 801c73e:	700a      	strb	r2, [r1, #0]
 801c740:	3301      	adds	r3, #1
 801c742:	460a      	mov	r2, r1
 801c744:	7811      	ldrb	r1, [r2, #0]
 801c746:	3101      	adds	r1, #1
 801c748:	7011      	strb	r1, [r2, #0]
 801c74a:	e7b0      	b.n	801c6ae <_dtoa_r+0x566>
 801c74c:	4616      	mov	r6, r2
 801c74e:	e7ec      	b.n	801c72a <_dtoa_r+0x5e2>
 801c750:	ee27 7b04 	vmul.f64	d7, d7, d4
 801c754:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c75c:	d1b3      	bne.n	801c6c6 <_dtoa_r+0x57e>
 801c75e:	e7d3      	b.n	801c708 <_dtoa_r+0x5c0>
 801c760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c762:	2a00      	cmp	r2, #0
 801c764:	f000 808d 	beq.w	801c882 <_dtoa_r+0x73a>
 801c768:	9a08      	ldr	r2, [sp, #32]
 801c76a:	2a01      	cmp	r2, #1
 801c76c:	dc72      	bgt.n	801c854 <_dtoa_r+0x70c>
 801c76e:	2f00      	cmp	r7, #0
 801c770:	d06c      	beq.n	801c84c <_dtoa_r+0x704>
 801c772:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c776:	4645      	mov	r5, r8
 801c778:	4656      	mov	r6, sl
 801c77a:	9a07      	ldr	r2, [sp, #28]
 801c77c:	2101      	movs	r1, #1
 801c77e:	441a      	add	r2, r3
 801c780:	4620      	mov	r0, r4
 801c782:	449a      	add	sl, r3
 801c784:	9207      	str	r2, [sp, #28]
 801c786:	f000 ff99 	bl	801d6bc <__i2b>
 801c78a:	4607      	mov	r7, r0
 801c78c:	2e00      	cmp	r6, #0
 801c78e:	dd0b      	ble.n	801c7a8 <_dtoa_r+0x660>
 801c790:	9b07      	ldr	r3, [sp, #28]
 801c792:	2b00      	cmp	r3, #0
 801c794:	dd08      	ble.n	801c7a8 <_dtoa_r+0x660>
 801c796:	42b3      	cmp	r3, r6
 801c798:	9a07      	ldr	r2, [sp, #28]
 801c79a:	bfa8      	it	ge
 801c79c:	4633      	movge	r3, r6
 801c79e:	ebaa 0a03 	sub.w	sl, sl, r3
 801c7a2:	1af6      	subs	r6, r6, r3
 801c7a4:	1ad3      	subs	r3, r2, r3
 801c7a6:	9307      	str	r3, [sp, #28]
 801c7a8:	f1b8 0f00 	cmp.w	r8, #0
 801c7ac:	d01d      	beq.n	801c7ea <_dtoa_r+0x6a2>
 801c7ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c7b0:	2b00      	cmp	r3, #0
 801c7b2:	d06a      	beq.n	801c88a <_dtoa_r+0x742>
 801c7b4:	b18d      	cbz	r5, 801c7da <_dtoa_r+0x692>
 801c7b6:	4639      	mov	r1, r7
 801c7b8:	462a      	mov	r2, r5
 801c7ba:	4620      	mov	r0, r4
 801c7bc:	f001 f81e 	bl	801d7fc <__pow5mult>
 801c7c0:	9a01      	ldr	r2, [sp, #4]
 801c7c2:	4601      	mov	r1, r0
 801c7c4:	4607      	mov	r7, r0
 801c7c6:	4620      	mov	r0, r4
 801c7c8:	f000 ff81 	bl	801d6ce <__multiply>
 801c7cc:	9901      	ldr	r1, [sp, #4]
 801c7ce:	900c      	str	r0, [sp, #48]	; 0x30
 801c7d0:	4620      	mov	r0, r4
 801c7d2:	f000 fe95 	bl	801d500 <_Bfree>
 801c7d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c7d8:	9301      	str	r3, [sp, #4]
 801c7da:	ebb8 0205 	subs.w	r2, r8, r5
 801c7de:	d004      	beq.n	801c7ea <_dtoa_r+0x6a2>
 801c7e0:	9901      	ldr	r1, [sp, #4]
 801c7e2:	4620      	mov	r0, r4
 801c7e4:	f001 f80a 	bl	801d7fc <__pow5mult>
 801c7e8:	9001      	str	r0, [sp, #4]
 801c7ea:	2101      	movs	r1, #1
 801c7ec:	4620      	mov	r0, r4
 801c7ee:	f000 ff65 	bl	801d6bc <__i2b>
 801c7f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c7f4:	4605      	mov	r5, r0
 801c7f6:	2b00      	cmp	r3, #0
 801c7f8:	f000 81ca 	beq.w	801cb90 <_dtoa_r+0xa48>
 801c7fc:	461a      	mov	r2, r3
 801c7fe:	4601      	mov	r1, r0
 801c800:	4620      	mov	r0, r4
 801c802:	f000 fffb 	bl	801d7fc <__pow5mult>
 801c806:	9b08      	ldr	r3, [sp, #32]
 801c808:	2b01      	cmp	r3, #1
 801c80a:	4605      	mov	r5, r0
 801c80c:	dc44      	bgt.n	801c898 <_dtoa_r+0x750>
 801c80e:	9b02      	ldr	r3, [sp, #8]
 801c810:	2b00      	cmp	r3, #0
 801c812:	d13c      	bne.n	801c88e <_dtoa_r+0x746>
 801c814:	9b03      	ldr	r3, [sp, #12]
 801c816:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d137      	bne.n	801c88e <_dtoa_r+0x746>
 801c81e:	9b03      	ldr	r3, [sp, #12]
 801c820:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c824:	0d1b      	lsrs	r3, r3, #20
 801c826:	051b      	lsls	r3, r3, #20
 801c828:	2b00      	cmp	r3, #0
 801c82a:	d033      	beq.n	801c894 <_dtoa_r+0x74c>
 801c82c:	9b07      	ldr	r3, [sp, #28]
 801c82e:	3301      	adds	r3, #1
 801c830:	f10a 0a01 	add.w	sl, sl, #1
 801c834:	9307      	str	r3, [sp, #28]
 801c836:	f04f 0801 	mov.w	r8, #1
 801c83a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c83c:	bb73      	cbnz	r3, 801c89c <_dtoa_r+0x754>
 801c83e:	2001      	movs	r0, #1
 801c840:	e034      	b.n	801c8ac <_dtoa_r+0x764>
 801c842:	bf00      	nop
 801c844:	08024948 	.word	0x08024948
 801c848:	08024920 	.word	0x08024920
 801c84c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c84e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c852:	e790      	b.n	801c776 <_dtoa_r+0x62e>
 801c854:	f109 35ff 	add.w	r5, r9, #4294967295
 801c858:	45a8      	cmp	r8, r5
 801c85a:	bfbf      	itttt	lt
 801c85c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801c85e:	eba5 0808 	sublt.w	r8, r5, r8
 801c862:	4443      	addlt	r3, r8
 801c864:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801c866:	bfb6      	itet	lt
 801c868:	46a8      	movlt	r8, r5
 801c86a:	eba8 0505 	subge.w	r5, r8, r5
 801c86e:	2500      	movlt	r5, #0
 801c870:	f1b9 0f00 	cmp.w	r9, #0
 801c874:	bfb9      	ittee	lt
 801c876:	ebaa 0609 	sublt.w	r6, sl, r9
 801c87a:	2300      	movlt	r3, #0
 801c87c:	4656      	movge	r6, sl
 801c87e:	464b      	movge	r3, r9
 801c880:	e77b      	b.n	801c77a <_dtoa_r+0x632>
 801c882:	4645      	mov	r5, r8
 801c884:	4656      	mov	r6, sl
 801c886:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801c888:	e780      	b.n	801c78c <_dtoa_r+0x644>
 801c88a:	4642      	mov	r2, r8
 801c88c:	e7a8      	b.n	801c7e0 <_dtoa_r+0x698>
 801c88e:	f04f 0800 	mov.w	r8, #0
 801c892:	e7d2      	b.n	801c83a <_dtoa_r+0x6f2>
 801c894:	4698      	mov	r8, r3
 801c896:	e7d0      	b.n	801c83a <_dtoa_r+0x6f2>
 801c898:	f04f 0800 	mov.w	r8, #0
 801c89c:	692b      	ldr	r3, [r5, #16]
 801c89e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801c8a2:	6918      	ldr	r0, [r3, #16]
 801c8a4:	f000 febc 	bl	801d620 <__hi0bits>
 801c8a8:	f1c0 0020 	rsb	r0, r0, #32
 801c8ac:	9b07      	ldr	r3, [sp, #28]
 801c8ae:	4418      	add	r0, r3
 801c8b0:	f010 001f 	ands.w	r0, r0, #31
 801c8b4:	d047      	beq.n	801c946 <_dtoa_r+0x7fe>
 801c8b6:	f1c0 0320 	rsb	r3, r0, #32
 801c8ba:	2b04      	cmp	r3, #4
 801c8bc:	dd3b      	ble.n	801c936 <_dtoa_r+0x7ee>
 801c8be:	9b07      	ldr	r3, [sp, #28]
 801c8c0:	f1c0 001c 	rsb	r0, r0, #28
 801c8c4:	4482      	add	sl, r0
 801c8c6:	4406      	add	r6, r0
 801c8c8:	4403      	add	r3, r0
 801c8ca:	9307      	str	r3, [sp, #28]
 801c8cc:	f1ba 0f00 	cmp.w	sl, #0
 801c8d0:	dd05      	ble.n	801c8de <_dtoa_r+0x796>
 801c8d2:	4652      	mov	r2, sl
 801c8d4:	9901      	ldr	r1, [sp, #4]
 801c8d6:	4620      	mov	r0, r4
 801c8d8:	f000 ffde 	bl	801d898 <__lshift>
 801c8dc:	9001      	str	r0, [sp, #4]
 801c8de:	9b07      	ldr	r3, [sp, #28]
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	dd05      	ble.n	801c8f0 <_dtoa_r+0x7a8>
 801c8e4:	4629      	mov	r1, r5
 801c8e6:	461a      	mov	r2, r3
 801c8e8:	4620      	mov	r0, r4
 801c8ea:	f000 ffd5 	bl	801d898 <__lshift>
 801c8ee:	4605      	mov	r5, r0
 801c8f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c8f2:	b353      	cbz	r3, 801c94a <_dtoa_r+0x802>
 801c8f4:	4629      	mov	r1, r5
 801c8f6:	9801      	ldr	r0, [sp, #4]
 801c8f8:	f001 f822 	bl	801d940 <__mcmp>
 801c8fc:	2800      	cmp	r0, #0
 801c8fe:	da24      	bge.n	801c94a <_dtoa_r+0x802>
 801c900:	2300      	movs	r3, #0
 801c902:	220a      	movs	r2, #10
 801c904:	9901      	ldr	r1, [sp, #4]
 801c906:	4620      	mov	r0, r4
 801c908:	f000 fe11 	bl	801d52e <__multadd>
 801c90c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c90e:	9001      	str	r0, [sp, #4]
 801c910:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c914:	2b00      	cmp	r3, #0
 801c916:	f000 8142 	beq.w	801cb9e <_dtoa_r+0xa56>
 801c91a:	2300      	movs	r3, #0
 801c91c:	4639      	mov	r1, r7
 801c91e:	220a      	movs	r2, #10
 801c920:	4620      	mov	r0, r4
 801c922:	f000 fe04 	bl	801d52e <__multadd>
 801c926:	9b06      	ldr	r3, [sp, #24]
 801c928:	2b00      	cmp	r3, #0
 801c92a:	4607      	mov	r7, r0
 801c92c:	dc4b      	bgt.n	801c9c6 <_dtoa_r+0x87e>
 801c92e:	9b08      	ldr	r3, [sp, #32]
 801c930:	2b02      	cmp	r3, #2
 801c932:	dd48      	ble.n	801c9c6 <_dtoa_r+0x87e>
 801c934:	e011      	b.n	801c95a <_dtoa_r+0x812>
 801c936:	d0c9      	beq.n	801c8cc <_dtoa_r+0x784>
 801c938:	9a07      	ldr	r2, [sp, #28]
 801c93a:	331c      	adds	r3, #28
 801c93c:	441a      	add	r2, r3
 801c93e:	449a      	add	sl, r3
 801c940:	441e      	add	r6, r3
 801c942:	4613      	mov	r3, r2
 801c944:	e7c1      	b.n	801c8ca <_dtoa_r+0x782>
 801c946:	4603      	mov	r3, r0
 801c948:	e7f6      	b.n	801c938 <_dtoa_r+0x7f0>
 801c94a:	f1b9 0f00 	cmp.w	r9, #0
 801c94e:	dc34      	bgt.n	801c9ba <_dtoa_r+0x872>
 801c950:	9b08      	ldr	r3, [sp, #32]
 801c952:	2b02      	cmp	r3, #2
 801c954:	dd31      	ble.n	801c9ba <_dtoa_r+0x872>
 801c956:	f8cd 9018 	str.w	r9, [sp, #24]
 801c95a:	9b06      	ldr	r3, [sp, #24]
 801c95c:	b963      	cbnz	r3, 801c978 <_dtoa_r+0x830>
 801c95e:	4629      	mov	r1, r5
 801c960:	2205      	movs	r2, #5
 801c962:	4620      	mov	r0, r4
 801c964:	f000 fde3 	bl	801d52e <__multadd>
 801c968:	4601      	mov	r1, r0
 801c96a:	4605      	mov	r5, r0
 801c96c:	9801      	ldr	r0, [sp, #4]
 801c96e:	f000 ffe7 	bl	801d940 <__mcmp>
 801c972:	2800      	cmp	r0, #0
 801c974:	f73f adfc 	bgt.w	801c570 <_dtoa_r+0x428>
 801c978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c97a:	9e04      	ldr	r6, [sp, #16]
 801c97c:	ea6f 0b03 	mvn.w	fp, r3
 801c980:	f04f 0900 	mov.w	r9, #0
 801c984:	4629      	mov	r1, r5
 801c986:	4620      	mov	r0, r4
 801c988:	f000 fdba 	bl	801d500 <_Bfree>
 801c98c:	2f00      	cmp	r7, #0
 801c98e:	f43f aebb 	beq.w	801c708 <_dtoa_r+0x5c0>
 801c992:	f1b9 0f00 	cmp.w	r9, #0
 801c996:	d005      	beq.n	801c9a4 <_dtoa_r+0x85c>
 801c998:	45b9      	cmp	r9, r7
 801c99a:	d003      	beq.n	801c9a4 <_dtoa_r+0x85c>
 801c99c:	4649      	mov	r1, r9
 801c99e:	4620      	mov	r0, r4
 801c9a0:	f000 fdae 	bl	801d500 <_Bfree>
 801c9a4:	4639      	mov	r1, r7
 801c9a6:	4620      	mov	r0, r4
 801c9a8:	f000 fdaa 	bl	801d500 <_Bfree>
 801c9ac:	e6ac      	b.n	801c708 <_dtoa_r+0x5c0>
 801c9ae:	2500      	movs	r5, #0
 801c9b0:	462f      	mov	r7, r5
 801c9b2:	e7e1      	b.n	801c978 <_dtoa_r+0x830>
 801c9b4:	469b      	mov	fp, r3
 801c9b6:	462f      	mov	r7, r5
 801c9b8:	e5da      	b.n	801c570 <_dtoa_r+0x428>
 801c9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c9bc:	f8cd 9018 	str.w	r9, [sp, #24]
 801c9c0:	2b00      	cmp	r3, #0
 801c9c2:	f000 80f3 	beq.w	801cbac <_dtoa_r+0xa64>
 801c9c6:	2e00      	cmp	r6, #0
 801c9c8:	dd05      	ble.n	801c9d6 <_dtoa_r+0x88e>
 801c9ca:	4639      	mov	r1, r7
 801c9cc:	4632      	mov	r2, r6
 801c9ce:	4620      	mov	r0, r4
 801c9d0:	f000 ff62 	bl	801d898 <__lshift>
 801c9d4:	4607      	mov	r7, r0
 801c9d6:	f1b8 0f00 	cmp.w	r8, #0
 801c9da:	d04c      	beq.n	801ca76 <_dtoa_r+0x92e>
 801c9dc:	6879      	ldr	r1, [r7, #4]
 801c9de:	4620      	mov	r0, r4
 801c9e0:	f000 fd5a 	bl	801d498 <_Balloc>
 801c9e4:	693a      	ldr	r2, [r7, #16]
 801c9e6:	3202      	adds	r2, #2
 801c9e8:	4606      	mov	r6, r0
 801c9ea:	0092      	lsls	r2, r2, #2
 801c9ec:	f107 010c 	add.w	r1, r7, #12
 801c9f0:	300c      	adds	r0, #12
 801c9f2:	f7fd fb10 	bl	801a016 <memcpy>
 801c9f6:	2201      	movs	r2, #1
 801c9f8:	4631      	mov	r1, r6
 801c9fa:	4620      	mov	r0, r4
 801c9fc:	f000 ff4c 	bl	801d898 <__lshift>
 801ca00:	9b02      	ldr	r3, [sp, #8]
 801ca02:	f8dd a010 	ldr.w	sl, [sp, #16]
 801ca06:	f003 0301 	and.w	r3, r3, #1
 801ca0a:	46b9      	mov	r9, r7
 801ca0c:	9307      	str	r3, [sp, #28]
 801ca0e:	4607      	mov	r7, r0
 801ca10:	4629      	mov	r1, r5
 801ca12:	9801      	ldr	r0, [sp, #4]
 801ca14:	f7ff fb0a 	bl	801c02c <quorem>
 801ca18:	4649      	mov	r1, r9
 801ca1a:	4606      	mov	r6, r0
 801ca1c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801ca20:	9801      	ldr	r0, [sp, #4]
 801ca22:	f000 ff8d 	bl	801d940 <__mcmp>
 801ca26:	463a      	mov	r2, r7
 801ca28:	9002      	str	r0, [sp, #8]
 801ca2a:	4629      	mov	r1, r5
 801ca2c:	4620      	mov	r0, r4
 801ca2e:	f000 ffa1 	bl	801d974 <__mdiff>
 801ca32:	68c3      	ldr	r3, [r0, #12]
 801ca34:	4602      	mov	r2, r0
 801ca36:	bb03      	cbnz	r3, 801ca7a <_dtoa_r+0x932>
 801ca38:	4601      	mov	r1, r0
 801ca3a:	9009      	str	r0, [sp, #36]	; 0x24
 801ca3c:	9801      	ldr	r0, [sp, #4]
 801ca3e:	f000 ff7f 	bl	801d940 <__mcmp>
 801ca42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ca44:	4603      	mov	r3, r0
 801ca46:	4611      	mov	r1, r2
 801ca48:	4620      	mov	r0, r4
 801ca4a:	9309      	str	r3, [sp, #36]	; 0x24
 801ca4c:	f000 fd58 	bl	801d500 <_Bfree>
 801ca50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca52:	b9a3      	cbnz	r3, 801ca7e <_dtoa_r+0x936>
 801ca54:	9a08      	ldr	r2, [sp, #32]
 801ca56:	b992      	cbnz	r2, 801ca7e <_dtoa_r+0x936>
 801ca58:	9a07      	ldr	r2, [sp, #28]
 801ca5a:	b982      	cbnz	r2, 801ca7e <_dtoa_r+0x936>
 801ca5c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801ca60:	d029      	beq.n	801cab6 <_dtoa_r+0x96e>
 801ca62:	9b02      	ldr	r3, [sp, #8]
 801ca64:	2b00      	cmp	r3, #0
 801ca66:	dd01      	ble.n	801ca6c <_dtoa_r+0x924>
 801ca68:	f106 0831 	add.w	r8, r6, #49	; 0x31
 801ca6c:	f10a 0601 	add.w	r6, sl, #1
 801ca70:	f88a 8000 	strb.w	r8, [sl]
 801ca74:	e786      	b.n	801c984 <_dtoa_r+0x83c>
 801ca76:	4638      	mov	r0, r7
 801ca78:	e7c2      	b.n	801ca00 <_dtoa_r+0x8b8>
 801ca7a:	2301      	movs	r3, #1
 801ca7c:	e7e3      	b.n	801ca46 <_dtoa_r+0x8fe>
 801ca7e:	9a02      	ldr	r2, [sp, #8]
 801ca80:	2a00      	cmp	r2, #0
 801ca82:	db04      	blt.n	801ca8e <_dtoa_r+0x946>
 801ca84:	d124      	bne.n	801cad0 <_dtoa_r+0x988>
 801ca86:	9a08      	ldr	r2, [sp, #32]
 801ca88:	bb12      	cbnz	r2, 801cad0 <_dtoa_r+0x988>
 801ca8a:	9a07      	ldr	r2, [sp, #28]
 801ca8c:	bb02      	cbnz	r2, 801cad0 <_dtoa_r+0x988>
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	ddec      	ble.n	801ca6c <_dtoa_r+0x924>
 801ca92:	2201      	movs	r2, #1
 801ca94:	9901      	ldr	r1, [sp, #4]
 801ca96:	4620      	mov	r0, r4
 801ca98:	f000 fefe 	bl	801d898 <__lshift>
 801ca9c:	4629      	mov	r1, r5
 801ca9e:	9001      	str	r0, [sp, #4]
 801caa0:	f000 ff4e 	bl	801d940 <__mcmp>
 801caa4:	2800      	cmp	r0, #0
 801caa6:	dc03      	bgt.n	801cab0 <_dtoa_r+0x968>
 801caa8:	d1e0      	bne.n	801ca6c <_dtoa_r+0x924>
 801caaa:	f018 0f01 	tst.w	r8, #1
 801caae:	d0dd      	beq.n	801ca6c <_dtoa_r+0x924>
 801cab0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801cab4:	d1d8      	bne.n	801ca68 <_dtoa_r+0x920>
 801cab6:	2339      	movs	r3, #57	; 0x39
 801cab8:	f10a 0601 	add.w	r6, sl, #1
 801cabc:	f88a 3000 	strb.w	r3, [sl]
 801cac0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801cac4:	2b39      	cmp	r3, #57	; 0x39
 801cac6:	f106 32ff 	add.w	r2, r6, #4294967295
 801caca:	d04c      	beq.n	801cb66 <_dtoa_r+0xa1e>
 801cacc:	3301      	adds	r3, #1
 801cace:	e051      	b.n	801cb74 <_dtoa_r+0xa2c>
 801cad0:	2b00      	cmp	r3, #0
 801cad2:	f10a 0601 	add.w	r6, sl, #1
 801cad6:	dd05      	ble.n	801cae4 <_dtoa_r+0x99c>
 801cad8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801cadc:	d0eb      	beq.n	801cab6 <_dtoa_r+0x96e>
 801cade:	f108 0801 	add.w	r8, r8, #1
 801cae2:	e7c5      	b.n	801ca70 <_dtoa_r+0x928>
 801cae4:	9b04      	ldr	r3, [sp, #16]
 801cae6:	9a06      	ldr	r2, [sp, #24]
 801cae8:	f806 8c01 	strb.w	r8, [r6, #-1]
 801caec:	1af3      	subs	r3, r6, r3
 801caee:	4293      	cmp	r3, r2
 801caf0:	d021      	beq.n	801cb36 <_dtoa_r+0x9ee>
 801caf2:	2300      	movs	r3, #0
 801caf4:	220a      	movs	r2, #10
 801caf6:	9901      	ldr	r1, [sp, #4]
 801caf8:	4620      	mov	r0, r4
 801cafa:	f000 fd18 	bl	801d52e <__multadd>
 801cafe:	45b9      	cmp	r9, r7
 801cb00:	9001      	str	r0, [sp, #4]
 801cb02:	f04f 0300 	mov.w	r3, #0
 801cb06:	f04f 020a 	mov.w	r2, #10
 801cb0a:	4649      	mov	r1, r9
 801cb0c:	4620      	mov	r0, r4
 801cb0e:	d105      	bne.n	801cb1c <_dtoa_r+0x9d4>
 801cb10:	f000 fd0d 	bl	801d52e <__multadd>
 801cb14:	4681      	mov	r9, r0
 801cb16:	4607      	mov	r7, r0
 801cb18:	46b2      	mov	sl, r6
 801cb1a:	e779      	b.n	801ca10 <_dtoa_r+0x8c8>
 801cb1c:	f000 fd07 	bl	801d52e <__multadd>
 801cb20:	4639      	mov	r1, r7
 801cb22:	4681      	mov	r9, r0
 801cb24:	2300      	movs	r3, #0
 801cb26:	220a      	movs	r2, #10
 801cb28:	4620      	mov	r0, r4
 801cb2a:	f000 fd00 	bl	801d52e <__multadd>
 801cb2e:	4607      	mov	r7, r0
 801cb30:	e7f2      	b.n	801cb18 <_dtoa_r+0x9d0>
 801cb32:	f04f 0900 	mov.w	r9, #0
 801cb36:	2201      	movs	r2, #1
 801cb38:	9901      	ldr	r1, [sp, #4]
 801cb3a:	4620      	mov	r0, r4
 801cb3c:	f000 feac 	bl	801d898 <__lshift>
 801cb40:	4629      	mov	r1, r5
 801cb42:	9001      	str	r0, [sp, #4]
 801cb44:	f000 fefc 	bl	801d940 <__mcmp>
 801cb48:	2800      	cmp	r0, #0
 801cb4a:	dcb9      	bgt.n	801cac0 <_dtoa_r+0x978>
 801cb4c:	d102      	bne.n	801cb54 <_dtoa_r+0xa0c>
 801cb4e:	f018 0f01 	tst.w	r8, #1
 801cb52:	d1b5      	bne.n	801cac0 <_dtoa_r+0x978>
 801cb54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801cb58:	2b30      	cmp	r3, #48	; 0x30
 801cb5a:	f106 32ff 	add.w	r2, r6, #4294967295
 801cb5e:	f47f af11 	bne.w	801c984 <_dtoa_r+0x83c>
 801cb62:	4616      	mov	r6, r2
 801cb64:	e7f6      	b.n	801cb54 <_dtoa_r+0xa0c>
 801cb66:	9b04      	ldr	r3, [sp, #16]
 801cb68:	4293      	cmp	r3, r2
 801cb6a:	d105      	bne.n	801cb78 <_dtoa_r+0xa30>
 801cb6c:	9a04      	ldr	r2, [sp, #16]
 801cb6e:	f10b 0b01 	add.w	fp, fp, #1
 801cb72:	2331      	movs	r3, #49	; 0x31
 801cb74:	7013      	strb	r3, [r2, #0]
 801cb76:	e705      	b.n	801c984 <_dtoa_r+0x83c>
 801cb78:	4616      	mov	r6, r2
 801cb7a:	e7a1      	b.n	801cac0 <_dtoa_r+0x978>
 801cb7c:	4b16      	ldr	r3, [pc, #88]	; (801cbd8 <_dtoa_r+0xa90>)
 801cb7e:	f7ff bb48 	b.w	801c212 <_dtoa_r+0xca>
 801cb82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801cb84:	2b00      	cmp	r3, #0
 801cb86:	f47f ab23 	bne.w	801c1d0 <_dtoa_r+0x88>
 801cb8a:	4b14      	ldr	r3, [pc, #80]	; (801cbdc <_dtoa_r+0xa94>)
 801cb8c:	f7ff bb41 	b.w	801c212 <_dtoa_r+0xca>
 801cb90:	9b08      	ldr	r3, [sp, #32]
 801cb92:	2b01      	cmp	r3, #1
 801cb94:	f77f ae3b 	ble.w	801c80e <_dtoa_r+0x6c6>
 801cb98:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801cb9c:	e64f      	b.n	801c83e <_dtoa_r+0x6f6>
 801cb9e:	9b06      	ldr	r3, [sp, #24]
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	dc03      	bgt.n	801cbac <_dtoa_r+0xa64>
 801cba4:	9b08      	ldr	r3, [sp, #32]
 801cba6:	2b02      	cmp	r3, #2
 801cba8:	f73f aed7 	bgt.w	801c95a <_dtoa_r+0x812>
 801cbac:	9e04      	ldr	r6, [sp, #16]
 801cbae:	9801      	ldr	r0, [sp, #4]
 801cbb0:	4629      	mov	r1, r5
 801cbb2:	f7ff fa3b 	bl	801c02c <quorem>
 801cbb6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801cbba:	f806 8b01 	strb.w	r8, [r6], #1
 801cbbe:	9b04      	ldr	r3, [sp, #16]
 801cbc0:	9a06      	ldr	r2, [sp, #24]
 801cbc2:	1af3      	subs	r3, r6, r3
 801cbc4:	429a      	cmp	r2, r3
 801cbc6:	ddb4      	ble.n	801cb32 <_dtoa_r+0x9ea>
 801cbc8:	2300      	movs	r3, #0
 801cbca:	220a      	movs	r2, #10
 801cbcc:	9901      	ldr	r1, [sp, #4]
 801cbce:	4620      	mov	r0, r4
 801cbd0:	f000 fcad 	bl	801d52e <__multadd>
 801cbd4:	9001      	str	r0, [sp, #4]
 801cbd6:	e7ea      	b.n	801cbae <_dtoa_r+0xa66>
 801cbd8:	08024796 	.word	0x08024796
 801cbdc:	08024911 	.word	0x08024911

0801cbe0 <__sflush_r>:
 801cbe0:	898a      	ldrh	r2, [r1, #12]
 801cbe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cbe6:	4605      	mov	r5, r0
 801cbe8:	0710      	lsls	r0, r2, #28
 801cbea:	460c      	mov	r4, r1
 801cbec:	d458      	bmi.n	801cca0 <__sflush_r+0xc0>
 801cbee:	684b      	ldr	r3, [r1, #4]
 801cbf0:	2b00      	cmp	r3, #0
 801cbf2:	dc05      	bgt.n	801cc00 <__sflush_r+0x20>
 801cbf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801cbf6:	2b00      	cmp	r3, #0
 801cbf8:	dc02      	bgt.n	801cc00 <__sflush_r+0x20>
 801cbfa:	2000      	movs	r0, #0
 801cbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cc02:	2e00      	cmp	r6, #0
 801cc04:	d0f9      	beq.n	801cbfa <__sflush_r+0x1a>
 801cc06:	2300      	movs	r3, #0
 801cc08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801cc0c:	682f      	ldr	r7, [r5, #0]
 801cc0e:	6a21      	ldr	r1, [r4, #32]
 801cc10:	602b      	str	r3, [r5, #0]
 801cc12:	d032      	beq.n	801cc7a <__sflush_r+0x9a>
 801cc14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801cc16:	89a3      	ldrh	r3, [r4, #12]
 801cc18:	075a      	lsls	r2, r3, #29
 801cc1a:	d505      	bpl.n	801cc28 <__sflush_r+0x48>
 801cc1c:	6863      	ldr	r3, [r4, #4]
 801cc1e:	1ac0      	subs	r0, r0, r3
 801cc20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801cc22:	b10b      	cbz	r3, 801cc28 <__sflush_r+0x48>
 801cc24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cc26:	1ac0      	subs	r0, r0, r3
 801cc28:	2300      	movs	r3, #0
 801cc2a:	4602      	mov	r2, r0
 801cc2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cc2e:	6a21      	ldr	r1, [r4, #32]
 801cc30:	4628      	mov	r0, r5
 801cc32:	47b0      	blx	r6
 801cc34:	1c43      	adds	r3, r0, #1
 801cc36:	89a3      	ldrh	r3, [r4, #12]
 801cc38:	d106      	bne.n	801cc48 <__sflush_r+0x68>
 801cc3a:	6829      	ldr	r1, [r5, #0]
 801cc3c:	291d      	cmp	r1, #29
 801cc3e:	d848      	bhi.n	801ccd2 <__sflush_r+0xf2>
 801cc40:	4a29      	ldr	r2, [pc, #164]	; (801cce8 <__sflush_r+0x108>)
 801cc42:	40ca      	lsrs	r2, r1
 801cc44:	07d6      	lsls	r6, r2, #31
 801cc46:	d544      	bpl.n	801ccd2 <__sflush_r+0xf2>
 801cc48:	2200      	movs	r2, #0
 801cc4a:	6062      	str	r2, [r4, #4]
 801cc4c:	04d9      	lsls	r1, r3, #19
 801cc4e:	6922      	ldr	r2, [r4, #16]
 801cc50:	6022      	str	r2, [r4, #0]
 801cc52:	d504      	bpl.n	801cc5e <__sflush_r+0x7e>
 801cc54:	1c42      	adds	r2, r0, #1
 801cc56:	d101      	bne.n	801cc5c <__sflush_r+0x7c>
 801cc58:	682b      	ldr	r3, [r5, #0]
 801cc5a:	b903      	cbnz	r3, 801cc5e <__sflush_r+0x7e>
 801cc5c:	6560      	str	r0, [r4, #84]	; 0x54
 801cc5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cc60:	602f      	str	r7, [r5, #0]
 801cc62:	2900      	cmp	r1, #0
 801cc64:	d0c9      	beq.n	801cbfa <__sflush_r+0x1a>
 801cc66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cc6a:	4299      	cmp	r1, r3
 801cc6c:	d002      	beq.n	801cc74 <__sflush_r+0x94>
 801cc6e:	4628      	mov	r0, r5
 801cc70:	f7fd f9fe 	bl	801a070 <_free_r>
 801cc74:	2000      	movs	r0, #0
 801cc76:	6360      	str	r0, [r4, #52]	; 0x34
 801cc78:	e7c0      	b.n	801cbfc <__sflush_r+0x1c>
 801cc7a:	2301      	movs	r3, #1
 801cc7c:	4628      	mov	r0, r5
 801cc7e:	47b0      	blx	r6
 801cc80:	1c41      	adds	r1, r0, #1
 801cc82:	d1c8      	bne.n	801cc16 <__sflush_r+0x36>
 801cc84:	682b      	ldr	r3, [r5, #0]
 801cc86:	2b00      	cmp	r3, #0
 801cc88:	d0c5      	beq.n	801cc16 <__sflush_r+0x36>
 801cc8a:	2b1d      	cmp	r3, #29
 801cc8c:	d001      	beq.n	801cc92 <__sflush_r+0xb2>
 801cc8e:	2b16      	cmp	r3, #22
 801cc90:	d101      	bne.n	801cc96 <__sflush_r+0xb6>
 801cc92:	602f      	str	r7, [r5, #0]
 801cc94:	e7b1      	b.n	801cbfa <__sflush_r+0x1a>
 801cc96:	89a3      	ldrh	r3, [r4, #12]
 801cc98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cc9c:	81a3      	strh	r3, [r4, #12]
 801cc9e:	e7ad      	b.n	801cbfc <__sflush_r+0x1c>
 801cca0:	690f      	ldr	r7, [r1, #16]
 801cca2:	2f00      	cmp	r7, #0
 801cca4:	d0a9      	beq.n	801cbfa <__sflush_r+0x1a>
 801cca6:	0793      	lsls	r3, r2, #30
 801cca8:	680e      	ldr	r6, [r1, #0]
 801ccaa:	bf08      	it	eq
 801ccac:	694b      	ldreq	r3, [r1, #20]
 801ccae:	600f      	str	r7, [r1, #0]
 801ccb0:	bf18      	it	ne
 801ccb2:	2300      	movne	r3, #0
 801ccb4:	eba6 0807 	sub.w	r8, r6, r7
 801ccb8:	608b      	str	r3, [r1, #8]
 801ccba:	f1b8 0f00 	cmp.w	r8, #0
 801ccbe:	dd9c      	ble.n	801cbfa <__sflush_r+0x1a>
 801ccc0:	4643      	mov	r3, r8
 801ccc2:	463a      	mov	r2, r7
 801ccc4:	6a21      	ldr	r1, [r4, #32]
 801ccc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ccc8:	4628      	mov	r0, r5
 801ccca:	47b0      	blx	r6
 801cccc:	2800      	cmp	r0, #0
 801ccce:	dc06      	bgt.n	801ccde <__sflush_r+0xfe>
 801ccd0:	89a3      	ldrh	r3, [r4, #12]
 801ccd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ccd6:	81a3      	strh	r3, [r4, #12]
 801ccd8:	f04f 30ff 	mov.w	r0, #4294967295
 801ccdc:	e78e      	b.n	801cbfc <__sflush_r+0x1c>
 801ccde:	4407      	add	r7, r0
 801cce0:	eba8 0800 	sub.w	r8, r8, r0
 801cce4:	e7e9      	b.n	801ccba <__sflush_r+0xda>
 801cce6:	bf00      	nop
 801cce8:	20400001 	.word	0x20400001

0801ccec <_fflush_r>:
 801ccec:	b538      	push	{r3, r4, r5, lr}
 801ccee:	690b      	ldr	r3, [r1, #16]
 801ccf0:	4605      	mov	r5, r0
 801ccf2:	460c      	mov	r4, r1
 801ccf4:	b1db      	cbz	r3, 801cd2e <_fflush_r+0x42>
 801ccf6:	b118      	cbz	r0, 801cd00 <_fflush_r+0x14>
 801ccf8:	6983      	ldr	r3, [r0, #24]
 801ccfa:	b90b      	cbnz	r3, 801cd00 <_fflush_r+0x14>
 801ccfc:	f7fd f8a8 	bl	8019e50 <__sinit>
 801cd00:	4b0c      	ldr	r3, [pc, #48]	; (801cd34 <_fflush_r+0x48>)
 801cd02:	429c      	cmp	r4, r3
 801cd04:	d109      	bne.n	801cd1a <_fflush_r+0x2e>
 801cd06:	686c      	ldr	r4, [r5, #4]
 801cd08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cd0c:	b17b      	cbz	r3, 801cd2e <_fflush_r+0x42>
 801cd0e:	4621      	mov	r1, r4
 801cd10:	4628      	mov	r0, r5
 801cd12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cd16:	f7ff bf63 	b.w	801cbe0 <__sflush_r>
 801cd1a:	4b07      	ldr	r3, [pc, #28]	; (801cd38 <_fflush_r+0x4c>)
 801cd1c:	429c      	cmp	r4, r3
 801cd1e:	d101      	bne.n	801cd24 <_fflush_r+0x38>
 801cd20:	68ac      	ldr	r4, [r5, #8]
 801cd22:	e7f1      	b.n	801cd08 <_fflush_r+0x1c>
 801cd24:	4b05      	ldr	r3, [pc, #20]	; (801cd3c <_fflush_r+0x50>)
 801cd26:	429c      	cmp	r4, r3
 801cd28:	bf08      	it	eq
 801cd2a:	68ec      	ldreq	r4, [r5, #12]
 801cd2c:	e7ec      	b.n	801cd08 <_fflush_r+0x1c>
 801cd2e:	2000      	movs	r0, #0
 801cd30:	bd38      	pop	{r3, r4, r5, pc}
 801cd32:	bf00      	nop
 801cd34:	08024738 	.word	0x08024738
 801cd38:	08024758 	.word	0x08024758
 801cd3c:	08024718 	.word	0x08024718

0801cd40 <rshift>:
 801cd40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd42:	6906      	ldr	r6, [r0, #16]
 801cd44:	114b      	asrs	r3, r1, #5
 801cd46:	429e      	cmp	r6, r3
 801cd48:	f100 0414 	add.w	r4, r0, #20
 801cd4c:	dd30      	ble.n	801cdb0 <rshift+0x70>
 801cd4e:	f011 011f 	ands.w	r1, r1, #31
 801cd52:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801cd56:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801cd5a:	d108      	bne.n	801cd6e <rshift+0x2e>
 801cd5c:	4621      	mov	r1, r4
 801cd5e:	42b2      	cmp	r2, r6
 801cd60:	460b      	mov	r3, r1
 801cd62:	d211      	bcs.n	801cd88 <rshift+0x48>
 801cd64:	f852 3b04 	ldr.w	r3, [r2], #4
 801cd68:	f841 3b04 	str.w	r3, [r1], #4
 801cd6c:	e7f7      	b.n	801cd5e <rshift+0x1e>
 801cd6e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801cd72:	f1c1 0c20 	rsb	ip, r1, #32
 801cd76:	40cd      	lsrs	r5, r1
 801cd78:	3204      	adds	r2, #4
 801cd7a:	4623      	mov	r3, r4
 801cd7c:	42b2      	cmp	r2, r6
 801cd7e:	4617      	mov	r7, r2
 801cd80:	d30c      	bcc.n	801cd9c <rshift+0x5c>
 801cd82:	601d      	str	r5, [r3, #0]
 801cd84:	b105      	cbz	r5, 801cd88 <rshift+0x48>
 801cd86:	3304      	adds	r3, #4
 801cd88:	1b1a      	subs	r2, r3, r4
 801cd8a:	42a3      	cmp	r3, r4
 801cd8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801cd90:	bf08      	it	eq
 801cd92:	2300      	moveq	r3, #0
 801cd94:	6102      	str	r2, [r0, #16]
 801cd96:	bf08      	it	eq
 801cd98:	6143      	streq	r3, [r0, #20]
 801cd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cd9c:	683f      	ldr	r7, [r7, #0]
 801cd9e:	fa07 f70c 	lsl.w	r7, r7, ip
 801cda2:	433d      	orrs	r5, r7
 801cda4:	f843 5b04 	str.w	r5, [r3], #4
 801cda8:	f852 5b04 	ldr.w	r5, [r2], #4
 801cdac:	40cd      	lsrs	r5, r1
 801cdae:	e7e5      	b.n	801cd7c <rshift+0x3c>
 801cdb0:	4623      	mov	r3, r4
 801cdb2:	e7e9      	b.n	801cd88 <rshift+0x48>

0801cdb4 <__hexdig_fun>:
 801cdb4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801cdb8:	2b09      	cmp	r3, #9
 801cdba:	d802      	bhi.n	801cdc2 <__hexdig_fun+0xe>
 801cdbc:	3820      	subs	r0, #32
 801cdbe:	b2c0      	uxtb	r0, r0
 801cdc0:	4770      	bx	lr
 801cdc2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801cdc6:	2b05      	cmp	r3, #5
 801cdc8:	d801      	bhi.n	801cdce <__hexdig_fun+0x1a>
 801cdca:	3847      	subs	r0, #71	; 0x47
 801cdcc:	e7f7      	b.n	801cdbe <__hexdig_fun+0xa>
 801cdce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801cdd2:	2b05      	cmp	r3, #5
 801cdd4:	d801      	bhi.n	801cdda <__hexdig_fun+0x26>
 801cdd6:	3827      	subs	r0, #39	; 0x27
 801cdd8:	e7f1      	b.n	801cdbe <__hexdig_fun+0xa>
 801cdda:	2000      	movs	r0, #0
 801cddc:	4770      	bx	lr

0801cdde <__gethex>:
 801cdde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cde2:	b08b      	sub	sp, #44	; 0x2c
 801cde4:	468a      	mov	sl, r1
 801cde6:	9002      	str	r0, [sp, #8]
 801cde8:	9816      	ldr	r0, [sp, #88]	; 0x58
 801cdea:	9306      	str	r3, [sp, #24]
 801cdec:	4690      	mov	r8, r2
 801cdee:	f000 facd 	bl	801d38c <__localeconv_l>
 801cdf2:	6803      	ldr	r3, [r0, #0]
 801cdf4:	9303      	str	r3, [sp, #12]
 801cdf6:	4618      	mov	r0, r3
 801cdf8:	f7e3 fa22 	bl	8000240 <strlen>
 801cdfc:	9b03      	ldr	r3, [sp, #12]
 801cdfe:	9001      	str	r0, [sp, #4]
 801ce00:	4403      	add	r3, r0
 801ce02:	f04f 0b00 	mov.w	fp, #0
 801ce06:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801ce0a:	9307      	str	r3, [sp, #28]
 801ce0c:	f8da 3000 	ldr.w	r3, [sl]
 801ce10:	3302      	adds	r3, #2
 801ce12:	461f      	mov	r7, r3
 801ce14:	f813 0b01 	ldrb.w	r0, [r3], #1
 801ce18:	2830      	cmp	r0, #48	; 0x30
 801ce1a:	d06c      	beq.n	801cef6 <__gethex+0x118>
 801ce1c:	f7ff ffca 	bl	801cdb4 <__hexdig_fun>
 801ce20:	4604      	mov	r4, r0
 801ce22:	2800      	cmp	r0, #0
 801ce24:	d16a      	bne.n	801cefc <__gethex+0x11e>
 801ce26:	9a01      	ldr	r2, [sp, #4]
 801ce28:	9903      	ldr	r1, [sp, #12]
 801ce2a:	4638      	mov	r0, r7
 801ce2c:	f7fe f95f 	bl	801b0ee <strncmp>
 801ce30:	2800      	cmp	r0, #0
 801ce32:	d166      	bne.n	801cf02 <__gethex+0x124>
 801ce34:	9b01      	ldr	r3, [sp, #4]
 801ce36:	5cf8      	ldrb	r0, [r7, r3]
 801ce38:	18fe      	adds	r6, r7, r3
 801ce3a:	f7ff ffbb 	bl	801cdb4 <__hexdig_fun>
 801ce3e:	2800      	cmp	r0, #0
 801ce40:	d062      	beq.n	801cf08 <__gethex+0x12a>
 801ce42:	4633      	mov	r3, r6
 801ce44:	7818      	ldrb	r0, [r3, #0]
 801ce46:	2830      	cmp	r0, #48	; 0x30
 801ce48:	461f      	mov	r7, r3
 801ce4a:	f103 0301 	add.w	r3, r3, #1
 801ce4e:	d0f9      	beq.n	801ce44 <__gethex+0x66>
 801ce50:	f7ff ffb0 	bl	801cdb4 <__hexdig_fun>
 801ce54:	fab0 f580 	clz	r5, r0
 801ce58:	096d      	lsrs	r5, r5, #5
 801ce5a:	4634      	mov	r4, r6
 801ce5c:	f04f 0b01 	mov.w	fp, #1
 801ce60:	463a      	mov	r2, r7
 801ce62:	4616      	mov	r6, r2
 801ce64:	3201      	adds	r2, #1
 801ce66:	7830      	ldrb	r0, [r6, #0]
 801ce68:	f7ff ffa4 	bl	801cdb4 <__hexdig_fun>
 801ce6c:	2800      	cmp	r0, #0
 801ce6e:	d1f8      	bne.n	801ce62 <__gethex+0x84>
 801ce70:	9a01      	ldr	r2, [sp, #4]
 801ce72:	9903      	ldr	r1, [sp, #12]
 801ce74:	4630      	mov	r0, r6
 801ce76:	f7fe f93a 	bl	801b0ee <strncmp>
 801ce7a:	b950      	cbnz	r0, 801ce92 <__gethex+0xb4>
 801ce7c:	b954      	cbnz	r4, 801ce94 <__gethex+0xb6>
 801ce7e:	9b01      	ldr	r3, [sp, #4]
 801ce80:	18f4      	adds	r4, r6, r3
 801ce82:	4622      	mov	r2, r4
 801ce84:	4616      	mov	r6, r2
 801ce86:	3201      	adds	r2, #1
 801ce88:	7830      	ldrb	r0, [r6, #0]
 801ce8a:	f7ff ff93 	bl	801cdb4 <__hexdig_fun>
 801ce8e:	2800      	cmp	r0, #0
 801ce90:	d1f8      	bne.n	801ce84 <__gethex+0xa6>
 801ce92:	b10c      	cbz	r4, 801ce98 <__gethex+0xba>
 801ce94:	1ba4      	subs	r4, r4, r6
 801ce96:	00a4      	lsls	r4, r4, #2
 801ce98:	7833      	ldrb	r3, [r6, #0]
 801ce9a:	2b50      	cmp	r3, #80	; 0x50
 801ce9c:	d001      	beq.n	801cea2 <__gethex+0xc4>
 801ce9e:	2b70      	cmp	r3, #112	; 0x70
 801cea0:	d140      	bne.n	801cf24 <__gethex+0x146>
 801cea2:	7873      	ldrb	r3, [r6, #1]
 801cea4:	2b2b      	cmp	r3, #43	; 0x2b
 801cea6:	d031      	beq.n	801cf0c <__gethex+0x12e>
 801cea8:	2b2d      	cmp	r3, #45	; 0x2d
 801ceaa:	d033      	beq.n	801cf14 <__gethex+0x136>
 801ceac:	1c71      	adds	r1, r6, #1
 801ceae:	f04f 0900 	mov.w	r9, #0
 801ceb2:	7808      	ldrb	r0, [r1, #0]
 801ceb4:	f7ff ff7e 	bl	801cdb4 <__hexdig_fun>
 801ceb8:	1e43      	subs	r3, r0, #1
 801ceba:	b2db      	uxtb	r3, r3
 801cebc:	2b18      	cmp	r3, #24
 801cebe:	d831      	bhi.n	801cf24 <__gethex+0x146>
 801cec0:	f1a0 0210 	sub.w	r2, r0, #16
 801cec4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801cec8:	f7ff ff74 	bl	801cdb4 <__hexdig_fun>
 801cecc:	1e43      	subs	r3, r0, #1
 801cece:	b2db      	uxtb	r3, r3
 801ced0:	2b18      	cmp	r3, #24
 801ced2:	d922      	bls.n	801cf1a <__gethex+0x13c>
 801ced4:	f1b9 0f00 	cmp.w	r9, #0
 801ced8:	d000      	beq.n	801cedc <__gethex+0xfe>
 801ceda:	4252      	negs	r2, r2
 801cedc:	4414      	add	r4, r2
 801cede:	f8ca 1000 	str.w	r1, [sl]
 801cee2:	b30d      	cbz	r5, 801cf28 <__gethex+0x14a>
 801cee4:	f1bb 0f00 	cmp.w	fp, #0
 801cee8:	bf0c      	ite	eq
 801ceea:	2706      	moveq	r7, #6
 801ceec:	2700      	movne	r7, #0
 801ceee:	4638      	mov	r0, r7
 801cef0:	b00b      	add	sp, #44	; 0x2c
 801cef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cef6:	f10b 0b01 	add.w	fp, fp, #1
 801cefa:	e78a      	b.n	801ce12 <__gethex+0x34>
 801cefc:	2500      	movs	r5, #0
 801cefe:	462c      	mov	r4, r5
 801cf00:	e7ae      	b.n	801ce60 <__gethex+0x82>
 801cf02:	463e      	mov	r6, r7
 801cf04:	2501      	movs	r5, #1
 801cf06:	e7c7      	b.n	801ce98 <__gethex+0xba>
 801cf08:	4604      	mov	r4, r0
 801cf0a:	e7fb      	b.n	801cf04 <__gethex+0x126>
 801cf0c:	f04f 0900 	mov.w	r9, #0
 801cf10:	1cb1      	adds	r1, r6, #2
 801cf12:	e7ce      	b.n	801ceb2 <__gethex+0xd4>
 801cf14:	f04f 0901 	mov.w	r9, #1
 801cf18:	e7fa      	b.n	801cf10 <__gethex+0x132>
 801cf1a:	230a      	movs	r3, #10
 801cf1c:	fb03 0202 	mla	r2, r3, r2, r0
 801cf20:	3a10      	subs	r2, #16
 801cf22:	e7cf      	b.n	801cec4 <__gethex+0xe6>
 801cf24:	4631      	mov	r1, r6
 801cf26:	e7da      	b.n	801cede <__gethex+0x100>
 801cf28:	1bf3      	subs	r3, r6, r7
 801cf2a:	3b01      	subs	r3, #1
 801cf2c:	4629      	mov	r1, r5
 801cf2e:	2b07      	cmp	r3, #7
 801cf30:	dc49      	bgt.n	801cfc6 <__gethex+0x1e8>
 801cf32:	9802      	ldr	r0, [sp, #8]
 801cf34:	f000 fab0 	bl	801d498 <_Balloc>
 801cf38:	9b01      	ldr	r3, [sp, #4]
 801cf3a:	f100 0914 	add.w	r9, r0, #20
 801cf3e:	f04f 0b00 	mov.w	fp, #0
 801cf42:	f1c3 0301 	rsb	r3, r3, #1
 801cf46:	4605      	mov	r5, r0
 801cf48:	f8cd 9010 	str.w	r9, [sp, #16]
 801cf4c:	46da      	mov	sl, fp
 801cf4e:	9308      	str	r3, [sp, #32]
 801cf50:	42b7      	cmp	r7, r6
 801cf52:	d33b      	bcc.n	801cfcc <__gethex+0x1ee>
 801cf54:	9804      	ldr	r0, [sp, #16]
 801cf56:	f840 ab04 	str.w	sl, [r0], #4
 801cf5a:	eba0 0009 	sub.w	r0, r0, r9
 801cf5e:	1080      	asrs	r0, r0, #2
 801cf60:	6128      	str	r0, [r5, #16]
 801cf62:	0147      	lsls	r7, r0, #5
 801cf64:	4650      	mov	r0, sl
 801cf66:	f000 fb5b 	bl	801d620 <__hi0bits>
 801cf6a:	f8d8 6000 	ldr.w	r6, [r8]
 801cf6e:	1a3f      	subs	r7, r7, r0
 801cf70:	42b7      	cmp	r7, r6
 801cf72:	dd64      	ble.n	801d03e <__gethex+0x260>
 801cf74:	1bbf      	subs	r7, r7, r6
 801cf76:	4639      	mov	r1, r7
 801cf78:	4628      	mov	r0, r5
 801cf7a:	f000 fe6c 	bl	801dc56 <__any_on>
 801cf7e:	4682      	mov	sl, r0
 801cf80:	b178      	cbz	r0, 801cfa2 <__gethex+0x1c4>
 801cf82:	1e7b      	subs	r3, r7, #1
 801cf84:	1159      	asrs	r1, r3, #5
 801cf86:	f003 021f 	and.w	r2, r3, #31
 801cf8a:	f04f 0a01 	mov.w	sl, #1
 801cf8e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801cf92:	fa0a f202 	lsl.w	r2, sl, r2
 801cf96:	420a      	tst	r2, r1
 801cf98:	d003      	beq.n	801cfa2 <__gethex+0x1c4>
 801cf9a:	4553      	cmp	r3, sl
 801cf9c:	dc46      	bgt.n	801d02c <__gethex+0x24e>
 801cf9e:	f04f 0a02 	mov.w	sl, #2
 801cfa2:	4639      	mov	r1, r7
 801cfa4:	4628      	mov	r0, r5
 801cfa6:	f7ff fecb 	bl	801cd40 <rshift>
 801cfaa:	443c      	add	r4, r7
 801cfac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801cfb0:	42a3      	cmp	r3, r4
 801cfb2:	da52      	bge.n	801d05a <__gethex+0x27c>
 801cfb4:	4629      	mov	r1, r5
 801cfb6:	9802      	ldr	r0, [sp, #8]
 801cfb8:	f000 faa2 	bl	801d500 <_Bfree>
 801cfbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cfbe:	2300      	movs	r3, #0
 801cfc0:	6013      	str	r3, [r2, #0]
 801cfc2:	27a3      	movs	r7, #163	; 0xa3
 801cfc4:	e793      	b.n	801ceee <__gethex+0x110>
 801cfc6:	3101      	adds	r1, #1
 801cfc8:	105b      	asrs	r3, r3, #1
 801cfca:	e7b0      	b.n	801cf2e <__gethex+0x150>
 801cfcc:	1e73      	subs	r3, r6, #1
 801cfce:	9305      	str	r3, [sp, #20]
 801cfd0:	9a07      	ldr	r2, [sp, #28]
 801cfd2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801cfd6:	4293      	cmp	r3, r2
 801cfd8:	d018      	beq.n	801d00c <__gethex+0x22e>
 801cfda:	f1bb 0f20 	cmp.w	fp, #32
 801cfde:	d107      	bne.n	801cff0 <__gethex+0x212>
 801cfe0:	9b04      	ldr	r3, [sp, #16]
 801cfe2:	f8c3 a000 	str.w	sl, [r3]
 801cfe6:	3304      	adds	r3, #4
 801cfe8:	f04f 0a00 	mov.w	sl, #0
 801cfec:	9304      	str	r3, [sp, #16]
 801cfee:	46d3      	mov	fp, sl
 801cff0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801cff4:	f7ff fede 	bl	801cdb4 <__hexdig_fun>
 801cff8:	f000 000f 	and.w	r0, r0, #15
 801cffc:	fa00 f00b 	lsl.w	r0, r0, fp
 801d000:	ea4a 0a00 	orr.w	sl, sl, r0
 801d004:	f10b 0b04 	add.w	fp, fp, #4
 801d008:	9b05      	ldr	r3, [sp, #20]
 801d00a:	e00d      	b.n	801d028 <__gethex+0x24a>
 801d00c:	9b05      	ldr	r3, [sp, #20]
 801d00e:	9a08      	ldr	r2, [sp, #32]
 801d010:	4413      	add	r3, r2
 801d012:	42bb      	cmp	r3, r7
 801d014:	d3e1      	bcc.n	801cfda <__gethex+0x1fc>
 801d016:	4618      	mov	r0, r3
 801d018:	9a01      	ldr	r2, [sp, #4]
 801d01a:	9903      	ldr	r1, [sp, #12]
 801d01c:	9309      	str	r3, [sp, #36]	; 0x24
 801d01e:	f7fe f866 	bl	801b0ee <strncmp>
 801d022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d024:	2800      	cmp	r0, #0
 801d026:	d1d8      	bne.n	801cfda <__gethex+0x1fc>
 801d028:	461e      	mov	r6, r3
 801d02a:	e791      	b.n	801cf50 <__gethex+0x172>
 801d02c:	1eb9      	subs	r1, r7, #2
 801d02e:	4628      	mov	r0, r5
 801d030:	f000 fe11 	bl	801dc56 <__any_on>
 801d034:	2800      	cmp	r0, #0
 801d036:	d0b2      	beq.n	801cf9e <__gethex+0x1c0>
 801d038:	f04f 0a03 	mov.w	sl, #3
 801d03c:	e7b1      	b.n	801cfa2 <__gethex+0x1c4>
 801d03e:	da09      	bge.n	801d054 <__gethex+0x276>
 801d040:	1bf7      	subs	r7, r6, r7
 801d042:	4629      	mov	r1, r5
 801d044:	463a      	mov	r2, r7
 801d046:	9802      	ldr	r0, [sp, #8]
 801d048:	f000 fc26 	bl	801d898 <__lshift>
 801d04c:	1be4      	subs	r4, r4, r7
 801d04e:	4605      	mov	r5, r0
 801d050:	f100 0914 	add.w	r9, r0, #20
 801d054:	f04f 0a00 	mov.w	sl, #0
 801d058:	e7a8      	b.n	801cfac <__gethex+0x1ce>
 801d05a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801d05e:	42a0      	cmp	r0, r4
 801d060:	dd6a      	ble.n	801d138 <__gethex+0x35a>
 801d062:	1b04      	subs	r4, r0, r4
 801d064:	42a6      	cmp	r6, r4
 801d066:	dc2e      	bgt.n	801d0c6 <__gethex+0x2e8>
 801d068:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d06c:	2b02      	cmp	r3, #2
 801d06e:	d022      	beq.n	801d0b6 <__gethex+0x2d8>
 801d070:	2b03      	cmp	r3, #3
 801d072:	d024      	beq.n	801d0be <__gethex+0x2e0>
 801d074:	2b01      	cmp	r3, #1
 801d076:	d115      	bne.n	801d0a4 <__gethex+0x2c6>
 801d078:	42a6      	cmp	r6, r4
 801d07a:	d113      	bne.n	801d0a4 <__gethex+0x2c6>
 801d07c:	2e01      	cmp	r6, #1
 801d07e:	dc0b      	bgt.n	801d098 <__gethex+0x2ba>
 801d080:	9a06      	ldr	r2, [sp, #24]
 801d082:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d086:	6013      	str	r3, [r2, #0]
 801d088:	2301      	movs	r3, #1
 801d08a:	612b      	str	r3, [r5, #16]
 801d08c:	f8c9 3000 	str.w	r3, [r9]
 801d090:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d092:	2762      	movs	r7, #98	; 0x62
 801d094:	601d      	str	r5, [r3, #0]
 801d096:	e72a      	b.n	801ceee <__gethex+0x110>
 801d098:	1e71      	subs	r1, r6, #1
 801d09a:	4628      	mov	r0, r5
 801d09c:	f000 fddb 	bl	801dc56 <__any_on>
 801d0a0:	2800      	cmp	r0, #0
 801d0a2:	d1ed      	bne.n	801d080 <__gethex+0x2a2>
 801d0a4:	4629      	mov	r1, r5
 801d0a6:	9802      	ldr	r0, [sp, #8]
 801d0a8:	f000 fa2a 	bl	801d500 <_Bfree>
 801d0ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d0ae:	2300      	movs	r3, #0
 801d0b0:	6013      	str	r3, [r2, #0]
 801d0b2:	2750      	movs	r7, #80	; 0x50
 801d0b4:	e71b      	b.n	801ceee <__gethex+0x110>
 801d0b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d0b8:	2b00      	cmp	r3, #0
 801d0ba:	d0e1      	beq.n	801d080 <__gethex+0x2a2>
 801d0bc:	e7f2      	b.n	801d0a4 <__gethex+0x2c6>
 801d0be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d0c0:	2b00      	cmp	r3, #0
 801d0c2:	d1dd      	bne.n	801d080 <__gethex+0x2a2>
 801d0c4:	e7ee      	b.n	801d0a4 <__gethex+0x2c6>
 801d0c6:	1e67      	subs	r7, r4, #1
 801d0c8:	f1ba 0f00 	cmp.w	sl, #0
 801d0cc:	d131      	bne.n	801d132 <__gethex+0x354>
 801d0ce:	b127      	cbz	r7, 801d0da <__gethex+0x2fc>
 801d0d0:	4639      	mov	r1, r7
 801d0d2:	4628      	mov	r0, r5
 801d0d4:	f000 fdbf 	bl	801dc56 <__any_on>
 801d0d8:	4682      	mov	sl, r0
 801d0da:	117a      	asrs	r2, r7, #5
 801d0dc:	2301      	movs	r3, #1
 801d0de:	f007 071f 	and.w	r7, r7, #31
 801d0e2:	fa03 f707 	lsl.w	r7, r3, r7
 801d0e6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801d0ea:	4621      	mov	r1, r4
 801d0ec:	421f      	tst	r7, r3
 801d0ee:	4628      	mov	r0, r5
 801d0f0:	bf18      	it	ne
 801d0f2:	f04a 0a02 	orrne.w	sl, sl, #2
 801d0f6:	1b36      	subs	r6, r6, r4
 801d0f8:	f7ff fe22 	bl	801cd40 <rshift>
 801d0fc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801d100:	2702      	movs	r7, #2
 801d102:	f1ba 0f00 	cmp.w	sl, #0
 801d106:	d048      	beq.n	801d19a <__gethex+0x3bc>
 801d108:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d10c:	2b02      	cmp	r3, #2
 801d10e:	d015      	beq.n	801d13c <__gethex+0x35e>
 801d110:	2b03      	cmp	r3, #3
 801d112:	d017      	beq.n	801d144 <__gethex+0x366>
 801d114:	2b01      	cmp	r3, #1
 801d116:	d109      	bne.n	801d12c <__gethex+0x34e>
 801d118:	f01a 0f02 	tst.w	sl, #2
 801d11c:	d006      	beq.n	801d12c <__gethex+0x34e>
 801d11e:	f8d9 3000 	ldr.w	r3, [r9]
 801d122:	ea4a 0a03 	orr.w	sl, sl, r3
 801d126:	f01a 0f01 	tst.w	sl, #1
 801d12a:	d10e      	bne.n	801d14a <__gethex+0x36c>
 801d12c:	f047 0710 	orr.w	r7, r7, #16
 801d130:	e033      	b.n	801d19a <__gethex+0x3bc>
 801d132:	f04f 0a01 	mov.w	sl, #1
 801d136:	e7d0      	b.n	801d0da <__gethex+0x2fc>
 801d138:	2701      	movs	r7, #1
 801d13a:	e7e2      	b.n	801d102 <__gethex+0x324>
 801d13c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d13e:	f1c3 0301 	rsb	r3, r3, #1
 801d142:	9315      	str	r3, [sp, #84]	; 0x54
 801d144:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d146:	2b00      	cmp	r3, #0
 801d148:	d0f0      	beq.n	801d12c <__gethex+0x34e>
 801d14a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801d14e:	f105 0314 	add.w	r3, r5, #20
 801d152:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801d156:	eb03 010a 	add.w	r1, r3, sl
 801d15a:	f04f 0c00 	mov.w	ip, #0
 801d15e:	4618      	mov	r0, r3
 801d160:	f853 2b04 	ldr.w	r2, [r3], #4
 801d164:	f1b2 3fff 	cmp.w	r2, #4294967295
 801d168:	d01c      	beq.n	801d1a4 <__gethex+0x3c6>
 801d16a:	3201      	adds	r2, #1
 801d16c:	6002      	str	r2, [r0, #0]
 801d16e:	2f02      	cmp	r7, #2
 801d170:	f105 0314 	add.w	r3, r5, #20
 801d174:	d138      	bne.n	801d1e8 <__gethex+0x40a>
 801d176:	f8d8 2000 	ldr.w	r2, [r8]
 801d17a:	3a01      	subs	r2, #1
 801d17c:	42b2      	cmp	r2, r6
 801d17e:	d10a      	bne.n	801d196 <__gethex+0x3b8>
 801d180:	1171      	asrs	r1, r6, #5
 801d182:	2201      	movs	r2, #1
 801d184:	f006 061f 	and.w	r6, r6, #31
 801d188:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d18c:	fa02 f606 	lsl.w	r6, r2, r6
 801d190:	421e      	tst	r6, r3
 801d192:	bf18      	it	ne
 801d194:	4617      	movne	r7, r2
 801d196:	f047 0720 	orr.w	r7, r7, #32
 801d19a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d19c:	601d      	str	r5, [r3, #0]
 801d19e:	9b06      	ldr	r3, [sp, #24]
 801d1a0:	601c      	str	r4, [r3, #0]
 801d1a2:	e6a4      	b.n	801ceee <__gethex+0x110>
 801d1a4:	4299      	cmp	r1, r3
 801d1a6:	f843 cc04 	str.w	ip, [r3, #-4]
 801d1aa:	d8d8      	bhi.n	801d15e <__gethex+0x380>
 801d1ac:	68ab      	ldr	r3, [r5, #8]
 801d1ae:	4599      	cmp	r9, r3
 801d1b0:	db12      	blt.n	801d1d8 <__gethex+0x3fa>
 801d1b2:	6869      	ldr	r1, [r5, #4]
 801d1b4:	9802      	ldr	r0, [sp, #8]
 801d1b6:	3101      	adds	r1, #1
 801d1b8:	f000 f96e 	bl	801d498 <_Balloc>
 801d1bc:	692a      	ldr	r2, [r5, #16]
 801d1be:	3202      	adds	r2, #2
 801d1c0:	f105 010c 	add.w	r1, r5, #12
 801d1c4:	4683      	mov	fp, r0
 801d1c6:	0092      	lsls	r2, r2, #2
 801d1c8:	300c      	adds	r0, #12
 801d1ca:	f7fc ff24 	bl	801a016 <memcpy>
 801d1ce:	4629      	mov	r1, r5
 801d1d0:	9802      	ldr	r0, [sp, #8]
 801d1d2:	f000 f995 	bl	801d500 <_Bfree>
 801d1d6:	465d      	mov	r5, fp
 801d1d8:	692b      	ldr	r3, [r5, #16]
 801d1da:	1c5a      	adds	r2, r3, #1
 801d1dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801d1e0:	612a      	str	r2, [r5, #16]
 801d1e2:	2201      	movs	r2, #1
 801d1e4:	615a      	str	r2, [r3, #20]
 801d1e6:	e7c2      	b.n	801d16e <__gethex+0x390>
 801d1e8:	692a      	ldr	r2, [r5, #16]
 801d1ea:	454a      	cmp	r2, r9
 801d1ec:	dd0b      	ble.n	801d206 <__gethex+0x428>
 801d1ee:	2101      	movs	r1, #1
 801d1f0:	4628      	mov	r0, r5
 801d1f2:	f7ff fda5 	bl	801cd40 <rshift>
 801d1f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d1fa:	3401      	adds	r4, #1
 801d1fc:	42a3      	cmp	r3, r4
 801d1fe:	f6ff aed9 	blt.w	801cfb4 <__gethex+0x1d6>
 801d202:	2701      	movs	r7, #1
 801d204:	e7c7      	b.n	801d196 <__gethex+0x3b8>
 801d206:	f016 061f 	ands.w	r6, r6, #31
 801d20a:	d0fa      	beq.n	801d202 <__gethex+0x424>
 801d20c:	449a      	add	sl, r3
 801d20e:	f1c6 0620 	rsb	r6, r6, #32
 801d212:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801d216:	f000 fa03 	bl	801d620 <__hi0bits>
 801d21a:	42b0      	cmp	r0, r6
 801d21c:	dbe7      	blt.n	801d1ee <__gethex+0x410>
 801d21e:	e7f0      	b.n	801d202 <__gethex+0x424>

0801d220 <L_shift>:
 801d220:	f1c2 0208 	rsb	r2, r2, #8
 801d224:	0092      	lsls	r2, r2, #2
 801d226:	b570      	push	{r4, r5, r6, lr}
 801d228:	f1c2 0620 	rsb	r6, r2, #32
 801d22c:	6843      	ldr	r3, [r0, #4]
 801d22e:	6804      	ldr	r4, [r0, #0]
 801d230:	fa03 f506 	lsl.w	r5, r3, r6
 801d234:	432c      	orrs	r4, r5
 801d236:	40d3      	lsrs	r3, r2
 801d238:	6004      	str	r4, [r0, #0]
 801d23a:	f840 3f04 	str.w	r3, [r0, #4]!
 801d23e:	4288      	cmp	r0, r1
 801d240:	d3f4      	bcc.n	801d22c <L_shift+0xc>
 801d242:	bd70      	pop	{r4, r5, r6, pc}

0801d244 <__match>:
 801d244:	b530      	push	{r4, r5, lr}
 801d246:	6803      	ldr	r3, [r0, #0]
 801d248:	3301      	adds	r3, #1
 801d24a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d24e:	b914      	cbnz	r4, 801d256 <__match+0x12>
 801d250:	6003      	str	r3, [r0, #0]
 801d252:	2001      	movs	r0, #1
 801d254:	bd30      	pop	{r4, r5, pc}
 801d256:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d25a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801d25e:	2d19      	cmp	r5, #25
 801d260:	bf98      	it	ls
 801d262:	3220      	addls	r2, #32
 801d264:	42a2      	cmp	r2, r4
 801d266:	d0f0      	beq.n	801d24a <__match+0x6>
 801d268:	2000      	movs	r0, #0
 801d26a:	e7f3      	b.n	801d254 <__match+0x10>

0801d26c <__hexnan>:
 801d26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d270:	680b      	ldr	r3, [r1, #0]
 801d272:	6801      	ldr	r1, [r0, #0]
 801d274:	115f      	asrs	r7, r3, #5
 801d276:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801d27a:	f013 031f 	ands.w	r3, r3, #31
 801d27e:	b087      	sub	sp, #28
 801d280:	bf18      	it	ne
 801d282:	3704      	addne	r7, #4
 801d284:	2500      	movs	r5, #0
 801d286:	1f3e      	subs	r6, r7, #4
 801d288:	4682      	mov	sl, r0
 801d28a:	4690      	mov	r8, r2
 801d28c:	9301      	str	r3, [sp, #4]
 801d28e:	f847 5c04 	str.w	r5, [r7, #-4]
 801d292:	46b1      	mov	r9, r6
 801d294:	4634      	mov	r4, r6
 801d296:	9502      	str	r5, [sp, #8]
 801d298:	46ab      	mov	fp, r5
 801d29a:	784a      	ldrb	r2, [r1, #1]
 801d29c:	1c4b      	adds	r3, r1, #1
 801d29e:	9303      	str	r3, [sp, #12]
 801d2a0:	b342      	cbz	r2, 801d2f4 <__hexnan+0x88>
 801d2a2:	4610      	mov	r0, r2
 801d2a4:	9105      	str	r1, [sp, #20]
 801d2a6:	9204      	str	r2, [sp, #16]
 801d2a8:	f7ff fd84 	bl	801cdb4 <__hexdig_fun>
 801d2ac:	2800      	cmp	r0, #0
 801d2ae:	d143      	bne.n	801d338 <__hexnan+0xcc>
 801d2b0:	9a04      	ldr	r2, [sp, #16]
 801d2b2:	9905      	ldr	r1, [sp, #20]
 801d2b4:	2a20      	cmp	r2, #32
 801d2b6:	d818      	bhi.n	801d2ea <__hexnan+0x7e>
 801d2b8:	9b02      	ldr	r3, [sp, #8]
 801d2ba:	459b      	cmp	fp, r3
 801d2bc:	dd13      	ble.n	801d2e6 <__hexnan+0x7a>
 801d2be:	454c      	cmp	r4, r9
 801d2c0:	d206      	bcs.n	801d2d0 <__hexnan+0x64>
 801d2c2:	2d07      	cmp	r5, #7
 801d2c4:	dc04      	bgt.n	801d2d0 <__hexnan+0x64>
 801d2c6:	462a      	mov	r2, r5
 801d2c8:	4649      	mov	r1, r9
 801d2ca:	4620      	mov	r0, r4
 801d2cc:	f7ff ffa8 	bl	801d220 <L_shift>
 801d2d0:	4544      	cmp	r4, r8
 801d2d2:	d944      	bls.n	801d35e <__hexnan+0xf2>
 801d2d4:	2300      	movs	r3, #0
 801d2d6:	f1a4 0904 	sub.w	r9, r4, #4
 801d2da:	f844 3c04 	str.w	r3, [r4, #-4]
 801d2de:	f8cd b008 	str.w	fp, [sp, #8]
 801d2e2:	464c      	mov	r4, r9
 801d2e4:	461d      	mov	r5, r3
 801d2e6:	9903      	ldr	r1, [sp, #12]
 801d2e8:	e7d7      	b.n	801d29a <__hexnan+0x2e>
 801d2ea:	2a29      	cmp	r2, #41	; 0x29
 801d2ec:	d14a      	bne.n	801d384 <__hexnan+0x118>
 801d2ee:	3102      	adds	r1, #2
 801d2f0:	f8ca 1000 	str.w	r1, [sl]
 801d2f4:	f1bb 0f00 	cmp.w	fp, #0
 801d2f8:	d044      	beq.n	801d384 <__hexnan+0x118>
 801d2fa:	454c      	cmp	r4, r9
 801d2fc:	d206      	bcs.n	801d30c <__hexnan+0xa0>
 801d2fe:	2d07      	cmp	r5, #7
 801d300:	dc04      	bgt.n	801d30c <__hexnan+0xa0>
 801d302:	462a      	mov	r2, r5
 801d304:	4649      	mov	r1, r9
 801d306:	4620      	mov	r0, r4
 801d308:	f7ff ff8a 	bl	801d220 <L_shift>
 801d30c:	4544      	cmp	r4, r8
 801d30e:	d928      	bls.n	801d362 <__hexnan+0xf6>
 801d310:	4643      	mov	r3, r8
 801d312:	f854 2b04 	ldr.w	r2, [r4], #4
 801d316:	f843 2b04 	str.w	r2, [r3], #4
 801d31a:	42a6      	cmp	r6, r4
 801d31c:	d2f9      	bcs.n	801d312 <__hexnan+0xa6>
 801d31e:	2200      	movs	r2, #0
 801d320:	f843 2b04 	str.w	r2, [r3], #4
 801d324:	429e      	cmp	r6, r3
 801d326:	d2fb      	bcs.n	801d320 <__hexnan+0xb4>
 801d328:	6833      	ldr	r3, [r6, #0]
 801d32a:	b91b      	cbnz	r3, 801d334 <__hexnan+0xc8>
 801d32c:	4546      	cmp	r6, r8
 801d32e:	d127      	bne.n	801d380 <__hexnan+0x114>
 801d330:	2301      	movs	r3, #1
 801d332:	6033      	str	r3, [r6, #0]
 801d334:	2005      	movs	r0, #5
 801d336:	e026      	b.n	801d386 <__hexnan+0x11a>
 801d338:	3501      	adds	r5, #1
 801d33a:	2d08      	cmp	r5, #8
 801d33c:	f10b 0b01 	add.w	fp, fp, #1
 801d340:	dd06      	ble.n	801d350 <__hexnan+0xe4>
 801d342:	4544      	cmp	r4, r8
 801d344:	d9cf      	bls.n	801d2e6 <__hexnan+0x7a>
 801d346:	2300      	movs	r3, #0
 801d348:	f844 3c04 	str.w	r3, [r4, #-4]
 801d34c:	2501      	movs	r5, #1
 801d34e:	3c04      	subs	r4, #4
 801d350:	6822      	ldr	r2, [r4, #0]
 801d352:	f000 000f 	and.w	r0, r0, #15
 801d356:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801d35a:	6020      	str	r0, [r4, #0]
 801d35c:	e7c3      	b.n	801d2e6 <__hexnan+0x7a>
 801d35e:	2508      	movs	r5, #8
 801d360:	e7c1      	b.n	801d2e6 <__hexnan+0x7a>
 801d362:	9b01      	ldr	r3, [sp, #4]
 801d364:	2b00      	cmp	r3, #0
 801d366:	d0df      	beq.n	801d328 <__hexnan+0xbc>
 801d368:	f04f 32ff 	mov.w	r2, #4294967295
 801d36c:	f1c3 0320 	rsb	r3, r3, #32
 801d370:	fa22 f303 	lsr.w	r3, r2, r3
 801d374:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801d378:	401a      	ands	r2, r3
 801d37a:	f847 2c04 	str.w	r2, [r7, #-4]
 801d37e:	e7d3      	b.n	801d328 <__hexnan+0xbc>
 801d380:	3e04      	subs	r6, #4
 801d382:	e7d1      	b.n	801d328 <__hexnan+0xbc>
 801d384:	2004      	movs	r0, #4
 801d386:	b007      	add	sp, #28
 801d388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d38c <__localeconv_l>:
 801d38c:	30f0      	adds	r0, #240	; 0xf0
 801d38e:	4770      	bx	lr

0801d390 <_localeconv_r>:
 801d390:	4b04      	ldr	r3, [pc, #16]	; (801d3a4 <_localeconv_r+0x14>)
 801d392:	681b      	ldr	r3, [r3, #0]
 801d394:	6a18      	ldr	r0, [r3, #32]
 801d396:	4b04      	ldr	r3, [pc, #16]	; (801d3a8 <_localeconv_r+0x18>)
 801d398:	2800      	cmp	r0, #0
 801d39a:	bf08      	it	eq
 801d39c:	4618      	moveq	r0, r3
 801d39e:	30f0      	adds	r0, #240	; 0xf0
 801d3a0:	4770      	bx	lr
 801d3a2:	bf00      	nop
 801d3a4:	20000020 	.word	0x20000020
 801d3a8:	20000084 	.word	0x20000084

0801d3ac <_lseek_r>:
 801d3ac:	b538      	push	{r3, r4, r5, lr}
 801d3ae:	4c07      	ldr	r4, [pc, #28]	; (801d3cc <_lseek_r+0x20>)
 801d3b0:	4605      	mov	r5, r0
 801d3b2:	4608      	mov	r0, r1
 801d3b4:	4611      	mov	r1, r2
 801d3b6:	2200      	movs	r2, #0
 801d3b8:	6022      	str	r2, [r4, #0]
 801d3ba:	461a      	mov	r2, r3
 801d3bc:	f7e6 fc10 	bl	8003be0 <_lseek>
 801d3c0:	1c43      	adds	r3, r0, #1
 801d3c2:	d102      	bne.n	801d3ca <_lseek_r+0x1e>
 801d3c4:	6823      	ldr	r3, [r4, #0]
 801d3c6:	b103      	cbz	r3, 801d3ca <_lseek_r+0x1e>
 801d3c8:	602b      	str	r3, [r5, #0]
 801d3ca:	bd38      	pop	{r3, r4, r5, pc}
 801d3cc:	20007cb8 	.word	0x20007cb8

0801d3d0 <__swhatbuf_r>:
 801d3d0:	b570      	push	{r4, r5, r6, lr}
 801d3d2:	460e      	mov	r6, r1
 801d3d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d3d8:	2900      	cmp	r1, #0
 801d3da:	b096      	sub	sp, #88	; 0x58
 801d3dc:	4614      	mov	r4, r2
 801d3de:	461d      	mov	r5, r3
 801d3e0:	da07      	bge.n	801d3f2 <__swhatbuf_r+0x22>
 801d3e2:	2300      	movs	r3, #0
 801d3e4:	602b      	str	r3, [r5, #0]
 801d3e6:	89b3      	ldrh	r3, [r6, #12]
 801d3e8:	061a      	lsls	r2, r3, #24
 801d3ea:	d410      	bmi.n	801d40e <__swhatbuf_r+0x3e>
 801d3ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d3f0:	e00e      	b.n	801d410 <__swhatbuf_r+0x40>
 801d3f2:	466a      	mov	r2, sp
 801d3f4:	f000 ff02 	bl	801e1fc <_fstat_r>
 801d3f8:	2800      	cmp	r0, #0
 801d3fa:	dbf2      	blt.n	801d3e2 <__swhatbuf_r+0x12>
 801d3fc:	9a01      	ldr	r2, [sp, #4]
 801d3fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d402:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d406:	425a      	negs	r2, r3
 801d408:	415a      	adcs	r2, r3
 801d40a:	602a      	str	r2, [r5, #0]
 801d40c:	e7ee      	b.n	801d3ec <__swhatbuf_r+0x1c>
 801d40e:	2340      	movs	r3, #64	; 0x40
 801d410:	2000      	movs	r0, #0
 801d412:	6023      	str	r3, [r4, #0]
 801d414:	b016      	add	sp, #88	; 0x58
 801d416:	bd70      	pop	{r4, r5, r6, pc}

0801d418 <__smakebuf_r>:
 801d418:	898b      	ldrh	r3, [r1, #12]
 801d41a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d41c:	079d      	lsls	r5, r3, #30
 801d41e:	4606      	mov	r6, r0
 801d420:	460c      	mov	r4, r1
 801d422:	d507      	bpl.n	801d434 <__smakebuf_r+0x1c>
 801d424:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d428:	6023      	str	r3, [r4, #0]
 801d42a:	6123      	str	r3, [r4, #16]
 801d42c:	2301      	movs	r3, #1
 801d42e:	6163      	str	r3, [r4, #20]
 801d430:	b002      	add	sp, #8
 801d432:	bd70      	pop	{r4, r5, r6, pc}
 801d434:	ab01      	add	r3, sp, #4
 801d436:	466a      	mov	r2, sp
 801d438:	f7ff ffca 	bl	801d3d0 <__swhatbuf_r>
 801d43c:	9900      	ldr	r1, [sp, #0]
 801d43e:	4605      	mov	r5, r0
 801d440:	4630      	mov	r0, r6
 801d442:	f7fc fe63 	bl	801a10c <_malloc_r>
 801d446:	b948      	cbnz	r0, 801d45c <__smakebuf_r+0x44>
 801d448:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d44c:	059a      	lsls	r2, r3, #22
 801d44e:	d4ef      	bmi.n	801d430 <__smakebuf_r+0x18>
 801d450:	f023 0303 	bic.w	r3, r3, #3
 801d454:	f043 0302 	orr.w	r3, r3, #2
 801d458:	81a3      	strh	r3, [r4, #12]
 801d45a:	e7e3      	b.n	801d424 <__smakebuf_r+0xc>
 801d45c:	4b0d      	ldr	r3, [pc, #52]	; (801d494 <__smakebuf_r+0x7c>)
 801d45e:	62b3      	str	r3, [r6, #40]	; 0x28
 801d460:	89a3      	ldrh	r3, [r4, #12]
 801d462:	6020      	str	r0, [r4, #0]
 801d464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d468:	81a3      	strh	r3, [r4, #12]
 801d46a:	9b00      	ldr	r3, [sp, #0]
 801d46c:	6163      	str	r3, [r4, #20]
 801d46e:	9b01      	ldr	r3, [sp, #4]
 801d470:	6120      	str	r0, [r4, #16]
 801d472:	b15b      	cbz	r3, 801d48c <__smakebuf_r+0x74>
 801d474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d478:	4630      	mov	r0, r6
 801d47a:	f000 fed1 	bl	801e220 <_isatty_r>
 801d47e:	b128      	cbz	r0, 801d48c <__smakebuf_r+0x74>
 801d480:	89a3      	ldrh	r3, [r4, #12]
 801d482:	f023 0303 	bic.w	r3, r3, #3
 801d486:	f043 0301 	orr.w	r3, r3, #1
 801d48a:	81a3      	strh	r3, [r4, #12]
 801d48c:	89a3      	ldrh	r3, [r4, #12]
 801d48e:	431d      	orrs	r5, r3
 801d490:	81a5      	strh	r5, [r4, #12]
 801d492:	e7cd      	b.n	801d430 <__smakebuf_r+0x18>
 801d494:	08019e19 	.word	0x08019e19

0801d498 <_Balloc>:
 801d498:	b570      	push	{r4, r5, r6, lr}
 801d49a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d49c:	4604      	mov	r4, r0
 801d49e:	460e      	mov	r6, r1
 801d4a0:	b93d      	cbnz	r5, 801d4b2 <_Balloc+0x1a>
 801d4a2:	2010      	movs	r0, #16
 801d4a4:	f7fc fd86 	bl	8019fb4 <malloc>
 801d4a8:	6260      	str	r0, [r4, #36]	; 0x24
 801d4aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d4ae:	6005      	str	r5, [r0, #0]
 801d4b0:	60c5      	str	r5, [r0, #12]
 801d4b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801d4b4:	68eb      	ldr	r3, [r5, #12]
 801d4b6:	b183      	cbz	r3, 801d4da <_Balloc+0x42>
 801d4b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d4ba:	68db      	ldr	r3, [r3, #12]
 801d4bc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801d4c0:	b9b8      	cbnz	r0, 801d4f2 <_Balloc+0x5a>
 801d4c2:	2101      	movs	r1, #1
 801d4c4:	fa01 f506 	lsl.w	r5, r1, r6
 801d4c8:	1d6a      	adds	r2, r5, #5
 801d4ca:	0092      	lsls	r2, r2, #2
 801d4cc:	4620      	mov	r0, r4
 801d4ce:	f000 fbe3 	bl	801dc98 <_calloc_r>
 801d4d2:	b160      	cbz	r0, 801d4ee <_Balloc+0x56>
 801d4d4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801d4d8:	e00e      	b.n	801d4f8 <_Balloc+0x60>
 801d4da:	2221      	movs	r2, #33	; 0x21
 801d4dc:	2104      	movs	r1, #4
 801d4de:	4620      	mov	r0, r4
 801d4e0:	f000 fbda 	bl	801dc98 <_calloc_r>
 801d4e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d4e6:	60e8      	str	r0, [r5, #12]
 801d4e8:	68db      	ldr	r3, [r3, #12]
 801d4ea:	2b00      	cmp	r3, #0
 801d4ec:	d1e4      	bne.n	801d4b8 <_Balloc+0x20>
 801d4ee:	2000      	movs	r0, #0
 801d4f0:	bd70      	pop	{r4, r5, r6, pc}
 801d4f2:	6802      	ldr	r2, [r0, #0]
 801d4f4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801d4f8:	2300      	movs	r3, #0
 801d4fa:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d4fe:	e7f7      	b.n	801d4f0 <_Balloc+0x58>

0801d500 <_Bfree>:
 801d500:	b570      	push	{r4, r5, r6, lr}
 801d502:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801d504:	4606      	mov	r6, r0
 801d506:	460d      	mov	r5, r1
 801d508:	b93c      	cbnz	r4, 801d51a <_Bfree+0x1a>
 801d50a:	2010      	movs	r0, #16
 801d50c:	f7fc fd52 	bl	8019fb4 <malloc>
 801d510:	6270      	str	r0, [r6, #36]	; 0x24
 801d512:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d516:	6004      	str	r4, [r0, #0]
 801d518:	60c4      	str	r4, [r0, #12]
 801d51a:	b13d      	cbz	r5, 801d52c <_Bfree+0x2c>
 801d51c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801d51e:	686a      	ldr	r2, [r5, #4]
 801d520:	68db      	ldr	r3, [r3, #12]
 801d522:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d526:	6029      	str	r1, [r5, #0]
 801d528:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801d52c:	bd70      	pop	{r4, r5, r6, pc}

0801d52e <__multadd>:
 801d52e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d532:	690d      	ldr	r5, [r1, #16]
 801d534:	461f      	mov	r7, r3
 801d536:	4606      	mov	r6, r0
 801d538:	460c      	mov	r4, r1
 801d53a:	f101 0c14 	add.w	ip, r1, #20
 801d53e:	2300      	movs	r3, #0
 801d540:	f8dc 0000 	ldr.w	r0, [ip]
 801d544:	b281      	uxth	r1, r0
 801d546:	fb02 7101 	mla	r1, r2, r1, r7
 801d54a:	0c0f      	lsrs	r7, r1, #16
 801d54c:	0c00      	lsrs	r0, r0, #16
 801d54e:	fb02 7000 	mla	r0, r2, r0, r7
 801d552:	b289      	uxth	r1, r1
 801d554:	3301      	adds	r3, #1
 801d556:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801d55a:	429d      	cmp	r5, r3
 801d55c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801d560:	f84c 1b04 	str.w	r1, [ip], #4
 801d564:	dcec      	bgt.n	801d540 <__multadd+0x12>
 801d566:	b1d7      	cbz	r7, 801d59e <__multadd+0x70>
 801d568:	68a3      	ldr	r3, [r4, #8]
 801d56a:	42ab      	cmp	r3, r5
 801d56c:	dc12      	bgt.n	801d594 <__multadd+0x66>
 801d56e:	6861      	ldr	r1, [r4, #4]
 801d570:	4630      	mov	r0, r6
 801d572:	3101      	adds	r1, #1
 801d574:	f7ff ff90 	bl	801d498 <_Balloc>
 801d578:	6922      	ldr	r2, [r4, #16]
 801d57a:	3202      	adds	r2, #2
 801d57c:	f104 010c 	add.w	r1, r4, #12
 801d580:	4680      	mov	r8, r0
 801d582:	0092      	lsls	r2, r2, #2
 801d584:	300c      	adds	r0, #12
 801d586:	f7fc fd46 	bl	801a016 <memcpy>
 801d58a:	4621      	mov	r1, r4
 801d58c:	4630      	mov	r0, r6
 801d58e:	f7ff ffb7 	bl	801d500 <_Bfree>
 801d592:	4644      	mov	r4, r8
 801d594:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d598:	3501      	adds	r5, #1
 801d59a:	615f      	str	r7, [r3, #20]
 801d59c:	6125      	str	r5, [r4, #16]
 801d59e:	4620      	mov	r0, r4
 801d5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d5a4 <__s2b>:
 801d5a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d5a8:	460c      	mov	r4, r1
 801d5aa:	4615      	mov	r5, r2
 801d5ac:	461f      	mov	r7, r3
 801d5ae:	2209      	movs	r2, #9
 801d5b0:	3308      	adds	r3, #8
 801d5b2:	4606      	mov	r6, r0
 801d5b4:	fb93 f3f2 	sdiv	r3, r3, r2
 801d5b8:	2100      	movs	r1, #0
 801d5ba:	2201      	movs	r2, #1
 801d5bc:	429a      	cmp	r2, r3
 801d5be:	db20      	blt.n	801d602 <__s2b+0x5e>
 801d5c0:	4630      	mov	r0, r6
 801d5c2:	f7ff ff69 	bl	801d498 <_Balloc>
 801d5c6:	9b08      	ldr	r3, [sp, #32]
 801d5c8:	6143      	str	r3, [r0, #20]
 801d5ca:	2d09      	cmp	r5, #9
 801d5cc:	f04f 0301 	mov.w	r3, #1
 801d5d0:	6103      	str	r3, [r0, #16]
 801d5d2:	dd19      	ble.n	801d608 <__s2b+0x64>
 801d5d4:	f104 0809 	add.w	r8, r4, #9
 801d5d8:	46c1      	mov	r9, r8
 801d5da:	442c      	add	r4, r5
 801d5dc:	f819 3b01 	ldrb.w	r3, [r9], #1
 801d5e0:	4601      	mov	r1, r0
 801d5e2:	3b30      	subs	r3, #48	; 0x30
 801d5e4:	220a      	movs	r2, #10
 801d5e6:	4630      	mov	r0, r6
 801d5e8:	f7ff ffa1 	bl	801d52e <__multadd>
 801d5ec:	45a1      	cmp	r9, r4
 801d5ee:	d1f5      	bne.n	801d5dc <__s2b+0x38>
 801d5f0:	eb08 0405 	add.w	r4, r8, r5
 801d5f4:	3c08      	subs	r4, #8
 801d5f6:	1b2d      	subs	r5, r5, r4
 801d5f8:	1963      	adds	r3, r4, r5
 801d5fa:	42bb      	cmp	r3, r7
 801d5fc:	db07      	blt.n	801d60e <__s2b+0x6a>
 801d5fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d602:	0052      	lsls	r2, r2, #1
 801d604:	3101      	adds	r1, #1
 801d606:	e7d9      	b.n	801d5bc <__s2b+0x18>
 801d608:	340a      	adds	r4, #10
 801d60a:	2509      	movs	r5, #9
 801d60c:	e7f3      	b.n	801d5f6 <__s2b+0x52>
 801d60e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d612:	4601      	mov	r1, r0
 801d614:	3b30      	subs	r3, #48	; 0x30
 801d616:	220a      	movs	r2, #10
 801d618:	4630      	mov	r0, r6
 801d61a:	f7ff ff88 	bl	801d52e <__multadd>
 801d61e:	e7eb      	b.n	801d5f8 <__s2b+0x54>

0801d620 <__hi0bits>:
 801d620:	0c02      	lsrs	r2, r0, #16
 801d622:	0412      	lsls	r2, r2, #16
 801d624:	4603      	mov	r3, r0
 801d626:	b9b2      	cbnz	r2, 801d656 <__hi0bits+0x36>
 801d628:	0403      	lsls	r3, r0, #16
 801d62a:	2010      	movs	r0, #16
 801d62c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801d630:	bf04      	itt	eq
 801d632:	021b      	lsleq	r3, r3, #8
 801d634:	3008      	addeq	r0, #8
 801d636:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801d63a:	bf04      	itt	eq
 801d63c:	011b      	lsleq	r3, r3, #4
 801d63e:	3004      	addeq	r0, #4
 801d640:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801d644:	bf04      	itt	eq
 801d646:	009b      	lsleq	r3, r3, #2
 801d648:	3002      	addeq	r0, #2
 801d64a:	2b00      	cmp	r3, #0
 801d64c:	db06      	blt.n	801d65c <__hi0bits+0x3c>
 801d64e:	005b      	lsls	r3, r3, #1
 801d650:	d503      	bpl.n	801d65a <__hi0bits+0x3a>
 801d652:	3001      	adds	r0, #1
 801d654:	4770      	bx	lr
 801d656:	2000      	movs	r0, #0
 801d658:	e7e8      	b.n	801d62c <__hi0bits+0xc>
 801d65a:	2020      	movs	r0, #32
 801d65c:	4770      	bx	lr

0801d65e <__lo0bits>:
 801d65e:	6803      	ldr	r3, [r0, #0]
 801d660:	f013 0207 	ands.w	r2, r3, #7
 801d664:	4601      	mov	r1, r0
 801d666:	d00b      	beq.n	801d680 <__lo0bits+0x22>
 801d668:	07da      	lsls	r2, r3, #31
 801d66a:	d423      	bmi.n	801d6b4 <__lo0bits+0x56>
 801d66c:	0798      	lsls	r0, r3, #30
 801d66e:	bf49      	itett	mi
 801d670:	085b      	lsrmi	r3, r3, #1
 801d672:	089b      	lsrpl	r3, r3, #2
 801d674:	2001      	movmi	r0, #1
 801d676:	600b      	strmi	r3, [r1, #0]
 801d678:	bf5c      	itt	pl
 801d67a:	600b      	strpl	r3, [r1, #0]
 801d67c:	2002      	movpl	r0, #2
 801d67e:	4770      	bx	lr
 801d680:	b298      	uxth	r0, r3
 801d682:	b9a8      	cbnz	r0, 801d6b0 <__lo0bits+0x52>
 801d684:	0c1b      	lsrs	r3, r3, #16
 801d686:	2010      	movs	r0, #16
 801d688:	f013 0fff 	tst.w	r3, #255	; 0xff
 801d68c:	bf04      	itt	eq
 801d68e:	0a1b      	lsreq	r3, r3, #8
 801d690:	3008      	addeq	r0, #8
 801d692:	071a      	lsls	r2, r3, #28
 801d694:	bf04      	itt	eq
 801d696:	091b      	lsreq	r3, r3, #4
 801d698:	3004      	addeq	r0, #4
 801d69a:	079a      	lsls	r2, r3, #30
 801d69c:	bf04      	itt	eq
 801d69e:	089b      	lsreq	r3, r3, #2
 801d6a0:	3002      	addeq	r0, #2
 801d6a2:	07da      	lsls	r2, r3, #31
 801d6a4:	d402      	bmi.n	801d6ac <__lo0bits+0x4e>
 801d6a6:	085b      	lsrs	r3, r3, #1
 801d6a8:	d006      	beq.n	801d6b8 <__lo0bits+0x5a>
 801d6aa:	3001      	adds	r0, #1
 801d6ac:	600b      	str	r3, [r1, #0]
 801d6ae:	4770      	bx	lr
 801d6b0:	4610      	mov	r0, r2
 801d6b2:	e7e9      	b.n	801d688 <__lo0bits+0x2a>
 801d6b4:	2000      	movs	r0, #0
 801d6b6:	4770      	bx	lr
 801d6b8:	2020      	movs	r0, #32
 801d6ba:	4770      	bx	lr

0801d6bc <__i2b>:
 801d6bc:	b510      	push	{r4, lr}
 801d6be:	460c      	mov	r4, r1
 801d6c0:	2101      	movs	r1, #1
 801d6c2:	f7ff fee9 	bl	801d498 <_Balloc>
 801d6c6:	2201      	movs	r2, #1
 801d6c8:	6144      	str	r4, [r0, #20]
 801d6ca:	6102      	str	r2, [r0, #16]
 801d6cc:	bd10      	pop	{r4, pc}

0801d6ce <__multiply>:
 801d6ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6d2:	4614      	mov	r4, r2
 801d6d4:	690a      	ldr	r2, [r1, #16]
 801d6d6:	6923      	ldr	r3, [r4, #16]
 801d6d8:	429a      	cmp	r2, r3
 801d6da:	bfb8      	it	lt
 801d6dc:	460b      	movlt	r3, r1
 801d6de:	4688      	mov	r8, r1
 801d6e0:	bfbc      	itt	lt
 801d6e2:	46a0      	movlt	r8, r4
 801d6e4:	461c      	movlt	r4, r3
 801d6e6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d6ea:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801d6ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d6f2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d6f6:	eb07 0609 	add.w	r6, r7, r9
 801d6fa:	42b3      	cmp	r3, r6
 801d6fc:	bfb8      	it	lt
 801d6fe:	3101      	addlt	r1, #1
 801d700:	f7ff feca 	bl	801d498 <_Balloc>
 801d704:	f100 0514 	add.w	r5, r0, #20
 801d708:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801d70c:	462b      	mov	r3, r5
 801d70e:	2200      	movs	r2, #0
 801d710:	4573      	cmp	r3, lr
 801d712:	d316      	bcc.n	801d742 <__multiply+0x74>
 801d714:	f104 0214 	add.w	r2, r4, #20
 801d718:	f108 0114 	add.w	r1, r8, #20
 801d71c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801d720:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801d724:	9300      	str	r3, [sp, #0]
 801d726:	9b00      	ldr	r3, [sp, #0]
 801d728:	9201      	str	r2, [sp, #4]
 801d72a:	4293      	cmp	r3, r2
 801d72c:	d80c      	bhi.n	801d748 <__multiply+0x7a>
 801d72e:	2e00      	cmp	r6, #0
 801d730:	dd03      	ble.n	801d73a <__multiply+0x6c>
 801d732:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801d736:	2b00      	cmp	r3, #0
 801d738:	d05d      	beq.n	801d7f6 <__multiply+0x128>
 801d73a:	6106      	str	r6, [r0, #16]
 801d73c:	b003      	add	sp, #12
 801d73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d742:	f843 2b04 	str.w	r2, [r3], #4
 801d746:	e7e3      	b.n	801d710 <__multiply+0x42>
 801d748:	f8b2 b000 	ldrh.w	fp, [r2]
 801d74c:	f1bb 0f00 	cmp.w	fp, #0
 801d750:	d023      	beq.n	801d79a <__multiply+0xcc>
 801d752:	4689      	mov	r9, r1
 801d754:	46ac      	mov	ip, r5
 801d756:	f04f 0800 	mov.w	r8, #0
 801d75a:	f859 4b04 	ldr.w	r4, [r9], #4
 801d75e:	f8dc a000 	ldr.w	sl, [ip]
 801d762:	b2a3      	uxth	r3, r4
 801d764:	fa1f fa8a 	uxth.w	sl, sl
 801d768:	fb0b a303 	mla	r3, fp, r3, sl
 801d76c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801d770:	f8dc 4000 	ldr.w	r4, [ip]
 801d774:	4443      	add	r3, r8
 801d776:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801d77a:	fb0b 840a 	mla	r4, fp, sl, r8
 801d77e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801d782:	46e2      	mov	sl, ip
 801d784:	b29b      	uxth	r3, r3
 801d786:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801d78a:	454f      	cmp	r7, r9
 801d78c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801d790:	f84a 3b04 	str.w	r3, [sl], #4
 801d794:	d82b      	bhi.n	801d7ee <__multiply+0x120>
 801d796:	f8cc 8004 	str.w	r8, [ip, #4]
 801d79a:	9b01      	ldr	r3, [sp, #4]
 801d79c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801d7a0:	3204      	adds	r2, #4
 801d7a2:	f1ba 0f00 	cmp.w	sl, #0
 801d7a6:	d020      	beq.n	801d7ea <__multiply+0x11c>
 801d7a8:	682b      	ldr	r3, [r5, #0]
 801d7aa:	4689      	mov	r9, r1
 801d7ac:	46a8      	mov	r8, r5
 801d7ae:	f04f 0b00 	mov.w	fp, #0
 801d7b2:	f8b9 c000 	ldrh.w	ip, [r9]
 801d7b6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801d7ba:	fb0a 440c 	mla	r4, sl, ip, r4
 801d7be:	445c      	add	r4, fp
 801d7c0:	46c4      	mov	ip, r8
 801d7c2:	b29b      	uxth	r3, r3
 801d7c4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801d7c8:	f84c 3b04 	str.w	r3, [ip], #4
 801d7cc:	f859 3b04 	ldr.w	r3, [r9], #4
 801d7d0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801d7d4:	0c1b      	lsrs	r3, r3, #16
 801d7d6:	fb0a b303 	mla	r3, sl, r3, fp
 801d7da:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801d7de:	454f      	cmp	r7, r9
 801d7e0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801d7e4:	d805      	bhi.n	801d7f2 <__multiply+0x124>
 801d7e6:	f8c8 3004 	str.w	r3, [r8, #4]
 801d7ea:	3504      	adds	r5, #4
 801d7ec:	e79b      	b.n	801d726 <__multiply+0x58>
 801d7ee:	46d4      	mov	ip, sl
 801d7f0:	e7b3      	b.n	801d75a <__multiply+0x8c>
 801d7f2:	46e0      	mov	r8, ip
 801d7f4:	e7dd      	b.n	801d7b2 <__multiply+0xe4>
 801d7f6:	3e01      	subs	r6, #1
 801d7f8:	e799      	b.n	801d72e <__multiply+0x60>
	...

0801d7fc <__pow5mult>:
 801d7fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d800:	4615      	mov	r5, r2
 801d802:	f012 0203 	ands.w	r2, r2, #3
 801d806:	4606      	mov	r6, r0
 801d808:	460f      	mov	r7, r1
 801d80a:	d007      	beq.n	801d81c <__pow5mult+0x20>
 801d80c:	3a01      	subs	r2, #1
 801d80e:	4c21      	ldr	r4, [pc, #132]	; (801d894 <__pow5mult+0x98>)
 801d810:	2300      	movs	r3, #0
 801d812:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d816:	f7ff fe8a 	bl	801d52e <__multadd>
 801d81a:	4607      	mov	r7, r0
 801d81c:	10ad      	asrs	r5, r5, #2
 801d81e:	d035      	beq.n	801d88c <__pow5mult+0x90>
 801d820:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801d822:	b93c      	cbnz	r4, 801d834 <__pow5mult+0x38>
 801d824:	2010      	movs	r0, #16
 801d826:	f7fc fbc5 	bl	8019fb4 <malloc>
 801d82a:	6270      	str	r0, [r6, #36]	; 0x24
 801d82c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d830:	6004      	str	r4, [r0, #0]
 801d832:	60c4      	str	r4, [r0, #12]
 801d834:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801d838:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d83c:	b94c      	cbnz	r4, 801d852 <__pow5mult+0x56>
 801d83e:	f240 2171 	movw	r1, #625	; 0x271
 801d842:	4630      	mov	r0, r6
 801d844:	f7ff ff3a 	bl	801d6bc <__i2b>
 801d848:	2300      	movs	r3, #0
 801d84a:	f8c8 0008 	str.w	r0, [r8, #8]
 801d84e:	4604      	mov	r4, r0
 801d850:	6003      	str	r3, [r0, #0]
 801d852:	f04f 0800 	mov.w	r8, #0
 801d856:	07eb      	lsls	r3, r5, #31
 801d858:	d50a      	bpl.n	801d870 <__pow5mult+0x74>
 801d85a:	4639      	mov	r1, r7
 801d85c:	4622      	mov	r2, r4
 801d85e:	4630      	mov	r0, r6
 801d860:	f7ff ff35 	bl	801d6ce <__multiply>
 801d864:	4639      	mov	r1, r7
 801d866:	4681      	mov	r9, r0
 801d868:	4630      	mov	r0, r6
 801d86a:	f7ff fe49 	bl	801d500 <_Bfree>
 801d86e:	464f      	mov	r7, r9
 801d870:	106d      	asrs	r5, r5, #1
 801d872:	d00b      	beq.n	801d88c <__pow5mult+0x90>
 801d874:	6820      	ldr	r0, [r4, #0]
 801d876:	b938      	cbnz	r0, 801d888 <__pow5mult+0x8c>
 801d878:	4622      	mov	r2, r4
 801d87a:	4621      	mov	r1, r4
 801d87c:	4630      	mov	r0, r6
 801d87e:	f7ff ff26 	bl	801d6ce <__multiply>
 801d882:	6020      	str	r0, [r4, #0]
 801d884:	f8c0 8000 	str.w	r8, [r0]
 801d888:	4604      	mov	r4, r0
 801d88a:	e7e4      	b.n	801d856 <__pow5mult+0x5a>
 801d88c:	4638      	mov	r0, r7
 801d88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d892:	bf00      	nop
 801d894:	08024a10 	.word	0x08024a10

0801d898 <__lshift>:
 801d898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d89c:	460c      	mov	r4, r1
 801d89e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d8a2:	6923      	ldr	r3, [r4, #16]
 801d8a4:	6849      	ldr	r1, [r1, #4]
 801d8a6:	eb0a 0903 	add.w	r9, sl, r3
 801d8aa:	68a3      	ldr	r3, [r4, #8]
 801d8ac:	4607      	mov	r7, r0
 801d8ae:	4616      	mov	r6, r2
 801d8b0:	f109 0501 	add.w	r5, r9, #1
 801d8b4:	42ab      	cmp	r3, r5
 801d8b6:	db32      	blt.n	801d91e <__lshift+0x86>
 801d8b8:	4638      	mov	r0, r7
 801d8ba:	f7ff fded 	bl	801d498 <_Balloc>
 801d8be:	2300      	movs	r3, #0
 801d8c0:	4680      	mov	r8, r0
 801d8c2:	f100 0114 	add.w	r1, r0, #20
 801d8c6:	461a      	mov	r2, r3
 801d8c8:	4553      	cmp	r3, sl
 801d8ca:	db2b      	blt.n	801d924 <__lshift+0x8c>
 801d8cc:	6920      	ldr	r0, [r4, #16]
 801d8ce:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d8d2:	f104 0314 	add.w	r3, r4, #20
 801d8d6:	f016 021f 	ands.w	r2, r6, #31
 801d8da:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d8de:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d8e2:	d025      	beq.n	801d930 <__lshift+0x98>
 801d8e4:	f1c2 0e20 	rsb	lr, r2, #32
 801d8e8:	2000      	movs	r0, #0
 801d8ea:	681e      	ldr	r6, [r3, #0]
 801d8ec:	468a      	mov	sl, r1
 801d8ee:	4096      	lsls	r6, r2
 801d8f0:	4330      	orrs	r0, r6
 801d8f2:	f84a 0b04 	str.w	r0, [sl], #4
 801d8f6:	f853 0b04 	ldr.w	r0, [r3], #4
 801d8fa:	459c      	cmp	ip, r3
 801d8fc:	fa20 f00e 	lsr.w	r0, r0, lr
 801d900:	d814      	bhi.n	801d92c <__lshift+0x94>
 801d902:	6048      	str	r0, [r1, #4]
 801d904:	b108      	cbz	r0, 801d90a <__lshift+0x72>
 801d906:	f109 0502 	add.w	r5, r9, #2
 801d90a:	3d01      	subs	r5, #1
 801d90c:	4638      	mov	r0, r7
 801d90e:	f8c8 5010 	str.w	r5, [r8, #16]
 801d912:	4621      	mov	r1, r4
 801d914:	f7ff fdf4 	bl	801d500 <_Bfree>
 801d918:	4640      	mov	r0, r8
 801d91a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d91e:	3101      	adds	r1, #1
 801d920:	005b      	lsls	r3, r3, #1
 801d922:	e7c7      	b.n	801d8b4 <__lshift+0x1c>
 801d924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801d928:	3301      	adds	r3, #1
 801d92a:	e7cd      	b.n	801d8c8 <__lshift+0x30>
 801d92c:	4651      	mov	r1, sl
 801d92e:	e7dc      	b.n	801d8ea <__lshift+0x52>
 801d930:	3904      	subs	r1, #4
 801d932:	f853 2b04 	ldr.w	r2, [r3], #4
 801d936:	f841 2f04 	str.w	r2, [r1, #4]!
 801d93a:	459c      	cmp	ip, r3
 801d93c:	d8f9      	bhi.n	801d932 <__lshift+0x9a>
 801d93e:	e7e4      	b.n	801d90a <__lshift+0x72>

0801d940 <__mcmp>:
 801d940:	6903      	ldr	r3, [r0, #16]
 801d942:	690a      	ldr	r2, [r1, #16]
 801d944:	1a9b      	subs	r3, r3, r2
 801d946:	b530      	push	{r4, r5, lr}
 801d948:	d10c      	bne.n	801d964 <__mcmp+0x24>
 801d94a:	0092      	lsls	r2, r2, #2
 801d94c:	3014      	adds	r0, #20
 801d94e:	3114      	adds	r1, #20
 801d950:	1884      	adds	r4, r0, r2
 801d952:	4411      	add	r1, r2
 801d954:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801d958:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801d95c:	4295      	cmp	r5, r2
 801d95e:	d003      	beq.n	801d968 <__mcmp+0x28>
 801d960:	d305      	bcc.n	801d96e <__mcmp+0x2e>
 801d962:	2301      	movs	r3, #1
 801d964:	4618      	mov	r0, r3
 801d966:	bd30      	pop	{r4, r5, pc}
 801d968:	42a0      	cmp	r0, r4
 801d96a:	d3f3      	bcc.n	801d954 <__mcmp+0x14>
 801d96c:	e7fa      	b.n	801d964 <__mcmp+0x24>
 801d96e:	f04f 33ff 	mov.w	r3, #4294967295
 801d972:	e7f7      	b.n	801d964 <__mcmp+0x24>

0801d974 <__mdiff>:
 801d974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d978:	460d      	mov	r5, r1
 801d97a:	4607      	mov	r7, r0
 801d97c:	4611      	mov	r1, r2
 801d97e:	4628      	mov	r0, r5
 801d980:	4614      	mov	r4, r2
 801d982:	f7ff ffdd 	bl	801d940 <__mcmp>
 801d986:	1e06      	subs	r6, r0, #0
 801d988:	d108      	bne.n	801d99c <__mdiff+0x28>
 801d98a:	4631      	mov	r1, r6
 801d98c:	4638      	mov	r0, r7
 801d98e:	f7ff fd83 	bl	801d498 <_Balloc>
 801d992:	2301      	movs	r3, #1
 801d994:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801d998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d99c:	bfa4      	itt	ge
 801d99e:	4623      	movge	r3, r4
 801d9a0:	462c      	movge	r4, r5
 801d9a2:	4638      	mov	r0, r7
 801d9a4:	6861      	ldr	r1, [r4, #4]
 801d9a6:	bfa6      	itte	ge
 801d9a8:	461d      	movge	r5, r3
 801d9aa:	2600      	movge	r6, #0
 801d9ac:	2601      	movlt	r6, #1
 801d9ae:	f7ff fd73 	bl	801d498 <_Balloc>
 801d9b2:	692b      	ldr	r3, [r5, #16]
 801d9b4:	60c6      	str	r6, [r0, #12]
 801d9b6:	6926      	ldr	r6, [r4, #16]
 801d9b8:	f105 0914 	add.w	r9, r5, #20
 801d9bc:	f104 0214 	add.w	r2, r4, #20
 801d9c0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801d9c4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801d9c8:	f100 0514 	add.w	r5, r0, #20
 801d9cc:	f04f 0e00 	mov.w	lr, #0
 801d9d0:	f852 ab04 	ldr.w	sl, [r2], #4
 801d9d4:	f859 4b04 	ldr.w	r4, [r9], #4
 801d9d8:	fa1e f18a 	uxtah	r1, lr, sl
 801d9dc:	b2a3      	uxth	r3, r4
 801d9de:	1ac9      	subs	r1, r1, r3
 801d9e0:	0c23      	lsrs	r3, r4, #16
 801d9e2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801d9e6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801d9ea:	b289      	uxth	r1, r1
 801d9ec:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801d9f0:	45c8      	cmp	r8, r9
 801d9f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801d9f6:	4694      	mov	ip, r2
 801d9f8:	f845 3b04 	str.w	r3, [r5], #4
 801d9fc:	d8e8      	bhi.n	801d9d0 <__mdiff+0x5c>
 801d9fe:	45bc      	cmp	ip, r7
 801da00:	d304      	bcc.n	801da0c <__mdiff+0x98>
 801da02:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801da06:	b183      	cbz	r3, 801da2a <__mdiff+0xb6>
 801da08:	6106      	str	r6, [r0, #16]
 801da0a:	e7c5      	b.n	801d998 <__mdiff+0x24>
 801da0c:	f85c 1b04 	ldr.w	r1, [ip], #4
 801da10:	fa1e f381 	uxtah	r3, lr, r1
 801da14:	141a      	asrs	r2, r3, #16
 801da16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801da1a:	b29b      	uxth	r3, r3
 801da1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801da20:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801da24:	f845 3b04 	str.w	r3, [r5], #4
 801da28:	e7e9      	b.n	801d9fe <__mdiff+0x8a>
 801da2a:	3e01      	subs	r6, #1
 801da2c:	e7e9      	b.n	801da02 <__mdiff+0x8e>
	...

0801da30 <__ulp>:
 801da30:	4b12      	ldr	r3, [pc, #72]	; (801da7c <__ulp+0x4c>)
 801da32:	ee10 2a90 	vmov	r2, s1
 801da36:	401a      	ands	r2, r3
 801da38:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801da3c:	2b00      	cmp	r3, #0
 801da3e:	dd04      	ble.n	801da4a <__ulp+0x1a>
 801da40:	2000      	movs	r0, #0
 801da42:	4619      	mov	r1, r3
 801da44:	ec41 0b10 	vmov	d0, r0, r1
 801da48:	4770      	bx	lr
 801da4a:	425b      	negs	r3, r3
 801da4c:	151b      	asrs	r3, r3, #20
 801da4e:	2b13      	cmp	r3, #19
 801da50:	f04f 0000 	mov.w	r0, #0
 801da54:	f04f 0100 	mov.w	r1, #0
 801da58:	dc04      	bgt.n	801da64 <__ulp+0x34>
 801da5a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801da5e:	fa42 f103 	asr.w	r1, r2, r3
 801da62:	e7ef      	b.n	801da44 <__ulp+0x14>
 801da64:	3b14      	subs	r3, #20
 801da66:	2b1e      	cmp	r3, #30
 801da68:	f04f 0201 	mov.w	r2, #1
 801da6c:	bfda      	itte	le
 801da6e:	f1c3 031f 	rsble	r3, r3, #31
 801da72:	fa02 f303 	lslle.w	r3, r2, r3
 801da76:	4613      	movgt	r3, r2
 801da78:	4618      	mov	r0, r3
 801da7a:	e7e3      	b.n	801da44 <__ulp+0x14>
 801da7c:	7ff00000 	.word	0x7ff00000

0801da80 <__b2d>:
 801da80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da82:	6905      	ldr	r5, [r0, #16]
 801da84:	f100 0714 	add.w	r7, r0, #20
 801da88:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801da8c:	1f2e      	subs	r6, r5, #4
 801da8e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801da92:	4620      	mov	r0, r4
 801da94:	f7ff fdc4 	bl	801d620 <__hi0bits>
 801da98:	f1c0 0320 	rsb	r3, r0, #32
 801da9c:	280a      	cmp	r0, #10
 801da9e:	600b      	str	r3, [r1, #0]
 801daa0:	f8df c074 	ldr.w	ip, [pc, #116]	; 801db18 <__b2d+0x98>
 801daa4:	dc14      	bgt.n	801dad0 <__b2d+0x50>
 801daa6:	f1c0 0e0b 	rsb	lr, r0, #11
 801daaa:	fa24 f10e 	lsr.w	r1, r4, lr
 801daae:	42b7      	cmp	r7, r6
 801dab0:	ea41 030c 	orr.w	r3, r1, ip
 801dab4:	bf34      	ite	cc
 801dab6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801daba:	2100      	movcs	r1, #0
 801dabc:	3015      	adds	r0, #21
 801dabe:	fa04 f000 	lsl.w	r0, r4, r0
 801dac2:	fa21 f10e 	lsr.w	r1, r1, lr
 801dac6:	ea40 0201 	orr.w	r2, r0, r1
 801daca:	ec43 2b10 	vmov	d0, r2, r3
 801dace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dad0:	42b7      	cmp	r7, r6
 801dad2:	bf3a      	itte	cc
 801dad4:	f1a5 0608 	subcc.w	r6, r5, #8
 801dad8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801dadc:	2100      	movcs	r1, #0
 801dade:	380b      	subs	r0, #11
 801dae0:	d015      	beq.n	801db0e <__b2d+0x8e>
 801dae2:	4084      	lsls	r4, r0
 801dae4:	f1c0 0520 	rsb	r5, r0, #32
 801dae8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801daec:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801daf0:	42be      	cmp	r6, r7
 801daf2:	fa21 fc05 	lsr.w	ip, r1, r5
 801daf6:	ea44 030c 	orr.w	r3, r4, ip
 801dafa:	bf8c      	ite	hi
 801dafc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801db00:	2400      	movls	r4, #0
 801db02:	fa01 f000 	lsl.w	r0, r1, r0
 801db06:	40ec      	lsrs	r4, r5
 801db08:	ea40 0204 	orr.w	r2, r0, r4
 801db0c:	e7dd      	b.n	801daca <__b2d+0x4a>
 801db0e:	ea44 030c 	orr.w	r3, r4, ip
 801db12:	460a      	mov	r2, r1
 801db14:	e7d9      	b.n	801daca <__b2d+0x4a>
 801db16:	bf00      	nop
 801db18:	3ff00000 	.word	0x3ff00000

0801db1c <__d2b>:
 801db1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801db20:	460e      	mov	r6, r1
 801db22:	2101      	movs	r1, #1
 801db24:	ec59 8b10 	vmov	r8, r9, d0
 801db28:	4615      	mov	r5, r2
 801db2a:	f7ff fcb5 	bl	801d498 <_Balloc>
 801db2e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801db32:	4607      	mov	r7, r0
 801db34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801db38:	bb34      	cbnz	r4, 801db88 <__d2b+0x6c>
 801db3a:	9301      	str	r3, [sp, #4]
 801db3c:	f1b8 0300 	subs.w	r3, r8, #0
 801db40:	d027      	beq.n	801db92 <__d2b+0x76>
 801db42:	a802      	add	r0, sp, #8
 801db44:	f840 3d08 	str.w	r3, [r0, #-8]!
 801db48:	f7ff fd89 	bl	801d65e <__lo0bits>
 801db4c:	9900      	ldr	r1, [sp, #0]
 801db4e:	b1f0      	cbz	r0, 801db8e <__d2b+0x72>
 801db50:	9a01      	ldr	r2, [sp, #4]
 801db52:	f1c0 0320 	rsb	r3, r0, #32
 801db56:	fa02 f303 	lsl.w	r3, r2, r3
 801db5a:	430b      	orrs	r3, r1
 801db5c:	40c2      	lsrs	r2, r0
 801db5e:	617b      	str	r3, [r7, #20]
 801db60:	9201      	str	r2, [sp, #4]
 801db62:	9b01      	ldr	r3, [sp, #4]
 801db64:	61bb      	str	r3, [r7, #24]
 801db66:	2b00      	cmp	r3, #0
 801db68:	bf14      	ite	ne
 801db6a:	2102      	movne	r1, #2
 801db6c:	2101      	moveq	r1, #1
 801db6e:	6139      	str	r1, [r7, #16]
 801db70:	b1c4      	cbz	r4, 801dba4 <__d2b+0x88>
 801db72:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801db76:	4404      	add	r4, r0
 801db78:	6034      	str	r4, [r6, #0]
 801db7a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801db7e:	6028      	str	r0, [r5, #0]
 801db80:	4638      	mov	r0, r7
 801db82:	b003      	add	sp, #12
 801db84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801db88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801db8c:	e7d5      	b.n	801db3a <__d2b+0x1e>
 801db8e:	6179      	str	r1, [r7, #20]
 801db90:	e7e7      	b.n	801db62 <__d2b+0x46>
 801db92:	a801      	add	r0, sp, #4
 801db94:	f7ff fd63 	bl	801d65e <__lo0bits>
 801db98:	9b01      	ldr	r3, [sp, #4]
 801db9a:	617b      	str	r3, [r7, #20]
 801db9c:	2101      	movs	r1, #1
 801db9e:	6139      	str	r1, [r7, #16]
 801dba0:	3020      	adds	r0, #32
 801dba2:	e7e5      	b.n	801db70 <__d2b+0x54>
 801dba4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801dba8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801dbac:	6030      	str	r0, [r6, #0]
 801dbae:	6918      	ldr	r0, [r3, #16]
 801dbb0:	f7ff fd36 	bl	801d620 <__hi0bits>
 801dbb4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801dbb8:	e7e1      	b.n	801db7e <__d2b+0x62>

0801dbba <__ratio>:
 801dbba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbbe:	4688      	mov	r8, r1
 801dbc0:	4669      	mov	r1, sp
 801dbc2:	4681      	mov	r9, r0
 801dbc4:	f7ff ff5c 	bl	801da80 <__b2d>
 801dbc8:	a901      	add	r1, sp, #4
 801dbca:	4640      	mov	r0, r8
 801dbcc:	ec57 6b10 	vmov	r6, r7, d0
 801dbd0:	ee10 4a10 	vmov	r4, s0
 801dbd4:	f7ff ff54 	bl	801da80 <__b2d>
 801dbd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801dbdc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801dbe0:	eba3 0c02 	sub.w	ip, r3, r2
 801dbe4:	e9dd 3200 	ldrd	r3, r2, [sp]
 801dbe8:	1a9b      	subs	r3, r3, r2
 801dbea:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801dbee:	ec51 0b10 	vmov	r0, r1, d0
 801dbf2:	2b00      	cmp	r3, #0
 801dbf4:	ee10 aa10 	vmov	sl, s0
 801dbf8:	bfce      	itee	gt
 801dbfa:	463a      	movgt	r2, r7
 801dbfc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801dc00:	460a      	movle	r2, r1
 801dc02:	463d      	mov	r5, r7
 801dc04:	468b      	mov	fp, r1
 801dc06:	bfcc      	ite	gt
 801dc08:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801dc0c:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801dc10:	ec45 4b17 	vmov	d7, r4, r5
 801dc14:	ec4b ab16 	vmov	d6, sl, fp
 801dc18:	ee87 0b06 	vdiv.f64	d0, d7, d6
 801dc1c:	b003      	add	sp, #12
 801dc1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dc22 <__copybits>:
 801dc22:	3901      	subs	r1, #1
 801dc24:	b510      	push	{r4, lr}
 801dc26:	1149      	asrs	r1, r1, #5
 801dc28:	6914      	ldr	r4, [r2, #16]
 801dc2a:	3101      	adds	r1, #1
 801dc2c:	f102 0314 	add.w	r3, r2, #20
 801dc30:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801dc34:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801dc38:	42a3      	cmp	r3, r4
 801dc3a:	4602      	mov	r2, r0
 801dc3c:	d303      	bcc.n	801dc46 <__copybits+0x24>
 801dc3e:	2300      	movs	r3, #0
 801dc40:	428a      	cmp	r2, r1
 801dc42:	d305      	bcc.n	801dc50 <__copybits+0x2e>
 801dc44:	bd10      	pop	{r4, pc}
 801dc46:	f853 2b04 	ldr.w	r2, [r3], #4
 801dc4a:	f840 2b04 	str.w	r2, [r0], #4
 801dc4e:	e7f3      	b.n	801dc38 <__copybits+0x16>
 801dc50:	f842 3b04 	str.w	r3, [r2], #4
 801dc54:	e7f4      	b.n	801dc40 <__copybits+0x1e>

0801dc56 <__any_on>:
 801dc56:	f100 0214 	add.w	r2, r0, #20
 801dc5a:	6900      	ldr	r0, [r0, #16]
 801dc5c:	114b      	asrs	r3, r1, #5
 801dc5e:	4298      	cmp	r0, r3
 801dc60:	b510      	push	{r4, lr}
 801dc62:	db11      	blt.n	801dc88 <__any_on+0x32>
 801dc64:	dd0a      	ble.n	801dc7c <__any_on+0x26>
 801dc66:	f011 011f 	ands.w	r1, r1, #31
 801dc6a:	d007      	beq.n	801dc7c <__any_on+0x26>
 801dc6c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801dc70:	fa24 f001 	lsr.w	r0, r4, r1
 801dc74:	fa00 f101 	lsl.w	r1, r0, r1
 801dc78:	428c      	cmp	r4, r1
 801dc7a:	d10b      	bne.n	801dc94 <__any_on+0x3e>
 801dc7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801dc80:	4293      	cmp	r3, r2
 801dc82:	d803      	bhi.n	801dc8c <__any_on+0x36>
 801dc84:	2000      	movs	r0, #0
 801dc86:	bd10      	pop	{r4, pc}
 801dc88:	4603      	mov	r3, r0
 801dc8a:	e7f7      	b.n	801dc7c <__any_on+0x26>
 801dc8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801dc90:	2900      	cmp	r1, #0
 801dc92:	d0f5      	beq.n	801dc80 <__any_on+0x2a>
 801dc94:	2001      	movs	r0, #1
 801dc96:	e7f6      	b.n	801dc86 <__any_on+0x30>

0801dc98 <_calloc_r>:
 801dc98:	b538      	push	{r3, r4, r5, lr}
 801dc9a:	fb02 f401 	mul.w	r4, r2, r1
 801dc9e:	4621      	mov	r1, r4
 801dca0:	f7fc fa34 	bl	801a10c <_malloc_r>
 801dca4:	4605      	mov	r5, r0
 801dca6:	b118      	cbz	r0, 801dcb0 <_calloc_r+0x18>
 801dca8:	4622      	mov	r2, r4
 801dcaa:	2100      	movs	r1, #0
 801dcac:	f7fc f9d7 	bl	801a05e <memset>
 801dcb0:	4628      	mov	r0, r5
 801dcb2:	bd38      	pop	{r3, r4, r5, pc}

0801dcb4 <__ssputs_r>:
 801dcb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dcb8:	688e      	ldr	r6, [r1, #8]
 801dcba:	429e      	cmp	r6, r3
 801dcbc:	4682      	mov	sl, r0
 801dcbe:	460c      	mov	r4, r1
 801dcc0:	4690      	mov	r8, r2
 801dcc2:	4699      	mov	r9, r3
 801dcc4:	d837      	bhi.n	801dd36 <__ssputs_r+0x82>
 801dcc6:	898a      	ldrh	r2, [r1, #12]
 801dcc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801dccc:	d031      	beq.n	801dd32 <__ssputs_r+0x7e>
 801dcce:	6825      	ldr	r5, [r4, #0]
 801dcd0:	6909      	ldr	r1, [r1, #16]
 801dcd2:	1a6f      	subs	r7, r5, r1
 801dcd4:	6965      	ldr	r5, [r4, #20]
 801dcd6:	2302      	movs	r3, #2
 801dcd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dcdc:	fb95 f5f3 	sdiv	r5, r5, r3
 801dce0:	f109 0301 	add.w	r3, r9, #1
 801dce4:	443b      	add	r3, r7
 801dce6:	429d      	cmp	r5, r3
 801dce8:	bf38      	it	cc
 801dcea:	461d      	movcc	r5, r3
 801dcec:	0553      	lsls	r3, r2, #21
 801dcee:	d530      	bpl.n	801dd52 <__ssputs_r+0x9e>
 801dcf0:	4629      	mov	r1, r5
 801dcf2:	f7fc fa0b 	bl	801a10c <_malloc_r>
 801dcf6:	4606      	mov	r6, r0
 801dcf8:	b950      	cbnz	r0, 801dd10 <__ssputs_r+0x5c>
 801dcfa:	230c      	movs	r3, #12
 801dcfc:	f8ca 3000 	str.w	r3, [sl]
 801dd00:	89a3      	ldrh	r3, [r4, #12]
 801dd02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dd06:	81a3      	strh	r3, [r4, #12]
 801dd08:	f04f 30ff 	mov.w	r0, #4294967295
 801dd0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dd10:	463a      	mov	r2, r7
 801dd12:	6921      	ldr	r1, [r4, #16]
 801dd14:	f7fc f97f 	bl	801a016 <memcpy>
 801dd18:	89a3      	ldrh	r3, [r4, #12]
 801dd1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801dd1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dd22:	81a3      	strh	r3, [r4, #12]
 801dd24:	6126      	str	r6, [r4, #16]
 801dd26:	6165      	str	r5, [r4, #20]
 801dd28:	443e      	add	r6, r7
 801dd2a:	1bed      	subs	r5, r5, r7
 801dd2c:	6026      	str	r6, [r4, #0]
 801dd2e:	60a5      	str	r5, [r4, #8]
 801dd30:	464e      	mov	r6, r9
 801dd32:	454e      	cmp	r6, r9
 801dd34:	d900      	bls.n	801dd38 <__ssputs_r+0x84>
 801dd36:	464e      	mov	r6, r9
 801dd38:	4632      	mov	r2, r6
 801dd3a:	4641      	mov	r1, r8
 801dd3c:	6820      	ldr	r0, [r4, #0]
 801dd3e:	f7fc f975 	bl	801a02c <memmove>
 801dd42:	68a3      	ldr	r3, [r4, #8]
 801dd44:	1b9b      	subs	r3, r3, r6
 801dd46:	60a3      	str	r3, [r4, #8]
 801dd48:	6823      	ldr	r3, [r4, #0]
 801dd4a:	441e      	add	r6, r3
 801dd4c:	6026      	str	r6, [r4, #0]
 801dd4e:	2000      	movs	r0, #0
 801dd50:	e7dc      	b.n	801dd0c <__ssputs_r+0x58>
 801dd52:	462a      	mov	r2, r5
 801dd54:	f000 fa74 	bl	801e240 <_realloc_r>
 801dd58:	4606      	mov	r6, r0
 801dd5a:	2800      	cmp	r0, #0
 801dd5c:	d1e2      	bne.n	801dd24 <__ssputs_r+0x70>
 801dd5e:	6921      	ldr	r1, [r4, #16]
 801dd60:	4650      	mov	r0, sl
 801dd62:	f7fc f985 	bl	801a070 <_free_r>
 801dd66:	e7c8      	b.n	801dcfa <__ssputs_r+0x46>

0801dd68 <_svfiprintf_r>:
 801dd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd6c:	461d      	mov	r5, r3
 801dd6e:	898b      	ldrh	r3, [r1, #12]
 801dd70:	061f      	lsls	r7, r3, #24
 801dd72:	b09d      	sub	sp, #116	; 0x74
 801dd74:	4680      	mov	r8, r0
 801dd76:	460c      	mov	r4, r1
 801dd78:	4616      	mov	r6, r2
 801dd7a:	d50f      	bpl.n	801dd9c <_svfiprintf_r+0x34>
 801dd7c:	690b      	ldr	r3, [r1, #16]
 801dd7e:	b96b      	cbnz	r3, 801dd9c <_svfiprintf_r+0x34>
 801dd80:	2140      	movs	r1, #64	; 0x40
 801dd82:	f7fc f9c3 	bl	801a10c <_malloc_r>
 801dd86:	6020      	str	r0, [r4, #0]
 801dd88:	6120      	str	r0, [r4, #16]
 801dd8a:	b928      	cbnz	r0, 801dd98 <_svfiprintf_r+0x30>
 801dd8c:	230c      	movs	r3, #12
 801dd8e:	f8c8 3000 	str.w	r3, [r8]
 801dd92:	f04f 30ff 	mov.w	r0, #4294967295
 801dd96:	e0c8      	b.n	801df2a <_svfiprintf_r+0x1c2>
 801dd98:	2340      	movs	r3, #64	; 0x40
 801dd9a:	6163      	str	r3, [r4, #20]
 801dd9c:	2300      	movs	r3, #0
 801dd9e:	9309      	str	r3, [sp, #36]	; 0x24
 801dda0:	2320      	movs	r3, #32
 801dda2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801dda6:	2330      	movs	r3, #48	; 0x30
 801dda8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ddac:	9503      	str	r5, [sp, #12]
 801ddae:	f04f 0b01 	mov.w	fp, #1
 801ddb2:	4637      	mov	r7, r6
 801ddb4:	463d      	mov	r5, r7
 801ddb6:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ddba:	b10b      	cbz	r3, 801ddc0 <_svfiprintf_r+0x58>
 801ddbc:	2b25      	cmp	r3, #37	; 0x25
 801ddbe:	d13e      	bne.n	801de3e <_svfiprintf_r+0xd6>
 801ddc0:	ebb7 0a06 	subs.w	sl, r7, r6
 801ddc4:	d00b      	beq.n	801ddde <_svfiprintf_r+0x76>
 801ddc6:	4653      	mov	r3, sl
 801ddc8:	4632      	mov	r2, r6
 801ddca:	4621      	mov	r1, r4
 801ddcc:	4640      	mov	r0, r8
 801ddce:	f7ff ff71 	bl	801dcb4 <__ssputs_r>
 801ddd2:	3001      	adds	r0, #1
 801ddd4:	f000 80a4 	beq.w	801df20 <_svfiprintf_r+0x1b8>
 801ddd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ddda:	4453      	add	r3, sl
 801dddc:	9309      	str	r3, [sp, #36]	; 0x24
 801ddde:	783b      	ldrb	r3, [r7, #0]
 801dde0:	2b00      	cmp	r3, #0
 801dde2:	f000 809d 	beq.w	801df20 <_svfiprintf_r+0x1b8>
 801dde6:	2300      	movs	r3, #0
 801dde8:	f04f 32ff 	mov.w	r2, #4294967295
 801ddec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ddf0:	9304      	str	r3, [sp, #16]
 801ddf2:	9307      	str	r3, [sp, #28]
 801ddf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ddf8:	931a      	str	r3, [sp, #104]	; 0x68
 801ddfa:	462f      	mov	r7, r5
 801ddfc:	2205      	movs	r2, #5
 801ddfe:	f817 1b01 	ldrb.w	r1, [r7], #1
 801de02:	4850      	ldr	r0, [pc, #320]	; (801df44 <_svfiprintf_r+0x1dc>)
 801de04:	f7e2 fa24 	bl	8000250 <memchr>
 801de08:	9b04      	ldr	r3, [sp, #16]
 801de0a:	b9d0      	cbnz	r0, 801de42 <_svfiprintf_r+0xda>
 801de0c:	06d9      	lsls	r1, r3, #27
 801de0e:	bf44      	itt	mi
 801de10:	2220      	movmi	r2, #32
 801de12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801de16:	071a      	lsls	r2, r3, #28
 801de18:	bf44      	itt	mi
 801de1a:	222b      	movmi	r2, #43	; 0x2b
 801de1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801de20:	782a      	ldrb	r2, [r5, #0]
 801de22:	2a2a      	cmp	r2, #42	; 0x2a
 801de24:	d015      	beq.n	801de52 <_svfiprintf_r+0xea>
 801de26:	9a07      	ldr	r2, [sp, #28]
 801de28:	462f      	mov	r7, r5
 801de2a:	2000      	movs	r0, #0
 801de2c:	250a      	movs	r5, #10
 801de2e:	4639      	mov	r1, r7
 801de30:	f811 3b01 	ldrb.w	r3, [r1], #1
 801de34:	3b30      	subs	r3, #48	; 0x30
 801de36:	2b09      	cmp	r3, #9
 801de38:	d94d      	bls.n	801ded6 <_svfiprintf_r+0x16e>
 801de3a:	b1b8      	cbz	r0, 801de6c <_svfiprintf_r+0x104>
 801de3c:	e00f      	b.n	801de5e <_svfiprintf_r+0xf6>
 801de3e:	462f      	mov	r7, r5
 801de40:	e7b8      	b.n	801ddb4 <_svfiprintf_r+0x4c>
 801de42:	4a40      	ldr	r2, [pc, #256]	; (801df44 <_svfiprintf_r+0x1dc>)
 801de44:	1a80      	subs	r0, r0, r2
 801de46:	fa0b f000 	lsl.w	r0, fp, r0
 801de4a:	4318      	orrs	r0, r3
 801de4c:	9004      	str	r0, [sp, #16]
 801de4e:	463d      	mov	r5, r7
 801de50:	e7d3      	b.n	801ddfa <_svfiprintf_r+0x92>
 801de52:	9a03      	ldr	r2, [sp, #12]
 801de54:	1d11      	adds	r1, r2, #4
 801de56:	6812      	ldr	r2, [r2, #0]
 801de58:	9103      	str	r1, [sp, #12]
 801de5a:	2a00      	cmp	r2, #0
 801de5c:	db01      	blt.n	801de62 <_svfiprintf_r+0xfa>
 801de5e:	9207      	str	r2, [sp, #28]
 801de60:	e004      	b.n	801de6c <_svfiprintf_r+0x104>
 801de62:	4252      	negs	r2, r2
 801de64:	f043 0302 	orr.w	r3, r3, #2
 801de68:	9207      	str	r2, [sp, #28]
 801de6a:	9304      	str	r3, [sp, #16]
 801de6c:	783b      	ldrb	r3, [r7, #0]
 801de6e:	2b2e      	cmp	r3, #46	; 0x2e
 801de70:	d10c      	bne.n	801de8c <_svfiprintf_r+0x124>
 801de72:	787b      	ldrb	r3, [r7, #1]
 801de74:	2b2a      	cmp	r3, #42	; 0x2a
 801de76:	d133      	bne.n	801dee0 <_svfiprintf_r+0x178>
 801de78:	9b03      	ldr	r3, [sp, #12]
 801de7a:	1d1a      	adds	r2, r3, #4
 801de7c:	681b      	ldr	r3, [r3, #0]
 801de7e:	9203      	str	r2, [sp, #12]
 801de80:	2b00      	cmp	r3, #0
 801de82:	bfb8      	it	lt
 801de84:	f04f 33ff 	movlt.w	r3, #4294967295
 801de88:	3702      	adds	r7, #2
 801de8a:	9305      	str	r3, [sp, #20]
 801de8c:	4d2e      	ldr	r5, [pc, #184]	; (801df48 <_svfiprintf_r+0x1e0>)
 801de8e:	7839      	ldrb	r1, [r7, #0]
 801de90:	2203      	movs	r2, #3
 801de92:	4628      	mov	r0, r5
 801de94:	f7e2 f9dc 	bl	8000250 <memchr>
 801de98:	b138      	cbz	r0, 801deaa <_svfiprintf_r+0x142>
 801de9a:	2340      	movs	r3, #64	; 0x40
 801de9c:	1b40      	subs	r0, r0, r5
 801de9e:	fa03 f000 	lsl.w	r0, r3, r0
 801dea2:	9b04      	ldr	r3, [sp, #16]
 801dea4:	4303      	orrs	r3, r0
 801dea6:	3701      	adds	r7, #1
 801dea8:	9304      	str	r3, [sp, #16]
 801deaa:	7839      	ldrb	r1, [r7, #0]
 801deac:	4827      	ldr	r0, [pc, #156]	; (801df4c <_svfiprintf_r+0x1e4>)
 801deae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801deb2:	2206      	movs	r2, #6
 801deb4:	1c7e      	adds	r6, r7, #1
 801deb6:	f7e2 f9cb 	bl	8000250 <memchr>
 801deba:	2800      	cmp	r0, #0
 801debc:	d038      	beq.n	801df30 <_svfiprintf_r+0x1c8>
 801debe:	4b24      	ldr	r3, [pc, #144]	; (801df50 <_svfiprintf_r+0x1e8>)
 801dec0:	bb13      	cbnz	r3, 801df08 <_svfiprintf_r+0x1a0>
 801dec2:	9b03      	ldr	r3, [sp, #12]
 801dec4:	3307      	adds	r3, #7
 801dec6:	f023 0307 	bic.w	r3, r3, #7
 801deca:	3308      	adds	r3, #8
 801decc:	9303      	str	r3, [sp, #12]
 801dece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ded0:	444b      	add	r3, r9
 801ded2:	9309      	str	r3, [sp, #36]	; 0x24
 801ded4:	e76d      	b.n	801ddb2 <_svfiprintf_r+0x4a>
 801ded6:	fb05 3202 	mla	r2, r5, r2, r3
 801deda:	2001      	movs	r0, #1
 801dedc:	460f      	mov	r7, r1
 801dede:	e7a6      	b.n	801de2e <_svfiprintf_r+0xc6>
 801dee0:	2300      	movs	r3, #0
 801dee2:	3701      	adds	r7, #1
 801dee4:	9305      	str	r3, [sp, #20]
 801dee6:	4619      	mov	r1, r3
 801dee8:	250a      	movs	r5, #10
 801deea:	4638      	mov	r0, r7
 801deec:	f810 2b01 	ldrb.w	r2, [r0], #1
 801def0:	3a30      	subs	r2, #48	; 0x30
 801def2:	2a09      	cmp	r2, #9
 801def4:	d903      	bls.n	801defe <_svfiprintf_r+0x196>
 801def6:	2b00      	cmp	r3, #0
 801def8:	d0c8      	beq.n	801de8c <_svfiprintf_r+0x124>
 801defa:	9105      	str	r1, [sp, #20]
 801defc:	e7c6      	b.n	801de8c <_svfiprintf_r+0x124>
 801defe:	fb05 2101 	mla	r1, r5, r1, r2
 801df02:	2301      	movs	r3, #1
 801df04:	4607      	mov	r7, r0
 801df06:	e7f0      	b.n	801deea <_svfiprintf_r+0x182>
 801df08:	ab03      	add	r3, sp, #12
 801df0a:	9300      	str	r3, [sp, #0]
 801df0c:	4622      	mov	r2, r4
 801df0e:	4b11      	ldr	r3, [pc, #68]	; (801df54 <_svfiprintf_r+0x1ec>)
 801df10:	a904      	add	r1, sp, #16
 801df12:	4640      	mov	r0, r8
 801df14:	f7fc f9dc 	bl	801a2d0 <_printf_float>
 801df18:	f1b0 3fff 	cmp.w	r0, #4294967295
 801df1c:	4681      	mov	r9, r0
 801df1e:	d1d6      	bne.n	801dece <_svfiprintf_r+0x166>
 801df20:	89a3      	ldrh	r3, [r4, #12]
 801df22:	065b      	lsls	r3, r3, #25
 801df24:	f53f af35 	bmi.w	801dd92 <_svfiprintf_r+0x2a>
 801df28:	9809      	ldr	r0, [sp, #36]	; 0x24
 801df2a:	b01d      	add	sp, #116	; 0x74
 801df2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df30:	ab03      	add	r3, sp, #12
 801df32:	9300      	str	r3, [sp, #0]
 801df34:	4622      	mov	r2, r4
 801df36:	4b07      	ldr	r3, [pc, #28]	; (801df54 <_svfiprintf_r+0x1ec>)
 801df38:	a904      	add	r1, sp, #16
 801df3a:	4640      	mov	r0, r8
 801df3c:	f7fc fc6a 	bl	801a814 <_printf_i>
 801df40:	e7ea      	b.n	801df18 <_svfiprintf_r+0x1b0>
 801df42:	bf00      	nop
 801df44:	08024a1c 	.word	0x08024a1c
 801df48:	08024a22 	.word	0x08024a22
 801df4c:	08024a26 	.word	0x08024a26
 801df50:	0801a2d1 	.word	0x0801a2d1
 801df54:	0801dcb5 	.word	0x0801dcb5

0801df58 <__sfputc_r>:
 801df58:	6893      	ldr	r3, [r2, #8]
 801df5a:	3b01      	subs	r3, #1
 801df5c:	2b00      	cmp	r3, #0
 801df5e:	b410      	push	{r4}
 801df60:	6093      	str	r3, [r2, #8]
 801df62:	da08      	bge.n	801df76 <__sfputc_r+0x1e>
 801df64:	6994      	ldr	r4, [r2, #24]
 801df66:	42a3      	cmp	r3, r4
 801df68:	db01      	blt.n	801df6e <__sfputc_r+0x16>
 801df6a:	290a      	cmp	r1, #10
 801df6c:	d103      	bne.n	801df76 <__sfputc_r+0x1e>
 801df6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801df72:	f7fd bf6b 	b.w	801be4c <__swbuf_r>
 801df76:	6813      	ldr	r3, [r2, #0]
 801df78:	1c58      	adds	r0, r3, #1
 801df7a:	6010      	str	r0, [r2, #0]
 801df7c:	7019      	strb	r1, [r3, #0]
 801df7e:	4608      	mov	r0, r1
 801df80:	f85d 4b04 	ldr.w	r4, [sp], #4
 801df84:	4770      	bx	lr

0801df86 <__sfputs_r>:
 801df86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df88:	4606      	mov	r6, r0
 801df8a:	460f      	mov	r7, r1
 801df8c:	4614      	mov	r4, r2
 801df8e:	18d5      	adds	r5, r2, r3
 801df90:	42ac      	cmp	r4, r5
 801df92:	d101      	bne.n	801df98 <__sfputs_r+0x12>
 801df94:	2000      	movs	r0, #0
 801df96:	e007      	b.n	801dfa8 <__sfputs_r+0x22>
 801df98:	463a      	mov	r2, r7
 801df9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801df9e:	4630      	mov	r0, r6
 801dfa0:	f7ff ffda 	bl	801df58 <__sfputc_r>
 801dfa4:	1c43      	adds	r3, r0, #1
 801dfa6:	d1f3      	bne.n	801df90 <__sfputs_r+0xa>
 801dfa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801dfac <_vfiprintf_r>:
 801dfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfb0:	460c      	mov	r4, r1
 801dfb2:	b09d      	sub	sp, #116	; 0x74
 801dfb4:	4617      	mov	r7, r2
 801dfb6:	461d      	mov	r5, r3
 801dfb8:	4606      	mov	r6, r0
 801dfba:	b118      	cbz	r0, 801dfc4 <_vfiprintf_r+0x18>
 801dfbc:	6983      	ldr	r3, [r0, #24]
 801dfbe:	b90b      	cbnz	r3, 801dfc4 <_vfiprintf_r+0x18>
 801dfc0:	f7fb ff46 	bl	8019e50 <__sinit>
 801dfc4:	4b7c      	ldr	r3, [pc, #496]	; (801e1b8 <_vfiprintf_r+0x20c>)
 801dfc6:	429c      	cmp	r4, r3
 801dfc8:	d158      	bne.n	801e07c <_vfiprintf_r+0xd0>
 801dfca:	6874      	ldr	r4, [r6, #4]
 801dfcc:	89a3      	ldrh	r3, [r4, #12]
 801dfce:	0718      	lsls	r0, r3, #28
 801dfd0:	d55e      	bpl.n	801e090 <_vfiprintf_r+0xe4>
 801dfd2:	6923      	ldr	r3, [r4, #16]
 801dfd4:	2b00      	cmp	r3, #0
 801dfd6:	d05b      	beq.n	801e090 <_vfiprintf_r+0xe4>
 801dfd8:	2300      	movs	r3, #0
 801dfda:	9309      	str	r3, [sp, #36]	; 0x24
 801dfdc:	2320      	movs	r3, #32
 801dfde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801dfe2:	2330      	movs	r3, #48	; 0x30
 801dfe4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801dfe8:	9503      	str	r5, [sp, #12]
 801dfea:	f04f 0b01 	mov.w	fp, #1
 801dfee:	46b8      	mov	r8, r7
 801dff0:	4645      	mov	r5, r8
 801dff2:	f815 3b01 	ldrb.w	r3, [r5], #1
 801dff6:	b10b      	cbz	r3, 801dffc <_vfiprintf_r+0x50>
 801dff8:	2b25      	cmp	r3, #37	; 0x25
 801dffa:	d154      	bne.n	801e0a6 <_vfiprintf_r+0xfa>
 801dffc:	ebb8 0a07 	subs.w	sl, r8, r7
 801e000:	d00b      	beq.n	801e01a <_vfiprintf_r+0x6e>
 801e002:	4653      	mov	r3, sl
 801e004:	463a      	mov	r2, r7
 801e006:	4621      	mov	r1, r4
 801e008:	4630      	mov	r0, r6
 801e00a:	f7ff ffbc 	bl	801df86 <__sfputs_r>
 801e00e:	3001      	adds	r0, #1
 801e010:	f000 80c2 	beq.w	801e198 <_vfiprintf_r+0x1ec>
 801e014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e016:	4453      	add	r3, sl
 801e018:	9309      	str	r3, [sp, #36]	; 0x24
 801e01a:	f898 3000 	ldrb.w	r3, [r8]
 801e01e:	2b00      	cmp	r3, #0
 801e020:	f000 80ba 	beq.w	801e198 <_vfiprintf_r+0x1ec>
 801e024:	2300      	movs	r3, #0
 801e026:	f04f 32ff 	mov.w	r2, #4294967295
 801e02a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e02e:	9304      	str	r3, [sp, #16]
 801e030:	9307      	str	r3, [sp, #28]
 801e032:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e036:	931a      	str	r3, [sp, #104]	; 0x68
 801e038:	46a8      	mov	r8, r5
 801e03a:	2205      	movs	r2, #5
 801e03c:	f818 1b01 	ldrb.w	r1, [r8], #1
 801e040:	485e      	ldr	r0, [pc, #376]	; (801e1bc <_vfiprintf_r+0x210>)
 801e042:	f7e2 f905 	bl	8000250 <memchr>
 801e046:	9b04      	ldr	r3, [sp, #16]
 801e048:	bb78      	cbnz	r0, 801e0aa <_vfiprintf_r+0xfe>
 801e04a:	06d9      	lsls	r1, r3, #27
 801e04c:	bf44      	itt	mi
 801e04e:	2220      	movmi	r2, #32
 801e050:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801e054:	071a      	lsls	r2, r3, #28
 801e056:	bf44      	itt	mi
 801e058:	222b      	movmi	r2, #43	; 0x2b
 801e05a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801e05e:	782a      	ldrb	r2, [r5, #0]
 801e060:	2a2a      	cmp	r2, #42	; 0x2a
 801e062:	d02a      	beq.n	801e0ba <_vfiprintf_r+0x10e>
 801e064:	9a07      	ldr	r2, [sp, #28]
 801e066:	46a8      	mov	r8, r5
 801e068:	2000      	movs	r0, #0
 801e06a:	250a      	movs	r5, #10
 801e06c:	4641      	mov	r1, r8
 801e06e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e072:	3b30      	subs	r3, #48	; 0x30
 801e074:	2b09      	cmp	r3, #9
 801e076:	d969      	bls.n	801e14c <_vfiprintf_r+0x1a0>
 801e078:	b360      	cbz	r0, 801e0d4 <_vfiprintf_r+0x128>
 801e07a:	e024      	b.n	801e0c6 <_vfiprintf_r+0x11a>
 801e07c:	4b50      	ldr	r3, [pc, #320]	; (801e1c0 <_vfiprintf_r+0x214>)
 801e07e:	429c      	cmp	r4, r3
 801e080:	d101      	bne.n	801e086 <_vfiprintf_r+0xda>
 801e082:	68b4      	ldr	r4, [r6, #8]
 801e084:	e7a2      	b.n	801dfcc <_vfiprintf_r+0x20>
 801e086:	4b4f      	ldr	r3, [pc, #316]	; (801e1c4 <_vfiprintf_r+0x218>)
 801e088:	429c      	cmp	r4, r3
 801e08a:	bf08      	it	eq
 801e08c:	68f4      	ldreq	r4, [r6, #12]
 801e08e:	e79d      	b.n	801dfcc <_vfiprintf_r+0x20>
 801e090:	4621      	mov	r1, r4
 801e092:	4630      	mov	r0, r6
 801e094:	f7fd ff4c 	bl	801bf30 <__swsetup_r>
 801e098:	2800      	cmp	r0, #0
 801e09a:	d09d      	beq.n	801dfd8 <_vfiprintf_r+0x2c>
 801e09c:	f04f 30ff 	mov.w	r0, #4294967295
 801e0a0:	b01d      	add	sp, #116	; 0x74
 801e0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0a6:	46a8      	mov	r8, r5
 801e0a8:	e7a2      	b.n	801dff0 <_vfiprintf_r+0x44>
 801e0aa:	4a44      	ldr	r2, [pc, #272]	; (801e1bc <_vfiprintf_r+0x210>)
 801e0ac:	1a80      	subs	r0, r0, r2
 801e0ae:	fa0b f000 	lsl.w	r0, fp, r0
 801e0b2:	4318      	orrs	r0, r3
 801e0b4:	9004      	str	r0, [sp, #16]
 801e0b6:	4645      	mov	r5, r8
 801e0b8:	e7be      	b.n	801e038 <_vfiprintf_r+0x8c>
 801e0ba:	9a03      	ldr	r2, [sp, #12]
 801e0bc:	1d11      	adds	r1, r2, #4
 801e0be:	6812      	ldr	r2, [r2, #0]
 801e0c0:	9103      	str	r1, [sp, #12]
 801e0c2:	2a00      	cmp	r2, #0
 801e0c4:	db01      	blt.n	801e0ca <_vfiprintf_r+0x11e>
 801e0c6:	9207      	str	r2, [sp, #28]
 801e0c8:	e004      	b.n	801e0d4 <_vfiprintf_r+0x128>
 801e0ca:	4252      	negs	r2, r2
 801e0cc:	f043 0302 	orr.w	r3, r3, #2
 801e0d0:	9207      	str	r2, [sp, #28]
 801e0d2:	9304      	str	r3, [sp, #16]
 801e0d4:	f898 3000 	ldrb.w	r3, [r8]
 801e0d8:	2b2e      	cmp	r3, #46	; 0x2e
 801e0da:	d10e      	bne.n	801e0fa <_vfiprintf_r+0x14e>
 801e0dc:	f898 3001 	ldrb.w	r3, [r8, #1]
 801e0e0:	2b2a      	cmp	r3, #42	; 0x2a
 801e0e2:	d138      	bne.n	801e156 <_vfiprintf_r+0x1aa>
 801e0e4:	9b03      	ldr	r3, [sp, #12]
 801e0e6:	1d1a      	adds	r2, r3, #4
 801e0e8:	681b      	ldr	r3, [r3, #0]
 801e0ea:	9203      	str	r2, [sp, #12]
 801e0ec:	2b00      	cmp	r3, #0
 801e0ee:	bfb8      	it	lt
 801e0f0:	f04f 33ff 	movlt.w	r3, #4294967295
 801e0f4:	f108 0802 	add.w	r8, r8, #2
 801e0f8:	9305      	str	r3, [sp, #20]
 801e0fa:	4d33      	ldr	r5, [pc, #204]	; (801e1c8 <_vfiprintf_r+0x21c>)
 801e0fc:	f898 1000 	ldrb.w	r1, [r8]
 801e100:	2203      	movs	r2, #3
 801e102:	4628      	mov	r0, r5
 801e104:	f7e2 f8a4 	bl	8000250 <memchr>
 801e108:	b140      	cbz	r0, 801e11c <_vfiprintf_r+0x170>
 801e10a:	2340      	movs	r3, #64	; 0x40
 801e10c:	1b40      	subs	r0, r0, r5
 801e10e:	fa03 f000 	lsl.w	r0, r3, r0
 801e112:	9b04      	ldr	r3, [sp, #16]
 801e114:	4303      	orrs	r3, r0
 801e116:	f108 0801 	add.w	r8, r8, #1
 801e11a:	9304      	str	r3, [sp, #16]
 801e11c:	f898 1000 	ldrb.w	r1, [r8]
 801e120:	482a      	ldr	r0, [pc, #168]	; (801e1cc <_vfiprintf_r+0x220>)
 801e122:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e126:	2206      	movs	r2, #6
 801e128:	f108 0701 	add.w	r7, r8, #1
 801e12c:	f7e2 f890 	bl	8000250 <memchr>
 801e130:	2800      	cmp	r0, #0
 801e132:	d037      	beq.n	801e1a4 <_vfiprintf_r+0x1f8>
 801e134:	4b26      	ldr	r3, [pc, #152]	; (801e1d0 <_vfiprintf_r+0x224>)
 801e136:	bb1b      	cbnz	r3, 801e180 <_vfiprintf_r+0x1d4>
 801e138:	9b03      	ldr	r3, [sp, #12]
 801e13a:	3307      	adds	r3, #7
 801e13c:	f023 0307 	bic.w	r3, r3, #7
 801e140:	3308      	adds	r3, #8
 801e142:	9303      	str	r3, [sp, #12]
 801e144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e146:	444b      	add	r3, r9
 801e148:	9309      	str	r3, [sp, #36]	; 0x24
 801e14a:	e750      	b.n	801dfee <_vfiprintf_r+0x42>
 801e14c:	fb05 3202 	mla	r2, r5, r2, r3
 801e150:	2001      	movs	r0, #1
 801e152:	4688      	mov	r8, r1
 801e154:	e78a      	b.n	801e06c <_vfiprintf_r+0xc0>
 801e156:	2300      	movs	r3, #0
 801e158:	f108 0801 	add.w	r8, r8, #1
 801e15c:	9305      	str	r3, [sp, #20]
 801e15e:	4619      	mov	r1, r3
 801e160:	250a      	movs	r5, #10
 801e162:	4640      	mov	r0, r8
 801e164:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e168:	3a30      	subs	r2, #48	; 0x30
 801e16a:	2a09      	cmp	r2, #9
 801e16c:	d903      	bls.n	801e176 <_vfiprintf_r+0x1ca>
 801e16e:	2b00      	cmp	r3, #0
 801e170:	d0c3      	beq.n	801e0fa <_vfiprintf_r+0x14e>
 801e172:	9105      	str	r1, [sp, #20]
 801e174:	e7c1      	b.n	801e0fa <_vfiprintf_r+0x14e>
 801e176:	fb05 2101 	mla	r1, r5, r1, r2
 801e17a:	2301      	movs	r3, #1
 801e17c:	4680      	mov	r8, r0
 801e17e:	e7f0      	b.n	801e162 <_vfiprintf_r+0x1b6>
 801e180:	ab03      	add	r3, sp, #12
 801e182:	9300      	str	r3, [sp, #0]
 801e184:	4622      	mov	r2, r4
 801e186:	4b13      	ldr	r3, [pc, #76]	; (801e1d4 <_vfiprintf_r+0x228>)
 801e188:	a904      	add	r1, sp, #16
 801e18a:	4630      	mov	r0, r6
 801e18c:	f7fc f8a0 	bl	801a2d0 <_printf_float>
 801e190:	f1b0 3fff 	cmp.w	r0, #4294967295
 801e194:	4681      	mov	r9, r0
 801e196:	d1d5      	bne.n	801e144 <_vfiprintf_r+0x198>
 801e198:	89a3      	ldrh	r3, [r4, #12]
 801e19a:	065b      	lsls	r3, r3, #25
 801e19c:	f53f af7e 	bmi.w	801e09c <_vfiprintf_r+0xf0>
 801e1a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e1a2:	e77d      	b.n	801e0a0 <_vfiprintf_r+0xf4>
 801e1a4:	ab03      	add	r3, sp, #12
 801e1a6:	9300      	str	r3, [sp, #0]
 801e1a8:	4622      	mov	r2, r4
 801e1aa:	4b0a      	ldr	r3, [pc, #40]	; (801e1d4 <_vfiprintf_r+0x228>)
 801e1ac:	a904      	add	r1, sp, #16
 801e1ae:	4630      	mov	r0, r6
 801e1b0:	f7fc fb30 	bl	801a814 <_printf_i>
 801e1b4:	e7ec      	b.n	801e190 <_vfiprintf_r+0x1e4>
 801e1b6:	bf00      	nop
 801e1b8:	08024738 	.word	0x08024738
 801e1bc:	08024a1c 	.word	0x08024a1c
 801e1c0:	08024758 	.word	0x08024758
 801e1c4:	08024718 	.word	0x08024718
 801e1c8:	08024a22 	.word	0x08024a22
 801e1cc:	08024a26 	.word	0x08024a26
 801e1d0:	0801a2d1 	.word	0x0801a2d1
 801e1d4:	0801df87 	.word	0x0801df87

0801e1d8 <_read_r>:
 801e1d8:	b538      	push	{r3, r4, r5, lr}
 801e1da:	4c07      	ldr	r4, [pc, #28]	; (801e1f8 <_read_r+0x20>)
 801e1dc:	4605      	mov	r5, r0
 801e1de:	4608      	mov	r0, r1
 801e1e0:	4611      	mov	r1, r2
 801e1e2:	2200      	movs	r2, #0
 801e1e4:	6022      	str	r2, [r4, #0]
 801e1e6:	461a      	mov	r2, r3
 801e1e8:	f7e5 fc9a 	bl	8003b20 <_read>
 801e1ec:	1c43      	adds	r3, r0, #1
 801e1ee:	d102      	bne.n	801e1f6 <_read_r+0x1e>
 801e1f0:	6823      	ldr	r3, [r4, #0]
 801e1f2:	b103      	cbz	r3, 801e1f6 <_read_r+0x1e>
 801e1f4:	602b      	str	r3, [r5, #0]
 801e1f6:	bd38      	pop	{r3, r4, r5, pc}
 801e1f8:	20007cb8 	.word	0x20007cb8

0801e1fc <_fstat_r>:
 801e1fc:	b538      	push	{r3, r4, r5, lr}
 801e1fe:	4c07      	ldr	r4, [pc, #28]	; (801e21c <_fstat_r+0x20>)
 801e200:	2300      	movs	r3, #0
 801e202:	4605      	mov	r5, r0
 801e204:	4608      	mov	r0, r1
 801e206:	4611      	mov	r1, r2
 801e208:	6023      	str	r3, [r4, #0]
 801e20a:	f7e5 fcce 	bl	8003baa <_fstat>
 801e20e:	1c43      	adds	r3, r0, #1
 801e210:	d102      	bne.n	801e218 <_fstat_r+0x1c>
 801e212:	6823      	ldr	r3, [r4, #0]
 801e214:	b103      	cbz	r3, 801e218 <_fstat_r+0x1c>
 801e216:	602b      	str	r3, [r5, #0]
 801e218:	bd38      	pop	{r3, r4, r5, pc}
 801e21a:	bf00      	nop
 801e21c:	20007cb8 	.word	0x20007cb8

0801e220 <_isatty_r>:
 801e220:	b538      	push	{r3, r4, r5, lr}
 801e222:	4c06      	ldr	r4, [pc, #24]	; (801e23c <_isatty_r+0x1c>)
 801e224:	2300      	movs	r3, #0
 801e226:	4605      	mov	r5, r0
 801e228:	4608      	mov	r0, r1
 801e22a:	6023      	str	r3, [r4, #0]
 801e22c:	f7e5 fccd 	bl	8003bca <_isatty>
 801e230:	1c43      	adds	r3, r0, #1
 801e232:	d102      	bne.n	801e23a <_isatty_r+0x1a>
 801e234:	6823      	ldr	r3, [r4, #0]
 801e236:	b103      	cbz	r3, 801e23a <_isatty_r+0x1a>
 801e238:	602b      	str	r3, [r5, #0]
 801e23a:	bd38      	pop	{r3, r4, r5, pc}
 801e23c:	20007cb8 	.word	0x20007cb8

0801e240 <_realloc_r>:
 801e240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e242:	4607      	mov	r7, r0
 801e244:	4614      	mov	r4, r2
 801e246:	460e      	mov	r6, r1
 801e248:	b921      	cbnz	r1, 801e254 <_realloc_r+0x14>
 801e24a:	4611      	mov	r1, r2
 801e24c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e250:	f7fb bf5c 	b.w	801a10c <_malloc_r>
 801e254:	b922      	cbnz	r2, 801e260 <_realloc_r+0x20>
 801e256:	f7fb ff0b 	bl	801a070 <_free_r>
 801e25a:	4625      	mov	r5, r4
 801e25c:	4628      	mov	r0, r5
 801e25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e260:	f000 f814 	bl	801e28c <_malloc_usable_size_r>
 801e264:	42a0      	cmp	r0, r4
 801e266:	d20f      	bcs.n	801e288 <_realloc_r+0x48>
 801e268:	4621      	mov	r1, r4
 801e26a:	4638      	mov	r0, r7
 801e26c:	f7fb ff4e 	bl	801a10c <_malloc_r>
 801e270:	4605      	mov	r5, r0
 801e272:	2800      	cmp	r0, #0
 801e274:	d0f2      	beq.n	801e25c <_realloc_r+0x1c>
 801e276:	4631      	mov	r1, r6
 801e278:	4622      	mov	r2, r4
 801e27a:	f7fb fecc 	bl	801a016 <memcpy>
 801e27e:	4631      	mov	r1, r6
 801e280:	4638      	mov	r0, r7
 801e282:	f7fb fef5 	bl	801a070 <_free_r>
 801e286:	e7e9      	b.n	801e25c <_realloc_r+0x1c>
 801e288:	4635      	mov	r5, r6
 801e28a:	e7e7      	b.n	801e25c <_realloc_r+0x1c>

0801e28c <_malloc_usable_size_r>:
 801e28c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e290:	1f18      	subs	r0, r3, #4
 801e292:	2b00      	cmp	r3, #0
 801e294:	bfbc      	itt	lt
 801e296:	580b      	ldrlt	r3, [r1, r0]
 801e298:	18c0      	addlt	r0, r0, r3
 801e29a:	4770      	bx	lr

0801e29c <fmaxf>:
 801e29c:	b508      	push	{r3, lr}
 801e29e:	ed2d 8b02 	vpush	{d8}
 801e2a2:	eeb0 8a40 	vmov.f32	s16, s0
 801e2a6:	eef0 8a60 	vmov.f32	s17, s1
 801e2aa:	f000 f813 	bl	801e2d4 <__fpclassifyf>
 801e2ae:	b148      	cbz	r0, 801e2c4 <fmaxf+0x28>
 801e2b0:	eeb0 0a68 	vmov.f32	s0, s17
 801e2b4:	f000 f80e 	bl	801e2d4 <__fpclassifyf>
 801e2b8:	b130      	cbz	r0, 801e2c8 <fmaxf+0x2c>
 801e2ba:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801e2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2c2:	dc01      	bgt.n	801e2c8 <fmaxf+0x2c>
 801e2c4:	eeb0 8a68 	vmov.f32	s16, s17
 801e2c8:	eeb0 0a48 	vmov.f32	s0, s16
 801e2cc:	ecbd 8b02 	vpop	{d8}
 801e2d0:	bd08      	pop	{r3, pc}
	...

0801e2d4 <__fpclassifyf>:
 801e2d4:	ee10 3a10 	vmov	r3, s0
 801e2d8:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 801e2dc:	d00d      	beq.n	801e2fa <__fpclassifyf+0x26>
 801e2de:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 801e2e2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801e2e6:	d30a      	bcc.n	801e2fe <__fpclassifyf+0x2a>
 801e2e8:	4b07      	ldr	r3, [pc, #28]	; (801e308 <__fpclassifyf+0x34>)
 801e2ea:	1e42      	subs	r2, r0, #1
 801e2ec:	429a      	cmp	r2, r3
 801e2ee:	d908      	bls.n	801e302 <__fpclassifyf+0x2e>
 801e2f0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 801e2f4:	4258      	negs	r0, r3
 801e2f6:	4158      	adcs	r0, r3
 801e2f8:	4770      	bx	lr
 801e2fa:	2002      	movs	r0, #2
 801e2fc:	4770      	bx	lr
 801e2fe:	2004      	movs	r0, #4
 801e300:	4770      	bx	lr
 801e302:	2003      	movs	r0, #3
 801e304:	4770      	bx	lr
 801e306:	bf00      	nop
 801e308:	007ffffe 	.word	0x007ffffe
 801e30c:	00000000 	.word	0x00000000

0801e310 <pow>:
 801e310:	b570      	push	{r4, r5, r6, lr}
 801e312:	ed2d 8b0a 	vpush	{d8-d12}
 801e316:	eeb0 9b40 	vmov.f64	d9, d0
 801e31a:	eeb0 8b41 	vmov.f64	d8, d1
 801e31e:	4c8c      	ldr	r4, [pc, #560]	; (801e550 <pow+0x240>)
 801e320:	b08a      	sub	sp, #40	; 0x28
 801e322:	f000 f971 	bl	801e608 <__ieee754_pow>
 801e326:	f994 3000 	ldrsb.w	r3, [r4]
 801e32a:	eeb0 ab40 	vmov.f64	d10, d0
 801e32e:	1c5a      	adds	r2, r3, #1
 801e330:	4626      	mov	r6, r4
 801e332:	d04b      	beq.n	801e3cc <pow+0xbc>
 801e334:	eeb4 8b48 	vcmp.f64	d8, d8
 801e338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e33c:	d646      	bvs.n	801e3cc <pow+0xbc>
 801e33e:	eeb4 9b49 	vcmp.f64	d9, d9
 801e342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e346:	d719      	bvc.n	801e37c <pow+0x6c>
 801e348:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801e34c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e350:	d13c      	bne.n	801e3cc <pow+0xbc>
 801e352:	2201      	movs	r2, #1
 801e354:	9200      	str	r2, [sp, #0]
 801e356:	497f      	ldr	r1, [pc, #508]	; (801e554 <pow+0x244>)
 801e358:	4a7f      	ldr	r2, [pc, #508]	; (801e558 <pow+0x248>)
 801e35a:	9201      	str	r2, [sp, #4]
 801e35c:	2000      	movs	r0, #0
 801e35e:	2200      	movs	r2, #0
 801e360:	2b02      	cmp	r3, #2
 801e362:	9208      	str	r2, [sp, #32]
 801e364:	ed8d 9b02 	vstr	d9, [sp, #8]
 801e368:	ed8d 8b04 	vstr	d8, [sp, #16]
 801e36c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e370:	d02a      	beq.n	801e3c8 <pow+0xb8>
 801e372:	4668      	mov	r0, sp
 801e374:	f000 fce2 	bl	801ed3c <matherr>
 801e378:	bb00      	cbnz	r0, 801e3bc <pow+0xac>
 801e37a:	e04e      	b.n	801e41a <pow+0x10a>
 801e37c:	ed9f bb72 	vldr	d11, [pc, #456]	; 801e548 <pow+0x238>
 801e380:	eeb4 9b4b 	vcmp.f64	d9, d11
 801e384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e388:	eeb0 cb4b 	vmov.f64	d12, d11
 801e38c:	d14a      	bne.n	801e424 <pow+0x114>
 801e38e:	eeb4 8b4b 	vcmp.f64	d8, d11
 801e392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e396:	d11f      	bne.n	801e3d8 <pow+0xc8>
 801e398:	2201      	movs	r2, #1
 801e39a:	9200      	str	r2, [sp, #0]
 801e39c:	4a6e      	ldr	r2, [pc, #440]	; (801e558 <pow+0x248>)
 801e39e:	9201      	str	r2, [sp, #4]
 801e3a0:	2200      	movs	r2, #0
 801e3a2:	9208      	str	r2, [sp, #32]
 801e3a4:	ed8d 9b02 	vstr	d9, [sp, #8]
 801e3a8:	ed8d 8b04 	vstr	d8, [sp, #16]
 801e3ac:	ed8d bb06 	vstr	d11, [sp, #24]
 801e3b0:	2b00      	cmp	r3, #0
 801e3b2:	d0de      	beq.n	801e372 <pow+0x62>
 801e3b4:	4b67      	ldr	r3, [pc, #412]	; (801e554 <pow+0x244>)
 801e3b6:	2200      	movs	r2, #0
 801e3b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e3bc:	9b08      	ldr	r3, [sp, #32]
 801e3be:	b11b      	cbz	r3, 801e3c8 <pow+0xb8>
 801e3c0:	f000 fde0 	bl	801ef84 <__errno>
 801e3c4:	9b08      	ldr	r3, [sp, #32]
 801e3c6:	6003      	str	r3, [r0, #0]
 801e3c8:	ed9d ab06 	vldr	d10, [sp, #24]
 801e3cc:	eeb0 0b4a 	vmov.f64	d0, d10
 801e3d0:	b00a      	add	sp, #40	; 0x28
 801e3d2:	ecbd 8b0a 	vpop	{d8-d12}
 801e3d6:	bd70      	pop	{r4, r5, r6, pc}
 801e3d8:	eeb0 0b48 	vmov.f64	d0, d8
 801e3dc:	f000 fca6 	bl	801ed2c <finite>
 801e3e0:	2800      	cmp	r0, #0
 801e3e2:	d0f3      	beq.n	801e3cc <pow+0xbc>
 801e3e4:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 801e3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3ec:	d5ee      	bpl.n	801e3cc <pow+0xbc>
 801e3ee:	2301      	movs	r3, #1
 801e3f0:	9300      	str	r3, [sp, #0]
 801e3f2:	4b59      	ldr	r3, [pc, #356]	; (801e558 <pow+0x248>)
 801e3f4:	9301      	str	r3, [sp, #4]
 801e3f6:	2300      	movs	r3, #0
 801e3f8:	9308      	str	r3, [sp, #32]
 801e3fa:	f994 3000 	ldrsb.w	r3, [r4]
 801e3fe:	ed8d 9b02 	vstr	d9, [sp, #8]
 801e402:	ed8d 8b04 	vstr	d8, [sp, #16]
 801e406:	b913      	cbnz	r3, 801e40e <pow+0xfe>
 801e408:	ed8d bb06 	vstr	d11, [sp, #24]
 801e40c:	e7b1      	b.n	801e372 <pow+0x62>
 801e40e:	4953      	ldr	r1, [pc, #332]	; (801e55c <pow+0x24c>)
 801e410:	2000      	movs	r0, #0
 801e412:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e416:	2b02      	cmp	r3, #2
 801e418:	d1ab      	bne.n	801e372 <pow+0x62>
 801e41a:	f000 fdb3 	bl	801ef84 <__errno>
 801e41e:	2321      	movs	r3, #33	; 0x21
 801e420:	6003      	str	r3, [r0, #0]
 801e422:	e7cb      	b.n	801e3bc <pow+0xac>
 801e424:	f000 fc82 	bl	801ed2c <finite>
 801e428:	4605      	mov	r5, r0
 801e42a:	2800      	cmp	r0, #0
 801e42c:	d164      	bne.n	801e4f8 <pow+0x1e8>
 801e42e:	eeb0 0b49 	vmov.f64	d0, d9
 801e432:	f000 fc7b 	bl	801ed2c <finite>
 801e436:	2800      	cmp	r0, #0
 801e438:	d05e      	beq.n	801e4f8 <pow+0x1e8>
 801e43a:	eeb0 0b48 	vmov.f64	d0, d8
 801e43e:	f000 fc75 	bl	801ed2c <finite>
 801e442:	2800      	cmp	r0, #0
 801e444:	d058      	beq.n	801e4f8 <pow+0x1e8>
 801e446:	eeb4 ab4a 	vcmp.f64	d10, d10
 801e44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e44e:	f994 3000 	ldrsb.w	r3, [r4]
 801e452:	4a41      	ldr	r2, [pc, #260]	; (801e558 <pow+0x248>)
 801e454:	d70e      	bvc.n	801e474 <pow+0x164>
 801e456:	2101      	movs	r1, #1
 801e458:	e9cd 1200 	strd	r1, r2, [sp]
 801e45c:	9508      	str	r5, [sp, #32]
 801e45e:	ed8d 9b02 	vstr	d9, [sp, #8]
 801e462:	ed8d 8b04 	vstr	d8, [sp, #16]
 801e466:	2b00      	cmp	r3, #0
 801e468:	d0ce      	beq.n	801e408 <pow+0xf8>
 801e46a:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 801e46e:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e472:	e7d0      	b.n	801e416 <pow+0x106>
 801e474:	2103      	movs	r1, #3
 801e476:	ed8d 8b04 	vstr	d8, [sp, #16]
 801e47a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801e47e:	ee28 8b07 	vmul.f64	d8, d8, d7
 801e482:	e9cd 1200 	strd	r1, r2, [sp]
 801e486:	9508      	str	r5, [sp, #32]
 801e488:	ed8d 9b02 	vstr	d9, [sp, #8]
 801e48c:	b9fb      	cbnz	r3, 801e4ce <pow+0x1be>
 801e48e:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 801e492:	4b33      	ldr	r3, [pc, #204]	; (801e560 <pow+0x250>)
 801e494:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801e498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e49c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e4a0:	d54b      	bpl.n	801e53a <pow+0x22a>
 801e4a2:	eeb0 0b48 	vmov.f64	d0, d8
 801e4a6:	f000 fc53 	bl	801ed50 <rint>
 801e4aa:	eeb4 0b48 	vcmp.f64	d0, d8
 801e4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4b2:	d004      	beq.n	801e4be <pow+0x1ae>
 801e4b4:	4b2b      	ldr	r3, [pc, #172]	; (801e564 <pow+0x254>)
 801e4b6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801e4ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e4be:	f996 3000 	ldrsb.w	r3, [r6]
 801e4c2:	2b02      	cmp	r3, #2
 801e4c4:	d139      	bne.n	801e53a <pow+0x22a>
 801e4c6:	f000 fd5d 	bl	801ef84 <__errno>
 801e4ca:	2322      	movs	r3, #34	; 0x22
 801e4cc:	e7a8      	b.n	801e420 <pow+0x110>
 801e4ce:	4b26      	ldr	r3, [pc, #152]	; (801e568 <pow+0x258>)
 801e4d0:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 801e4d4:	2200      	movs	r2, #0
 801e4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e4de:	d5ee      	bpl.n	801e4be <pow+0x1ae>
 801e4e0:	eeb0 0b48 	vmov.f64	d0, d8
 801e4e4:	f000 fc34 	bl	801ed50 <rint>
 801e4e8:	eeb4 0b48 	vcmp.f64	d0, d8
 801e4ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4f0:	d0e5      	beq.n	801e4be <pow+0x1ae>
 801e4f2:	2200      	movs	r2, #0
 801e4f4:	4b19      	ldr	r3, [pc, #100]	; (801e55c <pow+0x24c>)
 801e4f6:	e7e0      	b.n	801e4ba <pow+0x1aa>
 801e4f8:	eeb5 ab40 	vcmp.f64	d10, #0.0
 801e4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e500:	f47f af64 	bne.w	801e3cc <pow+0xbc>
 801e504:	eeb0 0b49 	vmov.f64	d0, d9
 801e508:	f000 fc10 	bl	801ed2c <finite>
 801e50c:	2800      	cmp	r0, #0
 801e50e:	f43f af5d 	beq.w	801e3cc <pow+0xbc>
 801e512:	eeb0 0b48 	vmov.f64	d0, d8
 801e516:	f000 fc09 	bl	801ed2c <finite>
 801e51a:	2800      	cmp	r0, #0
 801e51c:	f43f af56 	beq.w	801e3cc <pow+0xbc>
 801e520:	2304      	movs	r3, #4
 801e522:	9300      	str	r3, [sp, #0]
 801e524:	4b0c      	ldr	r3, [pc, #48]	; (801e558 <pow+0x248>)
 801e526:	9301      	str	r3, [sp, #4]
 801e528:	2300      	movs	r3, #0
 801e52a:	9308      	str	r3, [sp, #32]
 801e52c:	ed8d 9b02 	vstr	d9, [sp, #8]
 801e530:	ed8d 8b04 	vstr	d8, [sp, #16]
 801e534:	ed8d cb06 	vstr	d12, [sp, #24]
 801e538:	e7c1      	b.n	801e4be <pow+0x1ae>
 801e53a:	4668      	mov	r0, sp
 801e53c:	f000 fbfe 	bl	801ed3c <matherr>
 801e540:	2800      	cmp	r0, #0
 801e542:	f47f af3b 	bne.w	801e3bc <pow+0xac>
 801e546:	e7be      	b.n	801e4c6 <pow+0x1b6>
	...
 801e550:	200001f0 	.word	0x200001f0
 801e554:	3ff00000 	.word	0x3ff00000
 801e558:	08024a2d 	.word	0x08024a2d
 801e55c:	fff00000 	.word	0xfff00000
 801e560:	47efffff 	.word	0x47efffff
 801e564:	c7efffff 	.word	0xc7efffff
 801e568:	7ff00000 	.word	0x7ff00000
 801e56c:	00000000 	.word	0x00000000

0801e570 <sqrt>:
 801e570:	b500      	push	{lr}
 801e572:	ed2d 8b02 	vpush	{d8}
 801e576:	eeb0 8b40 	vmov.f64	d8, d0
 801e57a:	b08b      	sub	sp, #44	; 0x2c
 801e57c:	f000 fbca 	bl	801ed14 <__ieee754_sqrt>
 801e580:	4b1f      	ldr	r3, [pc, #124]	; (801e600 <sqrt+0x90>)
 801e582:	f993 3000 	ldrsb.w	r3, [r3]
 801e586:	1c5a      	adds	r2, r3, #1
 801e588:	d024      	beq.n	801e5d4 <sqrt+0x64>
 801e58a:	eeb4 8b48 	vcmp.f64	d8, d8
 801e58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e592:	d61f      	bvs.n	801e5d4 <sqrt+0x64>
 801e594:	ed9f 7b18 	vldr	d7, [pc, #96]	; 801e5f8 <sqrt+0x88>
 801e598:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801e59c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5a0:	d518      	bpl.n	801e5d4 <sqrt+0x64>
 801e5a2:	2201      	movs	r2, #1
 801e5a4:	9200      	str	r2, [sp, #0]
 801e5a6:	4a17      	ldr	r2, [pc, #92]	; (801e604 <sqrt+0x94>)
 801e5a8:	9201      	str	r2, [sp, #4]
 801e5aa:	2200      	movs	r2, #0
 801e5ac:	9208      	str	r2, [sp, #32]
 801e5ae:	ed8d 8b04 	vstr	d8, [sp, #16]
 801e5b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 801e5b6:	b993      	cbnz	r3, 801e5de <sqrt+0x6e>
 801e5b8:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e5bc:	4668      	mov	r0, sp
 801e5be:	f000 fbbd 	bl	801ed3c <matherr>
 801e5c2:	b190      	cbz	r0, 801e5ea <sqrt+0x7a>
 801e5c4:	9b08      	ldr	r3, [sp, #32]
 801e5c6:	b11b      	cbz	r3, 801e5d0 <sqrt+0x60>
 801e5c8:	f000 fcdc 	bl	801ef84 <__errno>
 801e5cc:	9b08      	ldr	r3, [sp, #32]
 801e5ce:	6003      	str	r3, [r0, #0]
 801e5d0:	ed9d 0b06 	vldr	d0, [sp, #24]
 801e5d4:	b00b      	add	sp, #44	; 0x2c
 801e5d6:	ecbd 8b02 	vpop	{d8}
 801e5da:	f85d fb04 	ldr.w	pc, [sp], #4
 801e5de:	2b02      	cmp	r3, #2
 801e5e0:	ee87 6b07 	vdiv.f64	d6, d7, d7
 801e5e4:	ed8d 6b06 	vstr	d6, [sp, #24]
 801e5e8:	d1e8      	bne.n	801e5bc <sqrt+0x4c>
 801e5ea:	f000 fccb 	bl	801ef84 <__errno>
 801e5ee:	2321      	movs	r3, #33	; 0x21
 801e5f0:	6003      	str	r3, [r0, #0]
 801e5f2:	e7e7      	b.n	801e5c4 <sqrt+0x54>
 801e5f4:	f3af 8000 	nop.w
	...
 801e600:	200001f0 	.word	0x200001f0
 801e604:	08024a31 	.word	0x08024a31

0801e608 <__ieee754_pow>:
 801e608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e60c:	ec57 6b11 	vmov	r6, r7, d1
 801e610:	ed2d 8b02 	vpush	{d8}
 801e614:	eeb0 8b40 	vmov.f64	d8, d0
 801e618:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801e61c:	ea58 0306 	orrs.w	r3, r8, r6
 801e620:	b085      	sub	sp, #20
 801e622:	46b9      	mov	r9, r7
 801e624:	ee11 2a10 	vmov	r2, s2
 801e628:	f000 8306 	beq.w	801ec38 <__ieee754_pow+0x630>
 801e62c:	ee18 aa90 	vmov	sl, s17
 801e630:	4bb9      	ldr	r3, [pc, #740]	; (801e918 <__ieee754_pow+0x310>)
 801e632:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 801e636:	429c      	cmp	r4, r3
 801e638:	ee10 ba10 	vmov	fp, s0
 801e63c:	dc0b      	bgt.n	801e656 <__ieee754_pow+0x4e>
 801e63e:	d105      	bne.n	801e64c <__ieee754_pow+0x44>
 801e640:	f1bb 0f00 	cmp.w	fp, #0
 801e644:	d107      	bne.n	801e656 <__ieee754_pow+0x4e>
 801e646:	45a0      	cmp	r8, r4
 801e648:	dc0d      	bgt.n	801e666 <__ieee754_pow+0x5e>
 801e64a:	e001      	b.n	801e650 <__ieee754_pow+0x48>
 801e64c:	4598      	cmp	r8, r3
 801e64e:	dc02      	bgt.n	801e656 <__ieee754_pow+0x4e>
 801e650:	4598      	cmp	r8, r3
 801e652:	d110      	bne.n	801e676 <__ieee754_pow+0x6e>
 801e654:	b17a      	cbz	r2, 801e676 <__ieee754_pow+0x6e>
 801e656:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801e65a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801e65e:	ea54 030b 	orrs.w	r3, r4, fp
 801e662:	f000 82e9 	beq.w	801ec38 <__ieee754_pow+0x630>
 801e666:	48ad      	ldr	r0, [pc, #692]	; (801e91c <__ieee754_pow+0x314>)
 801e668:	b005      	add	sp, #20
 801e66a:	ecbd 8b02 	vpop	{d8}
 801e66e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e672:	f000 bb65 	b.w	801ed40 <nan>
 801e676:	f1ba 0f00 	cmp.w	sl, #0
 801e67a:	da4e      	bge.n	801e71a <__ieee754_pow+0x112>
 801e67c:	4ba8      	ldr	r3, [pc, #672]	; (801e920 <__ieee754_pow+0x318>)
 801e67e:	4598      	cmp	r8, r3
 801e680:	dc49      	bgt.n	801e716 <__ieee754_pow+0x10e>
 801e682:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801e686:	4598      	cmp	r8, r3
 801e688:	dd47      	ble.n	801e71a <__ieee754_pow+0x112>
 801e68a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801e68e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e692:	2b14      	cmp	r3, #20
 801e694:	dd24      	ble.n	801e6e0 <__ieee754_pow+0xd8>
 801e696:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801e69a:	fa22 f503 	lsr.w	r5, r2, r3
 801e69e:	fa05 f303 	lsl.w	r3, r5, r3
 801e6a2:	4293      	cmp	r3, r2
 801e6a4:	d139      	bne.n	801e71a <__ieee754_pow+0x112>
 801e6a6:	f005 0501 	and.w	r5, r5, #1
 801e6aa:	f1c5 0502 	rsb	r5, r5, #2
 801e6ae:	2a00      	cmp	r2, #0
 801e6b0:	d15a      	bne.n	801e768 <__ieee754_pow+0x160>
 801e6b2:	4b99      	ldr	r3, [pc, #612]	; (801e918 <__ieee754_pow+0x310>)
 801e6b4:	4598      	cmp	r8, r3
 801e6b6:	d122      	bne.n	801e6fe <__ieee754_pow+0xf6>
 801e6b8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801e6bc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801e6c0:	ea53 030b 	orrs.w	r3, r3, fp
 801e6c4:	f000 82b8 	beq.w	801ec38 <__ieee754_pow+0x630>
 801e6c8:	4b96      	ldr	r3, [pc, #600]	; (801e924 <__ieee754_pow+0x31c>)
 801e6ca:	429c      	cmp	r4, r3
 801e6cc:	dd27      	ble.n	801e71e <__ieee754_pow+0x116>
 801e6ce:	f1b9 0f00 	cmp.w	r9, #0
 801e6d2:	f280 82b4 	bge.w	801ec3e <__ieee754_pow+0x636>
 801e6d6:	ed9f 7b84 	vldr	d7, [pc, #528]	; 801e8e8 <__ieee754_pow+0x2e0>
 801e6da:	ed8d 7b00 	vstr	d7, [sp]
 801e6de:	e026      	b.n	801e72e <__ieee754_pow+0x126>
 801e6e0:	2a00      	cmp	r2, #0
 801e6e2:	d140      	bne.n	801e766 <__ieee754_pow+0x15e>
 801e6e4:	f1c3 0314 	rsb	r3, r3, #20
 801e6e8:	fa48 f503 	asr.w	r5, r8, r3
 801e6ec:	fa05 f303 	lsl.w	r3, r5, r3
 801e6f0:	4543      	cmp	r3, r8
 801e6f2:	f040 82aa 	bne.w	801ec4a <__ieee754_pow+0x642>
 801e6f6:	f005 0501 	and.w	r5, r5, #1
 801e6fa:	f1c5 0502 	rsb	r5, r5, #2
 801e6fe:	4b8a      	ldr	r3, [pc, #552]	; (801e928 <__ieee754_pow+0x320>)
 801e700:	4598      	cmp	r8, r3
 801e702:	d11b      	bne.n	801e73c <__ieee754_pow+0x134>
 801e704:	f1b9 0f00 	cmp.w	r9, #0
 801e708:	f280 829c 	bge.w	801ec44 <__ieee754_pow+0x63c>
 801e70c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801e710:	ee87 7b08 	vdiv.f64	d7, d7, d8
 801e714:	e7e1      	b.n	801e6da <__ieee754_pow+0xd2>
 801e716:	2502      	movs	r5, #2
 801e718:	e7c9      	b.n	801e6ae <__ieee754_pow+0xa6>
 801e71a:	2500      	movs	r5, #0
 801e71c:	e7c7      	b.n	801e6ae <__ieee754_pow+0xa6>
 801e71e:	f1b9 0f00 	cmp.w	r9, #0
 801e722:	dad8      	bge.n	801e6d6 <__ieee754_pow+0xce>
 801e724:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 801e728:	4633      	mov	r3, r6
 801e72a:	e9cd 3400 	strd	r3, r4, [sp]
 801e72e:	ed9d 0b00 	vldr	d0, [sp]
 801e732:	b005      	add	sp, #20
 801e734:	ecbd 8b02 	vpop	{d8}
 801e738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e73c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801e740:	d102      	bne.n	801e748 <__ieee754_pow+0x140>
 801e742:	ee28 7b08 	vmul.f64	d7, d8, d8
 801e746:	e7c8      	b.n	801e6da <__ieee754_pow+0xd2>
 801e748:	4b78      	ldr	r3, [pc, #480]	; (801e92c <__ieee754_pow+0x324>)
 801e74a:	4599      	cmp	r9, r3
 801e74c:	d10c      	bne.n	801e768 <__ieee754_pow+0x160>
 801e74e:	f1ba 0f00 	cmp.w	sl, #0
 801e752:	db09      	blt.n	801e768 <__ieee754_pow+0x160>
 801e754:	eeb0 0b48 	vmov.f64	d0, d8
 801e758:	b005      	add	sp, #20
 801e75a:	ecbd 8b02 	vpop	{d8}
 801e75e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e762:	f000 bad7 	b.w	801ed14 <__ieee754_sqrt>
 801e766:	2500      	movs	r5, #0
 801e768:	eeb0 0b48 	vmov.f64	d0, d8
 801e76c:	f000 fad5 	bl	801ed1a <fabs>
 801e770:	ed8d 0b00 	vstr	d0, [sp]
 801e774:	f1bb 0f00 	cmp.w	fp, #0
 801e778:	d128      	bne.n	801e7cc <__ieee754_pow+0x1c4>
 801e77a:	b124      	cbz	r4, 801e786 <__ieee754_pow+0x17e>
 801e77c:	4b6a      	ldr	r3, [pc, #424]	; (801e928 <__ieee754_pow+0x320>)
 801e77e:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 801e782:	429a      	cmp	r2, r3
 801e784:	d122      	bne.n	801e7cc <__ieee754_pow+0x1c4>
 801e786:	f1b9 0f00 	cmp.w	r9, #0
 801e78a:	da07      	bge.n	801e79c <__ieee754_pow+0x194>
 801e78c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801e790:	ed9d 6b00 	vldr	d6, [sp]
 801e794:	ee87 7b06 	vdiv.f64	d7, d7, d6
 801e798:	ed8d 7b00 	vstr	d7, [sp]
 801e79c:	f1ba 0f00 	cmp.w	sl, #0
 801e7a0:	dac5      	bge.n	801e72e <__ieee754_pow+0x126>
 801e7a2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801e7a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801e7aa:	ea54 0305 	orrs.w	r3, r4, r5
 801e7ae:	d106      	bne.n	801e7be <__ieee754_pow+0x1b6>
 801e7b0:	ed9d 7b00 	vldr	d7, [sp]
 801e7b4:	ee37 7b47 	vsub.f64	d7, d7, d7
 801e7b8:	ee87 7b07 	vdiv.f64	d7, d7, d7
 801e7bc:	e78d      	b.n	801e6da <__ieee754_pow+0xd2>
 801e7be:	2d01      	cmp	r5, #1
 801e7c0:	d1b5      	bne.n	801e72e <__ieee754_pow+0x126>
 801e7c2:	ed9d 7b00 	vldr	d7, [sp]
 801e7c6:	eeb1 7b47 	vneg.f64	d7, d7
 801e7ca:	e786      	b.n	801e6da <__ieee754_pow+0xd2>
 801e7cc:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801e7d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e7d4:	ea55 030a 	orrs.w	r3, r5, sl
 801e7d8:	d104      	bne.n	801e7e4 <__ieee754_pow+0x1dc>
 801e7da:	ee38 8b48 	vsub.f64	d8, d8, d8
 801e7de:	ee88 7b08 	vdiv.f64	d7, d8, d8
 801e7e2:	e77a      	b.n	801e6da <__ieee754_pow+0xd2>
 801e7e4:	4b52      	ldr	r3, [pc, #328]	; (801e930 <__ieee754_pow+0x328>)
 801e7e6:	4598      	cmp	r8, r3
 801e7e8:	f340 80a8 	ble.w	801e93c <__ieee754_pow+0x334>
 801e7ec:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801e7f0:	4598      	cmp	r8, r3
 801e7f2:	dd0b      	ble.n	801e80c <__ieee754_pow+0x204>
 801e7f4:	4b4b      	ldr	r3, [pc, #300]	; (801e924 <__ieee754_pow+0x31c>)
 801e7f6:	429c      	cmp	r4, r3
 801e7f8:	dc0e      	bgt.n	801e818 <__ieee754_pow+0x210>
 801e7fa:	f1b9 0f00 	cmp.w	r9, #0
 801e7fe:	f6bf af6a 	bge.w	801e6d6 <__ieee754_pow+0xce>
 801e802:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 801e8f0 <__ieee754_pow+0x2e8>
 801e806:	ee27 7b07 	vmul.f64	d7, d7, d7
 801e80a:	e766      	b.n	801e6da <__ieee754_pow+0xd2>
 801e80c:	4b49      	ldr	r3, [pc, #292]	; (801e934 <__ieee754_pow+0x32c>)
 801e80e:	429c      	cmp	r4, r3
 801e810:	ddf3      	ble.n	801e7fa <__ieee754_pow+0x1f2>
 801e812:	4b45      	ldr	r3, [pc, #276]	; (801e928 <__ieee754_pow+0x320>)
 801e814:	429c      	cmp	r4, r3
 801e816:	dd03      	ble.n	801e820 <__ieee754_pow+0x218>
 801e818:	f1b9 0f00 	cmp.w	r9, #0
 801e81c:	dcf1      	bgt.n	801e802 <__ieee754_pow+0x1fa>
 801e81e:	e75a      	b.n	801e6d6 <__ieee754_pow+0xce>
 801e820:	ed9d 7b00 	vldr	d7, [sp]
 801e824:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801e828:	ed9f 5b33 	vldr	d5, [pc, #204]	; 801e8f8 <__ieee754_pow+0x2f0>
 801e82c:	ee37 6b46 	vsub.f64	d6, d7, d6
 801e830:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 801e834:	eeb1 3b46 	vneg.f64	d3, d6
 801e838:	eea3 5b07 	vfma.f64	d5, d3, d7
 801e83c:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801e840:	eea5 7b46 	vfms.f64	d7, d5, d6
 801e844:	ee26 5b06 	vmul.f64	d5, d6, d6
 801e848:	ee27 5b05 	vmul.f64	d5, d7, d5
 801e84c:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 801e900 <__ieee754_pow+0x2f8>
 801e850:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801e854:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 801e908 <__ieee754_pow+0x300>
 801e858:	eea6 7b05 	vfma.f64	d7, d6, d5
 801e85c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 801e910 <__ieee754_pow+0x308>
 801e860:	eeb0 4b47 	vmov.f64	d4, d7
 801e864:	eea6 4b05 	vfma.f64	d4, d6, d5
 801e868:	ec53 2b14 	vmov	r2, r3, d4
 801e86c:	2200      	movs	r2, #0
 801e86e:	ec43 2b14 	vmov	d4, r2, r3
 801e872:	eeb0 6b44 	vmov.f64	d6, d4
 801e876:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e87a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e87e:	3d01      	subs	r5, #1
 801e880:	ea55 030a 	orrs.w	r3, r5, sl
 801e884:	f04f 0200 	mov.w	r2, #0
 801e888:	463b      	mov	r3, r7
 801e88a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801e88e:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 801e892:	ec47 6b15 	vmov	d5, r6, r7
 801e896:	fe06 8b08 	vseleq.f64	d8, d6, d8
 801e89a:	ec47 6b13 	vmov	d3, r6, r7
 801e89e:	ec43 2b16 	vmov	d6, r2, r3
 801e8a2:	ee27 7b03 	vmul.f64	d7, d7, d3
 801e8a6:	ee35 5b46 	vsub.f64	d5, d5, d6
 801e8aa:	4b23      	ldr	r3, [pc, #140]	; (801e938 <__ieee754_pow+0x330>)
 801e8ac:	eea5 7b04 	vfma.f64	d7, d5, d4
 801e8b0:	ee24 6b06 	vmul.f64	d6, d4, d6
 801e8b4:	ee37 5b06 	vadd.f64	d5, d7, d6
 801e8b8:	ee15 1a90 	vmov	r1, s11
 801e8bc:	4299      	cmp	r1, r3
 801e8be:	ee15 2a10 	vmov	r2, s10
 801e8c2:	f340 819b 	ble.w	801ebfc <__ieee754_pow+0x5f4>
 801e8c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801e8ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801e8ce:	4313      	orrs	r3, r2
 801e8d0:	f000 810a 	beq.w	801eae8 <__ieee754_pow+0x4e0>
 801e8d4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 801e8f0 <__ieee754_pow+0x2e8>
 801e8d8:	ee28 8b07 	vmul.f64	d8, d8, d7
 801e8dc:	ee28 7b07 	vmul.f64	d7, d8, d7
 801e8e0:	e6fb      	b.n	801e6da <__ieee754_pow+0xd2>
 801e8e2:	bf00      	nop
 801e8e4:	f3af 8000 	nop.w
	...
 801e8f0:	8800759c 	.word	0x8800759c
 801e8f4:	7e37e43c 	.word	0x7e37e43c
 801e8f8:	55555555 	.word	0x55555555
 801e8fc:	3fd55555 	.word	0x3fd55555
 801e900:	652b82fe 	.word	0x652b82fe
 801e904:	3ff71547 	.word	0x3ff71547
 801e908:	f85ddf44 	.word	0xf85ddf44
 801e90c:	3e54ae0b 	.word	0x3e54ae0b
 801e910:	60000000 	.word	0x60000000
 801e914:	3ff71547 	.word	0x3ff71547
 801e918:	7ff00000 	.word	0x7ff00000
 801e91c:	08024a21 	.word	0x08024a21
 801e920:	433fffff 	.word	0x433fffff
 801e924:	3fefffff 	.word	0x3fefffff
 801e928:	3ff00000 	.word	0x3ff00000
 801e92c:	3fe00000 	.word	0x3fe00000
 801e930:	41e00000 	.word	0x41e00000
 801e934:	3feffffe 	.word	0x3feffffe
 801e938:	408fffff 	.word	0x408fffff
 801e93c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801e940:	f280 80ce 	bge.w	801eae0 <__ieee754_pow+0x4d8>
 801e944:	ed9d 6b00 	vldr	d6, [sp]
 801e948:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 801ec50 <__ieee754_pow+0x648>
 801e94c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801e950:	ed8d 7b00 	vstr	d7, [sp]
 801e954:	9c01      	ldr	r4, [sp, #4]
 801e956:	f06f 0334 	mvn.w	r3, #52	; 0x34
 801e95a:	1521      	asrs	r1, r4, #20
 801e95c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801e960:	4419      	add	r1, r3
 801e962:	4be3      	ldr	r3, [pc, #908]	; (801ecf0 <__ieee754_pow+0x6e8>)
 801e964:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801e968:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 801e96c:	429c      	cmp	r4, r3
 801e96e:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 801e972:	dd06      	ble.n	801e982 <__ieee754_pow+0x37a>
 801e974:	4bdf      	ldr	r3, [pc, #892]	; (801ecf4 <__ieee754_pow+0x6ec>)
 801e976:	429c      	cmp	r4, r3
 801e978:	f340 80b4 	ble.w	801eae4 <__ieee754_pow+0x4dc>
 801e97c:	3101      	adds	r1, #1
 801e97e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801e982:	2400      	movs	r4, #0
 801e984:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e988:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801e98c:	4603      	mov	r3, r0
 801e98e:	ec43 2b17 	vmov	d7, r2, r3
 801e992:	4bd9      	ldr	r3, [pc, #868]	; (801ecf8 <__ieee754_pow+0x6f0>)
 801e994:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 801e998:	4463      	add	r3, ip
 801e99a:	ed93 5b00 	vldr	d5, [r3]
 801e99e:	1040      	asrs	r0, r0, #1
 801e9a0:	ee37 2b45 	vsub.f64	d2, d7, d5
 801e9a4:	ee35 6b07 	vadd.f64	d6, d5, d7
 801e9a8:	ee84 1b06 	vdiv.f64	d1, d4, d6
 801e9ac:	ee22 6b01 	vmul.f64	d6, d2, d1
 801e9b0:	ed8d 6b00 	vstr	d6, [sp]
 801e9b4:	e9dd 8900 	ldrd	r8, r9, [sp]
 801e9b8:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 801e9bc:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 801e9c0:	f04f 0800 	mov.w	r8, #0
 801e9c4:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 801e9c8:	2200      	movs	r2, #0
 801e9ca:	ec49 8b14 	vmov	d4, r8, r9
 801e9ce:	ec43 2b16 	vmov	d6, r2, r3
 801e9d2:	eeb1 3b44 	vneg.f64	d3, d4
 801e9d6:	eea3 2b06 	vfma.f64	d2, d3, d6
 801e9da:	ee36 6b45 	vsub.f64	d6, d6, d5
 801e9de:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e9e2:	eea3 2b07 	vfma.f64	d2, d3, d7
 801e9e6:	ed9d 7b00 	vldr	d7, [sp]
 801e9ea:	ee22 2b01 	vmul.f64	d2, d2, d1
 801e9ee:	ee27 5b07 	vmul.f64	d5, d7, d7
 801e9f2:	ee37 6b04 	vadd.f64	d6, d7, d4
 801e9f6:	ed9f 1b98 	vldr	d1, [pc, #608]	; 801ec58 <__ieee754_pow+0x650>
 801e9fa:	ee25 0b05 	vmul.f64	d0, d5, d5
 801e9fe:	ee26 6b02 	vmul.f64	d6, d6, d2
 801ea02:	ed9f 7b97 	vldr	d7, [pc, #604]	; 801ec60 <__ieee754_pow+0x658>
 801ea06:	eea5 7b01 	vfma.f64	d7, d5, d1
 801ea0a:	ed9f 1b97 	vldr	d1, [pc, #604]	; 801ec68 <__ieee754_pow+0x660>
 801ea0e:	eea7 1b05 	vfma.f64	d1, d7, d5
 801ea12:	ed9f 7b97 	vldr	d7, [pc, #604]	; 801ec70 <__ieee754_pow+0x668>
 801ea16:	eea1 7b05 	vfma.f64	d7, d1, d5
 801ea1a:	ed9f 1b97 	vldr	d1, [pc, #604]	; 801ec78 <__ieee754_pow+0x670>
 801ea1e:	eea7 1b05 	vfma.f64	d1, d7, d5
 801ea22:	ed9f 7b97 	vldr	d7, [pc, #604]	; 801ec80 <__ieee754_pow+0x678>
 801ea26:	eea1 7b05 	vfma.f64	d7, d1, d5
 801ea2a:	eea0 6b07 	vfma.f64	d6, d0, d7
 801ea2e:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 801ea32:	eeb0 5b47 	vmov.f64	d5, d7
 801ea36:	eea4 5b04 	vfma.f64	d5, d4, d4
 801ea3a:	ee35 5b06 	vadd.f64	d5, d5, d6
 801ea3e:	ed8d 5b02 	vstr	d5, [sp, #8]
 801ea42:	f8cd 8008 	str.w	r8, [sp, #8]
 801ea46:	ed9d 5b02 	vldr	d5, [sp, #8]
 801ea4a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801ea4e:	eea3 7b04 	vfma.f64	d7, d3, d4
 801ea52:	ee36 7b47 	vsub.f64	d7, d6, d7
 801ea56:	ed9d 6b00 	vldr	d6, [sp]
 801ea5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ea5e:	eea2 7b05 	vfma.f64	d7, d2, d5
 801ea62:	eeb0 6b47 	vmov.f64	d6, d7
 801ea66:	eea4 6b05 	vfma.f64	d6, d4, d5
 801ea6a:	ed8d 6b00 	vstr	d6, [sp]
 801ea6e:	f8cd 8000 	str.w	r8, [sp]
 801ea72:	ed9d 2b00 	vldr	d2, [sp]
 801ea76:	eeb0 6b42 	vmov.f64	d6, d2
 801ea7a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801ea7e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ea82:	ed9f 6b81 	vldr	d6, [pc, #516]	; 801ec88 <__ieee754_pow+0x680>
 801ea86:	4b9d      	ldr	r3, [pc, #628]	; (801ecfc <__ieee754_pow+0x6f4>)
 801ea88:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ea8c:	ed9f 6b80 	vldr	d6, [pc, #512]	; 801ec90 <__ieee754_pow+0x688>
 801ea90:	4463      	add	r3, ip
 801ea92:	eea2 7b06 	vfma.f64	d7, d2, d6
 801ea96:	ed93 6b00 	vldr	d6, [r3]
 801ea9a:	4b99      	ldr	r3, [pc, #612]	; (801ed00 <__ieee754_pow+0x6f8>)
 801ea9c:	ee37 6b06 	vadd.f64	d6, d7, d6
 801eaa0:	449c      	add	ip, r3
 801eaa2:	ed9c 1b00 	vldr	d1, [ip]
 801eaa6:	eeb0 4b46 	vmov.f64	d4, d6
 801eaaa:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 801ec98 <__ieee754_pow+0x690>
 801eaae:	ee07 1a90 	vmov	s15, r1
 801eab2:	eea2 4b03 	vfma.f64	d4, d2, d3
 801eab6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801eaba:	ee34 4b01 	vadd.f64	d4, d4, d1
 801eabe:	ee34 5b07 	vadd.f64	d5, d4, d7
 801eac2:	ed8d 5b00 	vstr	d5, [sp]
 801eac6:	f8cd 8000 	str.w	r8, [sp]
 801eaca:	ed9d 4b00 	vldr	d4, [sp]
 801eace:	ee34 7b47 	vsub.f64	d7, d4, d7
 801ead2:	ee37 7b41 	vsub.f64	d7, d7, d1
 801ead6:	eea2 7b43 	vfms.f64	d7, d2, d3
 801eada:	ee36 7b47 	vsub.f64	d7, d6, d7
 801eade:	e6ce      	b.n	801e87e <__ieee754_pow+0x276>
 801eae0:	2300      	movs	r3, #0
 801eae2:	e73a      	b.n	801e95a <__ieee754_pow+0x352>
 801eae4:	2401      	movs	r4, #1
 801eae6:	e74d      	b.n	801e984 <__ieee754_pow+0x37c>
 801eae8:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 801eca0 <__ieee754_pow+0x698>
 801eaec:	ee35 5b46 	vsub.f64	d5, d5, d6
 801eaf0:	ee37 4b04 	vadd.f64	d4, d7, d4
 801eaf4:	eeb4 4bc5 	vcmpe.f64	d4, d5
 801eaf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eafc:	f73f aeea 	bgt.w	801e8d4 <__ieee754_pow+0x2cc>
 801eb00:	4a80      	ldr	r2, [pc, #512]	; (801ed04 <__ieee754_pow+0x6fc>)
 801eb02:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801eb06:	4293      	cmp	r3, r2
 801eb08:	f340 808e 	ble.w	801ec28 <__ieee754_pow+0x620>
 801eb0c:	151b      	asrs	r3, r3, #20
 801eb0e:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 801eb12:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801eb16:	4103      	asrs	r3, r0
 801eb18:	440b      	add	r3, r1
 801eb1a:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801eb1e:	487a      	ldr	r0, [pc, #488]	; (801ed08 <__ieee754_pow+0x700>)
 801eb20:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801eb24:	4110      	asrs	r0, r2
 801eb26:	ea23 0500 	bic.w	r5, r3, r0
 801eb2a:	f3c3 0013 	ubfx	r0, r3, #0, #20
 801eb2e:	2400      	movs	r4, #0
 801eb30:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 801eb34:	f1c2 0214 	rsb	r2, r2, #20
 801eb38:	ec45 4b15 	vmov	d5, r4, r5
 801eb3c:	4110      	asrs	r0, r2
 801eb3e:	2900      	cmp	r1, #0
 801eb40:	bfb8      	it	lt
 801eb42:	4240      	neglt	r0, r0
 801eb44:	ee36 6b45 	vsub.f64	d6, d6, d5
 801eb48:	ee36 5b07 	vadd.f64	d5, d6, d7
 801eb4c:	ec53 2b15 	vmov	r2, r3, d5
 801eb50:	2200      	movs	r2, #0
 801eb52:	ec43 2b15 	vmov	d5, r2, r3
 801eb56:	ed9f 4b54 	vldr	d4, [pc, #336]	; 801eca8 <__ieee754_pow+0x6a0>
 801eb5a:	ee35 6b46 	vsub.f64	d6, d5, d6
 801eb5e:	ee37 6b46 	vsub.f64	d6, d7, d6
 801eb62:	ed9f 7b53 	vldr	d7, [pc, #332]	; 801ecb0 <__ieee754_pow+0x6a8>
 801eb66:	ee25 7b07 	vmul.f64	d7, d5, d7
 801eb6a:	eea6 7b04 	vfma.f64	d7, d6, d4
 801eb6e:	ed9f 6b52 	vldr	d6, [pc, #328]	; 801ecb8 <__ieee754_pow+0x6b0>
 801eb72:	eeb0 4b47 	vmov.f64	d4, d7
 801eb76:	eea5 4b06 	vfma.f64	d4, d5, d6
 801eb7a:	eeb0 3b44 	vmov.f64	d3, d4
 801eb7e:	eea5 3b46 	vfms.f64	d3, d5, d6
 801eb82:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 801ecc0 <__ieee754_pow+0x6b8>
 801eb86:	ee37 7b43 	vsub.f64	d7, d7, d3
 801eb8a:	ee24 6b04 	vmul.f64	d6, d4, d4
 801eb8e:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 801ecc8 <__ieee754_pow+0x6c0>
 801eb92:	eea4 7b07 	vfma.f64	d7, d4, d7
 801eb96:	eea6 3b05 	vfma.f64	d3, d6, d5
 801eb9a:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 801ecd0 <__ieee754_pow+0x6c8>
 801eb9e:	eea3 5b06 	vfma.f64	d5, d3, d6
 801eba2:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 801ecd8 <__ieee754_pow+0x6d0>
 801eba6:	eea5 3b06 	vfma.f64	d3, d5, d6
 801ebaa:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 801ece0 <__ieee754_pow+0x6d8>
 801ebae:	eea3 5b06 	vfma.f64	d5, d3, d6
 801ebb2:	eeb0 3b44 	vmov.f64	d3, d4
 801ebb6:	eea5 3b46 	vfms.f64	d3, d5, d6
 801ebba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801ebbe:	eeb0 6b43 	vmov.f64	d6, d3
 801ebc2:	ee24 3b03 	vmul.f64	d3, d4, d3
 801ebc6:	ee36 5b45 	vsub.f64	d5, d6, d5
 801ebca:	ee83 6b05 	vdiv.f64	d6, d3, d5
 801ebce:	ee36 7b47 	vsub.f64	d7, d6, d7
 801ebd2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801ebd6:	ee37 7b44 	vsub.f64	d7, d7, d4
 801ebda:	ee36 7b47 	vsub.f64	d7, d6, d7
 801ebde:	ed8d 7b00 	vstr	d7, [sp]
 801ebe2:	9901      	ldr	r1, [sp, #4]
 801ebe4:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 801ebe8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801ebec:	da1e      	bge.n	801ec2c <__ieee754_pow+0x624>
 801ebee:	eeb0 0b47 	vmov.f64	d0, d7
 801ebf2:	f000 f939 	bl	801ee68 <scalbn>
 801ebf6:	ee20 7b08 	vmul.f64	d7, d0, d8
 801ebfa:	e56e      	b.n	801e6da <__ieee754_pow+0xd2>
 801ebfc:	4b43      	ldr	r3, [pc, #268]	; (801ed0c <__ieee754_pow+0x704>)
 801ebfe:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 801ec02:	4298      	cmp	r0, r3
 801ec04:	f77f af7c 	ble.w	801eb00 <__ieee754_pow+0x4f8>
 801ec08:	4b41      	ldr	r3, [pc, #260]	; (801ed10 <__ieee754_pow+0x708>)
 801ec0a:	440b      	add	r3, r1
 801ec0c:	4313      	orrs	r3, r2
 801ec0e:	d002      	beq.n	801ec16 <__ieee754_pow+0x60e>
 801ec10:	ed9f 7b35 	vldr	d7, [pc, #212]	; 801ece8 <__ieee754_pow+0x6e0>
 801ec14:	e660      	b.n	801e8d8 <__ieee754_pow+0x2d0>
 801ec16:	ee35 5b46 	vsub.f64	d5, d5, d6
 801ec1a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801ec1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec22:	f6ff af6d 	blt.w	801eb00 <__ieee754_pow+0x4f8>
 801ec26:	e7f3      	b.n	801ec10 <__ieee754_pow+0x608>
 801ec28:	2000      	movs	r0, #0
 801ec2a:	e78d      	b.n	801eb48 <__ieee754_pow+0x540>
 801ec2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ec30:	460b      	mov	r3, r1
 801ec32:	ec43 2b10 	vmov	d0, r2, r3
 801ec36:	e7de      	b.n	801ebf6 <__ieee754_pow+0x5ee>
 801ec38:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801ec3c:	e54d      	b.n	801e6da <__ieee754_pow+0xd2>
 801ec3e:	e9cd 6700 	strd	r6, r7, [sp]
 801ec42:	e574      	b.n	801e72e <__ieee754_pow+0x126>
 801ec44:	ed8d 8b00 	vstr	d8, [sp]
 801ec48:	e571      	b.n	801e72e <__ieee754_pow+0x126>
 801ec4a:	4615      	mov	r5, r2
 801ec4c:	e557      	b.n	801e6fe <__ieee754_pow+0xf6>
 801ec4e:	bf00      	nop
 801ec50:	00000000 	.word	0x00000000
 801ec54:	43400000 	.word	0x43400000
 801ec58:	4a454eef 	.word	0x4a454eef
 801ec5c:	3fca7e28 	.word	0x3fca7e28
 801ec60:	93c9db65 	.word	0x93c9db65
 801ec64:	3fcd864a 	.word	0x3fcd864a
 801ec68:	a91d4101 	.word	0xa91d4101
 801ec6c:	3fd17460 	.word	0x3fd17460
 801ec70:	518f264d 	.word	0x518f264d
 801ec74:	3fd55555 	.word	0x3fd55555
 801ec78:	db6fabff 	.word	0xdb6fabff
 801ec7c:	3fdb6db6 	.word	0x3fdb6db6
 801ec80:	33333303 	.word	0x33333303
 801ec84:	3fe33333 	.word	0x3fe33333
 801ec88:	dc3a03fd 	.word	0xdc3a03fd
 801ec8c:	3feec709 	.word	0x3feec709
 801ec90:	145b01f5 	.word	0x145b01f5
 801ec94:	be3e2fe0 	.word	0xbe3e2fe0
 801ec98:	e0000000 	.word	0xe0000000
 801ec9c:	3feec709 	.word	0x3feec709
 801eca0:	652b82fe 	.word	0x652b82fe
 801eca4:	3c971547 	.word	0x3c971547
 801eca8:	fefa39ef 	.word	0xfefa39ef
 801ecac:	3fe62e42 	.word	0x3fe62e42
 801ecb0:	0ca86c39 	.word	0x0ca86c39
 801ecb4:	be205c61 	.word	0xbe205c61
 801ecb8:	00000000 	.word	0x00000000
 801ecbc:	3fe62e43 	.word	0x3fe62e43
 801ecc0:	72bea4d0 	.word	0x72bea4d0
 801ecc4:	3e663769 	.word	0x3e663769
 801ecc8:	c5d26bf1 	.word	0xc5d26bf1
 801eccc:	bebbbd41 	.word	0xbebbbd41
 801ecd0:	af25de2c 	.word	0xaf25de2c
 801ecd4:	3f11566a 	.word	0x3f11566a
 801ecd8:	16bebd93 	.word	0x16bebd93
 801ecdc:	bf66c16c 	.word	0xbf66c16c
 801ece0:	5555553e 	.word	0x5555553e
 801ece4:	3fc55555 	.word	0x3fc55555
 801ece8:	c2f8f359 	.word	0xc2f8f359
 801ecec:	01a56e1f 	.word	0x01a56e1f
 801ecf0:	0003988e 	.word	0x0003988e
 801ecf4:	000bb679 	.word	0x000bb679
 801ecf8:	08024a38 	.word	0x08024a38
 801ecfc:	08024a58 	.word	0x08024a58
 801ed00:	08024a48 	.word	0x08024a48
 801ed04:	3fe00000 	.word	0x3fe00000
 801ed08:	000fffff 	.word	0x000fffff
 801ed0c:	4090cbff 	.word	0x4090cbff
 801ed10:	3f6f3400 	.word	0x3f6f3400

0801ed14 <__ieee754_sqrt>:
 801ed14:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801ed18:	4770      	bx	lr

0801ed1a <fabs>:
 801ed1a:	ec51 0b10 	vmov	r0, r1, d0
 801ed1e:	ee10 2a10 	vmov	r2, s0
 801ed22:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ed26:	ec43 2b10 	vmov	d0, r2, r3
 801ed2a:	4770      	bx	lr

0801ed2c <finite>:
 801ed2c:	ee10 3a90 	vmov	r3, s1
 801ed30:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801ed34:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801ed38:	0fc0      	lsrs	r0, r0, #31
 801ed3a:	4770      	bx	lr

0801ed3c <matherr>:
 801ed3c:	2000      	movs	r0, #0
 801ed3e:	4770      	bx	lr

0801ed40 <nan>:
 801ed40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801ed48 <nan+0x8>
 801ed44:	4770      	bx	lr
 801ed46:	bf00      	nop
 801ed48:	00000000 	.word	0x00000000
 801ed4c:	7ff80000 	.word	0x7ff80000

0801ed50 <rint>:
 801ed50:	b530      	push	{r4, r5, lr}
 801ed52:	b085      	sub	sp, #20
 801ed54:	ed8d 0b00 	vstr	d0, [sp]
 801ed58:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ed5c:	f3c3 510a 	ubfx	r1, r3, #20, #11
 801ed60:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 801ed64:	2813      	cmp	r0, #19
 801ed66:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 801ed6a:	dc5a      	bgt.n	801ee22 <rint+0xd2>
 801ed6c:	2800      	cmp	r0, #0
 801ed6e:	da2f      	bge.n	801edd0 <rint+0x80>
 801ed70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801ed74:	4311      	orrs	r1, r2
 801ed76:	d027      	beq.n	801edc8 <rint+0x78>
 801ed78:	f3c3 0513 	ubfx	r5, r3, #0, #20
 801ed7c:	4315      	orrs	r5, r2
 801ed7e:	426a      	negs	r2, r5
 801ed80:	432a      	orrs	r2, r5
 801ed82:	0b12      	lsrs	r2, r2, #12
 801ed84:	0c5b      	lsrs	r3, r3, #17
 801ed86:	045b      	lsls	r3, r3, #17
 801ed88:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 801ed8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ed90:	ea42 0103 	orr.w	r1, r2, r3
 801ed94:	4b31      	ldr	r3, [pc, #196]	; (801ee5c <rint+0x10c>)
 801ed96:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ed9a:	ed93 6b00 	vldr	d6, [r3]
 801ed9e:	ec41 0b17 	vmov	d7, r0, r1
 801eda2:	ee36 7b07 	vadd.f64	d7, d6, d7
 801eda6:	ed8d 7b02 	vstr	d7, [sp, #8]
 801edaa:	ed9d 7b02 	vldr	d7, [sp, #8]
 801edae:	ee37 7b46 	vsub.f64	d7, d7, d6
 801edb2:	ed8d 7b00 	vstr	d7, [sp]
 801edb6:	9b01      	ldr	r3, [sp, #4]
 801edb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801edbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801edc0:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 801edc4:	e9cd 0100 	strd	r0, r1, [sp]
 801edc8:	ed9d 0b00 	vldr	d0, [sp]
 801edcc:	b005      	add	sp, #20
 801edce:	bd30      	pop	{r4, r5, pc}
 801edd0:	4923      	ldr	r1, [pc, #140]	; (801ee60 <rint+0x110>)
 801edd2:	4101      	asrs	r1, r0
 801edd4:	ea03 0501 	and.w	r5, r3, r1
 801edd8:	4315      	orrs	r5, r2
 801edda:	d0f5      	beq.n	801edc8 <rint+0x78>
 801eddc:	0849      	lsrs	r1, r1, #1
 801edde:	ea03 0501 	and.w	r5, r3, r1
 801ede2:	432a      	orrs	r2, r5
 801ede4:	d00b      	beq.n	801edfe <rint+0xae>
 801ede6:	ea23 0101 	bic.w	r1, r3, r1
 801edea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801edee:	2813      	cmp	r0, #19
 801edf0:	fa43 f300 	asr.w	r3, r3, r0
 801edf4:	bf0c      	ite	eq
 801edf6:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 801edfa:	2200      	movne	r2, #0
 801edfc:	430b      	orrs	r3, r1
 801edfe:	4619      	mov	r1, r3
 801ee00:	4b16      	ldr	r3, [pc, #88]	; (801ee5c <rint+0x10c>)
 801ee02:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801ee06:	ed94 6b00 	vldr	d6, [r4]
 801ee0a:	4610      	mov	r0, r2
 801ee0c:	ec41 0b17 	vmov	d7, r0, r1
 801ee10:	ee36 7b07 	vadd.f64	d7, d6, d7
 801ee14:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ee18:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ee1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ee20:	e008      	b.n	801ee34 <rint+0xe4>
 801ee22:	2833      	cmp	r0, #51	; 0x33
 801ee24:	dd09      	ble.n	801ee3a <rint+0xea>
 801ee26:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801ee2a:	d1cd      	bne.n	801edc8 <rint+0x78>
 801ee2c:	ed9d 7b00 	vldr	d7, [sp]
 801ee30:	ee37 7b07 	vadd.f64	d7, d7, d7
 801ee34:	ed8d 7b00 	vstr	d7, [sp]
 801ee38:	e7c6      	b.n	801edc8 <rint+0x78>
 801ee3a:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 801ee3e:	f04f 31ff 	mov.w	r1, #4294967295
 801ee42:	40c1      	lsrs	r1, r0
 801ee44:	420a      	tst	r2, r1
 801ee46:	d0bf      	beq.n	801edc8 <rint+0x78>
 801ee48:	0849      	lsrs	r1, r1, #1
 801ee4a:	420a      	tst	r2, r1
 801ee4c:	bf1f      	itttt	ne
 801ee4e:	ea22 0101 	bicne.w	r1, r2, r1
 801ee52:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 801ee56:	4102      	asrne	r2, r0
 801ee58:	430a      	orrne	r2, r1
 801ee5a:	e7d0      	b.n	801edfe <rint+0xae>
 801ee5c:	08024a68 	.word	0x08024a68
 801ee60:	000fffff 	.word	0x000fffff
 801ee64:	00000000 	.word	0x00000000

0801ee68 <scalbn>:
 801ee68:	b500      	push	{lr}
 801ee6a:	ed2d 8b02 	vpush	{d8}
 801ee6e:	b083      	sub	sp, #12
 801ee70:	ed8d 0b00 	vstr	d0, [sp]
 801ee74:	9b01      	ldr	r3, [sp, #4]
 801ee76:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801ee7a:	b9a2      	cbnz	r2, 801eea6 <scalbn+0x3e>
 801ee7c:	9a00      	ldr	r2, [sp, #0]
 801ee7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ee82:	4313      	orrs	r3, r2
 801ee84:	d03a      	beq.n	801eefc <scalbn+0x94>
 801ee86:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801ef40 <scalbn+0xd8>
 801ee8a:	4b35      	ldr	r3, [pc, #212]	; (801ef60 <scalbn+0xf8>)
 801ee8c:	ee20 7b07 	vmul.f64	d7, d0, d7
 801ee90:	4298      	cmp	r0, r3
 801ee92:	ed8d 7b00 	vstr	d7, [sp]
 801ee96:	da11      	bge.n	801eebc <scalbn+0x54>
 801ee98:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 801ef48 <scalbn+0xe0>
 801ee9c:	ed9d 6b00 	vldr	d6, [sp]
 801eea0:	ee27 7b06 	vmul.f64	d7, d7, d6
 801eea4:	e007      	b.n	801eeb6 <scalbn+0x4e>
 801eea6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801eeaa:	428a      	cmp	r2, r1
 801eeac:	d10a      	bne.n	801eec4 <scalbn+0x5c>
 801eeae:	ed9d 7b00 	vldr	d7, [sp]
 801eeb2:	ee37 7b07 	vadd.f64	d7, d7, d7
 801eeb6:	ed8d 7b00 	vstr	d7, [sp]
 801eeba:	e01f      	b.n	801eefc <scalbn+0x94>
 801eebc:	9b01      	ldr	r3, [sp, #4]
 801eebe:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801eec2:	3a36      	subs	r2, #54	; 0x36
 801eec4:	4402      	add	r2, r0
 801eec6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801eeca:	428a      	cmp	r2, r1
 801eecc:	dd0a      	ble.n	801eee4 <scalbn+0x7c>
 801eece:	ed9f 8b20 	vldr	d8, [pc, #128]	; 801ef50 <scalbn+0xe8>
 801eed2:	eeb0 0b48 	vmov.f64	d0, d8
 801eed6:	ed9d 1b00 	vldr	d1, [sp]
 801eeda:	f000 f843 	bl	801ef64 <copysign>
 801eede:	ee20 7b08 	vmul.f64	d7, d0, d8
 801eee2:	e7e8      	b.n	801eeb6 <scalbn+0x4e>
 801eee4:	2a00      	cmp	r2, #0
 801eee6:	dd10      	ble.n	801ef0a <scalbn+0xa2>
 801eee8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801eeec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801eef0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801eef4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801eef8:	e9cd 0100 	strd	r0, r1, [sp]
 801eefc:	ed9d 0b00 	vldr	d0, [sp]
 801ef00:	b003      	add	sp, #12
 801ef02:	ecbd 8b02 	vpop	{d8}
 801ef06:	f85d fb04 	ldr.w	pc, [sp], #4
 801ef0a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801ef0e:	da06      	bge.n	801ef1e <scalbn+0xb6>
 801ef10:	f24c 3350 	movw	r3, #50000	; 0xc350
 801ef14:	4298      	cmp	r0, r3
 801ef16:	dcda      	bgt.n	801eece <scalbn+0x66>
 801ef18:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 801ef48 <scalbn+0xe0>
 801ef1c:	e7d9      	b.n	801eed2 <scalbn+0x6a>
 801ef1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ef22:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ef26:	3236      	adds	r2, #54	; 0x36
 801ef28:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ef2c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801ef30:	ec41 0b17 	vmov	d7, r0, r1
 801ef34:	ed9f 6b08 	vldr	d6, [pc, #32]	; 801ef58 <scalbn+0xf0>
 801ef38:	e7b2      	b.n	801eea0 <scalbn+0x38>
 801ef3a:	bf00      	nop
 801ef3c:	f3af 8000 	nop.w
 801ef40:	00000000 	.word	0x00000000
 801ef44:	43500000 	.word	0x43500000
 801ef48:	c2f8f359 	.word	0xc2f8f359
 801ef4c:	01a56e1f 	.word	0x01a56e1f
 801ef50:	8800759c 	.word	0x8800759c
 801ef54:	7e37e43c 	.word	0x7e37e43c
 801ef58:	00000000 	.word	0x00000000
 801ef5c:	3c900000 	.word	0x3c900000
 801ef60:	ffff3cb0 	.word	0xffff3cb0

0801ef64 <copysign>:
 801ef64:	ec51 0b10 	vmov	r0, r1, d0
 801ef68:	ee11 0a90 	vmov	r0, s3
 801ef6c:	ee10 2a10 	vmov	r2, s0
 801ef70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801ef74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801ef78:	ea41 0300 	orr.w	r3, r1, r0
 801ef7c:	ec43 2b10 	vmov	d0, r2, r3
 801ef80:	4770      	bx	lr
	...

0801ef84 <__errno>:
 801ef84:	4b01      	ldr	r3, [pc, #4]	; (801ef8c <__errno+0x8>)
 801ef86:	6818      	ldr	r0, [r3, #0]
 801ef88:	4770      	bx	lr
 801ef8a:	bf00      	nop
 801ef8c:	20000020 	.word	0x20000020

0801ef90 <_init>:
 801ef90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef92:	bf00      	nop
 801ef94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ef96:	bc08      	pop	{r3}
 801ef98:	469e      	mov	lr, r3
 801ef9a:	4770      	bx	lr

0801ef9c <_fini>:
 801ef9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef9e:	bf00      	nop
 801efa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801efa2:	bc08      	pop	{r3}
 801efa4:	469e      	mov	lr, r3
 801efa6:	4770      	bx	lr
